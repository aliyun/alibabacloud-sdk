/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alikafka';
  @version = '2019-09-16';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to transfer the cloud resource.

>  You can use resource groups to manage resources owned by your Alibaba Cloud account. Resource groups simplify the resource and permission management of your Alibaba Cloud account. For more information, see [What is resource management?](https://help.aliyun.com/document_detail/94475.html)

This parameter is required.', example='rg-ac***********7q', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource to which you want to attach a tag. Only the ID of a Message Queue for Apache Kafka instance is supported.

For example, if the ID of the instance is alikafka_post-cn-v0h1fgs2xxxx, the resource ID is alikafka_post-cn-v0h1fgs2xxxx.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the new resource group. You can view the available resource groups in the Resource Management console.', example='rg-ac***********7q'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5CA600C-7D5A-45B5-B6DB-44FAC2C****'),
  success?: long(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConvertPostPayOrderRequest {
  duration?: int32(name='Duration', description='The subscription duration. Unit: months. Valid values:

*   **1~12**
*   **24**
*   **36**', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ConvertPostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20497346575****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ConvertPostPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertPostPayOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConvertPostPayOrder  ConvertPostPayOrderRequest
  * @return ConvertPostPayOrderResponse
 */
async function convertPostPayOrder(request: ConvertPostPayOrderRequest): ConvertPostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertPostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAclRequest {
  aclOperationType: string(name='AclOperationType', description='The type of the operation allowed by the access control list (ACL). Valid values:

*   **Write**
*   **Read**
*   **Describe**: reads of transactional IDs.
*   **IdempotentWrite**: idempotent data writes to clusters.
*   **IDEMPOTENT_WRITE**: idempotent data writes to clusters. This value is available only for ApsaraMQ for Kafka V3 instances.
*   **DESCRIBE_CONFIGS**: queries of configurations. This value is available only for ApsaraMQ for Kafka V3 instances.

This parameter is required.', example='Read', position='Query'),
  aclOperationTypes?: string(name='AclOperationTypes', description='The types of operations allowed by the ACL. Separate multiple operation types with commas (,).

Valid values:

*   **Write**
*   **Read**
*   **Describe**: reads of transactional IDs.
*   **IdempotentWrite**: idempotent data writes to clusters.
*   **IDEMPOTENT_WRITE**: idempotent data writes to clusters. This value is available only for ApsaraMQ for Kafka V3 instances.
*   **DESCRIBE_CONFIGS**: queries of configurations. This value is available only for ApsaraMQ for Kafka V3 instances.

>  This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='Write,Read', position='Query'),
  aclPermissionType?: string(name='AclPermissionType', description='The authorization method. Valid values:

*   **DENY**
*   **ALLOW**

>  This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='DENY', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The resource name.

*   The value can be a topic name, a group ID, a cluster name, or a transaction ID.
*   You can use an asterisk (\\*) to specify the names of all resources of the specified type.

> You can use an asterisk (\\*) to query the resources on which permissions are granted only after you grant the user the required permissions on all resources.

This parameter is required.', example='X****', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', description='The matching mode. Valid values:

*   **LITERAL**: exact match
*   **PREFIXED**: prefix match

This parameter is required.', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**
*   **Group**
*   **Cluster**
*   **TransactionalId**: transactional ID

This parameter is required.', example='Group', position='Query'),
  host?: string(name='Host', description='The source IP address.

> -  You can specify only a specific IP address or use the asterisk (\\*) wildcard character to specify all IP addresses. CIDR blocks are not supported.
> -  This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='*', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The username.

*   You can use an asterisk (\\*) to specify all usernames.

> You can use an asterisk (\\*) to query the authorized users only after you grant the required permissions to all users.

This parameter is required.', example='test***', position='Query'),
}

model CreateAclResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='56729737-C428-4E1B-AC68-7A8C2D5****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAcl  CreateAclRequest
  * @return CreateAclResponse
 */
async function createAcl(request: CreateAclRequest): CreateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.

*   The value can contain only letters, digits, hyphens (-), and underscores (_), and the value must contain at least one letter or digit.
*   The value must be 3 to 128 characters in length. If the value that you specify contains more than 128 characters, the system automatically truncates the value to 128 characters.
*   After a consumer group is created, you cannot change the name of the consumer group.

This parameter is required.', example='test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-0pp1l9z8****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The description of the consumer group.', example='test', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key.

*   You must specify this parameter.
*   The tag key can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.

This parameter is required.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   You can leave this parameter empty.
*   The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E57A8862-DF68-4055-8E55-B80CB4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConsumerGroup  CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePostPayOrderRequest {
  deployType: int32(name='DeployType', description='The deployment mode of the instance. Valid values:

*   **4**: deploys the instance that allows access from the Internet and a VPC.
*   **5**: deploys the instance that allows access only from a VPC.

This parameter is required.', example='5', position='Query'),
  diskSize?: int32(name='DiskSize', description='The disk size.

For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='500', position='Query'),
  diskType?: string(name='DiskType', description='The disk type. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='0', position='Query'),
  eipMax?: int32(name='EipMax', description='The maximum Internet traffic in the instance.

*   If you set **DeployType** to **4**, you must configure this parameter.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='0', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic in the instance. We recommend that you do not configure this parameter.

*   You must configure at least one of IoMax and IoMaxSpec. If you configure both parameters, the value of IoMaxSpec takes effect. We recommend that you configure only IoMaxSpec.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='20', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   You must configure at least one of IoMax and IoMaxSpec. If you configure both parameters, the value of IoMaxSpec takes effect. We recommend that you configure only IoMaxSpec.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='alikafka.hw.2xlarge', position='Query'),
  paidType?: int32(name='PaidType', description='The billing method of the instance. Valid values:

*   1: the pay-as-you-go billing method for ApsaraMQ for Kafka V2 instances.
*   3: the pay-as-you-go billing method for serverless ApsaraMQ for Kafka V3 instances.', example='1', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must configure one of PartitionNum and TopicQuota. We recommend that you configure only ParittionNum.
*   If you configure PartitionNum and TopicQuota at the same time, the system verifies whether the price of the partitions equals the price of the topics based on the previous topic-based selling mode. If the price of the partitions does not equal the price of the topics, an error is returned. If the price of the partitions equals the price of the topics, the instance is purchased based on the partition number.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  serverlessConfig?: {
    reservedPublishCapacity?: long(name='ReservedPublishCapacity', description='The reserved capacity for publishing messages. You can specify only an integer for this parameter. Minimum value: 60.

>  The actual maximum reserved capacity for publishing messages varies based on available resources in the region. The actual range displayed on the buy page shall prevail.', example='60'),
    reservedSubscribeCapacity?: long(name='ReservedSubscribeCapacity', description='The reserved capacity for subscribing to messages. You can specify only an integer for this parameter. Minimum value: 20.

>  The actual maximum reserved capacity for subscribing to messages varies based on available resources in the region. The actual range displayed on the buy page shall prevail.', example='50'),
  }(name='ServerlessConfig', description='The parameters configured for the serverless ApsaraMQ for Kafka V3 instance. When you create a Serverless ApsaraMQ for Kafka V3 serverless instance, you must configure these parameters.', shrink='json', position='Query'),
  specType?: string(name='SpecType', description='The instance edition.

Valid values if you set PaidType to 1:

*   normal: Standard Edition (High Write)
*   professional: Professional Edition (High Write)
*   professionalForHighRead: Professional Edition (High Read)

Valid values if you set PaidType to 3:

*   normal: Serverless Standard Edition

For more information about the instance editions, see [Billing](https://help.aliyun.com/document_detail/84737.html).', example='normal', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of tag N.

*   Valid values of N: 1 to 20.
*   If this parameter is left empty, the keys of all tags are matched.
*   The tag key must be up to 128 characters in length. It cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)

This parameter is required.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N.

*   Valid values of N: 1 to 20.
*   If you do not specify a tag key, you cannot specify a tag value. If this parameter is not configured, all tag values are matched.
*   The tag value must be 1 to 128 characters in length. It cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must configure one of PartitionNum and TopicQuota. We recommend that you configure only ParittionNum.
*   If you configure PartitionNum and TopicQuota at the same time, the system verifies whether the price of the partitions equals the price of the topics based on the previous topic-based selling mode. If the price of the partitions does not equal the price of the topics, an error is returned. If the price of the partitions equals the price of the topics, the instance is purchased based on the partition number.
*   The default value of TopicQuota varies based on the value of IoMaxSpec. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create a serverless ApsaraMQ for Kafka V3 instance, you do not need to configure this parameter.', example='50', position='Query'),
}

model CreatePostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20497346575****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreatePostPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePostPayOrderResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing method and pricing of pay-as-you-go Message Queue for Apache Kafka instances. For more information, see [Billing](https://help.aliyun.com/document_detail/84737.html).
  * @param request  the request parameters of CreatePostPayOrder  CreatePostPayOrderRequest
  * @return CreatePostPayOrderResponse
 */
async function createPostPayOrder(request: CreatePostPayOrderRequest): CreatePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrePayOrderRequest {
  confluentConfig?: {
    connectCU?: int32(name='ConnectCU', description='The number of CPU cores of Connect.', example='4'),
    connectReplica?: int32(name='ConnectReplica', description='The number of replicas of Connect.', example='2'),
    controlCenterCU?: int32(name='ControlCenterCU', description='The number of CPU cores of Control Center.', example='4'),
    controlCenterReplica?: int32(name='ControlCenterReplica', description='The number of replicas of Control Center.', example='1'),
    controlCenterStorage?: int32(name='ControlCenterStorage', description='The disk capacity of Control Center. Unit: GB', example='300'),
    kafkaCU?: int32(name='KafkaCU', description='The number of CPU cores of the Kafka broker.', example='4'),
    kafkaReplica?: int32(name='KafkaReplica', description='The number of replicas of the Kafka broker.', example='3'),
    kafkaRestProxyCU?: int32(name='KafkaRestProxyCU', description='The number of CPU cores of Kafka Rest Proxy.', example='4'),
    kafkaRestProxyReplica?: int32(name='KafkaRestProxyReplica', description='The number of replicas of Kafka Rest Proxy.', example='2'),
    kafkaStorage?: int32(name='KafkaStorage', description='The disk capacity of the Kafka broker. Unit: GB', example='800'),
    ksqlCU?: int32(name='KsqlCU', description='The number of CPU cores of ksqIDB.', example='4'),
    ksqlReplica?: int32(name='KsqlReplica', description='The number of replicas of ksqlDB.', example='2'),
    ksqlStorage?: int32(name='KsqlStorage', description='The disk capacity of ksqlDB. Unit: GB', example='100'),
    schemaRegistryCU?: int32(name='SchemaRegistryCU', description='The number of CPU cores of Schema Registry.', example='1'),
    schemaRegistryReplica?: int32(name='SchemaRegistryReplica', description='The number of replicas of Schema Registry.', example='2'),
    zooKeeperCU?: int32(name='ZooKeeperCU', description='The number of CPU cores of ZooKeeper.', example='2'),
    zooKeeperReplica?: int32(name='ZooKeeperReplica', description='The number of replicas of ZooKeeper.', example='3'),
    zooKeeperStorage?: int32(name='ZooKeeperStorage', description='The disk capacity of ZooKeeper. Unit: GB', example='100'),
  }(name='ConfluentConfig', description='The configurations of Confluent.

>  When you create an ApsaraMQ for Confluent instance, you must configure this parameter.', shrink='json', position='Query'),
  deployType?: int32(name='DeployType', description='The type of the network in which the instance is deployed. Valid values:

*   **4**: Internet and virtual private cloud (VPC)
*   **5**: VPC

>  If you create an ApsaraMQ for Confluent instance, set the value to 5. After the instance is created, you can specify whether to enable each component.', example='5', position='Query'),
  diskSize?: int32(name='DiskSize', description='The disk size. Unit: GB

For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='500', position='Query'),
  diskType?: string(name='DiskType', description='The disk type. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='0', position='Query'),
  duration?: int32(name='Duration', description='The subscription duration. Unit: months. Default value: 1. Valid values:

*   **1 to 12**', example='1', position='Query'),
  eipMax?: int32(name='EipMax', description='The maximum Internet traffic in the instance.

*   If you set **DeployType** to **4**, you must configure this parameter.
*   For information about the valid values, see [Pay-as-you-go](https://help.aliyun.com/document_detail/72142.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='0', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic in the instance. We recommend that you do not configure this parameter.

*   You must set one of **IoMax** and **IoMaxSpec**. If both parameters are configured, the value of **IoMaxSpec** is used. We recommend that you configure only **IoMaxSpec**.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='20', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   You must configure one of **IoMax** and **IoMaxSpec**. If both parameters are configured, the value of **IoMaxSpec** is used. We recommend that you configure only **IoMaxSpec**.
*   For more information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='alikafka.hw.2xlarge', position='Query'),
  paidType?: int32(name='PaidType', description='The billing method of the instance. Valid values:

*   **0**: the subscription billing method
*   **4**: the subscription billing method for ApsaraMQ for Confluent instances', example='1', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must configure one of PartitionNum and TopicQuota. We recommend that you configure only PartitionNum.
*   If you configure PartitionNum and TopicQuota at the same time, the system verifies whether the price of the partitions equals the price of the topics based on the previous topic-based selling mode. If the price of the partitions does not equal the price of the topics, an error is returned. If the price of the partitions equals the price of the topics, the instance is purchased based on the partition number.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  specType?: string(name='SpecType', description='The instance edition. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

For more information, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='normal', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of tag N.

*   Valid values of N: 1 to 20.
*   If this parameter is left empty, the keys of all tags are matched.
*   The tag key can be up to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)

This parameter is required.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N.

*   Valid values of N: 1 to 20.
*   This parameter can be left empty.
*   The tag value can be 1 to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must configure one of PartitionNum and TopicQuota. We recommend that you configure only PartitionNum.
*   If you configure PartitionNum and TopicQuota at the same time, the system verifies whether the price of the partitions equals the price of the topics based on the previous topic-based selling mode. If the price of the partitions does not equal the price of the topics, an error is returned. If the price of the partitions equals the price of the topics, the instance is purchased based on the partition number.
*   The default value of TopicQuota varies based on the value of IoMaxSpec. If the number of topics that you use exceeds the default value, you are charged additional fees.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  If you create an ApsaraMQ for Confluent instance, you do not need to configure this parameter.', example='50', position='Query'),
}

model CreatePrePayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20497346575****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreatePrePayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrePayOrderResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that you understand the billing methods and pricing of subscription ApsaraMQ for Kafka instances. For more information, see [Billing](https://help.aliyun.com/document_detail/84737.html).
  * *   If you create an ApsaraMQ for Kafka instance by calling this operation, the subscription duration is one month and the auto-renewal feature is enabled by default. The auto-renewal cycle is also one month. If you want to change the auto-renewal cycle or disable the auto-renewal feature, you can go to the [Renewal](https://renew.console.aliyun.com/#/ecs) page in the Alibaba Cloud Management Console.
  * @param request  the request parameters of CreatePrePayOrder  CreatePrePayOrderRequest
  * @return CreatePrePayOrderResponse
 */
async function createPrePayOrder(request: CreatePrePayOrderRequest): CreatePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateSaslUserRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  mechanism?: string(name='Mechanism', description='The encryption method. Valid values:

*   SCRAM-SHA-512 (default)
*   SCRAM-SHA-256

> 

*   This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='SCRAM-SHA-256', position='Query'),
  password: string(name='Password', description='The password of the SASL user.

This parameter is required.', example='12***', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the Simple Authentication and Security Layer (SASL) user. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. ApsaraMQ for Kafka provides an improved PLAIN mechanism that allows you to dynamically add SASL users without the need to restart an instance.
*   **SCRAM**: a mechanism that uses usernames and passwords to verify user identities. Compared with the PLAIN mechanism, this mechanism provides better security protection. ApsaraMQ for Kafka uses the SCRAM-SHA-256 algorithm.
*   **LDAP**: This value is available only for the SASL users of ApsaraMQ for Confluent instances.

Default value: **plain**.', example='plain', position='Query'),
  username: string(name='Username', description='The name of the SASL user.

This parameter is required.', example='test***', position='Query'),
}

model CreateSaslUserResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5CA600C-7D5A-45B5-B6DB-44FAC2C****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateSaslUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSaslUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSaslUser  CreateSaslUserRequest
  * @return CreateSaslUserResponse
 */
async function createSaslUser(request: CreateSaslUserRequest): CreateSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateScheduledScalingRuleRequest {
  durationMinutes: int32(name='DurationMinutes', description='The duration of each scheduled scaling task. Unit: minutes.

>  The value of this parameter must be greater than or equal to 15.

This parameter is required.', example='60', position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the scheduled scaling rule. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  firstScheduledTime: long(name='FirstScheduledTime', description='The time when the scheduled scaling task is executed.

If you set ScheduleType to at, make sure that the value of this parameter is at least 30 minutes later than the current point in time.

>Notice: To prevent the broker from repeatedly executing instance upgrade and downgrade tasks, make sure that the interval between two consecutive scheduled scaling tasks is at least 60 minutes.

This parameter is required.', example='1714467540000', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_serverless-cn-vxxxxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  repeatType?: string(name='RepeatType', description='The frequency to execute the scheduled scaling task. This parameter is required only if you set ScheduleType to repeat. Valid values:

*   Daily: The scheduled scaling task is executed every day.

*   Weekly: The scheduled scaling task is executed every week.', example='Weekly', position='Query'),
  reservedPubFlow: int32(name='ReservedPubFlow', description='The reserved production capacity for scheduled scaling. Unit: MB/s.

>  You must specify a higher value than the instance specification for at least one of ReservedPubFlow and ReservedSubFlow.

This parameter is required.', example='120', position='Query'),
  reservedSubFlow: int32(name='ReservedSubFlow', description='The reserved consumption capacity for scheduled scaling. Unit: MB/s.

>  You must specify a higher value than the instance specification for at least one of ReservedPubFlow and ReservedSubFlow.

This parameter is required.', example='120', position='Query'),
  ruleName: string(name='RuleName', description='The name of the scheduled scaling rule.

>  The name of the scheduled scaling rule cannot be the same as the names of other rules for the instance.

This parameter is required.', example='test', position='Query'),
  scheduleType: string(name='ScheduleType', description='The type of the scheduled scaling task. Valid values:

*   at: The scheduled scaling task is executed only once.
*   repeat: The scheduled scaling task is repeatedly executed.

This parameter is required.', example='at', position='Query'),
  timeZone: string(name='TimeZone', description='The time zone in Coordinated Universal Time (UTC).

This parameter is required.', example='GMT+8', position='Query'),
  weeklyTypes?: [ string ](name='WeeklyTypes', description='The day on which the scheduled scaling task is executed every week. You can specify multiple days.', shrink='json', position='Query'),
}

model CreateScheduledScalingRuleResponseBody = {
  code?: long(name='Code', description='The response code. The value 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='DB6F1BEA-903B-4FD8-8809-46E7E9CE***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='True'),
}

model CreateScheduledScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledScalingRuleResponseBody(name='body'),
}

/**
  * @description ###### [](#-v3-serverless-)This operation is supported only by serverless ApsaraMQ for Kafka V3 instances.
  * @param request  the request parameters of CreateScheduledScalingRule  CreateScheduledScalingRuleRequest
  * @return CreateScheduledScalingRuleResponse
 */
async function createScheduledScalingRule(request: CreateScheduledScalingRuleRequest): CreateScheduledScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScheduledScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  compactTopic?: boolean(name='CompactTopic', description='The log cleanup policy that is used for the topic. This parameter is available only when LocalTopic is set to true. Valid values:

*   false: The topic uses the default log cleanup policy.
*   true: The topic uses the log compaction policy.', example='false', position='Query'),
  config?: string(name='Config', description='The additional configurations.

*   The value must be in JSON format.
*   Set Key to **replications**. This value specifies the number of replicas of the topic. The value must be an integer that ranges from 1 to 3.
*   You can configure this parameter only if you set **LocalTopic** to **true** or specify **Open Source Edition (Local Disk)** as the instance edition.****

>  If you specify replications in this parameter, **ReplicationFactor** does not take effect.', example='{"replications": 3}', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  localTopic?: boolean(name='LocalTopic', description='The type of storage that the topic uses. Valid values:

*   false: The topic uses cloud storage.
*   true: The topic uses local storage.', example='false', position='Query'),
  minInsyncReplicas?: long(name='MinInsyncReplicas', description='The minimum number of in-sync replicas (ISRs).

*   This parameter is available only when **LocalTopic** is set to **true**, or the instance is of the **Open Source Edition (Local Disk)**.****
*   The value of this parameter must be smaller than the value of ReplicationFactor.
*   Valid values: 1 to 3.', example='1', minimum=1, maximum=3, position='Query'),
  partitionNum?: string(name='PartitionNum', description='The number of partitions in the topic.

*   Valid values: 1 to 360.
*   In the ApsaraMQ for Kafka console, you can view the number of partitions that the system recommends based on the specifications of the instance. We recommend that you specify the number that is recommended by the system as the value of this parameter to reduce the risk of data skew.

Default values:

*   ApsaraMQ for Kafka V2 instance: 12
*   ApsaraMQ for Kafka V3 instance: 3', example='12', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance in which you want to create a topic.

This parameter is required.', example='cn-hangzhou', position='Query'),
  remark: string(name='Remark', description='The description of the topic.

*   The description can contain only letters, digits, hyphens (-), and underscores (_).
*   The description must be 3 to 64 characters in length.

This parameter is required.', example='alikafka_topic_test', position='Query'),
  replicationFactor?: long(name='ReplicationFactor', description='The number of replicas for the topic.

*   This parameter is available only when **LocalTopic** is set to **true**, or the instance is of the **Open Source Edition (Local Disk)**.****
*   Valid values: 1 to 3.

> If you set this parameter to **1**, data loss may occur. Exercise caution when you configure this parameter.', example='3', minimum=1, maximum=3, position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key.

*   If you do not specify this parameter, the keys of all tags are matched.
*   The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.

This parameter is required.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   You can leave this parameter empty.
*   The tag value must be 1 to 128 characters in length and cannot contain http:// or https://. The tag value cannot start with aliyun or acs:.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags that you want to add to the topic.', position='Query'),
  topic: string(name='Topic', description='The topic name.

*   The name can contain only letters, digits, hyphens (-), and underscores (_).
*   The name must be 3 to 64 characters in length. If the name that you specify contains more than 64 characters, the system automatically truncates the name.
*   After a topic is created, you cannot change the name of the topic.

This parameter is required.', example='alikafka_topic_test', position='Query'),
}

model CreateTopicResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9C0F207C-77A6-43E5-991C-9D98510A****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

/**
  * @description *   Each Alibaba Cloud account can call this operation up to once per second.
  * *   The maximum number of topics that you can create in an instance is determined by the specification of the instance.
  * @param request  the request parameters of CreateTopic  CreateTopicRequest
  * @return CreateTopicResponse
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAclRequest {
  aclOperationType: string(name='AclOperationType', description='The operation allowed by the access control list (ACL). Valid values:

*   **Write**
*   **Read**
*   **Describe**: reads of transactional IDs
*   **IdempotentWrite**: idempotent data writes to clusters
*   **IDEMPOTENT_WRITE**: idempotent data writes to clusters. This value is available only for ApsaraMQ for Kafka V3 instances.
*   **DESCRIBE_CONFIGS**: configuration queries. This value is available only for ApsaraMQ for Kafka V3 instances.

This parameter is required.', example='Write', position='Query'),
  aclOperationTypes?: string(name='AclOperationTypes', description='The operations allowed by the ACL. Separate multiple operations with commas (,).

Valid values:

*   **Write**: data writes
*   **Read**: data reads
*   **Describe**: reads of transactional IDs
*   **IdempotentWrite**: idempotent data writes to clusters
*   **IDEMPOTENT_WRITE**: idempotent data writes to clusters. This value is available only for ApsaraMQ for Kafka V3 instances.
*   **DESCRIBE_CONFIGS**: queries of configurations. This value is available only for ApsaraMQ for Kafka V3 instances.

>  This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='Write,Read', position='Query'),
  aclPermissionType?: string(name='AclPermissionType', description='The authorization method. Valid values:

*   Deny
*   ALLOW

>  This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='DENY', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The name of the resource.

*   The value can be the name of a topic or consumer group.
*   You can use an asterisk (\\*) to indicate the names of all topics or consumer groups.

This parameter is required.', example='demo', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', description='The mode that is used to match resources. Valid values:

*   **LITERAL:** full match
*   **PREFIXED**: prefix match

This parameter is required.', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**: topic
*   **Group**: consumer group
*   **Cluster**: cluster
*   **TransactionalId**: transactional ID

This parameter is required.', example='Topic', position='Query'),
  host?: string(name='Host', description='The IP address of the source.

> - You can specify only a specific IP address or use the asterisk (\\*) wildcard character to specify all IP addresses. CIDR blocks are not supported.
>- This parameter is available only for serverless ApsaraMQ for Kafka V3 instances.', example='*', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The name of the user.

This parameter is required.', example='test12****', position='Query'),
}

model DeleteAclResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0740227-AA9A-4E14-8E9F-36ED665****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAcl  DeleteAclRequest
  * @return DeleteAclResponse
 */
async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.

This parameter is required.', example='CID-test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConsumerGroup  DeleteConsumerGroupRequest
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSaslUserRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  mechanism?: string(name='Mechanism', description='The encryption method. Valid values:

*   SCRAM-SHA-512. This is the default value.
*   SCRAM-SHA-256

>  This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='SCRAM-SHA-256', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the Simple Authentication and Security Layer (SASL) user. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. ApsaraMQ for Kafka provides an improved PLAIN mechanism that allows you to dynamically add SASL users without the need to restart an instance.
*   **SCRAM**: a mechanism that uses usernames and passwords to verify user identities. Compared with the PLAIN mechanism, this mechanism provides better security protection. ApsaraMQ for Kafka uses the SCRAM-SHA-256 algorithm.
*   **LDAP**: This value is available only for the SASL users of ApsaraMQ for Confluent instances.

Default value: **plain**.', example='scram', position='Query'),
  username: string(name='Username', description='The name of the user.

This parameter is required.', example='test***', position='Query'),
}

model DeleteSaslUserResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. If the request is successful, 200 is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='3CB89F5C-CD97-4C1D-BC7C-FEDEC2F4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteSaslUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSaslUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSaslUser  DeleteSaslUserRequest
  * @return DeleteSaslUserResponse
 */
async function deleteSaslUser(request: DeleteSaslUserRequest): DeleteSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScheduledScalingRuleRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_serverless-cn-vxxxxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  ruleName: string(name='RuleName', description='The name of the scheduled scaling rule.

>  You can delete only rules that are disabled and rules that are scheduled only once and have been executed.

This parameter is required.', example='rule-name-test', position='Query'),
}

model DeleteScheduledScalingRuleResponseBody = {
  code?: long(name='Code', description='The responses code. The value 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='True'),
}

model DeleteScheduledScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledScalingRuleResponseBody(name='body'),
}

/**
  * @description ###### [](#-v3-serverless-)This operation is supported only by serverless ApsaraMQ for Kafka V3 instance.
  * @param request  the request parameters of DeleteScheduledScalingRule  DeleteScheduledScalingRuleRequest
  * @return DeleteScheduledScalingRuleResponse
 */
async function deleteScheduledScalingRule(request: DeleteScheduledScalingRuleRequest): DeleteScheduledScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScheduledScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The name of the topic.

This parameter is required.', example='test', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTopic  DeleteTopicRequest
  * @return DeleteTopicResponse
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAclsRequest {
  aclOperationType?: string(name='AclOperationType', description='The types of operations allowed by the ACL. Separate multiple operation types with commas (,).
- Valid values:
- Write
- Read
- Describe: reads of transactional IDs.
- IdempotentWrite: idempotent data writes to clusters.
- IDEMPOTENT_WRITE: idempotent data writes to clusters. This value is available only for ApsaraMQ for Kafka V3 instances.
- DESCRIBE_CONFIGS: queries of configurations. This value is available only for ApsaraMQ for Kafka V3 instances.
> This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='Write', position='Query'),
  aclPermissionType?: string(name='AclPermissionType', description='The authorization method. Valid values:
- DENY
- ALLOW
> This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='DENY', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The resource name.

*   The value can be the name of a topic or consumer group.
*   You can use an asterisk (\\*) to specify the names of all topics or consumer groups.

> You can query the resources on which permissions are granted only after you grant the user the required permissions on all resources.

This parameter is required.', example='demo', position='Query'),
  aclResourcePatternType?: string(name='AclResourcePatternType', description='The match mode. Valid values:

*   LITERAL: full-name match
*   PREFIXED: prefix match', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**
*   **Group**

This parameter is required.', example='Topic', position='Query'),
  host?: string(name='Host', description='The source IP address.
>-  You can specify only a specific IP address or use the asterisk (*) wildcard character to specify all IP addresses. CIDR blocks are not supported.
> - This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='*', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-v0h1cng****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The username.

*   You can use an asterisk (\\*) to specify all users.

> You can use an asterisk (\\*) to query the authorized users only after you grant the required permissions to all users.

This parameter is required.', example='test12****', position='Query'),
}

model DescribeAclsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  kafkaAclList?: {
    kafkaAclVO?: [ 
    {
      aclOperationType?: string(name='AclOperationType', description='The types of operations allowed by the ACL. Separate multiple operation types with commas (,).
- Valid values:
- Write
- Read
- Describe: reads of transactional IDs.
- IdempotentWrite: idempotent data writes to clusters.
- IDEMPOTENT_WRITE: idempotent data writes to clusters. This value is available only for ApsaraMQ for Kafka V3 instances.
- DESCRIBE_CONFIGS: queries of configurations. This value is available only for ApsaraMQ for Kafka V3 instances.
> This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='Write'),
      aclPermissionType?: string(name='AclPermissionType', description='The authorization method. Valid values:
- DENY
- ALLOW
> This parameter is available only for ApsaraMQ for Kafka V3 serverless instances.', example='DENY'),
      aclResourceName?: string(name='AclResourceName', description='The resource name.

*   The value can be the name of a topic or consumer group.
*   You can use the asterisk (\\*) wildcard character to specify the names of all topics or consumer groups.', example='demo'),
      aclResourcePatternType?: string(name='AclResourcePatternType', description='The matching mode. Valid values:

*   **LITERAL:** full-name match
*   **PREFIXED**: prefix match', example='LITERAL'),
      aclResourceType?: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**
*   **Group**', example='Topic'),
      host?: string(name='Host', description='The host.', example='****'),
      username?: string(name='Username', description='The username.', example='test12***'),
    }
  ](name='KafkaAclVO')
  }(name='KafkaAclList', description='The access control lists (ACLs).'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46496E38-881E-4719-A2F3-F3DA6AE****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeAclsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAcls  DescribeAclsRequest
  * @return DescribeAclsResponse
 */
async function describeAcls(request: DescribeAclsRequest): DescribeAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAcls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSaslUsersRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeSaslUsersResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E3B3592-5994-4F65-A61E-E62A77A****'),
  saslUserList?: {
    saslUserVO?: [ 
    {
      mechanism?: string(name='Mechanism', description='The encryption method.

>  This field is available only for serverless ApsaraMQ for Kafka V3 instances.', example='SCRAM-SHA-256'),
      password?: string(name='Password', description='The password.', example='******'),
      type?: string(name='Type', description='The type of the SASL user. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. ApsaraMQ for Kafka provides an improved PLAIN mechanism that allows you to dynamically add SASL users without the need to restart an instance.
*   **SCRAM**: a mechanism that uses usernames and passwords to verify user identities. Compared with the PLAIN mechanism, this mechanism provides better security protection. ApsaraMQ for Kafka uses the SCRAM-SHA-256 algorithm.
*   **LDAP**: This value is available only for the SASL users of ApsaraMQ for Confluent instances.

Default value: **plain**.', example='scram'),
      username?: string(name='Username', description='The username.', example='test12***'),
    }
  ](name='SaslUserVO')
  }(name='SaslUserList', description='The Simple Authentication and Security Layer (SASL) users.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeSaslUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSaslUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSaslUsers  DescribeSaslUsersRequest
  * @return DescribeSaslUsersResponse
 */
async function describeSaslUsers(request: DescribeSaslUsersRequest): DescribeSaslUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSaslUsers', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoGroupCreationRequest {
  enable: boolean(name='Enable', description='Specify whether to enable the flexible group creation feature. Valid values:

*   **true**: enables the flexible group creation feature.
*   **false**: disabled the flexible group creation feature.

This parameter is required.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

You can call the [GetInstanceList](https://help.aliyun.com/document_detail/437663.html) operation to query instances.

This parameter is required.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model EnableAutoGroupCreationResponseBody = {
  code?: int32(name='Code', description='The returned HTTP status code.

If the value **200** is returned, the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A421CCD7-5BC5-4B32-8DD8-64668A8FCB56'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model EnableAutoGroupCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAutoGroupCreationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableAutoGroupCreation  EnableAutoGroupCreationRequest
  * @return EnableAutoGroupCreationResponse
 */
async function enableAutoGroupCreation(request: EnableAutoGroupCreationRequest): EnableAutoGroupCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoGroupCreation', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoTopicCreationRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  operate: string(name='Operate', description='The operation that you want to perform. Valid values:

*   enable: enables the automatic topic creation feature.
*   disable: disables the automatic topic creation feature.
*   updatePartition: changes the number of partitions in topics that are automatically created.

This parameter is required.', example='enable', position='Query'),
  partitionNum?: long(name='PartitionNum', description='The changed number of partitions in topics that are automatically created.

This parameter takes effect only if you set Operate to updatePartition.', example='12', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model EnableAutoTopicCreationResponseBody = {
  code?: int32(name='Code', description='The returned status code. If the request is successful, 200 is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E3B3592-5994-4F65-A61E-E62A77A7***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model EnableAutoTopicCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAutoTopicCreationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableAutoTopicCreation  EnableAutoTopicCreationRequest
  * @return EnableAutoTopicCreationResponse
 */
async function enableAutoTopicCreation(request: EnableAutoTopicCreationRequest): EnableAutoTopicCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoTopicCreation', 'POST', '/', 'json', false, 'json', request);
}

model GetAllInstanceIdListRequest {
  regionId?: string(name='RegionId', description='The region ID of the instance. This parameter is reserved.', example='cn-hangzhou', position='Query'),
}

model GetAllInstanceIdListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  instanceIds?: map[string]any(name='InstanceIds', description='The IDs of instances that are managed by the Alibaba Cloud account in all the regions.', example='[{"cn-shenzhen": ["alikafka_post-cn-7pp2btvo****"],"us-west-1": ["alikafka_pre-cn-i7m2lxid****"],"cn-hangzhou": ["alikafka_pre-cn-i7m2hflj****","alikafka_pre-cn-zvp2hsje****","alikafka_pre-cn-zvp2kvc9****"]}]'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetAllInstanceIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllInstanceIdListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAllInstanceIdList  GetAllInstanceIdListRequest
  * @return GetAllInstanceIdListResponse
 */
async function getAllInstanceIdList(request: GetAllInstanceIdListRequest): GetAllInstanceIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllInstanceIdList', 'POST', '/', 'json', false, 'json', request);
}

model GetAllowedIpListRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-mp91inkw****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetAllowedIpListResponseBody = {
  allowedList?: {
    deployType?: int32(name='DeployType', description='The deployment mode of the instance. Valid values:

*   **4**: allows access from the Internet and a virtual private cloud (VPC).
*   **5**: allows access from a VPC.

>  Only integrators need to concern themselves with the value of this parameter.', example='4'),
    internetList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup', description='The group to which the IP address whitelist belongs.'),
        allowedIpList?: [ string ](name='AllowedIpList', description='The information about the IP address whitelist.'),
        portRange?: string(name='PortRange', description='The port range. Valid value:

**9093/9093**.', example='9093/9093'),
      }
    ](name='InternetList', description='The whitelist for access from the Internet.'),
    vpcList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup', description='The group to which the IP address whitelist belongs.'),
        allowedIpList?: [ string ](name='AllowedIpList', description='The information about the IP address whitelist.'),
        portRange?: string(name='PortRange', description='The port range. Valid value:

**9092/9092**.', example='9092/9092'),
      }
    ](name='VpcList', description='The whitelist for access from a virtual private cloud (VPC).'),
  }(name='AllowedList', description='The IP address whitelist.'),
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A421CCD7-5BC5-4B32-8DD8-64668A8FCB56'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetAllowedIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllowedIpListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAllowedIpList  GetAllowedIpListRequest
  * @return GetAllowedIpListResponse
 */
async function getAllowedIpList(request: GetAllowedIpListRequest): GetAllowedIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllowedIpList', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoScalingConfigurationRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_serverless-cn-vxxxxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetAutoScalingConfigurationResponseBody = {
  code?: long(name='Code', description='The response code. The value 200 indicates that the request was successful.', example='200'),
  data?: {
    scheduledScalingRules?: {
      scheduledScalingRules?: [ 
      {
        durationMinutes?: long(name='DurationMinutes', description='The duration of a scheduled scaling task. Unit: minutes.', example='60'),
        enable?: boolean(name='Enable', description='Indicates whether the scheduled scaling rule is enabled. Valid values:

*   **true**
*   **false**', example='true'),
        estimatedElasticScalingDownTimeSecs?: long(name='EstimatedElasticScalingDownTimeSecs', description='The estimated scale-in duration. Unit: seconds.', example='780'),
        estimatedElasticScalingUpTimeSecs?: long(name='EstimatedElasticScalingUpTimeSecs', description='The estimated scale-out duration. Unit: seconds.', example='780'),
        firstScheduledTime?: long(name='FirstScheduledTime', description='The timestamp that indicates the start time of the scheduled scaling task.', example='1714467540000'),
        repeatType?: string(name='RepeatType', description='The frequency at which the scheduled scaling task is executed. This parameter is returned only if ScheduleType is set to repeat. Valid values:

*   Daily: The scheduled scaling task is executed every day.

*   Weekly: The scheduled scaling task is executed every week.', example='Weekly'),
        reservedPubFlow?: long(name='ReservedPubFlow', description='The reserved production capacity for scheduled scaling. Unit: MB/s.', example='120'),
        reservedSubFlow?: long(name='ReservedSubFlow', description='The reserved consumption capacity for scheduled scaling. Unit: MB/s.', example='120'),
        ruleId?: long(name='RuleId', description='The ID of the scheduled scaling rule.', example='64'),
        ruleName?: string(name='RuleName', description='The name of the scheduled scaling rule.', example='test'),
        scheduleType?: string(name='ScheduleType', description='The type of the scheduled scaling task. Valid values:

*   at: The scheduled scaling task is executed only once.
*   repeat: The scheduled scaling task is repeatedly executed.', example='at'),
        timeZone?: string(name='TimeZone', description='The time zone in Coordinated Universal Time (UTC).', example='GMT+8'),
        weeklyTypes?: {
          weeklyTypes?: [ string ](name='WeeklyTypes')
        }(name='WeeklyTypes', description='The day on which the scheduled scaling task is repeatedly executed. You can specify multiple days for this parameter.'),
      }
    ](name='ScheduledScalingRules')
    }(name='ScheduledScalingRules', description='The scheduled scaling rules.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B7A39AE5-0B36-4442-A304-E0885265***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetAutoScalingConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoScalingConfigurationResponseBody(name='body'),
}

/**
  * @description ###### [](#-v3-serverless-)**This operation is supported only by serverless ApsaraMQ for Kafka V3 instances.
  * @param request  the request parameters of GetAutoScalingConfiguration  GetAutoScalingConfigurationRequest
  * @return GetAutoScalingConfigurationResponse
 */
async function getAutoScalingConfiguration(request: GetAutoScalingConfigurationRequest): GetAutoScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerListRequest {
  consumerId?: string(name='ConsumerId', description='The name of the consumer group. If you do not configure this parameter, all consumer groups are queried.', example='kafka-test', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance to which the consumer group belongs.

This parameter is required.', example='alikafka_post-cn-v0h18sav****', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to be returned per page.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance to which the consumer group belongs.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetConsumerListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  consumerList?: {
    consumerVO?: [ 
    {
      automaticallyCreatedGroup?: boolean(name='AutomaticallyCreatedGroup', description='Indicates that the consumer group was automatically created by the system.'),
      consumerId?: string(name='ConsumerId', description='The consumer group ID.', example='kafka-test'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-v0h18sav****'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The instance description.', example='test'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags.'),
    }
  ](name='ConsumerVO')
  }(name='ConsumerList', description='The consumer groups.'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1.', example='1'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='808F042B-CB9A-4FBC-9009-00E7DDB6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  total?: long(name='Total', description='The total number of entries returned.', example='12'),
}

model GetConsumerListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerList  GetConsumerListRequest
  * @return GetConsumerListResponse
 */
async function getConsumerList(request: GetConsumerListRequest): GetConsumerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerProgressRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.

This parameter is required.', example='kafka-test', position='Query'),
  hideLastTimestamp?: boolean(name='HideLastTimestamp', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetConsumerProgressResponseBody = {
  code?: int32(name='Code', description='The returned HTTP status code. If the request is successful, 200 is returned.', example='200'),
  consumerProgress?: {
    lastTimestamp?: long(name='LastTimestamp', description='The time when the last message consumed by the consumer group was generated.', example='1566874931671'),
    rebalanceInfoList?: {
      rebalanceInfoList?: [ 
      {
        generation?: long(name='Generation', description='The number of rebalances.', example='100'),
        groupId?: string(name='GroupId', description='The group ID of the subscriber.', example='falcon-uat'),
        lastRebalanceTimestamp?: long(name='LastRebalanceTimestamp', description='The time when the last rebalance occurred. Unit: milliseconds.', example='1709199270'),
        reason?: string(name='Reason', description='The cause of the rebalance.', example='removing member consumer-1-cd14eb9c-379b-4b8e-9bbd-76f147f8536f on LeaveGroup'),
        rebalanceSuccess?: boolean(name='RebalanceSuccess', description='Indicates whether new members are added to the consumer group in the rebalance.', example='true'),
        rebalanceTimeConsuming?: long(name='RebalanceTimeConsuming', description='The duration of the rebalance. Unit: milliseconds.', example='1'),
      }
    ](name='RebalanceInfoList')
    }(name='RebalanceInfoList', description='The details of rebalances in the consumer group.'),
    topicList?: {
      topicList?: [ 
      {
        lastTimestamp?: long(name='LastTimestamp', description='The time when the last consumed message in the topic was generated.', example='1566874931649'),
        offsetList?: {
          offsetList?: [ 
          {
            brokerOffset?: long(name='BrokerOffset', description='The latest offset in the partition of the topic.', example='9'),
            consumerOffset?: long(name='ConsumerOffset', description='The consumer offset in the partition of the topic.', example='9'),
            lastTimestamp?: long(name='LastTimestamp', description='The time when the last consumed message in the partition was generated.', example='1566874931649'),
            partition?: int32(name='Partition', description='The partition ID.', example='0'),
          }
        ](name='OffsetList')
        }(name='OffsetList', description='The consumer offsets.'),
        topic?: string(name='Topic', description='The topic name.', example='kafka-test'),
        totalDiff?: long(name='TotalDiff', description='The number of unconsumed messages in the topic to which the consumer group subscribes.', example='0'),
      }
    ](name='TopicList')
    }(name='TopicList', description='The consumer progress of each topic to which the consumer group subscribes.'),
    totalDiff?: long(name='TotalDiff', description='The total number of unconsumed messages in all topics to which the consumer group subscribes.', example='0'),
  }(name='ConsumerProgress', description='The consumer progress of the consumer group.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='252820E1-A2E6-45F2-B4C9-1056B8CE****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetConsumerProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerProgressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerProgress  GetConsumerProgressRequest
  * @return GetConsumerProgressResponse
 */
async function getConsumerProgress(request: GetConsumerProgressRequest): GetConsumerProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceListRequest {
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances.', example='alikafka_post-cn-mp91gnw0p***', position='Query'),
  orderId?: string(name='OrderId', description='The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.', example='6072673****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain this ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  series?: string(name='Series', description='The instance version. You can use instance versions to filter different versions of instances. Valid values:

*   v2
*   v3
*   confluent', example='v3', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

*   If you leave this parameter empty, the keys of all tags are matched.
*   The tag key can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain `http://` or `https://`.', example='test'),
      value?: string(name='Value', description='The tag value.

*   If you leave Key empty, you must also leave this parameter empty. If you leave this parameter empty, the values of all tags are matched.
*   The tag value can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain `http://` or `https://`.', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model GetInstanceListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the call is successful.', example='200'),
  instanceList?: {
    instanceVO?: [ 
    {
      allConfig?: string(name='AllConfig', description='The configurations of the deployed ApsaraMQ for Kafka instance.', example='{\\"enable.vpc_sasl_ssl\\":\\"false\\",\\"kafka.log.retention.hours\\":\\"66\\",\\"enable.acl\\":\\"false\\",\\"kafka.message.max.bytes\\":\\"6291456\\"}'),
      autoCreateGroupEnable?: boolean(name='AutoCreateGroupEnable'),
      autoCreateTopicEnable?: boolean(name='AutoCreateTopicEnable'),
      confluentConfig?: {
        connectCU?: int32(name='ConnectCU', description='The number of CPU cores of Connect.', example='4'),
        connectReplica?: int32(name='ConnectReplica', description='The number of replicas of Connect.', example='2'),
        controlCenterCU?: int32(name='ControlCenterCU', description='The number of CPU cores of Control Center.', example='4'),
        controlCenterReplica?: int32(name='ControlCenterReplica', description='The number of replicas of Control Center.', example='1'),
        controlCenterStorage?: int32(name='ControlCenterStorage', description='The disk capacity of Control Center. Unit: GB.', example='300'),
        kafkaCU?: int32(name='KafkaCU', description='The number of CPU cores of the Kafka broker.', example='4'),
        kafkaReplica?: int32(name='KafkaReplica', description='The number of replicas of the Kafka broker.', example='3'),
        kafkaRestProxyCU?: int32(name='KafkaRestProxyCU', description='The number of CPU cores of Kafka Rest Proxy.', example='4'),
        kafkaRestProxyReplica?: int32(name='KafkaRestProxyReplica', description='The number of replicas of Kafka Rest Proxy.', example='2'),
        kafkaStorage?: int32(name='KafkaStorage', description='The disk capacity of the Kafka broker. Unit: GB.', example='800'),
        ksqlCU?: int32(name='KsqlCU', description='The number of CPU cores of ksqlDB.', example='2'),
        ksqlReplica?: int32(name='KsqlReplica', description='The number of replicas of ksqlDB.', example='2'),
        ksqlStorage?: int32(name='KsqlStorage', description='The disk capacity of ksqlDB. Unit: GB.', example='100'),
        schemaRegistryCU?: int32(name='SchemaRegistryCU', description='The number of CPU cores of Schema Registry.', example='4'),
        schemaRegistryReplica?: int32(name='SchemaRegistryReplica', description='The number of replicas of Schema Registry.', example='2'),
        zooKeeperCU?: int32(name='ZooKeeperCU', description='The number of CPU cores of ZooKeeper.', example='2'),
        zooKeeperReplica?: int32(name='ZooKeeperReplica', description='The number of replicas of ZooKeeper.', example='3'),
        zooKeeperStorage?: int32(name='ZooKeeperStorage', description='The disk capacity of ZooKeeper. Unit: GB.', example='100'),
      }(name='ConfluentConfig', description='The parameters that are returned for the ApsaraMQ for Confluent instance.'),
      createTime?: long(name='CreateTime', description='The time when the instance was created. Unit: milliseconds.', example='1577961819000'),
      defaultPartitionNum?: int32(name='DefaultPartitionNum'),
      deployType?: int32(name='DeployType', description='The type of the network in which the instance is deployed. Valid values:

*   **4**: Internet and VPC
*   **5**: VPC', example='5'),
      diskSize?: int32(name='DiskSize', description='The disk size. Unit: GB', example='3600'),
      diskType?: int32(name='DiskType', description='The disk type of the instance. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD', example='1'),
      domainEndpoint?: string(name='DomainEndpoint', description='The default endpoint of the instance in domain name mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1-vpc.alikafka.aliyuncs.com:9092,alikafka-pre-cn-zv**********-2-vpc.alikafka.aliyuncs.com:9092,alikafka-pre-cn-zv**********-3-vpc.alikafka.aliyuncs.com:9092'),
      eipMax?: int32(name='EipMax', description='The maximum Internet traffic in the instance.', example='20'),
      endPoint?: string(name='EndPoint', description='The default endpoint of the instance in IP address mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='192.168.XX.XX:9092,192.168.XX.XX:9092,192.168.XX.XX:9092'),
      expiredTime?: long(name='ExpiredTime', description='The time when the instance expires. Unit: milliseconds.', example='1893581018000'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-mp919o4v****'),
      ioMax?: int32(name='IoMax', description='The maximum traffic in the instance.', example='20'),
      ioMaxRead?: int32(name='IoMaxRead', description='The maximum read traffic in the instance. Unit: Mbit/s.', example='1000'),
      ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification.', example='alikafka.hw.2xlarge'),
      ioMaxWrite?: int32(name='IoMaxWrite', description='The maximum write traffic. Unit: Mbit/s.', example='1000'),
      kmsKeyId?: string(name='KmsKeyId', description='The ID of the key that is used for disk encryption in the region where the instance is deployed.', example='0d24xxxx-da7b-4786-b981-9a164dxxxxxx'),
      msgRetain?: int32(name='MsgRetain', description='The retention period of messages in the instance. Unit: hours.', example='72'),
      name?: string(name='Name', description='The instance name.', example='alikafka_post-cn-mp91gnw0****'),
      paidType?: int32(name='PaidType', description='The billing method of the instance. Valid values:

*   **0**: the subscription billing method
*   **1**: the pay-as-you-go billing method
*   **3**: the pay-as-you-go billing method for serverless ApsaraMQ for Kafka V3 instances
*   **4**: the pay-as-you-go billing method for ApsaraMQ for Confluent instances', example='1'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      reservedPublishCapacity?: int32(name='ReservedPublishCapacity', description='The traffic reserved for message publishing. Unit: MB/s.

>  This parameter is returned only if the instance is a serverless ApsaraMQ for Kafka V3 instance.', example='60'),
      reservedSubscribeCapacity?: int32(name='ReservedSubscribeCapacity', description='The traffic reserved for message subscription. Unit: MB/s.

>  This parameter is returned only if the instance is a serverless ApsaraMQ for Kafka V3 instance.', example='60'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-ac***********7q'),
      saslDomainEndpoint?: string(name='SaslDomainEndpoint', description='The Simple Authentication and Security Layer (SASL) endpoint of the instance in domain name mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1-vpc.alikafka.aliyuncs.com:9094,alikafka-pre-cn-zv**********-2-vpc.alikafka.aliyuncs.com:9094,alikafka-pre-cn-zv**********-3-vpc.alikafka.aliyuncs.com:9094'),
      securityGroup?: string(name='SecurityGroup', description='The security group to which the instance belongs.

*   If the instance is deployed in the ApsaraMQ for Kafka console or by calling the [StartInstance](https://help.aliyun.com/document_detail/157786.html) operation without a security group configured, no value is returned.
*   If the instance is deployed by calling the [StartInstance](https://help.aliyun.com/document_detail/157786.html) operation with a security group configured, the returned value is the configured security group.', example='sg-bp13wfx7kz9pkow****'),
      series?: string(name='Series', description='The instance version. Valid values: v2, v3, and confluent.', example='v3'),
      serviceStatus?: int32(name='ServiceStatus', description='>  This parameter is out of date. We recommend that you refer to the ViewInstanceStatusCode parameter.

The instance status. Valid values:

*   **0**: pending
*   **1**: preparing hardware resources
*   **2**: initializing
*   **3**: starting
*   **5**: running
*   **6**: migrating
*   **7**: ready for upgrade
*   **8**: upgrading
*   **9**: ready for change
*   **10**: released
*   **11**: changing
*   **15**: expired
*   **30**: scaling', example='5'),
      specType?: string(name='SpecType', description='The instance edition. Valid values:

*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)
*   **normal**: Standard Edition', example='professional'),
      sslDomainEndpoint?: string(name='SslDomainEndpoint', description='The SSL endpoint of the instance in domain name mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1.alikafka.aliyuncs.com:9093,alikafka-pre-cn-zv**********-2.alikafka.aliyuncs.com:9093,alikafka-pre-cn-zv**********-3.alikafka.aliyuncs.com:9093'),
      sslEndPoint?: string(name='SslEndPoint', description='The Secure Sockets Layer (SSL) endpoint of the instance in IP address mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='192.0.XX.XX:9093,198.51.XX.XX:9093,203.0.XX.XX:9093'),
      standardZoneId?: string(name='StandardZoneId', description='The zone ID.', example='cn-hangzhou-k'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags.'),
      topicNumLimit?: int32(name='TopicNumLimit', description='The maximum number of topics on the instance.', example='180'),
      upgradeServiceDetailInfo?: {
        current2OpenSourceVersion?: string(name='Current2OpenSourceVersion', description='The open source Apache Kafka version that corresponds to the instance.', example='2.2.0'),
      }(name='UpgradeServiceDetailInfo', description='The upgrade information about the instance.'),
      usedGroupCount?: int32(name='UsedGroupCount', description='The number of used groups.', example='10'),
      usedPartitionCount?: int32(name='UsedPartitionCount', description='The number of used partitions.', example='25'),
      usedTopicCount?: int32(name='UsedTopicCount', description='The number of used topics.', example='3'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance belongs.', example='vsw-bp1fvuw0ljd7vzmo3****'),
      vSwitchIds?: {
        vSwitchIds?: [ string ](name='VSwitchIds')
      }(name='VSwitchIds'),
      viewInstanceStatusCode?: int32(name='ViewInstanceStatusCode', description='The instance status. The valid values are consistent with the values displayed in the ApsaraMQ for Kafka console. This parameter is used in the new version of ApsaraMQ for Kafka.

Valid values:

*   **0**: pending
*   **1**: deploying
*   **2**: running
*   **3**: stopped
*   **4**: expiring
*   **5**: expired
*   **6**: released
*   **7**: upgrading
*   **8**: migrating
*   **21**: stopping
*   **22**: starting
*   **23**: releasing
*   **30**: auto scaling
*   **101**: deployment failed
*   **102**: upgrade failed
*   **103**: migration failed', example='2'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-bp1ojac7bv448nifj****'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='zonei'),
    }
  ](name='InstanceVO')
  }(name='InstanceList', description='The instances.'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='4B6D821D-7F67-4CAA-9E13-A5A997C3****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model GetInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceList  GetInstanceListRequest
  * @return GetInstanceListResponse
 */
async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetKafkaClientIpRequest {
  endTime: long(name='EndTime', description='This parameter is required.', example='1716343502000', position='Query'),
  group?: string(name='Group', example='group_name', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1716343501000', position='Query'),
  topic?: string(name='Topic', example='topic_name', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='byInstance', position='Query'),
}

model GetKafkaClientIpResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    alert?: boolean(name='Alert', example='true'),
    data?: {
      data?: [ 
      {
        data?: {
          data?: [ 
          {
            ip?: string(name='Ip', example='58.210.117.154'),
            num?: long(name='Num', example='3'),
          }
        ](name='Data')
        }(name='Data'),
        name?: string(name='Name', example='OFFSET_COMMIT'),
      }
    ](name='Data')
    }(name='Data'),
    endDate?: long(name='EndDate', example='1716343502000'),
    searchTimeRange?: int32(name='SearchTimeRange', example='1'),
    startDate?: long(name='StartDate', example='1716343501000'),
    timeLimitDay?: int32(name='TimeLimitDay', example='7'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='E57A8862-DF68-4055-8E55-B80CB4****'),
  success?: boolean(name='Success', example='true'),
}

model GetKafkaClientIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKafkaClientIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKafkaClientIp  GetKafkaClientIpRequest
  * @return GetKafkaClientIpResponse
 */
async function getKafkaClientIp(request: GetKafkaClientIpRequest): GetKafkaClientIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKafkaClientIp', 'POST', '/', 'json', false, 'json', request);
}

model GetQuotaTipRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-i7m2wpm5****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetQuotaTipResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The additional message. This message is typically used to describe API call failures for troubleshooting.', example='operation success.'),
  quotaData?: {
    groupLeft?: int32(name='GroupLeft', description='The number of available groups.', example='50'),
    groupUsed?: int32(name='GroupUsed', description='The number of used groups.', example='50'),
    isPartitionBuy?: int32(name='IsPartitionBuy', description='The method that you use to purchase partitions. Valid values:

*   0: indicates that the instance is purchased based on topics.
*   1: indicates that the instance is purchased based on partitions.', example='1'),
    partitionLeft?: int32(name='PartitionLeft', description='The number of available partitions.', example='1050'),
    partitionNumOfBuy?: int32(name='PartitionNumOfBuy', description='The number of purchased partitions.', example='100'),
    partitionQuota?: int32(name='PartitionQuota', description='The quota of partitions.', example='1100'),
    partitionUsed?: int32(name='PartitionUsed', description='The number of used partitions.', example='50'),
    topicLeft?: int32(name='TopicLeft', description='The number of available topics.', example='20'),
    topicNumOfBuy?: int32(name='TopicNumOfBuy', description='The number of purchased topics.', example='50'),
    topicQuota?: int32(name='TopicQuota', description='The quota of topics.', example='50'),
    topicUsed?: int32(name='TopicUsed', description='The number of used topics.', example='30'),
  }(name='QuotaData', description='The quota.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0178A3A7-E87B-5E50-A16F-3E62F534****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='True'),
}

model GetQuotaTipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaTipResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQuotaTip  GetQuotaTipRequest
  * @return GetQuotaTipResponse
 */
async function getQuotaTip(request: GetQuotaTipRequest): GetQuotaTipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuotaTip', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicListRequest {
  currentPage?: string(name='CurrentPage', description='The page number. Default value: 1', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-0pp1954n****', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance to which the topics that you want to query belong.', example='cn-hangzhou', position='Query'),
  topic?: string(name='Topic', description='The name of the topic that you want to query.', example='topic_name', position='Query'),
}

model GetTopicListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0D3DC5B-5C37-47AD-9F22-1F559880****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  topicList?: {
    topicVO?: [ 
    {
      autoCreate?: boolean(name='AutoCreate', description='Indicates whether the topic was automatically created.', example='false'),
      compactTopic?: boolean(name='CompactTopic', description='The log cleanup policy for the topic. This parameter is returned only if **LocalTopic** is set to **true**. Valid values:

*   false: the default log cleanup policy.
*   true: the Apache Kafka log compaction policy.', example='false'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates when the topic was created. Unit: milliseconds.', example='1576563109000'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-0pp1954n****'),
      localTopic?: boolean(name='LocalTopic', description='The storage type that is used for the topic. Valid values:

*   false: cloud storage
*   true: local storage', example='false'),
      partitionNum?: int32(name='PartitionNum', description='The number of partitions in the topic.', example='6'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The topic description. Valid values:

*   The description can contain only letters, digits, hyphens (-), and underscores (_).
*   The description must be 3 to 64 characters in length.', example='test'),
      status?: int32(name='Status', description='The topic status. Valid value:

**0**: running.

If the topic is deleted, this parameter is not returned.', example='0'),
      statusName?: string(name='StatusName', description='The topic status. Valid value:

**Running**.

If the topic is deleted, this parameter is not returned.', example='Running'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Test'),
          value?: string(name='Value', description='The tag value.', example='Test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags.'),
      topic?: string(name='Topic', description='The topic name. Valid values:

*   The name can contain only letters, digits, hyphens (-), and underscores (_).
*   The name must be 3 to 64 characters in length. If the name contains more than 64 characters, the system automatically truncates the name.', example='topic_name'),
      topicConfig?: string(name='TopicConfig', description='The topic configuration.', example='{"replication-factor":3}'),
    }
  ](name='TopicVO')
  }(name='TopicList', description='The topics.'),
  total?: int32(name='Total', description='The number of topics.', example='1'),
}

model GetTopicListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicList  GetTopicListRequest
  * @return GetTopicListResponse
 */
async function getTopicList(request: GetTopicListRequest): GetTopicListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicList', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicStatusRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-v0h15tjm****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The name of the topic.

This parameter is required.', example='normal_topic_9d034262835916103455551be06cc****', position='Query'),
}

model GetTopicStatusResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E475C7E2-8C35-46EF-BE7D-5D2A9F5D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  topicStatus?: {
    lastTimeStamp?: long(name='LastTimeStamp', description='The time when the last consumed message was generated.', example='1566470063575'),
    offsetTable?: {
      offsetTable?: [ 
      {
        lastUpdateTimestamp?: long(name='LastUpdateTimestamp', description='The last time when the partition was modified.', example='1566470063547'),
        maxOffset?: long(name='MaxOffset', description='The latest offset in the partition of the topic.', example='76'),
        minOffset?: long(name='MinOffset', description='The earliest offset in the partition of the topic.', example='0'),
        partition?: int32(name='Partition', description='The ID of the partition.', example='0'),
        topic?: string(name='Topic', description='The name of the topic.', example='testkafka'),
      }
    ](name='OffsetTable')
    }(name='OffsetTable', description='The information about offsets in the topic.'),
    totalCount?: long(name='TotalCount', description='The number of messages in the topic.', example='423'),
  }(name='TopicStatus', description='The status information about messages in the topic.'),
}

model GetTopicStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicStatus  GetTopicStatusRequest
  * @return GetTopicStatusResponse
 */
async function getTopicStatus(request: GetTopicStatusRequest): GetTopicStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicSubscribeStatusRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

You can call the [GetInstanceList](https://help.aliyun.com/document_detail/437663.html) operation to query the list of instances.

This parameter is required.', example='alikafka_pre-cn-v0h1cng0***', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.

You can call the [GetTopicList](https://help.aliyun.com/document_detail/437677.html) operation to query the list of topics.

This parameter is required.', example='topic_name', position='Query'),
}

model GetTopicSubscribeStatusResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  topicSubscribeStatus?: {
    consumerGroups?: [ string ](name='ConsumerGroups', description='The groups that subscribe to the topic.'),
    topic?: string(name='Topic', description='The topic name.', example='topic_api_1681624879908'),
  }(name='TopicSubscribeStatus', description='The subscription details.'),
}

model GetTopicSubscribeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicSubscribeStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicSubscribeStatus  GetTopicSubscribeStatusRequest
  * @return GetTopicSubscribeStatusResponse
 */
async function getTopicSubscribeStatus(request: GetTopicSubscribeStatusRequest): GetTopicSubscribeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicSubscribeStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource whose tags you want to query. The resource ID follows the following rules:

*   Instance ID: instanceId
*   Topic ID: Kafka_alikafka_instanceId_topic
*   Group ID: Kafka_alikafka_instanceId_consumerGroup

For example, if the instance ID is alikafka_post-cn-v0h1fgs2xxxx, the topic name is test-topic, and the group name is test-consumer-group, the resource IDs are alikafka_post-cn-v0h1fgs2xxxx, Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-topic, and Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-consumer-group, respectively.

>  You must configure one of **ResourceId** and **Tag** to query the tags that are bound to a resource. Otherwise, the request fails.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource whose tags you want to query. The value is an enumerated value. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**

This parameter is required.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the resource tag.

*   If you leave this parameter empty, the keys of all tags are matched.
*   The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the resource tag.

*   If you leave Key empty, you must also leave this parameter empty. If you leave this parameter empty, the values of all tags are matched.
*   The tag value can be up to 128 characters in length and cannot contain http:// or https://. The tag value cannot start with acs: or aliyun.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE65F6B7-7566-4802-9007-96F2494A****'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource. A resource ID complies with the following rules:

*   The resource ID of an instance is the value of the instanceId parameter.
*   The resource ID of a topic is the value of the Kafka_alikafka_instanceId_topic parameter.
*   The resource ID of a consumer group is the value of the Kafka_alikafka_instanceId_consumerGroup parameter.

For example, the resources whose tags you want to query include the alikafka_post-cn-v0h1fgs2xxxx instance, the test-topic topic, and the test-consumer-group consumer group. In this case, their resource IDs are alikafka_post-cn-v0h1fgs2xxxx, Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-topic, and Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-consumer-group.', example='alikafka_post-cn-v0h1fgs2****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. The value is an enumerated value. Valid values:

*   **Instance**
*   **Topic**
*   **Consumergroup**', example='instance'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources', description='Details of the resource and tags, such as the resource ID, the resource type, tag keys, and tag values.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNameRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  instanceName: string(name='InstanceName', description='The instance name. Valid values:

*   The name can contain only letters, digits, hyphens (-), and underscores (_).
*   The name must be 3 to 64 characters in length. A name that contains more than 64 characters is automatically truncated.

This parameter is required.', example='dev-test', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyInstanceNameResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model ModifyInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceName  ModifyInstanceNameRequest
  * @return ModifyInstanceNameResponse
 */
async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPartitionNumRequest {
  addPartitionNum: int32(name='AddPartitionNum', description='The number of partitions that you want to add to the topic.

*   The value must be an integer that is greater than 0.
*   To reduce the risk of data skew, we recommend that you set the value to a multiple of 6.
*   The number of total partitions ranges from 1 to 360.

This parameter is required.', example='6', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-0pp1l9z****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.

This parameter is required.', example='TopicPartitionNum', position='Query'),
}

model ModifyPartitionNumResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B7A39AE5-0B36-4442-A304-E088526****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyPartitionNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPartitionNumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPartitionNum  ModifyPartitionNumRequest
  * @return ModifyPartitionNumResponse
 */
async function modifyPartitionNum(request: ModifyPartitionNumRequest): ModifyPartitionNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPartitionNum', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScheduledScalingRuleRequest {
  enable: boolean(name='Enable', description='Specifies whether to enable the scheduled scaling rule. Valid values:

*   **true**
*   **false**

>  If the scaling task is scheduled to execute only once and you want to enable the scheduled scaling rule, make sure that the value of this parameter is at least 30 minutes later than the current point in time.

This parameter is required.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_serverless-cn-vxxxxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  ruleName: string(name='RuleName', description='The name of the scheduled scaling rule.

This parameter is required.', example='contact-id', position='Query'),
}

model ModifyScheduledScalingRuleResponseBody = {
  code?: long(name='Code', description='The response code.

The value **200** indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DB6F1BEA-903B-4FD8-8809-46E7E9CE***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='True'),
}

model ModifyScheduledScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyScheduledScalingRuleResponseBody(name='body'),
}

/**
  * @description ###### [](#-v3-serverless-)This operation is supported only by serverless ApsaraMQ for Kafka V3 instances.
  * @param request  the request parameters of ModifyScheduledScalingRule  ModifyScheduledScalingRuleRequest
  * @return ModifyScheduledScalingRuleResponse
 */
async function modifyScheduledScalingRule(request: ModifyScheduledScalingRuleRequest): ModifyScheduledScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScheduledScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTopicRemarkRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-0pp1l9z****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The description of the topic.', example='testremark', position='Query'),
  topic: string(name='Topic', description='The name of the topic.

This parameter is required.', example='alikafka_post-cn-0pp1l9z8****', position='Query'),
}

model ModifyTopicRemarkResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DB6F1BEA-903B-4FD8-8809-46E7E9CE***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyTopicRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTopicRemarkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTopicRemark  ModifyTopicRemarkRequest
  * @return ModifyTopicRemarkResponse
 */
async function modifyTopicRemark(request: ModifyTopicRemarkRequest): ModifyTopicRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTopicRemark', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1672410180000', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  offset?: string(name='Offset', description='The consumer offset of the partition.', example='100', position='Query'),
  partition?: string(name='Partition', description='The partition ID.', example='0', position='Query'),
  queryType: string(name='QueryType', description='The query type. Valid values:

*   byOffset: queries messages by offset. If you select this value, you must configure Partition and Offset.
*   byTimestamp: queries messages by time. If you select this value, you must configure BeginTime.

This parameter is required.', example='byTimestamp', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the resource resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.

This parameter is required.', example='testkafka', position='Query'),
}

model QueryMessageResponseBody = {
  code?: int32(name='Code', description='The returned HTTP status code. If the request is successful, 200 is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  messageList?: [ 
    {
      checksum?: long(name='Checksum', description='The check value of the chaincode.', example='0'),
      key?: string(name='Key', description='The message key.', example='this is key'),
      keyTruncated?: boolean(name='KeyTruncated', description='Indicates whether the key is truncated.', example='false'),
      offset?: long(name='Offset', description='The consumer offset of the partition.', example='1'),
      partition?: long(name='Partition', description='The partition ID.', example='0'),
      serializedKeySize?: int32(name='SerializedKeySize', description='The size of the key after serialization. Unit: bytes.', example='11'),
      serializedValueSize?: int32(name='SerializedValueSize', description='The size of the value after serialization. Unit: bytes.', example='20'),
      timestamp?: long(name='Timestamp', description='The time when the message was created. The value of this parameter is a UNIX timestamp in milliseconds.', example='1705482172640'),
      timestampType?: string(name='TimestampType', description='The time type.', example='CreateTime'),
      topic?: string(name='Topic', description='The topic name.', example='dqc_test2'),
      truncatedKeySize?: int32(name='TruncatedKeySize', description='The truncated size of the message key. Unit: bytes.

>  A maximum of 1 KB of content can be displayed for each message. Content that exceeds 1 KB is automatically truncated. For more information, see [Query messages](https://help.aliyun.com/document_detail/113172.html).', example='0'),
      truncatedValueSize?: int32(name='TruncatedValueSize', description='The truncated size of the message value. Unit: bytes.

>  A maximum of 1 KB of content can be displayed for each message. Content that exceeds 1 KB is automatically truncated. For more information, see [Query messages](https://help.aliyun.com/document_detail/113172.html).', example='0'),
      value?: string(name='Value', description='The message value.', example='Welcome to Ali kafka'),
      valueTruncated?: boolean(name='ValueTruncated', description='Indicates whether the value is truncated.', example='false'),
    }
  ](name='MessageList', description='The messages.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model QueryMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMessage  QueryMessageRequest
  * @return QueryMessageResponse
 */
async function queryMessage(request: QueryMessageRequest): QueryMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessage', 'GET', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  forceDeleteInstance?: boolean(name='ForceDeleteInstance', description='Specifies whether to immediately release the physical resources of the instance. Valid values:

*   **true**: The physical resources of the instance are immediately released.
*   **false**: The physical resources of the instance are retained for a period of time before they are released.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ReleaseInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015A***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ReleaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstanceResponseBody(name='body'),
}

/**
  * @description You cannot call this operation to release a subscription Message Queue for Apache Kafka instance.
  * @param request  the request parameters of ReleaseInstance  ReleaseInstanceRequest
  * @return ReleaseInstanceResponse
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReopenInstanceRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-mp91inkw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ReopenInstanceResponseBody = {
  code?: int32(name='Code', description='The returned HTTP status code. If the request is successful, 200 is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='252820E1-A2E6-45F2-B4C9-1056B8CE****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ReopenInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReopenInstanceResponseBody(name='body'),
}

/**
  * @description You can call this operation only if your instance is in the Stopped state.
  * @param request  the request parameters of ReopenInstance  ReopenInstanceRequest
  * @return ReopenInstanceResponse
 */
async function reopenInstance(request: ReopenInstanceRequest): ReopenInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReopenInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  config?: string(name='Config', description='The initial configurations of the ApsaraMQ for Kafka instance. The values must be valid JSON strings. If you do not specify this parameter, it is left empty.

> - You cannot configure this parameter when you deploy an ApsaraMQ for Confluent instance.
> - You cannot configure enable.acl for instances whose versions are earlier than 2.2.0.

The **Config** parameter supports the following parameters:

*   **enable.vpc_sasl_ssl**: specifies whether to enable VPC transmission encryption. Valid values:

    *   **true**: enables VPC transmission encryption. If you enable VPC transmission encryption, you must also enable access control list (ACL).
    *   **false**: disables VPC transmission encryption. This is the default value.

*   **enable.acl**: specifies whether to enable ACL. Valid values:

    *   **true**: enables ACL.
    *   **false**: disables the ACL feature. This is the default value.

*   **kafka.log.retention.hours**: the maximum message retention period when the disk capacity is sufficient. Unit: hours. Valid values: 24 to 480. Default value: **72**. When the disk usage reaches 85%, the disk capacity is insufficient. In this case, the system deletes the earliest stored messages to ensure service availability.

*   **kafka.message.max.bytes**: the maximum size of a message that can be sent and received by ApsaraMQ for Kafka. Unit: bytes. Valid values: 1048576 to 10485760. Default value: **1048576**. Before you change the maximum message size to a new value, make sure that the new value matches the configurations of the producers and consumers.', example='{"kafka.log.retention.hours":"33"}', position='Query'),
  crossZone?: boolean(name='CrossZone', description='Specifies whether cross-zone deployment is required. Valid values:

*   true
*   false

Default value: true.', example='false', position='Query'),
  deployModule?: string(name='DeployModule', description='The deployment mode. If the instance is an ApsaraMQ for Kafka V2 instance, this parameter is required. If the instance is an ApsaraMQ for Kafka V3 instance or an ApsaraMQ for Confluent instance, this parameter is optional. Valid values:

*   **vpc**: deploys the instance in a virtual private cloud (VPC).
*   **eip**: deploys the instance over the Internet and in the VPC.

The deployment mode of the ApsaraMQ for Kafka instance must be consistent with the instance type. If the instance is a VPC-connected instance, set this parameter to **vpc**. If the instance is an Internet- and VPC-connected instance, set this parameter to **eip**.', example='vpc', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  isEipInner?: boolean(name='IsEipInner', description='Specifies whether the instance supports elastic IP addresses (EIPs). Valid values:

*   **true**: supports EIPs and allows access from the Internet and a VPC.
*   **false**: does not support EIPs and allows access only from a VPC.

The value of this parameter must match the type of the instance. For example, if the instance allows access only from a VPC, set this parameter to **false**.', example='false', position='Query'),
  isForceSelectedZones?: boolean(name='IsForceSelectedZones', description='Specifies whether to forcibly deploy the instance in the selected zones.', example='false', position='Query'),
  isSetUserAndPassword?: boolean(name='IsSetUserAndPassword', description='Specifies whether to set a new username and password. Valid values:

*   **true**: sets a new username and password.
*   **false**: does not set a new username or password.

This parameter is available only if you deploy an instance that allows access from the Internet and a VPC.', example='false', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the key that is used for disk encryption in the region where the instance is deployed. You can obtain the ID of the key in the [Key Management Service (KMS) console](https://kms.console.aliyun.com/?spm=a2c4g.11186623.2.5.336745b8hfiU21) or create a key. For more information, see [Manage CMKs](https://help.aliyun.com/document_detail/181610.html).

If this parameter is configured, disk encryption is enabled for the instance. You cannot disable disk encryption after disk encryption is enabled. When you call this operation, the system checks whether the AliyunServiceRoleForAlikafkaInstanceEncryption service-linked role is created. If the role is not created, the system automatically creates the role. For more information, see [Service-linked roles](https://help.aliyun.com/document_detail/190460.html).

> When you deploy a serverless ApsaraMQ for Kafka V3 instance, you cannot configure this parameter.', example='0d24xxxx-da7b-4786-b981-9a164dxxxxxx', position='Query'),
  name?: string(name='Name', description='The name of the instance.

>  If you specify a value for this parameter, make sure that the specified value is unique in the region of the instance.', example='newInstanceName', position='Query'),
  notifier?: string(name='Notifier', description='The alert contact.', example='Mr. Wang', position='Query'),
  password?: string(name='Password', description='The instance password.

*   This parameter is available only for Internet- and VPC- connected ApsaraMQ for Kafka V2 and V3 instances.
*   If the instance is an ApsaraMQ for Confluent instance, this parameter is required. The value of this parameter must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. The following special characters are supported: ! @ # $ % ^ & \\* () _ + - =', example='password', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  securityGroup?: string(name='SecurityGroup', description='The security group of the instance.

If you do not specify this parameter, ApsaraMQ for Kafka automatically configures a security group for your instance. If you specify this parameter, you must create a security group in advance. For more information, see [Create a security group](https://help.aliyun.com/document_detail/25468.html).', example='sg-bp13wfx7kz9pko****', position='Query'),
  selectedZones?: string(name='SelectedZones', description='The two-dimensional arrays that consist of the candidate set for primary zones and the candidate set for secondary zones. Custom code in the `zone {zone}` format and standard code in the `cn-RegionID-{zone}` format are supported.

*   If you set CrossZone to true and specify Zone H and Zone F as the candidate set for primary zones and Zone K as the candidate set for secondary zones, set this parameter to `[["zoneh","zonef"],["zonek"]]`.

> If you specify multiple zones as the primary or secondary zones, the system deploys the instance in one of the zones without prioritizing them. For example, if you set this parameter to `[["zoneh","zonef"],["zonek"]]`, the primary zone in which the instance is deployed can be Zone H or Zone F, and the secondary zone is Zone K.

*   If you set CrossZone to false and want to deploy the instance in Zone K, set this parameter to `[["zonek"],[]]`. In this case, the value of this parameter must still be two-dimensional arrays, but the array that specifies the candidate for secondary zones is left empty.', example='[[\\"zonel\\"],[\\"zonek\\"]]', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the ApsaraMQ for Kafka instance. Valid values:

*   ApsaraMQ for Kafka V2 instances: 2.2.0 and 2.6.2.
*   ApsaraMQ for Kafka V3 instances: 3.3.1.
*   ApsaraMQ for Confluent instances: 7.4.0.

Default value:

*   ApsaraMQ for Kafka V2 instances: 2.2.0.
*   ApsaraMQ for Kafka V3 instances: 3.3.1.
*   ApsaraMQ for Confluent instances: 7.4.0.', example='ApsaraMQ for Kafka V2 instances: 2.2.0
ApsaraMQ for Kafka V3 instances: 3.3.1
ApsaraMQ for Confluent instances: 7.4.0', position='Query'),
  userPhoneNum?: string(name='UserPhoneNum', description='The mobile phone number of the alert contact.', example='1581234****', position='Query'),
  username?: string(name='Username', description='The instance username.

*   This parameter is available only for Internet- and VPC- connected ApsaraMQ for Kafka V2 and V3 instances.
*   If the instance is an ApsaraMQ for Confluent instance, set this parameter to root or leave this parameter empty.

Default value for ApsaraMQ for Kafka V2 and V3 instances: username. Default value for ApsaraMQ for Confluent instances: root.', example='username', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which you want to connect the instance.

This parameter is required.', example='vsw-bp1j3sg5979fstnpl****', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The IDs of the vSwitches with which the instance is associated. If the instance is an ApsaraMQ for Kafka V2 or V3 instance, this parameter is required. If the instance is an ApsaraMQ for Confluent instance, you must configure one of VSwitchIds and VSwitchId. If you configure both of the parameters, the value of VSwitchIds takes effect.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to deploy the instance.

This parameter is required.', example='vpc-bp1r4eg3yrxmygv****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone where you want to deploy the ApsaraMQ for Kafka instance.

*   The zone ID of the ApsaraMQ for Kafka instance must be the same as that of the vSwitch.
*   The value must be in the zoneX or Region ID-X format. Examples: zonea and cn-hangzhou-k.

>  If resources in the specified zone is insufficient, the instance may be deployed in another zone.', example='cn-hangzhou-k', position='Query'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
  * @description >  You can call this operation up to twice per second.
  * @param request  the request parameters of StartInstance  StartInstanceRequest
  * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model StopInstanceResponseBody = {
  code?: int32(name='Code', description='The returned status code. If the request is successful, 200 is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17D425C2-4EA3-4AB8-928D-E10511ECF***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
  * @description You cannot stop a subscription ApsaraMQ for Kafka instance. If you want to stop a subscription ApsaraMQ for Kafka instance, submit a ticket.
  * @param request  the request parameters of StopInstance  StopInstanceRequest
  * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache RocketMQ instance which contains the resource to which you want to attach tags.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resources. The value is an enumerated value. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**

>  The value of this parameter is not case-sensitive.

This parameter is required.', example='instance', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The key of the resource tag.

*   You must specify this parameter.
*   The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.

This parameter is required.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the resource tag.

*   You can leave this parameter empty.
*   The tag value can be up to 128 characters in length and cannot contain http:// or https://. The tag value cannot start with acs: or aliyun.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags that you want to add.

This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to detach all tags from the resource. This parameter only takes effect when the TagKey.N parameter is not configured. Default value: **false**.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the resources from which you want to detach tags.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resources. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**

>  The value of this parameter is not case-sensitive.

This parameter is required.', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The key of the resource tag.', example='FinanceDept', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAllowedIpRequest {
  allowedListIp: string(name='AllowedListIp', description='The IP addresses that you want to manage. You can specify a CIDR block. Example: **192.168.0.0/16**.

*   If the **UpdateType** parameter is set to **add**, specify one or more IP addresses for this parameter. Separate multiple IP addresses with commas (,).
*   If the **UpdateType** parameter is set to **delete**, specify only one IP address.
*   Exercise caution when you delete IP addresses.

This parameter is required.', example='0.0.0.0/0', position='Query'),
  allowedListType: string(name='AllowedListType', description='The type of the whitelist. Valid values:

*   **vpc**: a whitelist for access from a VPC.
*   **internet**: a whitelist for access from the Internet.

This parameter is required.', example='vpc', position='Query'),
  description?: string(name='Description', description='The description of the whitelist.', example='tf-testAccEcsImageConfigBasic3549descriptionChange', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_pre-cn-0pp1cng20***', position='Query'),
  portRange: string(name='PortRange', description='The port range. Valid values:

*   **9092/9092**: Messages are transmitted in a virtual private cloud (VPC) by using the PLAINTEXT protocol.
*   **9093/9093**: Messages are transmitted over the Internet by using the SASL_SSL protocol.
*   **9094/9094**: Messages are transmitted in a VPC by using the SASL_PLAINTEXT protocol.
*   **9095/9095**: Messages are transmitted in a VPC by using the SASL_SSL protocol.

This parameter must correspond to **AllowdedListType**.

This parameter is required.', example='9092/9092', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  updateType: string(name='UpdateType', description='The type of configuration change. Valid values:

*   **add**
*   **delete**

This parameter is required.', example='add', position='Query'),
}

model UpdateAllowedIpResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='17D425C2-4EA3-4AB8-928D-E10511ECF***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateAllowedIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAllowedIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAllowedIp  UpdateAllowedIpRequest
  * @return UpdateAllowedIpResponse
 */
async function updateAllowedIp(request: UpdateAllowedIpRequest): UpdateAllowedIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAllowedIp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConsumerOffsetRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.

*   The name can contain letters, digits, hyphens (-), and underscores (_).
*   The name must be **3 to 64** characters in length. If a name contains more than **64** characters, the name is automatically truncated.
*   The name of a consumer group cannot be changed after the consumer group is created.

This parameter is required.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-mp91inkw****', position='Query'),
  offsets?: [ 
    {
      offset?: long(name='Offset', description='The consumer offset of the partition.', example='1'),
      partition?: int32(name='Partition', description='The partition ID.', example='0'),
    }
  ](name='Offsets', description='If you set resetType to offset, you can use this parameter to reset the consumer offset of each partition of a specific topic in the consumer group.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance to which the consumer group belongs.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resetType?: string(name='ResetType', description='The method that is used to reset the consumer offsets of the subscribed topics of a consumer group. Valid values:

*   **timestamp** (default)
*   **offset**', example='timestamp', position='Query'),
  time?: string(name='Time', description='The point in time when message consumption starts. The value of this parameter is a UNIX timestamp in milliseconds. The value of this parameter must be **less than 0** or **within the retention period of the consumer offset**. This parameter takes effect only if you set resetType to timestamp.

*   If you want to reset the consumer offset to the latest offset, set this parameter to -1.
*   If you want to reset the consumer offset to the earliest offset, set this parameter to -2.', example='-1', position='Query'),
  topic: string(name='Topic', description='The topic name.

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must be **3 to 64** characters in length. If a name contains more than **64** characters, the name is automatically truncated.
*   The name of a topic cannot be changed after the topic is created.

**If you want to reset the consumer offsets of all topics to which the consumer subscribes, specify an empty string.**

This parameter is required.', example='topic_name', position='Query'),
}

model UpdateConsumerOffsetResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The status code **200** indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='56729737-C428-4E1B-AC68-7A8C2D5****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model UpdateConsumerOffsetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConsumerOffsetResponseBody(name='body'),
}

/**
  * @description You can call this operation to reset the consumer offset of a specific consumer group. You can use the timestamp or offset parameter to reset the consumer offset of a consumer group. You can implement the following features by configuring a combination of different parameters:
  * *   Reset the consumer offsets of one or all subscribed topics of a consumer group to the latest offset. This way, you can consume messages in the topics from the latest offset.
  * *   Reset the consumer offsets of one or all subscribed topics of a consumer group to a specific point in time. This way, you can consume messages in the topics from the specified point in time.
  * *   Reset the consumer offset of one subscribed topic of a consumer group to a specific offset in a specific partition. This way, you can consume messages from the specified offset in the specified partition.
  * @param request  the request parameters of UpdateConsumerOffset  UpdateConsumerOffsetRequest
  * @return UpdateConsumerOffsetResponse
 */
async function updateConsumerOffset(request: UpdateConsumerOffsetRequest): UpdateConsumerOffsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConsumerOffset', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceConfigRequest {
  config: string(name='Config', description='The configurations that you want to update for the ApsaraMQ for Kafka instance. The value must be a valid JSON string.

This parameter is required.', example='{"kafka.log.retention.hours":"33"}', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model UpdateInstanceConfigResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B6D821D-7F67-4CAA-9E13-A5A997C35***'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceConfigResponseBody(name='body'),
}

/**
  * @description ## **Permissions**
  * If a RAM user wants to call the **UpdateInstanceConfig** operation, the RAM user must be granted the required permissions. For more information about how to grant permissions, see [RAM policies](https://help.aliyun.com/document_detail/185815.html).
  * |API|Action|Resource|
  * |---|---|---|
  * |UpdateInstanceConfig|alikafka: UpdateInstance|acs:alikafka:*:*:{instanceId}|
  * @param request  the request parameters of UpdateInstanceConfig  UpdateInstanceConfigRequest
  * @return UpdateInstanceConfigResponse
 */
async function updateInstanceConfig(request: UpdateInstanceConfigRequest): UpdateInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTopicConfigRequest {
  config: string(name='Config', description='The key of the topic configuration.

*   ApsaraMQ for Kafka V2 instances allow you to modify configurations only for topics that use local storage.
*   ApsaraMQ for Kafka V3 instances allow you to modify configurations for all topics.
*   The following keys are supported by `local topic` of ApsaraMQ for Kafka V2 instances: retention.ms, retention.bytes, and replications.
*   The following keys are supported by ApsaraMQ for Kafka V3 instances: retention.hours and max.message.bytes.

This parameter is required.', example='replications', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.

This parameter is required.', example='dqc_test2', position='Query'),
  value: string(name='Value', description='The configuration item that you want to update for the topic. The following configuration items are supported by ApsaraMQ for Kafka V3 instances:

*   `retention.hours` specifies the message retention period. Value type: string. Valid values: 24 to 8760.
*   `max.message.bytes` specifies the maximum size of a sent message. Value type: string. Valid values: 1048576 to 10485760.

This parameter is required.', example='3', position='Query'),
}

model UpdateTopicConfigResponseBody = {
  code?: long(name='Code', description='The HTTP status code. If the request is successful, 200 is returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='[]'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0178A3A7-E87B-5E50-A16F-3E62F534****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='True'),
}

model UpdateTopicConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTopicConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTopicConfig  UpdateTopicConfigRequest
  * @return UpdateTopicConfigResponse
 */
async function updateTopicConfig(request: UpdateTopicConfigRequest): UpdateTopicConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTopicConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceVersionRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  targetVersion: string(name='TargetVersion', description='The major version to be upgraded to. Valid values:

*   **0.10.2**
*   **2.2.0**

If you set this parameter to the current major version, the system upgrades the instance to the latest minor version.

This parameter is required.', example='0.10.2', position='Query'),
}

model UpgradeInstanceVersionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradeInstanceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeInstanceVersionResponseBody(name='body'),
}

/**
  * @description ## **Permissions**
  * A RAM user must be granted the required permissions before the RAM user calls the **UpgradeInstanceVersion** operation. For information about how to grant permissions, see [RAM policies](https://help.aliyun.com/document_detail/185815.html).
  * |API|Action|Resource|
  * |---|---|---|
  * |UpgradeInstanceVersion|UpdateInstance|acs:alikafka:*:*:{instanceId}|
  * ## **QPS limits**
  * You can send a maximum of two queries per second (QPS).
  * @param request  the request parameters of UpgradeInstanceVersion  UpgradeInstanceVersionRequest
  * @return UpgradeInstanceVersionResponse
 */
async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePostPayOrderRequest {
  diskSize?: int32(name='DiskSize', description='The disk size. Unit: GB.

*   The disk size that you specify must be greater than or equal to the current disk size of the instance.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  When you create an ApsaraMQ for Kafka V3 serverless instance, you do not need to configure this parameter.', example='500', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   The Internet traffic that you specify must be greater than or equal to the current Internet traffic of the instance.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

> -  If you set **EipModel** to **true**, set **EipMax** to a value that is greater than 0.
>- If you set **EipModel** to **false**, set **EipMax** to **0**.
>- When you create an ApsaraMQ for Kafka V3 serverless instance, you do not need to configure this parameter.', example='0', position='Query'),
  eipModel?: boolean(name='EipModel', description='Specifies whether to enable Internet access for the instance. Valid values:

*   true: enables Internet access.
*   false: disables Internet access.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   The maximum traffic that you specify must be greater than or equal to the current maximum traffic of the instance.
*   You must configure at least one of IoMax and IoMaxSpec. If you configure both parameters, the value of IoMaxSpec takes effect. We recommend that you configure only IoMaxSpec.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  When you create an ApsaraMQ for Kafka V3 serverless instance, you do not need to configure this parameter.', example='60', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   The traffic specification that you specify must be greater than or equal to the current traffic specification of the instance.
*   You must configure at least one of IoMax and IoMaxSpec. If you configure both parameters, the value of IoMaxSpec takes effect. We recommend that you configure only IoMaxSpec.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  When you create an ApsaraMQ for Kafka V3 serverless instance, you do not need to configure this parameter.', example='alikafka.hw.6xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must configure one of PartitionNum and TopicQuota. We recommend that you configure only ParittionNum.
*   If you configure PartitionNum and TopicQuota at the same time, the system verifies whether the price of the partitions equals the price of the topics based on the previous topic-based selling mode. If the price of the partitions does not equal the price of the topics, an error is returned. If the price of the partitions equals the price of the topics, the instance is purchased based on the partition number.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  When you create an ApsaraMQ for Kafka V3 serverless instance, you do not need to configure this parameter.', example='80', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  serverlessConfig?: {
    reservedPublishCapacity?: long(name='ReservedPublishCapacity', description='The reserved capacity for publishing messages. You can specify only integers for this parameter. Minimum value: 60.

>  The maximum capacity that you can reserve for an instance varies based on available resources in a region. The reserved capacity range displayed on the buy page shall prevail.', example='50'),
    reservedSubscribeCapacity?: long(name='ReservedSubscribeCapacity', description='The reserved capacity for subscribing to messages. You can specify only integers for this parameter. Minimum value: 50.

>  The maximum capacity that you can reserve for an instance varies based on available resources in a region. The reserved capacity range displayed on the buy page shall prevail.', example='50'),
  }(name='ServerlessConfig', description='The parameters that are configured for the ApsaraMQ for Kafka serverless instance. When you create a serverless ApsaraMQ for Kafka instance, you must configure these parameters.', shrink='json', position='Query'),
  specType?: string(name='SpecType', description='The instance edition.

Valid values for this parameter if you set PaidType to 1:

*   normal: Standard Edition (High Write)
*   professional: Professional Edition (High Write)
*   professionalForHighRead: Professional Edition (High Read)

Valid values for this parameter if you set PaidType to 3:

*   normal: Serverless Standard Edition

For more information, see [Billing](https://help.aliyun.com/document_detail/84737.html).', example='professional', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must configure one of PartitionNum and TopicQuota. We recommend that you configure only ParittionNum.
*   If you configure PartitionNum and TopicQuota at the same time, the system verifies whether the price of the partitions equals the price of the topics based on the previous topic-based selling mode. If the price of the partitions does not equal the price of the topics, an error is returned. If the price of the partitions equals the price of the topics, the instance is purchased based on the partition number.
*   The default value of TopicQuota varies based on the value of IoMaxSpec. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For information about the valid values of this parameter, see [Billing](https://help.aliyun.com/document_detail/84737.html).

>  When you create an ApsaraMQ for Kafka V3 serverless instance, you do not need to configure this parameter.', example='80', position='Query'),
}

model UpgradePostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015A***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradePostPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradePostPayOrderResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing method and pricing of pay-as-you-go Message Queue for Apache Kafka instances. For more information, see [Billing](https://help.aliyun.com/document_detail/84737.html).
  * @param request  the request parameters of UpgradePostPayOrder  UpgradePostPayOrderRequest
  * @return UpgradePostPayOrderResponse
 */
async function upgradePostPayOrder(request: UpgradePostPayOrderRequest): UpgradePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePrePayOrderRequest {
  confluentConfig?: {
    connectCU?: int32(name='ConnectCU', minimum=1, maximum=20),
    connectReplica?: int32(name='ConnectReplica', minimum=1, maximum=20),
    controlCenterCU?: int32(name='ControlCenterCU', minimum=4, maximum=20),
    controlCenterReplica?: int32(name='ControlCenterReplica', minimum=1, maximum=1),
    controlCenterStorage?: int32(name='ControlCenterStorage', minimum=300, maximum=30000),
    kafkaCU?: int32(name='KafkaCU', minimum=4, maximum=20),
    kafkaReplica?: int32(name='KafkaReplica', minimum=3, maximum=20),
    kafkaRestProxyCU?: int32(name='KafkaRestProxyCU', minimum=4, maximum=20),
    kafkaRestProxyReplica?: int32(name='KafkaRestProxyReplica', minimum=2, maximum=20),
    kafkaStorage?: int32(name='KafkaStorage', minimum=800, maximum=30000),
    ksqlCU?: int32(name='KsqlCU', minimum=1, maximum=20),
    ksqlReplica?: int32(name='KsqlReplica', minimum=1, maximum=20),
    ksqlStorage?: int32(name='KsqlStorage', minimum=100, maximum=30000),
    schemaRegistryCU?: int32(name='SchemaRegistryCU', minimum=1, maximum=20),
    schemaRegistryReplica?: int32(name='SchemaRegistryReplica', minimum=2, maximum=3),
    zooKeeperCU?: int32(name='ZooKeeperCU', minimum=2, maximum=20),
    zooKeeperReplica?: int32(name='ZooKeeperReplica', minimum=3, maximum=3),
    zooKeeperStorage?: int32(name='ZooKeeperStorage', minimum=100, maximum=30000),
  }(name='ConfluentConfig', shrink='json', position='Query'),
  diskSize?: int32(name='DiskSize', description='The size of the disk.

*   The disk size that you specify must be greater than or equal to the current disk size of the instance.
*   For more information about the valid values, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).', example='900', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   The Internet traffic volume that you specify must be greater than or equal to the current Internet traffic volume of the instance.
*   For more information about the valid values, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).
> - If the **EipModel** parameter is set to **true**, set the **EipMax** parameter to a value that is greater than 0.
> - If the **EipModel** parameter is set to **false**, set the **EipMax** parameter to **0**.', example='3', position='Query'),
  eipModel?: boolean(name='EipModel', description='Specifies whether to enable Internet access for the instance. Valid values:

*   true: enables Internet access.
*   false: disables Internet access.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   The maximum traffic volume that you specify must be greater than or equal to the current maximum traffic volume of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you configure only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).', example='40', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   The traffic specification that you specify must be greater than or equal to the current traffic specification of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you configure only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).', example='alikafka.hw.2xlarge', position='Query'),
  paidType?: int32(name='PaidType', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

You cannot downgrade an instance from the Professional Edition to the Standard Edition. For more information about these instance editions, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).', example='professional', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).', example='50', position='Query'),
}

model UpgradePrePayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradePrePayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradePrePayOrderResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing method and pricing of subscription Message Queue for Apache Kafka instances. For more information, see [Billing overview](https://help.aliyun.com/document_detail/84737.html).
  * @param request  the request parameters of UpgradePrePayOrder  UpgradePrePayOrderRequest
  * @return UpgradePrePayOrderResponse
 */
async function upgradePrePayOrder(request: UpgradePrePayOrderRequest): UpgradePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

