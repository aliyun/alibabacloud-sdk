/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'smc';
  @version = '2019-06-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateReplicationJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  containerNamespace?: string(name='ContainerNamespace', position='Query'),
  containerRepository?: string(name='ContainerRepository', position='Query'),
  containerTag?: string(name='ContainerTag', position='Query'),
  dataDisk?: [ 
    {
      index?: int32(name='Index'),
      part?: [ 
        {
          block?: boolean(name='Block'),
          device?: string(name='Device'),
          sizeBytes?: long(name='SizeBytes'),
        }
      ](name='Part'),
      size?: int32(name='Size'),
    }
  ](name='DataDisk', position='Query'),
  description?: string(name='Description', position='Query'),
  frequency?: int32(name='Frequency', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceRamRole?: string(name='InstanceRamRole', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', position='Query'),
  licenseType?: string(name='LicenseType', position='Query'),
  maxNumberOfImageToKeep?: int32(name='MaxNumberOfImageToKeep', position='Query'),
  name?: string(name='Name', position='Query'),
  netMode?: int32(name='NetMode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicationParameters?: string(name='ReplicationParameters', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  runOnce?: boolean(name='RunOnce', position='Query'),
  scheduledStartTime?: string(name='ScheduledStartTime', position='Query'),
  sourceId: string(name='SourceId', position='Query'),
  systemDiskPart?: [ 
    {
      block?: boolean(name='Block'),
      device?: string(name='Device'),
      sizeBytes?: long(name='SizeBytes'),
    }
  ](name='SystemDiskPart', position='Query'),
  systemDiskSize: int32(name='SystemDiskSize', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  targetType?: string(name='TargetType', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  validTime?: string(name='ValidTime', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model CreateReplicationJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateReplicationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReplicationJobResponseBody(name='body'),
}

async function createReplicationJob(request: CreateReplicationJobRequest): CreateReplicationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReplicationJob', 'POST', '/', 'json', false, 'json', request);
}

model CutOverReplicationJobRequest {
  jobId: string(name='JobId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  syncData?: boolean(name='SyncData', position='Query'),
}

model CutOverReplicationJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model CutOverReplicationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CutOverReplicationJobResponseBody(name='body'),
}

async function cutOverReplicationJob(request: CutOverReplicationJobRequest): CutOverReplicationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CutOverReplicationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteReplicationJobRequest {
  jobId: string(name='JobId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DeleteReplicationJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteReplicationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReplicationJobResponseBody(name='body'),
}

async function deleteReplicationJob(request: DeleteReplicationJobRequest): DeleteReplicationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteReplicationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSourceServerRequest {
  force?: boolean(name='Force', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  sourceId: string(name='SourceId', position='Query'),
}

model DeleteSourceServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSourceServerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSourceServerResponseBody(name='body'),
}

async function deleteSourceServer(request: DeleteSourceServerRequest): DeleteSourceServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSourceServer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReplicationJobsRequest {
  businessStatus?: string(name='BusinessStatus', position='Query'),
  jobId?: [ string ](name='JobId', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  sourceId?: [ string ](name='SourceId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeReplicationJobsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  replicationJobs?: {
    replicationJob?: [ 
    {
      businessStatus?: string(name='BusinessStatus'),
      containerNamespace?: string(name='ContainerNamespace'),
      containerRepository?: string(name='ContainerRepository'),
      containerTag?: string(name='ContainerTag'),
      creationTime?: string(name='CreationTime'),
      dataDisks?: {
        dataDisk?: [ 
        {
          index?: int32(name='Index'),
          parts?: {
            part?: [ 
            {
              block?: boolean(name='Block'),
              device?: string(name='Device'),
              sizeBytes?: long(name='SizeBytes'),
            }
          ](name='Part')
          }(name='Parts'),
          size?: int32(name='Size'),
        }
      ](name='DataDisk')
      }(name='DataDisks'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      errorCode?: string(name='ErrorCode'),
      frequency?: int32(name='Frequency'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      instanceId?: string(name='InstanceId'),
      instanceRamRole?: string(name='InstanceRamRole'),
      instanceType?: string(name='InstanceType'),
      jobId?: string(name='JobId'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion'),
      licenseType?: string(name='LicenseType'),
      maxNumberOfImageToKeep?: int32(name='MaxNumberOfImageToKeep'),
      name?: string(name='Name'),
      netMode?: int32(name='NetMode'),
      progress?: float(name='Progress'),
      regionId?: string(name='RegionId'),
      replicationJobRuns?: {
        replicationJobRun?: [ 
        {
          endTime?: string(name='EndTime'),
          imageId?: string(name='ImageId'),
          startTime?: string(name='StartTime'),
          type?: string(name='Type'),
        }
      ](name='ReplicationJobRun')
      }(name='ReplicationJobRuns'),
      replicationParameters?: string(name='ReplicationParameters'),
      runOnce?: boolean(name='RunOnce'),
      scheduledStartTime?: string(name='ScheduledStartTime'),
      sourceId?: string(name='SourceId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      statusInfo?: string(name='StatusInfo'),
      systemDiskParts?: {
        systemDiskPart?: [ 
        {
          block?: boolean(name='Block'),
          device?: string(name='Device'),
          sizeBytes?: long(name='SizeBytes'),
        }
      ](name='SystemDiskPart')
      }(name='SystemDiskParts'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      targetType?: string(name='TargetType'),
      transitionInstanceId?: string(name='TransitionInstanceId'),
      vSwitchId?: string(name='VSwitchId'),
      validTime?: string(name='ValidTime'),
      vpcId?: string(name='VpcId'),
    }
  ](name='ReplicationJob')
  }(name='ReplicationJobs'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReplicationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReplicationJobsResponseBody(name='body'),
}

async function describeReplicationJobs(request: DescribeReplicationJobsRequest): DescribeReplicationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReplicationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSourceServersRequest {
  jobId?: string(name='JobId', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  sourceId?: [ string ](name='SourceId', position='Query'),
  state?: string(name='State', position='Query'),
}

model DescribeSourceServersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  sourceServers?: {
    sourceServer?: [ 
    {
      agentVersion?: string(name='AgentVersion'),
      architecture?: string(name='Architecture'),
      creationTime?: string(name='CreationTime'),
      dataDisks?: {
        dataDisk?: [ 
        {
          index?: int32(name='Index'),
          parts?: {
            part?: [ 
            {
              canBlock?: boolean(name='CanBlock'),
              device?: string(name='Device'),
              need?: boolean(name='Need'),
              path?: string(name='Path'),
              sizeBytes?: long(name='SizeBytes'),
            }
          ](name='Part')
          }(name='Parts'),
          path?: string(name='Path'),
          size?: int32(name='Size'),
        }
      ](name='DataDisk')
      }(name='DataDisks'),
      description?: string(name='Description'),
      errorCode?: string(name='ErrorCode'),
      heartbeatRate?: int32(name='HeartbeatRate'),
      jobId?: string(name='JobId'),
      kernelLevel?: int32(name='KernelLevel'),
      name?: string(name='Name'),
      platform?: string(name='Platform'),
      replicationDriver?: string(name='ReplicationDriver'),
      sourceId?: string(name='SourceId'),
      state?: string(name='State'),
      statusInfo?: string(name='StatusInfo'),
      systemDiskParts?: {
        systemDiskPart?: [ 
        {
          canBlock?: boolean(name='CanBlock'),
          device?: string(name='Device'),
          need?: boolean(name='Need'),
          path?: string(name='Path'),
          sizeBytes?: long(name='SizeBytes'),
        }
      ](name='SystemDiskPart')
      }(name='SystemDiskParts'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      systemInfo?: string(name='SystemInfo'),
    }
  ](name='SourceServer')
  }(name='SourceServers'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSourceServersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSourceServersResponseBody(name='body'),
}

async function describeSourceServers(request: DescribeSourceServersRequest): DescribeSourceServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSourceServers', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReplicationJobAttributeRequest {
  containerNamespace?: string(name='ContainerNamespace', position='Query'),
  containerRepository?: string(name='ContainerRepository', position='Query'),
  containerTag?: string(name='ContainerTag', position='Query'),
  dataDisk?: [ 
    {
      index?: int32(name='Index'),
      part?: [ 
        {
          block?: boolean(name='Block'),
          device?: string(name='Device'),
          sizeBytes?: long(name='SizeBytes'),
        }
      ](name='Part'),
      size?: int32(name='Size'),
    }
  ](name='DataDisk', position='Query'),
  description?: string(name='Description', position='Query'),
  frequency?: int32(name='Frequency', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceRamRole?: string(name='InstanceRamRole', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  jobId: string(name='JobId', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', position='Query'),
  maxNumberOfImageToKeep?: int32(name='MaxNumberOfImageToKeep', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scheduledStartTime?: string(name='ScheduledStartTime', position='Query'),
  systemDiskPart?: [ 
    {
      block?: boolean(name='Block'),
      device?: string(name='Device'),
      sizeBytes?: long(name='SizeBytes'),
    }
  ](name='SystemDiskPart', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', position='Query'),
  targetType?: string(name='TargetType', position='Query'),
  validTime?: string(name='ValidTime', position='Query'),
}

model ModifyReplicationJobAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReplicationJobAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReplicationJobAttributeResponseBody(name='body'),
}

async function modifyReplicationJobAttribute(request: ModifyReplicationJobAttributeRequest): ModifyReplicationJobAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReplicationJobAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifySourceServerAttributeRequest {
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  sourceId: string(name='SourceId', position='Query'),
}

model ModifySourceServerAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySourceServerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySourceServerAttributeResponseBody(name='body'),
}

async function modifySourceServerAttribute(request: ModifySourceServerAttributeRequest): ModifySourceServerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySourceServerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model StartReplicationJobRequest {
  jobId: string(name='JobId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model StartReplicationJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartReplicationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartReplicationJobResponseBody(name='body'),
}

async function startReplicationJob(request: StartReplicationJobRequest): StartReplicationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartReplicationJob', 'POST', '/', 'json', false, 'json', request);
}

model StopReplicationJobRequest {
  jobId: string(name='JobId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model StopReplicationJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopReplicationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopReplicationJobResponseBody(name='body'),
}

async function stopReplicationJob(request: StopReplicationJobRequest): StopReplicationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopReplicationJob', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

