/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AccountCenter';
  @version = '2024-12-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EnterpriseAccountChangeLoginPasswordRequest {
  appName?: string(name='AppName', position='Body'),
  encryptPassword: string(name='EncryptPassword', description='This parameter is required.', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountChangeLoginPasswordResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pass?: boolean(name='Pass'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountChangeLoginPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountChangeLoginPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountChangeLoginPassword  EnterpriseAccountChangeLoginPasswordRequest
  * @return EnterpriseAccountChangeLoginPasswordResponse
 */
async function enterpriseAccountChangeLoginPassword(request: EnterpriseAccountChangeLoginPasswordRequest): EnterpriseAccountChangeLoginPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountChangeLoginPassword', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountChangeSecurityEmailRequest {
  appName?: string(name='AppName', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  securityEmail: string(name='SecurityEmail', description='This parameter is required.', position='Query'),
  verifyCode: string(name='VerifyCode', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountChangeSecurityEmailResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountChangeSecurityEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountChangeSecurityEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountChangeSecurityEmail  EnterpriseAccountChangeSecurityEmailRequest
  * @return EnterpriseAccountChangeSecurityEmailResponse
 */
async function enterpriseAccountChangeSecurityEmail(request: EnterpriseAccountChangeSecurityEmailRequest): EnterpriseAccountChangeSecurityEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountChangeSecurityEmail', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountChangeSecurityMobileRequest {
  appName?: string(name='AppName', position='Body'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  newMobile: string(name='NewMobile', description='This parameter is required.', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  verificationCode: string(name='VerificationCode', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountChangeSecurityMobileResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountChangeSecurityMobileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountChangeSecurityMobileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountChangeSecurityMobile  EnterpriseAccountChangeSecurityMobileRequest
  * @return EnterpriseAccountChangeSecurityMobileResponse
 */
async function enterpriseAccountChangeSecurityMobile(request: EnterpriseAccountChangeSecurityMobileRequest): EnterpriseAccountChangeSecurityMobileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountChangeSecurityMobile', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountQueryAccountGrantedRolesRequest {
  appName?: string(name='AppName', position='Body'),
  isOpenApi?: boolean(name='IsOpenApi', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk?: string(name='Pk', position='Body'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', position='Body'),
}

model EnterpriseAccountQueryAccountGrantedRolesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      bizRoleCode?: string(name='BizRoleCode'),
      bizRoleName?: string(name='BizRoleName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountQueryAccountGrantedRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountQueryAccountGrantedRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountQueryAccountGrantedRoles  EnterpriseAccountQueryAccountGrantedRolesRequest
  * @return EnterpriseAccountQueryAccountGrantedRolesResponse
 */
async function enterpriseAccountQueryAccountGrantedRoles(request: EnterpriseAccountQueryAccountGrantedRolesRequest): EnterpriseAccountQueryAccountGrantedRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountQueryAccountGrantedRoles', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountQueryAccountsInfoRequest {
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pksJson: string(name='PksJson', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', position='Body'),
}

model EnterpriseAccountQueryAccountsInfoResponseBody = {
  accountInfoDtoList?: [ 
    {
      alias?: string(name='Alias'),
      belongToMasterAccount?: boolean(name='BelongToMasterAccount'),
      email?: string(name='Email'),
      enterpriseEcId?: string(name='EnterpriseEcId'),
      enterpriseEntityId?: string(name='EnterpriseEntityId'),
      enterpriseLicenseNo?: string(name='EnterpriseLicenseNo'),
      enterpriseName?: string(name='EnterpriseName'),
      enterpriseNbId?: string(name='EnterpriseNbId'),
      freezeLogin?: boolean(name='FreezeLogin'),
      loginId?: string(name='LoginId'),
      manageInviteTimeStamp?: string(name='ManageInviteTimeStamp'),
      pk?: string(name='Pk'),
      securityMobile?: string(name='SecurityMobile'),
    }
  ](name='AccountInfoDtoList'),
  code?: string(name='Code'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountQueryAccountsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountQueryAccountsInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountQueryAccountsInfo  EnterpriseAccountQueryAccountsInfoRequest
  * @return EnterpriseAccountQueryAccountsInfoResponse
 */
async function enterpriseAccountQueryAccountsInfo(request: EnterpriseAccountQueryAccountsInfoRequest): EnterpriseAccountQueryAccountsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountQueryAccountsInfo', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountQueryLoginSettingsRequest {
  appName?: string(name='AppName', position='Body'),
  isOpenApi?: boolean(name='IsOpenApi', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk?: string(name='Pk', position='Body'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', position='Body'),
}

model EnterpriseAccountQueryLoginSettingsResponseBody = {
  code?: string(name='Code'),
  data?: {
    ipMaskDto?: {
      ipMaskEnabledStatus?: string(name='IpMaskEnabledStatus'),
      ipMasks?: [ string ](name='IpMasks'),
    }(name='IpMaskDto'),
    mfaBindStatus?: string(name='MfaBindStatus'),
    riskControlDto?: {
      protectLevel?: string(name='ProtectLevel'),
      riskControlEnabled?: boolean(name='RiskControlEnabled'),
      verifyDetail?: string(name='VerifyDetail'),
      verifyType?: string(name='VerifyType'),
    }(name='RiskControlDto'),
    securityMobileLoginStatus?: string(name='SecurityMobileLoginStatus'),
    sessionExpireTime?: int32(name='SessionExpireTime'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountQueryLoginSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountQueryLoginSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountQueryLoginSettings  EnterpriseAccountQueryLoginSettingsRequest
  * @return EnterpriseAccountQueryLoginSettingsResponse
 */
async function enterpriseAccountQueryLoginSettings(request: EnterpriseAccountQueryLoginSettingsRequest): EnterpriseAccountQueryLoginSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountQueryLoginSettings', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountRemoveMfaRequest {
  appName?: string(name='AppName', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountRemoveMfaResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountRemoveMfaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountRemoveMfaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountRemoveMfa  EnterpriseAccountRemoveMfaRequest
  * @return EnterpriseAccountRemoveMfaResponse
 */
async function enterpriseAccountRemoveMfa(request: EnterpriseAccountRemoveMfaRequest): EnterpriseAccountRemoveMfaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountRemoveMfa', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountSeparateEaRequest {
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk?: string(name='Pk', position='Query'),
}

model EnterpriseAccountSeparateEaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountSeparateEaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountSeparateEaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountSeparateEa  EnterpriseAccountSeparateEaRequest
  * @return EnterpriseAccountSeparateEaResponse
 */
async function enterpriseAccountSeparateEa(request: EnterpriseAccountSeparateEaRequest): EnterpriseAccountSeparateEaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountSeparateEa', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountUpdateAccountAliasRequest {
  alias?: string(name='Alias', position='Query'),
  appName?: string(name='AppName', position='Body'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk?: string(name='Pk', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountUpdateAccountAliasResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateAccountAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateAccountAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountUpdateAccountAlias  EnterpriseAccountUpdateAccountAliasRequest
  * @return EnterpriseAccountUpdateAccountAliasResponse
 */
async function enterpriseAccountUpdateAccountAlias(request: EnterpriseAccountUpdateAccountAliasRequest): EnterpriseAccountUpdateAccountAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountUpdateAccountAlias', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountUpdateAccountBizRoleGrantRequest {
  bizRoleCodeListJson?: string(name='BizRoleCodeListJson', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk?: string(name='Pk', position='Query'),
}

model EnterpriseAccountUpdateAccountBizRoleGrantResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateAccountBizRoleGrantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateAccountBizRoleGrantResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountUpdateAccountBizRoleGrant  EnterpriseAccountUpdateAccountBizRoleGrantRequest
  * @return EnterpriseAccountUpdateAccountBizRoleGrantResponse
 */
async function enterpriseAccountUpdateAccountBizRoleGrant(request: EnterpriseAccountUpdateAccountBizRoleGrantRequest): EnterpriseAccountUpdateAccountBizRoleGrantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountUpdateAccountBizRoleGrant', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountUpdateIpMaskRequest {
  appName?: string(name='AppName', position='Body'),
  ipMasksJson: string(name='IpMasksJson', description='This parameter is required.', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  status: string(name='Status', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountUpdateIpMaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateIpMaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateIpMaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountUpdateIpMask  EnterpriseAccountUpdateIpMaskRequest
  * @return EnterpriseAccountUpdateIpMaskResponse
 */
async function enterpriseAccountUpdateIpMask(request: EnterpriseAccountUpdateIpMaskRequest): EnterpriseAccountUpdateIpMaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountUpdateIpMask', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountUpdateOperateRiskControlRequest {
  appName?: string(name='AppName', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  productLevel: string(name='ProductLevel', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  validateType: string(name='ValidateType', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountUpdateOperateRiskControlResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateOperateRiskControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateOperateRiskControlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountUpdateOperateRiskControl  EnterpriseAccountUpdateOperateRiskControlRequest
  * @return EnterpriseAccountUpdateOperateRiskControlResponse
 */
async function enterpriseAccountUpdateOperateRiskControl(request: EnterpriseAccountUpdateOperateRiskControlRequest): EnterpriseAccountUpdateOperateRiskControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountUpdateOperateRiskControl', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountUpdateSecurityMobileLoginStatusRequest {
  appName?: string(name='AppName', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  status: string(name='Status', description='This parameter is required.', position='Query'),
}

model EnterpriseAccountUpdateSecurityMobileLoginStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pass?: boolean(name='Pass'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateSecurityMobileLoginStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateSecurityMobileLoginStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountUpdateSecurityMobileLoginStatus  EnterpriseAccountUpdateSecurityMobileLoginStatusRequest
  * @return EnterpriseAccountUpdateSecurityMobileLoginStatusResponse
 */
async function enterpriseAccountUpdateSecurityMobileLoginStatus(request: EnterpriseAccountUpdateSecurityMobileLoginStatusRequest): EnterpriseAccountUpdateSecurityMobileLoginStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountUpdateSecurityMobileLoginStatus', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseAccountUpdateSessionExpireTimeRequest {
  appName?: string(name='AppName', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pk: string(name='Pk', description='This parameter is required.', position='Query'),
  requestId: string(name='RequestId', description='This parameter is required.', position='Query'),
  sessionExpireTime: int32(name='SessionExpireTime', description='This parameter is required.', minimum=10800, maximum=86400, position='Query'),
}

model EnterpriseAccountUpdateSessionExpireTimeResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateSessionExpireTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateSessionExpireTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseAccountUpdateSessionExpireTime  EnterpriseAccountUpdateSessionExpireTimeRequest
  * @return EnterpriseAccountUpdateSessionExpireTimeResponse
 */
async function enterpriseAccountUpdateSessionExpireTime(request: EnterpriseAccountUpdateSessionExpireTimeRequest): EnterpriseAccountUpdateSessionExpireTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseAccountUpdateSessionExpireTime', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseOrgQueryLoadTreeRequest {
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  loadOrgOnly?: boolean(name='LoadOrgOnly', example='true', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  requestId: string(name='RequestId', description='This parameter is required.', example='CF20ED94-D406-512F-9798-4E1F65720BF6', position='Query'),
}

model EnterpriseOrgQueryLoadTreeResponseBody = {
  code?: string(name='Code', example='successful'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03'),
  success?: boolean(name='Success', example='True'),
  treeDto?: string(name='TreeDto'),
}

model EnterpriseOrgQueryLoadTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseOrgQueryLoadTreeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseOrgQueryLoadTree  EnterpriseOrgQueryLoadTreeRequest
  * @return EnterpriseOrgQueryLoadTreeResponse
 */
async function enterpriseOrgQueryLoadTree(request: EnterpriseOrgQueryLoadTreeRequest): EnterpriseOrgQueryLoadTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseOrgQueryLoadTree', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRegisterAccountRequest {
  alias?: string(name='Alias', example='资方支付平台', position='Query'),
  encryptPassword?: string(name='EncryptPassword', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  loginEmail?: string(name='LoginEmail', position='Query'),
  organizationId?: string(name='OrganizationId', example='668514d8083f058f78f7199a', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  requestId: string(name='RequestId', description='This parameter is required.', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03', position='Query'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', example='false', position='Query'),
  siteNick?: string(name='SiteNick', position='Query'),
}

model EnterpriseRegisterAccountResponseBody = {
  accountInfo?: {
    enterpriseLicenseNo?: string(name='EnterpriseLicenseNo'),
    enterpriseName?: string(name='EnterpriseName', example='海南屿可网络科技有限公司'),
    loginId?: string(name='LoginId', example='195529'),
    pk?: string(name='Pk', example='5190216604405754'),
  }(name='AccountInfo'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='The operation is not allowed. Channel state (RELEASED) does not meet expectations (ANSWERED).'),
  requestId?: string(name='RequestId', example='BDFCF081-7BCD-52D5-9D82-0F58D96EFD92'),
  success?: boolean(name='Success', example='True'),
}

model EnterpriseRegisterAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRegisterAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRegisterAccount  EnterpriseRegisterAccountRequest
  * @return EnterpriseRegisterAccountResponse
 */
async function enterpriseRegisterAccount(request: EnterpriseRegisterAccountRequest): EnterpriseRegisterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRegisterAccount', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRoleCreateBizRoleRequest {
  bizPermissionCodeListJson?: string(name='BizPermissionCodeListJson', position='Query'),
  bizRoleDesc?: string(name='BizRoleDesc', position='Query'),
  bizRoleName?: string(name='BizRoleName', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model EnterpriseRoleCreateBizRoleResponseBody = {
  bizRoleCode?: string(name='BizRoleCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleCreateBizRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleCreateBizRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRoleCreateBizRole  EnterpriseRoleCreateBizRoleRequest
  * @return EnterpriseRoleCreateBizRoleResponse
 */
async function enterpriseRoleCreateBizRole(request: EnterpriseRoleCreateBizRoleRequest): EnterpriseRoleCreateBizRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRoleCreateBizRole', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRoleDeleteBizRoleRequest {
  bizRoleCode?: string(name='BizRoleCode', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
}

model EnterpriseRoleDeleteBizRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleDeleteBizRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleDeleteBizRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRoleDeleteBizRole  EnterpriseRoleDeleteBizRoleRequest
  * @return EnterpriseRoleDeleteBizRoleResponse
 */
async function enterpriseRoleDeleteBizRole(request: EnterpriseRoleDeleteBizRoleRequest): EnterpriseRoleDeleteBizRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRoleDeleteBizRole', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRoleQueryAccountForRoleGrantByPageRequest {
  bizRoleCode?: string(name='BizRoleCode', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orgId?: string(name='OrgId', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', position='Query'),
}

model EnterpriseRoleQueryAccountForRoleGrantByPageResponseBody = {
  accounts?: [ 
    {
      alias?: string(name='Alias'),
      aliyunId?: string(name='AliyunId'),
      granted?: boolean(name='Granted'),
      pk?: string(name='Pk'),
    }
  ](name='Accounts'),
  code?: string(name='Code'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model EnterpriseRoleQueryAccountForRoleGrantByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleQueryAccountForRoleGrantByPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRoleQueryAccountForRoleGrantByPage  EnterpriseRoleQueryAccountForRoleGrantByPageRequest
  * @return EnterpriseRoleQueryAccountForRoleGrantByPageResponse
 */
async function enterpriseRoleQueryAccountForRoleGrantByPage(request: EnterpriseRoleQueryAccountForRoleGrantByPageRequest): EnterpriseRoleQueryAccountForRoleGrantByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRoleQueryAccountForRoleGrantByPage', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRoleQueryBizRoleByPageRequest {
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Query'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  srcType?: string(name='SrcType', position='Query'),
}

model EnterpriseRoleQueryBizRoleByPageResponseBody = {
  bizRoles?: [ 
    {
      bizPermissionCount?: int32(name='BizPermissionCount'),
      bizPermissionNameList?: [ string ](name='BizPermissionNameList'),
      bizRoleCode?: string(name='BizRoleCode'),
      bizRoleDesc?: string(name='BizRoleDesc'),
      bizRoleName?: string(name='BizRoleName'),
      grantedPkCount?: int32(name='GrantedPkCount'),
      resourceType?: string(name='ResourceType'),
      srcType?: string(name='SrcType'),
    }
  ](name='BizRoles'),
  code?: string(name='Code'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model EnterpriseRoleQueryBizRoleByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleQueryBizRoleByPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRoleQueryBizRoleByPage  EnterpriseRoleQueryBizRoleByPageRequest
  * @return EnterpriseRoleQueryBizRoleByPageResponse
 */
async function enterpriseRoleQueryBizRoleByPage(request: EnterpriseRoleQueryBizRoleByPageRequest): EnterpriseRoleQueryBizRoleByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRoleQueryBizRoleByPage', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRoleQueryBizRoleDetailRequest {
  bizRoleCode?: string(name='BizRoleCode', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
}

model EnterpriseRoleQueryBizRoleDetailResponseBody = {
  bizRoleDetail?: {
    bizPermissions?: [ 
      {
        bizPermissionCode?: string(name='BizPermissionCode'),
        bizPermissionDesc?: string(name='BizPermissionDesc'),
        bizPermissionName?: string(name='BizPermissionName'),
      }
    ](name='BizPermissions'),
    bizRoleCode?: string(name='BizRoleCode'),
    bizRoleDesc?: string(name='BizRoleDesc'),
    bizRoleName?: string(name='BizRoleName'),
    resourceType?: string(name='ResourceType'),
    srcType?: string(name='SrcType'),
  }(name='BizRoleDetail'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleQueryBizRoleDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleQueryBizRoleDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRoleQueryBizRoleDetail  EnterpriseRoleQueryBizRoleDetailRequest
  * @return EnterpriseRoleQueryBizRoleDetailResponse
 */
async function enterpriseRoleQueryBizRoleDetail(request: EnterpriseRoleQueryBizRoleDetailRequest): EnterpriseRoleQueryBizRoleDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRoleQueryBizRoleDetail', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRoleUpdateBizRoleRequest {
  bizPermissionCodeListJson?: string(name='BizPermissionCodeListJson', position='Query'),
  bizRoleCode?: string(name='BizRoleCode', position='Query'),
  bizRoleDesc?: string(name='BizRoleDesc', position='Query'),
  bizRoleName?: string(name='BizRoleName', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
}

model EnterpriseRoleUpdateBizRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleUpdateBizRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleUpdateBizRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRoleUpdateBizRole  EnterpriseRoleUpdateBizRoleRequest
  * @return EnterpriseRoleUpdateBizRoleResponse
 */
async function enterpriseRoleUpdateBizRole(request: EnterpriseRoleUpdateBizRoleRequest): EnterpriseRoleUpdateBizRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRoleUpdateBizRole', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseTodoDealAccountTodoRequest {
  appName?: string(name='AppName', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  remark?: string(name='Remark', position='Body'),
  status?: string(name='Status', position='Body'),
  todoId?: string(name='TodoId', position='Body'),
}

model EnterpriseTodoDealAccountTodoResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseTodoDealAccountTodoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseTodoDealAccountTodoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseTodoDealAccountTodo  EnterpriseTodoDealAccountTodoRequest
  * @return EnterpriseTodoDealAccountTodoResponse
 */
async function enterpriseTodoDealAccountTodo(request: EnterpriseTodoDealAccountTodoRequest): EnterpriseTodoDealAccountTodoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseTodoDealAccountTodo', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseTodoQueryAccountTodoListRequest {
  appName?: string(name='AppName', position='Body'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  operatePk?: string(name='OperatePk', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  page?: int32(name='Page', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', position='Body'),
  status?: string(name='Status', position='Body'),
  todoType?: string(name='TodoType', position='Body'),
}

model EnterpriseTodoQueryAccountTodoListResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
    todoList?: [ 
      {
        aliyunId?: string(name='AliyunId'),
        applicantAliyunId?: string(name='ApplicantAliyunId'),
        applicantPk?: string(name='ApplicantPk'),
        applyRemark?: string(name='ApplyRemark'),
        applyTime?: long(name='ApplyTime'),
        auditorAliyunId?: string(name='AuditorAliyunId'),
        auditorPk?: string(name='AuditorPk'),
        auditorStatus?: string(name='AuditorStatus'),
        canceledTime?: long(name='CanceledTime'),
        closed?: boolean(name='Closed'),
        currAuditor?: boolean(name='CurrAuditor'),
        fromLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='FromLe'),
        pk?: string(name='Pk'),
        processList?: [ 
          {
            aliyunId?: string(name='AliyunId'),
            auditTime?: long(name='AuditTime'),
            ecId?: string(name='EcId'),
            leId?: string(name='LeId'),
            nbId?: string(name='NbId'),
            pk?: string(name='Pk'),
            remark?: string(name='Remark'),
            status?: string(name='Status'),
          }
        ](name='ProcessList'),
        status?: string(name='Status'),
        timeoutTime?: long(name='TimeoutTime'),
        toLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='ToLe'),
        toLeAudit?: boolean(name='ToLeAudit'),
        todoId?: string(name='TodoId'),
        todoType?: string(name='TodoType'),
        todoView?: string(name='TodoView'),
      }
    ](name='TodoList'),
  }(name='Data'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseTodoQueryAccountTodoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseTodoQueryAccountTodoListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseTodoQueryAccountTodoList  EnterpriseTodoQueryAccountTodoListRequest
  * @return EnterpriseTodoQueryAccountTodoListResponse
 */
async function enterpriseTodoQueryAccountTodoList(request: EnterpriseTodoQueryAccountTodoListRequest): EnterpriseTodoQueryAccountTodoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseTodoQueryAccountTodoList', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseTodoQueryAccountTodoListByApplicantRequest {
  appName?: string(name='AppName', position='Body'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  operatePk?: string(name='OperatePk', position='Body'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  page?: int32(name='Page', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', position='Body'),
  status?: string(name='Status', position='Body'),
  todoType?: string(name='TodoType', position='Body'),
}

model EnterpriseTodoQueryAccountTodoListByApplicantResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
    todoList?: [ 
      {
        aliyunId?: string(name='AliyunId'),
        applicantAliyunId?: string(name='ApplicantAliyunId'),
        applicantPk?: string(name='ApplicantPk'),
        applyRemark?: string(name='ApplyRemark'),
        applyTime?: long(name='ApplyTime'),
        auditorAliyunId?: string(name='AuditorAliyunId'),
        auditorPk?: string(name='AuditorPk'),
        auditorStatus?: string(name='AuditorStatus'),
        canceledTime?: long(name='CanceledTime'),
        closed?: boolean(name='Closed'),
        currAuditor?: boolean(name='CurrAuditor'),
        fromLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='FromLe'),
        pk?: string(name='Pk'),
        processList?: [ 
          {
            aliyunId?: string(name='AliyunId'),
            auditTime?: long(name='AuditTime'),
            ecId?: string(name='EcId'),
            leId?: string(name='LeId'),
            nbId?: string(name='NbId'),
            pk?: string(name='Pk'),
            remark?: string(name='Remark'),
            status?: string(name='Status'),
          }
        ](name='ProcessList'),
        status?: string(name='Status'),
        timeoutTime?: long(name='TimeoutTime'),
        toLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='ToLe'),
        toLeAudit?: boolean(name='ToLeAudit'),
        todoId?: string(name='TodoId'),
        todoType?: string(name='TodoType'),
        todoView?: string(name='TodoView'),
      }
    ](name='TodoList'),
  }(name='Data'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseTodoQueryAccountTodoListByApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseTodoQueryAccountTodoListByApplicantResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseTodoQueryAccountTodoListByApplicant  EnterpriseTodoQueryAccountTodoListByApplicantRequest
  * @return EnterpriseTodoQueryAccountTodoListByApplicantResponse
 */
async function enterpriseTodoQueryAccountTodoListByApplicant(request: EnterpriseTodoQueryAccountTodoListByApplicantRequest): EnterpriseTodoQueryAccountTodoListByApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseTodoQueryAccountTodoListByApplicant', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseUninvitedAdminInviteJoinEnterpriseRequest {
  ecId?: string(name='EcId', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  inviteePk?: string(name='InviteePk', position='Query'),
  leId?: string(name='LeId', position='Query'),
  nbId?: string(name='NbId', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model EnterpriseUninvitedAdminInviteJoinEnterpriseResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      applicantAliyunId?: string(name='ApplicantAliyunId'),
      applicantPk?: string(name='ApplicantPk'),
      applyRemark?: string(name='ApplyRemark'),
      applyTime?: long(name='ApplyTime'),
      auditorAliyunId?: string(name='AuditorAliyunId'),
      auditorPk?: string(name='AuditorPk'),
      ecId?: string(name='EcId'),
      leId?: string(name='LeId'),
      leLicenseNo?: string(name='LeLicenseNo'),
      leName?: string(name='LeName'),
      message?: string(name='Message'),
      nbId?: string(name='NbId'),
      operatedAliyunId?: string(name='OperatedAliyunId'),
      operatedPk?: string(name='OperatedPk'),
      success?: string(name='Success'),
      timeoutTime?: long(name='TimeoutTime'),
      todoId?: string(name='TodoId'),
      todoType?: string(name='TodoType'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseUninvitedAdminInviteJoinEnterpriseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseUninvitedAdminInviteJoinEnterpriseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseUninvitedAdminInviteJoinEnterprise  EnterpriseUninvitedAdminInviteJoinEnterpriseRequest
  * @return EnterpriseUninvitedAdminInviteJoinEnterpriseResponse
 */
async function enterpriseUninvitedAdminInviteJoinEnterprise(request: EnterpriseUninvitedAdminInviteJoinEnterpriseRequest): EnterpriseUninvitedAdminInviteJoinEnterpriseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseUninvitedAdminInviteJoinEnterprise', 'POST', '/', 'json', false, 'json', request);
}

