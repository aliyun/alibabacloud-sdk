/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AccountCenter';
  @version = '2024-12-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EnterpriseOrgQueryLoadTreeRequest {
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  loadOrgOnly?: boolean(name='LoadOrgOnly', example='true', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  requestId: string(name='RequestId', description='This parameter is required.', example='CF20ED94-D406-512F-9798-4E1F65720BF6', position='Query'),
}

model EnterpriseOrgQueryLoadTreeResponseBody = {
  code?: string(name='Code', example='successful'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03'),
  success?: boolean(name='Success', example='True'),
  treeDto?: string(name='TreeDto'),
}

model EnterpriseOrgQueryLoadTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseOrgQueryLoadTreeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseOrgQueryLoadTree  EnterpriseOrgQueryLoadTreeRequest
  * @return EnterpriseOrgQueryLoadTreeResponse
 */
async function enterpriseOrgQueryLoadTree(request: EnterpriseOrgQueryLoadTreeRequest): EnterpriseOrgQueryLoadTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseOrgQueryLoadTree', 'POST', '/', 'json', true, 'form', request);
}

model EnterpriseRegisterAccountRequest {
  alias?: string(name='Alias', example='资方支付平台', position='Query'),
  encryptPassword?: string(name='EncryptPassword', position='Query'),
  encryptTicket?: string(name='EncryptTicket', position='Query'),
  loginEmail?: string(name='LoginEmail', position='Query'),
  organizationId?: string(name='OrganizationId', example='668514d8083f058f78f7199a', position='Query'),
  orientedEcId?: string(name='OrientedEcId', position='Body'),
  orientedLeId?: string(name='OrientedLeId', position='Body'),
  orientedNbId?: string(name='OrientedNbId', position='Body'),
  requestId: string(name='RequestId', description='This parameter is required.', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03', position='Query'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', example='false', position='Query'),
  siteNick?: string(name='SiteNick', position='Query'),
}

model EnterpriseRegisterAccountResponseBody = {
  accountInfo?: {
    enterpriseLicenseNo?: string(name='EnterpriseLicenseNo'),
    enterpriseName?: string(name='EnterpriseName', example='海南屿可网络科技有限公司'),
    loginId?: string(name='LoginId', example='195529'),
    pk?: string(name='Pk', example='5190216604405754'),
  }(name='AccountInfo'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='The operation is not allowed. Channel state (RELEASED) does not meet expectations (ANSWERED).'),
  requestId?: string(name='RequestId', example='BDFCF081-7BCD-52D5-9D82-0F58D96EFD92'),
  success?: boolean(name='Success', example='True'),
}

model EnterpriseRegisterAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRegisterAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnterpriseRegisterAccount  EnterpriseRegisterAccountRequest
  * @return EnterpriseRegisterAccountResponse
 */
async function enterpriseRegisterAccount(request: EnterpriseRegisterAccountRequest): EnterpriseRegisterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterpriseRegisterAccount', 'POST', '/', 'json', true, 'form', request);
}

