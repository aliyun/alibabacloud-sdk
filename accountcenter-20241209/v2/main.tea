/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('accountcenter', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EnterpriseAccountChangeLoginPasswordRequest {
  appName?: string(name='AppName'),
  encryptPassword?: string(name='EncryptPassword', description='This parameter is required.'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
}

model EnterpriseAccountChangeLoginPasswordResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pass?: boolean(name='Pass'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountChangeLoginPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountChangeLoginPasswordResponseBody(name='body'),
}

/**
 * @summary 修改登录密码
 *
 * @param request EnterpriseAccountChangeLoginPasswordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountChangeLoginPasswordResponse
 */
async function enterpriseAccountChangeLoginPasswordWithOptions(request: EnterpriseAccountChangeLoginPasswordRequest, runtime: $RuntimeOptions): EnterpriseAccountChangeLoginPasswordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.encryptPassword)) {
    query['EncryptPassword'] = request.encryptPassword;
  }
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountChangeLoginPassword',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改登录密码
 *
 * @param request EnterpriseAccountChangeLoginPasswordRequest
 * @return EnterpriseAccountChangeLoginPasswordResponse
 */
async function enterpriseAccountChangeLoginPassword(request: EnterpriseAccountChangeLoginPasswordRequest): EnterpriseAccountChangeLoginPasswordResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountChangeLoginPasswordWithOptions(request, runtime);
}

model EnterpriseAccountChangeSecurityEmailRequest {
  appName?: string(name='AppName'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  securityEmail?: string(name='SecurityEmail', description='This parameter is required.'),
  verifyCode?: string(name='VerifyCode', description='This parameter is required.'),
}

model EnterpriseAccountChangeSecurityEmailResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountChangeSecurityEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountChangeSecurityEmailResponseBody(name='body'),
}

/**
 * @summary 修改安全邮箱
 *
 * @param request EnterpriseAccountChangeSecurityEmailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountChangeSecurityEmailResponse
 */
async function enterpriseAccountChangeSecurityEmailWithOptions(request: EnterpriseAccountChangeSecurityEmailRequest, runtime: $RuntimeOptions): EnterpriseAccountChangeSecurityEmailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.securityEmail)) {
    query['SecurityEmail'] = request.securityEmail;
  }
  if (!$isNull(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountChangeSecurityEmail',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改安全邮箱
 *
 * @param request EnterpriseAccountChangeSecurityEmailRequest
 * @return EnterpriseAccountChangeSecurityEmailResponse
 */
async function enterpriseAccountChangeSecurityEmail(request: EnterpriseAccountChangeSecurityEmailRequest): EnterpriseAccountChangeSecurityEmailResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountChangeSecurityEmailWithOptions(request, runtime);
}

model EnterpriseAccountChangeSecurityMobileRequest {
  appName?: string(name='AppName'),
  encryptTicket?: string(name='EncryptTicket'),
  newMobile?: string(name='NewMobile', description='This parameter is required.'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  verificationCode?: string(name='VerificationCode', description='This parameter is required.'),
}

model EnterpriseAccountChangeSecurityMobileResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountChangeSecurityMobileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountChangeSecurityMobileResponseBody(name='body'),
}

/**
 * @summary 修改成员账号安全手机号
 *
 * @param request EnterpriseAccountChangeSecurityMobileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountChangeSecurityMobileResponse
 */
async function enterpriseAccountChangeSecurityMobileWithOptions(request: EnterpriseAccountChangeSecurityMobileRequest, runtime: $RuntimeOptions): EnterpriseAccountChangeSecurityMobileResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.newMobile)) {
    query['NewMobile'] = request.newMobile;
  }
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.verificationCode)) {
    query['VerificationCode'] = request.verificationCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountChangeSecurityMobile',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改成员账号安全手机号
 *
 * @param request EnterpriseAccountChangeSecurityMobileRequest
 * @return EnterpriseAccountChangeSecurityMobileResponse
 */
async function enterpriseAccountChangeSecurityMobile(request: EnterpriseAccountChangeSecurityMobileRequest): EnterpriseAccountChangeSecurityMobileResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountChangeSecurityMobileWithOptions(request, runtime);
}

model EnterpriseAccountQueryAccountGrantedRolesRequest {
  appName?: string(name='AppName'),
  isOpenApi?: boolean(name='IsOpenApi'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo'),
}

model EnterpriseAccountQueryAccountGrantedRolesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      bizRoleCode?: string(name='BizRoleCode'),
      bizRoleName?: string(name='BizRoleName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountQueryAccountGrantedRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountQueryAccountGrantedRolesResponseBody(name='body'),
}

/**
 * @summary 查询纳管账号授权角色
 *
 * @param request EnterpriseAccountQueryAccountGrantedRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountQueryAccountGrantedRolesResponse
 */
async function enterpriseAccountQueryAccountGrantedRolesWithOptions(request: EnterpriseAccountQueryAccountGrantedRolesRequest, runtime: $RuntimeOptions): EnterpriseAccountQueryAccountGrantedRolesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.isOpenApi)) {
    body['IsOpenApi'] = request.isOpenApi;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  if (!$isNull(request.pk)) {
    body['Pk'] = request.pk;
  }
  if (!$isNull(request.showCompleteInfo)) {
    body['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountQueryAccountGrantedRoles',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询纳管账号授权角色
 *
 * @param request EnterpriseAccountQueryAccountGrantedRolesRequest
 * @return EnterpriseAccountQueryAccountGrantedRolesResponse
 */
async function enterpriseAccountQueryAccountGrantedRoles(request: EnterpriseAccountQueryAccountGrantedRolesRequest): EnterpriseAccountQueryAccountGrantedRolesResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountQueryAccountGrantedRolesWithOptions(request, runtime);
}

model EnterpriseAccountQueryAccountsInfoRequest {
  encryptTicket?: string(name='EncryptTicket'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pksJson?: string(name='PksJson', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo'),
}

model EnterpriseAccountQueryAccountsInfoResponseBody = {
  accountInfoDtoList?: [ 
    {
      alias?: string(name='Alias'),
      belongToMasterAccount?: boolean(name='BelongToMasterAccount'),
      email?: string(name='Email'),
      enterpriseEcId?: string(name='EnterpriseEcId'),
      enterpriseEntityId?: string(name='EnterpriseEntityId'),
      enterpriseLicenseNo?: string(name='EnterpriseLicenseNo'),
      enterpriseName?: string(name='EnterpriseName'),
      enterpriseNbId?: string(name='EnterpriseNbId'),
      freezeLogin?: boolean(name='FreezeLogin'),
      loginId?: string(name='LoginId'),
      manageInviteTimeStamp?: string(name='ManageInviteTimeStamp'),
      pk?: string(name='Pk'),
      securityMobile?: string(name='SecurityMobile'),
    }
  ](name='AccountInfoDtoList'),
  code?: string(name='Code'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountQueryAccountsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountQueryAccountsInfoResponseBody(name='body'),
}

/**
 * @summary 批量查询纳管账号信息
 *
 * @param request EnterpriseAccountQueryAccountsInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountQueryAccountsInfoResponse
 */
async function enterpriseAccountQueryAccountsInfoWithOptions(request: EnterpriseAccountQueryAccountsInfoRequest, runtime: $RuntimeOptions): EnterpriseAccountQueryAccountsInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.pksJson)) {
    query['PksJson'] = request.pksJson;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  if (!$isNull(request.showCompleteInfo)) {
    body['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountQueryAccountsInfo',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询纳管账号信息
 *
 * @param request EnterpriseAccountQueryAccountsInfoRequest
 * @return EnterpriseAccountQueryAccountsInfoResponse
 */
async function enterpriseAccountQueryAccountsInfo(request: EnterpriseAccountQueryAccountsInfoRequest): EnterpriseAccountQueryAccountsInfoResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountQueryAccountsInfoWithOptions(request, runtime);
}

model EnterpriseAccountQueryLoginSettingsRequest {
  appName?: string(name='AppName'),
  isOpenApi?: boolean(name='IsOpenApi'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo'),
}

model EnterpriseAccountQueryLoginSettingsResponseBody = {
  code?: string(name='Code'),
  data?: {
    ipMaskDto?: {
      ipMaskEnabledStatus?: string(name='IpMaskEnabledStatus'),
      ipMasks?: [ string ](name='IpMasks'),
    }(name='IpMaskDto'),
    mfaBindStatus?: string(name='MfaBindStatus'),
    riskControlDto?: {
      protectLevel?: string(name='ProtectLevel'),
      riskControlEnabled?: boolean(name='RiskControlEnabled'),
      verifyDetail?: string(name='VerifyDetail'),
      verifyType?: string(name='VerifyType'),
    }(name='RiskControlDto'),
    securityMobileLoginStatus?: string(name='SecurityMobileLoginStatus'),
    sessionExpireTime?: int32(name='SessionExpireTime'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountQueryLoginSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountQueryLoginSettingsResponseBody(name='body'),
}

/**
 * @summary 查询纳管账号登录设置
 *
 * @param request EnterpriseAccountQueryLoginSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountQueryLoginSettingsResponse
 */
async function enterpriseAccountQueryLoginSettingsWithOptions(request: EnterpriseAccountQueryLoginSettingsRequest, runtime: $RuntimeOptions): EnterpriseAccountQueryLoginSettingsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.isOpenApi)) {
    body['IsOpenApi'] = request.isOpenApi;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  if (!$isNull(request.pk)) {
    body['Pk'] = request.pk;
  }
  if (!$isNull(request.showCompleteInfo)) {
    body['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountQueryLoginSettings',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询纳管账号登录设置
 *
 * @param request EnterpriseAccountQueryLoginSettingsRequest
 * @return EnterpriseAccountQueryLoginSettingsResponse
 */
async function enterpriseAccountQueryLoginSettings(request: EnterpriseAccountQueryLoginSettingsRequest): EnterpriseAccountQueryLoginSettingsResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountQueryLoginSettingsWithOptions(request, runtime);
}

model EnterpriseAccountRemoveMfaRequest {
  appName?: string(name='AppName'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
}

model EnterpriseAccountRemoveMfaResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountRemoveMfaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountRemoveMfaResponseBody(name='body'),
}

/**
 * @summary 移除mfa
 *
 * @param request EnterpriseAccountRemoveMfaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountRemoveMfaResponse
 */
async function enterpriseAccountRemoveMfaWithOptions(request: EnterpriseAccountRemoveMfaRequest, runtime: $RuntimeOptions): EnterpriseAccountRemoveMfaResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountRemoveMfa',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 移除mfa
 *
 * @param request EnterpriseAccountRemoveMfaRequest
 * @return EnterpriseAccountRemoveMfaResponse
 */
async function enterpriseAccountRemoveMfa(request: EnterpriseAccountRemoveMfaRequest): EnterpriseAccountRemoveMfaResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountRemoveMfaWithOptions(request, runtime);
}

model EnterpriseAccountSeparateEaRequest {
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk'),
}

model EnterpriseAccountSeparateEaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountSeparateEaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountSeparateEaResponseBody(name='body'),
}

/**
 * @summary 脱离ea
 *
 * @param request EnterpriseAccountSeparateEaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountSeparateEaResponse
 */
async function enterpriseAccountSeparateEaWithOptions(request: EnterpriseAccountSeparateEaRequest, runtime: $RuntimeOptions): EnterpriseAccountSeparateEaResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountSeparateEa',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 脱离ea
 *
 * @param request EnterpriseAccountSeparateEaRequest
 * @return EnterpriseAccountSeparateEaResponse
 */
async function enterpriseAccountSeparateEa(request: EnterpriseAccountSeparateEaRequest): EnterpriseAccountSeparateEaResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountSeparateEaWithOptions(request, runtime);
}

model EnterpriseAccountUpdateAccountAliasRequest {
  alias?: string(name='Alias'),
  appName?: string(name='AppName'),
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
}

model EnterpriseAccountUpdateAccountAliasResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateAccountAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateAccountAliasResponseBody(name='body'),
}

/**
 * @summary 更新账号企业多账号中的别名
 *
 * @param request EnterpriseAccountUpdateAccountAliasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountUpdateAccountAliasResponse
 */
async function enterpriseAccountUpdateAccountAliasWithOptions(request: EnterpriseAccountUpdateAccountAliasRequest, runtime: $RuntimeOptions): EnterpriseAccountUpdateAccountAliasResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountUpdateAccountAlias',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新账号企业多账号中的别名
 *
 * @param request EnterpriseAccountUpdateAccountAliasRequest
 * @return EnterpriseAccountUpdateAccountAliasResponse
 */
async function enterpriseAccountUpdateAccountAlias(request: EnterpriseAccountUpdateAccountAliasRequest): EnterpriseAccountUpdateAccountAliasResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountUpdateAccountAliasWithOptions(request, runtime);
}

model EnterpriseAccountUpdateAccountBizRoleGrantRequest {
  bizRoleCodeListJson?: string(name='BizRoleCodeListJson'),
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk'),
}

model EnterpriseAccountUpdateAccountBizRoleGrantResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateAccountBizRoleGrantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateAccountBizRoleGrantResponseBody(name='body'),
}

/**
 * @summary 更新账号授权
 *
 * @param request EnterpriseAccountUpdateAccountBizRoleGrantRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountUpdateAccountBizRoleGrantResponse
 */
async function enterpriseAccountUpdateAccountBizRoleGrantWithOptions(request: EnterpriseAccountUpdateAccountBizRoleGrantRequest, runtime: $RuntimeOptions): EnterpriseAccountUpdateAccountBizRoleGrantResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizRoleCodeListJson)) {
    query['BizRoleCodeListJson'] = request.bizRoleCodeListJson;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountUpdateAccountBizRoleGrant',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新账号授权
 *
 * @param request EnterpriseAccountUpdateAccountBizRoleGrantRequest
 * @return EnterpriseAccountUpdateAccountBizRoleGrantResponse
 */
async function enterpriseAccountUpdateAccountBizRoleGrant(request: EnterpriseAccountUpdateAccountBizRoleGrantRequest): EnterpriseAccountUpdateAccountBizRoleGrantResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountUpdateAccountBizRoleGrantWithOptions(request, runtime);
}

model EnterpriseAccountUpdateIpMaskRequest {
  appName?: string(name='AppName'),
  ipMasksJson?: string(name='IpMasksJson', description='This parameter is required.'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  status?: string(name='Status', description='This parameter is required.'),
}

model EnterpriseAccountUpdateIpMaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateIpMaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateIpMaskResponseBody(name='body'),
}

/**
 * @summary 设置Ip掩码
 *
 * @param request EnterpriseAccountUpdateIpMaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountUpdateIpMaskResponse
 */
async function enterpriseAccountUpdateIpMaskWithOptions(request: EnterpriseAccountUpdateIpMaskRequest, runtime: $RuntimeOptions): EnterpriseAccountUpdateIpMaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ipMasksJson)) {
    query['IpMasksJson'] = request.ipMasksJson;
  }
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountUpdateIpMask',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置Ip掩码
 *
 * @param request EnterpriseAccountUpdateIpMaskRequest
 * @return EnterpriseAccountUpdateIpMaskResponse
 */
async function enterpriseAccountUpdateIpMask(request: EnterpriseAccountUpdateIpMaskRequest): EnterpriseAccountUpdateIpMaskResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountUpdateIpMaskWithOptions(request, runtime);
}

model EnterpriseAccountUpdateOperateRiskControlRequest {
  appName?: string(name='AppName'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  productLevel?: string(name='ProductLevel', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  validateType?: string(name='ValidateType', description='This parameter is required.'),
}

model EnterpriseAccountUpdateOperateRiskControlResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateOperateRiskControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateOperateRiskControlResponseBody(name='body'),
}

/**
 * @summary 更新操作风控
 *
 * @param request EnterpriseAccountUpdateOperateRiskControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountUpdateOperateRiskControlResponse
 */
async function enterpriseAccountUpdateOperateRiskControlWithOptions(request: EnterpriseAccountUpdateOperateRiskControlRequest, runtime: $RuntimeOptions): EnterpriseAccountUpdateOperateRiskControlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.productLevel)) {
    query['ProductLevel'] = request.productLevel;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.validateType)) {
    query['ValidateType'] = request.validateType;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountUpdateOperateRiskControl',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新操作风控
 *
 * @param request EnterpriseAccountUpdateOperateRiskControlRequest
 * @return EnterpriseAccountUpdateOperateRiskControlResponse
 */
async function enterpriseAccountUpdateOperateRiskControl(request: EnterpriseAccountUpdateOperateRiskControlRequest): EnterpriseAccountUpdateOperateRiskControlResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountUpdateOperateRiskControlWithOptions(request, runtime);
}

model EnterpriseAccountUpdateSecurityMobileLoginStatusRequest {
  appName?: string(name='AppName'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  status?: string(name='Status', description='This parameter is required.'),
}

model EnterpriseAccountUpdateSecurityMobileLoginStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pass?: boolean(name='Pass'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateSecurityMobileLoginStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateSecurityMobileLoginStatusResponseBody(name='body'),
}

/**
 * @summary 修改安全手机启用状态
 *
 * @param request EnterpriseAccountUpdateSecurityMobileLoginStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountUpdateSecurityMobileLoginStatusResponse
 */
async function enterpriseAccountUpdateSecurityMobileLoginStatusWithOptions(request: EnterpriseAccountUpdateSecurityMobileLoginStatusRequest, runtime: $RuntimeOptions): EnterpriseAccountUpdateSecurityMobileLoginStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountUpdateSecurityMobileLoginStatus',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改安全手机启用状态
 *
 * @param request EnterpriseAccountUpdateSecurityMobileLoginStatusRequest
 * @return EnterpriseAccountUpdateSecurityMobileLoginStatusResponse
 */
async function enterpriseAccountUpdateSecurityMobileLoginStatus(request: EnterpriseAccountUpdateSecurityMobileLoginStatusRequest): EnterpriseAccountUpdateSecurityMobileLoginStatusResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountUpdateSecurityMobileLoginStatusWithOptions(request, runtime);
}

model EnterpriseAccountUpdateSessionExpireTimeRequest {
  appName?: string(name='AppName'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pk?: string(name='Pk', description='This parameter is required.'),
  requestId?: string(name='RequestId', description='This parameter is required.'),
  sessionExpireTime?: int32(name='SessionExpireTime', description='This parameter is required.'),
}

model EnterpriseAccountUpdateSessionExpireTimeResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseAccountUpdateSessionExpireTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseAccountUpdateSessionExpireTimeResponseBody(name='body'),
}

/**
 * @summary 更新过期时间
 *
 * @param request EnterpriseAccountUpdateSessionExpireTimeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseAccountUpdateSessionExpireTimeResponse
 */
async function enterpriseAccountUpdateSessionExpireTimeWithOptions(request: EnterpriseAccountUpdateSessionExpireTimeRequest, runtime: $RuntimeOptions): EnterpriseAccountUpdateSessionExpireTimeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.sessionExpireTime)) {
    query['SessionExpireTime'] = request.sessionExpireTime;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseAccountUpdateSessionExpireTime',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新过期时间
 *
 * @param request EnterpriseAccountUpdateSessionExpireTimeRequest
 * @return EnterpriseAccountUpdateSessionExpireTimeResponse
 */
async function enterpriseAccountUpdateSessionExpireTime(request: EnterpriseAccountUpdateSessionExpireTimeRequest): EnterpriseAccountUpdateSessionExpireTimeResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseAccountUpdateSessionExpireTimeWithOptions(request, runtime);
}

model EnterpriseOrgQueryLoadTreeRequest {
  encryptTicket?: string(name='EncryptTicket'),
  loadOrgOnly?: boolean(name='LoadOrgOnly', example='true'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='CF20ED94-D406-512F-9798-4E1F65720BF6'),
}

model EnterpriseOrgQueryLoadTreeResponseBody = {
  code?: string(name='Code', example='successful'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03'),
  success?: boolean(name='Success', example='True'),
  treeDto?: string(name='TreeDto'),
}

model EnterpriseOrgQueryLoadTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseOrgQueryLoadTreeResponseBody(name='body'),
}

/**
 * @summary 组织目录树查询
 *
 * @param request EnterpriseOrgQueryLoadTreeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseOrgQueryLoadTreeResponse
 */
async function enterpriseOrgQueryLoadTreeWithOptions(request: EnterpriseOrgQueryLoadTreeRequest, runtime: $RuntimeOptions): EnterpriseOrgQueryLoadTreeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.loadOrgOnly)) {
    query['LoadOrgOnly'] = request.loadOrgOnly;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseOrgQueryLoadTree',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 组织目录树查询
 *
 * @param request EnterpriseOrgQueryLoadTreeRequest
 * @return EnterpriseOrgQueryLoadTreeResponse
 */
async function enterpriseOrgQueryLoadTree(request: EnterpriseOrgQueryLoadTreeRequest): EnterpriseOrgQueryLoadTreeResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseOrgQueryLoadTreeWithOptions(request, runtime);
}

model EnterpriseRegisterAccountRequest {
  alias?: string(name='Alias', example='资方支付平台'),
  encryptPassword?: string(name='EncryptPassword'),
  encryptTicket?: string(name='EncryptTicket'),
  loginEmail?: string(name='LoginEmail'),
  organizationId?: string(name='OrganizationId', example='668514d8083f058f78f7199a'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', example='false'),
  siteNick?: string(name='SiteNick'),
}

model EnterpriseRegisterAccountResponseBody = {
  accountInfo?: {
    enterpriseLicenseNo?: string(name='EnterpriseLicenseNo'),
    enterpriseName?: string(name='EnterpriseName', example='海南屿可网络科技有限公司'),
    loginId?: string(name='LoginId', example='195529'),
    pk?: string(name='Pk', example='5190216604405754'),
  }(name='AccountInfo'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='The operation is not allowed. Channel state (RELEASED) does not meet expectations (ANSWERED).'),
  requestId?: string(name='RequestId', example='BDFCF081-7BCD-52D5-9D82-0F58D96EFD92'),
  success?: boolean(name='Success', example='True'),
}

model EnterpriseRegisterAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRegisterAccountResponseBody(name='body'),
}

/**
 * @summary 创建成员账号
 *
 * @param request EnterpriseRegisterAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRegisterAccountResponse
 */
async function enterpriseRegisterAccountWithOptions(request: EnterpriseRegisterAccountRequest, runtime: $RuntimeOptions): EnterpriseRegisterAccountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!$isNull(request.encryptPassword)) {
    query['EncryptPassword'] = request.encryptPassword;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.loginEmail)) {
    query['LoginEmail'] = request.loginEmail;
  }
  if (!$isNull(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.showCompleteInfo)) {
    query['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  if (!$isNull(request.siteNick)) {
    query['SiteNick'] = request.siteNick;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRegisterAccount',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建成员账号
 *
 * @param request EnterpriseRegisterAccountRequest
 * @return EnterpriseRegisterAccountResponse
 */
async function enterpriseRegisterAccount(request: EnterpriseRegisterAccountRequest): EnterpriseRegisterAccountResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRegisterAccountWithOptions(request, runtime);
}

model EnterpriseRoleCreateBizRoleRequest {
  bizPermissionCodeListJson?: string(name='BizPermissionCodeListJson'),
  bizRoleDesc?: string(name='BizRoleDesc'),
  bizRoleName?: string(name='BizRoleName'),
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  resourceType?: string(name='ResourceType'),
}

model EnterpriseRoleCreateBizRoleResponseBody = {
  bizRoleCode?: string(name='BizRoleCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleCreateBizRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleCreateBizRoleResponseBody(name='body'),
}

/**
 * @summary 创建业务角色
 *
 * @param request EnterpriseRoleCreateBizRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRoleCreateBizRoleResponse
 */
async function enterpriseRoleCreateBizRoleWithOptions(request: EnterpriseRoleCreateBizRoleRequest, runtime: $RuntimeOptions): EnterpriseRoleCreateBizRoleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizPermissionCodeListJson)) {
    query['BizPermissionCodeListJson'] = request.bizPermissionCodeListJson;
  }
  if (!$isNull(request.bizRoleDesc)) {
    query['BizRoleDesc'] = request.bizRoleDesc;
  }
  if (!$isNull(request.bizRoleName)) {
    query['BizRoleName'] = request.bizRoleName;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRoleCreateBizRole',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建业务角色
 *
 * @param request EnterpriseRoleCreateBizRoleRequest
 * @return EnterpriseRoleCreateBizRoleResponse
 */
async function enterpriseRoleCreateBizRole(request: EnterpriseRoleCreateBizRoleRequest): EnterpriseRoleCreateBizRoleResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRoleCreateBizRoleWithOptions(request, runtime);
}

model EnterpriseRoleDeleteBizRoleRequest {
  bizRoleCode?: string(name='BizRoleCode'),
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
}

model EnterpriseRoleDeleteBizRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleDeleteBizRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleDeleteBizRoleResponseBody(name='body'),
}

/**
 * @summary 删除业务角色
 *
 * @param request EnterpriseRoleDeleteBizRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRoleDeleteBizRoleResponse
 */
async function enterpriseRoleDeleteBizRoleWithOptions(request: EnterpriseRoleDeleteBizRoleRequest, runtime: $RuntimeOptions): EnterpriseRoleDeleteBizRoleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizRoleCode)) {
    query['BizRoleCode'] = request.bizRoleCode;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRoleDeleteBizRole',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除业务角色
 *
 * @param request EnterpriseRoleDeleteBizRoleRequest
 * @return EnterpriseRoleDeleteBizRoleResponse
 */
async function enterpriseRoleDeleteBizRole(request: EnterpriseRoleDeleteBizRoleRequest): EnterpriseRoleDeleteBizRoleResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRoleDeleteBizRoleWithOptions(request, runtime);
}

model EnterpriseRoleQueryAccountForRoleGrantByPageRequest {
  bizRoleCode?: string(name='BizRoleCode'),
  encryptTicket?: string(name='EncryptTicket'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orgId?: string(name='OrgId'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo'),
}

model EnterpriseRoleQueryAccountForRoleGrantByPageResponseBody = {
  accounts?: [ 
    {
      alias?: string(name='Alias'),
      aliyunId?: string(name='AliyunId'),
      granted?: boolean(name='Granted'),
      pk?: string(name='Pk'),
    }
  ](name='Accounts'),
  code?: string(name='Code'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model EnterpriseRoleQueryAccountForRoleGrantByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleQueryAccountForRoleGrantByPageResponseBody(name='body'),
}

/**
 * @summary 角色授权场景下分页查询账号
 *
 * @param request EnterpriseRoleQueryAccountForRoleGrantByPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRoleQueryAccountForRoleGrantByPageResponse
 */
async function enterpriseRoleQueryAccountForRoleGrantByPageWithOptions(request: EnterpriseRoleQueryAccountForRoleGrantByPageRequest, runtime: $RuntimeOptions): EnterpriseRoleQueryAccountForRoleGrantByPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizRoleCode)) {
    query['BizRoleCode'] = request.bizRoleCode;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.orgId)) {
    query['OrgId'] = request.orgId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.query)) {
    query['Query'] = request.query;
  }
  if (!$isNull(request.showCompleteInfo)) {
    query['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRoleQueryAccountForRoleGrantByPage',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 角色授权场景下分页查询账号
 *
 * @param request EnterpriseRoleQueryAccountForRoleGrantByPageRequest
 * @return EnterpriseRoleQueryAccountForRoleGrantByPageResponse
 */
async function enterpriseRoleQueryAccountForRoleGrantByPage(request: EnterpriseRoleQueryAccountForRoleGrantByPageRequest): EnterpriseRoleQueryAccountForRoleGrantByPageResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRoleQueryAccountForRoleGrantByPageWithOptions(request, runtime);
}

model EnterpriseRoleQueryBizRoleByPageRequest {
  encryptTicket?: string(name='EncryptTicket'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  resourceType?: string(name='ResourceType'),
  srcType?: string(name='SrcType'),
}

model EnterpriseRoleQueryBizRoleByPageResponseBody = {
  bizRoles?: [ 
    {
      bizPermissionCount?: int32(name='BizPermissionCount'),
      bizPermissionNameList?: [ string ](name='BizPermissionNameList'),
      bizRoleCode?: string(name='BizRoleCode'),
      bizRoleDesc?: string(name='BizRoleDesc'),
      bizRoleName?: string(name='BizRoleName'),
      grantedPkCount?: int32(name='GrantedPkCount'),
      resourceType?: string(name='ResourceType'),
      srcType?: string(name='SrcType'),
    }
  ](name='BizRoles'),
  code?: string(name='Code'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model EnterpriseRoleQueryBizRoleByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleQueryBizRoleByPageResponseBody(name='body'),
}

/**
 * @summary 分页查询业务角色
 *
 * @param request EnterpriseRoleQueryBizRoleByPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRoleQueryBizRoleByPageResponse
 */
async function enterpriseRoleQueryBizRoleByPageWithOptions(request: EnterpriseRoleQueryBizRoleByPageRequest, runtime: $RuntimeOptions): EnterpriseRoleQueryBizRoleByPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.orientedLeId)) {
    query['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.query)) {
    query['Query'] = request.query;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.srcType)) {
    query['SrcType'] = request.srcType;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRoleQueryBizRoleByPage',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询业务角色
 *
 * @param request EnterpriseRoleQueryBizRoleByPageRequest
 * @return EnterpriseRoleQueryBizRoleByPageResponse
 */
async function enterpriseRoleQueryBizRoleByPage(request: EnterpriseRoleQueryBizRoleByPageRequest): EnterpriseRoleQueryBizRoleByPageResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRoleQueryBizRoleByPageWithOptions(request, runtime);
}

model EnterpriseRoleQueryBizRoleDetailRequest {
  bizRoleCode?: string(name='BizRoleCode'),
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
}

model EnterpriseRoleQueryBizRoleDetailResponseBody = {
  bizRoleDetail?: {
    bizPermissions?: [ 
      {
        bizPermissionCode?: string(name='BizPermissionCode'),
        bizPermissionDesc?: string(name='BizPermissionDesc'),
        bizPermissionName?: string(name='BizPermissionName'),
      }
    ](name='BizPermissions'),
    bizRoleCode?: string(name='BizRoleCode'),
    bizRoleDesc?: string(name='BizRoleDesc'),
    bizRoleName?: string(name='BizRoleName'),
    resourceType?: string(name='ResourceType'),
    srcType?: string(name='SrcType'),
  }(name='BizRoleDetail'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleQueryBizRoleDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleQueryBizRoleDetailResponseBody(name='body'),
}

/**
 * @summary 查询业务角色详情
 *
 * @param request EnterpriseRoleQueryBizRoleDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRoleQueryBizRoleDetailResponse
 */
async function enterpriseRoleQueryBizRoleDetailWithOptions(request: EnterpriseRoleQueryBizRoleDetailRequest, runtime: $RuntimeOptions): EnterpriseRoleQueryBizRoleDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizRoleCode)) {
    query['BizRoleCode'] = request.bizRoleCode;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRoleQueryBizRoleDetail',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询业务角色详情
 *
 * @param request EnterpriseRoleQueryBizRoleDetailRequest
 * @return EnterpriseRoleQueryBizRoleDetailResponse
 */
async function enterpriseRoleQueryBizRoleDetail(request: EnterpriseRoleQueryBizRoleDetailRequest): EnterpriseRoleQueryBizRoleDetailResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRoleQueryBizRoleDetailWithOptions(request, runtime);
}

model EnterpriseRoleUpdateBizRoleRequest {
  bizPermissionCodeListJson?: string(name='BizPermissionCodeListJson'),
  bizRoleCode?: string(name='BizRoleCode'),
  bizRoleDesc?: string(name='BizRoleDesc'),
  bizRoleName?: string(name='BizRoleName'),
  encryptTicket?: string(name='EncryptTicket'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
}

model EnterpriseRoleUpdateBizRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseRoleUpdateBizRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRoleUpdateBizRoleResponseBody(name='body'),
}

/**
 * @summary 更新业务角色
 *
 * @param request EnterpriseRoleUpdateBizRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRoleUpdateBizRoleResponse
 */
async function enterpriseRoleUpdateBizRoleWithOptions(request: EnterpriseRoleUpdateBizRoleRequest, runtime: $RuntimeOptions): EnterpriseRoleUpdateBizRoleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizPermissionCodeListJson)) {
    query['BizPermissionCodeListJson'] = request.bizPermissionCodeListJson;
  }
  if (!$isNull(request.bizRoleCode)) {
    query['BizRoleCode'] = request.bizRoleCode;
  }
  if (!$isNull(request.bizRoleDesc)) {
    query['BizRoleDesc'] = request.bizRoleDesc;
  }
  if (!$isNull(request.bizRoleName)) {
    query['BizRoleName'] = request.bizRoleName;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  var body : map[string]any = {};
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseRoleUpdateBizRole',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新业务角色
 *
 * @param request EnterpriseRoleUpdateBizRoleRequest
 * @return EnterpriseRoleUpdateBizRoleResponse
 */
async function enterpriseRoleUpdateBizRole(request: EnterpriseRoleUpdateBizRoleRequest): EnterpriseRoleUpdateBizRoleResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseRoleUpdateBizRoleWithOptions(request, runtime);
}

model EnterpriseTodoDealAccountTodoRequest {
  appName?: string(name='AppName'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  remark?: string(name='Remark'),
  status?: string(name='Status'),
  todoId?: string(name='TodoId'),
}

model EnterpriseTodoDealAccountTodoResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseTodoDealAccountTodoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseTodoDealAccountTodoResponseBody(name='body'),
}

/**
 * @summary 处理待办项
 *
 * @param request EnterpriseTodoDealAccountTodoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseTodoDealAccountTodoResponse
 */
async function enterpriseTodoDealAccountTodoWithOptions(request: EnterpriseTodoDealAccountTodoRequest, runtime: $RuntimeOptions): EnterpriseTodoDealAccountTodoResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  if (!$isNull(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  if (!$isNull(request.todoId)) {
    body['TodoId'] = request.todoId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseTodoDealAccountTodo',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 处理待办项
 *
 * @param request EnterpriseTodoDealAccountTodoRequest
 * @return EnterpriseTodoDealAccountTodoResponse
 */
async function enterpriseTodoDealAccountTodo(request: EnterpriseTodoDealAccountTodoRequest): EnterpriseTodoDealAccountTodoResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseTodoDealAccountTodoWithOptions(request, runtime);
}

model EnterpriseTodoQueryAccountTodoListRequest {
  appName?: string(name='AppName'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  operatePk?: string(name='OperatePk'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo'),
  status?: string(name='Status'),
  todoType?: string(name='TodoType'),
}

model EnterpriseTodoQueryAccountTodoListResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
    todoList?: [ 
      {
        aliyunId?: string(name='AliyunId'),
        applicantAliyunId?: string(name='ApplicantAliyunId'),
        applicantPk?: string(name='ApplicantPk'),
        applyRemark?: string(name='ApplyRemark'),
        applyTime?: long(name='ApplyTime'),
        auditorAliyunId?: string(name='AuditorAliyunId'),
        auditorPk?: string(name='AuditorPk'),
        auditorStatus?: string(name='AuditorStatus'),
        canceledTime?: long(name='CanceledTime'),
        closed?: boolean(name='Closed'),
        currAuditor?: boolean(name='CurrAuditor'),
        fromLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='FromLe'),
        pk?: string(name='Pk'),
        processList?: [ 
          {
            aliyunId?: string(name='AliyunId'),
            auditTime?: long(name='AuditTime'),
            ecId?: string(name='EcId'),
            leId?: string(name='LeId'),
            nbId?: string(name='NbId'),
            pk?: string(name='Pk'),
            remark?: string(name='Remark'),
            status?: string(name='Status'),
          }
        ](name='ProcessList'),
        status?: string(name='Status'),
        timeoutTime?: long(name='TimeoutTime'),
        toLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='ToLe'),
        toLeAudit?: boolean(name='ToLeAudit'),
        todoId?: string(name='TodoId'),
        todoType?: string(name='TodoType'),
        todoView?: string(name='TodoView'),
      }
    ](name='TodoList'),
  }(name='Data'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseTodoQueryAccountTodoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseTodoQueryAccountTodoListResponseBody(name='body'),
}

/**
 * @summary 查询当前登录用户处理的待办项列表
 *
 * @param request EnterpriseTodoQueryAccountTodoListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseTodoQueryAccountTodoListResponse
 */
async function enterpriseTodoQueryAccountTodoListWithOptions(request: EnterpriseTodoQueryAccountTodoListRequest, runtime: $RuntimeOptions): EnterpriseTodoQueryAccountTodoListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.operatePk)) {
    body['OperatePk'] = request.operatePk;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  if (!$isNull(request.page)) {
    body['Page'] = request.page;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.showCompleteInfo)) {
    body['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  if (!$isNull(request.todoType)) {
    body['TodoType'] = request.todoType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseTodoQueryAccountTodoList',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询当前登录用户处理的待办项列表
 *
 * @param request EnterpriseTodoQueryAccountTodoListRequest
 * @return EnterpriseTodoQueryAccountTodoListResponse
 */
async function enterpriseTodoQueryAccountTodoList(request: EnterpriseTodoQueryAccountTodoListRequest): EnterpriseTodoQueryAccountTodoListResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseTodoQueryAccountTodoListWithOptions(request, runtime);
}

model EnterpriseTodoQueryAccountTodoListByApplicantRequest {
  appName?: string(name='AppName'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  operatePk?: string(name='OperatePk'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo'),
  status?: string(name='Status'),
  todoType?: string(name='TodoType'),
}

model EnterpriseTodoQueryAccountTodoListByApplicantResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
    todoList?: [ 
      {
        aliyunId?: string(name='AliyunId'),
        applicantAliyunId?: string(name='ApplicantAliyunId'),
        applicantPk?: string(name='ApplicantPk'),
        applyRemark?: string(name='ApplyRemark'),
        applyTime?: long(name='ApplyTime'),
        auditorAliyunId?: string(name='AuditorAliyunId'),
        auditorPk?: string(name='AuditorPk'),
        auditorStatus?: string(name='AuditorStatus'),
        canceledTime?: long(name='CanceledTime'),
        closed?: boolean(name='Closed'),
        currAuditor?: boolean(name='CurrAuditor'),
        fromLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='FromLe'),
        pk?: string(name='Pk'),
        processList?: [ 
          {
            aliyunId?: string(name='AliyunId'),
            auditTime?: long(name='AuditTime'),
            ecId?: string(name='EcId'),
            leId?: string(name='LeId'),
            nbId?: string(name='NbId'),
            pk?: string(name='Pk'),
            remark?: string(name='Remark'),
            status?: string(name='Status'),
          }
        ](name='ProcessList'),
        status?: string(name='Status'),
        timeoutTime?: long(name='TimeoutTime'),
        toLe?: {
          ecId?: string(name='EcId'),
          leId?: string(name='LeId'),
          licenseNumber?: string(name='LicenseNumber'),
          manageableAccountCount?: long(name='ManageableAccountCount'),
          managedAccountCount?: long(name='ManagedAccountCount'),
          managerList?: [ 
            {
              aliyunId?: string(name='AliyunId'),
              pk?: string(name='Pk'),
              pkEncoded?: string(name='PkEncoded'),
              role?: string(name='Role'),
            }
          ](name='ManagerList'),
          nbId?: string(name='NbId'),
          subjectName?: string(name='SubjectName'),
          subjectType?: string(name='SubjectType'),
        }(name='ToLe'),
        toLeAudit?: boolean(name='ToLeAudit'),
        todoId?: string(name='TodoId'),
        todoType?: string(name='TodoType'),
        todoView?: string(name='TodoView'),
      }
    ](name='TodoList'),
  }(name='Data'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseTodoQueryAccountTodoListByApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseTodoQueryAccountTodoListByApplicantResponseBody(name='body'),
}

/**
 * @summary 查询当前登录用户发起的待办项列表
 *
 * @param request EnterpriseTodoQueryAccountTodoListByApplicantRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseTodoQueryAccountTodoListByApplicantResponse
 */
async function enterpriseTodoQueryAccountTodoListByApplicantWithOptions(request: EnterpriseTodoQueryAccountTodoListByApplicantRequest, runtime: $RuntimeOptions): EnterpriseTodoQueryAccountTodoListByApplicantResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!$isNull(request.operatePk)) {
    body['OperatePk'] = request.operatePk;
  }
  if (!$isNull(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!$isNull(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!$isNull(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  if (!$isNull(request.page)) {
    body['Page'] = request.page;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.showCompleteInfo)) {
    body['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  if (!$isNull(request.todoType)) {
    body['TodoType'] = request.todoType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseTodoQueryAccountTodoListByApplicant',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询当前登录用户发起的待办项列表
 *
 * @param request EnterpriseTodoQueryAccountTodoListByApplicantRequest
 * @return EnterpriseTodoQueryAccountTodoListByApplicantResponse
 */
async function enterpriseTodoQueryAccountTodoListByApplicant(request: EnterpriseTodoQueryAccountTodoListByApplicantRequest): EnterpriseTodoQueryAccountTodoListByApplicantResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseTodoQueryAccountTodoListByApplicantWithOptions(request, runtime);
}

model EnterpriseUninvitedAdminInviteJoinEnterpriseRequest {
  ecId?: string(name='EcId'),
  encryptTicket?: string(name='EncryptTicket'),
  inviteePk?: string(name='InviteePk'),
  leId?: string(name='LeId'),
  nbId?: string(name='NbId'),
  remark?: string(name='Remark'),
}

model EnterpriseUninvitedAdminInviteJoinEnterpriseResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      applicantAliyunId?: string(name='ApplicantAliyunId'),
      applicantPk?: string(name='ApplicantPk'),
      applyRemark?: string(name='ApplyRemark'),
      applyTime?: long(name='ApplyTime'),
      auditorAliyunId?: string(name='AuditorAliyunId'),
      auditorPk?: string(name='AuditorPk'),
      ecId?: string(name='EcId'),
      leId?: string(name='LeId'),
      leLicenseNo?: string(name='LeLicenseNo'),
      leName?: string(name='LeName'),
      message?: string(name='Message'),
      nbId?: string(name='NbId'),
      operatedAliyunId?: string(name='OperatedAliyunId'),
      operatedPk?: string(name='OperatedPk'),
      success?: string(name='Success'),
      timeoutTime?: long(name='TimeoutTime'),
      todoId?: string(name='TodoId'),
      todoType?: string(name='TodoType'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnterpriseUninvitedAdminInviteJoinEnterpriseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseUninvitedAdminInviteJoinEnterpriseResponseBody(name='body'),
}

/**
 * @summary 管理员邀请纳管
 *
 * @param request EnterpriseUninvitedAdminInviteJoinEnterpriseRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseUninvitedAdminInviteJoinEnterpriseResponse
 */
async function enterpriseUninvitedAdminInviteJoinEnterpriseWithOptions(request: EnterpriseUninvitedAdminInviteJoinEnterpriseRequest, runtime: $RuntimeOptions): EnterpriseUninvitedAdminInviteJoinEnterpriseResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ecId)) {
    query['EcId'] = request.ecId;
  }
  if (!$isNull(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!$isNull(request.inviteePk)) {
    query['InviteePk'] = request.inviteePk;
  }
  if (!$isNull(request.leId)) {
    query['LeId'] = request.leId;
  }
  if (!$isNull(request.nbId)) {
    query['NbId'] = request.nbId;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnterpriseUninvitedAdminInviteJoinEnterprise',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 管理员邀请纳管
 *
 * @param request EnterpriseUninvitedAdminInviteJoinEnterpriseRequest
 * @return EnterpriseUninvitedAdminInviteJoinEnterpriseResponse
 */
async function enterpriseUninvitedAdminInviteJoinEnterprise(request: EnterpriseUninvitedAdminInviteJoinEnterpriseRequest): EnterpriseUninvitedAdminInviteJoinEnterpriseResponse {
  var runtime = new $RuntimeOptions{};
  return enterpriseUninvitedAdminInviteJoinEnterpriseWithOptions(request, runtime);
}

