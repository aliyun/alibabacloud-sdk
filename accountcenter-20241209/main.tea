/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('accountcenter', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EnterpriseOrgQueryLoadTreeRequest {
  encryptTicket?: string(name='EncryptTicket'),
  loadOrgOnly?: boolean(name='LoadOrgOnly', example='true'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='CF20ED94-D406-512F-9798-4E1F65720BF6'),
}

model EnterpriseOrgQueryLoadTreeResponseBody = {
  code?: string(name='Code', example='successful'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03'),
  success?: boolean(name='Success', example='True'),
  treeDto?: string(name='TreeDto'),
}

model EnterpriseOrgQueryLoadTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseOrgQueryLoadTreeResponseBody(name='body'),
}

/**
 * @summary 组织目录树查询
 *
 * @param request EnterpriseOrgQueryLoadTreeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseOrgQueryLoadTreeResponse
 */
async function enterpriseOrgQueryLoadTreeWithOptions(request: EnterpriseOrgQueryLoadTreeRequest, runtime: Util.RuntimeOptions): EnterpriseOrgQueryLoadTreeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!Util.isUnset(request.loadOrgOnly)) {
    query['LoadOrgOnly'] = request.loadOrgOnly;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!Util.isUnset(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!Util.isUnset(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnterpriseOrgQueryLoadTree',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 组织目录树查询
 *
 * @param request EnterpriseOrgQueryLoadTreeRequest
 * @return EnterpriseOrgQueryLoadTreeResponse
 */
async function enterpriseOrgQueryLoadTree(request: EnterpriseOrgQueryLoadTreeRequest): EnterpriseOrgQueryLoadTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return enterpriseOrgQueryLoadTreeWithOptions(request, runtime);
}

model EnterpriseRegisterAccountRequest {
  alias?: string(name='Alias', example='资方支付平台'),
  encryptPassword?: string(name='EncryptPassword'),
  encryptTicket?: string(name='EncryptTicket'),
  loginEmail?: string(name='LoginEmail'),
  organizationId?: string(name='OrganizationId', example='668514d8083f058f78f7199a'),
  orientedEcId?: string(name='OrientedEcId'),
  orientedLeId?: string(name='OrientedLeId'),
  orientedNbId?: string(name='OrientedNbId'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='A93073FC-1E86-58BA-AB83-54DA6BDB4F03'),
  showCompleteInfo?: boolean(name='ShowCompleteInfo', example='false'),
  siteNick?: string(name='SiteNick'),
}

model EnterpriseRegisterAccountResponseBody = {
  accountInfo?: {
    enterpriseLicenseNo?: string(name='EnterpriseLicenseNo'),
    enterpriseName?: string(name='EnterpriseName', example='海南屿可网络科技有限公司'),
    loginId?: string(name='LoginId', example='195529'),
    pk?: string(name='Pk', example='5190216604405754'),
  }(name='AccountInfo'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='The operation is not allowed. Channel state (RELEASED) does not meet expectations (ANSWERED).'),
  requestId?: string(name='RequestId', example='BDFCF081-7BCD-52D5-9D82-0F58D96EFD92'),
  success?: boolean(name='Success', example='True'),
}

model EnterpriseRegisterAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnterpriseRegisterAccountResponseBody(name='body'),
}

/**
 * @summary 创建成员账号
 *
 * @param request EnterpriseRegisterAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnterpriseRegisterAccountResponse
 */
async function enterpriseRegisterAccountWithOptions(request: EnterpriseRegisterAccountRequest, runtime: Util.RuntimeOptions): EnterpriseRegisterAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!Util.isUnset(request.encryptPassword)) {
    query['EncryptPassword'] = request.encryptPassword;
  }
  if (!Util.isUnset(request.encryptTicket)) {
    query['EncryptTicket'] = request.encryptTicket;
  }
  if (!Util.isUnset(request.loginEmail)) {
    query['LoginEmail'] = request.loginEmail;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.showCompleteInfo)) {
    query['ShowCompleteInfo'] = request.showCompleteInfo;
  }
  if (!Util.isUnset(request.siteNick)) {
    query['SiteNick'] = request.siteNick;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orientedEcId)) {
    body['OrientedEcId'] = request.orientedEcId;
  }
  if (!Util.isUnset(request.orientedLeId)) {
    body['OrientedLeId'] = request.orientedLeId;
  }
  if (!Util.isUnset(request.orientedNbId)) {
    body['OrientedNbId'] = request.orientedNbId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnterpriseRegisterAccount',
    version = '2024-12-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建成员账号
 *
 * @param request EnterpriseRegisterAccountRequest
 * @return EnterpriseRegisterAccountResponse
 */
async function enterpriseRegisterAccount(request: EnterpriseRegisterAccountRequest): EnterpriseRegisterAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return enterpriseRegisterAccountWithOptions(request, runtime);
}

