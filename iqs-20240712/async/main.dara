/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IQS';
  @version = '2024-07-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AgentBaseQuery {
  query?: string(name='query'),
}

model QueryResult {
  data?: [ 
    {
      address?: string(name='address'),
      cityCode?: string(name='cityCode'),
      cityName?: string(name='cityName'),
      districtCode?: string(name='districtCode'),
      districtName?: string(name='districtName'),
      id?: string(name='id'),
      images?: [ 
        {
          title?: string(name='title'),
          url?: string(name='url'),
        }
      ](name='images'),
      latitude?: string(name='latitude'),
      longitude?: string(name='longitude'),
      metadata?: {
        businessArea?: string(name='businessArea'),
        dailyOpeningHours?: string(name='dailyOpeningHours'),
        mainTag?: string(name='mainTag'),
        phone?: string(name='phone'),
        score?: string(name='score'),
        weeklyOpeningDays?: string(name='weeklyOpeningDays'),
      }(name='metadata'),
      name?: string(name='name'),
      provinceCode?: string(name='provinceCode'),
      provinceName?: string(name='provinceName'),
      typeCode?: string(name='typeCode'),
      types?: string(name='types'),
    }
  ](name='data'),
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  success?: boolean(name='success'),
}

model QueryAttractionsRequest {
  body?: AgentBaseQuery(name='body', position='Body'),
}

model QueryAttractionsResponseBody = {
  queryResult?: QueryResult(name='queryResult'),
  requestId?: string(name='requestId', description='Id of the request', example='ECB2144C-E277-5434-80E6-12D26678D364'),
}

model QueryAttractionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAttractionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAttractions  QueryAttractionsRequest
  * @return QueryAttractionsResponse
 */
async function queryAttractions(request: QueryAttractionsRequest): QueryAttractionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryAttractions', 'POST', '/amap-function-call-agent/iqs-agent-service/v1/nl/attractions', 'json', false, 'json', request);
}

model QueryHotelsRequest {
  body?: AgentBaseQuery(name='body', position='Body'),
}

model QueryHotelsResponseBody = {
  queryResult?: QueryResult(name='queryResult'),
  requestId?: string(name='requestId', description='Id of the request', example='78032F8B-0157-53F9-B1A8-3BD86ADE38D0'),
}

model QueryHotelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryHotelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryHotels  QueryHotelsRequest
  * @return QueryHotelsResponse
 */
async function queryHotels(request: QueryHotelsRequest): QueryHotelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryHotels', 'POST', '/amap-function-call-agent/iqs-agent-service/v1/nl/hotels', 'json', false, 'json', request);
}

model QueryRestaurantsRequest {
  body?: AgentBaseQuery(name='body', position='Body'),
}

model QueryRestaurantsResponseBody = {
  queryResult?: QueryResult(name='queryResult'),
  requestId?: string(name='requestId', description='Id of the request', example='D78E16C0-4D44-5065-BFF7-127F7859F687'),
}

model QueryRestaurantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRestaurantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryRestaurants  QueryRestaurantsRequest
  * @return QueryRestaurantsResponse
 */
async function queryRestaurants(request: QueryRestaurantsRequest): QueryRestaurantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryRestaurants', 'POST', '/amap-function-call-agent/iqs-agent-service/v1/nl/restaurants', 'json', false, 'json', request);
}

