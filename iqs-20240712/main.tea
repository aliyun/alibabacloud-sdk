/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('iqs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AgentBaseQuery {
  query?: string(name='query'),
}

model CommonAgentQuery {
  query?: string(name='query'),
  querySceneEnumCode?: string(name='querySceneEnumCode'),
}

model QueryResult {
  data?: [ 
    {
      address?: string(name='address'),
      cityCode?: string(name='cityCode'),
      cityName?: string(name='cityName'),
      districtCode?: string(name='districtCode'),
      districtName?: string(name='districtName'),
      id?: string(name='id'),
      images?: [ 
        {
          title?: string(name='title'),
          url?: string(name='url'),
        }
      ](name='images'),
      latitude?: string(name='latitude'),
      longitude?: string(name='longitude'),
      metadata?: {
        businessArea?: string(name='businessArea'),
        dailyOpeningHours?: string(name='dailyOpeningHours'),
        mainTag?: string(name='mainTag'),
        phone?: string(name='phone'),
        score?: string(name='score'),
        weeklyOpeningDays?: string(name='weeklyOpeningDays'),
      }(name='metadata'),
      name?: string(name='name'),
      provinceCode?: string(name='provinceCode'),
      provinceName?: string(name='provinceName'),
      typeCode?: string(name='typeCode'),
      types?: string(name='types'),
    }
  ](name='data'),
}

model CommonQueryBySceneRequest {
  body?: CommonAgentQuery(name='body'),
}

model CommonQueryBySceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryResult  
}

/**
 * @summary 自然语言通用查询
 *
 * @param request CommonQueryBySceneRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommonQueryBySceneResponse
 */
async function commonQueryBySceneWithOptions(request: CommonQueryBySceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CommonQueryBySceneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CommonQueryByScene',
    version = '2024-07-12',
    protocol = 'HTTPS',
    pathname = `/amap-function-call-agent/iqs-agent-service/v2/nl/common`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 自然语言通用查询
 *
 * @param request CommonQueryBySceneRequest
 * @return CommonQueryBySceneResponse
 */
async function commonQueryByScene(request: CommonQueryBySceneRequest): CommonQueryBySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return commonQueryBySceneWithOptions(request, headers, runtime);
}

model QueryAttractionsRequest {
  body?: AgentBaseQuery(name='body'),
}

model QueryAttractionsResponseBody = {
  queryResult?: QueryResult(name='queryResult'),
  requestId?: string(name='requestId', description='Id of the request', example='ECB2144C-E277-5434-80E6-12D26678D364'),
}

model QueryAttractionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAttractionsResponseBody(name='body'),
}

/**
 * @summary 景点查询
 *
 * @param request QueryAttractionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAttractionsResponse
 */
async function queryAttractionsWithOptions(request: QueryAttractionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAttractionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttractions',
    version = '2024-07-12',
    protocol = 'HTTPS',
    pathname = `/amap-function-call-agent/iqs-agent-service/v1/nl/attractions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 景点查询
 *
 * @param request QueryAttractionsRequest
 * @return QueryAttractionsResponse
 */
async function queryAttractions(request: QueryAttractionsRequest): QueryAttractionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryAttractionsWithOptions(request, headers, runtime);
}

model QueryHotelsRequest {
  body?: AgentBaseQuery(name='body'),
}

model QueryHotelsResponseBody = {
  queryResult?: QueryResult(name='queryResult'),
  requestId?: string(name='requestId', description='Id of the request', example='78032F8B-0157-53F9-B1A8-3BD86ADE38D0'),
}

model QueryHotelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryHotelsResponseBody(name='body'),
}

/**
 * @summary 酒店查询
 *
 * @param request QueryHotelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryHotelsResponse
 */
async function queryHotelsWithOptions(request: QueryHotelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryHotelsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotels',
    version = '2024-07-12',
    protocol = 'HTTPS',
    pathname = `/amap-function-call-agent/iqs-agent-service/v1/nl/hotels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店查询
 *
 * @param request QueryHotelsRequest
 * @return QueryHotelsResponse
 */
async function queryHotels(request: QueryHotelsRequest): QueryHotelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryHotelsWithOptions(request, headers, runtime);
}

model QueryRestaurantsRequest {
  body?: AgentBaseQuery(name='body'),
}

model QueryRestaurantsResponseBody = {
  queryResult?: QueryResult(name='queryResult'),
  requestId?: string(name='requestId', description='Id of the request', example='D78E16C0-4D44-5065-BFF7-127F7859F687'),
}

model QueryRestaurantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRestaurantsResponseBody(name='body'),
}

/**
 * @summary 餐厅查询
 *
 * @param request QueryRestaurantsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryRestaurantsResponse
 */
async function queryRestaurantsWithOptions(request: QueryRestaurantsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRestaurantsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRestaurants',
    version = '2024-07-12',
    protocol = 'HTTPS',
    pathname = `/amap-function-call-agent/iqs-agent-service/v1/nl/restaurants`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 餐厅查询
 *
 * @param request QueryRestaurantsRequest
 * @return QueryRestaurantsResponse
 */
async function queryRestaurants(request: QueryRestaurantsRequest): QueryRestaurantsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryRestaurantsWithOptions(request, headers, runtime);
}

