/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IoTCC';
  @version = '2021-05-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCidrToConnectionPoolRequest {
  cidrs?: [ string ](name='Cidrs', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolId: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AddCidrToConnectionPoolResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AddCidrToConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AddCidrToConnectionPoolResponseBody(name='body'),
}

async function addCidrToConnectionPool(request: AddCidrToConnectionPoolRequest): AddCidrToConnectionPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCidrToConnectionPool', 'POST', '/', 'json', false, 'json', request);
}

model AddIoTCloudConnectorToGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  ioTCloudConnectorId: [ string ](name='IoTCloudConnectorId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AddIoTCloudConnectorToGroupResponseBody = {
  requestId?: string(name='RequestId', example='cn-hangzhou'),
}

model AddIoTCloudConnectorToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddIoTCloudConnectorToGroupResponseBody(name='body'),
}

async function addIoTCloudConnectorToGroup(request: AddIoTCloudConnectorToGroupRequest): AddIoTCloudConnectorToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIoTCloudConnectorToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AssociateIpWithConnectionPoolRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolId: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ips?: [ string ](name='Ips', position='Query'),
  ipsFilePath?: string(name='IpsFilePath', example='cciot-cn-hangzhou/127859184306****/test.csv', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AssociateIpWithConnectionPoolResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AssociateIpWithConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateIpWithConnectionPoolResponseBody(name='body'),
}

async function associateIpWithConnectionPool(request: AssociateIpWithConnectionPoolRequest): AssociateIpWithConnectionPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateIpWithConnectionPool', 'POST', '/', 'json', false, 'json', request);
}

model AssociateVSwitchWithIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vSwitchList: [ string ](name='VSwitchList', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1aevy8sofi8mh1q****', position='Query'),
}

model AssociateVSwitchWithIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AssociateVSwitchWithIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateVSwitchWithIoTCloudConnectorResponseBody(name='body'),
}

async function associateVSwitchWithIoTCloudConnector(request: AssociateVSwitchWithIoTCloudConnectorRequest): AssociateVSwitchWithIoTCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateVSwitchWithIoTCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  confirmStatus: string(name='ConfirmStatus', example='Confirm', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ConfirmIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  resourceId?: string(name='ResourceId', example='iotcc-bp1odcab8tmno0hdq****'),
}

model ConfirmIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmIoTCloudConnectorResponseBody(name='body'),
}

async function confirmIoTCloudConnector(request: ConfirmIoTCloudConnectorRequest): ConfirmIoTCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmIoTCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorizationRuleRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription', example='rule01', position='Query'),
  authorizationRuleName?: string(name='AuthorizationRuleName', example='rule01', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destination: string(name='Destination', example='47.0.XX.XX', position='Query'),
  destinationPort?: string(name='DestinationPort', example='80/80', position='Query'),
  destinationType: string(name='DestinationType', example='Cidr', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  policy: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='tcp', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceCidrs: [ string ](name='SourceCidrs', position='Query'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='ar-1234abcb8tmno0hdq****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorizationRulesRequest {
  authorizationRules: [ 
    {
      description?: string(name='Description', example='rule01'),
      destination: string(name='Destination', example='47.0.XX.XX'),
      destinationPort?: string(name='DestinationPort', example='80/80'),
      destinationType: string(name='DestinationType', example='Cidr'),
      name?: string(name='Name', example='rule01'),
      policy: string(name='Policy', example='Permit'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidr: string(name='SourceCidr', example='192.168.0.1/24'),
    }
  ](name='AuthorizationRules', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateAuthorizationRulesResponseBody = {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthorizationRulesResponseBody(name='body'),
}

async function createAuthorizationRules(request: CreateAuthorizationRulesRequest): CreateAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorizationRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateConnectionPoolRequest {
  cidrs?: [ string ](name='Cidrs', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolDescription?: string(name='ConnectionPoolDescription', example='pool01', position='Query'),
  connectionPoolName?: string(name='ConnectionPoolName', example='pool01', position='Query'),
  count?: long(name='Count', example='2', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateConnectionPoolResponseBody = {
  connectionPoolId?: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConnectionPoolResponseBody(name='body'),
}

async function createConnectionPool(request: CreateConnectionPoolRequest): CreateConnectionPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConnectionPool', 'POST', '/', 'json', false, 'json', request);
}

model CreateDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription', example='description', position='Query'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName', example='test', position='Query'),
  destination?: string(name='Destination', example='192.168.0.2', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-1y6h8z7imd2yu4****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceType: string(name='ServiceType', example='Normal', position='Query'),
  source: string(name='Source', example='100.100.2.138', position='Query'),
}

model CreateDNSServiceRuleResponseBody = {
  DNSServiceRuleId?: string(name='DNSServiceRuleId', example='ar-r56ijpurlu50gi****'),
  requestId?: string(name='RequestId', example='BC6D1C1D-6DBD-568C-B867-BC9CA699ED01'),
}

model CreateDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDNSServiceRuleResponseBody(name='body'),
}

async function createDNSServiceRule(request: CreateDNSServiceRuleRequest): CreateDNSServiceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDNSServiceRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupAuthorizationRuleRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription', example='rule', position='Query'),
  authorizationRuleName?: string(name='AuthorizationRuleName', example='ruletest', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destination: string(name='Destination', example='47.0.XX.XX', position='Query'),
  destinationPort?: string(name='DestinationPort', example='80/80', position='Query'),
  destinationType: string(name='DestinationType', example='Cidr', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  policy: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='tcp', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceCidrs: [ string ](name='SourceCidrs', position='Query'),
  type?: string(name='Type', example='System', position='Query'),
}

model CreateGroupAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='gar-ez91t41jvi6tr8****'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model CreateGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupAuthorizationRuleResponseBody(name='body'),
}

async function createGroupAuthorizationRule(request: CreateGroupAuthorizationRuleRequest): CreateGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription', example='description', position='Query'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName', example='test', position='Query'),
  destination?: string(name='Destination', example='192.168.0.2', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceType: string(name='ServiceType', example='Normal', position='Query'),
  source: string(name='Source', example='100.100.2.136', position='Query'),
}

model CreateGroupDNSServiceRuleResponseBody = {
  DNSServiceRuleId?: string(name='DNSServiceRuleId', example='gar-ffnn1ewe2nmf3y****'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
  requestId?: string(name='RequestId', example='77111A6A-56BA-59B2-8CAA-7CBF21648FB8'),
}

model CreateGroupDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupDNSServiceRuleResponseBody(name='body'),
}

async function createGroupDNSServiceRule(request: CreateGroupDNSServiceRuleRequest): CreateGroupDNSServiceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupDNSServiceRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupIpMappingRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationIp: string(name='DestinationIp', example='192.168.10.8', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  ipMappingRuleDescription?: string(name='IpMappingRuleDescription', example='description', position='Query'),
  ipMappingRuleName?: string(name='IpMappingRuleName', example='name', position='Query'),
  mappingIp: string(name='MappingIp', example='47.0.XX.XX', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateGroupIpMappingRuleResponseBody = {
  groupIpMappingRuleId?: string(name='GroupIpMappingRuleId', example='im-irrp3bzuu5nrbx****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateGroupIpMappingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupIpMappingRuleResponseBody(name='body'),
}

async function createGroupIpMappingRule(request: CreateGroupIpMappingRuleRequest): CreateGroupIpMappingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupIpMappingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIoTCloudConnectorRequest {
  APN?: string(name='APN', example='CMWAP', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ISP: string(name='ISP', example='mobile', position='Query'),
  ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription', example='test', position='Query'),
  ioTCloudConnectorName?: string(name='IoTCloudConnectorName', example='test', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceUid?: long(name='ResourceUid', example='132193271328****', position='Query'),
  type?: string(name='Type', example='Standard', position='Query'),
  wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled', example='true', deprecated='true', position='Query'),
}

model CreateIoTCloudConnectorResponseBody = {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorResponseBody(name='body'),
}

async function createIoTCloudConnector(request: CreateIoTCloudConnectorRequest): CreateIoTCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIoTCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model CreateIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateIoTCloudConnectorBackhaulRouteResponseBody = {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function createIoTCloudConnectorBackhaulRoute(request: CreateIoTCloudConnectorBackhaulRouteRequest): CreateIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIoTCloudConnectorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model CreateIoTCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  name?: string(name='Name', example='cctest', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='Standard', position='Query'),
}

model CreateIoTCloudConnectorGroupResponseBody = {
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model CreateIoTCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorGroupResponseBody(name='body'),
}

async function createIoTCloudConnectorGroup(request: CreateIoTCloudConnectorGroupRequest): CreateIoTCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIoTCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpMappingRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationIp: string(name='DestinationIp', example='192.168.10.8', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ipMappingRuleDescription?: string(name='IpMappingRuleDescription', example='description', position='Query'),
  ipMappingRuleName?: string(name='IpMappingRuleName', example='name', position='Query'),
  mappingIp: string(name='MappingIp', example='47.0.XX.XX', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateIpMappingRuleResponseBody = {
  ipMappingRuleId?: string(name='IpMappingRuleId', example='im-irrp3bzuu5nrbx****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateIpMappingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpMappingRuleResponseBody(name='body'),
}

async function createIpMappingRule(request: CreateIpMappingRuleRequest): CreateIpMappingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpMappingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceDescription?: string(name='ServiceDescription', example='service_description', position='Query'),
  serviceName?: string(name='ServiceName', example='service_name', position='Query'),
}

model CreateServiceResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  serviceId?: string(name='ServiceId', example='c910061f-****-44e6-b659-***c'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateService', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceEntryDescription?: string(name='ServiceEntryDescription', example='entry_description', position='Query'),
  serviceEntryName?: string(name='ServiceEntryName', example='entry_name', position='Query'),
  serviceId: string(name='ServiceId', example='c910061f-****-44e6-b659-***c', position='Query'),
  target: string(name='Target', example='192.168.1.32/27', position='Query'),
  targetType: string(name='TargetType', example='Cidr', position='Query'),
}

model CreateServiceEntryResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serviceEntryId?: string(name='ServiceEntryId', example='fwd-119smw5tkasdf****'),
}

model CreateServiceEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceEntryResponseBody(name='body'),
}

async function createServiceEntry(request: CreateServiceEntryRequest): CreateServiceEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar-1234abcb8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthorizationRulesRequest {
  authorizationRuleIds: [ string ](name='AuthorizationRuleIds', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAuthorizationRulesResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAuthorizationRulesResponseBody(name='body'),
}

async function deleteAuthorizationRules(request: DeleteAuthorizationRulesRequest): DeleteAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthorizationRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConnectionPoolRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolId: string(name='ConnectionPoolId', example='1234abc', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteConnectionPoolResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConnectionPoolResponseBody(name='body'),
}

async function deleteConnectionPool(request: DeleteConnectionPoolRequest): DeleteConnectionPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConnectionPool', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  DNSServiceRuleId: string(name='DNSServiceRuleId', example='ar-r56ijpurlu50gi****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-1y6h8z7imd2yu4****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDNSServiceRuleResponseBody = {
  requestId?: string(name='RequestId', example='BC6D1C1D-6DBD-568C-B867-BC9CA699ED01'),
}

model DeleteDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDNSServiceRuleResponseBody(name='body'),
}

async function deleteDNSServiceRule(request: DeleteDNSServiceRuleRequest): DeleteDNSServiceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDNSServiceRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='gar-ez91t41jvi6tr8****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteGroupAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupAuthorizationRuleResponseBody(name='body'),
}

async function deleteGroupAuthorizationRule(request: DeleteGroupAuthorizationRuleRequest): DeleteGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  DNSServiceRuleId: string(name='DNSServiceRuleId', example='gar-ffnn1ewe2nmf3y****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteGroupDNSServiceRuleResponseBody = {
  requestId?: string(name='RequestId', example='77111A6A-56BA-59B2-8CAA-7CBF21648FB8'),
}

model DeleteGroupDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupDNSServiceRuleResponseBody(name='body'),
}

async function deleteGroupDNSServiceRule(request: DeleteGroupDNSServiceRuleRequest): DeleteGroupDNSServiceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupDNSServiceRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupIpMappingRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  groupIpMappingRuleId: string(name='GroupIpMappingRuleId', example='im-irrp3bzuu5nrbx****', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteGroupIpMappingRuleResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteGroupIpMappingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupIpMappingRuleResponseBody(name='body'),
}

async function deleteGroupIpMappingRule(request: DeleteGroupIpMappingRuleRequest): DeleteGroupIpMappingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupIpMappingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnectorResponseBody(name='body'),
}

async function deleteIoTCloudConnector(request: DeleteIoTCloudConnectorRequest): DeleteIoTCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIoTCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIoTCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIoTCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteIoTCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnectorGroupResponseBody(name='body'),
}

async function deleteIoTCloudConnectorGroup(request: DeleteIoTCloudConnectorGroupRequest): DeleteIoTCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIoTCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIoTCloudConnetorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIoTCloudConnetorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteIoTCloudConnetorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnetorBackhaulRouteResponseBody(name='body'),
}

async function deleteIoTCloudConnetorBackhaulRoute(request: DeleteIoTCloudConnetorBackhaulRouteRequest): DeleteIoTCloudConnetorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIoTCloudConnetorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpMappingRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ipMappingRuleId: string(name='IpMappingRuleId', example='im-irrp3bzuu5nrbx****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIpMappingRuleResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteIpMappingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpMappingRuleResponseBody(name='body'),
}

async function deleteIpMappingRule(request: DeleteIpMappingRuleRequest): DeleteIpMappingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpMappingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='c910061f-****-44e6-b659-***c', position='Query'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceEntryId: string(name='ServiceEntryId', example='fwd-119smw5tkasdf****', position='Query'),
  serviceId: string(name='ServiceId', example='c910061f-****-44e6-b659-***c', position='Query'),
}

model DeleteServiceEntryResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteServiceEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceEntryResponseBody(name='body'),
}

async function deleteServiceEntry(request: DeleteServiceEntryRequest): DeleteServiceEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceEntry', 'POST', '/', 'json', false, 'json', request);
}

model DisableIoTCloudConnectorAccessLogRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DisableIoTCloudConnectorAccessLogResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DisableIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DisableIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function disableIoTCloudConnectorAccessLog(request: DisableIoTCloudConnectorAccessLogRequest): DisableIoTCloudConnectorAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableIoTCloudConnectorAccessLog', 'POST', '/', 'json', false, 'json', request);
}

model DissociateIpFromConnectionPoolRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolId: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ips?: [ string ](name='Ips', position='Query'),
  ipsFilePath?: string(name='IpsFilePath', example='cciot-cn-hangzhou/127859184306****/test.csv', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DissociateIpFromConnectionPoolResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DissociateIpFromConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateIpFromConnectionPoolResponseBody(name='body'),
}

async function dissociateIpFromConnectionPool(request: DissociateIpFromConnectionPoolRequest): DissociateIpFromConnectionPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateIpFromConnectionPool', 'POST', '/', 'json', false, 'json', request);
}

model DissociateVSwitchFromIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DissociateVSwitchFromIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DissociateVSwitchFromIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateVSwitchFromIoTCloudConnectorResponseBody(name='body'),
}

async function dissociateVSwitchFromIoTCloudConnector(request: DissociateVSwitchFromIoTCloudConnectorRequest): DissociateVSwitchFromIoTCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateVSwitchFromIoTCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model EnableIoTCloudConnectorAccessLogRequest {
  accessLogSlsLogStore: string(name='AccessLogSlsLogStore', example='test', position='Query'),
  accessLogSlsProject: string(name='AccessLogSlsProject', example='sls-setter', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model EnableIoTCloudConnectorAccessLogResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model EnableIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: EnableIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function enableIoTCloudConnectorAccessLog(request: EnableIoTCloudConnectorAccessLogRequest): EnableIoTCloudConnectorAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableIoTCloudConnectorAccessLog', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionPoolIpOperationResultRequest {
  connectionPoolId: string(name='ConnectionPoolId', example='cp-0gd9qnmv8431rh****', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  queryRequestId: string(name='QueryRequestId', example='CFA63CEB-15B6-4AE8-B203-F855FF7BA962', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetConnectionPoolIpOperationResultResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA651'),
  resultFilePaths?: [ string ](name='ResultFilePaths', description='OssPath'),
}

model GetConnectionPoolIpOperationResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectionPoolIpOperationResultResponseBody(name='body'),
}

async function getConnectionPoolIpOperationResult(request: GetConnectionPoolIpOperationResultRequest): GetConnectionPoolIpOperationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionPoolIpOperationResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDiagnoseResultForSingleCardRequest {
  diagnoseTaskId: string(name='DiagnoseTaskId', example='diagnoseTask-bp2qhwdp2n9x6zkvq****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetDiagnoseResultForSingleCardResponseBody = {
  beginTime?: long(name='BeginTime', example='1643077466'),
  cardIp?: string(name='CardIp', example='169.254.XX.XX'),
  destination?: string(name='Destination', example='114.114.XX.XX'),
  diagnoseItem?: [ 
    {
      part?: string(name='Part', example='Terminal'),
      status?: string(name='Status', example='Normal'),
    }
  ](name='DiagnoseItem'),
  endTime?: long(name='EndTime', example='1643077666'),
  errorResult?: [ 
    {
      errorDesc?: string(name='ErrorDesc', example='Terminal abnormal'),
      errorLevel?: string(name='ErrorLevel', example='Warning'),
      errorPart?: string(name='ErrorPart', example='Terminal'),
      errorSuggestion?: string(name='ErrorSuggestion', example='Please check whether the terminal and card are compatible or whether the terminal can send messages'),
    }
  ](name='ErrorResult'),
  iccId?: string(name='IccId', example='89860477*******27546'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-smy9a5ockzp08n****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  status?: string(name='Status', example='failed'),
}

model GetDiagnoseResultForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnoseResultForSingleCardResponseBody(name='body'),
}

async function getDiagnoseResultForSingleCard(request: GetDiagnoseResultForSingleCardRequest): GetDiagnoseResultForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiagnoseResultForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model GetIoTCloudConnectorAccessLogRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetIoTCloudConnectorAccessLogResponseBody = {
  accessLogSlsLogStore?: string(name='AccessLogSlsLogStore', example='test'),
  accessLogSlsProject?: string(name='AccessLogSlsProject', example='sls-setter'),
  accessLogStatus?: string(name='AccessLogStatus', example='Opened'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model GetIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function getIoTCloudConnectorAccessLog(request: GetIoTCloudConnectorAccessLogRequest): GetIoTCloudConnectorAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIoTCloudConnectorAccessLog', 'POST', '/', 'json', false, 'json', request);
}

model GetStsInfoAndOssPathRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolId: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  fileName?: string(name='FileName', example='test.csv', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetStsInfoAndOssPathResponseBody = {
  accessKeyId?: string(name='AccessKeyId', description='Sts info of accessKeyId', example='<yourAccessKeyId>'),
  accessKeySecret?: string(name='AccessKeySecret', description='Sts info of accessKeySecret', example='<yourAccessKeySecret>'),
  expiration?: string(name='Expiration', description='Sts info expiration time', example='1633060876'),
  ossPath?: string(name='OssPath', description='OssPath', example='cciot-cn-hangzhou/127859184306****/test.csv'),
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  securityToken?: string(name='SecurityToken', description='Sts info of securityToken', example='<yourSecurityToken>'),
}

model GetStsInfoAndOssPathResponse = {
  headers: map[string]string(name='headers'),
  body: GetStsInfoAndOssPathResponseBody(name='body'),
}

async function getStsInfoAndOssPath(request: GetStsInfoAndOssPathRequest): GetStsInfoAndOssPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStsInfoAndOssPath', 'POST', '/', 'json', false, 'json', request);
}

model GrantVirtualBorderRouterRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId', example='vbr-bp1svadp4lq38janc****', position='Query'),
}

model GrantVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model GrantVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: GrantVirtualBorderRouterResponseBody(name='body'),
}

async function grantVirtualBorderRouter(request: GrantVirtualBorderRouterRequest): GrantVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model ListAPNsRequest {
  APN?: string(name='APN', example='CMWAP', position='Query'),
  ISP?: string(name='ISP', example='mobile', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='Standard', position='Query'),
}

model ListAPNsResponseBody = {
  APNs?: [ 
    {
      APN?: string(name='APN', example='CMWAP'),
      description?: string(name='Description', example='test'),
      featureList?: [ string ](name='FeatureList'),
      ISP?: string(name='ISP', example='mobile'),
      name?: string(name='Name', example='test'),
      zoneList?: [ string ](name='ZoneList'),
    }
  ](name='APNs'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAPNsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAPNsResponseBody(name='body'),
}

async function listAPNs(request: ListAPNsRequest): ListAPNsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAPNs', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds', position='Query'),
  authorizationRuleName?: [ string ](name='AuthorizationRuleName', position='Query'),
  authorizationRuleStatus?: [ string ](name='AuthorizationRuleStatus', position='Query'),
  authorizationRuleType?: string(name='AuthorizationRuleType', example='System', position='Query'),
  destination?: [ string ](name='Destination', position='Query'),
  destinationPort?: [ string ](name='DestinationPort', position='Query'),
  destinationType?: [ string ](name='DestinationType', position='Query'),
  fuzzyAuthorizationRuleName?: string(name='FuzzyAuthorizationRuleName', position='Query'),
  fuzzyDestination?: string(name='FuzzyDestination', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  policy?: [ string ](name='Policy', position='Query'),
  protocol?: [ string ](name='Protocol', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleDescription?: string(name='AuthorizationRuleDescription', example='rule01'),
      authorizationRuleId?: string(name='AuthorizationRuleId', example='ar-1234abcb8tmno0hdq****'),
      authorizationRuleName?: string(name='AuthorizationRuleName', example='rule01'),
      authorizationRuleStatus?: string(name='AuthorizationRuleStatus', example='Created'),
      authorizationRuleType?: string(name='AuthorizationRuleType', example='System'),
      destination?: string(name='Destination', example='192.168.XX.XX'),
      destinationPort?: string(name='DestinationPort', example='80/80'),
      destinationType?: string(name='DestinationType', example='Cidr'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
      policy?: string(name='Policy', example='Permit'),
      protocol?: string(name='Protocol', example='tcp'),
      sourceCidrs?: [ string ](name='SourceCidrs'),
    }
  ](name='AuthorizationRules'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizationRules', 'POST', '/', 'json', false, 'json', request);
}

model ListConnectionPoolAllIpsRequest {
  connectionPoolId: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ip?: string(name='Ip', example='192.168.0.1', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2000, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='Cidr', position='Query'),
}

model ListConnectionPoolAllIpsResponseBody = {
  connectionPoolIps?: [ 
    {
      connectionPoolId?: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****'),
      ip?: string(name='Ip', example='192.168.0.1'),
      ipNum?: long(name='IpNum', example='254'),
      status?: string(name='Status', example='activated'),
      type?: string(name='Type', example='Cidr'),
    }
  ](name='ConnectionPoolIps'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalIpsCount?: int32(name='TotalIpsCount', example='1'),
}

model ListConnectionPoolAllIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolAllIpsResponseBody(name='body'),
}

async function listConnectionPoolAllIps(request: ListConnectionPoolAllIpsRequest): ListConnectionPoolAllIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectionPoolAllIps', 'POST', '/', 'json', false, 'json', request);
}

model ListConnectionPoolIpsRequest {
  connectionPoolId?: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ip?: string(name='Ip', example='192.168.XX.XX', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2000, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListConnectionPoolIpsResponseBody = {
  connectionPoolIps?: [ 
    {
      connectionPoolId?: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****'),
      ip?: string(name='Ip', example='192.168.XX.XX'),
      status?: string(name='Status', example='activated'),
    }
  ](name='ConnectionPoolIps'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListConnectionPoolIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolIpsResponseBody(name='body'),
}

async function listConnectionPoolIps(request: ListConnectionPoolIpsRequest): ListConnectionPoolIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectionPoolIps', 'POST', '/', 'json', false, 'json', request);
}

model ListConnectionPoolsRequest {
  connectionPoolIds?: [ string ](name='ConnectionPoolIds', position='Query'),
  connectionPoolName?: [ string ](name='ConnectionPoolName', position='Query'),
  connectionPoolStatus?: [ string ](name='ConnectionPoolStatus', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListConnectionPoolsResponseBody = {
  connectionPools?: [ 
    {
      cidrs?: [ string ](name='Cidrs'),
      connectionPoolDescription?: string(name='ConnectionPoolDescription', example='pool01'),
      connectionPoolId?: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****'),
      connectionPoolName?: string(name='ConnectionPoolName', example='pool01'),
      connectionPoolStatus?: string(name='ConnectionPoolStatus', example='Running'),
      operateResultRequestID?: string(name='OperateResultRequestID', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA651'),
    }
  ](name='ConnectionPools'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListConnectionPoolsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolsResponseBody(name='body'),
}

async function listConnectionPools(request: ListConnectionPoolsRequest): ListConnectionPoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectionPools', 'POST', '/', 'json', false, 'json', request);
}

model ListDNSServiceRulesRequest {
  DNSServiceRuleIds?: [ string ](name='DNSServiceRuleIds', position='Query'),
  DNSServiceRuleName?: [ string ](name='DNSServiceRuleName', position='Query'),
  DNSServiceRuleStatus?: [ string ](name='DNSServiceRuleStatus', position='Query'),
  destination?: [ string ](name='Destination', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-1y6h8z7imd2yu4****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceType?: string(name='ServiceType', example='Normal', position='Query'),
  source?: [ string ](name='Source', position='Query'),
}

model ListDNSServiceRulesResponseBody = {
  DNSServiceRules?: [ 
    {
      DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription', example='description'),
      DNSServiceRuleId?: string(name='DNSServiceRuleId', example='ar-c1dk4jb73j5791****'),
      DNSServiceRuleName?: string(name='DNSServiceRuleName', example='test'),
      DNSServiceRuleStatus?: string(name='DNSServiceRuleStatus', example='Created'),
      destination?: string(name='Destination', example='192.168.0.2'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-1y6h8z7imd2yu4****'),
      serviceType?: string(name='ServiceType', example='Normal'),
      source?: string(name='Source', example='100.100.2.138'),
    }
  ](name='DNSServiceRules'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='4A63118E-B375-5718-8F03-30F6804E1DCD'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListDNSServiceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDNSServiceRulesResponseBody(name='body'),
}

async function listDNSServiceRules(request: ListDNSServiceRulesRequest): ListDNSServiceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDNSServiceRules', 'POST', '/', 'json', false, 'json', request);
}

model ListDiagnoseInfoForSingleCardRequest {
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-smy9a5ockzp08n****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', example='169.254.XX.XX', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
}

model ListDiagnoseInfoForSingleCardResponseBody = {
  diagnoseInfo?: [ 
    {
      beginTime?: long(name='BeginTime', example='1643077466'),
      cardIp?: string(name='CardIp', example='169.254.XX.XX'),
      destination?: string(name='Destination', example='114.114.XX.XX'),
      destinationType?: string(name='DestinationType', example='IP'),
      diagnoseTime?: long(name='DiagnoseTime', example='1649669904'),
      endTime?: long(name='EndTime', example='1643077666'),
      iccId?: string(name='IccId', example='89860477*******27546'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-smy9a5ockzp08n****'),
      source?: string(name='Source', example='169.254.XX.XX'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status', example='completed'),
      taskId?: string(name='TaskId', example='diagnoseTask-bp2qhwdp2n9x6zkvq****'),
    }
  ](name='DiagnoseInfo'),
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListDiagnoseInfoForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: ListDiagnoseInfoForSingleCardResponseBody(name='body'),
}

async function listDiagnoseInfoForSingleCard(request: ListDiagnoseInfoForSingleCardRequest): ListDiagnoseInfoForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDiagnoseInfoForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds', position='Query'),
  authorizationRuleName?: [ string ](name='AuthorizationRuleName', position='Query'),
  authorizationRuleStatus?: [ string ](name='AuthorizationRuleStatus', position='Query'),
  destination?: [ string ](name='Destination', position='Query'),
  destinationPort?: [ string ](name='DestinationPort', position='Query'),
  destinationType?: [ string ](name='DestinationType', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  policy?: [ string ](name='Policy', position='Query'),
  protocol?: [ string ](name='Protocol', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='System', position='Query'),
}

model ListGroupAuthorizationRulesResponseBody = {
  groupAuthorizationRules?: [ 
    {
      authorizationRuleDescription?: string(name='AuthorizationRuleDescription', example='rule'),
      authorizationRuleId?: string(name='AuthorizationRuleId', example='gar-ez91t41jvi6tr8****'),
      authorizationRuleName?: string(name='AuthorizationRuleName', example='ruletest'),
      authorizationRuleStatus?: string(name='AuthorizationRuleStatus', example='Created'),
      destination?: string(name='Destination', example='47.0.XX.XX'),
      destinationPort?: string(name='DestinationPort', example='80/80'),
      destinationType?: string(name='DestinationType', example='Cidr'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
      policy?: string(name='Policy', example='Permit'),
      protocol?: string(name='Protocol', example='tcp'),
      sourceCidrs?: [ string ](name='SourceCidrs'),
      type?: string(name='Type', example='System'),
    }
  ](name='GroupAuthorizationRules'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListGroupAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupAuthorizationRulesResponseBody(name='body'),
}

async function listGroupAuthorizationRules(request: ListGroupAuthorizationRulesRequest): ListGroupAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupAuthorizationRules', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupDNSServiceRulesRequest {
  DNSServiceRuleIds?: [ string ](name='DNSServiceRuleIds', position='Query'),
  DNSServiceRuleName?: [ string ](name='DNSServiceRuleName', position='Query'),
  DNSServiceRuleStatus?: [ string ](name='DNSServiceRuleStatus', position='Query'),
  destination?: [ string ](name='Destination', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceType?: string(name='ServiceType', example='Normal', position='Query'),
  source?: [ string ](name='Source', position='Query'),
}

model ListGroupDNSServiceRulesResponseBody = {
  DNSServiceRules?: [ 
    {
      DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription', example='description'),
      DNSServiceRuleId?: string(name='DNSServiceRuleId', example='gar-ffnn1ewe2nmf3y****'),
      DNSServiceRuleName?: string(name='DNSServiceRuleName', example='test'),
      DNSServiceRuleStatus?: string(name='DNSServiceRuleStatus', example='Created'),
      destination?: string(name='Destination', example='192.168.0.2'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
      serviceType?: string(name='ServiceType', example='Normal'),
      source?: string(name='Source', example='100.100.2.136'),
    }
  ](name='DNSServiceRules'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='77111A6A-56BA-59B2-8CAA-7CBF21648FB8'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListGroupDNSServiceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupDNSServiceRulesResponseBody(name='body'),
}

async function listGroupDNSServiceRules(request: ListGroupDNSServiceRulesRequest): ListGroupDNSServiceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupDNSServiceRules', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupIpMappingRulesRequest {
  destinationIps?: [ string ](name='DestinationIps', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  ipMappingRuleIds?: [ string ](name='IpMappingRuleIds', position='Query'),
  ipMappingRuleNames?: [ string ](name='IpMappingRuleNames', position='Query'),
  ipMappingRuleStatuses?: [ string ](name='IpMappingRuleStatuses', position='Query'),
  mappingIps?: [ string ](name='MappingIps', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListGroupIpMappingRulesResponseBody = {
  ipMappingRules?: [ 
    {
      destinationIp?: string(name='DestinationIp', example='192.168.10.8'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
      ipMappingRuleDescription?: string(name='IpMappingRuleDescription', example='description'),
      ipMappingRuleId?: string(name='IpMappingRuleId', example='im-irrp3bzuu5nrbx****'),
      ipMappingRuleName?: string(name='IpMappingRuleName', example='name'),
      ipMappingRuleStatus?: string(name='IpMappingRuleStatus', example='Created'),
      mappingIp?: string(name='MappingIp', example='47.0.XX.XX'),
    }
  ](name='IpMappingRules'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListGroupIpMappingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupIpMappingRulesResponseBody(name='body'),
}

async function listGroupIpMappingRules(request: ListGroupIpMappingRulesRequest): ListGroupIpMappingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupIpMappingRules', 'POST', '/', 'json', false, 'json', request);
}

model ListIoTCloudConnectorAvailableZonesRequest {
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListIoTCloudConnectorAvailableZonesResponseBody = {
  availableZoneList?: [ string ](name='AvailableZoneList'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ListIoTCloudConnectorAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorAvailableZonesResponseBody(name='body'),
}

async function listIoTCloudConnectorAvailableZones(request: ListIoTCloudConnectorAvailableZonesRequest): ListIoTCloudConnectorAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCloudConnectorAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model ListIoTCloudConnectorEIPsRequest {
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='NextToken', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListIoTCloudConnectorEIPsResponseBody = {
  EIPs?: [ string ](name='EIPs'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListIoTCloudConnectorEIPsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorEIPsResponseBody(name='body'),
}

async function listIoTCloudConnectorEIPs(request: ListIoTCloudConnectorEIPsRequest): ListIoTCloudConnectorEIPsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCloudConnectorEIPs', 'POST', '/', 'json', false, 'json', request);
}

model ListIoTCloudConnectorGroupsRequest {
  ioTCloudConnectorGroupIds?: [ string ](name='IoTCloudConnectorGroupIds', position='Query'),
  ioTCloudConnectorGroupName?: [ string ](name='IoTCloudConnectorGroupName', position='Query'),
  ioTCloudConnectorGroupStatus?: [ string ](name='IoTCloudConnectorGroupStatus', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='Standard', position='Query'),
}

model ListIoTCloudConnectorGroupsResponseBody = {
  ioTCloudConnectorGroups?: [ 
    {
      createTime?: long(name='CreateTime', example='2021-10-01 00:00:00'),
      description?: string(name='Description', example='test'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
      ioTCloudConnectorGroupStatus?: string(name='IoTCloudConnectorGroupStatus', example='Created'),
      ioTCloudConnectors?: [ 
        {
          APN?: string(name='APN', example='CMWAP'),
          createTime?: long(name='CreateTime', example='2021-10-01 00:00:00'),
          ISP?: string(name='ISP', example='mobile'),
          ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription', example='cc01'),
          ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
          ioTCloudConnectorName?: string(name='IoTCloudConnectorName', example='cc01'),
          ioTCloudConnectorStatus?: string(name='IoTCloudConnectorStatus', example='Created'),
          serviceType?: string(name='ServiceType', example='Normal'),
        }
      ](name='IoTCloudConnectors'),
      name?: string(name='Name', example='cctest'),
      serviceType?: string(name='ServiceType', example='Normal'),
      type?: string(name='Type', example='Standard'),
    }
  ](name='IoTCloudConnectorGroups'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListIoTCloudConnectorGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorGroupsResponseBody(name='body'),
}

async function listIoTCloudConnectorGroups(request: ListIoTCloudConnectorGroupsRequest): ListIoTCloudConnectorGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCloudConnectorGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListIoTCloudConnectorsRequest {
  APN?: [ string ](name='APN', position='Query'),
  ISP?: [ string ](name='ISP', position='Query'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  ioTCloudConnectorIds?: [ string ](name='IoTCloudConnectorIds', position='Query'),
  ioTCloudConnectorName?: [ string ](name='IoTCloudConnectorName', position='Query'),
  ioTCloudConnectorStatus?: [ string ](name='IoTCloudConnectorStatus', position='Query'),
  isInGroup?: boolean(name='IsInGroup', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpcId?: [ string ](name='VpcId', position='Query'),
}

model ListIoTCloudConnectorsResponseBody = {
  ioTCloudConnectors?: [ 
    {
      APN?: string(name='APN', example='CMWAP'),
      createTime?: long(name='CreateTime', example='2021-10-01T00:00:00Z'),
      grantAliUid?: string(name='GrantAliUid', example='253460731706911258'),
      ISP?: string(name='ISP', example='mobile'),
      ioTCloudConnectorBusinessStatus?: string(name='IoTCloudConnectorBusinessStatus', example='Normal'),
      ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription', example='test'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
      ioTCloudConnectorName?: string(name='IoTCloudConnectorName', example='test'),
      ioTCloudConnectorStatus?: string(name='IoTCloudConnectorStatus', example='Created'),
      ipFeature?: string(name='IpFeature', example='192.168.0.1'),
      mode?: string(name='Mode', example='PassThrough'),
      modifyTime?: long(name='ModifyTime', example='2021-10-01T10:00:00Z'),
      rateLimit?: long(name='RateLimit', example='2'),
      serviceType?: string(name='ServiceType', example='Normal'),
      type?: string(name='Type', example='Standard'),
      vSwitchList?: [ string ](name='VSwitchList'),
      vpcId?: string(name='VpcId', example='vpc-bp1aevy8sofi8mh1q****'),
      wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled', example='false'),
    }
  ](name='IoTCloudConnectors'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListIoTCloudConnectorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorsResponseBody(name='body'),
}

async function listIoTCloudConnectors(request: ListIoTCloudConnectorsRequest): ListIoTCloudConnectorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCloudConnectors', 'POST', '/', 'json', false, 'json', request);
}

model ListIoTCoudConnectorBackhaulRouteRequest {
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListIoTCoudConnectorBackhaulRouteResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  routes?: [ 
    {
      description?: string(name='Description', example='test'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.2.0/24'),
      nextHopId?: string(name='NextHopId', example='eni-bp1d66qjxb3qoin3****'),
      nextHopType?: string(name='NextHopType', example='NetworkInterface'),
      status?: string(name='Status', example='Published'),
    }
  ](name='Routes'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListIoTCoudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCoudConnectorBackhaulRouteResponseBody(name='body'),
}

async function listIoTCoudConnectorBackhaulRoute(request: ListIoTCoudConnectorBackhaulRouteRequest): ListIoTCoudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCoudConnectorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model ListIpMappingRulesRequest {
  destinationIps?: [ string ](name='DestinationIps', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ipMappingRuleIds?: [ string ](name='IpMappingRuleIds', position='Query'),
  ipMappingRuleNames?: [ string ](name='IpMappingRuleNames', position='Query'),
  ipMappingRuleStatuses?: [ string ](name='IpMappingRuleStatuses', position='Query'),
  mappingIps?: [ string ](name='MappingIps', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListIpMappingRulesResponseBody = {
  ipMappingRules?: [ 
    {
      destinationIp?: string(name='DestinationIp', example='192.168.10.8'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
      ipMappingRuleDescription?: string(name='IpMappingRuleDescription', example='description'),
      ipMappingRuleId?: string(name='IpMappingRuleId', example='im-irrp3bzuu5nrbx****'),
      ipMappingRuleName?: string(name='IpMappingRuleName', example='name'),
      ipMappingRuleStatus?: string(name='IpMappingRuleStatus', example='Created'),
      mappingIp?: string(name='MappingIp', example='47.0.XX.XX'),
    }
  ](name='IpMappingRules'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListIpMappingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIpMappingRulesResponseBody(name='body'),
}

async function listIpMappingRules(request: ListIpMappingRulesRequest): ListIpMappingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpMappingRules', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='cciot.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceRequest {
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceStatuses?: [ string ](name='ResourceStatuses', position='Query'),
  serviceIds?: [ string ](name='ServiceIds', position='Query'),
  serviceNames?: [ string ](name='ServiceNames', position='Query'),
}

model ListServiceResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='NextToken	FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  services?: [ 
    {
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****'),
      serviceDescription?: string(name='ServiceDescription', example='service_description'),
      serviceId?: string(name='ServiceId', example='c910061f-****-44e6-b659-***c'),
      serviceName?: string(name='ServiceName', example='service_name'),
      serviceStatus?: string(name='ServiceStatus', example='Created'),
    }
  ](name='Services'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceResponseBody(name='body'),
}

async function listService(request: ListServiceRequest): ListServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListService', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceEntriesRequest {
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceEntryIds?: [ string ](name='ServiceEntryIds', position='Query'),
  serviceEntryName?: [ string ](name='ServiceEntryName', position='Query'),
  serviceEntryStatus?: [ string ](name='ServiceEntryStatus', position='Query'),
  serviceId: string(name='ServiceId', example='c910061f-****-44e6-b659-***c', position='Query'),
  target?: [ string ](name='Target', position='Query'),
  targetType?: [ string ](name='TargetType', position='Query'),
}

model ListServiceEntriesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serviceEntries?: [ 
    {
      serviceEntryDescription?: string(name='ServiceEntryDescription', example='entry_description'),
      serviceEntryId?: string(name='ServiceEntryId', example='fwd-119smw5tkasdf****'),
      serviceEntryName?: string(name='ServiceEntryName', example='entry_name'),
      serviceEntryStatus?: string(name='ServiceEntryStatus', example='Created'),
      serviceId?: string(name='ServiceId', example='c910061f-****-44e6-b659-***c'),
      target?: string(name='Target', example='192.168.1.32/27'),
      targetType?: string(name='TargetType', example='Cidr'),
    }
  ](name='ServiceEntries'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListServiceEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceEntriesResponseBody(name='body'),
}

async function listServiceEntries(request: ListServiceEntriesRequest): ListServiceEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceEntries', 'POST', '/', 'json', false, 'json', request);
}

model MoveAuthorizationRuleToDNSServiceRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar-la6sn6gng90e1x****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-1y6h8z7imd2yu4****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model MoveAuthorizationRuleToDNSServiceResponseBody = {
  requestId?: string(name='RequestId', example='862D2D7E-E6A9-5645-9CA0-64B520256A7B'),
}

model MoveAuthorizationRuleToDNSServiceResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAuthorizationRuleToDNSServiceResponseBody(name='body'),
}

async function moveAuthorizationRuleToDNSService(request: MoveAuthorizationRuleToDNSServiceRequest): MoveAuthorizationRuleToDNSServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveAuthorizationRuleToDNSService', 'POST', '/', 'json', false, 'json', request);
}

model MoveGroupAuthorizationRuleToDNSServiceRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='gar-ez91t41jvi6tr8****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model MoveGroupAuthorizationRuleToDNSServiceResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model MoveGroupAuthorizationRuleToDNSServiceResponse = {
  headers: map[string]string(name='headers'),
  body: MoveGroupAuthorizationRuleToDNSServiceResponseBody(name='body'),
}

async function moveGroupAuthorizationRuleToDNSService(request: MoveGroupAuthorizationRuleToDNSServiceRequest): MoveGroupAuthorizationRuleToDNSServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveGroupAuthorizationRuleToDNSService', 'POST', '/', 'json', false, 'json', request);
}

model OpenIoTCloudConnectorServiceRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model OpenIoTCloudConnectorServiceResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model OpenIoTCloudConnectorServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenIoTCloudConnectorServiceResponseBody(name='body'),
}

async function openIoTCloudConnectorService(request: OpenIoTCloudConnectorServiceRequest): OpenIoTCloudConnectorServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenIoTCloudConnectorService', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIoTCloudConnectorFromGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  ioTCloudConnectorId: [ string ](name='IoTCloudConnectorId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RemoveIoTCloudConnectorFromGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveIoTCloudConnectorFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIoTCloudConnectorFromGroupResponseBody(name='body'),
}

async function removeIoTCloudConnectorFromGroup(request: RemoveIoTCloudConnectorFromGroupRequest): RemoveIoTCloudConnectorFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIoTCloudConnectorFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RevertIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RevertIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  resourceId?: string(name='ResourceId', example='iotcc-bp1odcab8tmno0hdq****'),
}

model RevertIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: RevertIoTCloudConnectorResponseBody(name='body'),
}

async function revertIoTCloudConnector(request: RevertIoTCloudConnectorRequest): RevertIoTCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevertIoTCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDiagnoseTaskForSingleCardRequest {
  beginTime: long(name='BeginTime', example='1643077466', position='Query'),
  destination?: string(name='Destination', example='114.114.XX.XX', position='Query'),
  destinationType?: string(name='DestinationType', example='IP', position='Query'),
  endTime: long(name='EndTime', example='1643077666', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-smy9a5ockzp08n****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceUid?: long(name='ResourceUid', example='253460731706911258', position='Query'),
  source: string(name='Source', example='169.254.XX.XX', position='Query'),
  sourceType: string(name='SourceType', position='Query'),
}

model SubmitDiagnoseTaskForSingleCardResponseBody = {
  diagnoseTaskId?: string(name='DiagnoseTaskId', example='diagnoseTask-bp2qhwdp2n9x6zkvq****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model SubmitDiagnoseTaskForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDiagnoseTaskForSingleCardResponseBody(name='body'),
}

async function submitDiagnoseTaskForSingleCard(request: SubmitDiagnoseTaskForSingleCardRequest): SubmitDiagnoseTaskForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDiagnoseTaskForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthorizationRuleAttributeRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription', example='rule01', position='Query'),
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar-1234abcb8tmno0hdq****', position='Query'),
  authorizationRuleName?: string(name='AuthorizationRuleName', example='rule01', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destination?: string(name='Destination', example='192.168.XX.XX', position='Query'),
  destinationPort?: string(name='DestinationPort', example='80/80', position='Query'),
  destinationType?: string(name='DestinationType', example='Cidr', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  policy?: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='tcp', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceCidrs?: [ string ](name='SourceCidrs', position='Query'),
}

model UpdateAuthorizationRuleAttributeResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateAuthorizationRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthorizationRuleAttributeResponseBody(name='body'),
}

async function updateAuthorizationRuleAttribute(request: UpdateAuthorizationRuleAttributeRequest): UpdateAuthorizationRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthorizationRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConnectionPoolAttributeRequest {
  cidrs?: [ string ](name='Cidrs', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  connectionPoolDescription?: string(name='ConnectionPoolDescription', example='pool01', position='Query'),
  connectionPoolId: string(name='ConnectionPoolId', example='cp-bp11234abctmno0hdq****', position='Query'),
  connectionPoolName?: string(name='ConnectionPoolName', example='pool01', position='Query'),
  count?: long(name='Count', example='2', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateConnectionPoolAttributeResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateConnectionPoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConnectionPoolAttributeResponseBody(name='body'),
}

async function updateConnectionPoolAttribute(request: UpdateConnectionPoolAttributeRequest): UpdateConnectionPoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConnectionPoolAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDNSServiceRuleAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription', example='description', position='Query'),
  DNSServiceRuleId: string(name='DNSServiceRuleId', example='ar-r56ijpurlu50gi****', position='Query'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName', example='test', position='Query'),
  destination?: string(name='Destination', example='192.168.0.2', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-1y6h8z7imd2yu4****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceType?: string(name='ServiceType', example='Normal', position='Query'),
  source?: string(name='Source', example='100.100.2.138', position='Query'),
}

model UpdateDNSServiceRuleAttributeResponseBody = {
  requestId?: string(name='RequestId', example='BC6D1C1D-6DBD-568C-B867-BC9CA699ED01'),
}

model UpdateDNSServiceRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDNSServiceRuleAttributeResponseBody(name='body'),
}

async function updateDNSServiceRuleAttribute(request: UpdateDNSServiceRuleAttributeRequest): UpdateDNSServiceRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDNSServiceRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupAuthorizationRuleAttributeRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription', example='rule', position='Query'),
  authorizationRuleId: string(name='AuthorizationRuleId', example='gar-ez91t41jvi6tr8****', position='Query'),
  authorizationRuleName?: string(name='AuthorizationRuleName', example='ruletest', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destination?: string(name='Destination', example='47.0.XX.XX', position='Query'),
  destinationPort?: string(name='DestinationPort', example='80/80', position='Query'),
  destinationType?: string(name='DestinationType', example='Cidr', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  policy?: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='tcp', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceCidrs?: [ string ](name='SourceCidrs', position='Query'),
}

model UpdateGroupAuthorizationRuleAttributeResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='gar-ez91t41jvi6tr8****'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateGroupAuthorizationRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupAuthorizationRuleAttributeResponseBody(name='body'),
}

async function updateGroupAuthorizationRuleAttribute(request: UpdateGroupAuthorizationRuleAttributeRequest): UpdateGroupAuthorizationRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupAuthorizationRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupDNSServiceRuleAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription', example='description', position='Query'),
  DNSServiceRuleId: string(name='DNSServiceRuleId', example='gar-ffnn1ewe2nmf3y****', position='Query'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName', example='test', position='Query'),
  destination?: string(name='Destination', example='192.168.0.2', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceType?: string(name='ServiceType', example='Normal', position='Query'),
  source?: string(name='Source', example='100.100.2.136', position='Query'),
}

model UpdateGroupDNSServiceRuleAttributeResponseBody = {
  requestId?: string(name='RequestId', example='77111A6A-56BA-59B2-8CAA-7CBF21648FB8'),
}

model UpdateGroupDNSServiceRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupDNSServiceRuleAttributeResponseBody(name='body'),
}

async function updateGroupDNSServiceRuleAttribute(request: UpdateGroupDNSServiceRuleAttributeRequest): UpdateGroupDNSServiceRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupDNSServiceRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupIpMappingRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationIp?: string(name='DestinationIp', example='192.168.10.8', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  groupIpMappingRuleId: string(name='GroupIpMappingRuleId', example='im-irrp3bzuu5nrbx****', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  ipMappingRuleDescription?: string(name='IpMappingRuleDescription', example='description', position='Query'),
  ipMappingRuleName?: string(name='IpMappingRuleName', example='name', position='Query'),
  mappingIp?: string(name='MappingIp', example='47.0.XX.XX', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateGroupIpMappingRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='ar-1234abcb8tmno0hdq****'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateGroupIpMappingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupIpMappingRuleResponseBody(name='body'),
}

async function updateGroupIpMappingRule(request: UpdateGroupIpMappingRuleRequest): UpdateGroupIpMappingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupIpMappingRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIoTCloudConnectorAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription', example='test', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ioTCloudConnectorName?: string(name='IoTCloudConnectorName', example='test', position='Query'),
  mode?: string(name='Mode', example='PassThrough', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled', example='true', position='Query'),
}

model UpdateIoTCloudConnectorAttributeResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  resourceId?: string(name='ResourceId', example='iotcc-bp1odcab8tmno0hdq****'),
}

model UpdateIoTCloudConnectorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIoTCloudConnectorAttributeResponseBody(name='body'),
}

async function updateIoTCloudConnectorAttribute(request: UpdateIoTCloudConnectorAttributeRequest): UpdateIoTCloudConnectorAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIoTCloudConnectorAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIoTCloudConnectorGroupAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='description', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorGroupId: string(name='IoTCloudConnectorGroupId', example='iotccg-g00epppbi9di9y****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateIoTCloudConnectorGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateIoTCloudConnectorGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIoTCloudConnectorGroupAttributeResponseBody(name='body'),
}

async function updateIoTCloudConnectorGroupAttribute(request: UpdateIoTCloudConnectorGroupAttributeRequest): UpdateIoTCloudConnectorGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIoTCloudConnectorGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpMappingRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationIp?: string(name='DestinationIp', example='192.168.10.8', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  ipMappingRuleDescription?: string(name='IpMappingRuleDescription', example='description', position='Query'),
  ipMappingRuleId: string(name='IpMappingRuleId', example='im-irrp3bzuu5nrbx****', position='Query'),
  ipMappingRuleName?: string(name='IpMappingRuleName', example='name', position='Query'),
  mappingIp?: string(name='MappingIp', example='47.0.XX.XX', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateIpMappingRuleResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateIpMappingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpMappingRuleResponseBody(name='body'),
}

async function updateIpMappingRule(request: UpdateIpMappingRuleRequest): UpdateIpMappingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpMappingRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceDescription?: string(name='ServiceDescription', example='service_description', position='Query'),
  serviceId: string(name='ServiceId', example='c910061f-****-44e6-b659-***c', position='Query'),
  serviceName?: string(name='ServiceName', example='service_name', position='Query'),
}

model UpdateServiceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceAttributeResponseBody(name='body'),
}

async function updateServiceAttribute(request: UpdateServiceAttributeRequest): UpdateServiceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceEntryAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ioTCloudConnectorId: string(name='IoTCloudConnectorId', example='iotcc-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceEntryDescription?: string(name='ServiceEntryDescription', example='entry_description', position='Query'),
  serviceEntryId: string(name='ServiceEntryId', example='fwd-119smw5tkasdf****', position='Query'),
  serviceEntryName?: string(name='ServiceEntryName', example='entry_name', position='Query'),
  serviceId: string(name='ServiceId', example='c910061f-****-44e6-b659-***c', position='Query'),
}

model UpdateServiceEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateServiceEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceEntryAttributeResponseBody(name='body'),
}

async function updateServiceEntryAttribute(request: UpdateServiceEntryAttributeRequest): UpdateServiceEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

