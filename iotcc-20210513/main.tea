/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('iotcc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AssociateIpWithConnectionPoolRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ips?: [ string ](name='Ips'),
  ipsFilePath?: string(name='IpsFilePath'),
  regionId?: string(name='RegionId'),
}

model AssociateIpWithConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateIpWithConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateIpWithConnectionPoolResponseBody(name='body'),
}

async function associateIpWithConnectionPoolWithOptions(request: AssociateIpWithConnectionPoolRequest, runtime: Util.RuntimeOptions): AssociateIpWithConnectionPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateIpWithConnectionPool', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateIpWithConnectionPool(request: AssociateIpWithConnectionPoolRequest): AssociateIpWithConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateIpWithConnectionPoolWithOptions(request, runtime);
}

model AssociateVSwitchWithIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  vSwitchList?: [ string ](name='VSwitchList'),
  vpcId?: string(name='VpcId'),
}

model AssociateVSwitchWithIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateVSwitchWithIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateVSwitchWithIoTCloudConnectorResponseBody(name='body'),
}

async function associateVSwitchWithIoTCloudConnectorWithOptions(request: AssociateVSwitchWithIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): AssociateVSwitchWithIoTCloudConnectorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateVSwitchWithIoTCloudConnector', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateVSwitchWithIoTCloudConnector(request: AssociateVSwitchWithIoTCloudConnectorRequest): AssociateVSwitchWithIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateVSwitchWithIoTCloudConnectorWithOptions(request, runtime);
}

model CreateAuthorizationRuleRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  policy?: string(name='Policy'),
  regionId?: string(name='RegionId'),
  sourceCidrs?: [ string ](name='SourceCidrs'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRuleWithOptions(request: CreateAuthorizationRuleRequest, runtime: Util.RuntimeOptions): CreateAuthorizationRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAuthorizationRule', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthorizationRuleWithOptions(request, runtime);
}

model CreateConnectionPoolRequest {
  cidrs?: [ string ](name='Cidrs'),
  clientToken?: string(name='ClientToken'),
  connectionPoolDescription?: string(name='ConnectionPoolDescription'),
  connectionPoolName?: string(name='ConnectionPoolName'),
  count?: long(name='Count'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model CreateConnectionPoolResponseBody = {
  connectionPoolId?: string(name='ConnectionPoolId'),
  requestId?: string(name='RequestId'),
}

model CreateConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConnectionPoolResponseBody(name='body'),
}

async function createConnectionPoolWithOptions(request: CreateConnectionPoolRequest, runtime: Util.RuntimeOptions): CreateConnectionPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConnectionPool', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConnectionPool(request: CreateConnectionPoolRequest): CreateConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionPoolWithOptions(request, runtime);
}

model CreateIoTCloudConnectorRequest {
  APN?: string(name='APN'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ISP?: string(name='ISP'),
  ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
  ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
  regionId?: string(name='RegionId'),
  resourceUid?: long(name='ResourceUid'),
  wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled'),
}

model CreateIoTCloudConnectorResponseBody = {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  requestId?: string(name='RequestId'),
}

model CreateIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorResponseBody(name='body'),
}

async function createIoTCloudConnectorWithOptions(request: CreateIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): CreateIoTCloudConnectorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIoTCloudConnector', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIoTCloudConnector(request: CreateIoTCloudConnectorRequest): CreateIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIoTCloudConnectorWithOptions(request, runtime);
}

model CreateServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceName?: string(name='ServiceName'),
}

model CreateServiceResponseBody = {
  requestId?: string(name='RequestId'),
  serviceId?: string(name='ServiceId'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createServiceWithOptions(request: CreateServiceRequest, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateService', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWithOptions(request, runtime);
}

model CreateServiceEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceEntryDescription?: string(name='ServiceEntryDescription'),
  serviceEntryName?: string(name='ServiceEntryName'),
  serviceId?: string(name='ServiceId'),
  target?: string(name='Target'),
  targetType?: string(name='TargetType'),
}

model CreateServiceEntryResponseBody = {
  requestId?: string(name='RequestId'),
  serviceEntryId?: string(name='ServiceEntryId'),
}

model CreateServiceEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceEntryResponseBody(name='body'),
}

async function createServiceEntryWithOptions(request: CreateServiceEntryRequest, runtime: Util.RuntimeOptions): CreateServiceEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServiceEntry', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceEntry(request: CreateServiceEntryRequest): CreateServiceEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceEntryWithOptions(request, runtime);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRuleWithOptions(request: DeleteAuthorizationRuleRequest, runtime: Util.RuntimeOptions): DeleteAuthorizationRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAuthorizationRule', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAuthorizationRuleWithOptions(request, runtime);
}

model DeleteConnectionPoolRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConnectionPoolResponseBody(name='body'),
}

async function deleteConnectionPoolWithOptions(request: DeleteConnectionPoolRequest, runtime: Util.RuntimeOptions): DeleteConnectionPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConnectionPool', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConnectionPool(request: DeleteConnectionPoolRequest): DeleteConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionPoolWithOptions(request, runtime);
}

model DeleteIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnectorResponseBody(name='body'),
}

async function deleteIoTCloudConnectorWithOptions(request: DeleteIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): DeleteIoTCloudConnectorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIoTCloudConnector', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIoTCloudConnector(request: DeleteIoTCloudConnectorRequest): DeleteIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIoTCloudConnectorWithOptions(request, runtime);
}

model DeleteServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteService', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceWithOptions(request, runtime);
}

model DeleteServiceEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceEntryId?: string(name='ServiceEntryId'),
  serviceId?: string(name='ServiceId'),
}

model DeleteServiceEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceEntryResponseBody(name='body'),
}

async function deleteServiceEntryWithOptions(request: DeleteServiceEntryRequest, runtime: Util.RuntimeOptions): DeleteServiceEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteServiceEntry', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteServiceEntry(request: DeleteServiceEntryRequest): DeleteServiceEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceEntryWithOptions(request, runtime);
}

model DisableIoTCloudConnectorAccessLogRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DisableIoTCloudConnectorAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DisableIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function disableIoTCloudConnectorAccessLogWithOptions(request: DisableIoTCloudConnectorAccessLogRequest, runtime: Util.RuntimeOptions): DisableIoTCloudConnectorAccessLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableIoTCloudConnectorAccessLog', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableIoTCloudConnectorAccessLog(request: DisableIoTCloudConnectorAccessLogRequest): DisableIoTCloudConnectorAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableIoTCloudConnectorAccessLogWithOptions(request, runtime);
}

model DissociateIpFromConnectionPoolRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ips?: [ string ](name='Ips'),
  ipsFilePath?: string(name='IpsFilePath'),
  regionId?: string(name='RegionId'),
}

model DissociateIpFromConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateIpFromConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateIpFromConnectionPoolResponseBody(name='body'),
}

async function dissociateIpFromConnectionPoolWithOptions(request: DissociateIpFromConnectionPoolRequest, runtime: Util.RuntimeOptions): DissociateIpFromConnectionPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DissociateIpFromConnectionPool', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dissociateIpFromConnectionPool(request: DissociateIpFromConnectionPoolRequest): DissociateIpFromConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateIpFromConnectionPoolWithOptions(request, runtime);
}

model DissociateVSwitchFromIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DissociateVSwitchFromIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateVSwitchFromIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateVSwitchFromIoTCloudConnectorResponseBody(name='body'),
}

async function dissociateVSwitchFromIoTCloudConnectorWithOptions(request: DissociateVSwitchFromIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): DissociateVSwitchFromIoTCloudConnectorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DissociateVSwitchFromIoTCloudConnector', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dissociateVSwitchFromIoTCloudConnector(request: DissociateVSwitchFromIoTCloudConnectorRequest): DissociateVSwitchFromIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateVSwitchFromIoTCloudConnectorWithOptions(request, runtime);
}

model EnableIoTCloudConnectorAccessLogRequest {
  accessLogSlsLogStore?: string(name='AccessLogSlsLogStore'),
  accessLogSlsProject?: string(name='AccessLogSlsProject'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model EnableIoTCloudConnectorAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: EnableIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function enableIoTCloudConnectorAccessLogWithOptions(request: EnableIoTCloudConnectorAccessLogRequest, runtime: Util.RuntimeOptions): EnableIoTCloudConnectorAccessLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableIoTCloudConnectorAccessLog', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableIoTCloudConnectorAccessLog(request: EnableIoTCloudConnectorAccessLogRequest): EnableIoTCloudConnectorAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableIoTCloudConnectorAccessLogWithOptions(request, runtime);
}

model GetConnectionPoolIpOperationResultRequest {
  connectionPoolId?: string(name='ConnectionPoolId'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  queryRequestId?: string(name='QueryRequestId'),
  regionId?: string(name='RegionId'),
}

model GetConnectionPoolIpOperationResultResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  resultFilePaths?: [ string ](name='ResultFilePaths', description='OssPath'),
}

model GetConnectionPoolIpOperationResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectionPoolIpOperationResultResponseBody(name='body'),
}

async function getConnectionPoolIpOperationResultWithOptions(request: GetConnectionPoolIpOperationResultRequest, runtime: Util.RuntimeOptions): GetConnectionPoolIpOperationResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConnectionPoolIpOperationResult', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getConnectionPoolIpOperationResult(request: GetConnectionPoolIpOperationResultRequest): GetConnectionPoolIpOperationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionPoolIpOperationResultWithOptions(request, runtime);
}

model GetIoTCloudConnectorAccessLogRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model GetIoTCloudConnectorAccessLogResponseBody = {
  accessLogSlsLogStore?: string(name='AccessLogSlsLogStore'),
  accessLogSlsProject?: string(name='AccessLogSlsProject'),
  accessLogStatus?: string(name='AccessLogStatus'),
  requestId?: string(name='RequestId'),
}

model GetIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function getIoTCloudConnectorAccessLogWithOptions(request: GetIoTCloudConnectorAccessLogRequest, runtime: Util.RuntimeOptions): GetIoTCloudConnectorAccessLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetIoTCloudConnectorAccessLog', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getIoTCloudConnectorAccessLog(request: GetIoTCloudConnectorAccessLogRequest): GetIoTCloudConnectorAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIoTCloudConnectorAccessLogWithOptions(request, runtime);
}

model GetStsInfoAndOssPathRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  fileName?: string(name='FileName'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model GetStsInfoAndOssPathResponseBody = {
  accessKeyId?: string(name='AccessKeyId', description='Sts info of accessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret', description='Sts info of accessKeySecret'),
  expiration?: string(name='Expiration', description='Sts info expiration time'),
  ossPath?: string(name='OssPath', description='OssPath'),
  requestId?: string(name='RequestId', description='Id of the request'),
  securityToken?: string(name='SecurityToken', description='Sts info of securityToken'),
}

model GetStsInfoAndOssPathResponse = {
  headers: map[string]string(name='headers'),
  body: GetStsInfoAndOssPathResponseBody(name='body'),
}

async function getStsInfoAndOssPathWithOptions(request: GetStsInfoAndOssPathRequest, runtime: Util.RuntimeOptions): GetStsInfoAndOssPathResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStsInfoAndOssPath', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStsInfoAndOssPath(request: GetStsInfoAndOssPathRequest): GetStsInfoAndOssPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStsInfoAndOssPathWithOptions(request, runtime);
}

model GrantVirtualBorderRouterRequest {
  regionId?: string(name='RegionId'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId'),
}

model GrantVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GrantVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: GrantVirtualBorderRouterResponseBody(name='body'),
}

async function grantVirtualBorderRouterWithOptions(request: GrantVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): GrantVirtualBorderRouterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantVirtualBorderRouter', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantVirtualBorderRouter(request: GrantVirtualBorderRouterRequest): GrantVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantVirtualBorderRouterWithOptions(request, runtime);
}

model ListAPNsRequest {
  APN?: string(name='APN'),
  ISP?: string(name='ISP'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListAPNsResponseBody = {
  APNs?: [ 
    {
      APN?: string(name='APN'),
      description?: string(name='Description'),
      featureList?: [ string ](name='FeatureList'),
      ISP?: string(name='ISP'),
      name?: string(name='Name'),
      zoneList?: [ string ](name='ZoneList'),
    }
  ](name='APNs'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAPNsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAPNsResponseBody(name='body'),
}

async function listAPNsWithOptions(request: ListAPNsRequest, runtime: Util.RuntimeOptions): ListAPNsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAPNs', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAPNs(request: ListAPNsRequest): ListAPNsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAPNsWithOptions(request, runtime);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds'),
  authorizationRuleName?: [ string ](name='AuthorizationRuleName'),
  authorizationRuleStatus?: [ string ](name='AuthorizationRuleStatus'),
  destination?: [ string ](name='Destination'),
  destinationType?: [ string ](name='DestinationType'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  policy?: [ string ](name='Policy'),
  regionId?: string(name='RegionId'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
      authorizationRuleId?: string(name='AuthorizationRuleId'),
      authorizationRuleName?: string(name='AuthorizationRuleName'),
      authorizationRuleStatus?: string(name='AuthorizationRuleStatus'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      policy?: string(name='Policy'),
      sourceCidrs?: [ string ](name='SourceCidrs'),
    }
  ](name='AuthorizationRules'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRulesWithOptions(request: ListAuthorizationRulesRequest, runtime: Util.RuntimeOptions): ListAuthorizationRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAuthorizationRules', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizationRulesWithOptions(request, runtime);
}

model ListConnectionPoolIpsRequest {
  connectionPoolId?: string(name='ConnectionPoolId'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ip?: string(name='Ip'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListConnectionPoolIpsResponseBody = {
  connectionPoolIps?: [ 
    {
      connectionPoolId?: string(name='ConnectionPoolId'),
      ip?: string(name='Ip'),
      status?: string(name='Status'),
    }
  ](name='ConnectionPoolIps'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListConnectionPoolIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolIpsResponseBody(name='body'),
}

async function listConnectionPoolIpsWithOptions(request: ListConnectionPoolIpsRequest, runtime: Util.RuntimeOptions): ListConnectionPoolIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListConnectionPoolIps', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConnectionPoolIps(request: ListConnectionPoolIpsRequest): ListConnectionPoolIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionPoolIpsWithOptions(request, runtime);
}

model ListConnectionPoolsRequest {
  connectionPoolIds?: [ string ](name='ConnectionPoolIds'),
  connectionPoolName?: [ string ](name='ConnectionPoolName'),
  connectionPoolStatus?: [ string ](name='ConnectionPoolStatus'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListConnectionPoolsResponseBody = {
  connectionPools?: [ 
    {
      cidrs?: [ string ](name='Cidrs'),
      connectionPoolDescription?: string(name='ConnectionPoolDescription'),
      connectionPoolId?: string(name='ConnectionPoolId'),
      connectionPoolName?: string(name='ConnectionPoolName'),
      connectionPoolStatus?: string(name='ConnectionPoolStatus'),
      operateResultRequestID?: string(name='OperateResultRequestID'),
    }
  ](name='ConnectionPools'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListConnectionPoolsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolsResponseBody(name='body'),
}

async function listConnectionPoolsWithOptions(request: ListConnectionPoolsRequest, runtime: Util.RuntimeOptions): ListConnectionPoolsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListConnectionPools', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConnectionPools(request: ListConnectionPoolsRequest): ListConnectionPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionPoolsWithOptions(request, runtime);
}

model ListIoTCloudConnectorAvailableZonesRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model ListIoTCloudConnectorAvailableZonesResponseBody = {
  availableZoneList?: [ string ](name='AvailableZoneList'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  requestId?: string(name='RequestId'),
}

model ListIoTCloudConnectorAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorAvailableZonesResponseBody(name='body'),
}

async function listIoTCloudConnectorAvailableZonesWithOptions(request: ListIoTCloudConnectorAvailableZonesRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorAvailableZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIoTCloudConnectorAvailableZones', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIoTCloudConnectorAvailableZones(request: ListIoTCloudConnectorAvailableZonesRequest): ListIoTCloudConnectorAvailableZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorAvailableZonesWithOptions(request, runtime);
}

model ListIoTCloudConnectorsRequest {
  APN?: [ string ](name='APN'),
  ISP?: [ string ](name='ISP'),
  ioTCloudConnectorIds?: [ string ](name='IoTCloudConnectorIds'),
  ioTCloudConnectorName?: [ string ](name='IoTCloudConnectorName'),
  ioTCloudConnectorStatus?: [ string ](name='IoTCloudConnectorStatus'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  vpcId?: [ string ](name='VpcId'),
}

model ListIoTCloudConnectorsResponseBody = {
  ioTCloudConnectors?: [ 
    {
      APN?: string(name='APN'),
      createTime?: long(name='CreateTime'),
      ISP?: string(name='ISP'),
      ioTCloudConnectorBusinessStatus?: string(name='IoTCloudConnectorBusinessStatus'),
      ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
      ioTCloudConnectorStatus?: string(name='IoTCloudConnectorStatus'),
      modifyTime?: long(name='ModifyTime'),
      rateLimit?: long(name='RateLimit'),
      vSwitchList?: [ string ](name='VSwitchList'),
      vpcId?: string(name='VpcId'),
      wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled'),
    }
  ](name='IoTCloudConnectors'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListIoTCloudConnectorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorsResponseBody(name='body'),
}

async function listIoTCloudConnectorsWithOptions(request: ListIoTCloudConnectorsRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIoTCloudConnectors', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIoTCloudConnectors(request: ListIoTCloudConnectorsRequest): ListIoTCloudConnectorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorsWithOptions(request, runtime);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(request: ListRegionsRequest, runtime: Util.RuntimeOptions): ListRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRegions', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(request, runtime);
}

model ListServiceRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceStatuses?: [ string ](name='ResourceStatuses'),
  serviceIds?: [ string ](name='ServiceIds'),
  serviceNames?: [ string ](name='ServiceNames'),
}

model ListServiceResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      serviceDescription?: string(name='ServiceDescription'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      serviceStatus?: string(name='ServiceStatus'),
    }
  ](name='Services'),
  totalCount?: int32(name='TotalCount'),
}

model ListServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceResponseBody(name='body'),
}

async function listServiceWithOptions(request: ListServiceRequest, runtime: Util.RuntimeOptions): ListServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListService', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listService(request: ListServiceRequest): ListServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceWithOptions(request, runtime);
}

model ListServiceEntriesRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceEntryIds?: [ string ](name='ServiceEntryIds'),
  serviceEntryName?: [ string ](name='ServiceEntryName'),
  serviceEntryStatus?: [ string ](name='ServiceEntryStatus'),
  serviceId?: string(name='ServiceId'),
  target?: [ string ](name='Target'),
  targetType?: [ string ](name='TargetType'),
}

model ListServiceEntriesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  serviceEntries?: [ 
    {
      serviceEntryDescription?: string(name='ServiceEntryDescription'),
      serviceEntryId?: string(name='ServiceEntryId'),
      serviceEntryName?: string(name='ServiceEntryName'),
      serviceEntryStatus?: string(name='ServiceEntryStatus'),
      serviceId?: string(name='ServiceId'),
      target?: string(name='Target'),
      targetType?: string(name='TargetType'),
    }
  ](name='ServiceEntries'),
  totalCount?: int32(name='TotalCount'),
}

model ListServiceEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceEntriesResponseBody(name='body'),
}

async function listServiceEntriesWithOptions(request: ListServiceEntriesRequest, runtime: Util.RuntimeOptions): ListServiceEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServiceEntries', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServiceEntries(request: ListServiceEntriesRequest): ListServiceEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceEntriesWithOptions(request, runtime);
}

model OpenIoTCloudConnectorServiceRequest {
  regionId?: string(name='RegionId'),
}

model OpenIoTCloudConnectorServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenIoTCloudConnectorServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenIoTCloudConnectorServiceResponseBody(name='body'),
}

async function openIoTCloudConnectorServiceWithOptions(request: OpenIoTCloudConnectorServiceRequest, runtime: Util.RuntimeOptions): OpenIoTCloudConnectorServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenIoTCloudConnectorService', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openIoTCloudConnectorService(request: OpenIoTCloudConnectorServiceRequest): OpenIoTCloudConnectorServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openIoTCloudConnectorServiceWithOptions(request, runtime);
}

model UpdateAuthorizationRuleAttributeRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  policy?: string(name='Policy'),
  regionId?: string(name='RegionId'),
  sourceCidrs?: [ string ](name='SourceCidrs'),
}

model UpdateAuthorizationRuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuthorizationRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthorizationRuleAttributeResponseBody(name='body'),
}

async function updateAuthorizationRuleAttributeWithOptions(request: UpdateAuthorizationRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateAuthorizationRuleAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAuthorizationRuleAttribute', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAuthorizationRuleAttribute(request: UpdateAuthorizationRuleAttributeRequest): UpdateAuthorizationRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthorizationRuleAttributeWithOptions(request, runtime);
}

model UpdateConnectionPoolAttributeRequest {
  cidrs?: [ string ](name='Cidrs'),
  clientToken?: string(name='ClientToken'),
  connectionPoolDescription?: string(name='ConnectionPoolDescription'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  connectionPoolName?: string(name='ConnectionPoolName'),
  count?: long(name='Count'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model UpdateConnectionPoolAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateConnectionPoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConnectionPoolAttributeResponseBody(name='body'),
}

async function updateConnectionPoolAttributeWithOptions(request: UpdateConnectionPoolAttributeRequest, runtime: Util.RuntimeOptions): UpdateConnectionPoolAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateConnectionPoolAttribute', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateConnectionPoolAttribute(request: UpdateConnectionPoolAttributeRequest): UpdateConnectionPoolAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionPoolAttributeWithOptions(request, runtime);
}

model UpdateIoTCloudConnectorAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
  regionId?: string(name='RegionId'),
  wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled'),
}

model UpdateIoTCloudConnectorAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model UpdateIoTCloudConnectorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIoTCloudConnectorAttributeResponseBody(name='body'),
}

async function updateIoTCloudConnectorAttributeWithOptions(request: UpdateIoTCloudConnectorAttributeRequest, runtime: Util.RuntimeOptions): UpdateIoTCloudConnectorAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateIoTCloudConnectorAttribute', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateIoTCloudConnectorAttribute(request: UpdateIoTCloudConnectorAttributeRequest): UpdateIoTCloudConnectorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIoTCloudConnectorAttributeWithOptions(request, runtime);
}

model UpdateServiceAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
}

model UpdateServiceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceAttributeResponseBody(name='body'),
}

async function updateServiceAttributeWithOptions(request: UpdateServiceAttributeRequest, runtime: Util.RuntimeOptions): UpdateServiceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateServiceAttribute', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateServiceAttribute(request: UpdateServiceAttributeRequest): UpdateServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceAttributeWithOptions(request, runtime);
}

model UpdateServiceEntryAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceEntryDescription?: string(name='ServiceEntryDescription'),
  serviceEntryId?: string(name='ServiceEntryId'),
  serviceEntryName?: string(name='ServiceEntryName'),
  serviceId?: string(name='ServiceId'),
}

model UpdateServiceEntryAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateServiceEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceEntryAttributeResponseBody(name='body'),
}

async function updateServiceEntryAttributeWithOptions(request: UpdateServiceEntryAttributeRequest, runtime: Util.RuntimeOptions): UpdateServiceEntryAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateServiceEntryAttribute', '2021-05-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateServiceEntryAttribute(request: UpdateServiceEntryAttributeRequest): UpdateServiceEntryAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceEntryAttributeWithOptions(request, runtime);
}

