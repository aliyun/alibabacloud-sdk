/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('iotcc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddCidrToConnectionPoolRequest {
  cidrs?: [ string ](name='Cidrs'),
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model AddCidrToConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddCidrToConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AddCidrToConnectionPoolResponseBody(name='body'),
}

async function addCidrToConnectionPoolWithOptions(request: AddCidrToConnectionPoolRequest, runtime: Util.RuntimeOptions): AddCidrToConnectionPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrs)) {
    query['Cidrs'] = request.cidrs;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCidrToConnectionPool',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCidrToConnectionPool(request: AddCidrToConnectionPoolRequest): AddCidrToConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCidrToConnectionPoolWithOptions(request, runtime);
}

model AddIoTCloudConnectorToGroupRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  ioTCloudConnectorId?: [ string ](name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model AddIoTCloudConnectorToGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddIoTCloudConnectorToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddIoTCloudConnectorToGroupResponseBody(name='body'),
}

async function addIoTCloudConnectorToGroupWithOptions(request: AddIoTCloudConnectorToGroupRequest, runtime: Util.RuntimeOptions): AddIoTCloudConnectorToGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddIoTCloudConnectorToGroup',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addIoTCloudConnectorToGroup(request: AddIoTCloudConnectorToGroupRequest): AddIoTCloudConnectorToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIoTCloudConnectorToGroupWithOptions(request, runtime);
}

model AssociateIpWithConnectionPoolRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ips?: [ string ](name='Ips'),
  ipsFilePath?: string(name='IpsFilePath'),
  regionId?: string(name='RegionId'),
}

model AssociateIpWithConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateIpWithConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateIpWithConnectionPoolResponseBody(name='body'),
}

async function associateIpWithConnectionPoolWithOptions(request: AssociateIpWithConnectionPoolRequest, runtime: Util.RuntimeOptions): AssociateIpWithConnectionPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.ips)) {
    query['Ips'] = request.ips;
  }
  if (!Util.isUnset(request.ipsFilePath)) {
    query['IpsFilePath'] = request.ipsFilePath;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateIpWithConnectionPool',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateIpWithConnectionPool(request: AssociateIpWithConnectionPoolRequest): AssociateIpWithConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateIpWithConnectionPoolWithOptions(request, runtime);
}

model AssociateVSwitchWithIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  vSwitchList?: [ string ](name='VSwitchList'),
  vpcId?: string(name='VpcId'),
}

model AssociateVSwitchWithIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateVSwitchWithIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateVSwitchWithIoTCloudConnectorResponseBody(name='body'),
}

async function associateVSwitchWithIoTCloudConnectorWithOptions(request: AssociateVSwitchWithIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): AssociateVSwitchWithIoTCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchList)) {
    query['VSwitchList'] = request.vSwitchList;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateVSwitchWithIoTCloudConnector',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateVSwitchWithIoTCloudConnector(request: AssociateVSwitchWithIoTCloudConnectorRequest): AssociateVSwitchWithIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateVSwitchWithIoTCloudConnectorWithOptions(request, runtime);
}

model CreateAuthorizationRuleRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  policy?: string(name='Policy'),
  regionId?: string(name='RegionId'),
  sourceCidrs?: [ string ](name='SourceCidrs'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRuleWithOptions(request: CreateAuthorizationRuleRequest, runtime: Util.RuntimeOptions): CreateAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleDescription)) {
    query['AuthorizationRuleDescription'] = request.authorizationRuleDescription;
  }
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceCidrs)) {
    query['SourceCidrs'] = request.sourceCidrs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAuthorizationRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthorizationRuleWithOptions(request, runtime);
}

model CreateConnectionPoolRequest {
  cidrs?: [ string ](name='Cidrs'),
  clientToken?: string(name='ClientToken'),
  connectionPoolDescription?: string(name='ConnectionPoolDescription'),
  connectionPoolName?: string(name='ConnectionPoolName'),
  count?: long(name='Count'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model CreateConnectionPoolResponseBody = {
  connectionPoolId?: string(name='ConnectionPoolId'),
  requestId?: string(name='RequestId'),
}

model CreateConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConnectionPoolResponseBody(name='body'),
}

async function createConnectionPoolWithOptions(request: CreateConnectionPoolRequest, runtime: Util.RuntimeOptions): CreateConnectionPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrs)) {
    query['Cidrs'] = request.cidrs;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolDescription)) {
    query['ConnectionPoolDescription'] = request.connectionPoolDescription;
  }
  if (!Util.isUnset(request.connectionPoolName)) {
    query['ConnectionPoolName'] = request.connectionPoolName;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnectionPool',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConnectionPool(request: CreateConnectionPoolRequest): CreateConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionPoolWithOptions(request, runtime);
}

model CreateDNSServiceRuleRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  clientToken?: string(name='ClientToken'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName'),
  destination?: string(name='Destination'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceType?: string(name='ServiceType'),
  source?: string(name='Source'),
}

model CreateDNSServiceRuleResponseBody = {
  DNSServiceRuleId?: string(name='DNSServiceRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDNSServiceRuleResponseBody(name='body'),
}

async function createDNSServiceRuleWithOptions(request: CreateDNSServiceRuleRequest, runtime: Util.RuntimeOptions): CreateDNSServiceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleDescription)) {
    query['AuthorizationRuleDescription'] = request.authorizationRuleDescription;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DNSServiceRuleName)) {
    query['DNSServiceRuleName'] = request.DNSServiceRuleName;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDNSServiceRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDNSServiceRule(request: CreateDNSServiceRuleRequest): CreateDNSServiceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDNSServiceRuleWithOptions(request, runtime);
}

model CreateGroupAuthorizationRuleRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  policy?: string(name='Policy'),
  regionId?: string(name='RegionId'),
  sourceCidrs?: [ string ](name='SourceCidrs'),
}

model CreateGroupAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupAuthorizationRuleResponseBody(name='body'),
}

async function createGroupAuthorizationRuleWithOptions(request: CreateGroupAuthorizationRuleRequest, runtime: Util.RuntimeOptions): CreateGroupAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleDescription)) {
    query['AuthorizationRuleDescription'] = request.authorizationRuleDescription;
  }
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceCidrs)) {
    query['SourceCidrs'] = request.sourceCidrs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroupAuthorizationRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGroupAuthorizationRule(request: CreateGroupAuthorizationRuleRequest): CreateGroupAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupAuthorizationRuleWithOptions(request, runtime);
}

model CreateGroupDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName'),
  destination?: string(name='Destination'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  regionId?: string(name='RegionId'),
  serviceType?: string(name='ServiceType'),
  source?: string(name='Source'),
}

model CreateGroupDNSServiceRuleResponseBody = {
  DNSServiceRuleId?: string(name='DNSServiceRuleId'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateGroupDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupDNSServiceRuleResponseBody(name='body'),
}

async function createGroupDNSServiceRuleWithOptions(request: CreateGroupDNSServiceRuleRequest, runtime: Util.RuntimeOptions): CreateGroupDNSServiceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DNSServiceRuleDescription)) {
    query['DNSServiceRuleDescription'] = request.DNSServiceRuleDescription;
  }
  if (!Util.isUnset(request.DNSServiceRuleName)) {
    query['DNSServiceRuleName'] = request.DNSServiceRuleName;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroupDNSServiceRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGroupDNSServiceRule(request: CreateGroupDNSServiceRuleRequest): CreateGroupDNSServiceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupDNSServiceRuleWithOptions(request, runtime);
}

model CreateIoTCloudConnectorRequest {
  APN?: string(name='APN'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ISP?: string(name='ISP'),
  ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
  ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
  regionId?: string(name='RegionId'),
  resourceUid?: long(name='ResourceUid'),
  wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled'),
}

model CreateIoTCloudConnectorResponseBody = {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  requestId?: string(name='RequestId'),
}

model CreateIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorResponseBody(name='body'),
}

async function createIoTCloudConnectorWithOptions(request: CreateIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): CreateIoTCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.APN)) {
    query['APN'] = request.APN;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.ioTCloudConnectorDescription)) {
    query['IoTCloudConnectorDescription'] = request.ioTCloudConnectorDescription;
  }
  if (!Util.isUnset(request.ioTCloudConnectorName)) {
    query['IoTCloudConnectorName'] = request.ioTCloudConnectorName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceUid)) {
    query['ResourceUid'] = request.resourceUid;
  }
  if (!Util.isUnset(request.wildcardDomainEnabled)) {
    query['WildcardDomainEnabled'] = request.wildcardDomainEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIoTCloudConnector',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIoTCloudConnector(request: CreateIoTCloudConnectorRequest): CreateIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIoTCloudConnectorWithOptions(request, runtime);
}

model CreateIoTCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
}

model CreateIoTCloudConnectorGroupResponseBody = {
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateIoTCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorGroupResponseBody(name='body'),
}

async function createIoTCloudConnectorGroupWithOptions(request: CreateIoTCloudConnectorGroupRequest, runtime: Util.RuntimeOptions): CreateIoTCloudConnectorGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIoTCloudConnectorGroup',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIoTCloudConnectorGroup(request: CreateIoTCloudConnectorGroupRequest): CreateIoTCloudConnectorGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIoTCloudConnectorGroupWithOptions(request, runtime);
}

model CreateServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceName?: string(name='ServiceName'),
}

model CreateServiceResponseBody = {
  requestId?: string(name='RequestId'),
  serviceId?: string(name='ServiceId'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createServiceWithOptions(request: CreateServiceRequest, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceDescription)) {
    query['ServiceDescription'] = request.serviceDescription;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateService',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWithOptions(request, runtime);
}

model CreateServiceEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceEntryDescription?: string(name='ServiceEntryDescription'),
  serviceEntryName?: string(name='ServiceEntryName'),
  serviceId?: string(name='ServiceId'),
  target?: string(name='Target'),
  targetType?: string(name='TargetType'),
}

model CreateServiceEntryResponseBody = {
  requestId?: string(name='RequestId'),
  serviceEntryId?: string(name='ServiceEntryId'),
}

model CreateServiceEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceEntryResponseBody(name='body'),
}

async function createServiceEntryWithOptions(request: CreateServiceEntryRequest, runtime: Util.RuntimeOptions): CreateServiceEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceEntryDescription)) {
    query['ServiceEntryDescription'] = request.serviceEntryDescription;
  }
  if (!Util.isUnset(request.serviceEntryName)) {
    query['ServiceEntryName'] = request.serviceEntryName;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceEntry',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceEntry(request: CreateServiceEntryRequest): CreateServiceEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceEntryWithOptions(request, runtime);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRuleWithOptions(request: DeleteAuthorizationRuleRequest, runtime: Util.RuntimeOptions): DeleteAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAuthorizationRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAuthorizationRuleWithOptions(request, runtime);
}

model DeleteConnectionPoolRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConnectionPoolResponseBody(name='body'),
}

async function deleteConnectionPoolWithOptions(request: DeleteConnectionPoolRequest, runtime: Util.RuntimeOptions): DeleteConnectionPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnectionPool',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConnectionPool(request: DeleteConnectionPoolRequest): DeleteConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionPoolWithOptions(request, runtime);
}

model DeleteDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken'),
  DNSServiceRuleId?: string(name='DNSServiceRuleId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteDNSServiceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDNSServiceRuleResponseBody(name='body'),
}

async function deleteDNSServiceRuleWithOptions(request: DeleteDNSServiceRuleRequest, runtime: Util.RuntimeOptions): DeleteDNSServiceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DNSServiceRuleId)) {
    query['DNSServiceRuleId'] = request.DNSServiceRuleId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDNSServiceRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDNSServiceRule(request: DeleteDNSServiceRuleRequest): DeleteDNSServiceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDNSServiceRuleWithOptions(request, runtime);
}

model DeleteGroupAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteGroupAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupAuthorizationRuleResponseBody(name='body'),
}

async function deleteGroupAuthorizationRuleWithOptions(request: DeleteGroupAuthorizationRuleRequest, runtime: Util.RuntimeOptions): DeleteGroupAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroupAuthorizationRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGroupAuthorizationRule(request: DeleteGroupAuthorizationRuleRequest): DeleteGroupAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupAuthorizationRuleWithOptions(request, runtime);
}

model DeleteGroupDNSServiceRuleRequest {
  clientToken?: string(name='ClientToken'),
  DNSServiceRuleId?: string(name='DNSServiceRuleId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteGroupDNSServiceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupDNSServiceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupDNSServiceRuleResponseBody(name='body'),
}

async function deleteGroupDNSServiceRuleWithOptions(request: DeleteGroupDNSServiceRuleRequest, runtime: Util.RuntimeOptions): DeleteGroupDNSServiceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DNSServiceRuleId)) {
    query['DNSServiceRuleId'] = request.DNSServiceRuleId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroupDNSServiceRule',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGroupDNSServiceRule(request: DeleteGroupDNSServiceRuleRequest): DeleteGroupDNSServiceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupDNSServiceRuleWithOptions(request, runtime);
}

model DeleteIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DeleteIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnectorResponseBody(name='body'),
}

async function deleteIoTCloudConnectorWithOptions(request: DeleteIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): DeleteIoTCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIoTCloudConnector',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIoTCloudConnector(request: DeleteIoTCloudConnectorRequest): DeleteIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIoTCloudConnectorWithOptions(request, runtime);
}

model DeleteIoTCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteIoTCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIoTCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnectorGroupResponseBody(name='body'),
}

async function deleteIoTCloudConnectorGroupWithOptions(request: DeleteIoTCloudConnectorGroupRequest, runtime: Util.RuntimeOptions): DeleteIoTCloudConnectorGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIoTCloudConnectorGroup',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIoTCloudConnectorGroup(request: DeleteIoTCloudConnectorGroupRequest): DeleteIoTCloudConnectorGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIoTCloudConnectorGroupWithOptions(request, runtime);
}

model DeleteServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteService',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceWithOptions(request, runtime);
}

model DeleteServiceEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceEntryId?: string(name='ServiceEntryId'),
  serviceId?: string(name='ServiceId'),
}

model DeleteServiceEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceEntryResponseBody(name='body'),
}

async function deleteServiceEntryWithOptions(request: DeleteServiceEntryRequest, runtime: Util.RuntimeOptions): DeleteServiceEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceEntryId)) {
    query['ServiceEntryId'] = request.serviceEntryId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServiceEntry',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteServiceEntry(request: DeleteServiceEntryRequest): DeleteServiceEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceEntryWithOptions(request, runtime);
}

model DisableIoTCloudConnectorAccessLogRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DisableIoTCloudConnectorAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DisableIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function disableIoTCloudConnectorAccessLogWithOptions(request: DisableIoTCloudConnectorAccessLogRequest, runtime: Util.RuntimeOptions): DisableIoTCloudConnectorAccessLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableIoTCloudConnectorAccessLog',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableIoTCloudConnectorAccessLog(request: DisableIoTCloudConnectorAccessLogRequest): DisableIoTCloudConnectorAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableIoTCloudConnectorAccessLogWithOptions(request, runtime);
}

model DissociateIpFromConnectionPoolRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ips?: [ string ](name='Ips'),
  ipsFilePath?: string(name='IpsFilePath'),
  regionId?: string(name='RegionId'),
}

model DissociateIpFromConnectionPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateIpFromConnectionPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateIpFromConnectionPoolResponseBody(name='body'),
}

async function dissociateIpFromConnectionPoolWithOptions(request: DissociateIpFromConnectionPoolRequest, runtime: Util.RuntimeOptions): DissociateIpFromConnectionPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.ips)) {
    query['Ips'] = request.ips;
  }
  if (!Util.isUnset(request.ipsFilePath)) {
    query['IpsFilePath'] = request.ipsFilePath;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateIpFromConnectionPool',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateIpFromConnectionPool(request: DissociateIpFromConnectionPoolRequest): DissociateIpFromConnectionPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateIpFromConnectionPoolWithOptions(request, runtime);
}

model DissociateVSwitchFromIoTCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model DissociateVSwitchFromIoTCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateVSwitchFromIoTCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateVSwitchFromIoTCloudConnectorResponseBody(name='body'),
}

async function dissociateVSwitchFromIoTCloudConnectorWithOptions(request: DissociateVSwitchFromIoTCloudConnectorRequest, runtime: Util.RuntimeOptions): DissociateVSwitchFromIoTCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateVSwitchFromIoTCloudConnector',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateVSwitchFromIoTCloudConnector(request: DissociateVSwitchFromIoTCloudConnectorRequest): DissociateVSwitchFromIoTCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateVSwitchFromIoTCloudConnectorWithOptions(request, runtime);
}

model EnableIoTCloudConnectorAccessLogRequest {
  accessLogSlsLogStore?: string(name='AccessLogSlsLogStore'),
  accessLogSlsProject?: string(name='AccessLogSlsProject'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model EnableIoTCloudConnectorAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: EnableIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function enableIoTCloudConnectorAccessLogWithOptions(request: EnableIoTCloudConnectorAccessLogRequest, runtime: Util.RuntimeOptions): EnableIoTCloudConnectorAccessLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessLogSlsLogStore)) {
    query['AccessLogSlsLogStore'] = request.accessLogSlsLogStore;
  }
  if (!Util.isUnset(request.accessLogSlsProject)) {
    query['AccessLogSlsProject'] = request.accessLogSlsProject;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableIoTCloudConnectorAccessLog',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableIoTCloudConnectorAccessLog(request: EnableIoTCloudConnectorAccessLogRequest): EnableIoTCloudConnectorAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableIoTCloudConnectorAccessLogWithOptions(request, runtime);
}

model GetConnectionPoolIpOperationResultRequest {
  connectionPoolId?: string(name='ConnectionPoolId'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  queryRequestId?: string(name='QueryRequestId'),
  regionId?: string(name='RegionId'),
}

model GetConnectionPoolIpOperationResultResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  resultFilePaths?: [ string ](name='ResultFilePaths', description='OssPath'),
}

model GetConnectionPoolIpOperationResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectionPoolIpOperationResultResponseBody(name='body'),
}

async function getConnectionPoolIpOperationResultWithOptions(request: GetConnectionPoolIpOperationResultRequest, runtime: Util.RuntimeOptions): GetConnectionPoolIpOperationResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.queryRequestId)) {
    query['QueryRequestId'] = request.queryRequestId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConnectionPoolIpOperationResult',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConnectionPoolIpOperationResult(request: GetConnectionPoolIpOperationResultRequest): GetConnectionPoolIpOperationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionPoolIpOperationResultWithOptions(request, runtime);
}

model GetDiagnoseResultForSingleCardRequest {
  diagnoseTaskId?: string(name='DiagnoseTaskId'),
  regionId?: string(name='RegionId'),
}

model GetDiagnoseResultForSingleCardResponseBody = {
  beginTime?: long(name='BeginTime'),
  cardIp?: string(name='CardIp'),
  destination?: string(name='Destination'),
  diagnoseItem?: [ 
    {
      part?: string(name='Part'),
      status?: string(name='Status'),
    }
  ](name='DiagnoseItem'),
  endTime?: long(name='EndTime'),
  errorResult?: [ 
    {
      errorDesc?: string(name='ErrorDesc'),
      errorLevel?: string(name='ErrorLevel'),
      errorPart?: string(name='ErrorPart'),
      errorSuggestion?: string(name='ErrorSuggestion'),
    }
  ](name='ErrorResult'),
  iccId?: string(name='IccId'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDiagnoseResultForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnoseResultForSingleCardResponseBody(name='body'),
}

async function getDiagnoseResultForSingleCardWithOptions(request: GetDiagnoseResultForSingleCardRequest, runtime: Util.RuntimeOptions): GetDiagnoseResultForSingleCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diagnoseTaskId)) {
    query['DiagnoseTaskId'] = request.diagnoseTaskId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiagnoseResultForSingleCard',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiagnoseResultForSingleCard(request: GetDiagnoseResultForSingleCardRequest): GetDiagnoseResultForSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiagnoseResultForSingleCardWithOptions(request, runtime);
}

model GetIoTCloudConnectorAccessLogRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model GetIoTCloudConnectorAccessLogResponseBody = {
  accessLogSlsLogStore?: string(name='AccessLogSlsLogStore'),
  accessLogSlsProject?: string(name='AccessLogSlsProject'),
  accessLogStatus?: string(name='AccessLogStatus'),
  requestId?: string(name='RequestId'),
}

model GetIoTCloudConnectorAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetIoTCloudConnectorAccessLogResponseBody(name='body'),
}

async function getIoTCloudConnectorAccessLogWithOptions(request: GetIoTCloudConnectorAccessLogRequest, runtime: Util.RuntimeOptions): GetIoTCloudConnectorAccessLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIoTCloudConnectorAccessLog',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIoTCloudConnectorAccessLog(request: GetIoTCloudConnectorAccessLogRequest): GetIoTCloudConnectorAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIoTCloudConnectorAccessLogWithOptions(request, runtime);
}

model GetStsInfoAndOssPathRequest {
  clientToken?: string(name='ClientToken'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  dryRun?: boolean(name='DryRun'),
  fileName?: string(name='FileName'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model GetStsInfoAndOssPathResponseBody = {
  accessKeyId?: string(name='AccessKeyId', description='Sts info of accessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret', description='Sts info of accessKeySecret'),
  expiration?: string(name='Expiration', description='Sts info expiration time'),
  ossPath?: string(name='OssPath', description='OssPath'),
  requestId?: string(name='RequestId', description='Id of the request'),
  securityToken?: string(name='SecurityToken', description='Sts info of securityToken'),
}

model GetStsInfoAndOssPathResponse = {
  headers: map[string]string(name='headers'),
  body: GetStsInfoAndOssPathResponseBody(name='body'),
}

async function getStsInfoAndOssPathWithOptions(request: GetStsInfoAndOssPathRequest, runtime: Util.RuntimeOptions): GetStsInfoAndOssPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStsInfoAndOssPath',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStsInfoAndOssPath(request: GetStsInfoAndOssPathRequest): GetStsInfoAndOssPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStsInfoAndOssPathWithOptions(request, runtime);
}

model GrantVirtualBorderRouterRequest {
  regionId?: string(name='RegionId'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId'),
}

model GrantVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GrantVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: GrantVirtualBorderRouterResponseBody(name='body'),
}

async function grantVirtualBorderRouterWithOptions(request: GrantVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): GrantVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualBorderRouterId)) {
    query['VirtualBorderRouterId'] = request.virtualBorderRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantVirtualBorderRouter',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantVirtualBorderRouter(request: GrantVirtualBorderRouterRequest): GrantVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantVirtualBorderRouterWithOptions(request, runtime);
}

model ListAPNsRequest {
  APN?: string(name='APN'),
  ISP?: string(name='ISP'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListAPNsResponseBody = {
  APNs?: [ 
    {
      APN?: string(name='APN'),
      description?: string(name='Description'),
      featureList?: [ string ](name='FeatureList'),
      ISP?: string(name='ISP'),
      name?: string(name='Name'),
      zoneList?: [ string ](name='ZoneList'),
    }
  ](name='APNs'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAPNsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAPNsResponseBody(name='body'),
}

async function listAPNsWithOptions(request: ListAPNsRequest, runtime: Util.RuntimeOptions): ListAPNsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.APN)) {
    query['APN'] = request.APN;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAPNs',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAPNs(request: ListAPNsRequest): ListAPNsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAPNsWithOptions(request, runtime);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds'),
  authorizationRuleName?: [ string ](name='AuthorizationRuleName'),
  authorizationRuleStatus?: [ string ](name='AuthorizationRuleStatus'),
  destination?: [ string ](name='Destination'),
  destinationType?: [ string ](name='DestinationType'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  policy?: [ string ](name='Policy'),
  regionId?: string(name='RegionId'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
      authorizationRuleId?: string(name='AuthorizationRuleId'),
      authorizationRuleName?: string(name='AuthorizationRuleName'),
      authorizationRuleStatus?: string(name='AuthorizationRuleStatus'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      policy?: string(name='Policy'),
      sourceCidrs?: [ string ](name='SourceCidrs'),
    }
  ](name='AuthorizationRules'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRulesWithOptions(request: ListAuthorizationRulesRequest, runtime: Util.RuntimeOptions): ListAuthorizationRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleIds)) {
    query['AuthorizationRuleIds'] = request.authorizationRuleIds;
  }
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.authorizationRuleStatus)) {
    query['AuthorizationRuleStatus'] = request.authorizationRuleStatus;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthorizationRules',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizationRulesWithOptions(request, runtime);
}

model ListConnectionPoolAllIpsRequest {
  connectionPoolId?: string(name='ConnectionPoolId'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ip?: string(name='Ip'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
}

model ListConnectionPoolAllIpsResponseBody = {
  connectionPoolIps?: [ 
    {
      connectionPoolId?: string(name='ConnectionPoolId'),
      ip?: string(name='Ip'),
      ipNum?: long(name='IpNum'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='ConnectionPoolIps'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalIpsCount?: int32(name='TotalIpsCount'),
}

model ListConnectionPoolAllIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolAllIpsResponseBody(name='body'),
}

async function listConnectionPoolAllIpsWithOptions(request: ListConnectionPoolAllIpsRequest, runtime: Util.RuntimeOptions): ListConnectionPoolAllIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnectionPoolAllIps',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnectionPoolAllIps(request: ListConnectionPoolAllIpsRequest): ListConnectionPoolAllIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionPoolAllIpsWithOptions(request, runtime);
}

model ListConnectionPoolIpsRequest {
  connectionPoolId?: string(name='ConnectionPoolId'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ip?: string(name='Ip'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListConnectionPoolIpsResponseBody = {
  connectionPoolIps?: [ 
    {
      connectionPoolId?: string(name='ConnectionPoolId'),
      ip?: string(name='Ip'),
      status?: string(name='Status'),
    }
  ](name='ConnectionPoolIps'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListConnectionPoolIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolIpsResponseBody(name='body'),
}

async function listConnectionPoolIpsWithOptions(request: ListConnectionPoolIpsRequest, runtime: Util.RuntimeOptions): ListConnectionPoolIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnectionPoolIps',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnectionPoolIps(request: ListConnectionPoolIpsRequest): ListConnectionPoolIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionPoolIpsWithOptions(request, runtime);
}

model ListConnectionPoolsRequest {
  connectionPoolIds?: [ string ](name='ConnectionPoolIds'),
  connectionPoolName?: [ string ](name='ConnectionPoolName'),
  connectionPoolStatus?: [ string ](name='ConnectionPoolStatus'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListConnectionPoolsResponseBody = {
  connectionPools?: [ 
    {
      cidrs?: [ string ](name='Cidrs'),
      connectionPoolDescription?: string(name='ConnectionPoolDescription'),
      connectionPoolId?: string(name='ConnectionPoolId'),
      connectionPoolName?: string(name='ConnectionPoolName'),
      connectionPoolStatus?: string(name='ConnectionPoolStatus'),
      operateResultRequestID?: string(name='OperateResultRequestID'),
    }
  ](name='ConnectionPools'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListConnectionPoolsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoolsResponseBody(name='body'),
}

async function listConnectionPoolsWithOptions(request: ListConnectionPoolsRequest, runtime: Util.RuntimeOptions): ListConnectionPoolsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionPoolIds)) {
    query['ConnectionPoolIds'] = request.connectionPoolIds;
  }
  if (!Util.isUnset(request.connectionPoolName)) {
    query['ConnectionPoolName'] = request.connectionPoolName;
  }
  if (!Util.isUnset(request.connectionPoolStatus)) {
    query['ConnectionPoolStatus'] = request.connectionPoolStatus;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnectionPools',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnectionPools(request: ListConnectionPoolsRequest): ListConnectionPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionPoolsWithOptions(request, runtime);
}

model ListDNSServiceRulesRequest {
  DNSServiceRuleIds?: [ string ](name='DNSServiceRuleIds'),
  DNSServiceRuleName?: [ string ](name='DNSServiceRuleName'),
  DNSServiceRuleStatus?: [ string ](name='DNSServiceRuleStatus'),
  destination?: [ string ](name='Destination'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceType?: string(name='ServiceType'),
  source?: [ string ](name='Source'),
}

model ListDNSServiceRulesResponseBody = {
  DNSServiceRules?: [ 
    {
      DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription'),
      DNSServiceRuleId?: string(name='DNSServiceRuleId'),
      DNSServiceRuleName?: string(name='DNSServiceRuleName'),
      DNSServiceRuleStatus?: string(name='DNSServiceRuleStatus'),
      destination?: string(name='Destination'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      serviceType?: string(name='ServiceType'),
      source?: string(name='Source'),
    }
  ](name='DNSServiceRules'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDNSServiceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDNSServiceRulesResponseBody(name='body'),
}

async function listDNSServiceRulesWithOptions(request: ListDNSServiceRulesRequest, runtime: Util.RuntimeOptions): ListDNSServiceRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DNSServiceRuleIds)) {
    query['DNSServiceRuleIds'] = request.DNSServiceRuleIds;
  }
  if (!Util.isUnset(request.DNSServiceRuleName)) {
    query['DNSServiceRuleName'] = request.DNSServiceRuleName;
  }
  if (!Util.isUnset(request.DNSServiceRuleStatus)) {
    query['DNSServiceRuleStatus'] = request.DNSServiceRuleStatus;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDNSServiceRules',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDNSServiceRules(request: ListDNSServiceRulesRequest): ListDNSServiceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDNSServiceRulesWithOptions(request, runtime);
}

model ListDiagnoseInfoForSingleCardRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
}

model ListDiagnoseInfoForSingleCardResponseBody = {
  diagnoseInfo?: [ 
    {
      beginTime?: long(name='BeginTime'),
      cardIp?: string(name='CardIp'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      diagnoseTime?: long(name='DiagnoseTime'),
      endTime?: long(name='EndTime'),
      iccId?: string(name='IccId'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      source?: string(name='Source'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='DiagnoseInfo'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDiagnoseInfoForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: ListDiagnoseInfoForSingleCardResponseBody(name='body'),
}

async function listDiagnoseInfoForSingleCardWithOptions(request: ListDiagnoseInfoForSingleCardRequest, runtime: Util.RuntimeOptions): ListDiagnoseInfoForSingleCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDiagnoseInfoForSingleCard',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDiagnoseInfoForSingleCard(request: ListDiagnoseInfoForSingleCardRequest): ListDiagnoseInfoForSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDiagnoseInfoForSingleCardWithOptions(request, runtime);
}

model ListGroupAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds'),
  authorizationRuleName?: [ string ](name='AuthorizationRuleName'),
  authorizationRuleStatus?: [ string ](name='AuthorizationRuleStatus'),
  destination?: [ string ](name='Destination'),
  destinationType?: [ string ](name='DestinationType'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  policy?: [ string ](name='Policy'),
  regionId?: string(name='RegionId'),
}

model ListGroupAuthorizationRulesResponseBody = {
  groupAuthorizationRules?: [ 
    {
      authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
      authorizationRuleId?: string(name='AuthorizationRuleId'),
      authorizationRuleName?: string(name='AuthorizationRuleName'),
      authorizationRuleStatus?: string(name='AuthorizationRuleStatus'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
      policy?: string(name='Policy'),
      sourceCidrs?: [ string ](name='SourceCidrs'),
    }
  ](name='GroupAuthorizationRules'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListGroupAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupAuthorizationRulesResponseBody(name='body'),
}

async function listGroupAuthorizationRulesWithOptions(request: ListGroupAuthorizationRulesRequest, runtime: Util.RuntimeOptions): ListGroupAuthorizationRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleIds)) {
    query['AuthorizationRuleIds'] = request.authorizationRuleIds;
  }
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.authorizationRuleStatus)) {
    query['AuthorizationRuleStatus'] = request.authorizationRuleStatus;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGroupAuthorizationRules',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGroupAuthorizationRules(request: ListGroupAuthorizationRulesRequest): ListGroupAuthorizationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupAuthorizationRulesWithOptions(request, runtime);
}

model ListGroupDNSServiceRulesRequest {
  DNSServiceRuleIds?: [ string ](name='DNSServiceRuleIds'),
  DNSServiceRuleName?: [ string ](name='DNSServiceRuleName'),
  DNSServiceRuleStatus?: [ string ](name='DNSServiceRuleStatus'),
  destination?: [ string ](name='Destination'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceType?: string(name='ServiceType'),
  source?: [ string ](name='Source'),
}

model ListGroupDNSServiceRulesResponseBody = {
  DNSServiceRules?: [ 
    {
      DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription'),
      DNSServiceRuleId?: string(name='DNSServiceRuleId'),
      DNSServiceRuleName?: string(name='DNSServiceRuleName'),
      DNSServiceRuleStatus?: string(name='DNSServiceRuleStatus'),
      destination?: string(name='Destination'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
      serviceType?: string(name='ServiceType'),
      source?: string(name='Source'),
    }
  ](name='DNSServiceRules'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListGroupDNSServiceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupDNSServiceRulesResponseBody(name='body'),
}

async function listGroupDNSServiceRulesWithOptions(request: ListGroupDNSServiceRulesRequest, runtime: Util.RuntimeOptions): ListGroupDNSServiceRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DNSServiceRuleIds)) {
    query['DNSServiceRuleIds'] = request.DNSServiceRuleIds;
  }
  if (!Util.isUnset(request.DNSServiceRuleName)) {
    query['DNSServiceRuleName'] = request.DNSServiceRuleName;
  }
  if (!Util.isUnset(request.DNSServiceRuleStatus)) {
    query['DNSServiceRuleStatus'] = request.DNSServiceRuleStatus;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGroupDNSServiceRules',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGroupDNSServiceRules(request: ListGroupDNSServiceRulesRequest): ListGroupDNSServiceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupDNSServiceRulesWithOptions(request, runtime);
}

model ListIoTCloudConnectorAvailableZonesRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model ListIoTCloudConnectorAvailableZonesResponseBody = {
  availableZoneList?: [ string ](name='AvailableZoneList'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  requestId?: string(name='RequestId'),
}

model ListIoTCloudConnectorAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorAvailableZonesResponseBody(name='body'),
}

async function listIoTCloudConnectorAvailableZonesWithOptions(request: ListIoTCloudConnectorAvailableZonesRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorAvailableZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIoTCloudConnectorAvailableZones',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIoTCloudConnectorAvailableZones(request: ListIoTCloudConnectorAvailableZonesRequest): ListIoTCloudConnectorAvailableZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorAvailableZonesWithOptions(request, runtime);
}

model ListIoTCloudConnectorGroupsRequest {
  ioTCloudConnectorGroupIds?: [ string ](name='IoTCloudConnectorGroupIds'),
  ioTCloudConnectorGroupName?: [ string ](name='IoTCloudConnectorGroupName'),
  ioTCloudConnectorGroupStatus?: [ string ](name='IoTCloudConnectorGroupStatus'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListIoTCloudConnectorGroupsResponseBody = {
  ioTCloudConnectorGroups?: [ 
    {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
      ioTCloudConnectorGroupStatus?: string(name='IoTCloudConnectorGroupStatus'),
      ioTCloudConnectors?: [ 
        {
          APN?: string(name='APN'),
          createTime?: long(name='CreateTime'),
          ISP?: string(name='ISP'),
          ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
          ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
          ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
          ioTCloudConnectorStatus?: string(name='IoTCloudConnectorStatus'),
        }
      ](name='IoTCloudConnectors'),
      name?: string(name='Name'),
    }
  ](name='IoTCloudConnectorGroups'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListIoTCloudConnectorGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorGroupsResponseBody(name='body'),
}

async function listIoTCloudConnectorGroupsWithOptions(request: ListIoTCloudConnectorGroupsRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ioTCloudConnectorGroupIds)) {
    query['IoTCloudConnectorGroupIds'] = request.ioTCloudConnectorGroupIds;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupName)) {
    query['IoTCloudConnectorGroupName'] = request.ioTCloudConnectorGroupName;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupStatus)) {
    query['IoTCloudConnectorGroupStatus'] = request.ioTCloudConnectorGroupStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIoTCloudConnectorGroups',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIoTCloudConnectorGroups(request: ListIoTCloudConnectorGroupsRequest): ListIoTCloudConnectorGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorGroupsWithOptions(request, runtime);
}

model ListIoTCloudConnectorsRequest {
  APN?: [ string ](name='APN'),
  ISP?: [ string ](name='ISP'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  ioTCloudConnectorIds?: [ string ](name='IoTCloudConnectorIds'),
  ioTCloudConnectorName?: [ string ](name='IoTCloudConnectorName'),
  ioTCloudConnectorStatus?: [ string ](name='IoTCloudConnectorStatus'),
  isInGroup?: boolean(name='IsInGroup'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  vpcId?: [ string ](name='VpcId'),
}

model ListIoTCloudConnectorsResponseBody = {
  ioTCloudConnectors?: [ 
    {
      APN?: string(name='APN'),
      createTime?: long(name='CreateTime'),
      ISP?: string(name='ISP'),
      ioTCloudConnectorBusinessStatus?: string(name='IoTCloudConnectorBusinessStatus'),
      ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
      ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
      ioTCloudConnectorStatus?: string(name='IoTCloudConnectorStatus'),
      modifyTime?: long(name='ModifyTime'),
      rateLimit?: long(name='RateLimit'),
      vSwitchList?: [ string ](name='VSwitchList'),
      vpcId?: string(name='VpcId'),
      wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled'),
    }
  ](name='IoTCloudConnectors'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListIoTCloudConnectorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorsResponseBody(name='body'),
}

async function listIoTCloudConnectorsWithOptions(request: ListIoTCloudConnectorsRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.APN)) {
    query['APN'] = request.APN;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorIds)) {
    query['IoTCloudConnectorIds'] = request.ioTCloudConnectorIds;
  }
  if (!Util.isUnset(request.ioTCloudConnectorName)) {
    query['IoTCloudConnectorName'] = request.ioTCloudConnectorName;
  }
  if (!Util.isUnset(request.ioTCloudConnectorStatus)) {
    query['IoTCloudConnectorStatus'] = request.ioTCloudConnectorStatus;
  }
  if (!Util.isUnset(request.isInGroup)) {
    query['IsInGroup'] = request.isInGroup;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIoTCloudConnectors',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIoTCloudConnectors(request: ListIoTCloudConnectorsRequest): ListIoTCloudConnectorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorsWithOptions(request, runtime);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(request: ListRegionsRequest, runtime: Util.RuntimeOptions): ListRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(request, runtime);
}

model ListServiceRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceStatuses?: [ string ](name='ResourceStatuses'),
  serviceIds?: [ string ](name='ServiceIds'),
  serviceNames?: [ string ](name='ServiceNames'),
}

model ListServiceResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
      serviceDescription?: string(name='ServiceDescription'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      serviceStatus?: string(name='ServiceStatus'),
    }
  ](name='Services'),
  totalCount?: int32(name='TotalCount'),
}

model ListServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceResponseBody(name='body'),
}

async function listServiceWithOptions(request: ListServiceRequest, runtime: Util.RuntimeOptions): ListServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceStatuses)) {
    query['ResourceStatuses'] = request.resourceStatuses;
  }
  if (!Util.isUnset(request.serviceIds)) {
    query['ServiceIds'] = request.serviceIds;
  }
  if (!Util.isUnset(request.serviceNames)) {
    query['ServiceNames'] = request.serviceNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListService',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listService(request: ListServiceRequest): ListServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceWithOptions(request, runtime);
}

model ListServiceEntriesRequest {
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceEntryIds?: [ string ](name='ServiceEntryIds'),
  serviceEntryName?: [ string ](name='ServiceEntryName'),
  serviceEntryStatus?: [ string ](name='ServiceEntryStatus'),
  serviceId?: string(name='ServiceId'),
  target?: [ string ](name='Target'),
  targetType?: [ string ](name='TargetType'),
}

model ListServiceEntriesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  serviceEntries?: [ 
    {
      serviceEntryDescription?: string(name='ServiceEntryDescription'),
      serviceEntryId?: string(name='ServiceEntryId'),
      serviceEntryName?: string(name='ServiceEntryName'),
      serviceEntryStatus?: string(name='ServiceEntryStatus'),
      serviceId?: string(name='ServiceId'),
      target?: string(name='Target'),
      targetType?: string(name='TargetType'),
    }
  ](name='ServiceEntries'),
  totalCount?: int32(name='TotalCount'),
}

model ListServiceEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceEntriesResponseBody(name='body'),
}

async function listServiceEntriesWithOptions(request: ListServiceEntriesRequest, runtime: Util.RuntimeOptions): ListServiceEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceEntryIds)) {
    query['ServiceEntryIds'] = request.serviceEntryIds;
  }
  if (!Util.isUnset(request.serviceEntryName)) {
    query['ServiceEntryName'] = request.serviceEntryName;
  }
  if (!Util.isUnset(request.serviceEntryStatus)) {
    query['ServiceEntryStatus'] = request.serviceEntryStatus;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceEntries',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceEntries(request: ListServiceEntriesRequest): ListServiceEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceEntriesWithOptions(request, runtime);
}

model MoveAuthorizationRuleToDNSServiceRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model MoveAuthorizationRuleToDNSServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveAuthorizationRuleToDNSServiceResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAuthorizationRuleToDNSServiceResponseBody(name='body'),
}

async function moveAuthorizationRuleToDNSServiceWithOptions(request: MoveAuthorizationRuleToDNSServiceRequest, runtime: Util.RuntimeOptions): MoveAuthorizationRuleToDNSServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveAuthorizationRuleToDNSService',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveAuthorizationRuleToDNSService(request: MoveAuthorizationRuleToDNSServiceRequest): MoveAuthorizationRuleToDNSServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveAuthorizationRuleToDNSServiceWithOptions(request, runtime);
}

model MoveGroupAuthorizationRuleToDNSServiceRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  regionId?: string(name='RegionId'),
}

model MoveGroupAuthorizationRuleToDNSServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveGroupAuthorizationRuleToDNSServiceResponse = {
  headers: map[string]string(name='headers'),
  body: MoveGroupAuthorizationRuleToDNSServiceResponseBody(name='body'),
}

async function moveGroupAuthorizationRuleToDNSServiceWithOptions(request: MoveGroupAuthorizationRuleToDNSServiceRequest, runtime: Util.RuntimeOptions): MoveGroupAuthorizationRuleToDNSServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveGroupAuthorizationRuleToDNSService',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveGroupAuthorizationRuleToDNSService(request: MoveGroupAuthorizationRuleToDNSServiceRequest): MoveGroupAuthorizationRuleToDNSServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveGroupAuthorizationRuleToDNSServiceWithOptions(request, runtime);
}

model OpenIoTCloudConnectorServiceRequest {
  regionId?: string(name='RegionId'),
}

model OpenIoTCloudConnectorServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenIoTCloudConnectorServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenIoTCloudConnectorServiceResponseBody(name='body'),
}

async function openIoTCloudConnectorServiceWithOptions(request: OpenIoTCloudConnectorServiceRequest, runtime: Util.RuntimeOptions): OpenIoTCloudConnectorServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenIoTCloudConnectorService',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openIoTCloudConnectorService(request: OpenIoTCloudConnectorServiceRequest): OpenIoTCloudConnectorServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openIoTCloudConnectorServiceWithOptions(request, runtime);
}

model RemoveIoTCloudConnectorFromGroupRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  ioTCloudConnectorId?: [ string ](name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model RemoveIoTCloudConnectorFromGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIoTCloudConnectorFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIoTCloudConnectorFromGroupResponseBody(name='body'),
}

async function removeIoTCloudConnectorFromGroupWithOptions(request: RemoveIoTCloudConnectorFromGroupRequest, runtime: Util.RuntimeOptions): RemoveIoTCloudConnectorFromGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveIoTCloudConnectorFromGroup',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeIoTCloudConnectorFromGroup(request: RemoveIoTCloudConnectorFromGroupRequest): RemoveIoTCloudConnectorFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIoTCloudConnectorFromGroupWithOptions(request, runtime);
}

model SubmitDiagnoseTaskForSingleCardRequest {
  beginTime?: long(name='BeginTime'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  endTime?: long(name='EndTime'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  resourceUid?: long(name='ResourceUid'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
}

model SubmitDiagnoseTaskForSingleCardResponseBody = {
  diagnoseTaskId?: string(name='DiagnoseTaskId'),
  requestId?: string(name='RequestId'),
}

model SubmitDiagnoseTaskForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDiagnoseTaskForSingleCardResponseBody(name='body'),
}

async function submitDiagnoseTaskForSingleCardWithOptions(request: SubmitDiagnoseTaskForSingleCardRequest, runtime: Util.RuntimeOptions): SubmitDiagnoseTaskForSingleCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceUid)) {
    query['ResourceUid'] = request.resourceUid;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDiagnoseTaskForSingleCard',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitDiagnoseTaskForSingleCard(request: SubmitDiagnoseTaskForSingleCardRequest): SubmitDiagnoseTaskForSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDiagnoseTaskForSingleCardWithOptions(request, runtime);
}

model UpdateAuthorizationRuleAttributeRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  policy?: string(name='Policy'),
  regionId?: string(name='RegionId'),
  sourceCidrs?: [ string ](name='SourceCidrs'),
}

model UpdateAuthorizationRuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuthorizationRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthorizationRuleAttributeResponseBody(name='body'),
}

async function updateAuthorizationRuleAttributeWithOptions(request: UpdateAuthorizationRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateAuthorizationRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleDescription)) {
    query['AuthorizationRuleDescription'] = request.authorizationRuleDescription;
  }
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceCidrs)) {
    query['SourceCidrs'] = request.sourceCidrs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAuthorizationRuleAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAuthorizationRuleAttribute(request: UpdateAuthorizationRuleAttributeRequest): UpdateAuthorizationRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthorizationRuleAttributeWithOptions(request, runtime);
}

model UpdateConnectionPoolAttributeRequest {
  cidrs?: [ string ](name='Cidrs'),
  clientToken?: string(name='ClientToken'),
  connectionPoolDescription?: string(name='ConnectionPoolDescription'),
  connectionPoolId?: string(name='ConnectionPoolId'),
  connectionPoolName?: string(name='ConnectionPoolName'),
  count?: long(name='Count'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
}

model UpdateConnectionPoolAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateConnectionPoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConnectionPoolAttributeResponseBody(name='body'),
}

async function updateConnectionPoolAttributeWithOptions(request: UpdateConnectionPoolAttributeRequest, runtime: Util.RuntimeOptions): UpdateConnectionPoolAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrs)) {
    query['Cidrs'] = request.cidrs;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionPoolDescription)) {
    query['ConnectionPoolDescription'] = request.connectionPoolDescription;
  }
  if (!Util.isUnset(request.connectionPoolId)) {
    query['ConnectionPoolId'] = request.connectionPoolId;
  }
  if (!Util.isUnset(request.connectionPoolName)) {
    query['ConnectionPoolName'] = request.connectionPoolName;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnectionPoolAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConnectionPoolAttribute(request: UpdateConnectionPoolAttributeRequest): UpdateConnectionPoolAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionPoolAttributeWithOptions(request, runtime);
}

model UpdateDNSServiceRuleAttributeRequest {
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription'),
  DNSServiceRuleId?: string(name='DNSServiceRuleId'),
  destination?: string(name='Destination'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceType?: string(name='ServiceType'),
  source?: string(name='Source'),
}

model UpdateDNSServiceRuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDNSServiceRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDNSServiceRuleAttributeResponseBody(name='body'),
}

async function updateDNSServiceRuleAttributeWithOptions(request: UpdateDNSServiceRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateDNSServiceRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DNSServiceRuleDescription)) {
    query['DNSServiceRuleDescription'] = request.DNSServiceRuleDescription;
  }
  if (!Util.isUnset(request.DNSServiceRuleId)) {
    query['DNSServiceRuleId'] = request.DNSServiceRuleId;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDNSServiceRuleAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDNSServiceRuleAttribute(request: UpdateDNSServiceRuleAttributeRequest): UpdateDNSServiceRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDNSServiceRuleAttributeWithOptions(request, runtime);
}

model UpdateGroupAuthorizationRuleAttributeRequest {
  authorizationRuleDescription?: string(name='AuthorizationRuleDescription'),
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  authorizationRuleName?: string(name='AuthorizationRuleName'),
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  policy?: string(name='Policy'),
  regionId?: string(name='RegionId'),
  sourceCidrs?: [ string ](name='SourceCidrs'),
}

model UpdateGroupAuthorizationRuleAttributeResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  requestId?: string(name='RequestId'),
}

model UpdateGroupAuthorizationRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupAuthorizationRuleAttributeResponseBody(name='body'),
}

async function updateGroupAuthorizationRuleAttributeWithOptions(request: UpdateGroupAuthorizationRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateGroupAuthorizationRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleDescription)) {
    query['AuthorizationRuleDescription'] = request.authorizationRuleDescription;
  }
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.authorizationRuleName)) {
    query['AuthorizationRuleName'] = request.authorizationRuleName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceCidrs)) {
    query['SourceCidrs'] = request.sourceCidrs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGroupAuthorizationRuleAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGroupAuthorizationRuleAttribute(request: UpdateGroupAuthorizationRuleAttributeRequest): UpdateGroupAuthorizationRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGroupAuthorizationRuleAttributeWithOptions(request, runtime);
}

model UpdateGroupDNSServiceRuleAttributeRequest {
  clientToken?: string(name='ClientToken'),
  DNSServiceRuleDescription?: string(name='DNSServiceRuleDescription'),
  DNSServiceRuleId?: string(name='DNSServiceRuleId'),
  DNSServiceRuleName?: string(name='DNSServiceRuleName'),
  destination?: string(name='Destination'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  regionId?: string(name='RegionId'),
  serviceType?: string(name='ServiceType'),
  source?: string(name='Source'),
}

model UpdateGroupDNSServiceRuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGroupDNSServiceRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupDNSServiceRuleAttributeResponseBody(name='body'),
}

async function updateGroupDNSServiceRuleAttributeWithOptions(request: UpdateGroupDNSServiceRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateGroupDNSServiceRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DNSServiceRuleDescription)) {
    query['DNSServiceRuleDescription'] = request.DNSServiceRuleDescription;
  }
  if (!Util.isUnset(request.DNSServiceRuleId)) {
    query['DNSServiceRuleId'] = request.DNSServiceRuleId;
  }
  if (!Util.isUnset(request.DNSServiceRuleName)) {
    query['DNSServiceRuleName'] = request.DNSServiceRuleName;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGroupDNSServiceRuleAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGroupDNSServiceRuleAttribute(request: UpdateGroupDNSServiceRuleAttributeRequest): UpdateGroupDNSServiceRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGroupDNSServiceRuleAttributeWithOptions(request, runtime);
}

model UpdateIoTCloudConnectorAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorDescription?: string(name='IoTCloudConnectorDescription'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  ioTCloudConnectorName?: string(name='IoTCloudConnectorName'),
  regionId?: string(name='RegionId'),
  wildcardDomainEnabled?: boolean(name='WildcardDomainEnabled'),
}

model UpdateIoTCloudConnectorAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model UpdateIoTCloudConnectorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIoTCloudConnectorAttributeResponseBody(name='body'),
}

async function updateIoTCloudConnectorAttributeWithOptions(request: UpdateIoTCloudConnectorAttributeRequest, runtime: Util.RuntimeOptions): UpdateIoTCloudConnectorAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorDescription)) {
    query['IoTCloudConnectorDescription'] = request.ioTCloudConnectorDescription;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.ioTCloudConnectorName)) {
    query['IoTCloudConnectorName'] = request.ioTCloudConnectorName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.wildcardDomainEnabled)) {
    query['WildcardDomainEnabled'] = request.wildcardDomainEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIoTCloudConnectorAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIoTCloudConnectorAttribute(request: UpdateIoTCloudConnectorAttributeRequest): UpdateIoTCloudConnectorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIoTCloudConnectorAttributeWithOptions(request, runtime);
}

model UpdateIoTCloudConnectorGroupAttributeRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorGroupId?: string(name='IoTCloudConnectorGroupId'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
}

model UpdateIoTCloudConnectorGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateIoTCloudConnectorGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIoTCloudConnectorGroupAttributeResponseBody(name='body'),
}

async function updateIoTCloudConnectorGroupAttributeWithOptions(request: UpdateIoTCloudConnectorGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateIoTCloudConnectorGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorGroupId)) {
    query['IoTCloudConnectorGroupId'] = request.ioTCloudConnectorGroupId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIoTCloudConnectorGroupAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIoTCloudConnectorGroupAttribute(request: UpdateIoTCloudConnectorGroupAttributeRequest): UpdateIoTCloudConnectorGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIoTCloudConnectorGroupAttributeWithOptions(request, runtime);
}

model UpdateServiceAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
}

model UpdateServiceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceAttributeResponseBody(name='body'),
}

async function updateServiceAttributeWithOptions(request: UpdateServiceAttributeRequest, runtime: Util.RuntimeOptions): UpdateServiceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceDescription)) {
    query['ServiceDescription'] = request.serviceDescription;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceAttribute(request: UpdateServiceAttributeRequest): UpdateServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceAttributeWithOptions(request, runtime);
}

model UpdateServiceEntryAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ioTCloudConnectorId?: string(name='IoTCloudConnectorId'),
  regionId?: string(name='RegionId'),
  serviceEntryDescription?: string(name='ServiceEntryDescription'),
  serviceEntryId?: string(name='ServiceEntryId'),
  serviceEntryName?: string(name='ServiceEntryName'),
  serviceId?: string(name='ServiceId'),
}

model UpdateServiceEntryAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateServiceEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceEntryAttributeResponseBody(name='body'),
}

async function updateServiceEntryAttributeWithOptions(request: UpdateServiceEntryAttributeRequest, runtime: Util.RuntimeOptions): UpdateServiceEntryAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ioTCloudConnectorId)) {
    query['IoTCloudConnectorId'] = request.ioTCloudConnectorId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceEntryDescription)) {
    query['ServiceEntryDescription'] = request.serviceEntryDescription;
  }
  if (!Util.isUnset(request.serviceEntryId)) {
    query['ServiceEntryId'] = request.serviceEntryId;
  }
  if (!Util.isUnset(request.serviceEntryName)) {
    query['ServiceEntryName'] = request.serviceEntryName;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceEntryAttribute',
    version = '2021-05-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceEntryAttribute(request: UpdateServiceEntryAttributeRequest): UpdateServiceEntryAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceEntryAttributeWithOptions(request, runtime);
}

