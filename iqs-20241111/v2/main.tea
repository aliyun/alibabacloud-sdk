/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('iqs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AISearchQuery {
  card?: string(name='card'),
  cardQuery?: string(name='cardQuery'),
  page?: int32(name='page'),
  query?: string(name='query'),
  searchEngine?: string(name='searchEngine'),
  searchPlan?: string(name='searchPlan'),
  sessionId?: string(name='sessionId'),
  timeRange?: string(name='timeRange'),
}

model GenericSearchResult {
  pageItems?: [
    ScorePageItem
  ](name='pageItems'),
  queryContext?: QueryContext(name='queryContext'),
  requestId?: string(name='requestId', example='123456'),
  sceneItems?: [
    SceneItem
  ](name='sceneItems'),
  searchInformation?: SearchInformation(name='searchInformation'),
  weiboItems?: [
    WeiboItem
  ](name='weiboItems'),
}

model GetIqsUsageResult {
  records?: [ 
    {
      api?: string(name='api'),
      billingQps?: int32(name='billingQps'),
      date?: string(name='date'),
      engineType?: string(name='engineType'),
      failedCalls?: int32(name='failedCalls'),
      ladderType?: string(name='ladderType'),
      mainAccountId?: string(name='mainAccountId'),
      subAccountId?: string(name='subAccountId'),
      successCalls?: int32(name='successCalls'),
      totalCalls?: int32(name='totalCalls'),
      valueAddedAdvanced?: int32(name='valueAddedAdvanced'),
      valueAddedSummary?: int32(name='valueAddedSummary'),
    }
  ](name='records'),
}

model GlobalPageItem {
  link?: string(name='link', description='This parameter is required.', example='https://baijiahao.baidu.com/s?id=1787881554557805096'),
  snippet?: string(name='snippet', example='100km/h-0制动能力上，仅有33.3m，不黑不吹，单看这个，小米SU7确实表现不错。而续航方面，101kWh电池容量，实现CLTC续航800km，还有现5分钟补能220km，15分钟补能510km的800V高压平台。而在...'),
  title?: string(name='title', description='This parameter is required.', example='小米SU7售价22.99万元起 高管亲自辟谣：发布前不会有价格'),
}

model GlobalQueryContext {
  originalQuery?: {
    page?: string(name='page'),
    query?: string(name='query'),
    timeRange?: string(name='timeRange'),
  }(name='originalQuery'),
}

model GlobalSceneItem {
  detail?: string(name='detail'),
  type?: string(name='type'),
}

model GlobalSearchInformation {
  searchTime?: long(name='searchTime'),
  total?: long(name='total'),
}

model GlobalSearchResult {
  pageItems?: [
    GlobalPageItem
  ](name='pageItems'),
  queryContext?: GlobalQueryContext(name='queryContext'),
  requestId?: string(name='requestId', example='123456'),
  sceneItems?: [
    GlobalSceneItem
  ](name='sceneItems'),
  searchInformation?: GlobalSearchInformation(name='searchInformation'),
}

model IncludeImage {
  height?: int32(name='height', example='324'),
  imageLink?: string(name='imageLink', example='http://k.sinaimg.cn/n/sinakd20121/594/w2048h946/20240328/74cf-32c0d62e843df76567d760b4459d57c1.jpg/w700d1q75cms.jpg'),
  width?: int32(name='width', example='700'),
}

model QueryContext {
  originalQuery?: {
    industry?: string(name='industry'),
    page?: string(name='page'),
    query?: string(name='query'),
    timeRange?: string(name='timeRange'),
  }(name='originalQuery'),
  rewrite?: {
    enabled?: boolean(name='enabled'),
    timeRange?: string(name='timeRange'),
  }(name='rewrite'),
}

model ReadPageBody {
  formats?: [ string ](name='formats'),
  location?: string(name='location'),
  maxAge?: int32(name='maxAge'),
  pageTimeout?: int32(name='pageTimeout'),
  readability?: {
    excludeAllImages?: boolean(name='excludeAllImages'),
    excludeAllLinks?: boolean(name='excludeAllLinks'),
    excludedTags?: [ string ](name='excludedTags'),
    readabilityMode?: string(name='readabilityMode'),
  }(name='readability'),
  timeout?: int32(name='timeout'),
  url?: string(name='url', description='This parameter is required.'),
}

model ReadPageItem {
  errorMessage?: string(name='errorMessage'),
  html?: string(name='html'),
  markdown?: string(name='markdown'),
  rawHtml?: string(name='rawHtml'),
  statusCode?: int32(name='statusCode'),
  text?: string(name='text'),
}

model RequestContents {
  mainText?: boolean(name='mainText'),
  markdownText?: boolean(name='markdownText'),
  rerankScore?: boolean(name='rerankScore'),
  richMainBody?: boolean(name='richMainBody'),
  summary?: boolean(name='summary'),
}

model SceneItem {
  detail?: string(name='detail'),
  type?: string(name='type'),
}

model ScorePageItem {
  cardType?: string(name='cardType', description='This parameter is required.', example='structure_web_info'),
  displayLink?: string(name='displayLink', description='This parameter is required.', example='baijiahao.baidu.com'),
  hostAuthorityScore?: double(name='hostAuthorityScore'),
  hostLogo?: string(name='hostLogo', example='https://s2.zimgs.cn/ims?kt=url&at=smstruct&key=aHR0cHM6Ly9ndy5hbGljZG4uY29tL0wxLzcyMy8xNTY1MjU2NjAwLzJhL2YwL2I0LzJhZjBiNDQxMGI5YmVlMDVjOGVlNGJmODk3MTNkNTFjLnBuZw==&sign=yx:CUlNNQVJQjFrk3Kxt2F3KWhTOFU=&tv=400_400'),
  hostname?: string(name='hostname', example='新华网'),
  htmlSnippet?: string(name='htmlSnippet', description='This parameter is required.', example='100km/h-0制动能力上，仅有33.3m，不黑不吹，单看这个，<em>小米SU7</em>确实表现不错。而续航方面，101kWh电池容量，实现CLTC续航800km，还有现5分钟补能220km，15分钟补能510km的800V高压平台。而在...'),
  htmlTitle?: string(name='htmlTitle', description='This parameter is required.', example='<em>小米</em>SU7售价22.99万元起 高管亲自辟谣：发布前不会有<em>价格</em>-百家号'),
  images?: [
    IncludeImage
  ](name='images'),
  link?: string(name='link', description='This parameter is required.', example='https://baijiahao.baidu.com/s?id=1787881554557805096'),
  mainText?: string(name='mainText', example='昨天	，	小米	汽车	没有	发布	，	但	相关	的	信息	透露	的	差	不	多	了	。		
		在	发布	会	现场	，	雷军	直接	称	小米	S	U	7	对	标	特斯拉	保时捷	，	有	100	项	行业	领先	，	可见	“	遥遥	领先	”	已经	不再	是	华为	专利	了	？		
	
		而	在	介绍	技术	时	，	雷军	也	从	电机	、	电池	、	大	压铸	、	自动	驾驶	、	智能	座舱	等	五	大	方面	展开	，	充分	展示	了	小米	汽车	的	技术	以及	技术	储备	，		 		能	堆	的	料	，	全都	堆	上去	了	…	…		
		大家	比较	感	兴趣	的	性能	方面	，	2	.	78	s	的	0	-	100	km	/	h	加速	，	265	km	/	h	的	最高	时速'),
  markdownText?: string(name='markdownText'),
  mime?: string(name='mime', example='text/html'),
  pageMap?: map[string]string(name='pageMap'),
  publishTime?: long(name='publishTime', description='This parameter is required.', example='1704426524000'),
  score?: double(name='score', example='0.234325235'),
  siteLabel?: string(name='siteLabel', example='权威媒体'),
  snippet?: string(name='snippet', example='100km/h-0制动能力上，仅有33.3m，不黑不吹，单看这个，小米SU7确实表现不错。而续航方面，101kWh电池容量，实现CLTC续航800km，还有现5分钟补能220km，15分钟补能510km的800V高压平台。而在...'),
  summary?: string(name='summary'),
  title?: string(name='title', description='This parameter is required.', example='小米SU7售价22.99万元起 高管亲自辟谣：发布前不会有价格'),
}

model SearchCredits {
  genericTextSearch?: int32(name='genericTextSearch'),
  liteAdvancedTextSearch?: int32(name='liteAdvancedTextSearch'),
}

model SearchInformation {
  searchTime?: long(name='searchTime'),
  total?: long(name='total'),
}

model UnifiedCostCredits {
  search?: SearchCredits(name='search'),
  valueAdded?: ValueAddedCredits(name='valueAdded'),
}

model UnifiedOriginalQuery {
  query?: string(name='query'),
  timeRange?: string(name='timeRange'),
}

model UnifiedPageItem {
  hostAuthorityScore?: double(name='hostAuthorityScore'),
  hostLogo?: string(name='hostLogo'),
  hostname?: string(name='hostname'),
  images?: [ string ](name='images'),
  link?: string(name='link'),
  mainText?: string(name='mainText'),
  markdownText?: string(name='markdownText'),
  publishedTime?: string(name='publishedTime', example='2025-04-07T10:15:30.123+08:00'),
  rerankScore?: double(name='rerankScore'),
  snippet?: string(name='snippet'),
  summary?: string(name='summary'),
  title?: string(name='title'),
}

model UnifiedQueryContext {
  engineType?: string(name='engineType'),
  originalQuery?: UnifiedOriginalQuery(name='originalQuery'),
  rewrite?: UnifiedRewrite(name='rewrite'),
}

model UnifiedRewrite {
  enabled?: boolean(name='enabled'),
  timeRange?: string(name='timeRange'),
}

model UnifiedSceneItem {
  detail?: string(name='detail'),
  type?: string(name='type'),
}

model UnifiedSearchInformation {
  searchTime?: long(name='searchTime'),
}

model UnifiedSearchInput {
  advancedParams?: map[string]any(name='advancedParams'),
  category?: string(name='category'),
  contents?: RequestContents(name='contents'),
  engineType?: string(name='engineType'),
  location?: string(name='location'),
  query?: string(name='query'),
  timeRange?: string(name='timeRange'),
}

model UnifiedSearchOutput {
  costCredits?: UnifiedCostCredits(name='costCredits'),
  pageItems?: [
    UnifiedPageItem
  ](name='pageItems'),
  queryContext?: UnifiedQueryContext(name='queryContext'),
  requestId?: string(name='requestId'),
  sceneItems?: [
    UnifiedSceneItem
  ](name='sceneItems'),
  searchInformation?: UnifiedSearchInformation(name='searchInformation'),
}

model ValueAddedCredits {
  advanced?: int32(name='advanced'),
  summary?: int32(name='summary'),
}

model WeiboItem {
  cardType?: string(name='cardType', description='This parameter is required.', example='weibo_strong'),
  homepageLink?: string(name='homepageLink', example='https://m.weibo.cn/u/7761793874?luicode=20000061&lfid=5024099350350075'),
  htmlSnippet?: string(name='htmlSnippet', description='This parameter is required.', example='【小调查：你会买<em>小米SU7</em>吗？】#小米SU7路测覆盖300多城市#4月17日，@小米汽车 发文称SU7道路测试覆盖全国300多个城市，涵盖极寒，极热天气，总里程数高达540万公里，目前仍在进行中。  网页链接'),
  images?: [ string ](name='images'),
  link?: string(name='link', description='This parameter is required.', example='https://m.weibo.cn/detail/5024099350350075?wm=90194_90009'),
  publishDisplayTime?: string(name='publishDisplayTime', description='This parameter is required.', example='1小时前'),
  username?: string(name='username', example='白鹿科技'),
}

model AiSearchRequest {
  industry?: string(name='industry', example='finance'),
  page?: int32(name='page', example='{\\\\"total_count\\\\": 6851, \\\\"page_number\\\\": 54, \\\\"page_size\\\\": 100}'),
  query?: string(name='query', description='This parameter is required.'),
  sessionId?: string(name='sessionId', example='17dc8bcd-f34a-46d1-a7a3-0fa3d1ce3824'),
  timeRange?: string(name='timeRange', example='OneWeek'),
}

model AiSearchResponseBody = {
  header?: {
    event?: string(name='event', example='on_common_search_end'),
    eventId?: string(name='eventId', example='988021f0-951a-43d0-ba4d-785359e7e7be'),
    queryContext?: {
      originalQuery?: {
        industry?: string(name='industry'),
        page?: int32(name='page'),
        query?: string(name='query'),
        timeRange?: string(name='timeRange'),
      }(name='originalQuery'),
      rewrite?: {
        enabled?: boolean(name='enabled'),
        timeRange?: string(name='timeRange'),
      }(name='rewrite'),
    }(name='queryContext'),
    responseTime?: long(name='responseTime', example='1293'),
  }(name='header'),
  payload?: string(name='payload', example='{"header":{"eventId":"6f617de0-204f-406f-a9be-34779c06d498","event":"on_common_search_start","responseTime":120},"payload":"","requestId":"715d01a0-de7e-42c3-abca-b901fcd79b39"}'),
  requestId?: string(name='requestId', description='Id of the request', example='ECB2144C-E277-5434-80E6-12D26678D364'),
}

model AiSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AiSearchResponseBody(name='body'),
}

/**
 * @summary AI搜索流式接口
 *
 * @param request AiSearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AiSearchResponse
 */
@sse(true)
async function aiSearchWithSSE(request: AiSearchRequest, headers: map[string]string, runtime: $RuntimeOptions): asyncIterator[AiSearchResponse] {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.industry)) {
    query['industry'] = request.industry;
  }
  if (!$isNull(request.page)) {
    query['page'] = request.page;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.sessionId)) {
    query['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.timeRange)) {
    query['timeRange'] = request.timeRange;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AiSearch',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v3/linkedRetrieval/commands/aiSearch`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  var sseResp = callSSEApi(params, req, runtime);
  for(var resp : sseResp) {
    var data = $object($JSON.parseJSON(resp.event.data));
    yield {
      statusCode = resp.statusCode,
      headers = resp.headers,
      body = {
        ...data,
        RequestId = resp.event.id,
        Message = resp.event.event,
      },
    };
  }
}
/**
 * @summary AI搜索流式接口
 *
 * @param request AiSearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AiSearchResponse
 */
@context("aiSearchWithContext")
async function aiSearchWithOptions(request: AiSearchRequest, headers: map[string]string, runtime: $RuntimeOptions): AiSearchResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.industry)) {
    query['industry'] = request.industry;
  }
  if (!$isNull(request.page)) {
    query['page'] = request.page;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.sessionId)) {
    query['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.timeRange)) {
    query['timeRange'] = request.timeRange;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AiSearch',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v3/linkedRetrieval/commands/aiSearch`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AI搜索流式接口
 *
 * @param request AiSearchRequest
 * @return AiSearchResponse
 */
async function aiSearch(request: AiSearchRequest): AiSearchResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return aiSearchWithOptions(request, headers, runtime);
}

model GenericAdvancedSearchRequest {
  industry?: string(name='industry'),
  query?: string(name='query', description='This parameter is required.'),
  sessionId?: string(name='sessionId', example='job-4065bee3-e7aa-49fc-aad2-a8e3a7fd6acd'),
  timeRange?: string(name='timeRange', example='OneWeek'),
}

model GenericAdvancedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenericSearchResult  
}

/**
 * @summary 增强版通用搜索
 *
 * @param request GenericAdvancedSearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenericAdvancedSearchResponse
 */
@context("genericAdvancedSearchWithContext")
async function genericAdvancedSearchWithOptions(request: GenericAdvancedSearchRequest, headers: map[string]string, runtime: $RuntimeOptions): GenericAdvancedSearchResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.industry)) {
    query['industry'] = request.industry;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.sessionId)) {
    query['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.timeRange)) {
    query['timeRange'] = request.timeRange;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenericAdvancedSearch',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v2/linkedRetrieval/commands/genericAdvancedSearch`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 增强版通用搜索
 *
 * @param request GenericAdvancedSearchRequest
 * @return GenericAdvancedSearchResponse
 */
async function genericAdvancedSearch(request: GenericAdvancedSearchRequest): GenericAdvancedSearchResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return genericAdvancedSearchWithOptions(request, headers, runtime);
}

model GenericSearchRequest {
  enableRerank?: boolean(name='enableRerank'),
  industry?: string(name='industry'),
  page?: int32(name='page', example='1'),
  query?: string(name='query', description='This parameter is required.'),
  returnMainText?: boolean(name='returnMainText'),
  returnMarkdownText?: boolean(name='returnMarkdownText'),
  returnRichMainBody?: boolean(name='returnRichMainBody'),
  returnSummary?: boolean(name='returnSummary'),
  sessionId?: string(name='sessionId'),
  timeRange?: string(name='timeRange', example='OneWeek'),
}

model GenericSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenericSearchResult  
}

/**
 * @summary 通用搜索
 *
 * @param request GenericSearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenericSearchResponse
 */
@context("genericSearchWithContext")
async function genericSearchWithOptions(request: GenericSearchRequest, headers: map[string]string, runtime: $RuntimeOptions): GenericSearchResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.enableRerank)) {
    query['enableRerank'] = request.enableRerank;
  }
  if (!$isNull(request.industry)) {
    query['industry'] = request.industry;
  }
  if (!$isNull(request.page)) {
    query['page'] = request.page;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.returnMainText)) {
    query['returnMainText'] = request.returnMainText;
  }
  if (!$isNull(request.returnMarkdownText)) {
    query['returnMarkdownText'] = request.returnMarkdownText;
  }
  if (!$isNull(request.returnRichMainBody)) {
    query['returnRichMainBody'] = request.returnRichMainBody;
  }
  if (!$isNull(request.returnSummary)) {
    query['returnSummary'] = request.returnSummary;
  }
  if (!$isNull(request.sessionId)) {
    query['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.timeRange)) {
    query['timeRange'] = request.timeRange;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenericSearch',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v2/linkedRetrieval/commands/genericSearch`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通用搜索
 *
 * @param request GenericSearchRequest
 * @return GenericSearchResponse
 */
async function genericSearch(request: GenericSearchRequest): GenericSearchResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return genericSearchWithOptions(request, headers, runtime);
}

model GetIqsUsageRequest {
  endDate?: string(name='endDate', example='20241017'),
  startDate?: string(name='startDate', example='20241011'),
}

model GetIqsUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIqsUsageResult  
}

/**
 * @summary 信息查询服务接口日维度使用量查询
 *
 * @param request GetIqsUsageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIqsUsageResponse
 */
@context("getIqsUsageWithContext")
async function getIqsUsageWithOptions(request: GetIqsUsageRequest, headers: map[string]string, runtime: $RuntimeOptions): GetIqsUsageResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIqsUsage',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-admin/v1/iqs/usage`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 信息查询服务接口日维度使用量查询
 *
 * @param request GetIqsUsageRequest
 * @return GetIqsUsageResponse
 */
async function getIqsUsage(request: GetIqsUsageRequest): GetIqsUsageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getIqsUsageWithOptions(request, headers, runtime);
}

model GlobalSearchRequest {
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  query?: string(name='query', description='This parameter is required.'),
  timeRange?: string(name='timeRange', example='OneWeek'),
}

model GlobalSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GlobalSearchResult  
}

/**
 * @summary 通晓搜索-出海版(全球信息搜索)
 *
 * @param request GlobalSearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GlobalSearchResponse
 */
@context("globalSearchWithContext")
async function globalSearchWithOptions(request: GlobalSearchRequest, headers: map[string]string, runtime: $RuntimeOptions): GlobalSearchResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.page)) {
    query['page'] = request.page;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.timeRange)) {
    query['timeRange'] = request.timeRange;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GlobalSearch',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v1/iqs/search/global`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通晓搜索-出海版(全球信息搜索)
 *
 * @param request GlobalSearchRequest
 * @return GlobalSearchResponse
 */
async function globalSearch(request: GlobalSearchRequest): GlobalSearchResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return globalSearchWithOptions(request, headers, runtime);
}

model ReadPageBasicRequest {
  body?: ReadPageBody(name='body', description='post body'),
}

model ReadPageBasicResponseBody = {
  data?: ReadPageItem(name='data'),
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
}

model ReadPageBasicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadPageBasicResponseBody(name='body'),
}

/**
 * @summary 页面读取
 *
 * @param request ReadPageBasicRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadPageBasicResponse
 */
@context("readPageBasicWithContext")
async function readPageBasicWithOptions(request: ReadPageBasicRequest, headers: map[string]string, runtime: $RuntimeOptions): ReadPageBasicResponse {
  request.validate();
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ReadPageBasic',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v1/iqs/readpage/basic`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 页面读取
 *
 * @param request ReadPageBasicRequest
 * @return ReadPageBasicResponse
 */
async function readPageBasic(request: ReadPageBasicRequest): ReadPageBasicResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return readPageBasicWithOptions(request, headers, runtime);
}

model UnifiedSearchRequest {
  body?: UnifiedSearchInput(name='body'),
}

model UnifiedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnifiedSearchOutput  
}

/**
 * @summary 通晓统一搜索API
 *
 * @param request UnifiedSearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnifiedSearchResponse
 */
@context("unifiedSearchWithContext")
async function unifiedSearchWithOptions(request: UnifiedSearchRequest, headers: map[string]string, runtime: $RuntimeOptions): UnifiedSearchResponse {
  request.validate();
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UnifiedSearch',
    version = '2024-11-11',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v1/iqs/search/unified`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通晓统一搜索API
 *
 * @param request UnifiedSearchRequest
 * @return UnifiedSearchResponse
 */
async function unifiedSearch(request: UnifiedSearchRequest): UnifiedSearchResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return unifiedSearchWithOptions(request, headers, runtime);
}

