/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloudesl';
  @version = '2020-02-01';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'cloudesl.aliyuncs.com',
    ap-northeast-2-pop = 'cloudesl.aliyuncs.com',
    ap-south-1 = 'cloudesl.aliyuncs.com',
    ap-southeast-1 = 'cloudesl.aliyuncs.com',
    ap-southeast-2 = 'cloudesl.aliyuncs.com',
    ap-southeast-3 = 'cloudesl.aliyuncs.com',
    ap-southeast-5 = 'cloudesl.aliyuncs.com',
    cn-beijing = 'cloudesl.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudesl.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudesl.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudesl.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudesl.aliyuncs.com',
    cn-chengdu = 'cloudesl.aliyuncs.com',
    cn-edge-1 = 'cloudesl.aliyuncs.com',
    cn-fujian = 'cloudesl.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-finance = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudesl.aliyuncs.com',
    cn-hongkong = 'cloudesl.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudesl.aliyuncs.com',
    cn-huhehaote = 'cloudesl.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudesl.aliyuncs.com',
    cn-qingdao = 'cloudesl.aliyuncs.com',
    cn-qingdao-nebula = 'cloudesl.aliyuncs.com',
    cn-shanghai = 'cloudesl.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudesl.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudesl.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudesl.aliyuncs.com',
    cn-shanghai-inner = 'cloudesl.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudesl.aliyuncs.com',
    cn-shenzhen = 'cloudesl.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudesl.aliyuncs.com',
    cn-shenzhen-inner = 'cloudesl.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudesl.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudesl.aliyuncs.com',
    cn-wuhan = 'cloudesl.aliyuncs.com',
    cn-yushanfang = 'cloudesl.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudesl.aliyuncs.com',
    cn-zhangjiakou = 'cloudesl.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudesl.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudesl.aliyuncs.com',
    eu-central-1 = 'cloudesl.aliyuncs.com',
    eu-west-1 = 'cloudesl.aliyuncs.com',
    eu-west-1-oxs = 'cloudesl.aliyuncs.com',
    me-east-1 = 'cloudesl.aliyuncs.com',
    rus-west-1-pop = 'cloudesl.aliyuncs.com',
    us-east-1 = 'cloudesl.aliyuncs.com',
    us-west-1 = 'cloudesl.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActivateApDeviceRequest {
  apMac: string(name='ApMac', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model ActivateApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ActivateApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateApDeviceResponseBody(name='body'),
}

async function activateApDevice(request: ActivateApDeviceRequest): ActivateApDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateApDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddApDeviceRequest {
  apMac: string(name='ApMac', position='Body'),
  clientToken?: string(name='ClientToken', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  remark?: string(name='Remark', position='Body'),
  serialNumber?: string(name='SerialNumber', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model AddApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddApDeviceResponseBody(name='body'),
}

async function addApDevice(request: AddApDeviceRequest): AddApDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddApDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddUserRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  userId: string(name='UserId', position='Body'),
}

model AddUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserResponseBody(name='body'),
}

async function addUser(request: AddUserRequest): AddUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUser', 'POST', '/', 'json', true, 'form', request);
}

model AssignUserRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  stores?: string(name='Stores', position='Body'),
  userId: string(name='UserId', position='Body'),
  userType: string(name='UserType', position='Body'),
}

model AssignUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignUserResponse = {
  headers: map[string]string(name='headers'),
  body: AssignUserResponseBody(name='body'),
}

async function assignUser(request: AssignUserRequest): AssignUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignUser', 'POST', '/', 'json', true, 'form', request);
}

model BatchInsertItemsRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  itemInfo: [ 
    {
      actionPrice: int32(name='ActionPrice'),
      beMember?: boolean(name='BeMember'),
      bePromotion?: boolean(name='BePromotion'),
      beSourceCode?: boolean(name='BeSourceCode'),
      brandName?: string(name='BrandName'),
      categoryName?: string(name='CategoryName'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      customizeFeatureK?: string(name='CustomizeFeatureK'),
      customizeFeatureL?: string(name='CustomizeFeatureL'),
      customizeFeatureM?: string(name='CustomizeFeatureM'),
      customizeFeatureN?: string(name='CustomizeFeatureN'),
      customizeFeatureO?: string(name='CustomizeFeatureO'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      forestFirstId?: string(name='ForestFirstId'),
      forestSecondId?: string(name='ForestSecondId'),
      inventoryStatus?: string(name='InventoryStatus'),
      itemBarCode: string(name='ItemBarCode'),
      itemId: string(name='ItemId'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      itemPicUrl?: string(name='ItemPicUrl'),
      itemQrCode?: string(name='ItemQrCode'),
      itemShortTitle?: string(name='ItemShortTitle'),
      itemTitle: string(name='ItemTitle'),
      manufacturer?: string(name='Manufacturer'),
      material?: string(name='Material'),
      memberPrice?: int32(name='MemberPrice'),
      modelNumber?: string(name='ModelNumber'),
      originalPrice?: int32(name='OriginalPrice'),
      priceUnit: string(name='PriceUnit'),
      productionPlace?: string(name='ProductionPlace'),
      promotionEnd?: string(name='PromotionEnd'),
      promotionReason?: string(name='PromotionReason'),
      promotionStart?: string(name='PromotionStart'),
      promotionText?: string(name='PromotionText'),
      rank?: string(name='Rank'),
      saleSpec?: string(name='SaleSpec'),
      salesPrice?: int32(name='SalesPrice'),
      skuId?: string(name='SkuId'),
      sourceCode?: string(name='SourceCode'),
      suggestPrice?: int32(name='SuggestPrice'),
      supplierName?: string(name='SupplierName'),
      taxFee?: string(name='TaxFee'),
      templateSceneId?: string(name='TemplateSceneId'),
    }
  ](name='ItemInfo', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  syncByItemId?: boolean(name='SyncByItemId', position='Body'),
}

model BatchInsertItemsResponseBody = {
  batchResults?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      index?: int32(name='Index'),
      message?: string(name='Message'),
      success?: boolean(name='Success'),
    }
  ](name='BatchResults'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchInsertItemsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchInsertItemsResponseBody(name='body'),
}

async function batchInsertItems(request: BatchInsertItemsRequest): BatchInsertItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchInsertItems', 'POST', '/', 'json', true, 'form', request);
}

model BindEslDeviceRequest {
  column?: string(name='Column', position='Body'),
  eslBarCode: string(name='EslBarCode', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  layer?: int32(name='Layer', position='Body'),
  shelf?: string(name='Shelf', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model BindEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindEslDeviceResponseBody(name='body'),
}

async function bindEslDevice(request: BindEslDeviceRequest): BindEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmServerLocationRequest {
}

model ConfirmServerLocationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmServerLocationResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmServerLocationResponseBody(name='body'),
}

async function confirmServerLocation(request: ConfirmServerLocationRequest): ConfirmServerLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmServerLocation', 'POST', '/', 'json', false, 'json', request);
}

model CreateStoreRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  parentId?: string(name='ParentId', position='Body'),
  phone: string(name='Phone', position='Body'),
  storeName: string(name='StoreName', position='Body'),
  timeZone?: string(name='TimeZone', position='Body'),
  userStoreCode?: string(name='UserStoreCode', position='Body'),
}

model CreateStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storeId?: string(name='StoreId'),
  success?: boolean(name='Success'),
}

model CreateStoreResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStoreResponseBody(name='body'),
}

async function createStore(request: CreateStoreRequest): CreateStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStore', 'POST', '/', 'json', true, 'form', request);
}

model DeleteApDeviceRequest {
  apMac: string(name='ApMac', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DeleteApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApDeviceResponseBody(name='body'),
}

async function deleteApDevice(request: DeleteApDeviceRequest): DeleteApDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteItemRequest {
  itemBarCode: string(name='ItemBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  unbindEslDevice?: boolean(name='UnbindEslDevice', position='Body'),
}

model DeleteItemResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteItemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteItemResponseBody(name='body'),
}

async function deleteItem(request: DeleteItemRequest): DeleteItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteItem', 'POST', '/', 'json', true, 'form', request);
}

model DeleteStoreRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DeleteStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteStoreResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStoreResponseBody(name='body'),
}

async function deleteStore(request: DeleteStoreRequest): DeleteStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStore', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  userId: string(name='UserId', position='Body'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', true, 'form', request);
}

model DescribeApDevicesRequest {
  apMac?: string(name='ApMac', position='Body'),
  beActivate?: boolean(name='BeActivate', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  model?: string(name='Model', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: boolean(name='Status', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribeApDevicesResponseBody = {
  apDevices?: [ 
    {
      beActivate?: boolean(name='BeActivate'),
      mac?: string(name='Mac'),
      model?: string(name='Model'),
      remark?: string(name='Remark'),
      status?: boolean(name='Status'),
      storeId?: string(name='StoreId'),
    }
  ](name='ApDevices'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApDevicesResponseBody(name='body'),
}

async function describeApDevices(request: DescribeApDevicesRequest): DescribeApDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBindersRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  itemTitle?: string(name='ItemTitle', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribeBindersResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  eslItemBindInfos?: [ 
    {
      actionPrice?: string(name='ActionPrice'),
      bePromotion?: boolean(name='BePromotion'),
      bindId?: string(name='BindId'),
      eslBarCode?: string(name='EslBarCode'),
      eslConnectAp?: string(name='EslConnectAp'),
      eslModel?: string(name='EslModel'),
      eslPic?: string(name='EslPic'),
      eslStatus?: string(name='EslStatus'),
      gmtModified?: string(name='GmtModified'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: string(name='ItemId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      itemTitle?: string(name='ItemTitle'),
      originalPrice?: string(name='OriginalPrice'),
      priceUnit?: string(name='PriceUnit'),
      promotionEnd?: string(name='PromotionEnd'),
      promotionStart?: string(name='PromotionStart'),
      promotionText?: string(name='PromotionText'),
      skuId?: string(name='SkuId'),
      storeId?: string(name='StoreId'),
      templateId?: string(name='TemplateId'),
      templateSceneId?: string(name='TemplateSceneId'),
    }
  ](name='EslItemBindInfos'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBindersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBindersResponseBody(name='body'),
}

async function describeBinders(request: DescribeBindersRequest): DescribeBindersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBinders', 'POST', '/', 'json', true, 'form', request);
}

model DescribeClientPackageRequest {
  clientType?: string(name='ClientType', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
}

model DescribeClientPackageResponseBody = {
  code?: string(name='Code'),
  description?: string(name='Description'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  updateType?: string(name='UpdateType'),
  url?: string(name='Url'),
  version?: string(name='Version'),
}

model DescribeClientPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientPackageResponseBody(name='body'),
}

async function describeClientPackage(request: DescribeClientPackageRequest): DescribeClientPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClientPackage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEslDeviceRequest {
  fromDate?: string(name='FromDate', position='Body'),
  pageNumber?: long(name='PageNumber', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  storeId?: string(name='StoreId', position='Body'),
  toDate?: string(name='ToDate', position='Body'),
}

model DescribeEslDeviceResponseBody = {
  eslDetails?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      itemBarCode?: long(name='ItemBarCode'),
      itemId?: long(name='ItemId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      lastUpdateTime?: string(name='LastUpdateTime'),
      status?: string(name='Status'),
      storeId?: string(name='StoreId'),
    }
  ](name='EslDetails'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEslDeviceResponseBody(name='body'),
}

async function describeEslDevice(request: DescribeEslDeviceRequest): DescribeEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEslDevicesRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  eslStatus?: string(name='EslStatus', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  fromBatteryLevel?: int32(name='FromBatteryLevel', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  toBatteryLevel?: int32(name='ToBatteryLevel', position='Body'),
  type?: string(name='Type', position='Body'),
}

model DescribeEslDevicesResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  eslDevices?: [ 
    {
      batteryLevel?: int32(name='BatteryLevel'),
      eslBarCode?: string(name='EslBarCode'),
      eslSignal?: int32(name='EslSignal'),
      eslStatus?: string(name='EslStatus'),
      lastCommunicateTime?: string(name='LastCommunicateTime'),
      mac?: string(name='Mac'),
      model?: string(name='Model'),
      screenHeight?: int32(name='ScreenHeight'),
      screenWidth?: int32(name='ScreenWidth'),
      storeId?: string(name='StoreId'),
      type?: string(name='Type'),
    }
  ](name='EslDevices'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEslDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEslDevicesResponseBody(name='body'),
}

async function describeEslDevices(request: DescribeEslDevicesRequest): DescribeEslDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEslDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeItemsRequest {
  bePromotion?: boolean(name='BePromotion', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  itemId?: string(name='ItemId', position='Body'),
  itemTitle?: string(name='ItemTitle', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  skuId?: string(name='SkuId', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribeItemsResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  items?: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      beMember?: boolean(name='BeMember'),
      bePromotion?: boolean(name='BePromotion'),
      beSourceCode?: boolean(name='BeSourceCode'),
      brandName?: string(name='BrandName'),
      categoryName?: string(name='CategoryName'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      customizeFeatureK?: string(name='CustomizeFeatureK'),
      customizeFeatureL?: string(name='CustomizeFeatureL'),
      customizeFeatureM?: string(name='CustomizeFeatureM'),
      customizeFeatureN?: string(name='CustomizeFeatureN'),
      customizeFeatureO?: string(name='CustomizeFeatureO'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      forestFirstId?: string(name='ForestFirstId'),
      forestSecondId?: string(name='ForestSecondId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      inventoryStatus?: string(name='InventoryStatus'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: string(name='ItemId'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      itemPicUrl?: string(name='ItemPicUrl'),
      itemQrCode?: string(name='ItemQrCode'),
      itemShortTitle?: string(name='ItemShortTitle'),
      itemTitle?: string(name='ItemTitle'),
      manufacturer?: string(name='Manufacturer'),
      material?: string(name='Material'),
      memberPrice?: int32(name='MemberPrice'),
      modelNumber?: string(name='ModelNumber'),
      originalPrice?: int32(name='OriginalPrice'),
      priceUnit?: string(name='PriceUnit'),
      productionPlace?: string(name='ProductionPlace'),
      promotionEnd?: string(name='PromotionEnd'),
      promotionReason?: string(name='PromotionReason'),
      promotionStart?: string(name='PromotionStart'),
      promotionText?: string(name='PromotionText'),
      rank?: string(name='Rank'),
      saleSpec?: string(name='SaleSpec'),
      salesPrice?: int32(name='SalesPrice'),
      skuId?: string(name='SkuId'),
      sourceCode?: string(name='SourceCode'),
      suggestPrice?: int32(name='SuggestPrice'),
      supplierName?: string(name='SupplierName'),
      taxFee?: string(name='TaxFee'),
      templateSceneId?: string(name='TemplateSceneId'),
    }
  ](name='Items'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  templateSceneId?: string(name='TemplateSceneId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeItemsResponseBody(name='body'),
}

async function describeItems(request: DescribeItemsRequest): DescribeItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeItems', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStoreConfigRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribeStoreConfigResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storeConfigInfo?: {
    enableNotification?: boolean(name='EnableNotification'),
    notificationSilentTimes?: string(name='NotificationSilentTimes'),
    notificationWebHook?: string(name='NotificationWebHook'),
    storeId?: string(name='StoreId'),
  }(name='StoreConfigInfo'),
  success?: boolean(name='Success'),
}

model DescribeStoreConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoreConfigResponseBody(name='body'),
}

async function describeStoreConfig(request: DescribeStoreConfigRequest): DescribeStoreConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStoreConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStoresRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  fromDate?: string(name='FromDate', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId?: string(name='StoreId', position='Body'),
  storeName?: string(name='StoreName', position='Body'),
  templateVersion?: string(name='TemplateVersion', position='Body'),
  toDate?: string(name='ToDate', position='Body'),
  userStoreCode?: string(name='UserStoreCode', position='Body'),
}

model DescribeStoresResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  stores?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      level?: string(name='Level'),
      parentId?: string(name='ParentId'),
      phone?: string(name='Phone'),
      storeId?: string(name='StoreId'),
      storeName?: string(name='StoreName'),
      templateVersion?: string(name='TemplateVersion'),
      timeZone?: string(name='TimeZone'),
      userStoreCode?: string(name='UserStoreCode'),
    }
  ](name='Stores'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStoresResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoresResponseBody(name='body'),
}

async function describeStores(request: DescribeStoresRequest): DescribeStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStores', 'POST', '/', 'json', true, 'form', request);
}

model DescribeUserLogRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  fromDate?: string(name='FromDate', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  itemShortTitle?: string(name='ItemShortTitle', position='Body'),
  logId?: string(name='LogId', position='Body'),
  operationStatus?: string(name='OperationStatus', position='Body'),
  operationType?: string(name='OperationType', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  toDate?: string(name='ToDate', position='Body'),
  userId?: string(name='UserId', position='Body'),
}

model DescribeUserLogResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  userLogs?: [ 
    {
      actionPrice?: string(name='ActionPrice'),
      bePromotion?: boolean(name='BePromotion'),
      eslBarCode?: string(name='EslBarCode'),
      eslSignal?: int32(name='EslSignal'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: string(name='ItemId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      logId?: string(name='LogId'),
      operationResponseTime?: string(name='OperationResponseTime'),
      operationSendTime?: string(name='OperationSendTime'),
      operationStatus?: string(name='OperationStatus'),
      operationType?: string(name='OperationType'),
      priceUnit?: string(name='PriceUnit'),
      resultCode?: string(name='ResultCode'),
      spendTime?: string(name='SpendTime'),
      storeId?: string(name='StoreId'),
      userId?: string(name='UserId'),
    }
  ](name='UserLogs'),
}

model DescribeUserLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLogResponseBody(name='body'),
}

async function describeUserLog(request: DescribeUserLogRequest): DescribeUserLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeUsersRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  userId?: string(name='UserId', position='Body'),
  userName?: string(name='UserName', position='Body'),
  userType?: string(name='UserType', position='Body'),
}

model DescribeUsersResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  users?: [ 
    {
      bid?: string(name='Bid'),
      dingTalkInfos?: [ 
        {
          dingTalkCompanyId?: string(name='DingTalkCompanyId'),
          dingTalkUserId?: string(name='DingTalkUserId'),
        }
      ](name='DingTalkInfos'),
      ownerId?: string(name='OwnerId'),
      stores?: string(name='Stores'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
      userType?: string(name='UserType'),
    }
  ](name='Users'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsers', 'POST', '/', 'json', true, 'form', request);
}

model GetUserRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  userId?: string(name='UserId', position='Body'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  user?: {
    bid?: string(name='Bid'),
    dingTalkInfos?: [ 
      {
        dingTalkCompanyId?: string(name='DingTalkCompanyId'),
        dingTalkUserId?: string(name='DingTalkUserId'),
      }
    ](name='DingTalkInfos'),
    ownerId?: string(name='OwnerId'),
    stores?: string(name='Stores'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    userType?: string(name='UserType'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', true, 'form', request);
}

model UnassignUserRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  userId: string(name='UserId', position='Body'),
}

model UnassignUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnassignUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignUserResponseBody(name='body'),
}

async function unassignUser(request: UnassignUserRequest): UnassignUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassignUser', 'POST', '/', 'json', true, 'form', request);
}

model UnbindEslDeviceRequest {
  column?: string(name='Column', position='Body'),
  eslBarCode: string(name='EslBarCode', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  layer?: int32(name='Layer', position='Body'),
  shelf?: string(name='Shelf', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UnbindEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindEslDeviceResponseBody(name='body'),
}

async function unbindEslDevice(request: UnbindEslDeviceRequest): UnbindEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEslDeviceLightRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  frequency: string(name='Frequency', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  ledColor: string(name='LedColor', position='Body'),
  lightUpTime: int32(name='LightUpTime', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UpdateEslDeviceLightResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  failCount?: int32(name='FailCount'),
  lightFailEslInfos?: [ 
    {
      errorMessage?: string(name='ErrorMessage'),
      eslBarCode?: string(name='EslBarCode'),
    }
  ](name='LightFailEslInfos'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successCount?: int32(name='SuccessCount'),
}

model UpdateEslDeviceLightResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEslDeviceLightResponseBody(name='body'),
}

async function updateEslDeviceLight(request: UpdateEslDeviceLightRequest): UpdateEslDeviceLightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEslDeviceLight', 'POST', '/', 'json', true, 'form', request);
}

model UpdateStoreRequest {
  extraParams?: string(name='ExtraParams', position='Body'),
  phone?: string(name='Phone', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  storeName?: string(name='StoreName', position='Body'),
  templateVersion?: string(name='TemplateVersion', position='Body'),
  timezone?: string(name='Timezone', position='Body'),
  userStoreCode?: string(name='UserStoreCode', position='Body'),
}

model UpdateStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateStoreResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoreResponseBody(name='body'),
}

async function updateStore(request: UpdateStoreRequest): UpdateStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStore', 'POST', '/', 'json', true, 'form', request);
}

model UpdateStoreConfigRequest {
  enableNotification?: boolean(name='EnableNotification', position='Body'),
  extraParams?: string(name='ExtraParams', position='Body'),
  notificationSilentTimes?: string(name='NotificationSilentTimes', position='Body'),
  notificationWebHook?: string(name='NotificationWebHook', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UpdateStoreConfigResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateStoreConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoreConfigResponseBody(name='body'),
}

async function updateStoreConfig(request: UpdateStoreConfigRequest): UpdateStoreConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStoreConfig', 'POST', '/', 'json', true, 'form', request);
}

