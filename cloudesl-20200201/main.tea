/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    ap-northeast-1 = 'cloudesl.aliyuncs.com',
    ap-northeast-2-pop = 'cloudesl.aliyuncs.com',
    ap-south-1 = 'cloudesl.aliyuncs.com',
    ap-southeast-1 = 'cloudesl.aliyuncs.com',
    ap-southeast-2 = 'cloudesl.aliyuncs.com',
    ap-southeast-3 = 'cloudesl.aliyuncs.com',
    ap-southeast-5 = 'cloudesl.aliyuncs.com',
    cn-beijing = 'cloudesl.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudesl.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudesl.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudesl.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudesl.aliyuncs.com',
    cn-chengdu = 'cloudesl.aliyuncs.com',
    cn-edge-1 = 'cloudesl.aliyuncs.com',
    cn-fujian = 'cloudesl.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-finance = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudesl.aliyuncs.com',
    cn-hongkong = 'cloudesl.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudesl.aliyuncs.com',
    cn-huhehaote = 'cloudesl.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudesl.aliyuncs.com',
    cn-qingdao = 'cloudesl.aliyuncs.com',
    cn-qingdao-nebula = 'cloudesl.aliyuncs.com',
    cn-shanghai = 'cloudesl.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudesl.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudesl.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudesl.aliyuncs.com',
    cn-shanghai-inner = 'cloudesl.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudesl.aliyuncs.com',
    cn-shenzhen = 'cloudesl.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudesl.aliyuncs.com',
    cn-shenzhen-inner = 'cloudesl.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudesl.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudesl.aliyuncs.com',
    cn-wuhan = 'cloudesl.aliyuncs.com',
    cn-yushanfang = 'cloudesl.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudesl.aliyuncs.com',
    cn-zhangjiakou = 'cloudesl.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudesl.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudesl.aliyuncs.com',
    eu-central-1 = 'cloudesl.aliyuncs.com',
    eu-west-1 = 'cloudesl.aliyuncs.com',
    eu-west-1-oxs = 'cloudesl.aliyuncs.com',
    me-east-1 = 'cloudesl.aliyuncs.com',
    rus-west-1-pop = 'cloudesl.aliyuncs.com',
    us-east-1 = 'cloudesl.aliyuncs.com',
    us-west-1 = 'cloudesl.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudesl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ActivateApDeviceRequest {
  apMac?: string(name='ApMac'),
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
}

model ActivateApDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ActivateApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateApDeviceResponseBody(name='body'),
}

async function activateApDeviceWithOptions(request: ActivateApDeviceRequest, runtime: Util.RuntimeOptions): ActivateApDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ActivateApDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateApDevice(request: ActivateApDeviceRequest): ActivateApDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateApDeviceWithOptions(request, runtime);
}

model AddApDeviceRequest {
  storeId?: string(name='StoreId'),
  apMac?: string(name='ApMac'),
  remark?: string(name='Remark'),
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
}

model AddApDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddApDeviceResponseBody(name='body'),
}

async function addApDeviceWithOptions(request: AddApDeviceRequest, runtime: Util.RuntimeOptions): AddApDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddApDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addApDevice(request: AddApDeviceRequest): AddApDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addApDeviceWithOptions(request, runtime);
}

model AddPlanogramShelfRequest {
  shelfType?: string(name='ShelfType'),
  storeId?: string(name='StoreId'),
  shelf?: string(name='Shelf'),
  zone?: string(name='Zone'),
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
}

model AddPlanogramShelfResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddPlanogramShelfResponse = {
  headers: map[string]string(name='headers'),
  body: AddPlanogramShelfResponseBody(name='body'),
}

async function addPlanogramShelfWithOptions(request: AddPlanogramShelfRequest, runtime: Util.RuntimeOptions): AddPlanogramShelfResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddPlanogramShelf',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPlanogramShelf(request: AddPlanogramShelfRequest): AddPlanogramShelfResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPlanogramShelfWithOptions(request, runtime);
}

model AddRoleActionsRequest {
  accessControlLists?: string(name='AccessControlLists'),
  extraParams?: string(name='ExtraParams'),
  roleCode?: string(name='RoleCode'),
  clientToken?: string(name='ClientToken'),
}

model AddRoleActionsResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddRoleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: AddRoleActionsResponseBody(name='body'),
}

async function addRoleActionsWithOptions(request: AddRoleActionsRequest, runtime: Util.RuntimeOptions): AddRoleActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddRoleActions',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRoleActions(request: AddRoleActionsRequest): AddRoleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRoleActionsWithOptions(request, runtime);
}

model AddUserRequest {
  userId?: string(name='UserId'),
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
}

model AddUserResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserResponseBody(name='body'),
}

async function addUserWithOptions(request: AddUserRequest, runtime: Util.RuntimeOptions): AddUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUser(request: AddUserRequest): AddUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserWithOptions(request, runtime);
}

model AssignUserRequest {
  stores?: string(name='Stores'),
  userId?: string(name='UserId'),
  userType?: string(name='UserType'),
  extraParams?: string(name='ExtraParams'),
}

model AssignUserResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AssignUserResponse = {
  headers: map[string]string(name='headers'),
  body: AssignUserResponseBody(name='body'),
}

async function assignUserWithOptions(request: AssignUserRequest, runtime: Util.RuntimeOptions): AssignUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AssignUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assignUser(request: AssignUserRequest): AssignUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignUserWithOptions(request, runtime);
}

model AssociatePlanogramRailRequest {
  storeId?: string(name='StoreId'),
  layer?: int32(name='Layer'),
  shelf?: string(name='Shelf'),
  railCode?: string(name='RailCode'),
  extraParams?: string(name='ExtraParams'),
}

model AssociatePlanogramRailResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AssociatePlanogramRailResponse = {
  headers: map[string]string(name='headers'),
  body: AssociatePlanogramRailResponseBody(name='body'),
}

async function associatePlanogramRailWithOptions(request: AssociatePlanogramRailRequest, runtime: Util.RuntimeOptions): AssociatePlanogramRailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AssociatePlanogramRail',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associatePlanogramRail(request: AssociatePlanogramRailRequest): AssociatePlanogramRailResponse {
  var runtime = new Util.RuntimeOptions{};
  return associatePlanogramRailWithOptions(request, runtime);
}

model BatchInsertItemsRequest {
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
  itemInfo?: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      itemTitle?: string(name='ItemTitle'),
      brandName?: string(name='BrandName'),
      priceUnit?: string(name='PriceUnit'),
      sourceCode?: string(name='SourceCode'),
      forestFirstId?: string(name='ForestFirstId'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureK?: string(name='CustomizeFeatureK'),
      memberPrice?: int32(name='MemberPrice'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      promotionStart?: string(name='PromotionStart'),
      modelNumber?: string(name='ModelNumber'),
      categoryName?: string(name='CategoryName'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      suggestPrice?: int32(name='SuggestPrice'),
      saleSpec?: string(name='SaleSpec'),
      promotionText?: string(name='PromotionText'),
      promotionReason?: string(name='PromotionReason'),
      rank?: string(name='Rank'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      salesPrice?: int32(name='SalesPrice'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      originalPrice?: int32(name='OriginalPrice'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      productionPlace?: string(name='ProductionPlace'),
      itemShortTitle?: string(name='ItemShortTitle'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      customizeFeatureN?: string(name='CustomizeFeatureN'),
      taxFee?: string(name='TaxFee'),
      inventoryStatus?: string(name='InventoryStatus'),
      supplierName?: string(name='SupplierName'),
      itemPicUrl?: string(name='ItemPicUrl'),
      customizeFeatureL?: string(name='CustomizeFeatureL'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      itemId?: string(name='ItemId'),
      manufacturer?: string(name='Manufacturer'),
      material?: string(name='Material'),
      customizeFeatureO?: string(name='CustomizeFeatureO'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      bePromotion?: boolean(name='BePromotion'),
      skuId?: string(name='SkuId'),
      customizeFeatureM?: string(name='CustomizeFeatureM'),
      beSourceCode?: boolean(name='BeSourceCode'),
      forestSecondId?: string(name='ForestSecondId'),
      itemQrCode?: string(name='ItemQrCode'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      promotionEnd?: string(name='PromotionEnd'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='ItemInfo'),
}

model BatchInsertItemsResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  batchResults?: [ 
    {
      index?: int32(name='Index'),
      success?: boolean(name='Success'),
      errorCode?: string(name='ErrorCode'),
      message?: string(name='Message'),
    }
  ](name='BatchResults'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchInsertItemsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchInsertItemsResponseBody(name='body'),
}

async function batchInsertItemsWithOptions(request: BatchInsertItemsRequest, runtime: Util.RuntimeOptions): BatchInsertItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BatchInsertItems',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchInsertItems(request: BatchInsertItemsRequest): BatchInsertItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchInsertItemsWithOptions(request, runtime);
}

model BindEslDeviceRequest {
  itemBarCode?: string(name='ItemBarCode'),
  eslBarCode?: string(name='EslBarCode'),
  storeId?: string(name='StoreId'),
  shelf?: string(name='Shelf'),
  layer?: int32(name='Layer'),
  column?: string(name='Column'),
  extraParams?: string(name='ExtraParams'),
}

model BindEslDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindEslDeviceResponseBody(name='body'),
}

async function bindEslDeviceWithOptions(request: BindEslDeviceRequest, runtime: Util.RuntimeOptions): BindEslDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindEslDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindEslDevice(request: BindEslDeviceRequest): BindEslDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindEslDeviceWithOptions(request, runtime);
}

model ComposePlanogramPositionsRequest {
  beAutoRefresh?: boolean(name='BeAutoRefresh'),
  layerOrigin?: string(name='LayerOrigin'),
  layer?: int32(name='Layer'),
  actionType?: string(name='ActionType'),
  shelf?: string(name='Shelf'),
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
  shelfPositionInfo?: [ 
    {
      depth?: float(name='Depth'),
      facing?: int32(name='Facing'),
      offsetTo?: float(name='OffsetTo'),
      offsetFrom?: float(name='OffsetFrom'),
      column?: string(name='Column'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='ShelfPositionInfo'),
}

model ComposePlanogramPositionsResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ComposePlanogramPositionsResponse = {
  headers: map[string]string(name='headers'),
  body: ComposePlanogramPositionsResponseBody(name='body'),
}

async function composePlanogramPositionsWithOptions(request: ComposePlanogramPositionsRequest, runtime: Util.RuntimeOptions): ComposePlanogramPositionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ComposePlanogramPositions',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function composePlanogramPositions(request: ComposePlanogramPositionsRequest): ComposePlanogramPositionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return composePlanogramPositionsWithOptions(request, runtime);
}

model CreateStoreRequest {
  parentId?: string(name='ParentId'),
  userStoreCode?: string(name='UserStoreCode'),
  storeName?: string(name='StoreName'),
  phone?: string(name='Phone'),
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
}

model CreateStoreResponseBody = {
  storeId?: string(name='StoreId'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateStoreResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStoreResponseBody(name='body'),
}

async function createStoreWithOptions(request: CreateStoreRequest, runtime: Util.RuntimeOptions): CreateStoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateStore',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStore(request: CreateStoreRequest): CreateStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStoreWithOptions(request, runtime);
}

model DeleteApDeviceRequest {
  apMac?: string(name='ApMac'),
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
}

model DeleteApDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApDeviceResponseBody(name='body'),
}

async function deleteApDeviceWithOptions(request: DeleteApDeviceRequest, runtime: Util.RuntimeOptions): DeleteApDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApDevice(request: DeleteApDeviceRequest): DeleteApDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApDeviceWithOptions(request, runtime);
}

model DeletePlanogramShelfRequest {
  beAutoRefresh?: boolean(name='BeAutoRefresh'),
  storeId?: string(name='StoreId'),
  shelf?: string(name='Shelf'),
  extraParams?: string(name='ExtraParams'),
}

model DeletePlanogramShelfResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeletePlanogramShelfResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePlanogramShelfResponseBody(name='body'),
}

async function deletePlanogramShelfWithOptions(request: DeletePlanogramShelfRequest, runtime: Util.RuntimeOptions): DeletePlanogramShelfResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeletePlanogramShelf',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePlanogramShelf(request: DeletePlanogramShelfRequest): DeletePlanogramShelfResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePlanogramShelfWithOptions(request, runtime);
}

model DeleteRoleActionsRequest {
  accessControlLists?: string(name='AccessControlLists'),
  extraParams?: string(name='ExtraParams'),
  roleCode?: string(name='RoleCode'),
}

model DeleteRoleActionsResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteRoleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoleActionsResponseBody(name='body'),
}

async function deleteRoleActionsWithOptions(request: DeleteRoleActionsRequest, runtime: Util.RuntimeOptions): DeleteRoleActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoleActions',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRoleActions(request: DeleteRoleActionsRequest): DeleteRoleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoleActionsWithOptions(request, runtime);
}

model DeleteStoreRequest {
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
}

model DeleteStoreResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteStoreResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStoreResponseBody(name='body'),
}

async function deleteStoreWithOptions(request: DeleteStoreRequest, runtime: Util.RuntimeOptions): DeleteStoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStore',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStore(request: DeleteStoreRequest): DeleteStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStoreWithOptions(request, runtime);
}

model DeleteUserRequest {
  userId?: string(name='UserId'),
  extraParams?: string(name='ExtraParams'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DescribeAlarmsRequest {
  alarmId?: string(name='AlarmId'),
  deviceMac?: string(name='DeviceMac'),
  pageNumber?: int32(name='PageNumber'),
  errorType?: string(name='ErrorType'),
  pageSize?: int32(name='PageSize'),
  alarmType?: string(name='AlarmType'),
  alarmStatus?: string(name='AlarmStatus'),
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeAlarmsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  alarms?: [ 
    {
      alarmStatus?: string(name='AlarmStatus'),
      remark?: string(name='Remark'),
      itemTitle?: string(name='ItemTitle'),
      deviceType?: string(name='DeviceType'),
      deviceBarCode?: string(name='DeviceBarCode'),
      retryTimes?: long(name='RetryTimes'),
      alarmType?: string(name='AlarmType'),
      retryGmtCreate?: string(name='RetryGmtCreate'),
      storeId?: string(name='StoreId'),
      dealTime?: string(name='DealTime'),
      deviceMac?: string(name='DeviceMac'),
      alarmTime?: string(name='AlarmTime'),
      dealUserId?: string(name='DealUserId'),
      alarmId?: string(name='AlarmId'),
      errorType?: string(name='ErrorType'),
      retryGmtModified?: string(name='RetryGmtModified'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='Alarms'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmsResponseBody(name='body'),
}

async function describeAlarmsWithOptions(request: DescribeAlarmsRequest, runtime: Util.RuntimeOptions): DescribeAlarmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarms',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarms(request: DescribeAlarmsRequest): DescribeAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmsWithOptions(request, runtime);
}

model DescribeApDevicesRequest {
  storeId?: string(name='StoreId'),
  apMac?: string(name='ApMac'),
  status?: boolean(name='Status'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  model?: string(name='Model'),
  beActivate?: boolean(name='BeActivate'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeApDevicesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  apDevices?: [ 
    {
      status?: boolean(name='Status'),
      storeId?: string(name='StoreId'),
      model?: string(name='Model'),
      remark?: string(name='Remark'),
      beActivate?: boolean(name='BeActivate'),
      mac?: string(name='Mac'),
    }
  ](name='ApDevices'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeApDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApDevicesResponseBody(name='body'),
}

async function describeApDevicesWithOptions(request: DescribeApDevicesRequest, runtime: Util.RuntimeOptions): DescribeApDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApDevices',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApDevices(request: DescribeApDevicesRequest): DescribeApDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApDevicesWithOptions(request, runtime);
}

model DescribeBindersRequest {
  itemBarCode?: string(name='ItemBarCode'),
  eslBarCode?: string(name='EslBarCode'),
  storeId?: string(name='StoreId'),
  pageNumber?: int32(name='PageNumber'),
  itemTitle?: string(name='ItemTitle'),
  pageSize?: int32(name='PageSize'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeBindersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  eslItemBindInfos?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      templateSceneId?: string(name='TemplateSceneId'),
      actionPrice?: string(name='ActionPrice'),
      itemTitle?: string(name='ItemTitle'),
      promotionStart?: string(name='PromotionStart'),
      priceUnit?: string(name='PriceUnit'),
      originalPrice?: string(name='OriginalPrice'),
      itemId?: string(name='ItemId'),
      eslPic?: string(name='EslPic'),
      gmtModified?: string(name='GmtModified'),
      storeId?: string(name='StoreId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      bindId?: string(name='BindId'),
      promotionText?: string(name='PromotionText'),
      eslModel?: string(name='EslModel'),
      bePromotion?: boolean(name='BePromotion'),
      skuId?: string(name='SkuId'),
      eslConnectAp?: string(name='EslConnectAp'),
      eslStatus?: string(name='EslStatus'),
      templateId?: string(name='TemplateId'),
      promotionEnd?: string(name='PromotionEnd'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='EslItemBindInfos'),
}

model DescribeBindersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBindersResponseBody(name='body'),
}

async function describeBindersWithOptions(request: DescribeBindersRequest, runtime: Util.RuntimeOptions): DescribeBindersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBinders',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBinders(request: DescribeBindersRequest): DescribeBindersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBindersWithOptions(request, runtime);
}

model DescribeClientPackageRequest {
  clientType?: string(name='ClientType'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeClientPackageResponseBody = {
  description?: string(name='Description'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  updateType?: string(name='UpdateType'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeClientPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientPackageResponseBody(name='body'),
}

async function describeClientPackageWithOptions(request: DescribeClientPackageRequest, runtime: Util.RuntimeOptions): DescribeClientPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientPackage',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientPackage(request: DescribeClientPackageRequest): DescribeClientPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientPackageWithOptions(request, runtime);
}

model DescribeEslDevicesRequest {
  pageNumber?: int32(name='PageNumber'),
  type?: string(name='Type'),
  pageSize?: int32(name='PageSize'),
  toBatteryLevel?: int32(name='ToBatteryLevel'),
  storeId?: string(name='StoreId'),
  eslStatus?: string(name='EslStatus'),
  eslBarCode?: string(name='EslBarCode'),
  fromBatteryLevel?: int32(name='FromBatteryLevel'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeEslDevicesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  eslDevices?: [ 
    {
      type?: string(name='Type'),
      storeId?: string(name='StoreId'),
      eslBarCode?: string(name='EslBarCode'),
      model?: string(name='Model'),
      lastCommunicateTime?: string(name='LastCommunicateTime'),
      screenHeight?: int32(name='ScreenHeight'),
      screenWidth?: int32(name='ScreenWidth'),
      batteryLevel?: int32(name='BatteryLevel'),
      eslStatus?: string(name='EslStatus'),
      mac?: string(name='Mac'),
    }
  ](name='EslDevices'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeEslDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEslDevicesResponseBody(name='body'),
}

async function describeEslDevicesWithOptions(request: DescribeEslDevicesRequest, runtime: Util.RuntimeOptions): DescribeEslDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEslDevices',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEslDevices(request: DescribeEslDevicesRequest): DescribeEslDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEslDevicesWithOptions(request, runtime);
}

model DescribeItemsRequest {
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  itemTitle?: string(name='ItemTitle'),
  skuId?: string(name='SkuId'),
  storeId?: string(name='StoreId'),
  itemBarCode?: string(name='ItemBarCode'),
  itemId?: string(name='ItemId'),
  bePromotion?: boolean(name='BePromotion'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeItemsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  items?: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      itemTitle?: string(name='ItemTitle'),
      brandName?: string(name='BrandName'),
      priceUnit?: string(name='PriceUnit'),
      sourceCode?: string(name='SourceCode'),
      forestFirstId?: string(name='ForestFirstId'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureK?: string(name='CustomizeFeatureK'),
      memberPrice?: int32(name='MemberPrice'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      promotionStart?: string(name='PromotionStart'),
      modelNumber?: string(name='ModelNumber'),
      categoryName?: string(name='CategoryName'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      suggestPrice?: int32(name='SuggestPrice'),
      saleSpec?: string(name='SaleSpec'),
      promotionText?: string(name='PromotionText'),
      rank?: string(name='Rank'),
      promotionReason?: string(name='PromotionReason'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      salesPrice?: int32(name='SalesPrice'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      originalPrice?: int32(name='OriginalPrice'),
      gmtModified?: string(name='GmtModified'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      productionPlace?: string(name='ProductionPlace'),
      itemShortTitle?: string(name='ItemShortTitle'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      customizeFeatureN?: string(name='CustomizeFeatureN'),
      taxFee?: string(name='TaxFee'),
      inventoryStatus?: string(name='InventoryStatus'),
      itemPicUrl?: string(name='ItemPicUrl'),
      supplierName?: string(name='SupplierName'),
      customizeFeatureL?: string(name='CustomizeFeatureL'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      itemId?: string(name='ItemId'),
      manufacturer?: string(name='Manufacturer'),
      material?: string(name='Material'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      customizeFeatureO?: string(name='CustomizeFeatureO'),
      skuId?: string(name='SkuId'),
      bePromotion?: boolean(name='BePromotion'),
      customizeFeatureM?: string(name='CustomizeFeatureM'),
      gmtCreate?: string(name='GmtCreate'),
      beSourceCode?: boolean(name='BeSourceCode'),
      forestSecondId?: string(name='ForestSecondId'),
      itemQrCode?: string(name='ItemQrCode'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      promotionEnd?: string(name='PromotionEnd'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='Items'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeItemsResponseBody(name='body'),
}

async function describeItemsWithOptions(request: DescribeItemsRequest, runtime: Util.RuntimeOptions): DescribeItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeItems',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeItems(request: DescribeItemsRequest): DescribeItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeItemsWithOptions(request, runtime);
}

model DescribePlanogramEslDevicesRequest {
  layer?: int32(name='Layer'),
  shelf?: string(name='Shelf'),
  storeId?: string(name='StoreId'),
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
}

model DescribePlanogramEslDevicesResponseBody = {
  storeId?: string(name='StoreId'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  shelf?: string(name='Shelf'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  eslDeviceLayerInfos?: [ 
    {
      layer?: int32(name='Layer'),
      eslDevicePositionInfos?: [ 
        {
          eslDevicePlanogramInfos?: [ 
            {
              eslBarCode?: string(name='EslBarCode'),
              itemTitle?: string(name='ItemTitle'),
              eslModel?: string(name='EslModel'),
              itemBarCode?: string(name='ItemBarCode'),
            }
          ](name='EslDevicePlanogramInfos'),
          column?: string(name='Column'),
        }
      ](name='EslDevicePositionInfos'),
    }
  ](name='EslDeviceLayerInfos'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribePlanogramEslDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlanogramEslDevicesResponseBody(name='body'),
}

async function describePlanogramEslDevicesWithOptions(request: DescribePlanogramEslDevicesRequest, runtime: Util.RuntimeOptions): DescribePlanogramEslDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePlanogramEslDevices',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePlanogramEslDevices(request: DescribePlanogramEslDevicesRequest): DescribePlanogramEslDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlanogramEslDevicesWithOptions(request, runtime);
}

model DescribePlanogramPositionsRequest {
  storeId?: string(name='StoreId'),
  layer?: int32(name='Layer'),
  shelf?: string(name='Shelf'),
  extraParams?: string(name='ExtraParams'),
}

model DescribePlanogramPositionsResponseBody = {
  storeId?: string(name='StoreId'),
  shelfType?: string(name='ShelfType'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  shelf?: string(name='Shelf'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  layerInfos?: [ 
    {
      layerOrigin?: string(name='LayerOrigin'),
      layer?: int32(name='Layer'),
      railCode?: string(name='RailCode'),
      shelfPositionInfos?: [ 
        {
          depth?: float(name='Depth'),
          itemTitle?: string(name='ItemTitle'),
          facing?: int32(name='Facing'),
          offsetTo?: float(name='OffsetTo'),
          offsetFrom?: float(name='OffsetFrom'),
          column?: string(name='Column'),
          itemBarCode?: string(name='ItemBarCode'),
        }
      ](name='ShelfPositionInfos'),
    }
  ](name='LayerInfos'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribePlanogramPositionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlanogramPositionsResponseBody(name='body'),
}

async function describePlanogramPositionsWithOptions(request: DescribePlanogramPositionsRequest, runtime: Util.RuntimeOptions): DescribePlanogramPositionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePlanogramPositions',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePlanogramPositions(request: DescribePlanogramPositionsRequest): DescribePlanogramPositionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlanogramPositionsWithOptions(request, runtime);
}

model DescribePlanogramRailsRequest {
  railCode?: string(name='RailCode'),
  pageSize?: int32(name='PageSize'),
  storeId?: string(name='StoreId'),
  shelf?: string(name='Shelf'),
  layer?: int32(name='Layer'),
  pageNumber?: int32(name='PageNumber'),
  extraParams?: string(name='ExtraParams'),
}

model DescribePlanogramRailsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  dynamicMessage?: string(name='DynamicMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  planogramRailInfos?: [ 
    {
      shelf?: string(name='Shelf'),
      gapUnit?: int32(name='GapUnit'),
      layer?: int32(name='Layer'),
      railCode?: string(name='RailCode'),
    }
  ](name='PlanogramRailInfos'),
  totalCount?: int32(name='TotalCount'),
  storeId?: string(name='StoreId'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model DescribePlanogramRailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlanogramRailsResponseBody(name='body'),
}

async function describePlanogramRailsWithOptions(request: DescribePlanogramRailsRequest, runtime: Util.RuntimeOptions): DescribePlanogramRailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePlanogramRails',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePlanogramRails(request: DescribePlanogramRailsRequest): DescribePlanogramRailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlanogramRailsWithOptions(request, runtime);
}

model DescribePlanogramShelvesRequest {
  storeId?: string(name='StoreId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  extraParams?: string(name='ExtraParams'),
}

model DescribePlanogramShelvesResponseBody = {
  shelfInfos?: [ 
    {
      shelf?: string(name='Shelf'),
      layerInfos?: [ 
        {
          layer?: int32(name='Layer'),
        }
      ](name='LayerInfos'),
      shelfType?: string(name='ShelfType'),
      beMatch?: boolean(name='BeMatch'),
      category?: string(name='Category'),
      zone?: string(name='Zone'),
    }
  ](name='ShelfInfos'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  dynamicMessage?: string(name='DynamicMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  storeId?: string(name='StoreId'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model DescribePlanogramShelvesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlanogramShelvesResponseBody(name='body'),
}

async function describePlanogramShelvesWithOptions(request: DescribePlanogramShelvesRequest, runtime: Util.RuntimeOptions): DescribePlanogramShelvesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePlanogramShelves',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePlanogramShelves(request: DescribePlanogramShelvesRequest): DescribePlanogramShelvesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlanogramShelvesWithOptions(request, runtime);
}

model DescribeRoleActionsRequest {
  roleCode?: string(name='RoleCode'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeRoleActionsResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  roleAclInfos?: [ 
    {
      roleCode?: string(name='RoleCode'),
      name?: string(name='Name'),
      accessControlLists?: [ 
        {
          code?: string(name='Code'),
        }
      ](name='AccessControlLists'),
    }
  ](name='RoleAclInfos'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeRoleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoleActionsResponseBody(name='body'),
}

async function describeRoleActionsWithOptions(request: DescribeRoleActionsRequest, runtime: Util.RuntimeOptions): DescribeRoleActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoleActions',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoleActions(request: DescribeRoleActionsRequest): DescribeRoleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoleActionsWithOptions(request, runtime);
}

model DescribeStoreConfigRequest {
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeStoreConfigResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  storeConfigInfo?: {
    storeId?: string(name='StoreId'),
    enableNotification?: boolean(name='EnableNotification'),
    notificationWebHook?: string(name='NotificationWebHook'),
    notificationSilentTimes?: string(name='NotificationSilentTimes'),
  }(name='StoreConfigInfo'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeStoreConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoreConfigResponseBody(name='body'),
}

async function describeStoreConfigWithOptions(request: DescribeStoreConfigRequest, runtime: Util.RuntimeOptions): DescribeStoreConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStoreConfig',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStoreConfig(request: DescribeStoreConfigRequest): DescribeStoreConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoreConfigWithOptions(request, runtime);
}

model DescribeStoresRequest {
  userStoreCode?: string(name='UserStoreCode'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  storeName?: string(name='StoreName'),
  toDate?: string(name='ToDate'),
  storeId?: string(name='StoreId'),
  fromDate?: string(name='FromDate'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeStoresResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  stores?: [ 
    {
      storeId?: string(name='StoreId'),
      parentId?: string(name='ParentId'),
      gmtCreate?: string(name='GmtCreate'),
      storeName?: string(name='StoreName'),
      gmtModified?: string(name='GmtModified'),
      level?: string(name='Level'),
      phone?: string(name='Phone'),
      userStoreCode?: string(name='UserStoreCode'),
    }
  ](name='Stores'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeStoresResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoresResponseBody(name='body'),
}

async function describeStoresWithOptions(request: DescribeStoresRequest, runtime: Util.RuntimeOptions): DescribeStoresResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStores',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStores(request: DescribeStoresRequest): DescribeStoresResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoresWithOptions(request, runtime);
}

model DescribeUserLogRequest {
  itemShortTitle?: string(name='ItemShortTitle'),
  operationType?: string(name='OperationType'),
  eslBarCode?: string(name='EslBarCode'),
  fromDate?: string(name='FromDate'),
  itemBarCode?: string(name='ItemBarCode'),
  storeId?: string(name='StoreId'),
  toDate?: string(name='ToDate'),
  logId?: string(name='LogId'),
  pageSize?: int32(name='PageSize'),
  operationStatus?: string(name='OperationStatus'),
  pageNumber?: int32(name='PageNumber'),
  userId?: string(name='UserId'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeUserLogResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  userLogs?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      operationSendTime?: string(name='OperationSendTime'),
      actionPrice?: string(name='ActionPrice'),
      priceUnit?: string(name='PriceUnit'),
      userId?: string(name='UserId'),
      resultCode?: string(name='ResultCode'),
      itemId?: string(name='ItemId'),
      gmtModified?: string(name='GmtModified'),
      operationType?: string(name='OperationType'),
      operationStatus?: string(name='OperationStatus'),
      operationResponseTime?: string(name='OperationResponseTime'),
      storeId?: string(name='StoreId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      logId?: string(name='LogId'),
      bePromotion?: boolean(name='BePromotion'),
      gmtCreate?: string(name='GmtCreate'),
      spendTime?: string(name='SpendTime'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='UserLogs'),
}

model DescribeUserLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLogResponseBody(name='body'),
}

async function describeUserLogWithOptions(request: DescribeUserLogRequest, runtime: Util.RuntimeOptions): DescribeUserLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserLog',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserLog(request: DescribeUserLogRequest): DescribeUserLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLogWithOptions(request, runtime);
}

model DescribeUsersRequest {
  userType?: string(name='UserType'),
  pageNumber?: int32(name='PageNumber'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
  pageSize?: int32(name='PageSize'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeUsersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  users?: [ 
    {
      userType?: string(name='UserType'),
      dingTalkInfos?: [ 
        {
          dingTalkUserId?: string(name='DingTalkUserId'),
          dingTalkCompanyId?: string(name='DingTalkCompanyId'),
        }
      ](name='DingTalkInfos'),
      userId?: string(name='UserId'),
      stores?: string(name='Stores'),
      userName?: string(name='UserName'),
      bid?: string(name='Bid'),
      ownerId?: string(name='OwnerId'),
    }
  ](name='Users'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsersWithOptions(request: DescribeUsersRequest, runtime: Util.RuntimeOptions): DescribeUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsers',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersWithOptions(request, runtime);
}

model DissociatePlanogramRailRequest {
  railCode?: string(name='RailCode'),
  storeId?: string(name='StoreId'),
  extraParams?: string(name='ExtraParams'),
}

model DissociatePlanogramRailResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DissociatePlanogramRailResponse = {
  headers: map[string]string(name='headers'),
  body: DissociatePlanogramRailResponseBody(name='body'),
}

async function dissociatePlanogramRailWithOptions(request: DissociatePlanogramRailRequest, runtime: Util.RuntimeOptions): DissociatePlanogramRailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DissociatePlanogramRail',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociatePlanogramRail(request: DissociatePlanogramRailRequest): DissociatePlanogramRailResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociatePlanogramRailWithOptions(request, runtime);
}

model GetUserRequest {
  userId?: string(name='UserId'),
  extraParams?: string(name='ExtraParams'),
}

model GetUserResponseBody = {
  user?: {
    userType?: string(name='UserType'),
    dingTalkInfos?: [ 
      {
        dingTalkUserId?: string(name='DingTalkUserId'),
        dingTalkCompanyId?: string(name='DingTalkCompanyId'),
      }
    ](name='DingTalkInfos'),
    userId?: string(name='UserId'),
    stores?: string(name='Stores'),
    userName?: string(name='UserName'),
    bid?: string(name='Bid'),
    ownerId?: string(name='OwnerId'),
  }(name='User'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model UnassignUserRequest {
  userId?: string(name='UserId'),
  extraParams?: string(name='ExtraParams'),
}

model UnassignUserResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UnassignUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignUserResponseBody(name='body'),
}

async function unassignUserWithOptions(request: UnassignUserRequest, runtime: Util.RuntimeOptions): UnassignUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnassignUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassignUser(request: UnassignUserRequest): UnassignUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignUserWithOptions(request, runtime);
}

model UnbindEslDeviceRequest {
  eslBarCode?: string(name='EslBarCode'),
  itemBarCode?: string(name='ItemBarCode'),
  column?: string(name='Column'),
  storeId?: string(name='StoreId'),
  shelf?: string(name='Shelf'),
  layer?: int32(name='Layer'),
  extraParams?: string(name='ExtraParams'),
}

model UnbindEslDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UnbindEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindEslDeviceResponseBody(name='body'),
}

async function unbindEslDeviceWithOptions(request: UnbindEslDeviceRequest, runtime: Util.RuntimeOptions): UnbindEslDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnbindEslDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindEslDevice(request: UnbindEslDeviceRequest): UnbindEslDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindEslDeviceWithOptions(request, runtime);
}

model UpdateEslDeviceLightRequest {
  ledColor?: string(name='LedColor'),
  frequency?: string(name='Frequency'),
  storeId?: string(name='StoreId'),
  itemBarCode?: string(name='ItemBarCode'),
  lightUpTime?: int32(name='LightUpTime'),
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
}

model UpdateEslDeviceLightResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  lightFailEslInfos?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      errorMessage?: string(name='ErrorMessage'),
    }
  ](name='LightFailEslInfos'),
  failCount?: int32(name='FailCount'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  successCount?: int32(name='SuccessCount'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateEslDeviceLightResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEslDeviceLightResponseBody(name='body'),
}

async function updateEslDeviceLightWithOptions(request: UpdateEslDeviceLightRequest, runtime: Util.RuntimeOptions): UpdateEslDeviceLightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEslDeviceLight',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEslDeviceLight(request: UpdateEslDeviceLightRequest): UpdateEslDeviceLightResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEslDeviceLightWithOptions(request, runtime);
}

model UpdateStoreRequest {
  storeId?: string(name='StoreId'),
  userStoreCode?: string(name='UserStoreCode'),
  storeName?: string(name='StoreName'),
  phone?: string(name='Phone'),
  extraParams?: string(name='ExtraParams'),
}

model UpdateStoreResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateStoreResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoreResponseBody(name='body'),
}

async function updateStoreWithOptions(request: UpdateStoreRequest, runtime: Util.RuntimeOptions): UpdateStoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStore',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateStore(request: UpdateStoreRequest): UpdateStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStoreWithOptions(request, runtime);
}

model UpdateStoreConfigRequest {
  notificationSilentTimes?: string(name='NotificationSilentTimes'),
  enableNotification?: boolean(name='EnableNotification'),
  storeId?: string(name='StoreId'),
  notificationWebHook?: string(name='NotificationWebHook'),
  extraParams?: string(name='ExtraParams'),
}

model UpdateStoreConfigResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateStoreConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoreConfigResponseBody(name='body'),
}

async function updateStoreConfigWithOptions(request: UpdateStoreConfigRequest, runtime: Util.RuntimeOptions): UpdateStoreConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStoreConfig',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateStoreConfig(request: UpdateStoreConfigRequest): UpdateStoreConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStoreConfigWithOptions(request, runtime);
}

model UpdateUserRequest {
  dingTalkUserId?: string(name='DingTalkUserId'),
  dingTalkCompanyId?: string(name='DingTalkCompanyId'),
  extraParams?: string(name='ExtraParams'),
  userId?: string(name='UserId'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  errorCode?: string(name='ErrorCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

