/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    ap-northeast-1 = 'cloudesl.aliyuncs.com',
    ap-northeast-2-pop = 'cloudesl.aliyuncs.com',
    ap-south-1 = 'cloudesl.aliyuncs.com',
    ap-southeast-1 = 'cloudesl.aliyuncs.com',
    ap-southeast-2 = 'cloudesl.aliyuncs.com',
    ap-southeast-3 = 'cloudesl.aliyuncs.com',
    ap-southeast-5 = 'cloudesl.aliyuncs.com',
    cn-beijing = 'cloudesl.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudesl.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudesl.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudesl.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudesl.aliyuncs.com',
    cn-chengdu = 'cloudesl.aliyuncs.com',
    cn-edge-1 = 'cloudesl.aliyuncs.com',
    cn-fujian = 'cloudesl.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-finance = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudesl.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudesl.aliyuncs.com',
    cn-hongkong = 'cloudesl.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudesl.aliyuncs.com',
    cn-huhehaote = 'cloudesl.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudesl.aliyuncs.com',
    cn-qingdao = 'cloudesl.aliyuncs.com',
    cn-qingdao-nebula = 'cloudesl.aliyuncs.com',
    cn-shanghai = 'cloudesl.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudesl.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudesl.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudesl.aliyuncs.com',
    cn-shanghai-inner = 'cloudesl.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudesl.aliyuncs.com',
    cn-shenzhen = 'cloudesl.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudesl.aliyuncs.com',
    cn-shenzhen-inner = 'cloudesl.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudesl.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudesl.aliyuncs.com',
    cn-wuhan = 'cloudesl.aliyuncs.com',
    cn-yushanfang = 'cloudesl.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudesl.aliyuncs.com',
    cn-zhangjiakou = 'cloudesl.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudesl.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudesl.aliyuncs.com',
    eu-central-1 = 'cloudesl.aliyuncs.com',
    eu-west-1 = 'cloudesl.aliyuncs.com',
    eu-west-1-oxs = 'cloudesl.aliyuncs.com',
    me-east-1 = 'cloudesl.aliyuncs.com',
    rus-west-1-pop = 'cloudesl.aliyuncs.com',
    us-east-1 = 'cloudesl.aliyuncs.com',
    us-west-1 = 'cloudesl.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudesl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ActivateApDeviceRequest {
  apMac?: string(name='ApMac'),
  extraParams?: string(name='ExtraParams'),
  storeId?: string(name='StoreId'),
}

model ActivateApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ActivateApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateApDeviceResponseBody(name='body'),
}

async function activateApDeviceWithOptions(request: ActivateApDeviceRequest, runtime: Util.RuntimeOptions): ActivateApDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ActivateApDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateApDevice(request: ActivateApDeviceRequest): ActivateApDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateApDeviceWithOptions(request, runtime);
}

model AddApDeviceRequest {
  apMac?: string(name='ApMac'),
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
  remark?: string(name='Remark'),
  serialNumber?: string(name='SerialNumber'),
  storeId?: string(name='StoreId'),
}

model AddApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddApDeviceResponseBody(name='body'),
}

async function addApDeviceWithOptions(request: AddApDeviceRequest, runtime: Util.RuntimeOptions): AddApDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddApDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addApDevice(request: AddApDeviceRequest): AddApDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addApDeviceWithOptions(request, runtime);
}

model AddUserRequest {
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
  userId?: string(name='UserId'),
}

model AddUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserResponseBody(name='body'),
}

async function addUserWithOptions(request: AddUserRequest, runtime: Util.RuntimeOptions): AddUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUser(request: AddUserRequest): AddUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserWithOptions(request, runtime);
}

model AssignUserRequest {
  extraParams?: string(name='ExtraParams'),
  stores?: string(name='Stores'),
  userId?: string(name='UserId'),
  userType?: string(name='UserType'),
}

model AssignUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignUserResponse = {
  headers: map[string]string(name='headers'),
  body: AssignUserResponseBody(name='body'),
}

async function assignUserWithOptions(request: AssignUserRequest, runtime: Util.RuntimeOptions): AssignUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AssignUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assignUser(request: AssignUserRequest): AssignUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignUserWithOptions(request, runtime);
}

model BatchInsertItemsRequest {
  extraParams?: string(name='ExtraParams'),
  itemInfo?: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      itemTitle?: string(name='ItemTitle'),
      brandName?: string(name='BrandName'),
      sourceCode?: string(name='SourceCode'),
      priceUnit?: string(name='PriceUnit'),
      forestFirstId?: string(name='ForestFirstId'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureK?: string(name='CustomizeFeatureK'),
      templateSceneId?: string(name='TemplateSceneId'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      memberPrice?: int32(name='MemberPrice'),
      modelNumber?: string(name='ModelNumber'),
      promotionStart?: string(name='PromotionStart'),
      categoryName?: string(name='CategoryName'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      suggestPrice?: int32(name='SuggestPrice'),
      saleSpec?: string(name='SaleSpec'),
      promotionText?: string(name='PromotionText'),
      promotionReason?: string(name='PromotionReason'),
      rank?: string(name='Rank'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      salesPrice?: int32(name='SalesPrice'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      originalPrice?: int32(name='OriginalPrice'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      productionPlace?: string(name='ProductionPlace'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      itemShortTitle?: string(name='ItemShortTitle'),
      customizeFeatureN?: string(name='CustomizeFeatureN'),
      beMember?: boolean(name='BeMember'),
      taxFee?: string(name='TaxFee'),
      inventoryStatus?: string(name='InventoryStatus'),
      itemPicUrl?: string(name='ItemPicUrl'),
      supplierName?: string(name='SupplierName'),
      customizeFeatureL?: string(name='CustomizeFeatureL'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      itemId?: string(name='ItemId'),
      manufacturer?: string(name='Manufacturer'),
      material?: string(name='Material'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      customizeFeatureO?: string(name='CustomizeFeatureO'),
      skuId?: string(name='SkuId'),
      customizeFeatureM?: string(name='CustomizeFeatureM'),
      bePromotion?: boolean(name='BePromotion'),
      beSourceCode?: boolean(name='BeSourceCode'),
      forestSecondId?: string(name='ForestSecondId'),
      itemQrCode?: string(name='ItemQrCode'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      promotionEnd?: string(name='PromotionEnd'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='ItemInfo'),
  storeId?: string(name='StoreId'),
  syncByItemId?: boolean(name='SyncByItemId'),
}

model BatchInsertItemsResponseBody = {
  batchResults?: [ 
    {
      index?: int32(name='Index'),
      message?: string(name='Message'),
      success?: boolean(name='Success'),
      errorCode?: string(name='ErrorCode'),
    }
  ](name='BatchResults'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchInsertItemsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchInsertItemsResponseBody(name='body'),
}

async function batchInsertItemsWithOptions(request: BatchInsertItemsRequest, runtime: Util.RuntimeOptions): BatchInsertItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BatchInsertItems',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchInsertItems(request: BatchInsertItemsRequest): BatchInsertItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchInsertItemsWithOptions(request, runtime);
}

model BindEslDeviceRequest {
  column?: string(name='Column'),
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
  itemBarCode?: string(name='ItemBarCode'),
  layer?: int32(name='Layer'),
  shelf?: string(name='Shelf'),
  storeId?: string(name='StoreId'),
}

model BindEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindEslDeviceResponseBody(name='body'),
}

async function bindEslDeviceWithOptions(request: BindEslDeviceRequest, runtime: Util.RuntimeOptions): BindEslDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindEslDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindEslDevice(request: BindEslDeviceRequest): BindEslDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindEslDeviceWithOptions(request, runtime);
}

model ConfirmServerLocationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmServerLocationResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmServerLocationResponseBody(name='body'),
}

async function confirmServerLocationWithOptions(runtime: Util.RuntimeOptions): ConfirmServerLocationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ConfirmServerLocation',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmServerLocation(): ConfirmServerLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmServerLocationWithOptions(runtime);
}

model CreateStoreRequest {
  clientToken?: string(name='ClientToken'),
  extraParams?: string(name='ExtraParams'),
  parentId?: string(name='ParentId'),
  phone?: string(name='Phone'),
  storeName?: string(name='StoreName'),
  timeZone?: string(name='TimeZone'),
  userStoreCode?: string(name='UserStoreCode'),
}

model CreateStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storeId?: string(name='StoreId'),
  success?: boolean(name='Success'),
}

model CreateStoreResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStoreResponseBody(name='body'),
}

async function createStoreWithOptions(request: CreateStoreRequest, runtime: Util.RuntimeOptions): CreateStoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateStore',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStore(request: CreateStoreRequest): CreateStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStoreWithOptions(request, runtime);
}

model DeleteApDeviceRequest {
  apMac?: string(name='ApMac'),
  extraParams?: string(name='ExtraParams'),
  storeId?: string(name='StoreId'),
}

model DeleteApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteApDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApDeviceResponseBody(name='body'),
}

async function deleteApDeviceWithOptions(request: DeleteApDeviceRequest, runtime: Util.RuntimeOptions): DeleteApDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApDevice(request: DeleteApDeviceRequest): DeleteApDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApDeviceWithOptions(request, runtime);
}

model DeleteItemRequest {
  itemBarCode?: string(name='ItemBarCode'),
  storeId?: string(name='StoreId'),
  unbindEslDevice?: boolean(name='UnbindEslDevice'),
}

model DeleteItemResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteItemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteItemResponseBody(name='body'),
}

async function deleteItemWithOptions(request: DeleteItemRequest, runtime: Util.RuntimeOptions): DeleteItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteItem',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteItem(request: DeleteItemRequest): DeleteItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteItemWithOptions(request, runtime);
}

model DeleteStoreRequest {
  extraParams?: string(name='ExtraParams'),
  storeId?: string(name='StoreId'),
}

model DeleteStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteStoreResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStoreResponseBody(name='body'),
}

async function deleteStoreWithOptions(request: DeleteStoreRequest, runtime: Util.RuntimeOptions): DeleteStoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStore',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStore(request: DeleteStoreRequest): DeleteStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStoreWithOptions(request, runtime);
}

model DeleteUserRequest {
  extraParams?: string(name='ExtraParams'),
  userId?: string(name='UserId'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DescribeApDevicesRequest {
  apMac?: string(name='ApMac'),
  beActivate?: boolean(name='BeActivate'),
  extraParams?: string(name='ExtraParams'),
  model?: string(name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: boolean(name='Status'),
  storeId?: string(name='StoreId'),
}

model DescribeApDevicesResponseBody = {
  apDevices?: [ 
    {
      status?: boolean(name='Status'),
      storeId?: string(name='StoreId'),
      model?: string(name='Model'),
      remark?: string(name='Remark'),
      beActivate?: boolean(name='BeActivate'),
      mac?: string(name='Mac'),
    }
  ](name='ApDevices'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApDevicesResponseBody(name='body'),
}

async function describeApDevicesWithOptions(request: DescribeApDevicesRequest, runtime: Util.RuntimeOptions): DescribeApDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApDevices',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApDevices(request: DescribeApDevicesRequest): DescribeApDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApDevicesWithOptions(request, runtime);
}

model DescribeBindersRequest {
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
  itemBarCode?: string(name='ItemBarCode'),
  itemTitle?: string(name='ItemTitle'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  storeId?: string(name='StoreId'),
}

model DescribeBindersResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  eslItemBindInfos?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      templateSceneId?: string(name='TemplateSceneId'),
      actionPrice?: string(name='ActionPrice'),
      itemTitle?: string(name='ItemTitle'),
      promotionStart?: string(name='PromotionStart'),
      priceUnit?: string(name='PriceUnit'),
      originalPrice?: string(name='OriginalPrice'),
      itemId?: string(name='ItemId'),
      gmtModified?: string(name='GmtModified'),
      eslPic?: string(name='EslPic'),
      storeId?: string(name='StoreId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      bindId?: string(name='BindId'),
      promotionText?: string(name='PromotionText'),
      eslModel?: string(name='EslModel'),
      bePromotion?: boolean(name='BePromotion'),
      skuId?: string(name='SkuId'),
      eslConnectAp?: string(name='EslConnectAp'),
      eslStatus?: string(name='EslStatus'),
      templateId?: string(name='TemplateId'),
      promotionEnd?: string(name='PromotionEnd'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='EslItemBindInfos'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBindersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBindersResponseBody(name='body'),
}

async function describeBindersWithOptions(request: DescribeBindersRequest, runtime: Util.RuntimeOptions): DescribeBindersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBinders',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBinders(request: DescribeBindersRequest): DescribeBindersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBindersWithOptions(request, runtime);
}

model DescribeClientPackageRequest {
  clientType?: string(name='ClientType'),
  extraParams?: string(name='ExtraParams'),
}

model DescribeClientPackageResponseBody = {
  code?: string(name='Code'),
  description?: string(name='Description'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  updateType?: string(name='UpdateType'),
  url?: string(name='Url'),
  version?: string(name='Version'),
}

model DescribeClientPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientPackageResponseBody(name='body'),
}

async function describeClientPackageWithOptions(request: DescribeClientPackageRequest, runtime: Util.RuntimeOptions): DescribeClientPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientPackage',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientPackage(request: DescribeClientPackageRequest): DescribeClientPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientPackageWithOptions(request, runtime);
}

model DescribeEslDeviceRequest {
  fromDate?: string(name='FromDate'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  storeId?: string(name='StoreId'),
  toDate?: string(name='ToDate'),
}

model DescribeEslDeviceResponseBody = {
  eslDetails?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      lastUpdateTime?: string(name='LastUpdateTime'),
      itemBarCode?: long(name='ItemBarCode'),
      itemId?: long(name='ItemId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      status?: string(name='Status'),
      storeId?: string(name='StoreId'),
    }
  ](name='EslDetails'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEslDeviceResponseBody(name='body'),
}

async function describeEslDeviceWithOptions(request: DescribeEslDeviceRequest, runtime: Util.RuntimeOptions): DescribeEslDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEslDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEslDevice(request: DescribeEslDeviceRequest): DescribeEslDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEslDeviceWithOptions(request, runtime);
}

model DescribeEslDevicesRequest {
  eslBarCode?: string(name='EslBarCode'),
  eslStatus?: string(name='EslStatus'),
  extraParams?: string(name='ExtraParams'),
  fromBatteryLevel?: int32(name='FromBatteryLevel'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  storeId?: string(name='StoreId'),
  toBatteryLevel?: int32(name='ToBatteryLevel'),
  type?: string(name='Type'),
}

model DescribeEslDevicesResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  eslDevices?: [ 
    {
      type?: string(name='Type'),
      storeId?: string(name='StoreId'),
      eslBarCode?: string(name='EslBarCode'),
      model?: string(name='Model'),
      lastCommunicateTime?: string(name='LastCommunicateTime'),
      screenHeight?: int32(name='ScreenHeight'),
      screenWidth?: int32(name='ScreenWidth'),
      eslSignal?: int32(name='EslSignal'),
      batteryLevel?: int32(name='BatteryLevel'),
      eslStatus?: string(name='EslStatus'),
      mac?: string(name='Mac'),
    }
  ](name='EslDevices'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEslDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEslDevicesResponseBody(name='body'),
}

async function describeEslDevicesWithOptions(request: DescribeEslDevicesRequest, runtime: Util.RuntimeOptions): DescribeEslDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEslDevices',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEslDevices(request: DescribeEslDevicesRequest): DescribeEslDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEslDevicesWithOptions(request, runtime);
}

model DescribeItemsRequest {
  bePromotion?: boolean(name='BePromotion'),
  extraParams?: string(name='ExtraParams'),
  itemBarCode?: string(name='ItemBarCode'),
  itemId?: string(name='ItemId'),
  itemTitle?: string(name='ItemTitle'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skuId?: string(name='SkuId'),
  storeId?: string(name='StoreId'),
}

model DescribeItemsResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  items?: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      itemTitle?: string(name='ItemTitle'),
      brandName?: string(name='BrandName'),
      sourceCode?: string(name='SourceCode'),
      priceUnit?: string(name='PriceUnit'),
      forestFirstId?: string(name='ForestFirstId'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureK?: string(name='CustomizeFeatureK'),
      templateSceneId?: string(name='TemplateSceneId'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      memberPrice?: int32(name='MemberPrice'),
      promotionStart?: string(name='PromotionStart'),
      modelNumber?: string(name='ModelNumber'),
      categoryName?: string(name='CategoryName'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      suggestPrice?: int32(name='SuggestPrice'),
      saleSpec?: string(name='SaleSpec'),
      promotionText?: string(name='PromotionText'),
      rank?: string(name='Rank'),
      promotionReason?: string(name='PromotionReason'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      salesPrice?: int32(name='SalesPrice'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      originalPrice?: int32(name='OriginalPrice'),
      gmtModified?: string(name='GmtModified'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      productionPlace?: string(name='ProductionPlace'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      itemShortTitle?: string(name='ItemShortTitle'),
      customizeFeatureN?: string(name='CustomizeFeatureN'),
      beMember?: boolean(name='BeMember'),
      taxFee?: string(name='TaxFee'),
      inventoryStatus?: string(name='InventoryStatus'),
      supplierName?: string(name='SupplierName'),
      itemPicUrl?: string(name='ItemPicUrl'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      customizeFeatureL?: string(name='CustomizeFeatureL'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      itemId?: string(name='ItemId'),
      manufacturer?: string(name='Manufacturer'),
      material?: string(name='Material'),
      customizeFeatureO?: string(name='CustomizeFeatureO'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      gmtCreate?: string(name='GmtCreate'),
      customizeFeatureM?: string(name='CustomizeFeatureM'),
      bePromotion?: boolean(name='BePromotion'),
      skuId?: string(name='SkuId'),
      beSourceCode?: boolean(name='BeSourceCode'),
      forestSecondId?: string(name='ForestSecondId'),
      itemQrCode?: string(name='ItemQrCode'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      promotionEnd?: string(name='PromotionEnd'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='Items'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  templateSceneId?: string(name='TemplateSceneId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeItemsResponseBody(name='body'),
}

async function describeItemsWithOptions(request: DescribeItemsRequest, runtime: Util.RuntimeOptions): DescribeItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeItems',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeItems(request: DescribeItemsRequest): DescribeItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeItemsWithOptions(request, runtime);
}

model DescribeStoreConfigRequest {
  extraParams?: string(name='ExtraParams'),
  storeId?: string(name='StoreId'),
}

model DescribeStoreConfigResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storeConfigInfo?: {
    enableNotification?: boolean(name='EnableNotification'),
    notificationSilentTimes?: string(name='NotificationSilentTimes'),
    notificationWebHook?: string(name='NotificationWebHook'),
    storeId?: string(name='StoreId'),
  }(name='StoreConfigInfo'),
  success?: boolean(name='Success'),
}

model DescribeStoreConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoreConfigResponseBody(name='body'),
}

async function describeStoreConfigWithOptions(request: DescribeStoreConfigRequest, runtime: Util.RuntimeOptions): DescribeStoreConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStoreConfig',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStoreConfig(request: DescribeStoreConfigRequest): DescribeStoreConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoreConfigWithOptions(request, runtime);
}

model DescribeStoresRequest {
  extraParams?: string(name='ExtraParams'),
  fromDate?: string(name='FromDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  storeId?: string(name='StoreId'),
  storeName?: string(name='StoreName'),
  templateVersion?: string(name='TemplateVersion'),
  toDate?: string(name='ToDate'),
  userStoreCode?: string(name='UserStoreCode'),
}

model DescribeStoresResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  stores?: [ 
    {
      storeId?: string(name='StoreId'),
      parentId?: string(name='ParentId'),
      timeZone?: string(name='TimeZone'),
      gmtCreate?: string(name='GmtCreate'),
      storeName?: string(name='StoreName'),
      gmtModified?: string(name='GmtModified'),
      templateVersion?: string(name='TemplateVersion'),
      level?: string(name='Level'),
      phone?: string(name='Phone'),
      userStoreCode?: string(name='UserStoreCode'),
    }
  ](name='Stores'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStoresResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoresResponseBody(name='body'),
}

async function describeStoresWithOptions(request: DescribeStoresRequest, runtime: Util.RuntimeOptions): DescribeStoresResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStores',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStores(request: DescribeStoresRequest): DescribeStoresResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoresWithOptions(request, runtime);
}

model DescribeUserLogRequest {
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
  fromDate?: string(name='FromDate'),
  itemBarCode?: string(name='ItemBarCode'),
  itemShortTitle?: string(name='ItemShortTitle'),
  logId?: string(name='LogId'),
  operationStatus?: string(name='OperationStatus'),
  operationType?: string(name='OperationType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  storeId?: string(name='StoreId'),
  toDate?: string(name='ToDate'),
  userId?: string(name='UserId'),
}

model DescribeUserLogResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  userLogs?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      operationSendTime?: string(name='OperationSendTime'),
      actionPrice?: string(name='ActionPrice'),
      userId?: string(name='UserId'),
      priceUnit?: string(name='PriceUnit'),
      resultCode?: string(name='ResultCode'),
      itemId?: string(name='ItemId'),
      gmtModified?: string(name='GmtModified'),
      operationType?: string(name='OperationType'),
      operationResponseTime?: string(name='OperationResponseTime'),
      operationStatus?: string(name='OperationStatus'),
      storeId?: string(name='StoreId'),
      itemShortTitle?: string(name='ItemShortTitle'),
      logId?: string(name='LogId'),
      bePromotion?: boolean(name='BePromotion'),
      gmtCreate?: string(name='GmtCreate'),
      eslSignal?: int32(name='EslSignal'),
      spendTime?: string(name='SpendTime'),
      itemBarCode?: string(name='ItemBarCode'),
    }
  ](name='UserLogs'),
}

model DescribeUserLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLogResponseBody(name='body'),
}

async function describeUserLogWithOptions(request: DescribeUserLogRequest, runtime: Util.RuntimeOptions): DescribeUserLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserLog',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserLog(request: DescribeUserLogRequest): DescribeUserLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLogWithOptions(request, runtime);
}

model DescribeUsersRequest {
  extraParams?: string(name='ExtraParams'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
  userType?: string(name='UserType'),
}

model DescribeUsersResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  users?: [ 
    {
      userType?: string(name='UserType'),
      userId?: string(name='UserId'),
      stores?: string(name='Stores'),
      userName?: string(name='UserName'),
      bid?: string(name='Bid'),
      ownerId?: string(name='OwnerId'),
      dingTalkInfos?: [ 
        {
          dingTalkCompanyId?: string(name='DingTalkCompanyId'),
          dingTalkUserId?: string(name='DingTalkUserId'),
        }
      ](name='DingTalkInfos'),
    }
  ](name='Users'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsersWithOptions(request: DescribeUsersRequest, runtime: Util.RuntimeOptions): DescribeUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsers',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersWithOptions(request, runtime);
}

model GetUserRequest {
  extraParams?: string(name='ExtraParams'),
  userId?: string(name='UserId'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  user?: {
    bid?: string(name='Bid'),
    dingTalkInfos?: [ 
      {
        dingTalkCompanyId?: string(name='DingTalkCompanyId'),
        dingTalkUserId?: string(name='DingTalkUserId'),
      }
    ](name='DingTalkInfos'),
    ownerId?: string(name='OwnerId'),
    stores?: string(name='Stores'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    userType?: string(name='UserType'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model UnassignUserRequest {
  extraParams?: string(name='ExtraParams'),
  userId?: string(name='UserId'),
}

model UnassignUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnassignUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignUserResponseBody(name='body'),
}

async function unassignUserWithOptions(request: UnassignUserRequest, runtime: Util.RuntimeOptions): UnassignUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnassignUser',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassignUser(request: UnassignUserRequest): UnassignUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignUserWithOptions(request, runtime);
}

model UnbindEslDeviceRequest {
  column?: string(name='Column'),
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
  itemBarCode?: string(name='ItemBarCode'),
  layer?: int32(name='Layer'),
  shelf?: string(name='Shelf'),
  storeId?: string(name='StoreId'),
}

model UnbindEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindEslDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindEslDeviceResponseBody(name='body'),
}

async function unbindEslDeviceWithOptions(request: UnbindEslDeviceRequest, runtime: Util.RuntimeOptions): UnbindEslDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnbindEslDevice',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindEslDevice(request: UnbindEslDeviceRequest): UnbindEslDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindEslDeviceWithOptions(request, runtime);
}

model UpdateEslDeviceLightRequest {
  eslBarCode?: string(name='EslBarCode'),
  extraParams?: string(name='ExtraParams'),
  frequency?: string(name='Frequency'),
  itemBarCode?: string(name='ItemBarCode'),
  ledColor?: string(name='LedColor'),
  lightUpTime?: int32(name='LightUpTime'),
  storeId?: string(name='StoreId'),
}

model UpdateEslDeviceLightResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  failCount?: int32(name='FailCount'),
  lightFailEslInfos?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      errorMessage?: string(name='ErrorMessage'),
    }
  ](name='LightFailEslInfos'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successCount?: int32(name='SuccessCount'),
}

model UpdateEslDeviceLightResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEslDeviceLightResponseBody(name='body'),
}

async function updateEslDeviceLightWithOptions(request: UpdateEslDeviceLightRequest, runtime: Util.RuntimeOptions): UpdateEslDeviceLightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEslDeviceLight',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEslDeviceLight(request: UpdateEslDeviceLightRequest): UpdateEslDeviceLightResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEslDeviceLightWithOptions(request, runtime);
}

model UpdateStoreRequest {
  extraParams?: string(name='ExtraParams'),
  phone?: string(name='Phone'),
  storeId?: string(name='StoreId'),
  storeName?: string(name='StoreName'),
  templateVersion?: string(name='TemplateVersion'),
  timezone?: string(name='Timezone'),
  userStoreCode?: string(name='UserStoreCode'),
}

model UpdateStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateStoreResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoreResponseBody(name='body'),
}

async function updateStoreWithOptions(request: UpdateStoreRequest, runtime: Util.RuntimeOptions): UpdateStoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStore',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateStore(request: UpdateStoreRequest): UpdateStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStoreWithOptions(request, runtime);
}

model UpdateStoreConfigRequest {
  enableNotification?: boolean(name='EnableNotification'),
  extraParams?: string(name='ExtraParams'),
  notificationSilentTimes?: string(name='NotificationSilentTimes'),
  notificationWebHook?: string(name='NotificationWebHook'),
  storeId?: string(name='StoreId'),
}

model UpdateStoreConfigResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateStoreConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoreConfigResponseBody(name='body'),
}

async function updateStoreConfigWithOptions(request: UpdateStoreConfigRequest, runtime: Util.RuntimeOptions): UpdateStoreConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStoreConfig',
    version = '2020-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateStoreConfig(request: UpdateStoreConfigRequest): UpdateStoreConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStoreConfigWithOptions(request, runtime);
}

