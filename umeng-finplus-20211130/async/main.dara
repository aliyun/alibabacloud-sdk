/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'umeng-finplus';
  @version = '2021-11-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelComputeTaskByBcIdRequest {
  bcId: long(name='bcId', position='Query'),
}

model CancelComputeTaskByBcIdResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelComputeTaskByBcIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelComputeTaskByBcIdResponseBody(name='body'),
}

async function cancelComputeTaskByBcId(request: CancelComputeTaskByBcIdRequest): CancelComputeTaskByBcIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelComputeTaskByBcId', 'POST', '/batch_compute/cancelComputeTaskByBcId', 'json', false, 'json', request);
}

model CreateComputeTaskByDataSetIdRequest {
  batchInfoForm: [ 
    {
      appId: long(name='AppId'),
      cuVersions?: [ 
        {
          cuId?: string(name='CuId'),
          cuVersion?: string(name='CuVersion'),
        }
      ](name='CuVersions'),
    }
  ](name='BatchInfoForm', position='Body'),
  datasetId: long(name='DatasetId', position='Body'),
  name: string(name='Name', position='Body'),
  remarks?: string(name='Remarks', position='Body'),
}

model CreateComputeTaskByDataSetIdResponseBody = {
  code?: string(name='Code'),
  data?: [ long ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateComputeTaskByDataSetIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateComputeTaskByDataSetIdResponseBody(name='body'),
}

async function createComputeTaskByDataSetId(request: CreateComputeTaskByDataSetIdRequest): CreateComputeTaskByDataSetIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateComputeTaskByDataSetId', 'POST', '/batch_compute/createComputeTaskByDataSetId', 'json', false, 'json', request);
}

model CreateComputeTaskByMultiDataSetIdRequest {
  appId?: long(name='appId', position='Body'),
  dataSetIds?: string(name='dataSetIds', position='Body'),
  name?: string(name='name', position='Body'),
  remarks?: string(name='remarks', position='Body'),
}

model CreateComputeTaskByMultiDataSetIdResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateComputeTaskByMultiDataSetIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateComputeTaskByMultiDataSetIdResponseBody(name='body'),
}

async function createComputeTaskByMultiDataSetId(request: CreateComputeTaskByMultiDataSetIdRequest): CreateComputeTaskByMultiDataSetIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateComputeTaskByMultiDataSetId', 'POST', '/batch_compute/createComputeTaskByMultiDataSetId', 'json', true, 'form', request);
}

model GetAvailableDataSetListRequest {
}

model GetAvailableDataSetListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: string(name='createTime'),
      dataSetType?: int32(name='dataSetType'),
      datasetId?: long(name='datasetId'),
      idTypeDesc?: string(name='idTypeDesc'),
      name?: string(name='name'),
      statusDesc?: string(name='statusDesc'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetAvailableDataSetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvailableDataSetListResponseBody(name='body'),
}

async function getAvailableDataSetList(request: GetAvailableDataSetListRequest): GetAvailableDataSetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAvailableDataSetList', 'GET', '/batch_compute/getAvailableDataSetList', 'json', false, 'json', request);
}

model GetComputeResultRequest {
  bcId?: long(name='bcId', position='Query'),
}

model GetComputeResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    bcId?: long(name='bcId'),
    billedNum?: long(name='billedNum'),
    code10000Num?: long(name='code10000Num'),
    code108Num?: long(name='code108Num'),
    code109Num?: long(name='code109Num'),
    exportFileName?: string(name='exportFileName'),
    fileLineNumber?: long(name='fileLineNumber'),
    name?: string(name='name'),
    password?: string(name='password'),
    state?: string(name='state'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetComputeResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetComputeResultResponseBody(name='body'),
}

async function getComputeResult(request: GetComputeResultRequest): GetComputeResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetComputeResult', 'GET', '/batch_compute/getComputeTaskResult', 'json', false, 'json', request);
}

model GetDataSetStatusRequest {
  dataSetId: long(name='dataSetId', position='Query'),
}

model GetDataSetStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: string(name='createTime'),
    dataSetType?: int32(name='dataSetType'),
    datasetId?: long(name='datasetId'),
    idTypeDesc?: string(name='idTypeDesc'),
    message?: string(name='message'),
    name?: string(name='name'),
    statusDesc?: string(name='statusDesc'),
  }(name='Data'),
  msg?: string(name='Msg'),
  success?: boolean(name='Success'),
  requestId?: string(name='requestId'),
}

model GetDataSetStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSetStatusResponseBody(name='body'),
}

async function getDataSetStatus(request: GetDataSetStatusRequest): GetDataSetStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSetStatus', 'GET', '/batch_compute/getDataSetStatus', 'json', false, 'json', request);
}

model GetDataSetStsAKRequest {
}

model GetDataSetStsAKResponseBody = {
  code?: string(name='Code'),
  data?: {
    bucket?: string(name='Bucket'),
    endpoint?: string(name='Endpoint'),
    id?: string(name='Id'),
    path?: string(name='Path'),
    secret?: string(name='Secret'),
    token?: string(name='Token'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataSetStsAKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSetStsAKResponseBody(name='body'),
}

async function getDataSetStsAK(request: GetDataSetStsAKRequest): GetDataSetStsAKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSetStsAK', 'GET', '/batch_compute/getDataSetStsAk', 'json', false, 'json', request);
}

model SubmitDataSetTaskRequest {
  dataSetType: int32(name='dataSetType', position='Body'),
  idType: int32(name='idType', position='Body'),
  name: string(name='name', position='Body'),
  ossFileName: string(name='ossFileName', position='Body'),
}

model SubmitDataSetTaskResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  success?: boolean(name='Success'),
  requestId?: string(name='requestId'),
}

model SubmitDataSetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDataSetTaskResponseBody(name='body'),
}

async function submitDataSetTask(request: SubmitDataSetTaskRequest): SubmitDataSetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitDataSetTask', 'POST', '/batch_compute/submitDataSetTask', 'json', false, 'json', request);
}

model CancelYydTaskByBcIdRequest {
  bcId: long(name='bcId', position='Query'),
}

model CancelYydTaskByBcIdResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelYydTaskByBcIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelYydTaskByBcIdResponseBody(name='body'),
}

async function cancelYydTaskByBcId(request: CancelYydTaskByBcIdRequest): CancelYydTaskByBcIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'cancelYydTaskByBcId', 'POST', '/batch_compute/yyd/task/cancel', 'json', false, 'json', request);
}

model CreateYydComputeTaskRequest {
  datasetId: long(name='DatasetId', position='Body'),
  name: string(name='Name', position='Body'),
  remarks?: string(name='Remarks', position='Body'),
  appId?: long(name='appId', position='Body'),
}

model CreateYydComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateYydComputeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateYydComputeTaskResponseBody(name='body'),
}

async function createYydComputeTask(request: CreateYydComputeTaskRequest): CreateYydComputeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'createYydComputeTask', 'POST', '/batch_compute/yyd/task/create', 'json', false, 'json', request);
}

model CreateYydDataSetRequest {
  name: string(name='name', position='Body'),
  ossFileName: string(name='ossFileName', position='Body'),
}

model CreateYydDataSetResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  success?: boolean(name='Success'),
  requestId?: string(name='requestId'),
}

model CreateYydDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateYydDataSetResponseBody(name='body'),
}

async function createYydDataSet(request: CreateYydDataSetRequest): CreateYydDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'createYydDataSet', 'POST', '/batch_compute/yyd/dataset/create', 'json', false, 'json', request);
}

model ListYydComputeTaskListRequest {
}

model ListYydComputeTaskListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appId?: long(name='appId'),
      bcId?: long(name='bcId'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      name?: string(name='name'),
      remarks?: string(name='remarks'),
      state?: string(name='state'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListYydComputeTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListYydComputeTaskListResponseBody(name='body'),
}

async function listYydComputeTaskList(request: ListYydComputeTaskListRequest): ListYydComputeTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'listYydComputeTaskList', 'POST', '/batch_compute/yyd/task/list', 'json', false, 'json', request);
}

model ListYydDataSetRequest {
}

model ListYydDataSetResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: string(name='createTime'),
      dataSetType?: int32(name='dataSetType'),
      datasetId?: long(name='datasetId'),
      idTypeDesc?: string(name='idTypeDesc'),
      message?: string(name='message'),
      name?: string(name='name'),
      statusDesc?: string(name='statusDesc'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  success?: boolean(name='Success'),
  requestId?: string(name='requestId'),
}

model ListYydDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListYydDataSetResponseBody(name='body'),
}

async function listYydDataSet(request: ListYydDataSetRequest): ListYydDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'listYydDataSet', 'POST', '/batch_compute/yyd/dataset/list', 'json', false, 'json', request);
}

