/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('umeng-finplus', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelComputeTaskByBcIdRequest {
  bcId?: long(name='bcId'),
}

model CancelComputeTaskByBcIdResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: boolean(name='Data', description='逻辑删除操作是否成功'),
  msg?: string(name='Msg', description='消息描述'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='http请求是否成功'),
}

model CancelComputeTaskByBcIdResponse = {
  headers: map[string]string(name='headers'),
  body: CancelComputeTaskByBcIdResponseBody(name='body'),
}

async function cancelComputeTaskByBcId(request: CancelComputeTaskByBcIdRequest): CancelComputeTaskByBcIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelComputeTaskByBcIdWithOptions(request, headers, runtime);
}

async function cancelComputeTaskByBcIdWithOptions(request: CancelComputeTaskByBcIdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelComputeTaskByBcIdResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.bcId)) {
    query['bcId'] = request.bcId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelComputeTaskByBcId',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/cancelComputeTaskByBcId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateComputeTaskByDataSetIdRequest {
  batchInfoForm?: [ 
    {
      appId?: long(name='AppId'),
      cuVersions?: [ 
        {
          cuId?: string(name='CuId'),
          cuVersion?: string(name='CuVersion'),
        }
      ](name='CuVersions'),
    }
  ](name='BatchInfoForm'),
  datasetId?: long(name='DatasetId'),
  name?: string(name='Name'),
  remarks?: string(name='Remarks'),
}

model CreateComputeTaskByDataSetIdResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: [ long ](name='Data', description='批量计算任务ID'),
  msg?: string(name='Msg', description='状态描述'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否成功'),
}

model CreateComputeTaskByDataSetIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateComputeTaskByDataSetIdResponseBody(name='body'),
}

async function createComputeTaskByDataSetId(request: CreateComputeTaskByDataSetIdRequest): CreateComputeTaskByDataSetIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createComputeTaskByDataSetIdWithOptions(request, headers, runtime);
}

async function createComputeTaskByDataSetIdWithOptions(request: CreateComputeTaskByDataSetIdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateComputeTaskByDataSetIdResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.batchInfoForm)) {
    body['BatchInfoForm'] = request.batchInfoForm;
  }
  if (!Util.isUnset(request.datasetId)) {
    body['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remarks)) {
    body['Remarks'] = request.remarks;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateComputeTaskByDataSetId',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/createComputeTaskByDataSetId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAvailableDataSetListResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: [ 
    {
      createTime?: string(name='createTime', description='创建时间'),
      dataSetType?: int32(name='dataSetType', description='数据集类型'),
      datasetId?: long(name='datasetId', description='数据集id'),
      idTypeDesc?: string(name='idTypeDesc', description='id类型描述'),
      name?: string(name='name', description='数据集名称'),
      statusDesc?: string(name='statusDesc', description='状态描述'),
    }
  ](name='Data', description='数据集列表'),
  msg?: string(name='Msg', description='状态描述'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: string(name='Success', description='是否成功'),
}

model GetAvailableDataSetListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAvailableDataSetListResponseBody(name='body'),
}

async function getAvailableDataSetList(): GetAvailableDataSetListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAvailableDataSetListWithOptions(headers, runtime);
}

async function getAvailableDataSetListWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetAvailableDataSetListResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAvailableDataSetList',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/getAvailableDataSetList`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetComputeResultRequest {
  bcId?: long(name='bcId'),
}

model GetComputeResultResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: {
    bcId?: long(name='bcId', description='计算任务ID'),
    exportFileName?: string(name='exportFileName', description='文件地址'),
    name?: string(name='name', description='计算任务名称'),
    password?: string(name='password', description='文件密码'),
    state?: string(name='state', description='任务状态'),
  }(name='Data', description='返回内容'),
  msg?: string(name='Msg', description='消息描述'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetComputeResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetComputeResultResponseBody(name='body'),
}

async function getComputeResult(request: GetComputeResultRequest): GetComputeResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getComputeResultWithOptions(request, headers, runtime);
}

async function getComputeResultWithOptions(request: GetComputeResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetComputeResultResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.bcId)) {
    query['bcId'] = request.bcId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetComputeResult',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/getComputeTaskResult`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDataSetStatusRequest {
  dataSetId?: long(name='dataSetId'),
}

model GetDataSetStatusResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: {
    createTime?: string(name='createTime', description='创建日期'),
    dataSetType?: int32(name='dataSetType', description='数据集数据类型'),
    datasetId?: long(name='datasetId', description='数据集ID'),
    idTypeDesc?: string(name='idTypeDesc', description='id类型描述'),
    message?: string(name='message', description='错误消息描述'),
    name?: string(name='name', description='数据集名称'),
    statusDesc?: string(name='statusDesc', description='数据集状态'),
  }(name='Data', description='返回内容'),
  msg?: string(name='Msg', description='消息描述'),
  success?: boolean(name='Success', description='是否成功'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetDataSetStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSetStatusResponseBody(name='body'),
}

async function getDataSetStatus(request: GetDataSetStatusRequest): GetDataSetStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataSetStatusWithOptions(request, headers, runtime);
}

async function getDataSetStatusWithOptions(request: GetDataSetStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataSetStatusResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dataSetId)) {
    query['dataSetId'] = request.dataSetId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSetStatus',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/getDataSetStatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDataSetStsAKResponseBody = {
  code?: string(name='Code', description='状态编码'),
  data?: {
    bucket?: string(name='Bucket', description='bucket名'),
    endpoint?: string(name='Endpoint', description='地址信息'),
    id?: string(name='Id', description='编码'),
    path?: string(name='Path', description='路径'),
    secret?: string(name='Secret', description='密码'),
    token?: string(name='Token', description='token'),
  }(name='Data', description='数据对象'),
  msg?: string(name='Msg', description='消息描述'),
  requestId?: string(name='RequestId', description='request标识Id'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetDataSetStsAKResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSetStsAKResponseBody(name='body'),
}

async function getDataSetStsAK(): GetDataSetStsAKResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataSetStsAKWithOptions(headers, runtime);
}

async function getDataSetStsAKWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetDataSetStsAKResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDataSetStsAK',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/getDataSetStsAk`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitDataSetTaskRequest {
  dataSetType?: int32(name='dataSetType'),
  idType?: int32(name='idType'),
  name?: string(name='name'),
  ossFileName?: string(name='ossFileName'),
}

model SubmitDataSetTaskResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: long(name='Data', description='数据集ID'),
  msg?: string(name='Msg', description='状态描述'),
  success?: boolean(name='Success', description='是否成功'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model SubmitDataSetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDataSetTaskResponseBody(name='body'),
}

async function submitDataSetTask(request: SubmitDataSetTaskRequest): SubmitDataSetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitDataSetTaskWithOptions(request, headers, runtime);
}

async function submitDataSetTaskWithOptions(request: SubmitDataSetTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitDataSetTaskResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.dataSetType)) {
    body['dataSetType'] = request.dataSetType;
  }
  if (!Util.isUnset(request.idType)) {
    body['idType'] = request.idType;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.ossFileName)) {
    body['ossFileName'] = request.ossFileName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDataSetTask',
    version = '2021-11-30',
    protocol = 'HTTPS',
    pathname = `/batch_compute/submitDataSetTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

