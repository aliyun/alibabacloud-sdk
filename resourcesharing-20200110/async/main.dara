/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceSharing';
  @version = '2020-01-10';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptResourceShareInvitationRequest {
  regionId: string(name='RegionId', position='Host'),
  resourceShareInvitationId: string(name='ResourceShareInvitationId', description='The ID of the invitation.', example='i-pMnItMX19fBJ****', position='Query'),
}

model AcceptResourceShareInvitationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the resource share.', example='08F18B04-47CB-5C0E-A6D2-37DEF5C2A961'),
  resourceShareInvitation?: {
    createTime: string(name='CreateTime', example='2022-09-02T06:43:12.353Z'),
    receiverAccountId: string(name='ReceiverAccountId', example='134254031178****'),
    resourceShareId: string(name='ResourceShareId', description='The Alibaba Cloud account ID of the invitee.', example='rs-ysGRci9z****'),
    resourceShareInvitationId: string(name='ResourceShareInvitationId', description='The Alibaba Cloud account ID of the inviter.', example='i-pMnItMX19fBJ****'),
    resourceShareName: string(name='ResourceShareName', description='The time when the invitation was created. The time is displayed in UTC.', example='example'),
    senderAccountId: string(name='SenderAccountId', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Rejected: The invitation is rejected.
*   Expired: The invitation has expired.', example='151266687691****'),
    status: string(name='Status', example='Accepted'),
  }(name='ResourceShareInvitation', description='The name of the resource share.'),
}

model AcceptResourceShareInvitationResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptResourceShareInvitationResponseBody(name='body'),
}

/**
  * The ID of the resource sharing invitation.
  * You can call the [ListResourceShareInvitations](~~450564~~) operation to obtain the ID of a resource sharing invitation.
  *
 */
async function acceptResourceShareInvitation(request: AcceptResourceShareInvitationRequest): AcceptResourceShareInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptResourceShareInvitation', 'POST', '/', 'json', false, 'json', request);
}

model AssociateResourceShareRequest {
  regionId: string(name='RegionId', position='Host'),
  permissionNames?: [ string ](name='PermissionNames', position='Query'),
  resourceShareId: string(name='ResourceShareId', description='The ID of a shared resource.

Valid values of N: 1 to 5. This indicates that a maximum of five shared resources can be specified at a time.

>  Resources.N.ResourceId and Resources.N.ResourceType must be used in pairs.', example='rs-6GRmdD3X****', position='Query'),
  resources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The name of a permission. If you do not configure this parameter, the system automatically associates the default permission for the specified resource type with the resource share. For more information, see [Permission library](~~465474~~).', example='vsw-bp183p93qs667muql****'),
      resourceType?: string(name='ResourceType', description='The ID of a principal.

*   If the value of `AllowExternalTargets` for the resource share is `false` in the response of the ListResourceShares operation, the resource share supports only resource sharing within a resource directory. In this case, you can set this parameter to the ID of the resource directory, ID of a folder in the resource directory, or ID of a member in the resource directory.
*   If the value of `AllowExternalTargets` for the resource share is `true` in the response of the ListResourceShares operation, the resource share supports both resource sharing within a resource directory and resource sharing outside a resource directory. In this case, you can set this parameter to the ID of an independent Alibaba Cloud account, ID of the resource directory, ID of a folder in the resource directory, or ID of a member in the resource directory.

For more information, see [Resource sharing modes](~~160622~~), [View the ID of a resource directory](~~111217~~), [View the ID of a folder](~~111223~~), or [View the ID of a member](~~111624~~).

Valid values of N: 1 to 5. This indicates that a maximum of five principals can be specified at a time.', example='VSwitch'),
    }
  ](name='Resources', position='Query'),
  targets?: [ string ](name='Targets', example='172050525300****', position='Query'),
}

model AssociateResourceShareResponseBody = {
  requestId?: string(name='RequestId', description='The time when the association of the entity was updated. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the time when the association of the shared resource was updated.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the time when the association of the principal was updated.', example='111FB84A-60A9-403E-9067-E55D7EE95BD1'),
  resourceShareAssociations?: [ 
    {
      associationStatus?: string(name='AssociationStatus', example='Associating'),
      associationStatusMessage?: string(name='AssociationStatusMessage', description='The association status. Valid values:

*   Associating: The entity is being associated.
*   Associated: The entity is associated.
*   Failed: The entity fails to be associated.
*   Disassociating: The entity is being disassociated.
*   Disassociated: The entity is disassociated.

>  The system deletes the records of entities in the `Failed` or `Disassociated` state within 48 hours to 96 hours.', example='The reason for the association failure.'),
      associationType?: string(name='AssociationType', example='Resource'),
      createTime?: string(name='CreateTime', description='The ID of the resource share.', example='2020-12-04T09:40:41.246Z'),
      entityId?: string(name='EntityId', description='The time when the association of the entity was created. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the time when the shared resource was associated with the resource share.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the time when the principal was associated with the resource share.', example='vsw-bp183p93qs667muql****'),
      entityType?: string(name='EntityType', description='The cause of the association failure.', example='VSwitch'),
      resourceShareId?: string(name='ResourceShareId', description='The association type. Valid values:

*   Resource
*   Target', example='rs-6GRmdD3X****'),
      resourceShareName?: string(name='ResourceShareName', description='The type of the entity. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of AssociationType is Resource, the value of this parameter is the type of the shared resource. For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).
*   If the value of AssociationType is Target, the value of this parameter is `Account`.', example='test'),
      updateTime?: string(name='UpdateTime', description='The name of the resource share.', example='2020-12-04T09:40:41.246Z'),
    }
  ](name='ResourceShareAssociations', description='The ID of the entity. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the ID of the shared resource.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the ID of the principal.'),
}

model AssociateResourceShareResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateResourceShareResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to AssociateResourceShare.
  *
 */
async function associateResourceShare(request: AssociateResourceShareRequest): AssociateResourceShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateResourceShare', 'POST', '/', 'json', false, 'json', request);
}

model AssociateResourceSharePermissionRequest {
  regionId: string(name='RegionId', position='Host'),
  permissionName: string(name='PermissionName', example='AliyunRSDefaultPermissionVSwitch', position='Query'),
  replace?: boolean(name='Replace', example='false', position='Query'),
  resourceShareId: string(name='ResourceShareId', example='rs-6GRmdD3X****', position='Query'),
}

model AssociateResourceSharePermissionResponseBody = {
  requestId?: string(name='RequestId', example='111FB84A-60A9-403E-9067-E55D7EE95BD1'),
}

model AssociateResourceSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateResourceSharePermissionResponseBody(name='body'),
}

/**
  * The name of the permission.
  *
 */
async function associateResourceSharePermission(request: AssociateResourceSharePermissionRequest): AssociateResourceSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateResourceSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceShareRequest {
  regionId: string(name='RegionId', position='Host'),
  allowExternalTargets?: boolean(name='AllowExternalTargets', description='The information of the resource share.', example='false', position='Query'),
  permissionNames?: [ string ](name='PermissionNames', position='Query'),
  resourceShareName: string(name='ResourceShareName', description='The ID of a shared resource.

Valid values of N: 1 to 5. This indicates that a maximum of five shared resources can be specified at a time.

>  `Resources.N.ResourceId` and `Resources.N.ResourceType` must be used in pairs.', example='test', position='Query'),
  resources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The name of a permission. If you do not configure this parameter, the system automatically associates the default permission for the specified resource type with the resource share. For more information, see [Permission library](~~465474~~).', example='vsw-bp183p93qs667muql****'),
      resourceType?: string(name='ResourceType', description='The ID of a principal. Valid values:

*   If you set `AllowExternalTargets` to `false`, set this parameter to the ID of a resource directory, ID of a folder in a resource directory, or ID of a member in a resource directory.
*   If you set `AllowExternalTargets` to `true`, set this parameter to the ID of an independent Alibaba Cloud account, ID of a resource directory, ID of a folder in a resource directory, or ID of a member in a resource directory.

For more information, see [Resource sharing modes](~~160622~~), [View the ID of a resource directory](~~111217~~), [View the ID of a folder](~~111223~~), or [View the ID of a member](~~111624~~).

Valid values of N: 1 to 5. This indicates that a maximum of five principals can be specified at a time.', example='VSwitch'),
    }
  ](name='Resources', position='Query'),
  targets?: [ string ](name='Targets', example='172050525300****', position='Query'),
}

model CreateResourceShareResponseBody = {
  requestId?: string(name='RequestId', description='The time when the resource share was updated.', example='2C3FA051-61DC-4F3E-81E9-E4830524DF4B'),
  resourceShare?: {
    allowExternalTargets?: boolean(name='AllowExternalTargets', example='false'),
    createTime?: string(name='CreateTime', description='The status of the resource share. Valid values:

*   Active: The resource share is enabled.
*   Pending: The resource share is associated with one or more resource sharing invitations that are waiting for confirmation.
*   Deleting: The resource share is being deleted.
*   Deleted: The resource share is deleted.

>  The system deletes the records of resource shares in the Deleted state within 48 hours to 96 hours after you delete the resource shares.', example='2020-12-03T08:02:22.413Z'),
    resourceShareId?: string(name='ResourceShareId', description='Indicates whether resources in the resource share can be shared with accounts outside the resource directory. Valid values:

*   false: Resources in the resource share can be shared only with accounts in the resource directory.
*   true: Resources in the resource share can be shared with both accounts in the resource directory and accounts outside the resource directory.', example='rs-qSkW1HBY****'),
    resourceShareName?: string(name='ResourceShareName', description='The time when the resource share was created.', example='test'),
    resourceShareOwner?: string(name='ResourceShareOwner', description='The ID of the resource share.', example='151266687691****'),
    resourceShareStatus?: string(name='ResourceShareStatus', example='Active'),
    updateTime?: string(name='UpdateTime', description='The owner of the resource share.', example='2020-12-03T08:02:22.413Z'),
  }(name='ResourceShare', description='The name of the resource share.'),
}

model CreateResourceShareResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceShareResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to CreateResourceShare.
  *
 */
async function createResourceShare(request: CreateResourceShareRequest): CreateResourceShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceShare', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResourceShareRequest {
  regionId: string(name='RegionId', position='Host'),
  resourceShareId: string(name='ResourceShareId', example='rs-qSkW1HBY****', position='Query'),
}

model DeleteResourceShareResponseBody = {
  requestId?: string(name='RequestId', example='A627EE2A-223D-4E1F-A954-394686AEA916'),
}

model DeleteResourceShareResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceShareResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DeleteResourceShare.
  *
 */
async function deleteResourceShare(request: DeleteResourceShareRequest): DeleteResourceShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceShare', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The supported natural language. Valid values:

*   zh-CN: Chinese
*   en-US: English', example='zh-CN', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the Resource Sharing service in the region.', example='resourcesharing.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The information of the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0D64A198-5842-4570-8E26-5E540CDC84CD'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DisassociateResourceShareRequest {
  regionId: string(name='RegionId', position='Host'),
  resourceOwner?: string(name='ResourceOwner', description='The information of the entities that are associated with the resource share.', example='Self', position='Query'),
  resourceShareId: string(name='ResourceShareId', description='The ID of a shared resource.

Valid values of N: 1 to 5. This indicates that a maximum of five shared resources can be specified at a time.

>  Resources.N.ResourceId and Resources.N.ResourceType must be used in pairs.', example='rs-6GRmdD3X****', position='Query'),
  resources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The owner of the resource share. Valid values:

*   Self: The resource share belongs to the current account. This is the default value. If you are the management account or a member of a resource directory and you want to remove resources or principals from a resource share, set this parameter to Self.
*   OtherAccounts: The resource share belongs to another account. If you are not the management account or a member of a resource directory and you want to exit a resource share, set this parameter to OtherAccounts.', example='vsw-bp183p93qs667muql****'),
      resourceType?: string(name='ResourceType', description='The ID of a principal.

Valid values of N: 1 to 5. This indicates that a maximum of five principals can be specified at a time.', example='VSwitch'),
    }
  ](name='Resources', position='Query'),
  targets?: [ string ](name='Targets', example='172050525300****', position='Query'),
}

model DisassociateResourceShareResponseBody = {
  requestId?: string(name='RequestId', description='The time when the disassociation of the entity was updated. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the time when the disassociation of the resource was updated.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the time when the disassociation of the principal was updated.', example='95230BC9-A8E8-4493-96BD-4F0C758E37F8'),
  resourceShareAssociations?: [ 
    {
      associationStatus?: string(name='AssociationStatus', example='Disassociating'),
      associationStatusMessage?: string(name='AssociationStatusMessage', description='The association status. Valid values:

*   Associating: The entity is being associated.
*   Associated: The entity is associated.
*   Failed: The entity fails to be associated.
*   Disassociating: The entity is being disassociated.
*   Disassociated: The entity is disassociated.

>  The system deletes the records of entities in the `Failed` or `Disassociated` state within 48 hours to 96 hours.', example='The Resources is invalid.'),
      associationType?: string(name='AssociationType', example='Target'),
      createTime?: string(name='CreateTime', description='The ID of the resource share.', example='2020-12-04T09:40:41.250Z'),
      entityId?: string(name='EntityId', description='The time when the disassociation of the entity was performed. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the time when the resource was disassociated from the resource share.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the time when the principal was disassociated from the resource share.', example='172050525300****'),
      entityType?: string(name='EntityType', description='The cause of the disassociation failure.', example='Account'),
      resourceShareId?: string(name='ResourceShareId', description='The association type. Valid values:

*   Resource
*   Target', example='rs-6GRmdD3X****'),
      resourceShareName?: string(name='ResourceShareName', description='The type of the entity. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of AssociationType is Resource, the value of this parameter is the type of the resource. For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).
*   If the value of AssociationType is Target, the value of this parameter is Account.', example='test'),
      updateTime?: string(name='UpdateTime', description='The name of the resource share.', example='2020-12-04T09:40:45.556Z'),
    }
  ](name='ResourceShareAssociations', description='The ID of the entity. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the ID of the resource.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the ID of the resource directory, folder, or member.'),
}

model DisassociateResourceShareResponse = {
  headers: map[string]string(name='headers'),
  body: DisassociateResourceShareResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DisassociateResourceShare.
  *
 */
async function disassociateResourceShare(request: DisassociateResourceShareRequest): DisassociateResourceShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociateResourceShare', 'POST', '/', 'json', false, 'json', request);
}

model DisassociateResourceSharePermissionRequest {
  regionId: string(name='RegionId', position='Host'),
  permissionName: string(name='PermissionName', description='The ID of the request.', example='AliyunRSDefaultPermissionVSwitch', position='Query'),
  resourceShareId: string(name='ResourceShareId', description='The name of the permission. For more information, see [Permission library](~~465474~~).', example='rs-6GRmdD3X****', position='Query'),
}

model DisassociateResourceSharePermissionResponseBody = {
  requestId?: string(name='RequestId', example='111FB84A-60A9-403E-9067-E55D7EE95BD1'),
}

model DisassociateResourceSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DisassociateResourceSharePermissionResponseBody(name='body'),
}

/**
  * This topic provides an example on how to call the API operation to disassociate the `AliyunRSDefaultPermissionVSwitch` permission from the `rs-6GRmdD3X****` resource share in the `cn-hangzhou` region.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 500 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function disassociateResourceSharePermission(request: DisassociateResourceSharePermissionRequest): DisassociateResourceSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociateResourceSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model EnableSharingWithResourceDirectoryRequest {
  regionId: string(name='RegionId', position='Host'),
}

model EnableSharingWithResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='2F23CFB6-A721-4E90-AC1E-0E30FA8B45DA'),
}

model EnableSharingWithResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSharingWithResourceDirectoryResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to EnableSharingWithResourceDirectory.
  *
 */
async function enableSharingWithResourceDirectory(request: EnableSharingWithResourceDirectoryRequest): EnableSharingWithResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSharingWithResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetPermissionRequest {
  regionId: string(name='RegionId', position='Host'),
  permissionName: string(name='PermissionName', description='The name of the permission.', example='AliyunRSDefaultPermissionVSwitch', position='Query'),
  permissionVersion?: string(name='PermissionVersion', description='The version of the permission.', example='v1', position='Query'),
}

model GetPermissionResponseBody = {
  permission?: {
    createTime?: string(name='CreateTime', example='2020-12-07T07:39:01.818Z'),
    defaultPermission?: boolean(name='DefaultPermission', example='true'),
    defaultVersion?: boolean(name='DefaultVersion', example='true'),
    permission?: string(name='Permission', description='The update time.', example='{"Effect":"Allow","Action":["vpc:DescribeVSwitches","vpc:DescribeVSwitchAttributes"]}'),
    permissionName?: string(name='PermissionName', description='Indicates whether the version is the default version. Valid values:

*   false: The version is not the default version.
*   true: The version is the default version.', example='AliyunRSDefaultPermissionVSwitch'),
    permissionVersion?: string(name='PermissionVersion', description='The creation time.', example='v1'),
    resourceType?: string(name='ResourceType', description='Indicates whether the permission is the default permission. Valid values:

*   false: The permission is not the default permission.
*   true: The permission is the default permission.', example='VSwitch'),
    updateTime?: string(name='UpdateTime', example='2020-12-07T07:39:01.818Z'),
  }(name='Permission', description='The type of the shared resources.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).'),
  requestId?: string(name='RequestId', description='The document of the policy related to the permission.', example='2F23CFB6-A721-4E90-AC1E-0E30FA8B45DA'),
}

model GetPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPermissionResponseBody(name='body'),
}

/**
  * The version of the permission.
  *
 */
async function getPermission(request: GetPermissionRequest): GetPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPermission', 'POST', '/', 'json', false, 'json', request);
}

model ListPermissionVersionsRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The information about the permission.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The name of the permission.', example='TGlzdFJlc291cm****', position='Query'),
  permissionName: string(name='PermissionName', description='The ID of the request.', example='AliyunRSDefaultPermissionVSwitch', position='Query'),
}

model ListPermissionVersionsResponseBody = {
  nextToken?: string(name='NextToken', description='The version of the permission.', example='TGlzdFJlc291cm****'),
  permissions?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-07T07:39:01.818Z'),
      defaultPermission?: boolean(name='DefaultPermission', example='true'),
      defaultVersion?: boolean(name='DefaultVersion', description='Indicates whether the permission is the default permission. Valid values:

*   false: The permission is not the default permission.
*   true: The permission is the default permission.', example='true'),
      permissionName?: string(name='PermissionName', description='The update time.', example='AliyunRSDefaultPermissionVSwitch'),
      permissionVersion?: string(name='PermissionVersion', description='The type of the shared resources.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).', example='v1'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
      updateTime?: string(name='UpdateTime', example='2020-12-07T07:39:01.818Z'),
    }
  ](name='Permissions', description='The creation time.'),
  requestId?: string(name='RequestId', description='Indicates whether the version is the default version. Valid values:

*   false: The version is not the default version.
*   true: The version is the default version.', example='04677DCA-7C33-464B-8811-1B1DA3C3D197'),
}

model ListPermissionVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPermissionVersionsResponseBody(name='body'),
}

/**
  * The maximum number of entries to return for a single request.
  * Valid values: 1 to 100. Default value: 20.
  *
 */
async function listPermissionVersions(request: ListPermissionVersionsRequest): ListPermissionVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPermissionVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListPermissionsRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The information about the permission.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The name of the permission.', example='TGlzdFJlc291cm****', position='Query'),
  resourceType?: string(name='ResourceType', description='The ID of the request.', example='VSwitch', position='Query'),
}

model ListPermissionsResponseBody = {
  nextToken?: string(name='NextToken', description='The version of the permission.', example='TGlzdFJlc291cm****'),
  permissions?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-07T07:39:01.818Z'),
      defaultPermission?: boolean(name='DefaultPermission', example='true'),
      defaultVersion?: boolean(name='DefaultVersion', description='Indicates whether the permission is the default permission. Valid values:

*   false: The permission is not the default permission.
*   true: The permission is the default permission.', example='true'),
      permissionName?: string(name='PermissionName', description='The update time.', example='AliyunRSDefaultPermissionVSwitch'),
      permissionVersion?: string(name='PermissionVersion', description='The type of the shared resources.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).', example='v1'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
      updateTime?: string(name='UpdateTime', example='2020-12-07T07:39:01.818Z'),
    }
  ](name='Permissions', description='The creation time.'),
  requestId?: string(name='RequestId', description='Indicates whether the version is the default version. Valid values:

*   false: The version is not the default version.
*   true: The version is the default version.', example='04677DCA-7C33-464B-8811-1B1DA3C3D197'),
}

model ListPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPermissionsResponseBody(name='body'),
}

/**
  * The maximum number of entries to return for a single request.
  * Valid values: 1 to 100. Default value: 20.
  *
 */
async function listPermissions(request: ListPermissionsRequest): ListPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPermissions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceShareAssociationsRequest {
  regionId: string(name='RegionId', position='Host'),
  associationStatus?: string(name='AssociationStatus', description='The association status. Valid values:

*   Associating: The entity is being associated.
*   Associated: The entity is associated.
*   Failed: The entity fails to be associated.
*   Disassociating: The entity is being disassociated.
*   Disassociated: The entity is disassociated.

>  The system deletes the records of entities in the `Failed` or `Disassociated` state within 48 hours to 96 hours.', example='Associated', position='Query'),
  associationType: string(name='AssociationType', description='The association type. Valid values:

*   Resource
*   Target', example='Resource', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return for a single request.

Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.

>  This parameter is unavailable if you set the `AssociationType` parameter to `Target`.', example='vsw-bp183p93qs667muql****', position='Query'),
  resourceShareIds?: [ string ](name='ResourceShareIds', example='rs-6GRmdD3X****', position='Query'),
  target?: string(name='Target', description='The ID of the principal.

>  This parameter is unavailable if you set the `AssociationType` parameter to `Resource`.', example='172050525300****', position='Query'),
}

model ListResourceShareAssociationsResponseBody = {
  nextToken?: string(name='NextToken', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11BA57B5-7301-4E2F-BBA5-2AE4C2F4FCDB'),
  resourceShareAssociations?: [ 
    {
      associationStatus?: string(name='AssociationStatus', description='The association status. Valid values:

*   Associating: The entity is being associated.
*   Associated: The entity is associated.
*   Failed: The entity fails to be associated.
*   Disassociating: The entity is being disassociated.
*   Disassociated: The entity is disassociated.

>  The system deletes the records of entities in the `Failed` or `Disassociated` state within 48 hours to 96 hours.', example='Associated'),
      associationStatusMessage?: string(name='AssociationStatusMessage', description='The cause of the association failure.', example='The reason for the association failure.'),
      associationType?: string(name='AssociationType', description='The association type. Valid values:

*   Resource
*   Target', example='Resource'),
      createTime?: string(name='CreateTime', description='The time when the association of the entity was created. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the time when the shared resource was associated with or disassociated from the resource share.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the time when the principal was associated with or disassociated from the resource share.', example='2020-12-07T07:39:01.818Z'),
      entityId?: string(name='EntityId', description='The ID of the entity. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the ID of the shared resource.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the ID of the principal.', example='vsw-bp1upw03qyz8n7us9****'),
      entityType?: string(name='EntityType', description='The type of the entity. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of AssociationType is Resource, the value of this parameter is the type of the resource. For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).
*   If the value of AssociationType is Target, the value of this parameter is `Account`.', example='VSwitch'),
      external?: boolean(name='External', description='Indicates whether the principal is outside the resource directory. Valid values:

*   true: The principal is outside the resource directory.
*   false: The principal is in the resource directory.', example='false'),
      resourceShareId?: string(name='ResourceShareId', description='The ID of the resource share.', example='rs-6GRmdD3X****'),
      resourceShareName?: string(name='ResourceShareName', description='The name of the resource share.', example='example'),
      updateTime?: string(name='UpdateTime', description='The time when the association of the entity was updated. The value of this parameter depends on the value of the AssociationType parameter:

*   If the value of `AssociationType` is `Resource`, the value of this parameter is the time when the association of the shared resource was updated.
*   If the value of `AssociationType` is `Target`, the value of this parameter is the time when the association of the principal was updated.', example='2020-12-07T07:39:02.920Z'),
    }
  ](name='ResourceShareAssociations', description='The information of the entities.'),
}

model ListResourceShareAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceShareAssociationsResponseBody(name='body'),
}

/**
  * This topic provides an example on how to call the API operation to query the association records of the resource shares that are created by using the current Alibaba Cloud account in the `cn-hangzhou` region. The response shows the following records:
  * *   The resource `vsw-bp1upw03qyz8n7us9****` of the `VSwitch` type has been associated with the resource share `rs-6GRmdD3X****`. The resource is in the `Associated` state. This indicates that the resource is being shared.
  * *   The resource `vsw-bp183p93qs667muql****` of the `VSwitch` type has been disassociated from the resource share `rs-6GRmdD3X****`. The resource is in the `Disassociated` state. This indicates that the sharing of the resource is stopped.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 500 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function listResourceShareAssociations(request: ListResourceShareAssociationsRequest): ListResourceShareAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceShareAssociations', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceShareInvitationsRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The IDs of the resource sharing invitations.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****', position='Query'),
  resourceShareIds?: [ string ](name='ResourceShareIds', position='Query'),
  resourceShareInvitationIds?: [ string ](name='ResourceShareInvitationIds', position='Query'),
}

model ListResourceShareInvitationsResponseBody = {
  nextToken?: string(name='NextToken', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Rejected: The invitation is rejected.
*   Expired: The invitation has expired.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The time when the invitation was created. The time is displayed in UTC.', example='30EC8328-1BDE-51D5-BFAB-039508BD91A1'),
  resourceShareInvitations?: [ 
    {
      createTime?: string(name='CreateTime', description='The Alibaba Cloud account ID of the inviter.', example='2022-08-18T05:36:45.024Z'),
      receiverAccountId?: string(name='ReceiverAccountId', example='134254031178****'),
      resourceShareId?: string(name='ResourceShareId', description='The Alibaba Cloud account ID of the invitee.', example='rs-ysGRci9z****'),
      resourceShareInvitationId?: string(name='ResourceShareInvitationId', example='i-p6eRytrkjVvM****'),
      resourceShareName?: string(name='ResourceShareName', description='The ID of the invitation.', example='example'),
      senderAccountId?: string(name='SenderAccountId', example='151266687691****'),
      status?: string(name='Status', description='The name of the resource share.', example='Pending'),
    }
  ](name='ResourceShareInvitations', description='The ID of the resource share.'),
}

model ListResourceShareInvitationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceShareInvitationsResponseBody(name='body'),
}

/**
  * The maximum number of entries to return for a single request.
  * Valid values: 1 to 100. Default value: 20.
  *
 */
async function listResourceShareInvitations(request: ListResourceShareInvitationsRequest): ListResourceShareInvitationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceShareInvitations', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceSharePermissionsRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The ID of the request.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The information about the permissions.', example='TGlzdFJlc291cm****', position='Query'),
  resourceOwner: string(name='ResourceOwner', description='The name of the permission.', example='Self', position='Query'),
  resourceShareId: string(name='ResourceShareId', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='rs-6GRmdD3X****', position='Query'),
}

model ListResourceSharePermissionsResponseBody = {
  nextToken?: string(name='NextToken', description='The version of the permission.', example='TGlzdFJlc291cm****'),
  permissions?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-07T07:39:01.818Z'),
      defaultPermission?: boolean(name='DefaultPermission', example='true'),
      defaultVersion?: boolean(name='DefaultVersion', description='Indicates whether the permission is the default permission. Valid values:

*   false: The permission is not the default permission.
*   true: The permission is the default permission.', example='true'),
      permissionName?: string(name='PermissionName', description='The update time.', example='AliyunRSDefaultPermissionVSwitch'),
      permissionVersion?: string(name='PermissionVersion', description='The type of the shared resources.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).', example='v1'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
      updateTime?: string(name='UpdateTime', example='2020-12-07T07:39:01.818Z'),
    }
  ](name='Permissions', description='The creation time.'),
  requestId?: string(name='RequestId', description='Indicates whether the version is the default version. Valid values:

*   false: The version is not the default version.
*   true: The version is the default version.', example='2F23CFB6-A721-4E90-AC1E-0E30FA8B45DA'),
}

model ListResourceSharePermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceSharePermissionsResponseBody(name='body'),
}

/**
  * The maximum number of entries to return for a single request.
  * Valid values: 1 to 100. Default value: 20.
  *
 */
async function listResourceSharePermissions(request: ListResourceSharePermissionsRequest): ListResourceSharePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceSharePermissions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceSharesRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The ID of a resource share.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The name of the permission. For more information, see [Permission library](~~465474~~).', example='TGlzdFJlc291cm****', position='Query'),
  permissionName?: string(name='PermissionName', description='The ID of the request.', example='AliyunRSDefaultPermissionVSwitch', position='Query'),
  resourceOwner: string(name='ResourceOwner', description='The status of the resource share. Valid values:

*   Active: The resource share is enabled.
*   Pending: The resource share is associated with one or more resource sharing invitations that are waiting for confirmation.
*   Deleting: The resource share is being deleted.
*   Deleted: The resource share is deleted.

>  The system deletes the records of resource shares in the Deleted state within 48 hours to 96 hours after you delete the resource shares.', example='Self', position='Query'),
  resourceShareIds?: [ string ](name='ResourceShareIds', example='rs-PqysnzIj****', position='Query'),
  resourceShareName?: string(name='ResourceShareName', description='The maximum number of entries to return for a single request.

Valid values: 1 to 100. Default value: 20.', example='test', position='Query'),
  resourceShareStatus?: string(name='ResourceShareStatus', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='Active', position='Query'),
}

model ListResourceSharesResponseBody = {
  nextToken?: string(name='NextToken', description='The information of the resource shares.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The time when the resource share was updated.', example='2F23CFB6-A721-4E90-AC1E-0E30FA8B45DA'),
  resourceShares?: [ 
    {
      allowExternalTargets?: boolean(name='AllowExternalTargets', example='false'),
      createTime?: string(name='CreateTime', description='The status of the resource share. Valid values:

*   Active: The resource share is enabled.
*   Pending: The resource share is associated with one or more resource sharing invitations that are waiting for confirmation.
*   Deleting: The resource share is being deleted.
*   Deleted: The resource share is deleted.

>  The system deletes the records of resource shares in the Deleted state within 48 hours to 96 hours after you delete the resource shares.', example='2020-12-03T02:20:31.292Z'),
      resourceShareId?: string(name='ResourceShareId', description='Indicates whether resources in the resource share can be shared with accounts outside the resource directory. Valid values:

*   false: Resources in the resource share can be shared only with accounts in the resource directory.
*   true: Resources in the resource share can be shared with both accounts in the resource directory and accounts outside the resource directory.', example='rs-PqysnzIj****'),
      resourceShareName?: string(name='ResourceShareName', description='The time when the resource share was created.', example='test'),
      resourceShareOwner?: string(name='ResourceShareOwner', description='The ID of the resource share.', example='151266687691****'),
      resourceShareStatus?: string(name='ResourceShareStatus', example='Active'),
      updateTime?: string(name='UpdateTime', description='The owner of the resource share.', example='2020-12-03T08:01:43.638Z'),
    }
  ](name='ResourceShares', description='The name of the resource share.'),
}

model ListResourceSharesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceSharesResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to ListResourceShares.
  *
 */
async function listResourceShares(request: ListResourceSharesRequest): ListResourceSharesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceShares', 'POST', '/', 'json', false, 'json', request);
}

model ListSharedResourcesRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return for a single request.

Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', example='vsw-bp1upw03qyz8n7us9****', position='Query'),
  resourceOwner: string(name='ResourceOwner', description='The owner of the resource shares. Valid values:

*   Self: your account. If you set the value to Self, the resources you share with other accounts are queried.
*   OtherAccounts: another account. If you set the value to OtherAccounts, the resources other accounts share with you are queried.', example='Self', position='Query'),
  resourceShareIds?: [ string ](name='ResourceShareIds', example='rs-6GRmdD3X****', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the shared resources.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).', example='VSwitch', position='Query'),
  target?: string(name='Target', description='The ID of the principal or resource owner.

*   If the value of `ResourceOwner` is `Self`, set this parameter to the ID of a principal.
*   If the value of `ResourceOwner` is `OtherAccounts`, set this parameter to the ID of a resource owner.', example='172050525300****', position='Query'),
}

model ListSharedResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04677DCA-7C33-464B-8811-1B1DA3C3D197'),
  sharedResources?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the shared resource was associated with the resource share.', example='2020-12-07T07:39:02.921Z'),
      resourceId?: string(name='ResourceId', description='The ID of the shared resource.', example='vsw-bp1upw03qyz8n7us9****'),
      resourceShareId?: string(name='ResourceShareId', description='The ID of the resource share.', example='rs-6GRmdD3X****'),
      resourceStatus?: string(name='ResourceStatus', description='The status of the shared resource. This parameter is returned only when you query the resources that other accounts share with you.

Valid values:

*   Available: The resource is available.
*   ZonalResourceInaccessible: The resource is unavailable in the current zone.
*   LimitExceeded: The resource is unavailable because the maximum number of resources that other accounts can share with you exceeds the upper limit.
*   Unavailable: The resource is unavailable.', example='Available'),
      resourceStatusMessage?: string(name='ResourceStatusMessage', description='The cause of the association failure.', example='The reason for the association failure.'),
      resourceType?: string(name='ResourceType', description='The type of the shared resource.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).', example='VSwitch'),
      updateTime?: string(name='UpdateTime', description='The time when the association of the shared resource was updated.', example='2020-12-07T07:39:02.921Z'),
    }
  ](name='SharedResources', description='The information of the shared resources.'),
}

model ListSharedResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSharedResourcesResponseBody(name='body'),
}

/**
  * This topic provides an example on how to call the API operation to query the resources that you share with other accounts in the `cn-hangzhou` region. The response shows that in the resource share `rs-6GRmdD3X****`, you share the `vsw-bp1upw03qyz8n7us9****` resource of the `VSwitch` type with other accounts.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 500 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function listSharedResources(request: ListSharedResourcesRequest): ListSharedResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSharedResources', 'POST', '/', 'json', false, 'json', request);
}

model ListSharedTargetsRequest {
  regionId: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return for a single request.

Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the shared resource.', example='vsw-bp1upw03qyz8n7us9****', position='Query'),
  resourceOwner: string(name='ResourceOwner', description='The owner of the resource share.

*   Self: your account. If you set the value to Self, the principals that are associated with your resource shares are queried.
*   OtherAccounts: another account. If you set the value to OtherAccounts, the resource shares with which your account is associated and the owners of the resource shares are queried.', example='Self', position='Query'),
  resourceShareIds?: [ string ](name='ResourceShareIds', example='rs-6GRmdD3X****', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the shared resources.

For more information about the types of resources that can be shared, see [Services that work with Resource Sharing](~~450526~~).', example='VSwitch', position='Query'),
  targets?: [ string ](name='Targets', example='114240524784****', position='Query'),
}

model ListSharedTargetsResponseBody = {
  nextToken?: string(name='NextToken', description='The `token` that is used to initiate the next request. If the response of the current request is truncated, you can use the token to initiate another request and obtain the remaining records.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04677DCA-7C33-464B-8811-1B1DA3C3D197'),
  sharedTargets?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the principal was associated with the resource share.', example='2020-12-07T09:16:59.905Z'),
      external?: boolean(name='External', description='Indicates whether the principal is outside the resource directory. Valid values:

*   true: The principal is outside the resource directory.
*   false: The principal is in the resource directory.', example='false'),
      resourceShareId?: string(name='ResourceShareId', description='The ID of the resource share.', example='rs-6GRmdD3X****'),
      targetId?: string(name='TargetId', description='The ID of the principal or resource owner.

*   If the value of `ResourceOwner` is `Self`, the value of this parameter is the ID of a principal.
*   If the value of `ResourceOwner` is `OtherAccounts`, the value of this parameter is the ID of a resource owner.', example='114240524784****'),
      updateTime?: string(name='UpdateTime', description='The time when the association of the principal was updated.', example='2020-12-07T09:16:59.905Z'),
    }
  ](name='SharedTargets', description='The information of the principals.'),
}

model ListSharedTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSharedTargetsResponseBody(name='body'),
}

/**
  * If you are a resource owner, you can query the principals with which you share your resources.
  * If you are a principal, you can query the resources that are shared with you.
  * This topic provides an example on how to call the API operation to query the principals with which you share your resources in the `cn-hangzhou` region. The response shows that you share your resources with the principals `114240524784****` and `172050525300****`.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 500 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function listSharedTargets(request: ListSharedTargetsRequest): ListSharedTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSharedTargets', 'POST', '/', 'json', false, 'json', request);
}

model RejectResourceShareInvitationRequest {
  regionId: string(name='RegionId', position='Host'),
  resourceShareInvitationId: string(name='ResourceShareInvitationId', description='The ID of the invitation.', example='i-yyTWbkjHArYh****', position='Query'),
}

model RejectResourceShareInvitationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the resource share.', example='E446D6DE-BFC8-5F37-A494-33D7B118147D'),
  resourceShareInvitation?: {
    createTime: string(name='CreateTime', example='2022-09-02T07:07:30.809Z'),
    receiverAccountId: string(name='ReceiverAccountId', example='134254031178****'),
    resourceShareId: string(name='ResourceShareId', description='The Alibaba Cloud account ID of the invitee.', example='rs-JoA1Ayjm****'),
    resourceShareInvitationId: string(name='ResourceShareInvitationId', description='The Alibaba Cloud account ID of the inviter.', example='i-yyTWbkjHArYh****'),
    resourceShareName: string(name='ResourceShareName', description='The time when the invitation was created. The time is displayed in UTC.', example='example'),
    senderAccountId: string(name='SenderAccountId', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Rejected: The invitation is rejected.
*   Expired: The invitation has expired.', example='151266687691****'),
    status: string(name='Status', example='Rejected'),
  }(name='ResourceShareInvitation', description='The name of the resource share.'),
}

model RejectResourceShareInvitationResponse = {
  headers: map[string]string(name='headers'),
  body: RejectResourceShareInvitationResponseBody(name='body'),
}

/**
  * The ID of the resource sharing invitation.
  * You can call the [ListResourceShareInvitations](~~450564~~) operation to obtain the ID of a resource sharing invitation.
  *
 */
async function rejectResourceShareInvitation(request: RejectResourceShareInvitationRequest): RejectResourceShareInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectResourceShareInvitation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResourceShareRequest {
  regionId: string(name='RegionId', position='Host'),
  allowExternalTargets?: boolean(name='AllowExternalTargets', description='The information of the resource share.', example='false', position='Query'),
  resourceShareId: string(name='ResourceShareId', description='Specifies whether resources in the resource share can be shared with accounts outside the resource directory. Valid values:

*   false: Resources in the resource share can be shared only with accounts in the resource directory.
*   true: Resources in the resource share can be shared with both accounts in the resource directory and accounts outside the resource directory.', example='rs-qSkW1HBY****', position='Query'),
  resourceShareName: string(name='ResourceShareName', description='The ID of the request.', example='new', position='Query'),
}

model UpdateResourceShareResponseBody = {
  requestId?: string(name='RequestId', description='The time when the resource share was updated.', example='2860A3A4-D8C1-4EF4-954E-84A3945E26E5'),
  resourceShare?: {
    allowExternalTargets?: boolean(name='AllowExternalTargets', example='false'),
    createTime?: string(name='CreateTime', description='The status of the resource share. Valid values:

*   Active: The resource share is enabled.
*   Pending: The resource share is associated with one or more resource sharing invitations that are waiting for confirmation.
*   Deleting: The resource share is being deleted.
*   Deleted: The resource share is deleted.

>  The system deletes the records of resource shares in the Deleted state within 48 hours to 96 hours after you delete the resource shares.', example='2020-12-03T08:02:22.413Z'),
    resourceShareId?: string(name='ResourceShareId', description='Indicates whether resources in the resource share can be shared with accounts outside the resource directory. Valid values:

*   false: Resources in the resource share can be shared only with accounts in the resource directory.
*   true: Resources in the resource share can be shared with both accounts in the resource directory and accounts outside the resource directory.', example='rs-qSkW1HBY****'),
    resourceShareName?: string(name='ResourceShareName', description='The time when the resource share was created.', example='new'),
    resourceShareOwner?: string(name='ResourceShareOwner', description='The ID of the resource share.', example='151266687691****'),
    resourceShareStatus?: string(name='ResourceShareStatus', example='Active'),
    updateTime?: string(name='UpdateTime', description='The owner of the resource share.', example='2020-12-04T08:55:25.382Z'),
  }(name='ResourceShare', description='The name of the resource share.'),
}

model UpdateResourceShareResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceShareResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to UpdateResourceShare.
  *
 */
async function updateResourceShare(request: UpdateResourceShareRequest): UpdateResourceShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceShare', 'POST', '/', 'json', false, 'json', request);
}

