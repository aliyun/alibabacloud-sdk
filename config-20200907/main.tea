/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-shanghai = 'config.cn-shanghai.aliyuncs.com',
    ap-southeast-1 = 'config.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('config', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ResourceDirectoryFolderNode {
  accountId?: string(name='AccountId', description='accountId'),
  children?: [
    ResourceDirectoryFolderNode
  ](name='Children', description='children'),
  displayName?: string(name='DisplayName', description='displayName'),
  folderId?: string(name='FolderId', description='folderId'),
  folderName?: string(name='FolderName', description='folderName'),
  parentFolderId?: string(name='ParentFolderId', description='parentFolderId'),
}

model ActiveAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model ActiveAggregateConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model ActiveAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveAggregateConfigRulesResponseBody(name='body'),
}

async function activeAggregateConfigRulesWithOptions(request: ActiveAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): ActiveAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeAggregateConfigRules(request: ActiveAggregateConfigRulesRequest): ActiveAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeAggregateConfigRulesWithOptions(request, runtime);
}

model AttachAggregateConfigRuleToCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model AttachAggregateConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model AttachAggregateConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: AttachAggregateConfigRuleToCompliancePackResponseBody(name='body'),
}

async function attachAggregateConfigRuleToCompliancePackWithOptions(request: AttachAggregateConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): AttachAggregateConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['CompliancePackId'] = request.compliancePackId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachAggregateConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachAggregateConfigRuleToCompliancePack(request: AttachAggregateConfigRuleToCompliancePackRequest): AttachAggregateConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachAggregateConfigRuleToCompliancePackWithOptions(request, runtime);
}

model AttachConfigRuleToCompliancePackRequest {
  compliancePackId?: string(name='CompliancePackId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model AttachConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model AttachConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: AttachConfigRuleToCompliancePackResponseBody(name='body'),
}

async function attachConfigRuleToCompliancePackWithOptions(request: AttachConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): AttachConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  query['CompliancePackId'] = request.compliancePackId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachConfigRuleToCompliancePack(request: AttachConfigRuleToCompliancePackRequest): AttachConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachConfigRuleToCompliancePackWithOptions(request, runtime);
}

model CreateAggregateCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName'),
          parameterValue?: string(name='ParameterValue'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
      riskLevel?: int32(name='RiskLevel'),
    }
  ](name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model CreateAggregateCompliancePackShrinkRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
  configRulesShrink?: string(name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model CreateAggregateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId'),
  requestId?: string(name='RequestId'),
}

model CreateAggregateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAggregateCompliancePackResponseBody(name='body'),
}

async function createAggregateCompliancePackWithOptions(tmpReq: CreateAggregateCompliancePackRequest, runtime: Util.RuntimeOptions): CreateAggregateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAggregateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.compliancePackTemplateId)) {
    body['CompliancePackTemplateId'] = request.compliancePackTemplateId;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregateCompliancePack(request: CreateAggregateCompliancePackRequest): CreateAggregateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregateCompliancePackWithOptions(request, runtime);
}

model CreateAggregateConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParameters?: map[string]any(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  sourceIdentifier?: string(name='SourceIdentifier'),
  sourceOwner?: string(name='SourceOwner'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateAggregateConfigRuleShrinkRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParametersShrink?: string(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  sourceIdentifier?: string(name='SourceIdentifier'),
  sourceOwner?: string(name='SourceOwner'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateAggregateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateAggregateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAggregateConfigRuleResponseBody(name='body'),
}

async function createAggregateConfigRuleWithOptions(tmpReq: CreateAggregateConfigRuleRequest, runtime: Util.RuntimeOptions): CreateAggregateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAggregateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIdentifier)) {
    body['SourceIdentifier'] = request.sourceIdentifier;
  }
  if (!Util.isUnset(request.sourceOwner)) {
    body['SourceOwner'] = request.sourceOwner;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregateConfigRule(request: CreateAggregateConfigRuleRequest): CreateAggregateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregateConfigRuleWithOptions(request, runtime);
}

model CreateAggregatorRequest {
  aggregatorAccounts?: [ 
    {
      accountId?: long(name='AccountId'),
      accountName?: string(name='AccountName'),
      accountType?: string(name='AccountType'),
    }
  ](name='AggregatorAccounts'),
  aggregatorName?: string(name='AggregatorName'),
  aggregatorType?: string(name='AggregatorType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model CreateAggregatorShrinkRequest {
  aggregatorAccountsShrink?: string(name='AggregatorAccounts'),
  aggregatorName?: string(name='AggregatorName'),
  aggregatorType?: string(name='AggregatorType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model CreateAggregatorResponseBody = {
  aggregatorId?: string(name='AggregatorId'),
  requestId?: string(name='RequestId'),
}

model CreateAggregatorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAggregatorResponseBody(name='body'),
}

async function createAggregatorWithOptions(tmpReq: CreateAggregatorRequest, runtime: Util.RuntimeOptions): CreateAggregatorResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAggregatorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aggregatorAccounts)) {
    request.aggregatorAccountsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregatorAccounts, 'AggregatorAccounts', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorAccountsShrink)) {
    body['AggregatorAccounts'] = request.aggregatorAccountsShrink;
  }
  if (!Util.isUnset(request.aggregatorName)) {
    body['AggregatorName'] = request.aggregatorName;
  }
  if (!Util.isUnset(request.aggregatorType)) {
    body['AggregatorType'] = request.aggregatorType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregator',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregator(request: CreateAggregatorRequest): CreateAggregatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregatorWithOptions(request, runtime);
}

model CreateCompliancePackRequest {
  clientToken?: string(name='ClientToken'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName'),
          parameterValue?: string(name='ParameterValue'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
      riskLevel?: int32(name='RiskLevel'),
    }
  ](name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model CreateCompliancePackShrinkRequest {
  clientToken?: string(name='ClientToken'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
  configRulesShrink?: string(name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model CreateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId'),
  requestId?: string(name='RequestId'),
}

model CreateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCompliancePackResponseBody(name='body'),
}

async function createCompliancePackWithOptions(tmpReq: CreateCompliancePackRequest, runtime: Util.RuntimeOptions): CreateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.compliancePackTemplateId)) {
    body['CompliancePackTemplateId'] = request.compliancePackTemplateId;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCompliancePack(request: CreateCompliancePackRequest): CreateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCompliancePackWithOptions(request, runtime);
}

model CreateConfigRuleRequest {
  clientToken?: string(name='ClientToken'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParameters?: map[string]any(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  sourceIdentifier?: string(name='SourceIdentifier'),
  sourceOwner?: string(name='SourceOwner'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateConfigRuleShrinkRequest {
  clientToken?: string(name='ClientToken'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParametersShrink?: string(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  sourceIdentifier?: string(name='SourceIdentifier'),
  sourceOwner?: string(name='SourceOwner'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigRuleResponseBody(name='body'),
}

async function createConfigRuleWithOptions(tmpReq: CreateConfigRuleRequest, runtime: Util.RuntimeOptions): CreateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIdentifier)) {
    body['SourceIdentifier'] = request.sourceIdentifier;
  }
  if (!Util.isUnset(request.sourceOwner)) {
    body['SourceOwner'] = request.sourceOwner;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConfigRule(request: CreateConfigRuleRequest): CreateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigRuleWithOptions(request, runtime);
}

model DeactiveAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model DeactiveAggregateConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model DeactiveAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveAggregateConfigRulesResponseBody(name='body'),
}

async function deactiveAggregateConfigRulesWithOptions(request: DeactiveAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): DeactiveAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveAggregateConfigRules(request: DeactiveAggregateConfigRulesRequest): DeactiveAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveAggregateConfigRulesWithOptions(request, runtime);
}

model DeactiveConfigRulesRequest {
  configRuleIds?: string(name='ConfigRuleIds'),
}

model DeactiveConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model DeactiveConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveConfigRulesResponseBody(name='body'),
}

async function deactiveConfigRulesWithOptions(request: DeactiveConfigRulesRequest, runtime: Util.RuntimeOptions): DeactiveConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveConfigRules(request: DeactiveConfigRulesRequest): DeactiveConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveConfigRulesWithOptions(request, runtime);
}

model DeleteAggregateCompliancePacksRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  compliancePackIds?: string(name='CompliancePackIds'),
  deleteRule?: boolean(name='DeleteRule'),
}

model DeleteAggregateCompliancePacksResponseBody = {
  operateCompliancePacksResult?: {
    operateCompliancePacks?: [ 
      {
        compliancePackId?: string(name='CompliancePackId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateCompliancePacks'),
  }(name='OperateCompliancePacksResult'),
  requestId?: string(name='RequestId'),
}

model DeleteAggregateCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAggregateCompliancePacksResponseBody(name='body'),
}

async function deleteAggregateCompliancePacksWithOptions(request: DeleteAggregateCompliancePacksRequest, runtime: Util.RuntimeOptions): DeleteAggregateCompliancePacksResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackIds)) {
    body['CompliancePackIds'] = request.compliancePackIds;
  }
  if (!Util.isUnset(request.deleteRule)) {
    body['DeleteRule'] = request.deleteRule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregateCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregateCompliancePacks(request: DeleteAggregateCompliancePacksRequest): DeleteAggregateCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregateCompliancePacksWithOptions(request, runtime);
}

model DeleteAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model DeleteAggregateConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model DeleteAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAggregateConfigRulesResponseBody(name='body'),
}

async function deleteAggregateConfigRulesWithOptions(request: DeleteAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): DeleteAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregateConfigRules(request: DeleteAggregateConfigRulesRequest): DeleteAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregateConfigRulesWithOptions(request, runtime);
}

model DeleteAggregatorsRequest {
  aggregatorIds?: string(name='AggregatorIds'),
  clientToken?: string(name='ClientToken'),
}

model DeleteAggregatorsResponseBody = {
  operateAggregatorsResult?: {
    operateAggregators?: [ 
      {
        aggregatorId?: string(name='AggregatorId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateAggregators'),
  }(name='OperateAggregatorsResult'),
  requestId?: string(name='RequestId'),
}

model DeleteAggregatorsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAggregatorsResponseBody(name='body'),
}

async function deleteAggregatorsWithOptions(request: DeleteAggregatorsRequest, runtime: Util.RuntimeOptions): DeleteAggregatorsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorIds)) {
    body['AggregatorIds'] = request.aggregatorIds;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregators',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregators(request: DeleteAggregatorsRequest): DeleteAggregatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregatorsWithOptions(request, runtime);
}

model DeleteCompliancePacksRequest {
  clientToken?: string(name='ClientToken'),
  compliancePackIds?: string(name='CompliancePackIds'),
  deleteRule?: boolean(name='DeleteRule'),
}

model DeleteCompliancePacksResponseBody = {
  operateCompliancePacksResult?: {
    operateCompliancePacks?: [ 
      {
        compliancePackId?: string(name='CompliancePackId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateCompliancePacks'),
  }(name='OperateCompliancePacksResult'),
  requestId?: string(name='RequestId'),
}

model DeleteCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCompliancePacksResponseBody(name='body'),
}

async function deleteCompliancePacksWithOptions(request: DeleteCompliancePacksRequest, runtime: Util.RuntimeOptions): DeleteCompliancePacksResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackIds)) {
    body['CompliancePackIds'] = request.compliancePackIds;
  }
  if (!Util.isUnset(request.deleteRule)) {
    body['DeleteRule'] = request.deleteRule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCompliancePacks(request: DeleteCompliancePacksRequest): DeleteCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCompliancePacksWithOptions(request, runtime);
}

model DetachAggregateConfigRuleToCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model DetachAggregateConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model DetachAggregateConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: DetachAggregateConfigRuleToCompliancePackResponseBody(name='body'),
}

async function detachAggregateConfigRuleToCompliancePackWithOptions(request: DetachAggregateConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): DetachAggregateConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['CompliancePackId'] = request.compliancePackId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachAggregateConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachAggregateConfigRuleToCompliancePack(request: DetachAggregateConfigRuleToCompliancePackRequest): DetachAggregateConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachAggregateConfigRuleToCompliancePackWithOptions(request, runtime);
}

model DetachConfigRuleToCompliancePackRequest {
  compliancePackId?: string(name='CompliancePackId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model DetachConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model DetachConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: DetachConfigRuleToCompliancePackResponseBody(name='body'),
}

async function detachConfigRuleToCompliancePackWithOptions(request: DetachConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): DetachConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  query['CompliancePackId'] = request.compliancePackId;
  query['ConfigRuleIds'] = request.configRuleIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachConfigRuleToCompliancePack(request: DetachConfigRuleToCompliancePackRequest): DetachConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachConfigRuleToCompliancePackWithOptions(request, runtime);
}

model GenerateAggregateCompliancePackReportRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GenerateAggregateCompliancePackReportResponseBody = {
  compliancePackId?: string(name='CompliancePackId'),
  requestId?: string(name='RequestId'),
}

model GenerateAggregateCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAggregateCompliancePackReportResponseBody(name='body'),
}

async function generateAggregateCompliancePackReportWithOptions(request: GenerateAggregateCompliancePackReportRequest, runtime: Util.RuntimeOptions): GenerateAggregateCompliancePackReportResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateAggregateCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateAggregateCompliancePackReport(request: GenerateAggregateCompliancePackReportRequest): GenerateAggregateCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateAggregateCompliancePackReportWithOptions(request, runtime);
}

model GenerateAggregateConfigRulesReportRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
}

model GenerateAggregateConfigRulesReportResponseBody = {
  aggregatorId?: string(name='AggregatorId'),
  requestId?: string(name='RequestId'),
}

model GenerateAggregateConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAggregateConfigRulesReportResponseBody(name='body'),
}

async function generateAggregateConfigRulesReportWithOptions(request: GenerateAggregateConfigRulesReportRequest, runtime: Util.RuntimeOptions): GenerateAggregateConfigRulesReportResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateAggregateConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateAggregateConfigRulesReport(request: GenerateAggregateConfigRulesReportRequest): GenerateAggregateConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateAggregateConfigRulesReportWithOptions(request, runtime);
}

model GenerateCompliancePackReportRequest {
  clientToken?: string(name='ClientToken'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GenerateCompliancePackReportResponseBody = {
  compliancePackId?: string(name='CompliancePackId'),
  requestId?: string(name='RequestId'),
}

model GenerateCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateCompliancePackReportResponseBody(name='body'),
}

async function generateCompliancePackReportWithOptions(request: GenerateCompliancePackReportRequest, runtime: Util.RuntimeOptions): GenerateCompliancePackReportResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateCompliancePackReport(request: GenerateCompliancePackReportRequest): GenerateCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateCompliancePackReportWithOptions(request, runtime);
}

model GenerateConfigRulesReportRequest {
  clientToken?: string(name='ClientToken'),
}

model GenerateConfigRulesReportResponseBody = {
  requestId?: string(name='RequestId'),
}

model GenerateConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateConfigRulesReportResponseBody(name='body'),
}

async function generateConfigRulesReportWithOptions(request: GenerateConfigRulesReportRequest, runtime: Util.RuntimeOptions): GenerateConfigRulesReportResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateConfigRulesReport(request: GenerateConfigRulesReportRequest): GenerateConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateConfigRulesReportWithOptions(request, runtime);
}

model GetAggregateAccountComplianceByPackRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GetAggregateAccountComplianceByPackResponseBody = {
  accountComplianceResult?: {
    accountCompliances?: [ 
      {
        accountId?: long(name='AccountId'),
        accountName?: string(name='AccountName'),
        complianceType?: string(name='ComplianceType'),
      }
    ](name='AccountCompliances'),
    compliancePackId?: string(name='CompliancePackId'),
    nonCompliantCount?: int32(name='NonCompliantCount'),
    totalCount?: int32(name='TotalCount'),
  }(name='AccountComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetAggregateAccountComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateAccountComplianceByPackResponseBody(name='body'),
}

async function getAggregateAccountComplianceByPackWithOptions(request: GetAggregateAccountComplianceByPackRequest, runtime: Util.RuntimeOptions): GetAggregateAccountComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateAccountComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateAccountComplianceByPack(request: GetAggregateAccountComplianceByPackRequest): GetAggregateAccountComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateAccountComplianceByPackWithOptions(request, runtime);
}

model GetAggregateCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GetAggregateCompliancePackResponseBody = {
  compliancePack?: {
    accountId?: long(name='AccountId'),
    aggregatorId?: string(name='AggregatorId'),
    compliancePackId?: string(name='CompliancePackId'),
    compliancePackName?: string(name='CompliancePackName'),
    compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
    configRules?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleParameters?: [ 
          {
            parameterName?: string(name='ParameterName'),
            parameterValue?: string(name='ParameterValue'),
            required?: boolean(name='Required'),
          }
        ](name='ConfigRuleParameters'),
        description?: string(name='Description'),
        managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='ConfigRules'),
    createTimestamp?: long(name='CreateTimestamp'),
    description?: string(name='Description'),
    riskLevel?: int32(name='RiskLevel'),
    status?: string(name='Status'),
  }(name='CompliancePack'),
  requestId?: string(name='RequestId'),
}

model GetAggregateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateCompliancePackResponseBody(name='body'),
}

async function getAggregateCompliancePackWithOptions(request: GetAggregateCompliancePackRequest, runtime: Util.RuntimeOptions): GetAggregateCompliancePackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateCompliancePack(request: GetAggregateCompliancePackRequest): GetAggregateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateCompliancePackWithOptions(request, runtime);
}

model GetAggregateCompliancePackReportRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GetAggregateCompliancePackReportResponseBody = {
  compliancePackReport?: {
    accountId?: long(name='AccountId'),
    compliancePackId?: string(name='CompliancePackId'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp'),
    reportStatus?: string(name='ReportStatus'),
    reportUrl?: string(name='ReportUrl'),
  }(name='CompliancePackReport'),
  requestId?: string(name='RequestId'),
}

model GetAggregateCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateCompliancePackReportResponseBody(name='body'),
}

async function getAggregateCompliancePackReportWithOptions(request: GetAggregateCompliancePackReportRequest, runtime: Util.RuntimeOptions): GetAggregateCompliancePackReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateCompliancePackReport(request: GetAggregateCompliancePackReportRequest): GetAggregateCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateCompliancePackReportWithOptions(request, runtime);
}

model GetAggregateConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleId?: string(name='ConfigRuleId'),
}

model GetAggregateConfigRuleResponseBody = {
  configRule?: {
    configRuleArn?: string(name='ConfigRuleArn'),
    configRuleEvaluationStatus?: {
      firstActivatedTimestamp?: long(name='FirstActivatedTimestamp'),
      firstEvaluationStarted?: boolean(name='FirstEvaluationStarted'),
      lastErrorCode?: string(name='LastErrorCode'),
      lastErrorMessage?: string(name='LastErrorMessage'),
      lastFailedEvaluationTimestamp?: long(name='LastFailedEvaluationTimestamp'),
      lastFailedInvocationTimestamp?: long(name='LastFailedInvocationTimestamp'),
      lastSuccessfulEvaluationTimestamp?: long(name='LastSuccessfulEvaluationTimestamp'),
      lastSuccessfulInvocationTimestamp?: long(name='LastSuccessfulInvocationTimestamp'),
    }(name='ConfigRuleEvaluationStatus'),
    configRuleId?: string(name='ConfigRuleId'),
    configRuleName?: string(name='ConfigRuleName'),
    configRuleState?: string(name='ConfigRuleState'),
    configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
    createBy?: {
      aggregatorId?: string(name='AggregatorId'),
      aggregatorName?: string(name='AggregatorName'),
      compliancePackId?: string(name='CompliancePackId'),
      compliancePackName?: string(name='CompliancePackName'),
      creatorId?: string(name='CreatorId'),
      creatorName?: string(name='CreatorName'),
      creatorType?: string(name='CreatorType'),
    }(name='CreateBy'),
    createTimestamp?: long(name='CreateTimestamp'),
    description?: string(name='Description'),
    excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
    inputParameters?: map[string]any(name='InputParameters'),
    managedRule?: {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails'),
      description?: string(name='Description'),
      identifier?: string(name='Identifier'),
      labels?: [ string ](name='Labels'),
      managedRuleName?: string(name='ManagedRuleName'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
          messageType?: string(name='MessageType'),
        }
      ](name='SourceDetails'),
    }(name='ManagedRule'),
    maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
    modifiedTimestamp?: long(name='ModifiedTimestamp'),
    regionIdsScope?: string(name='RegionIdsScope'),
    resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
    resourceTypesScope?: string(name='ResourceTypesScope'),
    riskLevel?: int32(name='RiskLevel'),
    source?: {
      identifier?: string(name='Identifier'),
      owner?: string(name='Owner'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
          messageType?: string(name='MessageType'),
        }
      ](name='SourceDetails'),
    }(name='Source'),
    tagKeyScope?: string(name='TagKeyScope'),
    tagValueScope?: string(name='TagValueScope'),
  }(name='ConfigRule'),
  requestId?: string(name='RequestId'),
}

model GetAggregateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateConfigRuleResponseBody(name='body'),
}

async function getAggregateConfigRuleWithOptions(request: GetAggregateConfigRuleRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['ConfigRuleId'] = request.configRuleId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRule(request: GetAggregateConfigRuleRequest): GetAggregateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRuleWithOptions(request, runtime);
}

model GetAggregateConfigRuleComplianceByPackRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GetAggregateConfigRuleComplianceByPackResponseBody = {
  configRuleComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId'),
    configRuleCompliances?: [ 
      {
        complianceType?: string(name='ComplianceType'),
        configRuleId?: string(name='ConfigRuleId'),
        configRuleName?: string(name='ConfigRuleName'),
      }
    ](name='ConfigRuleCompliances'),
    nonCompliantCount?: int32(name='NonCompliantCount'),
    totalCount?: int32(name='TotalCount'),
  }(name='ConfigRuleComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetAggregateConfigRuleComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateConfigRuleComplianceByPackResponseBody(name='body'),
}

async function getAggregateConfigRuleComplianceByPackWithOptions(request: GetAggregateConfigRuleComplianceByPackRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRuleComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRuleComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRuleComplianceByPack(request: GetAggregateConfigRuleComplianceByPackRequest): GetAggregateConfigRuleComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRuleComplianceByPackWithOptions(request, runtime);
}

model GetAggregateConfigRuleSummaryByRiskLevelRequest {
  aggregatorId?: string(name='AggregatorId'),
}

model GetAggregateConfigRuleSummaryByRiskLevelResponseBody = {
  configRuleSummaries?: [ 
    {
      compliantCount?: int32(name='CompliantCount'),
      nonCompliantCount?: int32(name='NonCompliantCount'),
      riskLevel?: int32(name='RiskLevel'),
    }
  ](name='ConfigRuleSummaries'),
  requestId?: string(name='RequestId'),
}

model GetAggregateConfigRuleSummaryByRiskLevelResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateConfigRuleSummaryByRiskLevelResponseBody(name='body'),
}

async function getAggregateConfigRuleSummaryByRiskLevelWithOptions(request: GetAggregateConfigRuleSummaryByRiskLevelRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRuleSummaryByRiskLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRuleSummaryByRiskLevel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRuleSummaryByRiskLevel(request: GetAggregateConfigRuleSummaryByRiskLevelRequest): GetAggregateConfigRuleSummaryByRiskLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRuleSummaryByRiskLevelWithOptions(request, runtime);
}

model GetAggregateConfigRulesReportRequest {
  aggregatorId?: string(name='AggregatorId'),
}

model GetAggregateConfigRulesReportResponseBody = {
  configRulesReport?: {
    accountId?: long(name='AccountId'),
    aggregatorId?: string(name='AggregatorId'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp'),
    reportStatus?: string(name='ReportStatus'),
    reportUrl?: string(name='ReportUrl'),
  }(name='ConfigRulesReport'),
  requestId?: string(name='RequestId'),
}

model GetAggregateConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateConfigRulesReportResponseBody(name='body'),
}

async function getAggregateConfigRulesReportWithOptions(request: GetAggregateConfigRulesReportRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRulesReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRulesReport(request: GetAggregateConfigRulesReportRequest): GetAggregateConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRulesReportWithOptions(request, runtime);
}

model GetAggregateResourceComplianceByConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId'),
  complianceType?: string(name='ComplianceType'),
  configRuleId?: string(name='ConfigRuleId'),
}

model GetAggregateResourceComplianceByConfigRuleResponseBody = {
  complianceResult?: {
    compliances?: [ 
      {
        complianceType?: string(name='ComplianceType'),
        count?: int32(name='Count'),
      }
    ](name='Compliances'),
    totalCount?: long(name='TotalCount'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetAggregateResourceComplianceByConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateResourceComplianceByConfigRuleResponseBody(name='body'),
}

async function getAggregateResourceComplianceByConfigRuleWithOptions(request: GetAggregateResourceComplianceByConfigRuleRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceByConfigRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceByConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceByConfigRule(request: GetAggregateResourceComplianceByConfigRuleRequest): GetAggregateResourceComplianceByConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceByConfigRuleWithOptions(request, runtime);
}

model GetAggregateResourceComplianceByPackRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
}

model GetAggregateResourceComplianceByPackResponseBody = {
  requestId?: string(name='RequestId'),
  resourceComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId'),
    nonCompliantCount?: int32(name='NonCompliantCount'),
    totalCount?: int32(name='TotalCount'),
  }(name='ResourceComplianceResult'),
}

model GetAggregateResourceComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateResourceComplianceByPackResponseBody(name='body'),
}

async function getAggregateResourceComplianceByPackWithOptions(request: GetAggregateResourceComplianceByPackRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceByPack(request: GetAggregateResourceComplianceByPackRequest): GetAggregateResourceComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceByPackWithOptions(request, runtime);
}

model GetAggregateResourceComplianceTimelineRequest {
  aggregatorId?: string(name='AggregatorId'),
  endTime?: long(name='EndTime'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  startTime?: long(name='StartTime'),
}

model GetAggregateResourceComplianceTimelineResponseBody = {
  requestId?: string(name='RequestId'),
  resourceComplianceTimeline?: {
    complianceList?: [ 
      {
        accountId?: string(name='AccountId'),
        availabilityZone?: string(name='AvailabilityZone'),
        captureTime?: long(name='CaptureTime'),
        configuration?: string(name='Configuration'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region'),
        resourceCreateTime?: long(name='ResourceCreateTime'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='ComplianceList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='ResourceComplianceTimeline'),
}

model GetAggregateResourceComplianceTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateResourceComplianceTimelineResponseBody(name='body'),
}

async function getAggregateResourceComplianceTimelineWithOptions(request: GetAggregateResourceComplianceTimelineRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceTimeline(request: GetAggregateResourceComplianceTimelineRequest): GetAggregateResourceComplianceTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceTimelineWithOptions(request, runtime);
}

model GetAggregateResourceConfigurationTimelineRequest {
  aggregatorId?: string(name='AggregatorId'),
  endTime?: long(name='EndTime'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  startTime?: long(name='StartTime'),
}

model GetAggregateResourceConfigurationTimelineResponseBody = {
  requestId?: string(name='RequestId'),
  resourceConfigurationTimeline?: {
    configurationList?: [ 
      {
        accountId?: long(name='AccountId'),
        availabilityZone?: string(name='AvailabilityZone'),
        captureTime?: string(name='CaptureTime'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region'),
        resourceCreateTime?: string(name='ResourceCreateTime'),
        resourceEventType?: string(name='ResourceEventType'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='ConfigurationList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='ResourceConfigurationTimeline'),
}

model GetAggregateResourceConfigurationTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateResourceConfigurationTimelineResponseBody(name='body'),
}

async function getAggregateResourceConfigurationTimelineWithOptions(request: GetAggregateResourceConfigurationTimelineRequest, runtime: Util.RuntimeOptions): GetAggregateResourceConfigurationTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceConfigurationTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceConfigurationTimeline(request: GetAggregateResourceConfigurationTimelineRequest): GetAggregateResourceConfigurationTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceConfigurationTimelineWithOptions(request, runtime);
}

model GetAggregateResourceCountsGroupByRegionRequest {
  aggregatorId?: string(name='AggregatorId'),
  folderId?: string(name='FolderId', description='资源夹Id'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源owner'),
  resourceType?: string(name='ResourceType'),
}

model GetAggregateResourceCountsGroupByRegionResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      region?: string(name='Region'),
      resourceCount?: long(name='ResourceCount'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId'),
}

model GetAggregateResourceCountsGroupByRegionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateResourceCountsGroupByRegionResponseBody(name='body'),
}

async function getAggregateResourceCountsGroupByRegionWithOptions(request: GetAggregateResourceCountsGroupByRegionRequest, runtime: Util.RuntimeOptions): GetAggregateResourceCountsGroupByRegionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceCountsGroupByRegion',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceCountsGroupByRegion(request: GetAggregateResourceCountsGroupByRegionRequest): GetAggregateResourceCountsGroupByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceCountsGroupByRegionWithOptions(request, runtime);
}

model GetAggregateResourceCountsGroupByResourceTypeRequest {
  aggregatorId?: string(name='AggregatorId'),
  folderId?: string(name='FolderId', description='资源文件夹Id'),
  region?: string(name='Region'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源Owner'),
}

model GetAggregateResourceCountsGroupByResourceTypeResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      resourceCount?: long(name='ResourceCount'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId'),
}

model GetAggregateResourceCountsGroupByResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateResourceCountsGroupByResourceTypeResponseBody(name='body'),
}

async function getAggregateResourceCountsGroupByResourceTypeWithOptions(request: GetAggregateResourceCountsGroupByResourceTypeRequest, runtime: Util.RuntimeOptions): GetAggregateResourceCountsGroupByResourceTypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceCountsGroupByResourceType',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceCountsGroupByResourceType(request: GetAggregateResourceCountsGroupByResourceTypeRequest): GetAggregateResourceCountsGroupByResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceCountsGroupByResourceTypeWithOptions(request, runtime);
}

model GetAggregatorRequest {
  aggregatorId?: string(name='AggregatorId'),
}

model GetAggregatorResponseBody = {
  aggregator?: {
    accountId?: long(name='AccountId'),
    aggregatorAccountCount?: long(name='AggregatorAccountCount'),
    aggregatorAccounts?: [ 
      {
        accountId?: long(name='AccountId'),
        accountName?: string(name='AccountName'),
        accountType?: string(name='AccountType'),
        recorderStatus?: string(name='RecorderStatus'),
      }
    ](name='AggregatorAccounts'),
    aggregatorCreateTimestamp?: string(name='AggregatorCreateTimestamp'),
    aggregatorId?: string(name='AggregatorId'),
    aggregatorName?: string(name='AggregatorName'),
    aggregatorStatus?: int32(name='AggregatorStatus'),
    aggregatorType?: string(name='AggregatorType'),
    description?: string(name='Description'),
  }(name='Aggregator'),
  requestId?: string(name='RequestId'),
}

model GetAggregatorResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregatorResponseBody(name='body'),
}

async function getAggregatorWithOptions(request: GetAggregatorRequest, runtime: Util.RuntimeOptions): GetAggregatorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregator',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregator(request: GetAggregatorRequest): GetAggregatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregatorWithOptions(request, runtime);
}

model GetCompliancePackRequest {
  compliancePackId?: string(name='CompliancePackId'),
}

model GetCompliancePackResponseBody = {
  compliancePack?: {
    accountId?: long(name='AccountId'),
    compliancePackId?: string(name='CompliancePackId'),
    compliancePackName?: string(name='CompliancePackName'),
    compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
    configRules?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleParameters?: [ 
          {
            parameterName?: string(name='ParameterName'),
            parameterValue?: string(name='ParameterValue'),
            required?: boolean(name='Required'),
          }
        ](name='ConfigRuleParameters'),
        description?: string(name='Description'),
        managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='ConfigRules'),
    createTimestamp?: long(name='CreateTimestamp'),
    description?: string(name='Description'),
    riskLevel?: int32(name='RiskLevel'),
    status?: string(name='Status'),
  }(name='CompliancePack'),
  requestId?: string(name='RequestId'),
}

model GetCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: GetCompliancePackResponseBody(name='body'),
}

async function getCompliancePackWithOptions(request: GetCompliancePackRequest, runtime: Util.RuntimeOptions): GetCompliancePackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCompliancePack(request: GetCompliancePackRequest): GetCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCompliancePackWithOptions(request, runtime);
}

model GetCompliancePackReportRequest {
  compliancePackId?: string(name='CompliancePackId'),
}

model GetCompliancePackReportResponseBody = {
  compliancePackReport?: {
    accountId?: long(name='AccountId'),
    compliancePackId?: string(name='CompliancePackId'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp'),
    reportStatus?: string(name='ReportStatus'),
    reportUrl?: string(name='ReportUrl'),
  }(name='CompliancePackReport'),
  requestId?: string(name='RequestId'),
}

model GetCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetCompliancePackReportResponseBody(name='body'),
}

async function getCompliancePackReportWithOptions(request: GetCompliancePackReportRequest, runtime: Util.RuntimeOptions): GetCompliancePackReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCompliancePackReport(request: GetCompliancePackReportRequest): GetCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCompliancePackReportWithOptions(request, runtime);
}

model GetConfigRuleRequest {
  configRuleId?: string(name='ConfigRuleId'),
}

model GetConfigRuleResponseBody = {
  configRule?: {
    configRuleArn?: string(name='ConfigRuleArn'),
    configRuleEvaluationStatus?: {
      firstActivatedTimestamp?: long(name='FirstActivatedTimestamp'),
      firstEvaluationStarted?: boolean(name='FirstEvaluationStarted'),
      lastErrorCode?: string(name='LastErrorCode'),
      lastErrorMessage?: string(name='LastErrorMessage'),
      lastFailedEvaluationTimestamp?: long(name='LastFailedEvaluationTimestamp'),
      lastFailedInvocationTimestamp?: long(name='LastFailedInvocationTimestamp'),
      lastSuccessfulEvaluationTimestamp?: long(name='LastSuccessfulEvaluationTimestamp'),
      lastSuccessfulInvocationTimestamp?: long(name='LastSuccessfulInvocationTimestamp'),
    }(name='ConfigRuleEvaluationStatus'),
    configRuleId?: string(name='ConfigRuleId'),
    configRuleName?: string(name='ConfigRuleName'),
    configRuleState?: string(name='ConfigRuleState'),
    configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
    createBy?: {
      compliancePackId?: string(name='CompliancePackId'),
      compliancePackName?: string(name='CompliancePackName'),
      creatorId?: string(name='CreatorId'),
      creatorName?: string(name='CreatorName'),
    }(name='CreateBy'),
    createTimestamp?: long(name='CreateTimestamp'),
    description?: string(name='Description'),
    excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
    inputParameters?: map[string]any(name='InputParameters'),
    managedRule?: {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails'),
      description?: string(name='Description'),
      identifier?: string(name='Identifier'),
      labels?: [ string ](name='Labels'),
      managedRuleName?: string(name='ManagedRuleName'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
          messageType?: string(name='MessageType'),
        }
      ](name='SourceDetails'),
    }(name='ManagedRule'),
    maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
    modifiedTimestamp?: long(name='ModifiedTimestamp'),
    regionIdsScope?: string(name='RegionIdsScope'),
    resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
    resourceTypesScope?: string(name='ResourceTypesScope'),
    riskLevel?: int32(name='RiskLevel'),
    source?: {
      identifier?: string(name='Identifier'),
      owner?: string(name='Owner'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
          messageType?: string(name='MessageType'),
        }
      ](name='SourceDetails'),
    }(name='Source'),
    tagKeyScope?: string(name='TagKeyScope'),
    tagValueScope?: string(name='TagValueScope'),
  }(name='ConfigRule'),
  requestId?: string(name='RequestId'),
}

model GetConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigRuleResponseBody(name='body'),
}

async function getConfigRuleWithOptions(request: GetConfigRuleRequest, runtime: Util.RuntimeOptions): GetConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  query['ConfigRuleId'] = request.configRuleId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRule(request: GetConfigRuleRequest): GetConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleWithOptions(request, runtime);
}

model GetConfigRuleComplianceByPackRequest {
  compliancePackId?: string(name='CompliancePackId'),
}

model GetConfigRuleComplianceByPackResponseBody = {
  configRuleComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId'),
    configRuleCompliances?: [ 
      {
        complianceType?: string(name='ComplianceType'),
        configRuleId?: string(name='ConfigRuleId'),
        configRuleName?: string(name='ConfigRuleName'),
      }
    ](name='ConfigRuleCompliances'),
    nonCompliantCount?: int32(name='NonCompliantCount'),
    totalCount?: int32(name='TotalCount'),
  }(name='ConfigRuleComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetConfigRuleComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigRuleComplianceByPackResponseBody(name='body'),
}

async function getConfigRuleComplianceByPackWithOptions(request: GetConfigRuleComplianceByPackRequest, runtime: Util.RuntimeOptions): GetConfigRuleComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigRuleComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRuleComplianceByPack(request: GetConfigRuleComplianceByPackRequest): GetConfigRuleComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleComplianceByPackWithOptions(request, runtime);
}

model GetConfigRuleSummaryByRiskLevelResponseBody = {
  configRuleSummaries?: [ 
    {
      compliantCount?: int32(name='CompliantCount'),
      nonCompliantCount?: int32(name='NonCompliantCount'),
      riskLevel?: int32(name='RiskLevel'),
    }
  ](name='ConfigRuleSummaries'),
  requestId?: string(name='RequestId'),
}

model GetConfigRuleSummaryByRiskLevelResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigRuleSummaryByRiskLevelResponseBody(name='body'),
}

async function getConfigRuleSummaryByRiskLevelWithOptions(runtime: Util.RuntimeOptions): GetConfigRuleSummaryByRiskLevelResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetConfigRuleSummaryByRiskLevel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRuleSummaryByRiskLevel(): GetConfigRuleSummaryByRiskLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleSummaryByRiskLevelWithOptions(runtime);
}

model GetConfigRulesReportResponseBody = {
  configRulesReport?: {
    accountId?: long(name='AccountId'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp'),
    reportStatus?: string(name='ReportStatus'),
    reportUrl?: string(name='ReportUrl'),
  }(name='ConfigRulesReport'),
  requestId?: string(name='RequestId'),
}

model GetConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigRulesReportResponseBody(name='body'),
}

async function getConfigRulesReportWithOptions(runtime: Util.RuntimeOptions): GetConfigRulesReportResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRulesReport(): GetConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRulesReportWithOptions(runtime);
}

model GetDiscoveredResourceCountsGroupByRegionRequest {
  resourceType?: string(name='ResourceType'),
}

model GetDiscoveredResourceCountsGroupByRegionResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      region?: string(name='Region'),
      resourceCount?: long(name='ResourceCount'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId'),
}

model GetDiscoveredResourceCountsGroupByRegionResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiscoveredResourceCountsGroupByRegionResponseBody(name='body'),
}

async function getDiscoveredResourceCountsGroupByRegionWithOptions(request: GetDiscoveredResourceCountsGroupByRegionRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceCountsGroupByRegionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResourceCountsGroupByRegion',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResourceCountsGroupByRegion(request: GetDiscoveredResourceCountsGroupByRegionRequest): GetDiscoveredResourceCountsGroupByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceCountsGroupByRegionWithOptions(request, runtime);
}

model GetDiscoveredResourceCountsGroupByResourceTypeRequest {
  region?: string(name='Region'),
}

model GetDiscoveredResourceCountsGroupByResourceTypeResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      resourceCount?: long(name='ResourceCount'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId'),
}

model GetDiscoveredResourceCountsGroupByResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiscoveredResourceCountsGroupByResourceTypeResponseBody(name='body'),
}

async function getDiscoveredResourceCountsGroupByResourceTypeWithOptions(request: GetDiscoveredResourceCountsGroupByResourceTypeRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceCountsGroupByResourceTypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResourceCountsGroupByResourceType',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResourceCountsGroupByResourceType(request: GetDiscoveredResourceCountsGroupByResourceTypeRequest): GetDiscoveredResourceCountsGroupByResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceCountsGroupByResourceTypeWithOptions(request, runtime);
}

model GetResourceComplianceByConfigRuleRequest {
  complianceType?: string(name='ComplianceType'),
  configRuleId?: string(name='ConfigRuleId'),
}

model GetResourceComplianceByConfigRuleResponseBody = {
  complianceResult?: {
    compliances?: [ 
      {
        complianceType?: string(name='ComplianceType'),
        count?: int32(name='Count'),
      }
    ](name='Compliances'),
    totalCount?: long(name='TotalCount'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetResourceComplianceByConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceComplianceByConfigRuleResponseBody(name='body'),
}

async function getResourceComplianceByConfigRuleWithOptions(request: GetResourceComplianceByConfigRuleRequest, runtime: Util.RuntimeOptions): GetResourceComplianceByConfigRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceByConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceByConfigRule(request: GetResourceComplianceByConfigRuleRequest): GetResourceComplianceByConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceByConfigRuleWithOptions(request, runtime);
}

model GetResourceComplianceByPackRequest {
  compliancePackId?: string(name='CompliancePackId'),
}

model GetResourceComplianceByPackResponseBody = {
  requestId?: string(name='RequestId'),
  resourceComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId'),
    nonCompliantCount?: int32(name='NonCompliantCount'),
    totalCount?: int32(name='TotalCount'),
  }(name='ResourceComplianceResult'),
}

model GetResourceComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceComplianceByPackResponseBody(name='body'),
}

async function getResourceComplianceByPackWithOptions(request: GetResourceComplianceByPackRequest, runtime: Util.RuntimeOptions): GetResourceComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceByPack(request: GetResourceComplianceByPackRequest): GetResourceComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceByPackWithOptions(request, runtime);
}

model GetResourceComplianceTimelineRequest {
  endTime?: long(name='EndTime'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  startTime?: long(name='StartTime'),
}

model GetResourceComplianceTimelineResponseBody = {
  requestId?: string(name='RequestId'),
  resourceComplianceTimeline?: {
    complianceList?: [ 
      {
        accountId?: string(name='AccountId'),
        availabilityZone?: string(name='AvailabilityZone'),
        captureTime?: long(name='CaptureTime'),
        configuration?: string(name='Configuration'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region'),
        resourceCreateTime?: long(name='ResourceCreateTime'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='ComplianceList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='ResourceComplianceTimeline'),
}

model GetResourceComplianceTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceComplianceTimelineResponseBody(name='body'),
}

async function getResourceComplianceTimelineWithOptions(request: GetResourceComplianceTimelineRequest, runtime: Util.RuntimeOptions): GetResourceComplianceTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceTimeline(request: GetResourceComplianceTimelineRequest): GetResourceComplianceTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceTimelineWithOptions(request, runtime);
}

model GetResourceConfigurationTimelineRequest {
  endTime?: long(name='EndTime'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  startTime?: long(name='StartTime'),
}

model GetResourceConfigurationTimelineResponseBody = {
  requestId?: string(name='RequestId'),
  resourceConfigurationTimeline?: {
    configurationList?: [ 
      {
        accountId?: long(name='AccountId'),
        availabilityZone?: string(name='AvailabilityZone'),
        captureTime?: string(name='CaptureTime'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region'),
        relationship?: string(name='Relationship'),
        relationshipDiff?: string(name='RelationshipDiff'),
        resourceCreateTime?: string(name='ResourceCreateTime'),
        resourceEventType?: string(name='ResourceEventType'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='ConfigurationList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='ResourceConfigurationTimeline'),
}

model GetResourceConfigurationTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceConfigurationTimelineResponseBody(name='body'),
}

async function getResourceConfigurationTimelineWithOptions(request: GetResourceConfigurationTimelineRequest, runtime: Util.RuntimeOptions): GetResourceConfigurationTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceConfigurationTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceConfigurationTimeline(request: GetResourceConfigurationTimelineRequest): GetResourceConfigurationTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceConfigurationTimelineWithOptions(request, runtime);
}

model IgnoreAggregateEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleId?: string(name='ConfigRuleId'),
  reason?: string(name='Reason'),
  resources?: [ 
    {
      region?: string(name='Region'),
      resourceAccountId?: long(name='ResourceAccountId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
}

model IgnoreAggregateEvaluationResultsShrinkRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleId?: string(name='ConfigRuleId'),
  reason?: string(name='Reason'),
  resourcesShrink?: string(name='Resources'),
}

model IgnoreAggregateEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model IgnoreAggregateEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreAggregateEvaluationResultsResponseBody(name='body'),
}

async function ignoreAggregateEvaluationResultsWithOptions(tmpReq: IgnoreAggregateEvaluationResultsRequest, runtime: Util.RuntimeOptions): IgnoreAggregateEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new IgnoreAggregateEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.reason)) {
    body['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreAggregateEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreAggregateEvaluationResults(request: IgnoreAggregateEvaluationResultsRequest): IgnoreAggregateEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreAggregateEvaluationResultsWithOptions(request, runtime);
}

model IgnoreEvaluationResultsRequest {
  configRuleId?: string(name='ConfigRuleId'),
  reason?: string(name='Reason'),
  resources?: [ 
    {
      region?: string(name='Region'),
      resourceAccountId?: long(name='ResourceAccountId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
}

model IgnoreEvaluationResultsShrinkRequest {
  configRuleId?: string(name='ConfigRuleId'),
  reason?: string(name='Reason'),
  resourcesShrink?: string(name='Resources'),
}

model IgnoreEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model IgnoreEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreEvaluationResultsResponseBody(name='body'),
}

async function ignoreEvaluationResultsWithOptions(tmpReq: IgnoreEvaluationResultsRequest, runtime: Util.RuntimeOptions): IgnoreEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new IgnoreEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.reason)) {
    body['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreEvaluationResults(request: IgnoreEvaluationResultsRequest): IgnoreEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreEvaluationResultsWithOptions(request, runtime);
}

model ListAggregateCompliancePacksRequest {
  aggregatorId?: string(name='AggregatorId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model ListAggregateCompliancePacksResponseBody = {
  compliancePacksResult?: {
    compliancePacks?: [ 
      {
        accountId?: long(name='AccountId'),
        aggregatorId?: string(name='AggregatorId'),
        compliancePackId?: string(name='CompliancePackId'),
        compliancePackName?: string(name='CompliancePackName'),
        compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
        createTimestamp?: long(name='CreateTimestamp'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel'),
        status?: string(name='Status'),
      }
    ](name='CompliancePacks'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='CompliancePacksResult'),
  requestId?: string(name='RequestId'),
}

model ListAggregateCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  body: ListAggregateCompliancePacksResponseBody(name='body'),
}

async function listAggregateCompliancePacksWithOptions(request: ListAggregateCompliancePacksRequest, runtime: Util.RuntimeOptions): ListAggregateCompliancePacksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateCompliancePacks(request: ListAggregateCompliancePacksRequest): ListAggregateCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateCompliancePacksWithOptions(request, runtime);
}

model ListAggregateConfigRuleEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
  complianceType?: string(name='ComplianceType'),
  configRuleId?: string(name='ConfigRuleId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListAggregateConfigRuleEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation'),
        complianceType?: string(name='ComplianceType'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            compliancePackId?: string(name='CompliancePackId'),
            configRuleArn?: string(name='ConfigRuleArn'),
            configRuleId?: string(name='ConfigRuleId'),
            configRuleName?: string(name='ConfigRuleName'),
            regionId?: string(name='RegionId'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
            resourceOwnerId?: long(name='ResourceOwnerId'),
            resourceType?: string(name='ResourceType'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType'),
        remediationEnabled?: boolean(name='RemediationEnabled'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId'),
}

model ListAggregateConfigRuleEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAggregateConfigRuleEvaluationResultsResponseBody(name='body'),
}

async function listAggregateConfigRuleEvaluationResultsWithOptions(request: ListAggregateConfigRuleEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListAggregateConfigRuleEvaluationResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateConfigRuleEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateConfigRuleEvaluationResults(request: ListAggregateConfigRuleEvaluationResultsRequest): ListAggregateConfigRuleEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateConfigRuleEvaluationResultsWithOptions(request, runtime);
}

model ListAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId'),
  complianceType?: string(name='ComplianceType'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleState?: string(name='ConfigRuleState'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  riskLevel?: int32(name='RiskLevel'),
}

model ListAggregateConfigRulesResponseBody = {
  configRules?: {
    configRuleList?: [ 
      {
        accountId?: long(name='AccountId'),
        automationType?: string(name='AutomationType'),
        compliance?: {
          complianceType?: string(name='ComplianceType'),
          count?: int32(name='Count'),
        }(name='Compliance'),
        configRuleArn?: string(name='ConfigRuleArn'),
        configRuleId?: string(name='ConfigRuleId'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleState?: string(name='ConfigRuleState'),
        createBy?: {
          aggregatorId?: string(name='AggregatorId'),
          aggregatorName?: string(name='AggregatorName'),
          compliancePackId?: string(name='CompliancePackId'),
          compliancePackName?: string(name='CompliancePackName'),
          creatorId?: string(name='CreatorId'),
          creatorName?: string(name='CreatorName'),
          creatorType?: string(name='CreatorType'),
        }(name='CreateBy'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel'),
        sourceIdentifier?: string(name='SourceIdentifier'),
        sourceOwner?: string(name='SourceOwner'),
      }
    ](name='ConfigRuleList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='ConfigRules'),
  requestId?: string(name='RequestId'),
}

model ListAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAggregateConfigRulesResponseBody(name='body'),
}

async function listAggregateConfigRulesWithOptions(request: ListAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): ListAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateConfigRules(request: ListAggregateConfigRulesRequest): ListAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateConfigRulesWithOptions(request, runtime);
}

model ListAggregateResourceEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId'),
  complianceType?: string(name='ComplianceType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model ListAggregateResourceEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation'),
        complianceType?: string(name='ComplianceType'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            configRuleArn?: string(name='ConfigRuleArn'),
            configRuleId?: string(name='ConfigRuleId'),
            configRuleName?: string(name='ConfigRuleName'),
            regionId?: string(name='RegionId'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
            resourceType?: string(name='ResourceType'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType'),
        remediationEnabled?: boolean(name='RemediationEnabled'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId'),
}

model ListAggregateResourceEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAggregateResourceEvaluationResultsResponseBody(name='body'),
}

async function listAggregateResourceEvaluationResultsWithOptions(request: ListAggregateResourceEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListAggregateResourceEvaluationResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateResourceEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateResourceEvaluationResults(request: ListAggregateResourceEvaluationResultsRequest): ListAggregateResourceEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateResourceEvaluationResultsWithOptions(request, runtime);
}

model ListAggregatorsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListAggregatorsResponseBody = {
  aggregatorsResult?: {
    aggregators?: [ 
      {
        accountId?: long(name='AccountId'),
        aggregatorAccountCount?: long(name='AggregatorAccountCount'),
        aggregatorCreateTimestamp?: long(name='AggregatorCreateTimestamp'),
        aggregatorId?: string(name='AggregatorId'),
        aggregatorName?: string(name='AggregatorName'),
        aggregatorStatus?: int32(name='AggregatorStatus'),
        aggregatorType?: string(name='AggregatorType'),
        description?: string(name='Description'),
      }
    ](name='Aggregators'),
    nextToken?: string(name='NextToken'),
  }(name='AggregatorsResult'),
  requestId?: string(name='RequestId'),
}

model ListAggregatorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAggregatorsResponseBody(name='body'),
}

async function listAggregatorsWithOptions(request: ListAggregatorsRequest, runtime: Util.RuntimeOptions): ListAggregatorsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregators',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregators(request: ListAggregatorsRequest): ListAggregatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregatorsWithOptions(request, runtime);
}

model ListCompliancePackTemplatesRequest {
  compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListCompliancePackTemplatesResponseBody = {
  compliancePackTemplatesResult?: {
    compliancePackTemplates?: [ 
      {
        compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
        compliancePackTemplateName?: string(name='CompliancePackTemplateName'),
        configRules?: [ 
          {
            configRuleParameters?: [ 
              {
                parameterName?: string(name='ParameterName'),
                parameterValue?: string(name='ParameterValue'),
                required?: boolean(name='Required'),
              }
            ](name='ConfigRuleParameters'),
            description?: string(name='Description'),
            managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
            managedRuleName?: string(name='ManagedRuleName'),
            riskLevel?: int32(name='RiskLevel'),
          }
        ](name='ConfigRules'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='CompliancePackTemplates'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='CompliancePackTemplatesResult'),
  requestId?: string(name='RequestId'),
}

model ListCompliancePackTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCompliancePackTemplatesResponseBody(name='body'),
}

async function listCompliancePackTemplatesWithOptions(request: ListCompliancePackTemplatesRequest, runtime: Util.RuntimeOptions): ListCompliancePackTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCompliancePackTemplates',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCompliancePackTemplates(request: ListCompliancePackTemplatesRequest): ListCompliancePackTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCompliancePackTemplatesWithOptions(request, runtime);
}

model ListCompliancePacksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model ListCompliancePacksResponseBody = {
  compliancePacksResult?: {
    compliancePacks?: [ 
      {
        accountId?: long(name='AccountId'),
        compliancePackId?: string(name='CompliancePackId'),
        compliancePackName?: string(name='CompliancePackName'),
        compliancePackTemplateId?: string(name='CompliancePackTemplateId'),
        createTimestamp?: long(name='CreateTimestamp'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel'),
        status?: string(name='Status'),
      }
    ](name='CompliancePacks'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='CompliancePacksResult'),
  requestId?: string(name='RequestId'),
}

model ListCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  body: ListCompliancePacksResponseBody(name='body'),
}

async function listCompliancePacksWithOptions(request: ListCompliancePacksRequest, runtime: Util.RuntimeOptions): ListCompliancePacksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCompliancePacks(request: ListCompliancePacksRequest): ListCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCompliancePacksWithOptions(request, runtime);
}

model ListConfigRuleEvaluationResultsRequest {
  compliancePackId?: string(name='CompliancePackId'),
  complianceType?: string(name='ComplianceType'),
  configRuleId?: string(name='ConfigRuleId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListConfigRuleEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation'),
        complianceType?: string(name='ComplianceType'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            compliancePackId?: string(name='CompliancePackId'),
            configRuleArn?: string(name='ConfigRuleArn'),
            configRuleId?: string(name='ConfigRuleId'),
            configRuleName?: string(name='ConfigRuleName'),
            regionId?: string(name='RegionId'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
            resourceOwnerId?: long(name='ResourceOwnerId'),
            resourceType?: string(name='ResourceType'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType'),
        remediationEnabled?: boolean(name='RemediationEnabled'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId'),
}

model ListConfigRuleEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigRuleEvaluationResultsResponseBody(name='body'),
}

async function listConfigRuleEvaluationResultsWithOptions(request: ListConfigRuleEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListConfigRuleEvaluationResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigRuleEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigRuleEvaluationResults(request: ListConfigRuleEvaluationResultsRequest): ListConfigRuleEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigRuleEvaluationResultsWithOptions(request, runtime);
}

model ListResourceEvaluationResultsRequest {
  complianceType?: string(name='ComplianceType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model ListResourceEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation'),
        complianceType?: string(name='ComplianceType'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            configRuleArn?: string(name='ConfigRuleArn'),
            configRuleId?: string(name='ConfigRuleId'),
            configRuleName?: string(name='ConfigRuleName'),
            regionId?: string(name='RegionId'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
            resourceType?: string(name='ResourceType'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType'),
        remediationEnabled?: boolean(name='RemediationEnabled'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId'),
}

model ListResourceEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceEvaluationResultsResponseBody(name='body'),
}

async function listResourceEvaluationResultsWithOptions(request: ListResourceEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListResourceEvaluationResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceEvaluationResults(request: ListResourceEvaluationResultsRequest): ListResourceEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceEvaluationResultsWithOptions(request, runtime);
}

model RevertAggregateEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleId?: string(name='ConfigRuleId'),
  resources?: [ 
    {
      region?: string(name='Region'),
      resourceAccountId?: long(name='ResourceAccountId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
}

model RevertAggregateEvaluationResultsShrinkRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleId?: string(name='ConfigRuleId'),
  resourcesShrink?: string(name='Resources'),
}

model RevertAggregateEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevertAggregateEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: RevertAggregateEvaluationResultsResponseBody(name='body'),
}

async function revertAggregateEvaluationResultsWithOptions(tmpReq: RevertAggregateEvaluationResultsRequest, runtime: Util.RuntimeOptions): RevertAggregateEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new RevertAggregateEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevertAggregateEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revertAggregateEvaluationResults(request: RevertAggregateEvaluationResultsRequest): RevertAggregateEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return revertAggregateEvaluationResultsWithOptions(request, runtime);
}

model RevertEvaluationResultsRequest {
  configRuleId?: string(name='ConfigRuleId'),
  resources?: [ 
    {
      region?: string(name='Region'),
      resourceAccountId?: long(name='ResourceAccountId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
}

model RevertEvaluationResultsShrinkRequest {
  configRuleId?: string(name='ConfigRuleId'),
  resourcesShrink?: string(name='Resources'),
}

model RevertEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevertEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: RevertEvaluationResultsResponseBody(name='body'),
}

async function revertEvaluationResultsWithOptions(tmpReq: RevertEvaluationResultsRequest, runtime: Util.RuntimeOptions): RevertEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new RevertEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevertEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revertEvaluationResults(request: RevertEvaluationResultsRequest): RevertEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return revertEvaluationResultsWithOptions(request, runtime);
}

model StartAggregateConfigRuleEvaluationRequest {
  aggregatorId?: string(name='AggregatorId'),
  compliancePackId?: string(name='CompliancePackId'),
  configRuleId?: string(name='ConfigRuleId'),
  revertEvaluation?: boolean(name='RevertEvaluation'),
}

model StartAggregateConfigRuleEvaluationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model StartAggregateConfigRuleEvaluationResponse = {
  headers: map[string]string(name='headers'),
  body: StartAggregateConfigRuleEvaluationResponseBody(name='body'),
}

async function startAggregateConfigRuleEvaluationWithOptions(request: StartAggregateConfigRuleEvaluationRequest, runtime: Util.RuntimeOptions): StartAggregateConfigRuleEvaluationResponse {
  Util.validateModel(request);
  var query = {};
  query['AggregatorId'] = request.aggregatorId;
  query['CompliancePackId'] = request.compliancePackId;
  query['ConfigRuleId'] = request.configRuleId;
  query['RevertEvaluation'] = request.revertEvaluation;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartAggregateConfigRuleEvaluation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startAggregateConfigRuleEvaluation(request: StartAggregateConfigRuleEvaluationRequest): StartAggregateConfigRuleEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAggregateConfigRuleEvaluationWithOptions(request, runtime);
}

model UpdateAggregateCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  compliancePackId?: string(name='CompliancePackId'),
  compliancePackName?: string(name='CompliancePackName'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName'),
          parameterValue?: string(name='ParameterValue'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
      riskLevel?: int32(name='RiskLevel'),
    }
  ](name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model UpdateAggregateCompliancePackShrinkRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  compliancePackId?: string(name='CompliancePackId'),
  compliancePackName?: string(name='CompliancePackName'),
  configRulesShrink?: string(name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model UpdateAggregateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId'),
  requestId?: string(name='RequestId'),
}

model UpdateAggregateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAggregateCompliancePackResponseBody(name='body'),
}

async function updateAggregateCompliancePackWithOptions(tmpReq: UpdateAggregateCompliancePackRequest, runtime: Util.RuntimeOptions): UpdateAggregateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAggregateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregateCompliancePack(request: UpdateAggregateCompliancePackRequest): UpdateAggregateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregateCompliancePackWithOptions(request, runtime);
}

model UpdateAggregateConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  configRuleId?: string(name='ConfigRuleId'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParameters?: map[string]any(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateAggregateConfigRuleShrinkRequest {
  aggregatorId?: string(name='AggregatorId'),
  clientToken?: string(name='ClientToken'),
  configRuleId?: string(name='ConfigRuleId'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParametersShrink?: string(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateAggregateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId'),
  requestId?: string(name='RequestId'),
}

model UpdateAggregateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAggregateConfigRuleResponseBody(name='body'),
}

async function updateAggregateConfigRuleWithOptions(tmpReq: UpdateAggregateConfigRuleRequest, runtime: Util.RuntimeOptions): UpdateAggregateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAggregateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregateConfigRule(request: UpdateAggregateConfigRuleRequest): UpdateAggregateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregateConfigRuleWithOptions(request, runtime);
}

model UpdateAggregatorRequest {
  aggregatorAccounts?: [ 
    {
      accountId?: long(name='AccountId'),
      accountName?: string(name='AccountName'),
      accountType?: string(name='AccountType'),
    }
  ](name='AggregatorAccounts'),
  aggregatorId?: string(name='AggregatorId'),
  aggregatorName?: string(name='AggregatorName'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model UpdateAggregatorShrinkRequest {
  aggregatorAccountsShrink?: string(name='AggregatorAccounts'),
  aggregatorId?: string(name='AggregatorId'),
  aggregatorName?: string(name='AggregatorName'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model UpdateAggregatorResponseBody = {
  aggregatorId?: string(name='AggregatorId'),
  requestId?: string(name='RequestId'),
}

model UpdateAggregatorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAggregatorResponseBody(name='body'),
}

async function updateAggregatorWithOptions(tmpReq: UpdateAggregatorRequest, runtime: Util.RuntimeOptions): UpdateAggregatorResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAggregatorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aggregatorAccounts)) {
    request.aggregatorAccountsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregatorAccounts, 'AggregatorAccounts', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregatorAccountsShrink)) {
    body['AggregatorAccounts'] = request.aggregatorAccountsShrink;
  }
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.aggregatorName)) {
    body['AggregatorName'] = request.aggregatorName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregator',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregator(request: UpdateAggregatorRequest): UpdateAggregatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregatorWithOptions(request, runtime);
}

model UpdateCompliancePackRequest {
  clientToken?: string(name='ClientToken'),
  compliancePackId?: string(name='CompliancePackId'),
  compliancePackName?: string(name='CompliancePackName'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName'),
          parameterValue?: string(name='ParameterValue'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier'),
      riskLevel?: int32(name='RiskLevel'),
    }
  ](name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model UpdateCompliancePackShrinkRequest {
  clientToken?: string(name='ClientToken'),
  compliancePackId?: string(name='CompliancePackId'),
  compliancePackName?: string(name='CompliancePackName'),
  configRulesShrink?: string(name='ConfigRules'),
  description?: string(name='Description'),
  riskLevel?: int32(name='RiskLevel'),
}

model UpdateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId'),
  requestId?: string(name='RequestId'),
}

model UpdateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCompliancePackResponseBody(name='body'),
}

async function updateCompliancePackWithOptions(tmpReq: UpdateCompliancePackRequest, runtime: Util.RuntimeOptions): UpdateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCompliancePack(request: UpdateCompliancePackRequest): UpdateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCompliancePackWithOptions(request, runtime);
}

model UpdateConfigRuleRequest {
  clientToken?: string(name='ClientToken'),
  configRuleId?: string(name='ConfigRuleId'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParameters?: map[string]any(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateConfigRuleShrinkRequest {
  clientToken?: string(name='ClientToken'),
  configRuleId?: string(name='ConfigRuleId'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  inputParametersShrink?: string(name='InputParameters'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope'),
  riskLevel?: int32(name='RiskLevel'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId'),
  requestId?: string(name='RequestId'),
}

model UpdateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigRuleResponseBody(name='body'),
}

async function updateConfigRuleWithOptions(tmpReq: UpdateConfigRuleRequest, runtime: Util.RuntimeOptions): UpdateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConfigRule(request: UpdateConfigRuleRequest): UpdateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigRuleWithOptions(request, runtime);
}

