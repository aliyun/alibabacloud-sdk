/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-shanghai = 'config.cn-shanghai.aliyuncs.com',
    ap-southeast-1 = 'config.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('config', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ResourceDirectoryFolderNode {
  accountId?: string(name='AccountId'),
  children?: [
    ResourceDirectoryFolderNode
  ](name='Children'),
  displayName?: string(name='DisplayName'),
  folderId?: string(name='FolderId'),
  folderName?: string(name='FolderName'),
  parentFolderId?: string(name='ParentFolderId'),
}

model ActiveAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-5772ba41209e007b****'),
}

model ActiveAggregateConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-5772ba41209e007b****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleNotExists'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model ActiveAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActiveAggregateConfigRulesResponseBody(name='body'),
}

async function activeAggregateConfigRulesWithOptions(request: ActiveAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): ActiveAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeAggregateConfigRules(request: ActiveAggregateConfigRulesRequest): ActiveAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeAggregateConfigRulesWithOptions(request, runtime);
}

model AttachAggregateConfigRuleToCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-75b4626622af00c3****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-0453626622af0020****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-a124626622af00e7****'),
}

model AttachAggregateConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-a124626622af00e7****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleNotExists'),
        success?: boolean(name='Success', example='true'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='DE72B7B5-D0EA-15E6-A359-EDECBB9BDFA3'),
}

model AttachAggregateConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachAggregateConfigRuleToCompliancePackResponseBody(name='body'),
}

async function attachAggregateConfigRuleToCompliancePackWithOptions(request: AttachAggregateConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): AttachAggregateConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachAggregateConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachAggregateConfigRuleToCompliancePack(request: AttachAggregateConfigRuleToCompliancePackRequest): AttachAggregateConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachAggregateConfigRuleToCompliancePackWithOptions(request, runtime);
}

model AttachConfigRuleToCompliancePackRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-5bb1626622af00bd****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-6cc4626622af00e7****'),
}

model AttachConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-6cc4626622af00e7****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleNotExists'),
        success?: boolean(name='Success', example='true'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB12A'),
}

model AttachConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachConfigRuleToCompliancePackResponseBody(name='body'),
}

async function attachConfigRuleToCompliancePackWithOptions(request: AttachConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): AttachConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachConfigRuleToCompliancePack(request: AttachConfigRuleToCompliancePackRequest): AttachConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachConfigRuleToCompliancePackWithOptions(request, runtime);
}

model CopyCompliancePacksRequest {
  desAggregatorIds?: string(name='DesAggregatorIds', example='ca-c73c626622af00f8****'),
  srcAggregatorId?: string(name='SrcAggregatorId', example='ca-05e6626622af0050****'),
  srcCompliancePackIds?: string(name='SrcCompliancePackIds', example='cp-4c02626622af0050****,cp-47c1626622af0050****'),
}

model CopyCompliancePacksResponseBody = {
  copyRulesResult?: boolean(name='CopyRulesResult', example='true'),
  requestId?: string(name='RequestId', example='9E1E69DE-BDED-581E-B559-0C15690901D0'),
}

model CopyCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyCompliancePacksResponseBody(name='body'),
}

async function copyCompliancePacksWithOptions(request: CopyCompliancePacksRequest, runtime: Util.RuntimeOptions): CopyCompliancePacksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desAggregatorIds)) {
    query['DesAggregatorIds'] = request.desAggregatorIds;
  }
  if (!Util.isUnset(request.srcAggregatorId)) {
    query['SrcAggregatorId'] = request.srcAggregatorId;
  }
  if (!Util.isUnset(request.srcCompliancePackIds)) {
    query['SrcCompliancePackIds'] = request.srcCompliancePackIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyCompliancePacks(request: CopyCompliancePacksRequest): CopyCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCompliancePacksWithOptions(request, runtime);
}

model CopyConfigRulesRequest {
  desAggregatorIds?: string(name='DesAggregatorIds', example='ca-4b4e626622af005d****'),
  srcAggregatorId?: string(name='SrcAggregatorId', example='ca-24db626622af0060****'),
  srcConfigRuleIds?: string(name='SrcConfigRuleIds', example='cr-4b57626622af0065****,cr-47c1626622af0050****'),
}

model CopyConfigRulesResponseBody = {
  copyRulesResult?: boolean(name='CopyRulesResult', example='true'),
  requestId?: string(name='RequestId', example='7BD81ECF-3194-5A6B-8719-9FC283167AD4'),
}

model CopyConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyConfigRulesResponseBody(name='body'),
}

async function copyConfigRulesWithOptions(request: CopyConfigRulesRequest, runtime: Util.RuntimeOptions): CopyConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desAggregatorIds)) {
    query['DesAggregatorIds'] = request.desAggregatorIds;
  }
  if (!Util.isUnset(request.srcAggregatorId)) {
    query['SrcAggregatorId'] = request.srcAggregatorId;
  }
  if (!Util.isUnset(request.srcConfigRuleIds)) {
    query['SrcConfigRuleIds'] = request.srcConfigRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyConfigRules(request: CopyConfigRulesRequest): CopyConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyConfigRulesWithOptions(request, runtime);
}

model CreateAggregateCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId', example='cr-e918626622af000f****'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName', example='bandwidth'),
          parameterValue?: string(name='ParameterValue', example='10'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='eip-bandwidth-limit'),
      riskLevel?: int32(name='RiskLevel', example='1'),
    }
  ](name='ConfigRules'),
  defaultEnable?: boolean(name='DefaultEnable'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateAggregateCompliancePackShrinkRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
  configRulesShrink?: string(name='ConfigRules'),
  defaultEnable?: boolean(name='DefaultEnable'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateAggregateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId', example='cp-fc56626622af00f9****'),
  requestId?: string(name='RequestId', example='CC0CE5EB-E51E-48EB-B4AB-9A9E131ECC0F'),
}

model CreateAggregateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAggregateCompliancePackResponseBody(name='body'),
}

async function createAggregateCompliancePackWithOptions(tmpReq: CreateAggregateCompliancePackRequest, runtime: Util.RuntimeOptions): CreateAggregateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAggregateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.compliancePackTemplateId)) {
    body['CompliancePackTemplateId'] = request.compliancePackTemplateId;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.defaultEnable)) {
    body['DefaultEnable'] = request.defaultEnable;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregateCompliancePack(request: CreateAggregateCompliancePackRequest): CreateAggregateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregateCompliancePackWithOptions(request, runtime);
}

model CreateAggregateConfigDeliveryChannelRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='false'),
  configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
  deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
  description?: string(name='Description', example='My OSS delivery.'),
  nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
  oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
}

model CreateAggregateConfigDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDERTHG'),
}

model CreateAggregateConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAggregateConfigDeliveryChannelResponseBody(name='body'),
}

async function createAggregateConfigDeliveryChannelWithOptions(request: CreateAggregateConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): CreateAggregateConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationItemChangeNotification)) {
    query['ConfigurationItemChangeNotification'] = request.configurationItemChangeNotification;
  }
  if (!Util.isUnset(request.configurationSnapshot)) {
    query['ConfigurationSnapshot'] = request.configurationSnapshot;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    query['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    query['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    query['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.deliveryChannelType)) {
    query['DeliveryChannelType'] = request.deliveryChannelType;
  }
  if (!Util.isUnset(request.deliverySnapshotTime)) {
    query['DeliverySnapshotTime'] = request.deliverySnapshotTime;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nonCompliantNotification)) {
    query['NonCompliantNotification'] = request.nonCompliantNotification;
  }
  if (!Util.isUnset(request.oversizedDataOSSTargetArn)) {
    query['OversizedDataOSSTargetArn'] = request.oversizedDataOSSTargetArn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregateConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregateConfigDeliveryChannel(request: CreateAggregateConfigDeliveryChannelRequest): CreateAggregateConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregateConfigDeliveryChannelWithOptions(request, runtime);
}

model CreateAggregateConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeAccountIdsScope?: string(name='ExcludeAccountIdsScope', example='120886317861****'),
  excludeFolderIdsScope?: string(name='ExcludeFolderIdsScope', example='fd-pWmkqZ****'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  folderIdsScope?: string(name='FolderIdsScope', example='fd-ZtHsRH****'),
  inputParameters?: map[string]any(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  sourceIdentifier?: string(name='SourceIdentifier', example='required-tags'),
  sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model CreateAggregateConfigRuleShrinkRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeAccountIdsScope?: string(name='ExcludeAccountIdsScope', example='120886317861****'),
  excludeFolderIdsScope?: string(name='ExcludeFolderIdsScope', example='fd-pWmkqZ****'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  folderIdsScope?: string(name='FolderIdsScope', example='fd-ZtHsRH****'),
  inputParametersShrink?: string(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  sourceIdentifier?: string(name='SourceIdentifier', example='required-tags'),
  sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model CreateAggregateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId', example='cr-4e3d626622af0080****'),
  requestId?: string(name='RequestId', example='5895065A-196C-4254-8AD8-14EFC31EEF50'),
}

model CreateAggregateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAggregateConfigRuleResponseBody(name='body'),
}

async function createAggregateConfigRuleWithOptions(tmpReq: CreateAggregateConfigRuleRequest, runtime: Util.RuntimeOptions): CreateAggregateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAggregateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeAccountIdsScope)) {
    body['ExcludeAccountIdsScope'] = request.excludeAccountIdsScope;
  }
  if (!Util.isUnset(request.excludeFolderIdsScope)) {
    body['ExcludeFolderIdsScope'] = request.excludeFolderIdsScope;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.folderIdsScope)) {
    body['FolderIdsScope'] = request.folderIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIdentifier)) {
    body['SourceIdentifier'] = request.sourceIdentifier;
  }
  if (!Util.isUnset(request.sourceOwner)) {
    body['SourceOwner'] = request.sourceOwner;
  }
  if (!Util.isUnset(request.tagKeyLogicScope)) {
    body['TagKeyLogicScope'] = request.tagKeyLogicScope;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregateConfigRule(request: CreateAggregateConfigRuleRequest): CreateAggregateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregateConfigRuleWithOptions(request, runtime);
}

model CreateAggregateRemediationRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-6b4a626622af0012****'),
  clientToken?: string(name='ClientToken', example='AAAAAdDWBF2****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-6b7c626622af00b4****'),
  invokeType?: string(name='InvokeType', example='MANUAL_EXECUTION'),
  params?: string(name='Params', example='{"bucketName": "{resourceId}", "regionId": "{regionId}", "permissionName": "private"}'),
  remediationTemplateId?: string(name='RemediationTemplateId', example='ACS-OSS-PutBucketAcl'),
  remediationType?: string(name='RemediationType', example='OOS'),
  sourceType?: string(name='SourceType', example='ALIYUN'),
}

model CreateAggregateRemediationResponseBody = {
  remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model CreateAggregateRemediationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAggregateRemediationResponseBody(name='body'),
}

async function createAggregateRemediationWithOptions(request: CreateAggregateRemediationRequest, runtime: Util.RuntimeOptions): CreateAggregateRemediationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.invokeType)) {
    body['InvokeType'] = request.invokeType;
  }
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.remediationTemplateId)) {
    body['RemediationTemplateId'] = request.remediationTemplateId;
  }
  if (!Util.isUnset(request.remediationType)) {
    body['RemediationType'] = request.remediationType;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregateRemediation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregateRemediation(request: CreateAggregateRemediationRequest): CreateAggregateRemediationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregateRemediationWithOptions(request, runtime);
}

model CreateAggregatorRequest {
  aggregatorAccounts?: [ 
    {
      accountId?: long(name='AccountId', example='171322098523****'),
      accountName?: string(name='AccountName', example='Alice'),
      accountType?: string(name='AccountType', example='ResourceDirectory'),
    }
  ](name='AggregatorAccounts'),
  aggregatorName?: string(name='AggregatorName', example='Test_Group'),
  aggregatorType?: string(name='AggregatorType', example='CUSTOM'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  description?: string(name='Description'),
}

model CreateAggregatorShrinkRequest {
  aggregatorAccountsShrink?: string(name='AggregatorAccounts'),
  aggregatorName?: string(name='AggregatorName', example='Test_Group'),
  aggregatorType?: string(name='AggregatorType', example='CUSTOM'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  description?: string(name='Description'),
}

model CreateAggregatorResponseBody = {
  aggregatorId?: string(name='AggregatorId', example='ca-dacf86d8314e00eb****'),
  requestId?: string(name='RequestId', example='8195B664-9565-4685-89AC-8B5F04B44B92'),
}

model CreateAggregatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAggregatorResponseBody(name='body'),
}

async function createAggregatorWithOptions(tmpReq: CreateAggregatorRequest, runtime: Util.RuntimeOptions): CreateAggregatorResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAggregatorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aggregatorAccounts)) {
    request.aggregatorAccountsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregatorAccounts, 'AggregatorAccounts', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorAccountsShrink)) {
    body['AggregatorAccounts'] = request.aggregatorAccountsShrink;
  }
  if (!Util.isUnset(request.aggregatorName)) {
    body['AggregatorName'] = request.aggregatorName;
  }
  if (!Util.isUnset(request.aggregatorType)) {
    body['AggregatorType'] = request.aggregatorType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAggregator',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAggregator(request: CreateAggregatorRequest): CreateAggregatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAggregatorWithOptions(request, runtime);
}

model CreateCompliancePackRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId', example='cr-e918626622af000f****'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName', example='bandwidth'),
          parameterValue?: string(name='ParameterValue', example='10'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='eip-bandwidth-limit'),
      riskLevel?: int32(name='RiskLevel', example='1'),
    }
  ](name='ConfigRules'),
  defaultEnable?: boolean(name='DefaultEnable'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateCompliancePackShrinkRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackName?: string(name='CompliancePackName'),
  compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
  configRulesShrink?: string(name='ConfigRules'),
  defaultEnable?: boolean(name='DefaultEnable'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model CreateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model CreateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCompliancePackResponseBody(name='body'),
}

async function createCompliancePackWithOptions(tmpReq: CreateCompliancePackRequest, runtime: Util.RuntimeOptions): CreateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.compliancePackTemplateId)) {
    body['CompliancePackTemplateId'] = request.compliancePackTemplateId;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.defaultEnable)) {
    body['DefaultEnable'] = request.defaultEnable;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCompliancePack(request: CreateCompliancePackRequest): CreateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCompliancePackWithOptions(request, runtime);
}

model CreateConfigDeliveryChannelRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='false'),
  configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
  deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
  description?: string(name='Description', example='My OSS delivery.'),
  nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
  oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
}

model CreateConfigDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDERTHG'),
}

model CreateConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConfigDeliveryChannelResponseBody(name='body'),
}

async function createConfigDeliveryChannelWithOptions(request: CreateConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): CreateConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationItemChangeNotification)) {
    query['ConfigurationItemChangeNotification'] = request.configurationItemChangeNotification;
  }
  if (!Util.isUnset(request.configurationSnapshot)) {
    query['ConfigurationSnapshot'] = request.configurationSnapshot;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    query['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    query['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    query['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.deliveryChannelType)) {
    query['DeliveryChannelType'] = request.deliveryChannelType;
  }
  if (!Util.isUnset(request.deliverySnapshotTime)) {
    query['DeliverySnapshotTime'] = request.deliverySnapshotTime;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nonCompliantNotification)) {
    query['NonCompliantNotification'] = request.nonCompliantNotification;
  }
  if (!Util.isUnset(request.oversizedDataOSSTargetArn)) {
    query['OversizedDataOSSTargetArn'] = request.oversizedDataOSSTargetArn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConfigDeliveryChannel(request: CreateConfigDeliveryChannelRequest): CreateConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigDeliveryChannelWithOptions(request, runtime);
}

model CreateConfigRuleRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  inputParameters?: map[string]any(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  sourceIdentifier?: string(name='SourceIdentifier', example='required-tags'),
  sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model CreateConfigRuleShrinkRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  inputParametersShrink?: string(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  sourceIdentifier?: string(name='SourceIdentifier', example='required-tags'),
  sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model CreateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId', example='cr-5772ba41209e007b****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model CreateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConfigRuleResponseBody(name='body'),
}

async function createConfigRuleWithOptions(tmpReq: CreateConfigRuleRequest, runtime: Util.RuntimeOptions): CreateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIdentifier)) {
    body['SourceIdentifier'] = request.sourceIdentifier;
  }
  if (!Util.isUnset(request.sourceOwner)) {
    body['SourceOwner'] = request.sourceOwner;
  }
  if (!Util.isUnset(request.tagKeyLogicScope)) {
    body['TagKeyLogicScope'] = request.tagKeyLogicScope;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConfigRule(request: CreateConfigRuleRequest): CreateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigRuleWithOptions(request, runtime);
}

model CreateDeliveryChannelRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='false'),
  configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
  deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::100931896542****:role/aliyunserviceroleforconfig'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
  description?: string(name='Description', example='My OSS delivery.'),
  nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
  oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
}

model CreateDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDERTHG'),
}

model CreateDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeliveryChannelResponseBody(name='body'),
}

async function createDeliveryChannelWithOptions(request: CreateDeliveryChannelRequest, runtime: Util.RuntimeOptions): CreateDeliveryChannelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationItemChangeNotification)) {
    body['ConfigurationItemChangeNotification'] = request.configurationItemChangeNotification;
  }
  if (!Util.isUnset(request.configurationSnapshot)) {
    body['ConfigurationSnapshot'] = request.configurationSnapshot;
  }
  if (!Util.isUnset(request.deliveryChannelAssumeRoleArn)) {
    body['DeliveryChannelAssumeRoleArn'] = request.deliveryChannelAssumeRoleArn;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    body['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    body['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    body['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.deliveryChannelType)) {
    body['DeliveryChannelType'] = request.deliveryChannelType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.nonCompliantNotification)) {
    body['NonCompliantNotification'] = request.nonCompliantNotification;
  }
  if (!Util.isUnset(request.oversizedDataOSSTargetArn)) {
    body['OversizedDataOSSTargetArn'] = request.oversizedDataOSSTargetArn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeliveryChannel(request: CreateDeliveryChannelRequest): CreateDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeliveryChannelWithOptions(request, runtime);
}

model CreateRemediationRequest {
  clientToken?: string(name='ClientToken', example='AAAAAdDWBF2****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-8a973ac2e2be00a2****'),
  invokeType?: string(name='InvokeType', example='MANUAL_EXECUTION'),
  params?: string(name='Params', example='{"bucketName": "{resourceId}", "regionId": "{regionId}", "permissionName": "private"}'),
  remediationTemplateId?: string(name='RemediationTemplateId', example='ACS-OSS-PutBucketAcl'),
  remediationType?: string(name='RemediationType', example='OOS'),
  sourceType?: string(name='SourceType', example='ALIYUN'),
}

model CreateRemediationResponseBody = {
  remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model CreateRemediationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRemediationResponseBody(name='body'),
}

async function createRemediationWithOptions(request: CreateRemediationRequest, runtime: Util.RuntimeOptions): CreateRemediationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.invokeType)) {
    body['InvokeType'] = request.invokeType;
  }
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.remediationTemplateId)) {
    body['RemediationTemplateId'] = request.remediationTemplateId;
  }
  if (!Util.isUnset(request.remediationType)) {
    body['RemediationType'] = request.remediationType;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRemediation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRemediation(request: CreateRemediationRequest): CreateRemediationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRemediationWithOptions(request, runtime);
}

model DeactiveAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-04b3fd170e340007****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-5772ba41209e007b****'),
}

model DeactiveAggregateConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-5772ba41209e007b****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleNotExists'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model DeactiveAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeactiveAggregateConfigRulesResponseBody(name='body'),
}

async function deactiveAggregateConfigRulesWithOptions(request: DeactiveAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): DeactiveAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveAggregateConfigRules(request: DeactiveAggregateConfigRulesRequest): DeactiveAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveAggregateConfigRulesWithOptions(request, runtime);
}

model DeactiveConfigRulesRequest {
  configRuleIds?: string(name='ConfigRuleIds', example='cr-19a56457e0d90058****'),
}

model DeactiveConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-19a56457e0d90058****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleCanNotDelete'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='54FA74D9-45D4-4CA5-9BE1-97F6EA19AF5B'),
}

model DeactiveConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeactiveConfigRulesResponseBody(name='body'),
}

async function deactiveConfigRulesWithOptions(request: DeactiveConfigRulesRequest, runtime: Util.RuntimeOptions): DeactiveConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveConfigRules(request: DeactiveConfigRulesRequest): DeactiveConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveConfigRulesWithOptions(request, runtime);
}

model DeleteAggregateCompliancePacksRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-04b3fd170e340007****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackIds?: string(name='CompliancePackIds', example='cp-541e626622af0087****'),
  deleteRule?: boolean(name='DeleteRule', example='false'),
}

model DeleteAggregateCompliancePacksResponseBody = {
  operateCompliancePacksResult?: {
    operateCompliancePacks?: [ 
      {
        compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
        errorCode?: string(name='ErrorCode', example='CompliancePackAlreadyPending'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateCompliancePacks'),
  }(name='OperateCompliancePacksResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model DeleteAggregateCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAggregateCompliancePacksResponseBody(name='body'),
}

async function deleteAggregateCompliancePacksWithOptions(request: DeleteAggregateCompliancePacksRequest, runtime: Util.RuntimeOptions): DeleteAggregateCompliancePacksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackIds)) {
    body['CompliancePackIds'] = request.compliancePackIds;
  }
  if (!Util.isUnset(request.deleteRule)) {
    body['DeleteRule'] = request.deleteRule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregateCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregateCompliancePacks(request: DeleteAggregateCompliancePacksRequest): DeleteAggregateCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregateCompliancePacksWithOptions(request, runtime);
}

model DeleteAggregateConfigDeliveryChannelRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-23c6626622af0041****'),
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-38c3013b46c9002c****'),
}

model DeleteAggregateConfigDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-38c3013b46c9002c****'),
  requestId?: string(name='RequestId', example='FCC2F05C-F672-5665-8102-0020DF66B9B9'),
}

model DeleteAggregateConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAggregateConfigDeliveryChannelResponseBody(name='body'),
}

async function deleteAggregateConfigDeliveryChannelWithOptions(request: DeleteAggregateConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): DeleteAggregateConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.deliveryChannelId)) {
    query['DeliveryChannelId'] = request.deliveryChannelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregateConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregateConfigDeliveryChannel(request: DeleteAggregateConfigDeliveryChannelRequest): DeleteAggregateConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregateConfigDeliveryChannelWithOptions(request, runtime);
}

model DeleteAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-4e3d626622af0080****'),
}

model DeleteAggregateConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-4e3d626622af0080****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleCanNotDelete'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model DeleteAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAggregateConfigRulesResponseBody(name='body'),
}

async function deleteAggregateConfigRulesWithOptions(request: DeleteAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): DeleteAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregateConfigRules(request: DeleteAggregateConfigRulesRequest): DeleteAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregateConfigRulesWithOptions(request, runtime);
}

model DeleteAggregateRemediationsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-6b4a626622af0012****'),
  remediationIds?: string(name='RemediationIds', example='crr-909ba2d4716700eb****'),
}

model DeleteAggregateRemediationsResponseBody = {
  remediationDeleteResults?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='RemediationConfigNotExist'),
      remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='RemediationDeleteResults'),
  requestId?: string(name='RequestId', example='4BE28FB1-616A-5586-82E4-F34FB2AF7441'),
}

model DeleteAggregateRemediationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAggregateRemediationsResponseBody(name='body'),
}

async function deleteAggregateRemediationsWithOptions(request: DeleteAggregateRemediationsRequest, runtime: Util.RuntimeOptions): DeleteAggregateRemediationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.remediationIds)) {
    body['RemediationIds'] = request.remediationIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregateRemediations',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregateRemediations(request: DeleteAggregateRemediationsRequest): DeleteAggregateRemediationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregateRemediationsWithOptions(request, runtime);
}

model DeleteAggregatorsRequest {
  aggregatorIds?: string(name='AggregatorIds', example='ca-9190626622af00a9****'),
  clientToken?: string(name='ClientToken', example='AAAAAdDWBF2****'),
}

model DeleteAggregatorsResponseBody = {
  operateAggregatorsResult?: {
    operateAggregators?: [ 
      {
        aggregatorId?: string(name='AggregatorId', example='ca-dacf86d8314e00eb****'),
        errorCode?: string(name='ErrorCode', example='AccountNotExisted'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateAggregators'),
  }(name='OperateAggregatorsResult'),
  requestId?: string(name='RequestId', example='8195B664-9565-4685-89AC-8B5F04B44B92'),
}

model DeleteAggregatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAggregatorsResponseBody(name='body'),
}

async function deleteAggregatorsWithOptions(request: DeleteAggregatorsRequest, runtime: Util.RuntimeOptions): DeleteAggregatorsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorIds)) {
    body['AggregatorIds'] = request.aggregatorIds;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAggregators',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAggregators(request: DeleteAggregatorsRequest): DeleteAggregatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAggregatorsWithOptions(request, runtime);
}

model DeleteCompliancePacksRequest {
  clientToken?: string(name='ClientToken', example='AAAAAdDWBF2****'),
  compliancePackIds?: string(name='CompliancePackIds', example='cp-541e626622af0087****'),
  deleteRule?: boolean(name='DeleteRule', example='false'),
}

model DeleteCompliancePacksResponseBody = {
  operateCompliancePacksResult?: {
    operateCompliancePacks?: [ 
      {
        compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
        errorCode?: string(name='ErrorCode', example='CompliancePackAlreadyPending'),
        success?: boolean(name='Success', example='true'),
      }
    ](name='OperateCompliancePacks'),
  }(name='OperateCompliancePacksResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model DeleteCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCompliancePacksResponseBody(name='body'),
}

async function deleteCompliancePacksWithOptions(request: DeleteCompliancePacksRequest, runtime: Util.RuntimeOptions): DeleteCompliancePacksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackIds)) {
    body['CompliancePackIds'] = request.compliancePackIds;
  }
  if (!Util.isUnset(request.deleteRule)) {
    body['DeleteRule'] = request.deleteRule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCompliancePacks(request: DeleteCompliancePacksRequest): DeleteCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCompliancePacksWithOptions(request, runtime);
}

model DeleteConfigDeliveryChannelRequest {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-38c32e87cadb002c****'),
}

model DeleteConfigDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-38c32e87cadb002c****'),
  requestId?: string(name='RequestId', example='35F1DA37-ECB5-54E9-AC22-0D9111A665AA'),
}

model DeleteConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConfigDeliveryChannelResponseBody(name='body'),
}

async function deleteConfigDeliveryChannelWithOptions(request: DeleteConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): DeleteConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliveryChannelId)) {
    query['DeliveryChannelId'] = request.deliveryChannelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConfigDeliveryChannel(request: DeleteConfigDeliveryChannelRequest): DeleteConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConfigDeliveryChannelWithOptions(request, runtime);
}

model DeleteRemediationsRequest {
  remediationIds?: string(name='RemediationIds', example='crr-909ba2d4716700eb****'),
}

model DeleteRemediationsResponseBody = {
  remediationDeleteResults?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='RemediationConfigNotExist'),
      remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='RemediationDeleteResults'),
  requestId?: string(name='RequestId', example='4BE28FB1-616A-5586-82E4-F34FB2AF7441'),
}

model DeleteRemediationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRemediationsResponseBody(name='body'),
}

async function deleteRemediationsWithOptions(request: DeleteRemediationsRequest, runtime: Util.RuntimeOptions): DeleteRemediationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remediationIds)) {
    body['RemediationIds'] = request.remediationIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRemediations',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRemediations(request: DeleteRemediationsRequest): DeleteRemediationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRemediationsWithOptions(request, runtime);
}

model DetachAggregateConfigRuleToCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-75b4626622af00c3****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-5bb1626622af00bd****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-a124626622af00e7****'),
}

model DetachAggregateConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-a124626622af00e7****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleNotExists'),
        success?: boolean(name='Success', example='true'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB12A'),
}

model DetachAggregateConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachAggregateConfigRuleToCompliancePackResponseBody(name='body'),
}

async function detachAggregateConfigRuleToCompliancePackWithOptions(request: DetachAggregateConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): DetachAggregateConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachAggregateConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachAggregateConfigRuleToCompliancePack(request: DetachAggregateConfigRuleToCompliancePackRequest): DetachAggregateConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachAggregateConfigRuleToCompliancePackWithOptions(request, runtime);
}

model DetachConfigRuleToCompliancePackRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-5bb1626622af00bd****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-6cc4626622af00e7****'),
}

model DetachConfigRuleToCompliancePackResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-6cc4626622af00e7****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleNotExists'),
        success?: boolean(name='Success', example='true'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='1AC7AED1-172F-42AE-9C12-295BC2ADB12A'),
}

model DetachConfigRuleToCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachConfigRuleToCompliancePackResponseBody(name='body'),
}

async function detachConfigRuleToCompliancePackWithOptions(request: DetachConfigRuleToCompliancePackRequest, runtime: Util.RuntimeOptions): DetachConfigRuleToCompliancePackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachConfigRuleToCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachConfigRuleToCompliancePack(request: DetachConfigRuleToCompliancePackRequest): DetachConfigRuleToCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachConfigRuleToCompliancePackWithOptions(request, runtime);
}

model EvaluatePreConfigRulesRequest {
  enableManagedRules?: boolean(name='EnableManagedRules', example='false'),
  resourceEvaluateItems?: [ 
    {
      resourceLogicalId?: string(name='ResourceLogicalId', example='ResourceLogicId-test'),
      resourceProperties?: string(name='ResourceProperties'),
      resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
      rules?: [ 
        {
          identifier?: string(name='Identifier', example='ecs-instance-deletion-protection-enabled'),
          inputParameters?: string(name='InputParameters', example='{}'),
        }
      ](name='Rules'),
    }
  ](name='ResourceEvaluateItems'),
}

model EvaluatePreConfigRulesShrinkRequest {
  enableManagedRules?: boolean(name='EnableManagedRules', example='false'),
  resourceEvaluateItemsShrink?: string(name='ResourceEvaluateItems'),
}

model EvaluatePreConfigRulesResponseBody = {
  requestId?: string(name='RequestId', example='129ECF1C-7897-1131-BD0F-4B588AC05400'),
  resourceEvaluations?: [ 
    {
      resourceLogicalId?: string(name='ResourceLogicalId', example='ResourceLogicId-test'),
      resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
      rules?: [ 
        {
          annotation?: string(name='Annotation', example='{\\"configuration\\":\\"false\\",\\"desiredValue\\":\\"True\\",\\"operator\\":\\"StringEquals\\",\\"property\\":\\"$.DeletionProtection\\"}'),
          complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
          helpUrl?: string(name='HelpUrl', example='https://example.aliyundoc.com'),
          identifier?: string(name='Identifier', example='ecs-instance-deletion-protection-enabled'),
        }
      ](name='Rules'),
    }
  ](name='ResourceEvaluations'),
}

model EvaluatePreConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EvaluatePreConfigRulesResponseBody(name='body'),
}

async function evaluatePreConfigRulesWithOptions(tmpReq: EvaluatePreConfigRulesRequest, runtime: Util.RuntimeOptions): EvaluatePreConfigRulesResponse {
  Util.validateModel(tmpReq);
  var request = new EvaluatePreConfigRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceEvaluateItems)) {
    request.resourceEvaluateItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceEvaluateItems, 'ResourceEvaluateItems', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableManagedRules)) {
    body['EnableManagedRules'] = request.enableManagedRules;
  }
  if (!Util.isUnset(request.resourceEvaluateItemsShrink)) {
    body['ResourceEvaluateItems'] = request.resourceEvaluateItemsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EvaluatePreConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function evaluatePreConfigRules(request: EvaluatePreConfigRulesRequest): EvaluatePreConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return evaluatePreConfigRulesWithOptions(request, runtime);
}

model GenerateAggregateCompliancePackReportRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
}

model GenerateAggregateCompliancePackReportResponseBody = {
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GenerateAggregateCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateAggregateCompliancePackReportResponseBody(name='body'),
}

async function generateAggregateCompliancePackReportWithOptions(request: GenerateAggregateCompliancePackReportRequest, runtime: Util.RuntimeOptions): GenerateAggregateCompliancePackReportResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateAggregateCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateAggregateCompliancePackReport(request: GenerateAggregateCompliancePackReportRequest): GenerateAggregateCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateAggregateCompliancePackReportWithOptions(request, runtime);
}

model GenerateAggregateConfigRulesReportRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-25d86457e0d900b5****'),
}

model GenerateAggregateConfigRulesReportResponseBody = {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  reportId?: string(name='ReportId', example='crp-88176457e0d900c9****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GenerateAggregateConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateAggregateConfigRulesReportResponseBody(name='body'),
}

async function generateAggregateConfigRulesReportWithOptions(request: GenerateAggregateConfigRulesReportRequest, runtime: Util.RuntimeOptions): GenerateAggregateConfigRulesReportResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    body['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateAggregateConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateAggregateConfigRulesReport(request: GenerateAggregateConfigRulesReportRequest): GenerateAggregateConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateAggregateConfigRulesReportWithOptions(request, runtime);
}

model GenerateCompliancePackReportRequest {
  clientToken?: string(name='ClientToken', example='AAAAAdDWBF2****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
}

model GenerateCompliancePackReportResponseBody = {
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GenerateCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateCompliancePackReportResponseBody(name='body'),
}

async function generateCompliancePackReportWithOptions(request: GenerateCompliancePackReportRequest, runtime: Util.RuntimeOptions): GenerateCompliancePackReportResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateCompliancePackReport(request: GenerateCompliancePackReportRequest): GenerateCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateCompliancePackReportWithOptions(request, runtime);
}

model GenerateConfigRulesReportRequest {
  clientToken?: string(name='ClientToken', example='AAAAAdDWBF2****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-25d86457e0d900b5****'),
}

model GenerateConfigRulesReportResponseBody = {
  reportId?: string(name='ReportId', example='crp-88176457e0d900c9****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GenerateConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateConfigRulesReportResponseBody(name='body'),
}

async function generateConfigRulesReportWithOptions(request: GenerateConfigRulesReportRequest, runtime: Util.RuntimeOptions): GenerateConfigRulesReportResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    body['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateConfigRulesReport(request: GenerateConfigRulesReportRequest): GenerateConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateConfigRulesReportWithOptions(request, runtime);
}

model GetAggregateAccountComplianceByPackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-04b3fd170e340007****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
}

model GetAggregateAccountComplianceByPackResponseBody = {
  accountComplianceResult?: {
    accountCompliances?: [ 
      {
        accountId?: long(name='AccountId', example='100931896542****'),
        accountName?: string(name='AccountName', example='Alice'),
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
      }
    ](name='AccountCompliances'),
    compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
    nonCompliantCount?: int32(name='NonCompliantCount', example='0'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='AccountComplianceResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GetAggregateAccountComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateAccountComplianceByPackResponseBody(name='body'),
}

async function getAggregateAccountComplianceByPackWithOptions(request: GetAggregateAccountComplianceByPackRequest, runtime: Util.RuntimeOptions): GetAggregateAccountComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateAccountComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateAccountComplianceByPack(request: GetAggregateAccountComplianceByPackRequest): GetAggregateAccountComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateAccountComplianceByPackWithOptions(request, runtime);
}

model GetAggregateCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
}

model GetAggregateCompliancePackResponseBody = {
  compliancePack?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
    compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
    compliancePackName?: string(name='CompliancePackName'),
    compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
    configRules?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-a260626622af0005****'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleParameters?: [ 
          {
            parameterName?: string(name='ParameterName', example='bandwidth'),
            parameterValue?: string(name='ParameterValue', example='10'),
            required?: boolean(name='Required', example='true'),
          }
        ](name='ConfigRuleParameters'),
        description?: string(name='Description'),
        managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='eip-bandwidth-limit'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='ConfigRules'),
    createTimestamp?: long(name='CreateTimestamp', example='1624243657000'),
    description?: string(name='Description'),
    riskLevel?: int32(name='RiskLevel', example='1'),
    scope?: {
      excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
      regionIdsScope?: string(name='RegionIdsScope'),
      resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
      tagKeyScope?: string(name='TagKeyScope'),
      tagValueScope?: string(name='TagValueScope'),
    }(name='Scope'),
    status?: string(name='Status', example='ACTIVE'),
  }(name='CompliancePack'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GetAggregateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateCompliancePackResponseBody(name='body'),
}

async function getAggregateCompliancePackWithOptions(request: GetAggregateCompliancePackRequest, runtime: Util.RuntimeOptions): GetAggregateCompliancePackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateCompliancePack(request: GetAggregateCompliancePackRequest): GetAggregateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateCompliancePackWithOptions(request, runtime);
}

model GetAggregateCompliancePackReportRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
}

model GetAggregateCompliancePackReportResponseBody = {
  compliancePackReport?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp', example='1624330246640'),
    reportStatus?: string(name='ReportStatus', example='COMPLETE'),
    reportUrl?: string(name='ReportUrl', example='https://cloud-config-compliance-report.oss-cn-shanghai.aliyuncs.com/CompliancePackReports/100931896542****/cp-fdc8626622af00f9****/100931896542****-cp-fdc8626622af00f9****-report-202106221050.zip?Expires=162433****&OSSAccessKeyId=LTAIs86R8H59****&Signature=RqvJZtaxQ2HfqRcl0Ic2HG8oo****'),
  }(name='CompliancePackReport'),
  requestId?: string(name='RequestId', example='0D234DAC-1ABD-42E8-9475-BE317857E29B'),
}

model GetAggregateCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateCompliancePackReportResponseBody(name='body'),
}

async function getAggregateCompliancePackReportWithOptions(request: GetAggregateCompliancePackReportRequest, runtime: Util.RuntimeOptions): GetAggregateCompliancePackReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateCompliancePackReport(request: GetAggregateCompliancePackReportRequest): GetAggregateCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateCompliancePackReportWithOptions(request, runtime);
}

model GetAggregateConfigDeliveryChannelRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
}

model GetAggregateConfigDeliveryChannelResponseBody = {
  deliveryChannel?: {
    accountId?: string(name='AccountId', example='120886317861****'),
    aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
    configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='true'),
    configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
    deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::120886317861****:role/aliyunserviceroleforconfig'),
    deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
    deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
    deliveryChannelName?: string(name='DeliveryChannelName', example='myDeliveryChannel'),
    deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:120886317861****:new-bucket'),
    deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
    deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
    description?: string(name='Description', example='My OSS delivery.'),
    nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
    oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
    status?: int32(name='Status', example='1'),
  }(name='DeliveryChannel'),
  requestId?: string(name='RequestId', example='DC300244-FCE3-5061-8214-C27ECB668487'),
}

model GetAggregateConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateConfigDeliveryChannelResponseBody(name='body'),
}

async function getAggregateConfigDeliveryChannelWithOptions(request: GetAggregateConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): GetAggregateConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.deliveryChannelId)) {
    query['DeliveryChannelId'] = request.deliveryChannelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigDeliveryChannel(request: GetAggregateConfigDeliveryChannelRequest): GetAggregateConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigDeliveryChannelWithOptions(request, runtime);
}

model GetAggregateConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-7f00626622af0041****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-7f7d626622af0041****'),
}

model GetAggregateConfigRuleResponseBody = {
  configRule?: {
    accountId?: long(name='AccountId', example='120886317861****'),
    compliance?: {
      complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
      count?: int32(name='Count', example='3'),
    }(name='Compliance'),
    configRuleArn?: string(name='ConfigRuleArn', example='acs:config::100931896542****:rule/cr-7f7d626622af0041****'),
    configRuleEvaluationStatus?: {
      firstActivatedTimestamp?: long(name='FirstActivatedTimestamp', example='1624932221993'),
      firstEvaluationStarted?: boolean(name='FirstEvaluationStarted', example='true'),
      lastErrorCode?: string(name='LastErrorCode', example='TimeOut'),
      lastErrorMessage?: string(name='LastErrorMessage', example='time out'),
      lastFailedEvaluationTimestamp?: long(name='LastFailedEvaluationTimestamp', example='1614687022000'),
      lastFailedInvocationTimestamp?: long(name='LastFailedInvocationTimestamp', example='1614687022000'),
      lastSuccessfulEvaluationTimestamp?: long(name='LastSuccessfulEvaluationTimestamp', example='1624932227486'),
      lastSuccessfulInvocationTimestamp?: long(name='LastSuccessfulInvocationTimestamp', example='1624932227476'),
    }(name='ConfigRuleEvaluationStatus'),
    configRuleId?: string(name='ConfigRuleId', example='cr-7f7d626622af0041****'),
    configRuleName?: string(name='ConfigRuleName'),
    configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
    configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
    createBy?: {
      aggregatorId?: string(name='AggregatorId', example='ca-04b3fd170e340007****'),
      aggregatorName?: string(name='AggregatorName', example='Test_Group'),
      compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af008****'),
      compliancePackName?: string(name='CompliancePackName'),
      creatorId?: string(name='CreatorId', example='100931896542****'),
      creatorName?: string(name='CreatorName', example='Alice'),
      creatorType?: string(name='CreatorType', example='AGGREGATOR'),
    }(name='CreateBy'),
    createTimestamp?: long(name='CreateTimestamp', example='1604684022000'),
    description?: string(name='Description'),
    excludeAccountIdsScope?: string(name='ExcludeAccountIdsScope', example='120886317861****'),
    excludeFolderIdsScope?: string(name='ExcludeFolderIdsScope', example='fd-pWmkqZ****'),
    excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='23642660635687****'),
    folderIdsScope?: string(name='FolderIdsScope', example='fd-ZtHsRH****'),
    inputParameters?: map[string]any(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
    managedRule?: {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails', example='{}'),
      description?: string(name='Description'),
      identifier?: string(name='Identifier', example='ram-user-mfa-check'),
      labels?: [ string ](name='Labels'),
      managedRuleName?: string(name='ManagedRuleName'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails', example='{}'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource', example='aliyun.config'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
          messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
        }
      ](name='SourceDetails'),
    }(name='ManagedRule'),
    maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
    modifiedTimestamp?: long(name='ModifiedTimestamp', example='1614687022000'),
    regionIdsScope?: string(name='RegionIdsScope', example='global'),
    resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzdibsjjc****'),
    resourceTypesScope?: string(name='ResourceTypesScope', example='ACS::RAM::User'),
    riskLevel?: int32(name='RiskLevel', example='1'),
    source?: {
      identifier?: string(name='Identifier', example='acs:fc:cn-hangzhou:100931896542****:services/ConfigService.LATEST/functions/specific-config'),
      owner?: string(name='Owner', example='ALIYUN'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource', example='aliyun.config'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
          messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
        }
      ](name='SourceDetails'),
    }(name='Source'),
    tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
    tagKeyScope?: string(name='TagKeyScope', example='RAM'),
    tagValueScope?: string(name='TagValueScope', example='MFA'),
  }(name='ConfigRule'),
  requestId?: string(name='RequestId', example='811234F4-C3AB-4D15-B90B-F55016D1B5AA'),
}

model GetAggregateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateConfigRuleResponseBody(name='body'),
}

async function getAggregateConfigRuleWithOptions(request: GetAggregateConfigRuleRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRule(request: GetAggregateConfigRuleRequest): GetAggregateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRuleWithOptions(request, runtime);
}

model GetAggregateConfigRuleComplianceByPackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-04b3fd170e340007****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
}

model GetAggregateConfigRuleComplianceByPackResponseBody = {
  configRuleComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
    configRuleCompliances?: [ 
      {
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
        configRuleId?: string(name='ConfigRuleId', example='cr-fdc8626622af00f9****'),
        configRuleName?: string(name='ConfigRuleName'),
      }
    ](name='ConfigRuleCompliances'),
    nonCompliantCount?: int32(name='NonCompliantCount', example='0'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='ConfigRuleComplianceResult'),
  requestId?: string(name='RequestId', example='C6B0C0A8-3245-48F1-AEAB-BC1A446E99D0'),
}

model GetAggregateConfigRuleComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateConfigRuleComplianceByPackResponseBody(name='body'),
}

async function getAggregateConfigRuleComplianceByPackWithOptions(request: GetAggregateConfigRuleComplianceByPackRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRuleComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRuleComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRuleComplianceByPack(request: GetAggregateConfigRuleComplianceByPackRequest): GetAggregateConfigRuleComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRuleComplianceByPackWithOptions(request, runtime);
}

model GetAggregateConfigRuleSummaryByRiskLevelRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-3a58626622af0005****'),
}

model GetAggregateConfigRuleSummaryByRiskLevelResponseBody = {
  configRuleSummaries?: [ 
    {
      compliantCount?: int32(name='CompliantCount', example='3'),
      nonCompliantCount?: int32(name='NonCompliantCount', example='1'),
      riskLevel?: int32(name='RiskLevel', example='1'),
    }
  ](name='ConfigRuleSummaries'),
  requestId?: string(name='RequestId', example='A3CDD98C-DE65-46AC-B2D2-04A4A9AB5B73'),
}

model GetAggregateConfigRuleSummaryByRiskLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateConfigRuleSummaryByRiskLevelResponseBody(name='body'),
}

async function getAggregateConfigRuleSummaryByRiskLevelWithOptions(request: GetAggregateConfigRuleSummaryByRiskLevelRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRuleSummaryByRiskLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRuleSummaryByRiskLevel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRuleSummaryByRiskLevel(request: GetAggregateConfigRuleSummaryByRiskLevelRequest): GetAggregateConfigRuleSummaryByRiskLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRuleSummaryByRiskLevelWithOptions(request, runtime);
}

model GetAggregateConfigRulesReportRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  reportId?: string(name='ReportId', example='crp-88176457e0d900c9****'),
}

model GetAggregateConfigRulesReportResponseBody = {
  configRulesReport?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp', example='1624332329593'),
    reportId?: string(name='ReportId', example='crp-88176457e0d900c9****'),
    reportStatus?: string(name='ReportStatus', example='CREATING'),
    reportUrl?: string(name='ReportUrl', example='https://cloud-config-compliance-report.oss-cn-shanghai.aliyuncs.com/ConfigRuleReports/100931896542****/rules/100931896542****-rules-report-202106221125.zip?Expires=162433****&OSSAccessKeyId=LTAIs86R8H59****&Signature=yT8jn6ZQSX3dyCwVKL5EOJhGJ****'),
  }(name='ConfigRulesReport'),
  requestId?: string(name='RequestId', example='F0BCC7B2-D0E4-49B0-95D2-6689CFB08D31'),
}

model GetAggregateConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateConfigRulesReportResponseBody(name='body'),
}

async function getAggregateConfigRulesReportWithOptions(request: GetAggregateConfigRulesReportRequest, runtime: Util.RuntimeOptions): GetAggregateConfigRulesReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateConfigRulesReport(request: GetAggregateConfigRulesReportRequest): GetAggregateConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateConfigRulesReportWithOptions(request, runtime);
}

model GetAggregateDiscoveredResourceRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5885626622af0008****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
}

model GetAggregateDiscoveredResourceResponseBody = {
  discoveredResourceDetail?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
    configuration?: string(name='Configuration', example='{\\"AccessControlList\\":{\\"Grant\\":\\"private\\"},\\"ServerSideEncryptionRule\\":{\\"SSEAlgorithm\\":\\"None\\"},\\"Comment\\":\\"\\",\\"CreationDate\\":\\"2021-06-29T10:05:12.000Z\\",\\"Owner\\":{\\"DisplayName\\":\\"100931896542****\\",\\"ID\\":\\"100931896542****\\"},\\"StorageClass\\":\\"Standard\\",\\"DataRedundancyType\\":\\"LRS\\",\\"AllowEmptyReferer\\":\\"true\\",\\"Name\\":\\"new-bucket\\",\\"BucketPolicy\\":{\\"LogPrefix\\":\\"\\",\\"LogBucket\\":\\"\\"},\\"ExtranetEndpoint\\":\\"oss-cn-hangzhou.aliyuncs.com\\",\\"IntranetEndpoint\\":\\"oss-cn-hangzhou-internal.aliyuncs.com\\",\\"Location\\":\\"oss-cn-hangzhou\\"}'),
    region?: string(name='Region', example='cn-hangzhou'),
    resourceCreationTime?: long(name='ResourceCreationTime', example='1624961112000'),
    resourceDeleted?: int32(name='ResourceDeleted', example='1'),
    resourceId?: string(name='ResourceId', example='new-bucket'),
    resourceName?: string(name='ResourceName', example='new-bucket'),
    resourceStatus?: string(name='ResourceStatus', example='offline'),
    resourceType?: string(name='ResourceType', example='ACS::OSS::BucketACS::CDN::Domain'),
    tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
  }(name='DiscoveredResourceDetail'),
  requestId?: string(name='RequestId', example='E4D71ACE-6B0A-46E0-8352-56952378CC7F'),
}

model GetAggregateDiscoveredResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateDiscoveredResourceResponseBody(name='body'),
}

async function getAggregateDiscoveredResourceWithOptions(request: GetAggregateDiscoveredResourceRequest, runtime: Util.RuntimeOptions): GetAggregateDiscoveredResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateDiscoveredResource',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateDiscoveredResource(request: GetAggregateDiscoveredResourceRequest): GetAggregateDiscoveredResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateDiscoveredResourceWithOptions(request, runtime);
}

model GetAggregateResourceComplianceByConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  complianceType?: string(name='ComplianceType', example='COMPLIANT'),
  configRuleId?: string(name='ConfigRuleId', example='cr-d369626622af008e****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetAggregateResourceComplianceByConfigRuleResponseBody = {
  complianceResult?: {
    compliances?: [ 
      {
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
        count?: int32(name='Count', example='5'),
      }
    ](name='Compliances'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId', example='23306AB1-34E0-468F-BD7B-68D8AEAB754C'),
}

model GetAggregateResourceComplianceByConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceComplianceByConfigRuleResponseBody(name='body'),
}

async function getAggregateResourceComplianceByConfigRuleWithOptions(request: GetAggregateResourceComplianceByConfigRuleRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceByConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceByConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceByConfigRule(request: GetAggregateResourceComplianceByConfigRuleRequest): GetAggregateResourceComplianceByConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceByConfigRuleWithOptions(request, runtime);
}

model GetAggregateResourceComplianceByPackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
}

model GetAggregateResourceComplianceByPackResponseBody = {
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
  resourceComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
    nonCompliantCount?: int32(name='NonCompliantCount', example='7'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='ResourceComplianceResult'),
}

model GetAggregateResourceComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceComplianceByPackResponseBody(name='body'),
}

async function getAggregateResourceComplianceByPackWithOptions(request: GetAggregateResourceComplianceByPackRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceByPack(request: GetAggregateResourceComplianceByPackRequest): GetAggregateResourceComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceByPackWithOptions(request, runtime);
}

model GetAggregateResourceComplianceGroupByRegionRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model GetAggregateResourceComplianceGroupByRegionResponseBody = {
  complianceResult?: {
    complianceResultList?: [ 
      {
        compliances?: [ 
          {
            complianceType?: string(name='ComplianceType'),
            count?: long(name='Count'),
          }
        ](name='Compliances'),
        regionId?: string(name='RegionId'),
      }
    ](name='ComplianceResultList'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetAggregateResourceComplianceGroupByRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceComplianceGroupByRegionResponseBody(name='body'),
}

async function getAggregateResourceComplianceGroupByRegionWithOptions(request: GetAggregateResourceComplianceGroupByRegionRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceGroupByRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceGroupByRegion',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceGroupByRegion(request: GetAggregateResourceComplianceGroupByRegionRequest): GetAggregateResourceComplianceGroupByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceGroupByRegionWithOptions(request, runtime);
}

model GetAggregateResourceComplianceGroupByResourceTypeRequest {
  aggregatorId?: string(name='AggregatorId'),
  configRuleIds?: string(name='ConfigRuleIds'),
}

model GetAggregateResourceComplianceGroupByResourceTypeResponseBody = {
  complianceResult?: {
    complianceResultList?: [ 
      {
        compliances?: [ 
          {
            complianceType?: string(name='ComplianceType'),
            count?: long(name='Count'),
          }
        ](name='Compliances'),
        resourceType?: string(name='ResourceType'),
      }
    ](name='ComplianceResultList'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetAggregateResourceComplianceGroupByResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceComplianceGroupByResourceTypeResponseBody(name='body'),
}

async function getAggregateResourceComplianceGroupByResourceTypeWithOptions(request: GetAggregateResourceComplianceGroupByResourceTypeRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceGroupByResourceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceGroupByResourceType',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceGroupByResourceType(request: GetAggregateResourceComplianceGroupByResourceTypeRequest): GetAggregateResourceComplianceGroupByResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceGroupByResourceTypeWithOptions(request, runtime);
}

model GetAggregateResourceComplianceTimelineRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5885626622af0008****'),
  endTime?: long(name='EndTime', example='1625821156000'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='5OVS5J4I1/UKTkHV5oNs****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
  startTime?: long(name='StartTime', example='1623211156000'),
}

model GetAggregateResourceComplianceTimelineResponseBody = {
  requestId?: string(name='RequestId', example='8D53A78F-1EB8-4264-A554-72F07E34FAE6'),
  resourceComplianceTimeline?: {
    complianceList?: [ 
      {
        accountId?: string(name='AccountId', example='100931896542****'),
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-f'),
        captureTime?: long(name='CaptureTime', example='1625200295276'),
        configuration?: string(name='Configuration'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceCreateTime?: long(name='ResourceCreateTime', example='1624961112000'),
        resourceId?: string(name='ResourceId', example='new-bucket'),
        resourceName?: string(name='ResourceName', example='new-bucket'),
        resourceStatus?: string(name='ResourceStatus', example='Running'),
        resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
        tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
      }
    ](name='ComplianceList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='5OVS5J4I1/UKTkHV5oNs****'),
  }(name='ResourceComplianceTimeline'),
}

model GetAggregateResourceComplianceTimelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceComplianceTimelineResponseBody(name='body'),
}

async function getAggregateResourceComplianceTimelineWithOptions(request: GetAggregateResourceComplianceTimelineRequest, runtime: Util.RuntimeOptions): GetAggregateResourceComplianceTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceComplianceTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceComplianceTimeline(request: GetAggregateResourceComplianceTimelineRequest): GetAggregateResourceComplianceTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceComplianceTimelineWithOptions(request, runtime);
}

model GetAggregateResourceConfigurationTimelineRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5885626622af0008****'),
  endTime?: long(name='EndTime', example='1625821156000'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
  startTime?: long(name='StartTime', example='1623211156000'),
}

model GetAggregateResourceConfigurationTimelineResponseBody = {
  requestId?: string(name='RequestId', example='ED9CD1B3-286C-4E05-A765-5E1E0B9BC2AB'),
  resourceConfigurationTimeline?: {
    configurationList?: [ 
      {
        accountId?: long(name='AccountId', example='100931896542****'),
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
        captureTime?: string(name='CaptureTime', example='1624961156000'),
        configurationDiff?: string(name='ConfigurationDiff', example='{\\"AccessControlList\\":[null,{\\"Grant\\":\\"private\\"}],\\"ServerSideEncryptionRule\\":[null,{\\"SSEAlgorithm\\":\\"None\\"}],\\"CreationDate\\":[null,\\"2021-06-29T10:05:12.000Z\\"],\\"Owner\\":[null,{\\"DisplayName\\":\\"100931896542****\\",\\"ID\\":\\"100931896542****\\"}],\\"BucketPolicy\\":[null,{\\"LogPrefix\\":\\"\\",\\"LogBucket\\":\\"\\"}],\\"StorageClass\\":[null,\\"Standard\\"],\\"ExtranetEndpoint\\":[null,\\"oss-cn-hangzhou.aliyuncs.com\\"],\\"DataRedundancyType\\":[null,\\"LRS\\"],\\"AllowEmptyReferer\\":[null,\\"true\\"],\\"IntranetEndpoint\\":[null,\\"oss-cn-hangzhou-internal.aliyuncs.com\\"],\\"Name\\":[null,\\"new-bucket\\"],\\"Location\\":[null,\\"oss-cn-hangzhou\\"]}'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceCreateTime?: string(name='ResourceCreateTime', example='1624961112000'),
        resourceEventType?: string(name='ResourceEventType', example='DISCOVERED'),
        resourceId?: string(name='ResourceId', example='new-bucket'),
        resourceName?: string(name='ResourceName', example='new-bucket'),
        resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
        tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
      }
    ](name='ConfigurationList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  }(name='ResourceConfigurationTimeline'),
}

model GetAggregateResourceConfigurationTimelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceConfigurationTimelineResponseBody(name='body'),
}

async function getAggregateResourceConfigurationTimelineWithOptions(request: GetAggregateResourceConfigurationTimelineRequest, runtime: Util.RuntimeOptions): GetAggregateResourceConfigurationTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceConfigurationTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceConfigurationTimeline(request: GetAggregateResourceConfigurationTimelineRequest): GetAggregateResourceConfigurationTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceConfigurationTimelineWithOptions(request, runtime);
}

model GetAggregateResourceCountsGroupByRegionRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a260626622af0005****'),
  folderId?: string(name='FolderId', example='r-BU****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
}

model GetAggregateResourceCountsGroupByRegionResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      groupName?: string(name='GroupName'),
      region?: string(name='Region', example='cn-hangzhou'),
      resourceCount?: long(name='ResourceCount', example='10'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId', example='399BD94C-D20C-4D27-88D4-89E8D75C0595'),
}

model GetAggregateResourceCountsGroupByRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceCountsGroupByRegionResponseBody(name='body'),
}

async function getAggregateResourceCountsGroupByRegionWithOptions(request: GetAggregateResourceCountsGroupByRegionRequest, runtime: Util.RuntimeOptions): GetAggregateResourceCountsGroupByRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceCountsGroupByRegion',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceCountsGroupByRegion(request: GetAggregateResourceCountsGroupByRegionRequest): GetAggregateResourceCountsGroupByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceCountsGroupByRegionWithOptions(request, runtime);
}

model GetAggregateResourceCountsGroupByResourceTypeRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a260626622af0005****'),
  folderId?: string(name='FolderId', example='r-BU****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetAggregateResourceCountsGroupByResourceTypeResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      groupName?: string(name='GroupName'),
      resourceCount?: long(name='ResourceCount', example='7'),
      resourceType?: string(name='ResourceType', example='ACS::RAM::Role'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId', example='99114B22-1EFF-47DF-B906-1CCE82FF9D60'),
}

model GetAggregateResourceCountsGroupByResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateResourceCountsGroupByResourceTypeResponseBody(name='body'),
}

async function getAggregateResourceCountsGroupByResourceTypeWithOptions(request: GetAggregateResourceCountsGroupByResourceTypeRequest, runtime: Util.RuntimeOptions): GetAggregateResourceCountsGroupByResourceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateResourceCountsGroupByResourceType',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateResourceCountsGroupByResourceType(request: GetAggregateResourceCountsGroupByResourceTypeRequest): GetAggregateResourceCountsGroupByResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateResourceCountsGroupByResourceTypeWithOptions(request, runtime);
}

model GetAggregatorRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-88ea626622af0055****'),
}

model GetAggregatorResponseBody = {
  aggregator?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    aggregatorAccountCount?: long(name='AggregatorAccountCount', example='2'),
    aggregatorAccounts?: [ 
      {
        accountId?: long(name='AccountId', example='171322098523****'),
        accountName?: string(name='AccountName', example='Alice'),
        accountType?: string(name='AccountType', example='ResourceDirectory'),
        recorderStatus?: string(name='RecorderStatus', example='REGISTERED'),
      }
    ](name='AggregatorAccounts'),
    aggregatorCreateTimestamp?: string(name='AggregatorCreateTimestamp', example='1623034091000'),
    aggregatorId?: string(name='AggregatorId', example='ca-88ea626622af0055****'),
    aggregatorName?: string(name='AggregatorName', example='Test_Group'),
    aggregatorStatus?: int32(name='AggregatorStatus', example='1'),
    aggregatorType?: string(name='AggregatorType', example='CUSTOM'),
    description?: string(name='Description'),
  }(name='Aggregator'),
  requestId?: string(name='RequestId', example='733DD93C-2277-4905-AE0C-0BA95C04B8BC'),
}

model GetAggregatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregatorResponseBody(name='body'),
}

async function getAggregatorWithOptions(request: GetAggregatorRequest, runtime: Util.RuntimeOptions): GetAggregatorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregator',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregator(request: GetAggregatorRequest): GetAggregatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregatorWithOptions(request, runtime);
}

model GetCompliancePackRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
}

model GetCompliancePackResponseBody = {
  compliancePack?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
    compliancePackName?: string(name='CompliancePackName'),
    compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
    configRules?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-a260626622af0005****'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleParameters?: [ 
          {
            parameterName?: string(name='ParameterName', example='bandwidth'),
            parameterValue?: string(name='ParameterValue', example='10'),
            required?: boolean(name='Required', example='true'),
          }
        ](name='ConfigRuleParameters'),
        description?: string(name='Description'),
        managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='eip-bandwidth-limit'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='ConfigRules'),
    createTimestamp?: long(name='CreateTimestamp', example='1624245766000'),
    description?: string(name='Description'),
    riskLevel?: int32(name='RiskLevel', example='1'),
    scope?: {
      excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
      regionIdsScope?: string(name='RegionIdsScope'),
      resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
      tagKeyScope?: string(name='TagKeyScope'),
      tagValueScope?: string(name='TagValueScope'),
    }(name='Scope'),
    status?: string(name='Status', example='ACTIVE'),
  }(name='CompliancePack'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GetCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCompliancePackResponseBody(name='body'),
}

async function getCompliancePackWithOptions(request: GetCompliancePackRequest, runtime: Util.RuntimeOptions): GetCompliancePackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCompliancePack(request: GetCompliancePackRequest): GetCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCompliancePackWithOptions(request, runtime);
}

model GetCompliancePackReportRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
}

model GetCompliancePackReportResponseBody = {
  compliancePackReport?: {
    accountId?: long(name='AccountId', example='120886317861****'),
    compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp', example='1624329965857'),
    reportStatus?: string(name='ReportStatus', example='COMPLETE'),
    reportUrl?: string(name='ReportUrl', example='https://cloud-config-compliance-report.oss-cn-shanghai.aliyuncs.com/CompliancePackReports/120886317861****/cp-fdc8626622af00f9****/120886317861****-cp-fdc8626622af00f9****-report-202106221046.xls?Expires=162442****&OSSAccessKeyId=LTAIs86R8H59****&Signature=sWmz4fq7eJEyDoho%2FoDOReZ3s****'),
  }(name='CompliancePackReport'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GetCompliancePackReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCompliancePackReportResponseBody(name='body'),
}

async function getCompliancePackReportWithOptions(request: GetCompliancePackReportRequest, runtime: Util.RuntimeOptions): GetCompliancePackReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCompliancePackReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCompliancePackReport(request: GetCompliancePackReportRequest): GetCompliancePackReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCompliancePackReportWithOptions(request, runtime);
}

model GetConfigDeliveryChannelRequest {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
}

model GetConfigDeliveryChannelResponseBody = {
  deliveryChannel?: {
    accountId?: long(name='AccountId', example='120886317861****'),
    configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='true'),
    configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
    deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::120886317861****:role/aliyunserviceroleforconfig'),
    deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
    deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
    deliveryChannelName?: string(name='DeliveryChannelName', example='myDeliveryChannel'),
    deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:120886317861****:new-bucket'),
    deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
    deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
    description?: string(name='Description', example='My OSS delivery.'),
    nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
    oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
    status?: int32(name='Status', example='1'),
  }(name='DeliveryChannel'),
  requestId?: string(name='RequestId', example='DC300244-FCE3-5061-8214-C27ECB668487'),
}

model GetConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigDeliveryChannelResponseBody(name='body'),
}

async function getConfigDeliveryChannelWithOptions(request: GetConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): GetConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliveryChannelId)) {
    query['DeliveryChannelId'] = request.deliveryChannelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigDeliveryChannel(request: GetConfigDeliveryChannelRequest): GetConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigDeliveryChannelWithOptions(request, runtime);
}

model GetConfigRuleRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-7f7d626622af0041****'),
}

model GetConfigRuleResponseBody = {
  configRule?: {
    accountId?: long(name='AccountId', example='120886317861****'),
    compliance?: {
      complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
      count?: int32(name='Count', example='3'),
    }(name='Compliance'),
    configRuleArn?: string(name='ConfigRuleArn', example='acs:config::100931896542****:rule/cr-7f7d626622af0041****'),
    configRuleEvaluationStatus?: {
      firstActivatedTimestamp?: long(name='FirstActivatedTimestamp', example='1624932221993'),
      firstEvaluationStarted?: boolean(name='FirstEvaluationStarted', example='true'),
      lastErrorCode?: string(name='LastErrorCode', example='TimeOut'),
      lastErrorMessage?: string(name='LastErrorMessage', example='Time out'),
      lastFailedEvaluationTimestamp?: long(name='LastFailedEvaluationTimestamp', example='1614687022000'),
      lastFailedInvocationTimestamp?: long(name='LastFailedInvocationTimestamp', example='1614687022000'),
      lastSuccessfulEvaluationTimestamp?: long(name='LastSuccessfulEvaluationTimestamp', example='1624932227486'),
      lastSuccessfulInvocationTimestamp?: long(name='LastSuccessfulInvocationTimestamp', example='1624932227476'),
    }(name='ConfigRuleEvaluationStatus'),
    configRuleId?: string(name='ConfigRuleId', example='cr-7f7d626622af0041****'),
    configRuleName?: string(name='ConfigRuleName'),
    configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
    configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
    createBy?: {
      compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af008****'),
      compliancePackName?: string(name='CompliancePackName'),
      creatorId?: string(name='CreatorId', example='100931896542****'),
      creatorName?: string(name='CreatorName', example='Alice'),
    }(name='CreateBy'),
    createTimestamp?: long(name='CreateTimestamp', example='1604684022000'),
    description?: string(name='Description'),
    excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='23642660635687****'),
    inputParameters?: map[string]any(name='InputParameters'),
    managedRule?: {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails'),
      description?: string(name='Description'),
      identifier?: string(name='Identifier', example='ram-user-mfa-check'),
      labels?: [ string ](name='Labels'),
      managedRuleName?: string(name='ManagedRuleName'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource', example='aliyun.config'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
          messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
        }
      ](name='SourceDetails'),
    }(name='ManagedRule'),
    maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
    modifiedTimestamp?: long(name='ModifiedTimestamp', example='1614687022000'),
    regionIdsScope?: string(name='RegionIdsScope', example='global'),
    resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzdibsjjc****'),
    resourceTypesScope?: string(name='ResourceTypesScope', example='ACS::RAM::User'),
    riskLevel?: int32(name='RiskLevel', example='1'),
    source?: {
      identifier?: string(name='Identifier', example='acs:fc:cn-hangzhou:100931896542****:services/ConfigService.LATEST/functions/specific-config'),
      owner?: string(name='Owner', example='ALIYUN'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource', example='aliyun.config'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
          messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
        }
      ](name='SourceDetails'),
    }(name='Source'),
    tagKeyLogicScope?: string(name='TagKeyLogicScope', example='120886317861****'),
    tagKeyScope?: string(name='TagKeyScope', example='RAM'),
    tagValueScope?: string(name='TagValueScope', example='MFA'),
  }(name='ConfigRule'),
  requestId?: string(name='RequestId', example='811234F4-C3AB-4D15-B90B-F55016D1B5AA'),
}

model GetConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigRuleResponseBody(name='body'),
}

async function getConfigRuleWithOptions(request: GetConfigRuleRequest, runtime: Util.RuntimeOptions): GetConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRule(request: GetConfigRuleRequest): GetConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleWithOptions(request, runtime);
}

model GetConfigRuleComplianceByPackRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
}

model GetConfigRuleComplianceByPackResponseBody = {
  configRuleComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
    configRuleCompliances?: [ 
      {
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
        configRuleId?: string(name='ConfigRuleId', example='cr-fdc8626622af00f9****'),
        configRuleName?: string(name='ConfigRuleName'),
      }
    ](name='ConfigRuleCompliances'),
    nonCompliantCount?: int32(name='NonCompliantCount', example='0'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='ConfigRuleComplianceResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GetConfigRuleComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigRuleComplianceByPackResponseBody(name='body'),
}

async function getConfigRuleComplianceByPackWithOptions(request: GetConfigRuleComplianceByPackRequest, runtime: Util.RuntimeOptions): GetConfigRuleComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigRuleComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRuleComplianceByPack(request: GetConfigRuleComplianceByPackRequest): GetConfigRuleComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleComplianceByPackWithOptions(request, runtime);
}

model GetConfigRuleSummaryByRiskLevelResponseBody = {
  configRuleSummaries?: [ 
    {
      compliantCount?: int32(name='CompliantCount', example='3'),
      nonCompliantCount?: int32(name='NonCompliantCount', example='1'),
      riskLevel?: int32(name='RiskLevel', example='1'),
    }
  ](name='ConfigRuleSummaries'),
  requestId?: string(name='RequestId', example='A3CED98C-DE65-46AC-B2D2-04A4A9AB5B36'),
}

model GetConfigRuleSummaryByRiskLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigRuleSummaryByRiskLevelResponseBody(name='body'),
}

async function getConfigRuleSummaryByRiskLevelWithOptions(runtime: Util.RuntimeOptions): GetConfigRuleSummaryByRiskLevelResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetConfigRuleSummaryByRiskLevel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRuleSummaryByRiskLevel(): GetConfigRuleSummaryByRiskLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleSummaryByRiskLevelWithOptions(runtime);
}

model GetConfigRulesReportRequest {
  reportId?: string(name='ReportId', example='crp-88176457e0d900c9****'),
}

model GetConfigRulesReportResponseBody = {
  configRulesReport?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    reportCreateTimestamp?: long(name='ReportCreateTimestamp', example='1614687022000'),
    reportId?: string(name='ReportId', example='crp-88176457e0d900c9****'),
    reportStatus?: string(name='ReportStatus', example='CREATING'),
    reportUrl?: string(name='ReportUrl', example='https://cloud-config-compliance-report.oss-cn-shanghai.aliyuncs.com/ConfigRuleReports/100931896542****/rules/100931896542****-rules-report-202106221125.zip?Expires=162433****&OSSAccessKeyId=LTAIs86R8H59****&Signature=yT8jn6ZQSX3dyCwVKL5EOJhGJ****'),
  }(name='ConfigRulesReport'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model GetConfigRulesReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigRulesReportResponseBody(name='body'),
}

async function getConfigRulesReportWithOptions(request: GetConfigRulesReportRequest, runtime: Util.RuntimeOptions): GetConfigRulesReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigRulesReport',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRulesReport(request: GetConfigRulesReportRequest): GetConfigRulesReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRulesReportWithOptions(request, runtime);
}

model GetDiscoveredResourceRequest {
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
}

model GetDiscoveredResourceResponseBody = {
  discoveredResourceDetail?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
    configuration?: string(name='Configuration', example='{\\"AccessControlList\\":{\\"Grant\\":\\"private\\"},\\"ServerSideEncryptionRule\\":{\\"SSEAlgorithm\\":\\"None\\"},\\"Comment\\":\\"\\",\\"CreationDate\\":\\"2021-06-29T10:05:12.000Z\\",\\"Owner\\":{\\"DisplayName\\":\\"100931896542****\\",\\"ID\\":\\"100931896542****\\"},\\"StorageClass\\":\\"Standard\\",\\"DataRedundancyType\\":\\"LRS\\",\\"AllowEmptyReferer\\":\\"true\\",\\"Name\\":\\"new-bucket\\",\\"BucketPolicy\\":{\\"LogPrefix\\":\\"\\",\\"LogBucket\\":\\"\\"},\\"ExtranetEndpoint\\":\\"oss-cn-hangzhou.aliyuncs.com\\",\\"IntranetEndpoint\\":\\"oss-cn-hangzhou-internal.aliyuncs.com\\",\\"Location\\":\\"oss-cn-hangzhou\\"}'),
    region?: string(name='Region', example='cn-hangzhou'),
    resourceCreationTime?: long(name='ResourceCreationTime', example='1624961112000'),
    resourceDeleted?: int32(name='ResourceDeleted', example='1'),
    resourceId?: string(name='ResourceId', example='new-bucket'),
    resourceName?: string(name='ResourceName', example='new-bucket'),
    resourceStatus?: string(name='ResourceStatus', example='offline'),
    resourceType?: string(name='ResourceType', example='ACS::OSS::BucketACS::CDN::Domain'),
    tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
  }(name='DiscoveredResourceDetail'),
  requestId?: string(name='RequestId', example='E4D71ACE-6B0A-46E0-8352-56952378CC7F'),
}

model GetDiscoveredResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiscoveredResourceResponseBody(name='body'),
}

async function getDiscoveredResourceWithOptions(request: GetDiscoveredResourceRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResource',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResource(request: GetDiscoveredResourceRequest): GetDiscoveredResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceWithOptions(request, runtime);
}

model GetDiscoveredResourceCountsGroupByRegionRequest {
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
}

model GetDiscoveredResourceCountsGroupByRegionResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      groupName?: string(name='GroupName', example='cn-hangzhou'),
      region?: string(name='Region', example='cn-hangzhou'),
      resourceCount?: long(name='ResourceCount', example='10'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId', example='399BD94C-D20C-4D27-88D4-89E8D75C0595'),
}

model GetDiscoveredResourceCountsGroupByRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiscoveredResourceCountsGroupByRegionResponseBody(name='body'),
}

async function getDiscoveredResourceCountsGroupByRegionWithOptions(request: GetDiscoveredResourceCountsGroupByRegionRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceCountsGroupByRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResourceCountsGroupByRegion',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResourceCountsGroupByRegion(request: GetDiscoveredResourceCountsGroupByRegionRequest): GetDiscoveredResourceCountsGroupByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceCountsGroupByRegionWithOptions(request, runtime);
}

model GetDiscoveredResourceCountsGroupByResourceTypeRequest {
  region?: string(name='Region', example='cn-hangzhou'),
}

model GetDiscoveredResourceCountsGroupByResourceTypeResponseBody = {
  discoveredResourceCountsSummary?: [ 
    {
      groupName?: string(name='GroupName'),
      resourceCount?: long(name='ResourceCount', example='10'),
      resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
    }
  ](name='DiscoveredResourceCountsSummary'),
  requestId?: string(name='RequestId', example='AC9BD94C-D20C-4D27-88D4-89E8D75C051B'),
}

model GetDiscoveredResourceCountsGroupByResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiscoveredResourceCountsGroupByResourceTypeResponseBody(name='body'),
}

async function getDiscoveredResourceCountsGroupByResourceTypeWithOptions(request: GetDiscoveredResourceCountsGroupByResourceTypeRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceCountsGroupByResourceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResourceCountsGroupByResourceType',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResourceCountsGroupByResourceType(request: GetDiscoveredResourceCountsGroupByResourceTypeRequest): GetDiscoveredResourceCountsGroupByResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceCountsGroupByResourceTypeWithOptions(request, runtime);
}

model GetIntegratedServiceStatusRequest {
  serviceCode?: string(name='ServiceCode', example='cadt'),
}

model GetIntegratedServiceStatusResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='2E396C84-8D50-5F95-97FA-C0367181BA8A'),
}

model GetIntegratedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIntegratedServiceStatusResponseBody(name='body'),
}

async function getIntegratedServiceStatusWithOptions(request: GetIntegratedServiceStatusRequest, runtime: Util.RuntimeOptions): GetIntegratedServiceStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIntegratedServiceStatus',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIntegratedServiceStatus(request: GetIntegratedServiceStatusRequest): GetIntegratedServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIntegratedServiceStatusWithOptions(request, runtime);
}

model GetManagedRuleRequest {
  identifier?: string(name='Identifier', example='cdn-domain-https-enabled'),
}

model GetManagedRuleResponseBody = {
  managedRule?: {
    compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails', example='{}'),
    configRuleName?: string(name='ConfigRuleName'),
    description?: string(name='Description'),
    helpUrls?: string(name='HelpUrls', example='https://example.aliyundoc.com'),
    identifier?: string(name='Identifier', example='cdn-domain-https-enabled'),
    labels?: [ string ](name='Labels'),
    optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails', example='{}'),
    riskLevel?: int32(name='RiskLevel', example='1'),
    scope?: {
      complianceResourceTypes?: [ string ](name='ComplianceResourceTypes'),
    }(name='Scope'),
    sourceDetails?: [ 
      {
        maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='TwentyFour_Hours'),
        messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
      }
    ](name='SourceDetails'),
  }(name='ManagedRule'),
  requestId?: string(name='RequestId', example='7E6DDC09-87C1-5310-A924-3491EAAE6F90'),
}

model GetManagedRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetManagedRuleResponseBody(name='body'),
}

async function getManagedRuleWithOptions(request: GetManagedRuleRequest, runtime: Util.RuntimeOptions): GetManagedRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetManagedRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getManagedRule(request: GetManagedRuleRequest): GetManagedRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManagedRuleWithOptions(request, runtime);
}

model GetResourceComplianceByConfigRuleRequest {
  complianceType?: string(name='ComplianceType', example='COMPLIANT'),
  configRuleId?: string(name='ConfigRuleId', example='cr-d369626622af008e****'),
}

model GetResourceComplianceByConfigRuleResponseBody = {
  complianceResult?: {
    compliances?: [ 
      {
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
        count?: int32(name='Count', example='5'),
      }
    ](name='Compliances'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId', example='23306AB1-34E0-468F-BD7B-68D8AEAB753d'),
}

model GetResourceComplianceByConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceComplianceByConfigRuleResponseBody(name='body'),
}

async function getResourceComplianceByConfigRuleWithOptions(request: GetResourceComplianceByConfigRuleRequest, runtime: Util.RuntimeOptions): GetResourceComplianceByConfigRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceByConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceByConfigRule(request: GetResourceComplianceByConfigRuleRequest): GetResourceComplianceByConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceByConfigRuleWithOptions(request, runtime);
}

model GetResourceComplianceByPackRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
}

model GetResourceComplianceByPackResponseBody = {
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
  resourceComplianceResult?: {
    compliancePackId?: string(name='CompliancePackId', example='cp-541e626622af0087****'),
    nonCompliantCount?: int32(name='NonCompliantCount', example='7'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='ResourceComplianceResult'),
}

model GetResourceComplianceByPackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceComplianceByPackResponseBody(name='body'),
}

async function getResourceComplianceByPackWithOptions(request: GetResourceComplianceByPackRequest, runtime: Util.RuntimeOptions): GetResourceComplianceByPackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceByPack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceByPack(request: GetResourceComplianceByPackRequest): GetResourceComplianceByPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceByPackWithOptions(request, runtime);
}

model GetResourceComplianceGroupByRegionRequest {
  configRuleIds?: string(name='ConfigRuleIds'),
}

model GetResourceComplianceGroupByRegionResponseBody = {
  complianceResult?: {
    complianceResultList?: [ 
      {
        compliances?: [ 
          {
            complianceType?: string(name='ComplianceType'),
            count?: long(name='Count'),
          }
        ](name='Compliances'),
        regionId?: string(name='RegionId'),
      }
    ](name='ComplianceResultList'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetResourceComplianceGroupByRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceComplianceGroupByRegionResponseBody(name='body'),
}

async function getResourceComplianceGroupByRegionWithOptions(request: GetResourceComplianceGroupByRegionRequest, runtime: Util.RuntimeOptions): GetResourceComplianceGroupByRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceGroupByRegion',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceGroupByRegion(request: GetResourceComplianceGroupByRegionRequest): GetResourceComplianceGroupByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceGroupByRegionWithOptions(request, runtime);
}

model GetResourceComplianceGroupByResourceTypeRequest {
  configRuleIds?: string(name='ConfigRuleIds'),
}

model GetResourceComplianceGroupByResourceTypeResponseBody = {
  complianceResult?: {
    complianceResultList?: [ 
      {
        compliances?: [ 
          {
            complianceType?: string(name='ComplianceType'),
            count?: long(name='Count'),
          }
        ](name='Compliances'),
        resourceType?: string(name='ResourceType'),
      }
    ](name='ComplianceResultList'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model GetResourceComplianceGroupByResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceComplianceGroupByResourceTypeResponseBody(name='body'),
}

async function getResourceComplianceGroupByResourceTypeWithOptions(request: GetResourceComplianceGroupByResourceTypeRequest, runtime: Util.RuntimeOptions): GetResourceComplianceGroupByResourceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceGroupByResourceType',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceGroupByResourceType(request: GetResourceComplianceGroupByResourceTypeRequest): GetResourceComplianceGroupByResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceGroupByResourceTypeWithOptions(request, runtime);
}

model GetResourceComplianceTimelineRequest {
  endTime?: long(name='EndTime', example='1625821156000'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
  startTime?: long(name='StartTime', example='1623211156000'),
}

model GetResourceComplianceTimelineResponseBody = {
  requestId?: string(name='RequestId', example='8D53A78F-1EB8-4264-A554-72F07E34FAE6'),
  resourceComplianceTimeline?: {
    complianceList?: [ 
      {
        accountId?: string(name='AccountId', example='100931896542****'),
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-f'),
        captureTime?: long(name='CaptureTime', example='1625200295276'),
        configuration?: string(name='Configuration'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceCreateTime?: long(name='ResourceCreateTime', example='1624961112000'),
        resourceId?: string(name='ResourceId', example='new-bucket'),
        resourceName?: string(name='ResourceName', example='new-bucket'),
        resourceStatus?: string(name='ResourceStatus', example='Running'),
        resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
        tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
      }
    ](name='ComplianceList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='5OVS5J4I1/UKTkHV5oNs****'),
  }(name='ResourceComplianceTimeline'),
}

model GetResourceComplianceTimelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceComplianceTimelineResponseBody(name='body'),
}

async function getResourceComplianceTimelineWithOptions(request: GetResourceComplianceTimelineRequest, runtime: Util.RuntimeOptions): GetResourceComplianceTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceTimeline(request: GetResourceComplianceTimelineRequest): GetResourceComplianceTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceTimelineWithOptions(request, runtime);
}

model GetResourceConfigurationTimelineRequest {
  endTime?: long(name='EndTime', example='1625821156000'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
  startTime?: long(name='StartTime', example='1623211156000'),
}

model GetResourceConfigurationTimelineResponseBody = {
  requestId?: string(name='RequestId', example='ED9CD1B3-286C-4E05-A765-5E1E0B9BC2AB'),
  resourceConfigurationTimeline?: {
    configurationList?: [ 
      {
        accountId?: long(name='AccountId', example='100931896542****'),
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
        captureTime?: string(name='CaptureTime', example='1624961156000'),
        configurationDiff?: string(name='ConfigurationDiff', example='{\\"AccessControlList\\":[null,{\\"Grant\\":\\"private\\"}],\\"ServerSideEncryptionRule\\":[null,{\\"SSEAlgorithm\\":\\"None\\"}],\\"CreationDate\\":[null,\\"2021-06-29T10:05:12.000Z\\"],\\"Owner\\":[null,{\\"DisplayName\\":\\"100931896542****\\",\\"ID\\":\\"100931896542****\\"}],\\"BucketPolicy\\":[null,{\\"LogPrefix\\":\\"\\",\\"LogBucket\\":\\"\\"}],\\"StorageClass\\":[null,\\"Standard\\"],\\"ExtranetEndpoint\\":[null,\\"oss-cn-hangzhou.aliyuncs.com\\"],\\"DataRedundancyType\\":[null,\\"LRS\\"],\\"AllowEmptyReferer\\":[null,\\"true\\"],\\"IntranetEndpoint\\":[null,\\"oss-cn-hangzhou-internal.aliyuncs.com\\"],\\"Name\\":[null,\\"new-bucket\\"],\\"Location\\":[null,\\"oss-cn-hangzhou\\"]}'),
        region?: string(name='Region', example='cn-hangzhou'),
        relationship?: string(name='Relationship', example='""'),
        relationshipDiff?: string(name='RelationshipDiff', example='""'),
        resourceCreateTime?: string(name='ResourceCreateTime', example='1624961112000'),
        resourceEventType?: string(name='ResourceEventType', example='DISCOVERED'),
        resourceId?: string(name='ResourceId', example='new-bucket'),
        resourceName?: string(name='ResourceName', example='new-bucket'),
        resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
        tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
      }
    ](name='ConfigurationList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  }(name='ResourceConfigurationTimeline'),
}

model GetResourceConfigurationTimelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceConfigurationTimelineResponseBody(name='body'),
}

async function getResourceConfigurationTimelineWithOptions(request: GetResourceConfigurationTimelineRequest, runtime: Util.RuntimeOptions): GetResourceConfigurationTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceConfigurationTimeline',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceConfigurationTimeline(request: GetResourceConfigurationTimelineRequest): GetResourceConfigurationTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceConfigurationTimelineWithOptions(request, runtime);
}

model IgnoreAggregateEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5b6c626622af008f****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
  reason?: string(name='Reason'),
  resources?: [ 
    {
      region?: string(name='Region', example='cn-beijing'),
      resourceAccountId?: long(name='ResourceAccountId', example='120886317861****'),
      resourceId?: string(name='ResourceId', example='lb-hp3a3b4ztyfm2plgm****'),
      resourceType?: string(name='ResourceType', example='ACS::SLB::LoadBalancer'),
    }
  ](name='Resources'),
}

model IgnoreAggregateEvaluationResultsShrinkRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5b6c626622af008f****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
  reason?: string(name='Reason'),
  resourcesShrink?: string(name='Resources'),
}

model IgnoreAggregateEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId', example='0132CBF2-0B0B-59F2-9E84-07B38267BC32'),
}

model IgnoreAggregateEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreAggregateEvaluationResultsResponseBody(name='body'),
}

async function ignoreAggregateEvaluationResultsWithOptions(tmpReq: IgnoreAggregateEvaluationResultsRequest, runtime: Util.RuntimeOptions): IgnoreAggregateEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new IgnoreAggregateEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.ignoreDate)) {
    body['IgnoreDate'] = request.ignoreDate;
  }
  if (!Util.isUnset(request.reason)) {
    body['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreAggregateEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreAggregateEvaluationResults(request: IgnoreAggregateEvaluationResultsRequest): IgnoreAggregateEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreAggregateEvaluationResultsWithOptions(request, runtime);
}

model IgnoreEvaluationResultsRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
  reason?: string(name='Reason'),
  resources?: [ 
    {
      region?: string(name='Region', example='cn-beijing'),
      resourceAccountId?: long(name='ResourceAccountId', example='100931896542****'),
      resourceId?: string(name='ResourceId', example='lb-hp3a3b4ztyfm2plgm****'),
      resourceType?: string(name='ResourceType', example='ACS::SLB::LoadBalancer'),
    }
  ](name='Resources'),
}

model IgnoreEvaluationResultsShrinkRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
  reason?: string(name='Reason'),
  resourcesShrink?: string(name='Resources'),
}

model IgnoreEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId', example='1840CBF2-0B0B-59F2-9E84-07B38267A279'),
}

model IgnoreEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreEvaluationResultsResponseBody(name='body'),
}

async function ignoreEvaluationResultsWithOptions(tmpReq: IgnoreEvaluationResultsRequest, runtime: Util.RuntimeOptions): IgnoreEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new IgnoreEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.ignoreDate)) {
    body['IgnoreDate'] = request.ignoreDate;
  }
  if (!Util.isUnset(request.reason)) {
    body['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreEvaluationResults(request: IgnoreEvaluationResultsRequest): IgnoreEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreEvaluationResultsWithOptions(request, runtime);
}

model ListAggregateCompliancePacksRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='ACTIVE'),
}

model ListAggregateCompliancePacksResponseBody = {
  compliancePacksResult?: {
    compliancePacks?: [ 
      {
        accountId?: long(name='AccountId', example='100931896542****'),
        aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
        compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
        compliancePackName?: string(name='CompliancePackName'),
        compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
        createTimestamp?: long(name='CreateTimestamp', example='1624243657000'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel', example='1'),
        status?: string(name='Status', example='ACTIVE'),
      }
    ](name='CompliancePacks'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='CompliancePacksResult'),
  requestId?: string(name='RequestId', example='B5806142-3090-4F86-A84E-12B3FE52C1C4'),
}

model ListAggregateCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateCompliancePacksResponseBody(name='body'),
}

async function listAggregateCompliancePacksWithOptions(request: ListAggregateCompliancePacksRequest, runtime: Util.RuntimeOptions): ListAggregateCompliancePacksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateCompliancePacks(request: ListAggregateCompliancePacksRequest): ListAggregateCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateCompliancePacksWithOptions(request, runtime);
}

model ListAggregateConfigDeliveryChannelsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  deliveryChannelIds?: string(name='DeliveryChannelIds', example='cdc-d9106457e0d900b1****'),
}

model ListAggregateConfigDeliveryChannelsResponseBody = {
  deliveryChannels?: [ 
    {
      accountId?: long(name='AccountId', example='120886317861****'),
      aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
      configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='true'),
      configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
      deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::120886317861****:role/aliyunserviceroleforconfig'),
      deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
      deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
      deliveryChannelName?: string(name='DeliveryChannelName', example='myDeliveryChannel'),
      deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:120886317861****:new-bucket'),
      deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
      deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
      description?: string(name='Description', example='My OSS delivery.'),
      nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
      oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
      status?: int32(name='Status', example='1'),
    }
  ](name='DeliveryChannels'),
  requestId?: string(name='RequestId', example='DC300244-FCE3-5061-8214-C27ECB668487'),
}

model ListAggregateConfigDeliveryChannelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateConfigDeliveryChannelsResponseBody(name='body'),
}

async function listAggregateConfigDeliveryChannelsWithOptions(request: ListAggregateConfigDeliveryChannelsRequest, runtime: Util.RuntimeOptions): ListAggregateConfigDeliveryChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.deliveryChannelIds)) {
    query['DeliveryChannelIds'] = request.deliveryChannelIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateConfigDeliveryChannels',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateConfigDeliveryChannels(request: ListAggregateConfigDeliveryChannelsRequest): ListAggregateConfigDeliveryChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateConfigDeliveryChannelsWithOptions(request, runtime);
}

model ListAggregateConfigRuleEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-b1e6626622af00cb****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-f1e3326622af00cb****'),
  complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
  configRuleId?: string(name='ConfigRuleId', example='cr-888f626622af00ae****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  regions?: string(name='Regions'),
  resourceGroupIds?: string(name='ResourceGroupIds'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceTypes?: string(name='ResourceTypes'),
}

model ListAggregateConfigRuleEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation', example='{\\"configuration\\":\\"LRS\\",\\"desiredValue\\":\\"ZRS\\",\\"operator\\":\\"StringEquals\\",\\"property\\":\\"$.DataRedundancyType\\"}'),
        complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp', example='1624869012713'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            compliancePackId?: string(name='CompliancePackId', example='cr-7263fd26622af00bc****'),
            configRuleArn?: string(name='ConfigRuleArn', example='acs:config::100931896542****:rule/cr-888f626622af00ae****'),
            configRuleId?: string(name='ConfigRuleId', example='cr-888f626622af00ae****'),
            configRuleName?: string(name='ConfigRuleName'),
            ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
            regionId?: string(name='RegionId', example='cn-hangzhou'),
            resourceId?: string(name='ResourceId', example='Bucket-test'),
            resourceName?: string(name='ResourceName', example='Bucket-test'),
            resourceOwnerId?: long(name='ResourceOwnerId', example='173808452267****'),
            resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp', example='1624869012713'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType', example='ScheduledNotification'),
        remediationEnabled?: boolean(name='RemediationEnabled', example='false'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp', example='1624869013065'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId', example='A6662516-D056-4325-B6A7-CD3E89C97C39'),
}

model ListAggregateConfigRuleEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateConfigRuleEvaluationResultsResponseBody(name='body'),
}

async function listAggregateConfigRuleEvaluationResultsWithOptions(request: ListAggregateConfigRuleEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListAggregateConfigRuleEvaluationResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regions)) {
    query['Regions'] = request.regions;
  }
  if (!Util.isUnset(request.resourceGroupIds)) {
    query['ResourceGroupIds'] = request.resourceGroupIds;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateConfigRuleEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateConfigRuleEvaluationResults(request: ListAggregateConfigRuleEvaluationResultsRequest): ListAggregateConfigRuleEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateConfigRuleEvaluationResultsWithOptions(request, runtime);
}

model ListAggregateConfigRulesRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  complianceType?: string(name='ComplianceType', example='COMPLIANT'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  riskLevel?: int32(name='RiskLevel', example='1'),
}

model ListAggregateConfigRulesResponseBody = {
  configRules?: {
    configRuleList?: [ 
      {
        accountId?: long(name='AccountId', example='100931896542****'),
        automationType?: string(name='AutomationType', example='OOS'),
        compliance?: {
          complianceType?: string(name='ComplianceType', example='COMPLIANT'),
          count?: int32(name='Count', example='2'),
        }(name='Compliance'),
        configRuleArn?: string(name='ConfigRuleArn', example='acs:config::100931896542****:rule/cr-fdc8626622af00f9****'),
        configRuleId?: string(name='ConfigRuleId', example='cr-fdc8626622af00f9****'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
        createBy?: {
          aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
          aggregatorName?: string(name='AggregatorName', example='Test_Group'),
          compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
          compliancePackName?: string(name='CompliancePackName'),
          creatorId?: string(name='CreatorId', example='100931896542****'),
          creatorName?: string(name='CreatorName', example='Alice'),
          creatorType?: string(name='CreatorType', example='AGGREGATOR'),
        }(name='CreateBy'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel', example='1'),
        sourceIdentifier?: string(name='SourceIdentifier', example='eip-bandwidth-limit'),
        sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
      }
    ](name='ConfigRuleList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='ConfigRules'),
  requestId?: string(name='RequestId', example='22EF8287-2C9A-4F1F-80A6-CEFA7612689D'),
}

model ListAggregateConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateConfigRulesResponseBody(name='body'),
}

async function listAggregateConfigRulesWithOptions(request: ListAggregateConfigRulesRequest, runtime: Util.RuntimeOptions): ListAggregateConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.configRuleName)) {
    query['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleState)) {
    query['ConfigRuleState'] = request.configRuleState;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateConfigRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateConfigRules(request: ListAggregateConfigRulesRequest): ListAggregateConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateConfigRulesWithOptions(request, runtime);
}

model ListAggregateDiscoveredResourcesRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-c560626622af0005****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  regions?: string(name='Regions', example='cn-huhehaote'),
  resourceDeleted?: int32(name='ResourceDeleted', example='1'),
  resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceTypes?: string(name='ResourceTypes', example='ACS::ECS::NetworkInterface'),
}

model ListAggregateDiscoveredResourcesResponseBody = {
  discoveredResourceProfiles?: {
    discoveredResourceProfileList?: [ 
      {
        accountId?: long(name='AccountId', example='161259599160****'),
        availabilityZone?: string(name='AvailabilityZone'),
        region?: string(name='Region', example='cn-huhehaote'),
        resourceCreationTime?: long(name='ResourceCreationTime', example='1618675206000'),
        resourceDeleted?: int32(name='ResourceDeleted', example='1'),
        resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
        resourceName?: string(name='ResourceName', example='Cloud Firewall'),
        resourceOwnerId?: long(name='ResourceOwnerId', example='161259599160****'),
        resourceStatus?: string(name='ResourceStatus', example='InUse'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::NetworkInterface'),
        tags?: string(name='Tags', example='{\\"key1\\":[\\"value2\\"]}'),
        version?: long(name='Version'),
      }
    ](name='DiscoveredResourceProfileList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
    totalCount?: int32(name='TotalCount', example='8'),
  }(name='DiscoveredResourceProfiles'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model ListAggregateDiscoveredResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateDiscoveredResourcesResponseBody(name='body'),
}

async function listAggregateDiscoveredResourcesWithOptions(request: ListAggregateDiscoveredResourcesRequest, runtime: Util.RuntimeOptions): ListAggregateDiscoveredResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regions)) {
    query['Regions'] = request.regions;
  }
  if (!Util.isUnset(request.resourceDeleted)) {
    query['ResourceDeleted'] = request.resourceDeleted;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateDiscoveredResources',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateDiscoveredResources(request: ListAggregateDiscoveredResourcesRequest): ListAggregateDiscoveredResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateDiscoveredResourcesWithOptions(request, runtime);
}

model ListAggregateRemediationsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-6b4a626622af0012****'),
  configRuleIds?: string(name='ConfigRuleIds', example='cr-6b7c626622af00b4****'),
}

model ListAggregateRemediationsResponseBody = {
  remediations?: [ 
    {
      accountId?: long(name='AccountId', example='100931896542****'),
      aggregatorId?: string(name='AggregatorId', example='ca-6b4a626622af0012****'),
      configRuleId?: string(name='ConfigRuleId', example='cr-6b7c626622af00b4****'),
      invokeType?: string(name='InvokeType', example='AUTO_EXECUTION'),
      lastSuccessfulInvocationId?: string(name='LastSuccessfulInvocationId', example='bd7629fb-cac8-42fe-bcb1-e362c5a6****'),
      lastSuccessfulInvocationTime?: long(name='LastSuccessfulInvocationTime', example='1625451393589'),
      lastSuccessfulInvocationType?: string(name='LastSuccessfulInvocationType', example='AUTO_EXECUTION'),
      remediaitonOriginParams?: string(name='RemediaitonOriginParams', example='{"bucketName": "{resourceId}", "regionId": "{regionId}", "permissionName": "private"}'),
      remediationId?: string(name='RemediationId', example='crr-6b7c626622af0026****'),
      remediationSourceType?: string(name='RemediationSourceType', example='ALIYUN'),
      remediationTemplateId?: string(name='RemediationTemplateId', example='ACS-OSS-PutBucketAcl'),
      remediationType?: string(name='RemediationType', example='OOS'),
    }
  ](name='Remediations'),
  requestId?: string(name='RequestId', example='0146963A-20C0-4E75-B93A-7D622B5FD7C8'),
}

model ListAggregateRemediationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateRemediationsResponseBody(name='body'),
}

async function listAggregateRemediationsWithOptions(request: ListAggregateRemediationsRequest, runtime: Util.RuntimeOptions): ListAggregateRemediationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateRemediations',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateRemediations(request: ListAggregateRemediationsRequest): ListAggregateRemediationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateRemediationsWithOptions(request, runtime);
}

model ListAggregateResourceEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-7f00626622af0041****'),
  complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  region?: string(name='Region', example='global'),
  resourceId?: string(name='ResourceId', example='23642660635396****'),
  resourceType?: string(name='ResourceType', example='ACS::RAM::User'),
}

model ListAggregateResourceEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation', example='{\\"configuration\\":\\"false\\",\\"desiredValue\\":\\"True\\",\\"operator\\":\\"StringEquals\\",\\"property\\":\\"$.LoginProfile.MFABindRequired\\"}'),
        complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp', example='1624932227157'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            configRuleArn?: string(name='ConfigRuleArn', example='acs:config::100931896542****:rule/cr-7f7d626622af0041****'),
            configRuleId?: string(name='ConfigRuleId', example='cr-7f7d626622af0041****'),
            configRuleName?: string(name='ConfigRuleName'),
            ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
            regionId?: string(name='RegionId', example='global'),
            resourceId?: string(name='ResourceId', example='23642660635396****'),
            resourceName?: string(name='ResourceName', example='rd_member'),
            resourceType?: string(name='ResourceType', example='ACS::RAM::User'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp', example='1624932227157'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType', example='ScheduledNotification'),
        remediationEnabled?: boolean(name='RemediationEnabled', example='false'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp', example='1624932227595'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId', example='25C89DDB-BB79-487D-88C3-4A561F21EFC4'),
}

model ListAggregateResourceEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateResourceEvaluationResultsResponseBody(name='body'),
}

async function listAggregateResourceEvaluationResultsWithOptions(request: ListAggregateResourceEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListAggregateResourceEvaluationResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateResourceEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateResourceEvaluationResults(request: ListAggregateResourceEvaluationResultsRequest): ListAggregateResourceEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateResourceEvaluationResultsWithOptions(request, runtime);
}

model ListAggregatorsRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291cmNlU2hhcmVzJjE1MTI2NjY4NzY5MTAzOTEmMiZORnI4NDhVeEtrUT0'),
}

model ListAggregatorsResponseBody = {
  aggregatorsResult?: {
    aggregators?: [ 
      {
        accountId?: long(name='AccountId', example='100931896542****'),
        aggregatorAccountCount?: long(name='AggregatorAccountCount', example='2'),
        aggregatorCreateTimestamp?: long(name='AggregatorCreateTimestamp', example='1623036305000'),
        aggregatorId?: string(name='AggregatorId', example='ca-88ea626622af0055****'),
        aggregatorName?: string(name='AggregatorName', example='Test_Group'),
        aggregatorStatus?: int32(name='AggregatorStatus', example='1'),
        aggregatorType?: string(name='AggregatorType', example='CUSTOM'),
        description?: string(name='Description'),
      }
    ](name='Aggregators'),
    nextToken?: string(name='NextToken', example='TGlzdFJlc291cmNlU2hhcmVzJjE1MTI2NjY4NzY5MTAzOTEmMiZORnI4NDhVeEtrUT0'),
  }(name='AggregatorsResult'),
  requestId?: string(name='RequestId', example='20C8526D-12C5-4336-BC72-EBD5D1BA732F'),
}

model ListAggregatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregatorsResponseBody(name='body'),
}

async function listAggregatorsWithOptions(request: ListAggregatorsRequest, runtime: Util.RuntimeOptions): ListAggregatorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregators',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregators(request: ListAggregatorsRequest): ListAggregatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregatorsWithOptions(request, runtime);
}

model ListCompliancePackTemplatesRequest {
  compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-d254ff4e06a300cf****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListCompliancePackTemplatesResponseBody = {
  compliancePackTemplatesResult?: {
    compliancePackTemplates?: [ 
      {
        compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-d254ff4e06a300cf****'),
        compliancePackTemplateName?: string(name='CompliancePackTemplateName'),
        configRules?: [ 
          {
            configRuleParameters?: [ 
              {
                parameterName?: string(name='ParameterName', example='days'),
                parameterValue?: string(name='ParameterValue', example='90'),
                required?: boolean(name='Required', example='true'),
              }
            ](name='ConfigRuleParameters'),
            controlDescription?: string(name='ControlDescription'),
            controlId?: string(name='ControlId'),
            defaultEnable?: boolean(name='DefaultEnable'),
            description?: string(name='Description'),
            managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='slb-servercertificate-expired-check'),
            managedRuleName?: string(name='ManagedRuleName'),
            riskLevel?: int32(name='RiskLevel', example='1'),
          }
        ](name='ConfigRules'),
        description?: string(name='Description'),
        labels?: string(name='Labels'),
        lastUpdate?: int32(name='LastUpdate'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='CompliancePackTemplates'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='CompliancePackTemplatesResult'),
  requestId?: string(name='RequestId', example='D67FC82F-25AE-4268-A94C-3348340748F9'),
}

model ListCompliancePackTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCompliancePackTemplatesResponseBody(name='body'),
}

async function listCompliancePackTemplatesWithOptions(request: ListCompliancePackTemplatesRequest, runtime: Util.RuntimeOptions): ListCompliancePackTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.compliancePackTemplateId)) {
    query['CompliancePackTemplateId'] = request.compliancePackTemplateId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCompliancePackTemplates',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCompliancePackTemplates(request: ListCompliancePackTemplatesRequest): ListCompliancePackTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCompliancePackTemplatesWithOptions(request, runtime);
}

model ListCompliancePacksRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  status?: string(name='Status', example='ACTIVE'),
}

model ListCompliancePacksResponseBody = {
  compliancePacksResult?: {
    compliancePacks?: [ 
      {
        accountId?: long(name='AccountId', example='120886317861****'),
        compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
        compliancePackName?: string(name='CompliancePackName'),
        compliancePackTemplateId?: string(name='CompliancePackTemplateId', example='ct-5f26ff4e06a300c4****'),
        createTimestamp?: long(name='CreateTimestamp', example='1621325046000'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel', example='1'),
        status?: string(name='Status', example='ACTIVE'),
      }
    ](name='CompliancePacks'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='CompliancePacksResult'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model ListCompliancePacksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCompliancePacksResponseBody(name='body'),
}

async function listCompliancePacksWithOptions(request: ListCompliancePacksRequest, runtime: Util.RuntimeOptions): ListCompliancePacksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCompliancePacks',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCompliancePacks(request: ListCompliancePacksRequest): ListCompliancePacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCompliancePacksWithOptions(request, runtime);
}

model ListConfigDeliveryChannelsRequest {
  deliveryChannelIds?: string(name='DeliveryChannelIds', example='cdc-d9106457e0d900b1****'),
}

model ListConfigDeliveryChannelsResponseBody = {
  deliveryChannels?: [ 
    {
      accountId?: long(name='AccountId', example='120886317861****'),
      configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='true'),
      configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
      deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::120886317861****:role/aliyunserviceroleforconfig'),
      deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
      deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
      deliveryChannelName?: string(name='DeliveryChannelName', example='myDeliveryChannel'),
      deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:120886317861****:new-bucket'),
      deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
      deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
      description?: string(name='Description', example='My OSS delivery.'),
      nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
      oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
      status?: int32(name='Status', example='1'),
    }
  ](name='DeliveryChannels'),
  requestId?: string(name='RequestId', example='DC300244-FCE3-5061-8214-C27ECB668487'),
}

model ListConfigDeliveryChannelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigDeliveryChannelsResponseBody(name='body'),
}

async function listConfigDeliveryChannelsWithOptions(request: ListConfigDeliveryChannelsRequest, runtime: Util.RuntimeOptions): ListConfigDeliveryChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliveryChannelIds)) {
    query['DeliveryChannelIds'] = request.deliveryChannelIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigDeliveryChannels',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigDeliveryChannels(request: ListConfigDeliveryChannelsRequest): ListConfigDeliveryChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigDeliveryChannelsWithOptions(request, runtime);
}

model ListConfigRuleEvaluationResultsRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-f1e3326622af00cb****'),
  complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
  configRuleId?: string(name='ConfigRuleId', example='cr-cac56457e0d900d3****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  regions?: string(name='Regions'),
  resourceGroupIds?: string(name='ResourceGroupIds'),
  resourceTypes?: string(name='ResourceTypes'),
}

model ListConfigRuleEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation', example='{\\"configuration\\":\\"\\",\\"desiredValue\\":\\"\\",\\"operator\\":\\"IsNotStringEmpty\\",\\"property\\":\\"$.KeyPairName\\",\\"reason\\":\\"No property contains.\\"}'),
        complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp', example='1622802307081'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            compliancePackId?: string(name='CompliancePackId', example='cp-bcc33457e0d900d5****'),
            configRuleArn?: string(name='ConfigRuleArn', example='acs:config::120886317861****:rule/cr-cac56457e0d900d3****'),
            configRuleId?: string(name='ConfigRuleId', example='cr-cac56457e0d900d3****'),
            configRuleName?: string(name='ConfigRuleName'),
            ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
            regionId?: string(name='RegionId', example='cn-hangzhou'),
            resourceId?: string(name='ResourceId', example='i-hp3e4kvhzqn2s11t****'),
            resourceName?: string(name='ResourceName', example='iZuf6j91r34rnwawoox****'),
            resourceOwnerId?: long(name='ResourceOwnerId', example='120886317861****'),
            resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp', example='1622802307081'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType', example='ConfigurationItemChangeNotification'),
        remediationEnabled?: boolean(name='RemediationEnabled', example='false'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp', example='1622802307150'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId', example='2A4A33BD-8186-4D60-91B9-42174EED75B5'),
}

model ListConfigRuleEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigRuleEvaluationResultsResponseBody(name='body'),
}

async function listConfigRuleEvaluationResultsWithOptions(request: ListConfigRuleEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListConfigRuleEvaluationResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigRuleEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigRuleEvaluationResults(request: ListConfigRuleEvaluationResultsRequest): ListConfigRuleEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigRuleEvaluationResultsWithOptions(request, runtime);
}

model ListDiscoveredResourcesRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  regions?: string(name='Regions', example='cn-huhehaote'),
  resourceDeleted?: int32(name='ResourceDeleted', example='1'),
  resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
  resourceTypes?: string(name='ResourceTypes', example='ACS::ECS::NetworkInterface'),
}

model ListDiscoveredResourcesResponseBody = {
  discoveredResourceProfiles?: {
    discoveredResourceProfileList?: [ 
      {
        accountId?: long(name='AccountId', example='161259599160****'),
        availabilityZone?: string(name='AvailabilityZone'),
        region?: string(name='Region', example='cn-huhehaote'),
        resourceCreationTime?: long(name='ResourceCreationTime', example='1618675206000'),
        resourceDeleted?: int32(name='ResourceDeleted', example='1'),
        resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
        resourceName?: string(name='ResourceName', example='Cloud Firewall'),
        resourceStatus?: string(name='ResourceStatus', example='InUse'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::NetworkInterface'),
        tags?: string(name='Tags', example='{\\"key1\\":[\\"value2\\"]}'),
        version?: long(name='Version', example='1'),
      }
    ](name='DiscoveredResourceProfileList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='161259599160****'),
    totalCount?: int32(name='TotalCount', example='8'),
  }(name='DiscoveredResourceProfiles'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model ListDiscoveredResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDiscoveredResourcesResponseBody(name='body'),
}

async function listDiscoveredResourcesWithOptions(request: ListDiscoveredResourcesRequest, runtime: Util.RuntimeOptions): ListDiscoveredResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regions)) {
    query['Regions'] = request.regions;
  }
  if (!Util.isUnset(request.resourceDeleted)) {
    query['ResourceDeleted'] = request.resourceDeleted;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDiscoveredResources',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDiscoveredResources(request: ListDiscoveredResourcesRequest): ListDiscoveredResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDiscoveredResourcesWithOptions(request, runtime);
}

model ListManagedRulesRequest {
  keyword?: string(name='Keyword', example='CDN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  riskLevel?: int32(name='RiskLevel', example='1'),
}

model ListManagedRulesResponseBody = {
  managedRules?: {
    managedRuleList?: [ 
      {
        configRuleName?: string(name='ConfigRuleName'),
        description?: string(name='Description'),
        helpUrls?: string(name='HelpUrls'),
        identifier?: string(name='Identifier'),
        labels?: [ string ](name='Labels'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='ManagedRuleList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='ManagedRules'),
  requestId?: string(name='RequestId', example='B3E605AB-63D5-1EE0-BFA6-0BAC247B0461'),
}

model ListManagedRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListManagedRulesResponseBody(name='body'),
}

async function listManagedRulesWithOptions(request: ListManagedRulesRequest, runtime: Util.RuntimeOptions): ListManagedRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListManagedRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listManagedRules(request: ListManagedRulesRequest): ListManagedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManagedRulesWithOptions(request, runtime);
}

model ListPreManagedRulesRequest {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='1'),
  resourceTypes?: [ string ](name='ResourceTypes'),
}

model ListPreManagedRulesShrinkRequest {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='1'),
  resourceTypesShrink?: string(name='ResourceTypes'),
}

model ListPreManagedRulesResponseBody = {
  managedRules?: [ 
    {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails', example='{}'),
      configRuleName?: string(name='ConfigRuleName'),
      description?: string(name='Description'),
      helpUrls?: string(name='HelpUrls', example='https://example.aliyundoc.com'),
      identifier?: string(name='Identifier', example='ecs-instance-deletion-protection-enabled'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails', example='{}'),
      resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
    }
  ](name='ManagedRules'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='A2A9F1BE-0712-1B26-9899-D82F7DA8476C'),
}

model ListPreManagedRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPreManagedRulesResponseBody(name='body'),
}

async function listPreManagedRulesWithOptions(tmpReq: ListPreManagedRulesRequest, runtime: Util.RuntimeOptions): ListPreManagedRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPreManagedRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceTypes)) {
    request.resourceTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypes, 'ResourceTypes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceTypesShrink)) {
    body['ResourceTypes'] = request.resourceTypesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListPreManagedRules',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPreManagedRules(request: ListPreManagedRulesRequest): ListPreManagedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPreManagedRulesWithOptions(request, runtime);
}

model ListRemediationTemplatesRequest {
  managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='oss-bucket-public-write-prohibited'),
  remediationType?: string(name='RemediationType', example='OOS'),
}

model ListRemediationTemplatesResponseBody = {
  remediationTemplates?: [ 
    {
      remediationType?: string(name='RemediationType', example='OOS'),
      templateDefinition?: string(name='TemplateDefinition'),
      templateIdentifier?: string(name='TemplateIdentifier', example='ACS-OSS-PutBucketAcl'),
      templateName?: string(name='TemplateName'),
    }
  ](name='RemediationTemplates'),
  requestId?: string(name='RequestId', example='FC2C4750-7024-499C-A69F-763543D1CBE3'),
}

model ListRemediationTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemediationTemplatesResponseBody(name='body'),
}

async function listRemediationTemplatesWithOptions(request: ListRemediationTemplatesRequest, runtime: Util.RuntimeOptions): ListRemediationTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.managedRuleIdentifier)) {
    query['ManagedRuleIdentifier'] = request.managedRuleIdentifier;
  }
  if (!Util.isUnset(request.remediationType)) {
    query['RemediationType'] = request.remediationType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRemediationTemplates',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRemediationTemplates(request: ListRemediationTemplatesRequest): ListRemediationTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemediationTemplatesWithOptions(request, runtime);
}

model ListRemediationsRequest {
  configRuleIds?: string(name='ConfigRuleIds', example='cr-6b7c626622af00b4****'),
}

model ListRemediationsResponseBody = {
  remediations?: [ 
    {
      accountId?: long(name='AccountId', example='100931896542****'),
      configRuleId?: string(name='ConfigRuleId', example='cr-6b7c626622af00b4****'),
      invokeType?: string(name='InvokeType', example='AUTO_EXECUTION'),
      lastSuccessfulInvocationId?: string(name='LastSuccessfulInvocationId', example='bd7629fb-cac8-42fe-bcb1-e362c5a6****'),
      lastSuccessfulInvocationTime?: long(name='LastSuccessfulInvocationTime', example='1625451393589'),
      lastSuccessfulInvocationType?: string(name='LastSuccessfulInvocationType', example='AUTO_EXECUTION'),
      remediationId?: string(name='RemediationId', example='crr-6b7c626622af0026****'),
      remediationOriginParams?: string(name='RemediationOriginParams', example='{"bucketName": "{resourceId}", "regionId": "{regionId}", "permissionName": "private"}'),
      remediationSourceType?: string(name='RemediationSourceType', example='ALIYUN'),
      remediationTemplateId?: string(name='RemediationTemplateId', example='ACS-OSS-PutBucketAcl'),
      remediationType?: string(name='RemediationType', example='OOS'),
    }
  ](name='Remediations'),
  requestId?: string(name='RequestId', example='0146963A-20C0-4E75-B93A-7D622B5FD7C8'),
}

model ListRemediationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemediationsResponseBody(name='body'),
}

async function listRemediationsWithOptions(request: ListRemediationsRequest, runtime: Util.RuntimeOptions): ListRemediationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRemediations',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRemediations(request: ListRemediationsRequest): ListRemediationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemediationsWithOptions(request, runtime);
}

model ListResourceEvaluationResultsRequest {
  complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  region?: string(name='Region', example='global'),
  resourceId?: string(name='ResourceId', example='23642660635396****'),
  resourceType?: string(name='ResourceType', example='ACS::RAM::User'),
}

model ListResourceEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation', example='{\\"configuration\\":\\"false\\",\\"desiredValue\\":\\"True\\",\\"operator\\":\\"StringEquals\\",\\"property\\":\\"$.LoginProfile.MFABindRequired\\"}'),
        complianceType?: string(name='ComplianceType', example='NON_COMPLIANT'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp', example='1624932227157'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            configRuleArn?: string(name='ConfigRuleArn', example='acs:config::100931896542****:rule/cr-7f7d626622af0041****'),
            configRuleId?: string(name='ConfigRuleId', example='cr-7f7d626622af0041****'),
            configRuleName?: string(name='ConfigRuleName'),
            ignoreDate?: string(name='IgnoreDate', example='2022-06-01'),
            regionId?: string(name='RegionId', example='global'),
            resourceId?: string(name='ResourceId', example='23642660635396****'),
            resourceName?: string(name='ResourceName', example='Alice'),
            resourceType?: string(name='ResourceType', example='ACS::RAM::User'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp', example='1624932227157'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType', example='ScheduledNotification'),
        remediationEnabled?: boolean(name='RemediationEnabled', example='true'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp', example='1624932227595'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='EvaluationResultList'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='IWBjqMYSy0is7zSMGu16****'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId', example='25C89DDB-BB79-487D-88C3-4A561F21EFC4'),
}

model ListResourceEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceEvaluationResultsResponseBody(name='body'),
}

async function listResourceEvaluationResultsWithOptions(request: ListResourceEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListResourceEvaluationResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceEvaluationResults(request: ListResourceEvaluationResultsRequest): ListResourceEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceEvaluationResultsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJ****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ACS::Config:rule'),
  tag?: [ 
    {
      key?: string(name='Key', example='Env'),
      value?: string(name='Value', example='prod'),
    }
  ](name='Tag'),
}

model ListTagResourcesShrinkRequest {
  nextToken?: string(name='NextToken', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJ****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ACS::Config:rule'),
  tagShrink?: string(name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJ****'),
  requestId?: string(name='RequestId', example='AB2E4317-06A6-5745-B7C3-E001E551****'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='cr-115b626622af0060****'),
      resourceType?: string(name='ResourceType', example='ACS::Config:rule'),
      tagKey?: string(name='TagKey', example='Env'),
      tagValue?: string(name='TagValue', example='prod'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(tmpReq: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTagResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tag)) {
    request.tagShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tag, 'Tag', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagShrink)) {
    body['Tag'] = request.tagShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model RevertAggregateEvaluationResultsRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5b6c626622af008f****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  resources?: [ 
    {
      region?: string(name='Region', example='cn-beijing'),
      resourceAccountId?: long(name='ResourceAccountId', example='120886317861****'),
      resourceId?: string(name='ResourceId', example='lb-hp3a3b4ztyfm2plgm****'),
      resourceType?: string(name='ResourceType', example='ACS::SLB::LoadBalancer'),
    }
  ](name='Resources'),
}

model RevertAggregateEvaluationResultsShrinkRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5b6c626622af008f****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  resourcesShrink?: string(name='Resources'),
}

model RevertAggregateEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId', example='BB11CBF2-0B0B-59F2-9E84-07B38267AD12'),
}

model RevertAggregateEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevertAggregateEvaluationResultsResponseBody(name='body'),
}

async function revertAggregateEvaluationResultsWithOptions(tmpReq: RevertAggregateEvaluationResultsRequest, runtime: Util.RuntimeOptions): RevertAggregateEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new RevertAggregateEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevertAggregateEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revertAggregateEvaluationResults(request: RevertAggregateEvaluationResultsRequest): RevertAggregateEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return revertAggregateEvaluationResultsWithOptions(request, runtime);
}

model RevertEvaluationResultsRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  resources?: [ 
    {
      region?: string(name='Region', example='cn-beijing'),
      resourceAccountId?: long(name='ResourceAccountId', example='100931896542****'),
      resourceId?: string(name='ResourceId', example='lb-hp3a3b4ztyfm2plgm****'),
      resourceType?: string(name='ResourceType', example='ACS::SLB::LoadBalancer'),
    }
  ](name='Resources'),
}

model RevertEvaluationResultsShrinkRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-7e72626622af0051****'),
  resourcesShrink?: string(name='Resources'),
}

model RevertEvaluationResultsResponseBody = {
  requestId?: string(name='RequestId', example='01ACCBF2-0B0B-59F2-9E84-07B38267BCA1'),
}

model RevertEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevertEvaluationResultsResponseBody(name='body'),
}

async function revertEvaluationResultsWithOptions(tmpReq: RevertEvaluationResultsRequest, runtime: Util.RuntimeOptions): RevertEvaluationResultsResponse {
  Util.validateModel(tmpReq);
  var request = new RevertEvaluationResultsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resources)) {
    request.resourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resources, 'Resources', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.resourcesShrink)) {
    body['Resources'] = request.resourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevertEvaluationResults',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revertEvaluationResults(request: RevertEvaluationResultsRequest): RevertEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return revertEvaluationResultsWithOptions(request, runtime);
}

model StartAggregateConfigRuleEvaluationRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-3a58626622af0005****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-ac16626622af0053****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-c169626622af009f****'),
  revertEvaluation?: boolean(name='RevertEvaluation', example='false'),
}

model StartAggregateConfigRuleEvaluationResponseBody = {
  requestId?: string(name='RequestId', example='ABC0FFF8-0B44-40C6-8BBF-3A185EFDD212'),
  result?: boolean(name='Result', example='true'),
}

model StartAggregateConfigRuleEvaluationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartAggregateConfigRuleEvaluationResponseBody(name='body'),
}

async function startAggregateConfigRuleEvaluationWithOptions(request: StartAggregateConfigRuleEvaluationRequest, runtime: Util.RuntimeOptions): StartAggregateConfigRuleEvaluationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.revertEvaluation)) {
    query['RevertEvaluation'] = request.revertEvaluation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartAggregateConfigRuleEvaluation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startAggregateConfigRuleEvaluation(request: StartAggregateConfigRuleEvaluationRequest): StartAggregateConfigRuleEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAggregateConfigRuleEvaluationWithOptions(request, runtime);
}

model StartAggregateRemediationRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-6b4a626622af0012****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-6b7c626622af00b4****'),
}

model StartAggregateRemediationResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model StartAggregateRemediationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartAggregateRemediationResponseBody(name='body'),
}

async function startAggregateRemediationWithOptions(request: StartAggregateRemediationRequest, runtime: Util.RuntimeOptions): StartAggregateRemediationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartAggregateRemediation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startAggregateRemediation(request: StartAggregateRemediationRequest): StartAggregateRemediationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAggregateRemediationWithOptions(request, runtime);
}

model StartRemediationRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-8a973ac2e2be00a2****'),
}

model StartRemediationResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model StartRemediationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRemediationResponseBody(name='body'),
}

async function startRemediationWithOptions(request: StartRemediationRequest, runtime: Util.RuntimeOptions): StartRemediationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRemediation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRemediation(request: StartRemediationRequest): StartRemediationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRemediationWithOptions(request, runtime);
}

model StopConfigurationRecorderResponseBody = {
  requestId?: string(name='RequestId', example='AB2E892E-8A43-5B0F-8FE3-B53ADA53CB2D'),
  stopConfigurationRecorderResult?: boolean(name='StopConfigurationRecorderResult', example='true'),
}

model StopConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopConfigurationRecorderResponseBody(name='body'),
}

async function stopConfigurationRecorderWithOptions(runtime: Util.RuntimeOptions): StopConfigurationRecorderResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'StopConfigurationRecorder',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopConfigurationRecorder(): StopConfigurationRecorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopConfigurationRecorderWithOptions(runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ACS::Config::Rule'),
  tag?: [ 
    {
      key?: string(name='Key', example='Env'),
      value?: string(name='Value', example='prod'),
    }
  ](name='Tag'),
}

model TagResourcesShrinkRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ACS::Config::Rule'),
  tagShrink?: string(name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='AB2E4317-06A6-5745-B7C3-E001E551B380'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(tmpReq: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(tmpReq);
  var request = new TagResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tag)) {
    request.tagShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tag, 'Tag', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagShrink)) {
    body['Tag'] = request.tagShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ACS::Config::Rule'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='AB2E4317-06A6-5745-B7C3-E001E551B380'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.all)) {
    body['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    body['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAggregateCompliancePackRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
  compliancePackName?: string(name='CompliancePackName'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId', example='cr-e918626622af000f****'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName', example='bandwidth'),
          parameterValue?: string(name='ParameterValue', example='20'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='eip-bandwidth-limit'),
      riskLevel?: int32(name='RiskLevel', example='1'),
    }
  ](name='ConfigRules'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateAggregateCompliancePackShrinkRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-f632626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-fdc8626622af00f9****'),
  compliancePackName?: string(name='CompliancePackName'),
  configRulesShrink?: string(name='ConfigRules'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateAggregateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId', example='ca-f632626622af0079****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model UpdateAggregateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAggregateCompliancePackResponseBody(name='body'),
}

async function updateAggregateCompliancePackWithOptions(tmpReq: UpdateAggregateCompliancePackRequest, runtime: Util.RuntimeOptions): UpdateAggregateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAggregateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregateCompliancePack(request: UpdateAggregateCompliancePackRequest): UpdateAggregateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregateCompliancePackWithOptions(request, runtime);
}

model UpdateAggregateConfigDeliveryChannelRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='false'),
  configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
  description?: string(name='Description', example='My OSS delivery.'),
  nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
  oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  status?: long(name='Status', example='0'),
}

model UpdateAggregateConfigDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDERTHG'),
}

model UpdateAggregateConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAggregateConfigDeliveryChannelResponseBody(name='body'),
}

async function updateAggregateConfigDeliveryChannelWithOptions(request: UpdateAggregateConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): UpdateAggregateConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationItemChangeNotification)) {
    query['ConfigurationItemChangeNotification'] = request.configurationItemChangeNotification;
  }
  if (!Util.isUnset(request.configurationSnapshot)) {
    query['ConfigurationSnapshot'] = request.configurationSnapshot;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    query['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelId)) {
    query['DeliveryChannelId'] = request.deliveryChannelId;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    query['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    query['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.deliverySnapshotTime)) {
    query['DeliverySnapshotTime'] = request.deliverySnapshotTime;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nonCompliantNotification)) {
    query['NonCompliantNotification'] = request.nonCompliantNotification;
  }
  if (!Util.isUnset(request.oversizedDataOSSTargetArn)) {
    query['OversizedDataOSSTargetArn'] = request.oversizedDataOSSTargetArn;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregateConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregateConfigDeliveryChannel(request: UpdateAggregateConfigDeliveryChannelRequest): UpdateAggregateConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregateConfigDeliveryChannelWithOptions(request, runtime);
}

model UpdateAggregateConfigRuleRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-4e3d626622af0080****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeAccountIdsScope?: string(name='ExcludeAccountIdsScope', example='120886317861****'),
  excludeFolderIdsScope?: string(name='ExcludeFolderIdsScope', example='fd-pWmkqZ****'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  folderIdsScope?: string(name='FolderIdsScope', example='fd-ZtHsRH****'),
  inputParameters?: map[string]any(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='3'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model UpdateAggregateConfigRuleShrinkRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-a4e5626622af0079****'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-4e3d626622af0080****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeAccountIdsScope?: string(name='ExcludeAccountIdsScope', example='120886317861****'),
  excludeFolderIdsScope?: string(name='ExcludeFolderIdsScope', example='fd-pWmkqZ****'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  folderIdsScope?: string(name='FolderIdsScope', example='fd-ZtHsRH****'),
  inputParametersShrink?: string(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='3'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model UpdateAggregateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId', example='cr-4e3d626622af0080****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model UpdateAggregateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAggregateConfigRuleResponseBody(name='body'),
}

async function updateAggregateConfigRuleWithOptions(tmpReq: UpdateAggregateConfigRuleRequest, runtime: Util.RuntimeOptions): UpdateAggregateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAggregateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeAccountIdsScope)) {
    body['ExcludeAccountIdsScope'] = request.excludeAccountIdsScope;
  }
  if (!Util.isUnset(request.excludeFolderIdsScope)) {
    body['ExcludeFolderIdsScope'] = request.excludeFolderIdsScope;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.folderIdsScope)) {
    body['FolderIdsScope'] = request.folderIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyLogicScope)) {
    body['TagKeyLogicScope'] = request.tagKeyLogicScope;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregateConfigRule(request: UpdateAggregateConfigRuleRequest): UpdateAggregateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregateConfigRuleWithOptions(request, runtime);
}

model UpdateAggregateRemediationRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-6b4a626622af0012****'),
  invokeType?: string(name='InvokeType', example='AUTO_EXECUTION'),
  params?: string(name='Params'),
  remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
  remediationTemplateId?: string(name='RemediationTemplateId', example='ACS-OSS-PutBucketAcl'),
  remediationType?: string(name='RemediationType', example='OOS'),
  sourceType?: string(name='SourceType', example='ALIYUN'),
}

model UpdateAggregateRemediationResponseBody = {
  remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model UpdateAggregateRemediationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAggregateRemediationResponseBody(name='body'),
}

async function updateAggregateRemediationWithOptions(request: UpdateAggregateRemediationRequest, runtime: Util.RuntimeOptions): UpdateAggregateRemediationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.invokeType)) {
    body['InvokeType'] = request.invokeType;
  }
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.remediationId)) {
    body['RemediationId'] = request.remediationId;
  }
  if (!Util.isUnset(request.remediationTemplateId)) {
    body['RemediationTemplateId'] = request.remediationTemplateId;
  }
  if (!Util.isUnset(request.remediationType)) {
    body['RemediationType'] = request.remediationType;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregateRemediation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregateRemediation(request: UpdateAggregateRemediationRequest): UpdateAggregateRemediationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregateRemediationWithOptions(request, runtime);
}

model UpdateAggregatorRequest {
  aggregatorAccounts?: [ 
    {
      accountId?: long(name='AccountId', example='173808452267****'),
      accountName?: string(name='AccountName', example='Tony'),
      accountType?: string(name='AccountType', example='ResourceDirectory'),
    }
  ](name='AggregatorAccounts'),
  aggregatorId?: string(name='AggregatorId', example='ca-dacf86d8314e00eb****'),
  aggregatorName?: string(name='AggregatorName', example='Test_Group'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  description?: string(name='Description'),
}

model UpdateAggregatorShrinkRequest {
  aggregatorAccountsShrink?: string(name='AggregatorAccounts'),
  aggregatorId?: string(name='AggregatorId', example='ca-dacf86d8314e00eb****'),
  aggregatorName?: string(name='AggregatorName', example='Test_Group'),
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  description?: string(name='Description'),
}

model UpdateAggregatorResponseBody = {
  aggregatorId?: string(name='AggregatorId', example='ca-dacf86d8314e00eb****'),
  requestId?: string(name='RequestId', example='8195B664-9565-4685-89AC-8B5F04B44B92'),
}

model UpdateAggregatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAggregatorResponseBody(name='body'),
}

async function updateAggregatorWithOptions(tmpReq: UpdateAggregatorRequest, runtime: Util.RuntimeOptions): UpdateAggregatorResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAggregatorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aggregatorAccounts)) {
    request.aggregatorAccountsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregatorAccounts, 'AggregatorAccounts', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aggregatorAccountsShrink)) {
    body['AggregatorAccounts'] = request.aggregatorAccountsShrink;
  }
  if (!Util.isUnset(request.aggregatorId)) {
    body['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.aggregatorName)) {
    body['AggregatorName'] = request.aggregatorName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAggregator',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAggregator(request: UpdateAggregatorRequest): UpdateAggregatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAggregatorWithOptions(request, runtime);
}

model UpdateCompliancePackRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
  compliancePackName?: string(name='CompliancePackName'),
  configRules?: [ 
    {
      configRuleId?: string(name='ConfigRuleId', example='cr-e918626622af000f****'),
      configRuleName?: string(name='ConfigRuleName'),
      configRuleParameters?: [ 
        {
          parameterName?: string(name='ParameterName', example='bandwidth'),
          parameterValue?: string(name='ParameterValue', example='20'),
        }
      ](name='ConfigRuleParameters'),
      description?: string(name='Description'),
      managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='eip-bandwidth-limit'),
      riskLevel?: int32(name='RiskLevel', example='1'),
    }
  ](name='ConfigRules'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateCompliancePackShrinkRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
  compliancePackName?: string(name='CompliancePackName'),
  configRulesShrink?: string(name='ConfigRules'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope'),
  regionIdsScope?: string(name='RegionIdsScope'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  tagKeyScope?: string(name='TagKeyScope'),
  tagValueScope?: string(name='TagValueScope'),
}

model UpdateCompliancePackResponseBody = {
  compliancePackId?: string(name='CompliancePackId', example='cp-a8a8626622af0082****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model UpdateCompliancePackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCompliancePackResponseBody(name='body'),
}

async function updateCompliancePackWithOptions(tmpReq: UpdateCompliancePackRequest, runtime: Util.RuntimeOptions): UpdateCompliancePackResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateCompliancePackShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configRules)) {
    request.configRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRules, 'ConfigRules', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compliancePackId)) {
    body['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.compliancePackName)) {
    body['CompliancePackName'] = request.compliancePackName;
  }
  if (!Util.isUnset(request.configRulesShrink)) {
    body['ConfigRules'] = request.configRulesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCompliancePack',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCompliancePack(request: UpdateCompliancePackRequest): UpdateCompliancePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCompliancePackWithOptions(request, runtime);
}

model UpdateConfigDeliveryChannelRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='false'),
  configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  deliverySnapshotTime?: string(name='DeliverySnapshotTime', example='09:10Z'),
  description?: string(name='Description', example='My OSS delivery.'),
  nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
  oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  status?: long(name='Status', example='0'),
}

model UpdateConfigDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDERTHG'),
}

model UpdateConfigDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConfigDeliveryChannelResponseBody(name='body'),
}

async function updateConfigDeliveryChannelWithOptions(request: UpdateConfigDeliveryChannelRequest, runtime: Util.RuntimeOptions): UpdateConfigDeliveryChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationItemChangeNotification)) {
    query['ConfigurationItemChangeNotification'] = request.configurationItemChangeNotification;
  }
  if (!Util.isUnset(request.configurationSnapshot)) {
    query['ConfigurationSnapshot'] = request.configurationSnapshot;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    query['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelId)) {
    query['DeliveryChannelId'] = request.deliveryChannelId;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    query['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    query['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.deliverySnapshotTime)) {
    query['DeliverySnapshotTime'] = request.deliverySnapshotTime;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nonCompliantNotification)) {
    query['NonCompliantNotification'] = request.nonCompliantNotification;
  }
  if (!Util.isUnset(request.oversizedDataOSSTargetArn)) {
    query['OversizedDataOSSTargetArn'] = request.oversizedDataOSSTargetArn;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfigDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConfigDeliveryChannel(request: UpdateConfigDeliveryChannelRequest): UpdateConfigDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigDeliveryChannelWithOptions(request, runtime);
}

model UpdateConfigRuleRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-a260626622af0005****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  inputParameters?: map[string]any(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScope?: [ string ](name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='3'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model UpdateConfigRuleShrinkRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-a260626622af0005****'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleTriggerTypes?: string(name='ConfigRuleTriggerTypes', example='ConfigurationItemChangeNotification'),
  description?: string(name='Description'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', example='lb-t4nbowvtbkss7t326****'),
  inputParametersShrink?: string(name='InputParameters', example='{"tag1Key":"ECS","tag1Value":"test"}'),
  maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='One_Hour'),
  regionIdsScope?: string(name='RegionIdsScope', example='cn-hangzhou'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', example='rg-aekzc7r7rhx****'),
  resourceTypesScopeShrink?: string(name='ResourceTypesScope', example='ACS::ECS::Instance'),
  riskLevel?: int32(name='RiskLevel', example='3'),
  tagKeyLogicScope?: string(name='TagKeyLogicScope', example='AND'),
  tagKeyScope?: string(name='TagKeyScope', example='ECS'),
  tagValueScope?: string(name='TagValueScope', example='test'),
}

model UpdateConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId', example='cr-a260626622af0005****'),
  requestId?: string(name='RequestId', example='6EC7AED1-172F-42AE-9C12-295BC2ADB751'),
}

model UpdateConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConfigRuleResponseBody(name='body'),
}

async function updateConfigRuleWithOptions(tmpReq: UpdateConfigRuleRequest, runtime: Util.RuntimeOptions): UpdateConfigRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateConfigRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputParameters)) {
    request.inputParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputParameters, 'InputParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceTypesScope)) {
    request.resourceTypesScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypesScope, 'ResourceTypesScope', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleTriggerTypes)) {
    body['ConfigRuleTriggerTypes'] = request.configRuleTriggerTypes;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.excludeResourceIdsScope)) {
    body['ExcludeResourceIdsScope'] = request.excludeResourceIdsScope;
  }
  if (!Util.isUnset(request.inputParametersShrink)) {
    body['InputParameters'] = request.inputParametersShrink;
  }
  if (!Util.isUnset(request.maximumExecutionFrequency)) {
    body['MaximumExecutionFrequency'] = request.maximumExecutionFrequency;
  }
  if (!Util.isUnset(request.regionIdsScope)) {
    body['RegionIdsScope'] = request.regionIdsScope;
  }
  if (!Util.isUnset(request.resourceGroupIdsScope)) {
    body['ResourceGroupIdsScope'] = request.resourceGroupIdsScope;
  }
  if (!Util.isUnset(request.resourceTypesScopeShrink)) {
    body['ResourceTypesScope'] = request.resourceTypesScopeShrink;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.tagKeyLogicScope)) {
    body['TagKeyLogicScope'] = request.tagKeyLogicScope;
  }
  if (!Util.isUnset(request.tagKeyScope)) {
    body['TagKeyScope'] = request.tagKeyScope;
  }
  if (!Util.isUnset(request.tagValueScope)) {
    body['TagValueScope'] = request.tagValueScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfigRule',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConfigRule(request: UpdateConfigRuleRequest): UpdateConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigRuleWithOptions(request, runtime);
}

model UpdateDeliveryChannelRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='false'),
  configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
  deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::100931896542****:role/aliyunserviceroleforconfig'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  description?: string(name='Description', example='My OSS delivery.'),
  nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
  oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
  status?: long(name='Status', example='0'),
}

model UpdateDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-8e45ff4e06a3a8****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDERTHG'),
}

model UpdateDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeliveryChannelResponseBody(name='body'),
}

async function updateDeliveryChannelWithOptions(request: UpdateDeliveryChannelRequest, runtime: Util.RuntimeOptions): UpdateDeliveryChannelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationItemChangeNotification)) {
    body['ConfigurationItemChangeNotification'] = request.configurationItemChangeNotification;
  }
  if (!Util.isUnset(request.configurationSnapshot)) {
    body['ConfigurationSnapshot'] = request.configurationSnapshot;
  }
  if (!Util.isUnset(request.deliveryChannelAssumeRoleArn)) {
    body['DeliveryChannelAssumeRoleArn'] = request.deliveryChannelAssumeRoleArn;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    body['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelId)) {
    body['DeliveryChannelId'] = request.deliveryChannelId;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    body['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    body['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.nonCompliantNotification)) {
    body['NonCompliantNotification'] = request.nonCompliantNotification;
  }
  if (!Util.isUnset(request.oversizedDataOSSTargetArn)) {
    body['OversizedDataOSSTargetArn'] = request.oversizedDataOSSTargetArn;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDeliveryChannel',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDeliveryChannel(request: UpdateDeliveryChannelRequest): UpdateDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeliveryChannelWithOptions(request, runtime);
}

model UpdateIntegratedServiceStatusRequest {
  serviceCode?: string(name='ServiceCode', example='cadt'),
  status?: boolean(name='Status', example='true'),
}

model UpdateIntegratedServiceStatusResponseBody = {
  requestId?: string(name='RequestId', example='02EB7638-B029-5ABB-93F5-A2ABEEAC282D'),
}

model UpdateIntegratedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIntegratedServiceStatusResponseBody(name='body'),
}

async function updateIntegratedServiceStatusWithOptions(request: UpdateIntegratedServiceStatusRequest, runtime: Util.RuntimeOptions): UpdateIntegratedServiceStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIntegratedServiceStatus',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIntegratedServiceStatus(request: UpdateIntegratedServiceStatusRequest): UpdateIntegratedServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIntegratedServiceStatusWithOptions(request, runtime);
}

model UpdateRemediationRequest {
  clientToken?: string(name='ClientToken', example='2014295338-e7361358-5822-4276-8d30-b5183fac****'),
  invokeType?: string(name='InvokeType', example='AUTO_EXECUTION'),
  params?: string(name='Params'),
  remediationId?: string(name='RemediationId', example='crr-909ba2d4716700eb****'),
  remediationTemplateId?: string(name='RemediationTemplateId', example='ACS-OSS-PutBucketAcl'),
  remediationType?: string(name='RemediationType', example='OOS'),
  sourceType?: string(name='SourceType', example='ALIYUN'),
}

model UpdateRemediationResponseBody = {
  remediationId?: string(name='RemediationId', example='crr-7c2ba2d0236700a3****'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model UpdateRemediationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRemediationResponseBody(name='body'),
}

async function updateRemediationWithOptions(request: UpdateRemediationRequest, runtime: Util.RuntimeOptions): UpdateRemediationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.invokeType)) {
    body['InvokeType'] = request.invokeType;
  }
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.remediationId)) {
    body['RemediationId'] = request.remediationId;
  }
  if (!Util.isUnset(request.remediationTemplateId)) {
    body['RemediationTemplateId'] = request.remediationTemplateId;
  }
  if (!Util.isUnset(request.remediationType)) {
    body['RemediationType'] = request.remediationType;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRemediation',
    version = '2020-09-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRemediation(request: UpdateRemediationRequest): UpdateRemediationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRemediationWithOptions(request, runtime);
}

