/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('virtual-human', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model TextToVideoRequest {
  taskId?: string(name='TaskId'),
  speechText?: string(name='SpeechText'),
  id?: string(name='Id'),
  commandType?: string(name='CommandType'),
  seneType?: string(name='SeneType'),
  beginText?: string(name='BeginText'),
  beginAction?: string(name='BeginAction'),
  endText?: string(name='EndText'),
  endAction?: string(name='EndAction'),
  virtualHumanCode?: string(name='VirtualHumanCode'),
  extendParams?: string(name='ExtendParams'),
}

model TextToVideoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message1?: string(name='Message1'),
  data?: string(name='Data'),
}

model TextToVideoResponse = {
  headers: map[string]string(name='headers'),
  body: TextToVideoResponseBody(name='body'),
}

async function textToVideoWithOptions(request: TextToVideoRequest, runtime: Util.RuntimeOptions): TextToVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TextToVideo', '2021-08-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function textToVideo(request: TextToVideoRequest): TextToVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return textToVideoWithOptions(request, runtime);
}

model StartRequest {
  roomId?: string(name='RoomId'),
  token?: string(name='Token'),
  videoType?: string(name='VideoType'),
  pushStreamUrl?: string(name='PushStreamUrl'),
  extendParams?: map[string]string(name='ExtendParams'),
  virtualHumanCode?: string(name='VirtualHumanCode'),
}

model StartShrinkRequest {
  roomId?: string(name='RoomId'),
  token?: string(name='Token'),
  videoType?: string(name='VideoType'),
  pushStreamUrl?: string(name='PushStreamUrl'),
  extendParamsShrink?: string(name='ExtendParams'),
  virtualHumanCode?: string(name='VirtualHumanCode'),
}

model StartResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model StartResponse = {
  headers: map[string]string(name='headers'),
  body: StartResponseBody(name='body'),
}

async function startWithOptions(tmpReq: StartRequest, runtime: Util.RuntimeOptions): StartResponse {
  Util.validateModel(tmpReq);
  var request = new StartShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extendParams)) {
    request.extendParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extendParams, 'ExtendParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Start', '2021-08-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function start(request: StartRequest): StartResponse {
  var runtime = new Util.RuntimeOptions{};
  return startWithOptions(request, runtime);
}

model FinishRequest {
  taskId?: string(name='TaskId'),
  virtualHumanCode?: string(name='VirtualHumanCode'),
}

model FinishResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model FinishResponse = {
  headers: map[string]string(name='headers'),
  body: FinishResponseBody(name='body'),
}

async function finishWithOptions(request: FinishRequest, runtime: Util.RuntimeOptions): FinishResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Finish', '2021-08-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function finish(request: FinishRequest): FinishResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishWithOptions(request, runtime);
}

