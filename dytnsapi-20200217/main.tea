/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dytnsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CompanyFourElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  epCertName?: string(name='EpCertName', example='示例值示例值'),
  epCertNo?: string(name='EpCertNo', example='9242032*******J627'),
  legalPersonCertName?: string(name='LegalPersonCertName', example='示例值'),
  legalPersonCertNo?: string(name='LegalPersonCertNo', example='331021********0011'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CompanyFourElementsVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    detailInfo?: {
      enterpriseStatus?: string(name='EnterpriseStatus', example='在营（开业）'),
      openTime?: string(name='OpenTime', example='2023-05-25/2053-05-24'),
    }(name='DetailInfo'),
    inconsistentData?: [ string ](name='InconsistentData'),
    reasonCode?: long(name='ReasonCode', example='0'),
    verifyResult?: string(name='VerifyResult', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model CompanyFourElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompanyFourElementsVerificationResponseBody(name='body'),
}

async function companyFourElementsVerificationWithOptions(request: CompanyFourElementsVerificationRequest, runtime: Util.RuntimeOptions): CompanyFourElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.epCertName)) {
    query['EpCertName'] = request.epCertName;
  }
  if (!Util.isUnset(request.epCertNo)) {
    query['EpCertNo'] = request.epCertNo;
  }
  if (!Util.isUnset(request.legalPersonCertName)) {
    query['LegalPersonCertName'] = request.legalPersonCertName;
  }
  if (!Util.isUnset(request.legalPersonCertNo)) {
    query['LegalPersonCertNo'] = request.legalPersonCertNo;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompanyFourElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function companyFourElementsVerification(request: CompanyFourElementsVerificationRequest): CompanyFourElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return companyFourElementsVerificationWithOptions(request, runtime);
}

model CompanyThreeElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  epCertName?: string(name='EpCertName', example='示例值'),
  epCertNo?: string(name='EpCertNo', example='9242032*******J627'),
  legalPersonCertName?: string(name='LegalPersonCertName', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CompanyThreeElementsVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    detailInfo?: {
      enterpriseStatus?: string(name='EnterpriseStatus', example='示例值'),
      openTime?: string(name='OpenTime', example='示例值示例值示例值'),
    }(name='DetailInfo'),
    inconsistentData?: [ string ](name='InconsistentData'),
    reasonCode?: long(name='ReasonCode', example='0'),
    verifyResult?: string(name='VerifyResult', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model CompanyThreeElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompanyThreeElementsVerificationResponseBody(name='body'),
}

async function companyThreeElementsVerificationWithOptions(request: CompanyThreeElementsVerificationRequest, runtime: Util.RuntimeOptions): CompanyThreeElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.epCertName)) {
    query['EpCertName'] = request.epCertName;
  }
  if (!Util.isUnset(request.epCertNo)) {
    query['EpCertNo'] = request.epCertNo;
  }
  if (!Util.isUnset(request.legalPersonCertName)) {
    query['LegalPersonCertName'] = request.legalPersonCertName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompanyThreeElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function companyThreeElementsVerification(request: CompanyThreeElementsVerificationRequest): CompanyThreeElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return companyThreeElementsVerificationWithOptions(request, runtime);
}

model CompanyTwoElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  epCertName?: string(name='EpCertName', example='示例值示例值'),
  epCertNo?: string(name='EpCertNo', example='9242032*******J627'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CompanyTwoElementsVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    detailInfo?: {
      enterpriseStatus?: string(name='EnterpriseStatus', example='在营（开业）'),
      openTime?: string(name='OpenTime', example='2023-05-25/2053-05-24'),
    }(name='DetailInfo'),
    inconsistentData?: [ string ](name='InconsistentData'),
    reasonCode?: string(name='ReasonCode', example='0'),
    verifyResult?: string(name='VerifyResult', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model CompanyTwoElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompanyTwoElementsVerificationResponseBody(name='body'),
}

async function companyTwoElementsVerificationWithOptions(request: CompanyTwoElementsVerificationRequest, runtime: Util.RuntimeOptions): CompanyTwoElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.epCertName)) {
    query['EpCertName'] = request.epCertName;
  }
  if (!Util.isUnset(request.epCertNo)) {
    query['EpCertNo'] = request.epCertNo;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompanyTwoElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function companyTwoElementsVerification(request: CompanyTwoElementsVerificationRequest): CompanyTwoElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return companyTwoElementsVerificationWithOptions(request, runtime);
}

model DescribeEmptyNumberRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='189****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeEmptyNumberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    number?: string(name='Number', example='189****1234'),
    status?: string(name='Status', example='EMPTY'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribeEmptyNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmptyNumberResponseBody(name='body'),
}

async function describeEmptyNumberWithOptions(request: DescribeEmptyNumberRequest, runtime: Util.RuntimeOptions): DescribeEmptyNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEmptyNumber',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmptyNumber(request: DescribeEmptyNumberRequest): DescribeEmptyNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmptyNumberWithOptions(request, runtime);
}

model DescribePhoneNumberAnalysisRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1310000****'),
  mask?: string(name='Mask', example='MD5'),
  numberType?: long(name='NumberType', example='0'),
  ownerId?: long(name='OwnerId'),
  rate?: long(name='Rate', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberAnalysisResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        code?: string(name='Code', example='NO'),
        number?: string(name='Number', example='18752785620'),
      }
    ](name='List'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberAnalysisResponseBody(name='body'),
}

async function describePhoneNumberAnalysisWithOptions(request: DescribePhoneNumberAnalysisRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.numberType)) {
    query['NumberType'] = request.numberType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.rate)) {
    query['Rate'] = request.rate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberAnalysis',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberAnalysis(request: DescribePhoneNumberAnalysisRequest): DescribePhoneNumberAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberAnalysisWithOptions(request, runtime);
}

model DescribePhoneNumberAnalysisAIRequest {
  authCode?: string(name='AuthCode', example='HwD***nG'),
  inputNumber?: string(name='InputNumber', example='示例值示例值'),
  modelConfig?: string(name='ModelConfig', example='{"trainingJobId": "17**********48"}'),
  ownerId?: long(name='OwnerId'),
  rate?: long(name='Rate', example='96'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberAnalysisAIResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    code?: string(name='Code', example='YES'),
    number?: string(name='Number', example='187****5620'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD******177'),
}

model DescribePhoneNumberAnalysisAIResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberAnalysisAIResponseBody(name='body'),
}

async function describePhoneNumberAnalysisAIWithOptions(request: DescribePhoneNumberAnalysisAIRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberAnalysisAIResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.modelConfig)) {
    query['ModelConfig'] = request.modelConfig;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.rate)) {
    query['Rate'] = request.rate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberAnalysisAI',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberAnalysisAI(request: DescribePhoneNumberAnalysisAIRequest): DescribePhoneNumberAnalysisAIResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberAnalysisAIWithOptions(request, runtime);
}

model DescribePhoneNumberAttributeRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', example='1390000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberAttributeResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  phoneNumberAttribute?: {
    basicCarrier?: string(name='BasicCarrier'),
    carrier?: string(name='Carrier'),
    city?: string(name='City'),
    isNumberPortability?: boolean(name='IsNumberPortability', example='false'),
    numberSegment?: long(name='NumberSegment'),
    province?: string(name='Province'),
  }(name='PhoneNumberAttribute'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberAttributeResponseBody(name='body'),
}

async function describePhoneNumberAttributeWithOptions(request: DescribePhoneNumberAttributeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberAttribute',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberAttribute(request: DescribePhoneNumberAttributeRequest): DescribePhoneNumberAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberAttributeWithOptions(request, runtime);
}

model DescribePhoneNumberOnlineTimeRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  carrier?: string(name='Carrier', example='UNICOM'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberOnlineTimeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrierCode?: string(name='CarrierCode', example='CMCC'),
    verifyResult?: string(name='VerifyResult', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberOnlineTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberOnlineTimeResponseBody(name='body'),
}

async function describePhoneNumberOnlineTimeWithOptions(request: DescribePhoneNumberOnlineTimeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberOnlineTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.carrier)) {
    query['Carrier'] = request.carrier;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberOnlineTime',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberOnlineTime(request: DescribePhoneNumberOnlineTimeRequest): DescribePhoneNumberOnlineTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberOnlineTimeWithOptions(request, runtime);
}

model DescribePhoneNumberOperatorAttributeRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='MD5'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberOperatorAttributeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier'),
    carrier?: string(name='Carrier'),
    city?: string(name='City'),
    isNumberPortability?: boolean(name='IsNumberPortability', example='false'),
    numberSegment?: long(name='NumberSegment'),
    province?: string(name='Province'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model DescribePhoneNumberOperatorAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberOperatorAttributeResponseBody(name='body'),
}

async function describePhoneNumberOperatorAttributeWithOptions(request: DescribePhoneNumberOperatorAttributeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberOperatorAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberOperatorAttribute',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberOperatorAttribute(request: DescribePhoneNumberOperatorAttributeRequest): DescribePhoneNumberOperatorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberOperatorAttributeWithOptions(request, runtime);
}

model DescribePhoneTwiceTelVerifyRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='139*******'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', example='2018-01-01 00:00:00'),
}

model DescribePhoneTwiceTelVerifyResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    verifyResult?: string(name='VerifyResult', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model DescribePhoneTwiceTelVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneTwiceTelVerifyResponseBody(name='body'),
}

async function describePhoneTwiceTelVerifyWithOptions(request: DescribePhoneTwiceTelVerifyRequest, runtime: Util.RuntimeOptions): DescribePhoneTwiceTelVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneTwiceTelVerify',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneTwiceTelVerify(request: DescribePhoneTwiceTelVerifyRequest): DescribePhoneTwiceTelVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneTwiceTelVerifyWithOptions(request, runtime);
}

model InvalidPhoneNumberFilterRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model InvalidPhoneNumberFilterResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      code?: string(name='Code', example='YES'),
      encryptedNumber?: string(name='EncryptedNumber', example='1400513****'),
      expireTime?: string(name='ExpireTime', example='2022-05-27 16:05:23'),
      originalNumber?: string(name='OriginalNumber', example='1390000****'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model InvalidPhoneNumberFilterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvalidPhoneNumberFilterResponseBody(name='body'),
}

async function invalidPhoneNumberFilterWithOptions(request: InvalidPhoneNumberFilterRequest, runtime: Util.RuntimeOptions): InvalidPhoneNumberFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvalidPhoneNumberFilter',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invalidPhoneNumberFilter(request: InvalidPhoneNumberFilterRequest): InvalidPhoneNumberFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return invalidPhoneNumberFilterWithOptions(request, runtime);
}

model PhoneNumberConvertServiceRequest {
  authCode?: string(name='AuthCode'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberConvertServiceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      converResult?: boolean(name='ConverResult'),
      number?: string(name='Number'),
      numberMd5?: string(name='NumberMd5'),
      numberSha256?: string(name='NumberSha256'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model PhoneNumberConvertServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberConvertServiceResponseBody(name='body'),
}

async function phoneNumberConvertServiceWithOptions(request: PhoneNumberConvertServiceRequest, runtime: Util.RuntimeOptions): PhoneNumberConvertServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberConvertService',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberConvertService(request: PhoneNumberConvertServiceRequest): PhoneNumberConvertServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberConvertServiceWithOptions(request, runtime);
}

model PhoneNumberEncryptRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberEncryptResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      encryptedNumber?: string(name='EncryptedNumber', example='1400513****'),
      expireTime?: string(name='ExpireTime', example='2022-05-27 16:05:23'),
      originalNumber?: string(name='OriginalNumber', example='1390000****'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberEncryptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberEncryptResponseBody(name='body'),
}

async function phoneNumberEncryptWithOptions(request: PhoneNumberEncryptRequest, runtime: Util.RuntimeOptions): PhoneNumberEncryptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberEncrypt',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberEncrypt(request: PhoneNumberEncryptRequest): PhoneNumberEncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberEncryptWithOptions(request, runtime);
}

model PhoneNumberStatusForAccountRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForAccountResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForAccountResponseBody(name='body'),
}

async function phoneNumberStatusForAccountWithOptions(request: PhoneNumberStatusForAccountRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForAccount',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForAccount(request: PhoneNumberStatusForAccountRequest): PhoneNumberStatusForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForAccountWithOptions(request, runtime);
}

model PhoneNumberStatusForPublicRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForPublicResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-****-****-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForPublicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForPublicResponseBody(name='body'),
}

async function phoneNumberStatusForPublicWithOptions(request: PhoneNumberStatusForPublicRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForPublicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForPublic',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForPublic(request: PhoneNumberStatusForPublicRequest): PhoneNumberStatusForPublicResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForPublicWithOptions(request, runtime);
}

model PhoneNumberStatusForRealRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='189****8999'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForRealResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForRealResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForRealResponseBody(name='body'),
}

async function phoneNumberStatusForRealWithOptions(request: PhoneNumberStatusForRealRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForRealResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForReal',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForReal(request: PhoneNumberStatusForRealRequest): PhoneNumberStatusForRealResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForRealWithOptions(request, runtime);
}

model PhoneNumberStatusForSmsRequest {
  authCode?: string(name='AuthCode', example='zf08***pi6'),
  inputNumber?: string(name='InputNumber', example='181****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForSmsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model PhoneNumberStatusForSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForSmsResponseBody(name='body'),
}

async function phoneNumberStatusForSmsWithOptions(request: PhoneNumberStatusForSmsRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForSms',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForSms(request: PhoneNumberStatusForSmsRequest): PhoneNumberStatusForSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForSmsWithOptions(request, runtime);
}

model PhoneNumberStatusForVirtualRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForVirtualResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    isPrivacyNumber?: boolean(name='IsPrivacyNumber', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForVirtualResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForVirtualResponseBody(name='body'),
}

async function phoneNumberStatusForVirtualWithOptions(request: PhoneNumberStatusForVirtualRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForVirtualResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForVirtual',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForVirtual(request: PhoneNumberStatusForVirtualRequest): PhoneNumberStatusForVirtualResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForVirtualWithOptions(request, runtime);
}

model PhoneNumberStatusForVoiceRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForVoiceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CTCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForVoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForVoiceResponseBody(name='body'),
}

async function phoneNumberStatusForVoiceWithOptions(request: PhoneNumberStatusForVoiceRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForVoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForVoice',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForVoice(request: PhoneNumberStatusForVoiceRequest): PhoneNumberStatusForVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForVoiceWithOptions(request, runtime);
}

model QueryAvailableAuthCodeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagId?: long(name='TagId', description='标签id', example='22'),
}

model QueryAvailableAuthCodeResponseBody = {
  code?: string(name='Code', example='示例值示例值'),
  data?: [ string ](name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='false'),
}

model QueryAvailableAuthCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAvailableAuthCodeResponseBody(name='body'),
}

async function queryAvailableAuthCodeWithOptions(request: QueryAvailableAuthCodeRequest, runtime: Util.RuntimeOptions): QueryAvailableAuthCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAvailableAuthCode',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAvailableAuthCode(request: QueryAvailableAuthCodeRequest): QueryAvailableAuthCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAvailableAuthCodeWithOptions(request, runtime);
}

model QueryTagApplyRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagId?: long(name='TagId', description='标签id', example='61'),
}

model QueryTagApplyRuleResponseBody = {
  code?: string(name='Code', example='示例值示例值'),
  data?: {
    applyMaterialDesc?: string(name='ApplyMaterialDesc', description='申请材料要求', example='示例值示例值'),
    autoAudit?: long(name='AutoAudit', description='是否自动审批', example='16'),
    chargingStandardLink?: string(name='ChargingStandardLink', description='计费标准说明链接', example='示例值示例值示例值'),
    encryptedQuery?: long(name='EncryptedQuery', description='是否支持加密查询', example='99'),
    needApplyMaterial?: long(name='NeedApplyMaterial', description='是否需要提供申请材料', example='46'),
    slaLink?: string(name='SlaLink', description='服务协议链接', example='示例值示例值示例值'),
  }(name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='示例值'),
  success?: boolean(name='Success', example='false'),
}

model QueryTagApplyRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTagApplyRuleResponseBody(name='body'),
}

async function queryTagApplyRuleWithOptions(request: QueryTagApplyRuleRequest, runtime: Util.RuntimeOptions): QueryTagApplyRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTagApplyRule',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTagApplyRule(request: QueryTagApplyRuleRequest): QueryTagApplyRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagApplyRuleWithOptions(request, runtime);
}

model QueryTagInfoBySelectionRequest {
  industryId?: long(name='IndustryId', description='行业id', example='58'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneId?: long(name='SceneId', description='场景id', example='83'),
  tagId?: long(name='TagId', description='标签id', example='71'),
}

model QueryTagInfoBySelectionResponseBody = {
  code?: string(name='Code', example='示例值示例值'),
  data?: [ 
    {
      authCodeList?: [ string ](name='AuthCodeList', description='可用的授权码列表'),
      demoAddress?: string(name='DemoAddress', description='API demo链接', example='示例值'),
      docAddress?: string(name='DocAddress', description='API文档链接', example='示例值示例值'),
      enumDefinitionAddress?: string(name='EnumDefinitionAddress', description='枚举值定义链接', example='示例值示例值'),
      flowName?: string(name='FlowName', description='流程名称', example='示例值示例值'),
      industryId?: long(name='IndustryId', description='行业id', example='83'),
      industryName?: string(name='IndustryName', description='行业名称', example='示例值示例值'),
      paramList?: [ 
        {
          code?: string(name='Code', description='参数英文名', example='示例值'),
          hint?: string(name='Hint', description='输入提示', example='示例值示例值'),
          must?: boolean(name='Must', description='是否必填', example='false'),
          name?: string(name='Name', description='参数中文名', example='示例值'),
          type?: string(name='Type', description='类型EnumUIWidgetTypes对应的code', example='示例值示例值'),
          valueDict?: [ 
            {
              code?: string(name='Code', description='英文名', example='示例值示例值'),
              desc?: string(name='Desc', description='中文名', example='示例值示例值'),
            }
          ](name='ValueDict', description='枚举值定义，code:desc'),
        }
      ](name='ParamList', description='标签参数列表'),
      sceneId?: long(name='SceneId', description='场景id', example='41'),
      sceneName?: string(name='SceneName', description='场景名称', example='示例值示例值示例值'),
      tagId?: long(name='TagId', description='标签id', example='31'),
      tagName?: string(name='TagName', description='标签名称', example='示例值'),
    }
  ](name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='示例值'),
  success?: boolean(name='Success', example='false'),
}

model QueryTagInfoBySelectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTagInfoBySelectionResponseBody(name='body'),
}

async function queryTagInfoBySelectionWithOptions(request: QueryTagInfoBySelectionRequest, runtime: Util.RuntimeOptions): QueryTagInfoBySelectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.industryId)) {
    query['IndustryId'] = request.industryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTagInfoBySelection',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTagInfoBySelection(request: QueryTagInfoBySelectionRequest): QueryTagInfoBySelectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagInfoBySelectionWithOptions(request, runtime);
}

model QueryTagListPageRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', example='18'),
  pageSize?: long(name='PageSize', example='66'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryTagListPageResponseBody = {
  code?: string(name='Code', example='示例值示例值'),
  data?: {
    pageNo?: long(name='PageNo', example='11'),
    pageSize?: long(name='PageSize', example='24'),
    records?: [ 
      {
        apiName?: string(name='ApiName', description='前端调用的api名称', example='示例值示例值'),
        code?: string(name='Code', description='code', example='示例值示例值示例值'),
        docAddress?: string(name='DocAddress', description='API文档链接', example='示例值示例值示例值'),
        id?: long(name='Id', description='标签 id', example='75'),
        industryId?: long(name='IndustryId', description='行业id', example='2'),
        industryName?: string(name='IndustryName', description='行业名称', example='示例值示例值示例值'),
        introduction?: string(name='Introduction', description='标签介绍', example='示例值示例值示例值'),
        isOpen?: long(name='IsOpen', description='是否已经申请开通', example='45'),
        name?: string(name='Name', description='标签名称', example='示例值'),
        saleStatusStr?: string(name='SaleStatusStr', description='0 隐藏 1 公开', example='示例值示例值示例值'),
        sceneId?: long(name='SceneId', description='场景id', example='13'),
        sceneName?: string(name='SceneName', description='场景名称', example='示例值示例值'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount', example='32'),
    totalPage?: long(name='TotalPage', example='91'),
  }(name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model QueryTagListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTagListPageResponseBody(name='body'),
}

async function queryTagListPageWithOptions(request: QueryTagListPageRequest, runtime: Util.RuntimeOptions): QueryTagListPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTagListPage',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTagListPage(request: QueryTagListPageRequest): QueryTagListPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagListPageWithOptions(request, runtime);
}

model QueryUsageStatisticsByTagIdRequest {
  beginTime?: string(name='BeginTime', description='开始时间', example='示例值'),
  endTime?: string(name='EndTime', description='结束时间', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagId?: long(name='TagId', description='结束时间', example='14'),
}

model QueryUsageStatisticsByTagIdResponseBody = {
  code?: string(name='Code', example='示例值示例值示例值'),
  data?: [ 
    {
      authorizationCode?: string(name='AuthorizationCode', description='授权码', example='示例值示例值'),
      failTotal?: long(name='FailTotal', description='查询失败号码数', example='71'),
      gmtDateStr?: string(name='GmtDateStr', description='创建时间', example='示例值示例值示例值'),
      id?: long(name='Id', description='授权码使用记录 id', example='17'),
      industryName?: string(name='IndustryName', description='行业名称', example='示例值示例值'),
      partnerId?: long(name='PartnerId', description='客户 pid', example='89'),
      sceneName?: string(name='SceneName', description='场景名称', example='示例值示例值'),
      successTotal?: long(name='SuccessTotal', description='查询成功号码数', example='93'),
      tagId?: long(name='TagId', description='标签名称', example='69'),
      tagName?: string(name='TagName', description='标签名称', example='示例值'),
      total?: long(name='Total', description='查询总号码数', example='41'),
    }
  ](name='Data'),
  message?: string(name='Message', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model QueryUsageStatisticsByTagIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUsageStatisticsByTagIdResponseBody(name='body'),
}

async function queryUsageStatisticsByTagIdWithOptions(request: QueryUsageStatisticsByTagIdRequest, runtime: Util.RuntimeOptions): QueryUsageStatisticsByTagIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUsageStatisticsByTagId',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUsageStatisticsByTagId(request: QueryUsageStatisticsByTagIdRequest): QueryUsageStatisticsByTagIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUsageStatisticsByTagIdWithOptions(request, runtime);
}

model ThreeElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  certCode?: string(name='CertCode', example='83d8040d3cb2181e04****dc6ff5566d4493876a4a5da782887446356b0a787e'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='MD5'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ThreeElementsVerificationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier'),
    isConsistent?: int32(name='IsConsistent', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model ThreeElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ThreeElementsVerificationResponseBody(name='body'),
}

async function threeElementsVerificationWithOptions(request: ThreeElementsVerificationRequest, runtime: Util.RuntimeOptions): ThreeElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.certCode)) {
    query['CertCode'] = request.certCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ThreeElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function threeElementsVerification(request: ThreeElementsVerificationRequest): ThreeElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return threeElementsVerificationWithOptions(request, runtime);
}

model TwoElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='MD5'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model TwoElementsVerificationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier'),
    isConsistent?: int32(name='IsConsistent', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE****'),
}

model TwoElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TwoElementsVerificationResponseBody(name='body'),
}

async function twoElementsVerificationWithOptions(request: TwoElementsVerificationRequest, runtime: Util.RuntimeOptions): TwoElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TwoElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function twoElementsVerification(request: TwoElementsVerificationRequest): TwoElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return twoElementsVerificationWithOptions(request, runtime);
}

