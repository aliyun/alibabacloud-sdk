/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dytnsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeEmptyNumberDetectRequest {
  encryptType?: string(name='EncryptType'),
  ownerId?: long(name='OwnerId'),
  phone?: string(name='Phone'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeEmptyNumberDetectResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      number?: string(name='Number'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeEmptyNumberDetectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmptyNumberDetectResponseBody(name='body'),
}

async function describeEmptyNumberDetectWithOptions(request: DescribeEmptyNumberDetectRequest, runtime: Util.RuntimeOptions): DescribeEmptyNumberDetectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEmptyNumberDetect',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmptyNumberDetect(request: DescribeEmptyNumberDetectRequest): DescribeEmptyNumberDetectResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmptyNumberDetectWithOptions(request, runtime);
}

model DescribePhoneNumberAnalysisRequest {
  authCode?: string(name='AuthCode'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  numberType?: int32(name='NumberType'),
  ownerId?: long(name='OwnerId'),
  rate?: long(name='Rate'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberAnalysisResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      number?: string(name='Number'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribePhoneNumberAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberAnalysisResponseBody(name='body'),
}

async function describePhoneNumberAnalysisWithOptions(request: DescribePhoneNumberAnalysisRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.numberType)) {
    query['NumberType'] = request.numberType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.rate)) {
    query['Rate'] = request.rate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberAnalysis',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberAnalysis(request: DescribePhoneNumberAnalysisRequest): DescribePhoneNumberAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberAnalysisWithOptions(request, runtime);
}

model DescribePhoneNumberAttributeRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberAttributeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  phoneNumberAttribute?: {
    basicCarrier?: string(name='BasicCarrier'),
    carrier?: string(name='Carrier'),
    city?: string(name='City'),
    isNumberPortability?: boolean(name='IsNumberPortability'),
    numberSegment?: long(name='NumberSegment'),
    province?: string(name='Province'),
  }(name='PhoneNumberAttribute'),
  requestId?: string(name='RequestId'),
}

model DescribePhoneNumberAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberAttributeResponseBody(name='body'),
}

async function describePhoneNumberAttributeWithOptions(request: DescribePhoneNumberAttributeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberAttribute',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberAttribute(request: DescribePhoneNumberAttributeRequest): DescribePhoneNumberAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberAttributeWithOptions(request, runtime);
}

model DescribePhoneNumberOnlineTimeRequest {
  authCode?: string(name='AuthCode'),
  carrier?: string(name='Carrier'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberOnlineTimeResponseBody = {
  code?: string(name='Code'),
  data?: {
    verifyResult?: string(name='VerifyResult'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribePhoneNumberOnlineTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberOnlineTimeResponseBody(name='body'),
}

async function describePhoneNumberOnlineTimeWithOptions(request: DescribePhoneNumberOnlineTimeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberOnlineTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.carrier)) {
    query['Carrier'] = request.carrier;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberOnlineTime',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberOnlineTime(request: DescribePhoneNumberOnlineTimeRequest): DescribePhoneNumberOnlineTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberOnlineTimeWithOptions(request, runtime);
}

model DescribePhoneNumberResaleRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  since?: string(name='Since'),
}

model DescribePhoneNumberResaleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  twiceTelVerify?: {
    carrier?: string(name='Carrier'),
    verifyResult?: int32(name='VerifyResult'),
  }(name='TwiceTelVerify'),
}

model DescribePhoneNumberResaleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberResaleResponseBody(name='body'),
}

async function describePhoneNumberResaleWithOptions(request: DescribePhoneNumberResaleRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberResaleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.since)) {
    query['Since'] = request.since;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberResale',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberResale(request: DescribePhoneNumberResaleRequest): DescribePhoneNumberResaleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberResaleWithOptions(request, runtime);
}

model DescribePhoneNumberStatusRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  phoneStatus?: {
    carrier?: string(name='Carrier'),
    serialId?: string(name='SerialId'),
    status?: string(name='Status'),
  }(name='PhoneStatus'),
  requestId?: string(name='RequestId'),
}

model DescribePhoneNumberStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberStatusResponseBody(name='body'),
}

async function describePhoneNumberStatusWithOptions(request: DescribePhoneNumberStatusRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberStatus',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberStatus(request: DescribePhoneNumberStatusRequest): DescribePhoneNumberStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberStatusWithOptions(request, runtime);
}

model InvalidPhoneNumberFilterRequest {
  authCode?: string(name='AuthCode'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model InvalidPhoneNumberFilterResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      encryptedNumber?: string(name='EncryptedNumber'),
      expireTime?: string(name='ExpireTime'),
      originalNumber?: string(name='OriginalNumber'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model InvalidPhoneNumberFilterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvalidPhoneNumberFilterResponseBody(name='body'),
}

async function invalidPhoneNumberFilterWithOptions(request: InvalidPhoneNumberFilterRequest, runtime: Util.RuntimeOptions): InvalidPhoneNumberFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvalidPhoneNumberFilter',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invalidPhoneNumberFilter(request: InvalidPhoneNumberFilterRequest): InvalidPhoneNumberFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return invalidPhoneNumberFilterWithOptions(request, runtime);
}

model PhoneNumberEncryptRequest {
  authCode?: string(name='AuthCode'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberEncryptResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      encryptedNumber?: string(name='EncryptedNumber'),
      expireTime?: string(name='ExpireTime'),
      originalNumber?: string(name='OriginalNumber'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model PhoneNumberEncryptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberEncryptResponseBody(name='body'),
}

async function phoneNumberEncryptWithOptions(request: PhoneNumberEncryptRequest, runtime: Util.RuntimeOptions): PhoneNumberEncryptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberEncrypt',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberEncrypt(request: PhoneNumberEncryptRequest): PhoneNumberEncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberEncryptWithOptions(request, runtime);
}

model PvrCallbackFCUResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pvrCallbackFCUWithOptions(runtime: Util.RuntimeOptions): PvrCallbackFCUResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'PvrCallbackFCU',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pvrCallbackFCU(): PvrCallbackFCUResponse {
  var runtime = new Util.RuntimeOptions{};
  return pvrCallbackFCUWithOptions(runtime);
}

model ThreeElementsVerificationRequest {
  authCode?: string(name='AuthCode'),
  certCode?: string(name='CertCode'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ThreeElementsVerificationResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      basicCarrier?: string(name='BasicCarrier'),
      isConsistent?: int32(name='IsConsistent'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ThreeElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ThreeElementsVerificationResponseBody(name='body'),
}

async function threeElementsVerificationWithOptions(request: ThreeElementsVerificationRequest, runtime: Util.RuntimeOptions): ThreeElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.certCode)) {
    query['CertCode'] = request.certCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ThreeElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function threeElementsVerification(request: ThreeElementsVerificationRequest): ThreeElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return threeElementsVerificationWithOptions(request, runtime);
}

model TwoElementsVerificationRequest {
  authCode?: string(name='AuthCode'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model TwoElementsVerificationResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      basicCarrier?: string(name='BasicCarrier'),
      isConsistent?: int32(name='IsConsistent'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model TwoElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TwoElementsVerificationResponseBody(name='body'),
}

async function twoElementsVerificationWithOptions(request: TwoElementsVerificationRequest, runtime: Util.RuntimeOptions): TwoElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TwoElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function twoElementsVerification(request: TwoElementsVerificationRequest): TwoElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return twoElementsVerificationWithOptions(request, runtime);
}

