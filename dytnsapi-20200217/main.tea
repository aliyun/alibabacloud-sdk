/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dytnsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeEmptyNumberRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='189****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeEmptyNumberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    number?: string(name='Number', example='189****1234'),
    status?: string(name='Status', example='EMPTY'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribeEmptyNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmptyNumberResponseBody(name='body'),
}

async function describeEmptyNumberWithOptions(request: DescribeEmptyNumberRequest, runtime: Util.RuntimeOptions): DescribeEmptyNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEmptyNumber',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmptyNumber(request: DescribeEmptyNumberRequest): DescribeEmptyNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmptyNumberWithOptions(request, runtime);
}

model DescribePhoneNumberAnalysisRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1310000****'),
  mask?: string(name='Mask', example='MD5'),
  numberType?: int32(name='NumberType', example='0'),
  ownerId?: long(name='OwnerId'),
  rate?: long(name='Rate', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberAnalysisResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      code?: string(name='Code', example='YES'),
      number?: string(name='Number', example='1310000****'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberAnalysisResponseBody(name='body'),
}

async function describePhoneNumberAnalysisWithOptions(request: DescribePhoneNumberAnalysisRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.numberType)) {
    query['NumberType'] = request.numberType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.rate)) {
    query['Rate'] = request.rate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberAnalysis',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberAnalysis(request: DescribePhoneNumberAnalysisRequest): DescribePhoneNumberAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberAnalysisWithOptions(request, runtime);
}

model DescribePhoneNumberOnlineTimeRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  carrier?: string(name='Carrier', example='UNICOM'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberOnlineTimeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrierCode?: string(name='CarrierCode', example='CMCC'),
    verifyResult?: string(name='VerifyResult', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberOnlineTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberOnlineTimeResponseBody(name='body'),
}

async function describePhoneNumberOnlineTimeWithOptions(request: DescribePhoneNumberOnlineTimeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberOnlineTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.carrier)) {
    query['Carrier'] = request.carrier;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberOnlineTime',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberOnlineTime(request: DescribePhoneNumberOnlineTimeRequest): DescribePhoneNumberOnlineTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberOnlineTimeWithOptions(request, runtime);
}

model DescribePhoneNumberOperatorAttributeRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='MD5'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhoneNumberOperatorAttributeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier'),
    carrier?: string(name='Carrier'),
    city?: string(name='City'),
    isNumberPortability?: boolean(name='IsNumberPortability', example='false'),
    numberSegment?: long(name='NumberSegment'),
    province?: string(name='Province'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model DescribePhoneNumberOperatorAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneNumberOperatorAttributeResponseBody(name='body'),
}

async function describePhoneNumberOperatorAttributeWithOptions(request: DescribePhoneNumberOperatorAttributeRequest, runtime: Util.RuntimeOptions): DescribePhoneNumberOperatorAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneNumberOperatorAttribute',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneNumberOperatorAttribute(request: DescribePhoneNumberOperatorAttributeRequest): DescribePhoneNumberOperatorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneNumberOperatorAttributeWithOptions(request, runtime);
}

model DescribePhoneTwiceTelVerifyRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='139*******'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', example='2018-01-01 00:00:00'),
}

model DescribePhoneTwiceTelVerifyResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    verifyResult?: string(name='VerifyResult', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model DescribePhoneTwiceTelVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhoneTwiceTelVerifyResponseBody(name='body'),
}

async function describePhoneTwiceTelVerifyWithOptions(request: DescribePhoneTwiceTelVerifyRequest, runtime: Util.RuntimeOptions): DescribePhoneTwiceTelVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhoneTwiceTelVerify',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhoneTwiceTelVerify(request: DescribePhoneTwiceTelVerifyRequest): DescribePhoneTwiceTelVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhoneTwiceTelVerifyWithOptions(request, runtime);
}

model InvalidPhoneNumberFilterRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model InvalidPhoneNumberFilterResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      code?: string(name='Code', example='YES'),
      encryptedNumber?: string(name='EncryptedNumber', example='1400513****'),
      expireTime?: string(name='ExpireTime', example='2022-05-27 16:05:23'),
      originalNumber?: string(name='OriginalNumber', example='1390000****'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model InvalidPhoneNumberFilterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvalidPhoneNumberFilterResponseBody(name='body'),
}

async function invalidPhoneNumberFilterWithOptions(request: InvalidPhoneNumberFilterRequest, runtime: Util.RuntimeOptions): InvalidPhoneNumberFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvalidPhoneNumberFilter',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invalidPhoneNumberFilter(request: InvalidPhoneNumberFilterRequest): InvalidPhoneNumberFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return invalidPhoneNumberFilterWithOptions(request, runtime);
}

model PhoneNumberEncryptRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberEncryptResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      encryptedNumber?: string(name='EncryptedNumber', example='1400513****'),
      expireTime?: string(name='ExpireTime', example='2022-05-27 16:05:23'),
      originalNumber?: string(name='OriginalNumber', example='1390000****'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberEncryptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberEncryptResponseBody(name='body'),
}

async function phoneNumberEncryptWithOptions(request: PhoneNumberEncryptRequest, runtime: Util.RuntimeOptions): PhoneNumberEncryptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberEncrypt',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberEncrypt(request: PhoneNumberEncryptRequest): PhoneNumberEncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberEncryptWithOptions(request, runtime);
}

model PhoneNumberStatusForAccountRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForAccountResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForAccountResponseBody(name='body'),
}

async function phoneNumberStatusForAccountWithOptions(request: PhoneNumberStatusForAccountRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForAccount',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForAccount(request: PhoneNumberStatusForAccountRequest): PhoneNumberStatusForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForAccountWithOptions(request, runtime);
}

model PhoneNumberStatusForPublicRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForPublicResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-****-****-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForPublicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForPublicResponseBody(name='body'),
}

async function phoneNumberStatusForPublicWithOptions(request: PhoneNumberStatusForPublicRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForPublicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForPublic',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForPublic(request: PhoneNumberStatusForPublicRequest): PhoneNumberStatusForPublicResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForPublicWithOptions(request, runtime);
}

model PhoneNumberStatusForRealRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='189****8999'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForRealResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForRealResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForRealResponseBody(name='body'),
}

async function phoneNumberStatusForRealWithOptions(request: PhoneNumberStatusForRealRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForRealResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForReal',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForReal(request: PhoneNumberStatusForRealRequest): PhoneNumberStatusForRealResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForRealWithOptions(request, runtime);
}

model PhoneNumberStatusForSmsRequest {
  authCode?: string(name='AuthCode', example='zf08***pi6'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='181****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForSmsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CMCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model PhoneNumberStatusForSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForSmsResponseBody(name='body'),
}

async function phoneNumberStatusForSmsWithOptions(request: PhoneNumberStatusForSmsRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForSms',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForSms(request: PhoneNumberStatusForSmsRequest): PhoneNumberStatusForSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForSmsWithOptions(request, runtime);
}

model PhoneNumberStatusForVirtualRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForVirtualResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    isPrivacyNumber?: boolean(name='IsPrivacyNumber', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForVirtualResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForVirtualResponseBody(name='body'),
}

async function phoneNumberStatusForVirtualWithOptions(request: PhoneNumberStatusForVirtualRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForVirtualResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForVirtual',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForVirtual(request: PhoneNumberStatusForVirtualRequest): PhoneNumberStatusForVirtualResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForVirtualWithOptions(request, runtime);
}

model PhoneNumberStatusForVoiceRequest {
  authCode?: string(name='AuthCode', example='Dd1r***4id'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='139****1234'),
  mask?: string(name='Mask', example='NORMAL'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PhoneNumberStatusForVoiceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CTCC'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForVoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PhoneNumberStatusForVoiceResponseBody(name='body'),
}

async function phoneNumberStatusForVoiceWithOptions(request: PhoneNumberStatusForVoiceRequest, runtime: Util.RuntimeOptions): PhoneNumberStatusForVoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PhoneNumberStatusForVoice',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function phoneNumberStatusForVoice(request: PhoneNumberStatusForVoiceRequest): PhoneNumberStatusForVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return phoneNumberStatusForVoiceWithOptions(request, runtime);
}

model ThreeElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  certCode?: string(name='CertCode', example='83d8040d3cb2181e04****dc6ff5566d4493876a4a5da782887446356b0a787e'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='MD5'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ThreeElementsVerificationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier'),
    isConsistent?: int32(name='IsConsistent', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model ThreeElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ThreeElementsVerificationResponseBody(name='body'),
}

async function threeElementsVerificationWithOptions(request: ThreeElementsVerificationRequest, runtime: Util.RuntimeOptions): ThreeElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.certCode)) {
    query['CertCode'] = request.certCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ThreeElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function threeElementsVerification(request: ThreeElementsVerificationRequest): ThreeElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return threeElementsVerificationWithOptions(request, runtime);
}

model TwoElementsVerificationRequest {
  authCode?: string(name='AuthCode', example='QASDW@#**'),
  extendFunction?: string(name='ExtendFunction'),
  inputNumber?: string(name='InputNumber', example='1390000****'),
  mask?: string(name='Mask', example='MD5'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model TwoElementsVerificationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier'),
    isConsistent?: int32(name='IsConsistent', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE****'),
}

model TwoElementsVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TwoElementsVerificationResponseBody(name='body'),
}

async function twoElementsVerificationWithOptions(request: TwoElementsVerificationRequest, runtime: Util.RuntimeOptions): TwoElementsVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.extendFunction)) {
    query['ExtendFunction'] = request.extendFunction;
  }
  if (!Util.isUnset(request.inputNumber)) {
    query['InputNumber'] = request.inputNumber;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TwoElementsVerification',
    version = '2020-02-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function twoElementsVerification(request: TwoElementsVerificationRequest): TwoElementsVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return twoElementsVerificationWithOptions(request, runtime);
}

