/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dytnsapi';
  @version = '2020-02-17';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CertNoTwoElementVerificationRequest {
  authCode: string(name='AuthCode', example='QASDW@#**', position='Query'),
  certName: string(name='CertName', example='示例值', position='Query'),
  certNo: string(name='CertNo', example='331021200001010000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CertNoTwoElementVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    isConsistent?: string(name='IsConsistent', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model CertNoTwoElementVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CertNoTwoElementVerificationResponseBody(name='body'),
}

async function certNoTwoElementVerification(request: CertNoTwoElementVerificationRequest): CertNoTwoElementVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CertNoTwoElementVerification', 'POST', '/', 'json', false, 'json', request);
}

model CompanyFourElementsVerificationRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the [My Applications](https://dytns.console.aliyun.com/analysis/apply) page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/overview?spm=a2c4g.608385.0.0.79847f8b3awqUC), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  epCertName?: string(name='EpCertName', description='The enterprise name.', example='示例值示例值', position='Query'),
  epCertNo: string(name='EpCertNo', description='The business license number.', example='9242032*******J627', position='Query'),
  legalPersonCertName: string(name='LegalPersonCertName', description='The name of the legal representative.

>  If an enterprise has multiple legal representatives, separate them with commas (,).', example='示例值', position='Query'),
  legalPersonCertNo: string(name='LegalPersonCertNo', description='The ID card number of the legal representative.

>  If an enterprise has multiple legal representatives, separate the ID card numbers with commas (,).', example='331021********0011', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CompanyFourElementsVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='-'),
  code?: string(name='Code', description='The response code.', example='OK'),
  data?: {
    detailInfo?: {
      enterpriseStatus?: string(name='EnterpriseStatus', description='The business status of the enterprise.', example='Active'),
      openTime?: string(name='OpenTime', description='The business term of the enterprise.', example='2023-05-25/2053-05-24'),
    }(name='DetailInfo', description='The information about the enterprise.'),
    inconsistentData?: [ string ](name='InconsistentData', description='The fields to be verified.'),
    reasonCode?: long(name='ReasonCode', description='The code of the verification result. Valid values:

*   0: The four elements belong to the same enterprise.
*   1: The four elements belong to the same enterprise, but the business status of the enterprise is abnormal.
*   2: The legal representative information cannot match the enterprise information.
*   3: The four elements do not belong to the same enterprise.
*   4: No information about the enterprise is found.
*   5: No information about the legal representative is found.', example='0'),
    verifyResult?: string(name='VerifyResult', description='The verification result. Valid values:

*   true: The four elements belong to the same enterprise and the business status of the enterprise is Active.
*   false: The four elements do not belong to the same enterprise.', example='true'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model CompanyFourElementsVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompanyFourElementsVerificationResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing of services related to four-element verification for enterprises. For more information, see [Billing](https://help.aliyun.com/document_detail/154751.html?spm=a2c4g.154007.0.0.3edd7eb6E90YT4).
  * *   You are charged only if the value of VerifyResult is true or false and the value of ReasonCode is 0, 1, or 2.
  * *   Before you call this operation, perform the following operations: Log on to the [Cell Phone Number Service console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdytns.console.aliyun.com%2Foverview%3Fspm%3Da2c4g.608385.0.0.79847f8b3awqUC\\&lang=zh). On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  *
 */
async function companyFourElementsVerification(request: CompanyFourElementsVerificationRequest): CompanyFourElementsVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompanyFourElementsVerification', 'POST', '/', 'json', false, 'json', request);
}

model CompanyThreeElementsVerificationRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the [My Applications](https://dytns.console.aliyun.com/analysis/apply) page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/overview?spm=a2c4g.608385.0.0.79847f8b3awqUC), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  epCertName: string(name='EpCertName', description='The enterprise name.', example='示例值', position='Query'),
  epCertNo: string(name='EpCertNo', description='The business license number.', example='9242032*******J627', position='Query'),
  legalPersonCertName: string(name='LegalPersonCertName', description='The name of the legal representative.

>  If an enterprise has multiple legal representatives, separate them with commas (,).', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CompanyThreeElementsVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='-'),
  code?: string(name='Code', description='The response code.', example='OK'),
  data?: {
    detailInfo?: {
      enterpriseStatus?: string(name='EnterpriseStatus', description='The business status of the enterprise.', example='Active'),
      openTime?: string(name='OpenTime', description='The business term of the enterprise.', example='2023-05-25/2053-05-24'),
    }(name='DetailInfo', description='The information about the enterprise.'),
    inconsistentData?: [ string ](name='InconsistentData', description='The fields to be verified.'),
    reasonCode?: long(name='ReasonCode', description='The code of the verification result. Valid values:

*   0: The three elements belong to the same enterprise.
*   1: The three elements belong to the same enterprise, and the business status of the enterprise is abnormal.
*   2: The legal representative information cannot match the enterprise information.
*   3: The three elements do not belong to the same enterprise.
*   4: No information about the enterprise is found.
*   5: No information about the legal representative is found.', example='0'),
    verifyResult?: string(name='VerifyResult', description='The verification result. Valid values:

*   true: The three elements belong to the same enterprise and the business status of the enterprise is Active.
*   false: The three elements do not belong to the same enterprise.', example='true'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model CompanyThreeElementsVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompanyThreeElementsVerificationResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing of services related to three-element verification for enterprises. For more information, see [Billing](https://help.aliyun.com/document_detail/154751.html?spm=a2c4g.154007.0.0.3edd7eb6E90YT4).
  * *   You are charged only if the value of VerifyResult is true or false and the value of ReasonCode is 0, 1, or 2.
  * *   Before you call this operation, perform the following operations: Log on to the [Cell Phone Number Service console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdytns.console.aliyun.com%2Foverview%3Fspm%3Da2c4g.608385.0.0.79847f8b3awqUC\\&lang=zh). On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  *
 */
async function companyThreeElementsVerification(request: CompanyThreeElementsVerificationRequest): CompanyThreeElementsVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompanyThreeElementsVerification', 'POST', '/', 'json', false, 'json', request);
}

model CompanyTwoElementsVerificationRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the [My Applications](https://dytns.console.aliyun.com/analysis/apply) page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/overview?spm=a2c4g.608385.0.0.79847f8b3awqUC), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  epCertName: string(name='EpCertName', description='The enterprise name.', example='示例值示例值', position='Query'),
  epCertNo: string(name='EpCertNo', description='The business license number.', example='9242032*******J627', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CompanyTwoElementsVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='-'),
  code?: string(name='Code', description='The response code.', example='OK'),
  data?: {
    detailInfo?: {
      enterpriseStatus?: string(name='EnterpriseStatus', description='The business status of the enterprise.', example='Active'),
      openTime?: string(name='OpenTime', description='The business term of the enterprise.', example='2023-05-25/2053-05-24'),
    }(name='DetailInfo', description='The information about the enterprise.'),
    inconsistentData?: [ string ](name='InconsistentData', description='The fields to be verified.'),
    reasonCode?: string(name='ReasonCode', description='The code of the verification result. Valid values:

*   0: The two elements belong to the same enterprise.
*   1: The two elements belong to the same enterprise, but the business status of the enterprise is abnormal.
*   3: The two elements do not belong to the same enterprise.
*   4: No information about the enterprise is found.', example='0'),
    verifyResult?: string(name='VerifyResult', description='The verification result. Valid values:

*   true: The two elements belong to the same enterprise and the business status of the enterprise is Active.
*   false: The two elements do not belong to the same enterprise.', example='true'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model CompanyTwoElementsVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompanyTwoElementsVerificationResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing of services related to two-element verification for enterprises. For more information, see [Billing](https://help.aliyun.com/document_detail/154751.html?spm=a2c4g.154007.0.0.3edd7eb6E90YT4).
  * *   You are charged only if the value of VerifyResult is true or false and the value of ReasonCode is 0 or 1.
  * *   Before you call this operation, perform the following operations: Log on to the [Cell Phone Number Service console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdytns.console.aliyun.com%2Foverview%3Fspm%3Da2c4g.608385.0.0.79847f8b3awqUC\\&lang=zh). On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  *
 */
async function companyTwoElementsVerification(request: CompanyTwoElementsVerificationRequest): CompanyTwoElementsVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompanyTwoElementsVerification', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEmptyNumberRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

>  You can query only one phone number a time.', example='189****1234', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeEmptyNumberResponseBody = {
  code?: string(name='Code', description='The HTTP status code. Valid values:

*   **OK**: The request is successful.
*   **InvalidPhoneNumber.Check**: The phone number is invalid.', example='OK'),
  data?: {
    number?: string(name='Number', description='The specified phone number.', example='189****1234'),
    status?: string(name='Status', description='The returned status for the queried phone number. Valid values:

*   **EMPTY**: The queried phone number is a nonexistent number.
*   **NORMAL**: The queried phone number is valid.
*   **SUSPECT_EMPTY**: The queried phone number is suspected to be a nonexistent number.
*   **UNKNOWN**: The queried phone number is unknown.', example='EMPTY'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribeEmptyNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEmptyNumberResponseBody(name='body'),
}

/**
  * *   You can call this operation to verify whether a phone number is a nonexistent number. When you call this operation to verify a number, the system charges you CNY 0.01 per verification based on the number of verifications. **Before you call this operation, make sure that you are familiar with the billing of Cell Phone Number Service.**
  * *   You are charged only if the value of Code is OK and the value of Status is not UNKNOWN.
  * *   The prediction is not strictly accurate because Cell Phone Number Service predicts the nonexistent number probability by using AI algorithms. The accuracy rate of the prediction and the recall rate of empty numbers are about 95%. **Pay attention to this point when you call this operation**.
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 100 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * ### [](#)Authorization information
  * By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  *
 */
async function describeEmptyNumber(request: DescribeEmptyNumberRequest): DescribeEmptyNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEmptyNumber', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberAnalysisRequest {
  authCode: string(name='AuthCode', example='QASDW@#**', position='Query'),
  inputNumber: string(name='InputNumber', example='1310000****', position='Query'),
  mask?: string(name='Mask', example='MD5', position='Query'),
  numberType?: long(name='NumberType', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rate?: long(name='Rate', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberAnalysisResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        code?: string(name='Code', example='NO'),
        number?: string(name='Number', example='18752785620'),
      }
    ](name='List'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberAnalysisResponseBody(name='body'),
}

async function describePhoneNumberAnalysis(request: DescribePhoneNumberAnalysisRequest): DescribePhoneNumberAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberAnalysis', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberAnalysisAIRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the ****[**Labels**](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click Activate Now, enter the required information, and then submit your application. After your application is approved, you can obtain an authorization code.', example='HwD***nG', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.', example='187****5620', position='Query'),
  modelConfig?: string(name='ModelConfig', description='The model parameter configuration. This field is required by some labels.', example='{"trainingJobId": "17**********48"}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rate?: long(name='Rate', description='The score threshold for the phone number. Valid values: **0 to 100**.

>  The system provided by Alibaba Cloud determines whether to accept the specified score threshold. When the system does not accept the specified score threshold, the value of this field is invalid.', example='96', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberAnalysisAIResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code. Valid values:

*   OK: The request is successful.', example='OK'),
  data?: {
    code?: string(name='Code', description='The returned code.

*   YES: The specified phone number is valid.
*   NO: The specified phone number is invalid.
*   UNKNOWN: The specified phone number is unknown', example='YES'),
    number?: string(name='Number', description='The specified phone number.', example='187****5620'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='68A40250-50CD-034C-B728-0BD******177'),
}

model DescribePhoneNumberAnalysisAIResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberAnalysisAIResponseBody(name='body'),
}

/**
  * Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the Labels page, find the label that you want to use, click Activate Now, enter the required information, and then submit your application. After your application is approved, you can use the label. Before you call this operation, make sure that you are familiar with the billing of Cell Phone Number Service.
  *
 */
async function describePhoneNumberAnalysisAI(request: DescribePhoneNumberAnalysisAIRequest): DescribePhoneNumberAnalysisAIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberAnalysisAI', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberAnalysisTransparentRequest {
  authCode: string(name='AuthCode', example='QASDW@#**', position='Query'),
  inputNumber: string(name='InputNumber', example='187****5620', position='Query'),
  ip?: string(name='Ip', example='示例值示例值示例值', position='Query'),
  numberType: string(name='NumberType', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberAnalysisTransparentResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    deviceRisk?: string(name='Device_risk', example='示例值示例值示例值'),
    ipRisk?: string(name='Ip_risk', example='示例值示例值'),
    score1?: string(name='Score1', example='0.6'),
    score2?: string(name='Score2', example='0.2'),
    score3?: string(name='Score3', example='0.8'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberAnalysisTransparentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberAnalysisTransparentResponseBody(name='body'),
}

async function describePhoneNumberAnalysisTransparent(request: DescribePhoneNumberAnalysisTransparentRequest): DescribePhoneNumberAnalysisTransparentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberAnalysisTransparent', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberAttributeRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number that you want to query.', example='1390000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberAttributeResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **InvalidParameter**: The specified phone number is invalid or the parameter format is invalid.
*   **PhoneNumberNotfound**: No attribute information can be found for the specified phone number.
*   **isp.UNKNOWN**: An unknown exception occurred.', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  phoneNumberAttribute?: {
    basicCarrier?: string(name='BasicCarrier', description='The basic carrier. Valid values:

*   **China Mobile**
*   **China Unicom**
*   **China Telecom**'),
    carrier?: string(name='Carrier', description='The actual carrier, including the virtual network operator (VNO). If the phone number involves mobile number portability, the value of this parameter is the carrier after mobile number portability.'),
    city?: string(name='City', description='The city where the phone number is registered.'),
    isNumberPortability?: boolean(name='IsNumberPortability', description='Indicates whether the phone number involves mobile number portability. Valid values:

*   **true**
*   **false**', example='false'),
    numberSegment?: long(name='NumberSegment', description='The number segment to which the phone number belongs.', example='139'),
    province?: string(name='Province', description='The province where the phone number is registered.'),
  }(name='PhoneNumberAttribute', description='The attribute information about the phone number.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * ### [](#qps)QPS limits
  * You can call this operation up to 2,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
// Deprecated
async function describePhoneNumberAttribute(request: DescribePhoneNumberAttributeRequest): DescribePhoneNumberAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberOnlineTimeRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='QASDW@#**', position='Query'),
  carrier?: string(name='Carrier', description='The carrier. Valid values:

*   **MOBILE**: China Mobile
*   **UNICOM**: China Unicom
*   **TELECOM**: China Telecom

>  Alibaba Cloud automatically determines the carrier based on the carrier who assigns the phone number. Therefore, the value of this field does not affect the query result.', example='UNICOM', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, specify an 11-digit phone number in plaintext.
*   If the value of Mask is MD5, specify a 32-bit string that is encrypted by using MD5.
*   If the value of Mask is SHA256, specify a 64-bit string that is encrypted by using SHA256.

>  Letters in the encrypted strings are not case-sensitive.', example='1390000****', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberOnlineTimeResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **PortabilityNumberNotSupported**: The phone number that is involved in mobile number portability is not supported.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.

>  You are charged if the value of Code is OK and the value of VerifyResult is not -1. For more information, see [Pricing](~~154751~~).', example='OK'),
  data?: {
    carrierCode?: string(name='CarrierCode', description='The carrier code. Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom
*   **CBN**: China Broadnet', example='CMCC'),
    verifyResult?: string(name='VerifyResult', description='The enumerated value of the usage period of a phone number. Valid values:

*   **-1**: No usage period information is available for the phone number.
*   **0**: The phone number status is abnormal. For example, the phone number is a nonexistent number.
*   **1** :\\[0-3) months.
*   **2** :\\[3-6] months.
*   **3** :(6-12] months.
*   **4** :(12-24] months.
*   **5** :(24,+) months.', example='1'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribePhoneNumberOnlineTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberOnlineTimeResponseBody(name='body'),
}

/**
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * ### [](#qps)QPS limits
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describePhoneNumberOnlineTime(request: DescribePhoneNumberOnlineTimeRequest): DescribePhoneNumberOnlineTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberOnlineTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberOperatorAttributeRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, specify an 11-digit phone number in plaintext.
*   If the value of Mask is MD5, specify a 32-bit string that is encrypted by using MD5.
*   If the value of Mask is SHA256, specify a 64-bit string that is encrypted by using SHA256.

>  Letters in the encrypted strings are not case-sensitive.', example='139****1234', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**: The phone number is MD5-encrypted.
*   **SHA256**: The phone number is SHA256-encrypted.

> Letters in the string must be uppercase.', example='MD5', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberOperatorAttributeResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **InvalidParameter**: The specified phone number is invalid or the parameter format is invalid.
*   **PhoneNumberNotfound**: No attribute information can be found for the specified phone number.
*   **isp.UNKNOWN**: An unknown exception occurred.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier', description='The basic carrier. Valid values:

*   **China Mobile**
*   **China Unicom**
*   **China Telecom**
*   **China Broadnet**', example='China Mobile'),
    carrier?: string(name='Carrier', description='The actual carrier, including the virtual network operator (VNO). If the phone number involves mobile number portability, the value of this parameter is the carrier after mobile number portability.', example='China Mobile'),
    city?: string(name='City', description='The city where the phone number is registered.', example='hangzhou'),
    isNumberPortability?: boolean(name='IsNumberPortability', description='Indicates whether the phone number involves mobile number portability. Valid values:

*   **true**
*   **false**', example='false'),
    numberSegment?: long(name='NumberSegment', description='The number segment to which the phone number belongs.', example='139'),
    province?: string(name='Province', description='The province where the phone number is registered.', example='zhejiang'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model DescribePhoneNumberOperatorAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberOperatorAttributeResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154008~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   You can call this operation to obtain the carrier, registration location, and mobile number portability information about a phone number. You can query phone numbers in **plaintext** and phone numbers that are encrypted by using **MD5** and **SHA256**.
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  *
 */
async function describePhoneNumberOperatorAttribute(request: DescribePhoneNumberOperatorAttributeRequest): DescribePhoneNumberOperatorAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberOperatorAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneNumberRiskRequest {
  authCode: string(name='AuthCode', example='示例值', position='Query'),
  inputNumber: string(name='InputNumber', example='示例值示例值', position='Query'),
  mask: string(name='Mask', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhoneNumberRiskResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    verifyResult?: string(name='VerifyResult', example='示例值'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribePhoneNumberRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneNumberRiskResponseBody(name='body'),
}

async function describePhoneNumberRisk(request: DescribePhoneNumberRiskRequest): DescribePhoneNumberRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneNumberRisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhoneTwiceTelVerifyRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, specify an 11-digit phone number in plaintext.
*   If the value of Mask is MD5, specify a 32-bit string that is encrypted by using MD5.
*   If the value of Mask is SHA256, specify a 64-bit string that is encrypted by using SHA256.

>  Letters in the encrypted strings are not case-sensitive.', example='139*******', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The registration time. Specify the time in the yyyy-MM-dd HH:mm:ss format. This time is the service registration time of the mobile phone user. If the service registration time is later than the time when the phone number is assigned by a carrier, it indicates that the phone number is not a reassigned number. Otherwise, the phone number is a reassigned number.

> 

*   If a carrier allocates a single number multiple times, the system will determine whether the phone number is a reassigned number based on the time when the carrier last allocated the phone number.

*   The service registration time must be later than 00:00:00 on January 1, 1970.', example='2018-01-01 00:00:00', position='Query'),
}

model DescribePhoneTwiceTelVerifyResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **PortabilityNumberNotSupported**: The phone number that is involved in mobile number portability is not supported.
*   **RequestNumberNotSupported**: You are not allowed to query phone numbers assigned by China Broadnet (that is, phone numbers start with 192) and phone numbers assigned by virtual network operators (VNOs).
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.

>  You are charged for phone number verifications if the value of Code is OK and the value of VerifyResult is not 0. For more information, see [Pricing](~~154751~~).', example='OK'),
  data?: {
    carrier?: string(name='Carrier', description='The carrier. Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom

>  The returned result indicates the carrier who assigns the phone number. If the phone number involves mobile number portability, the carrier after mobile number portability is returned.', example='CMCC'),
    verifyResult?: string(name='VerifyResult', description='The result of the request. Valid values:

*   **0**: It is unable to judge whether the phone number is a reassigned number.
*   **1**: The phone number is a reassigned number.
*   **2**: The phone number is not a reassigned number.
*   **3**: The phone number has been canceled.', example='1'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot and locate issues.', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model DescribePhoneTwiceTelVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhoneTwiceTelVerifyResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   You are charged for phone number verifications only if the value of Code is OK and the value of VerifyResult is not 0.
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ## [](#qps)QPS limits
  * You can call this operation up to 100 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * ## [](#)Authorization information
  * By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  *
 */
async function describePhoneTwiceTelVerify(request: DescribePhoneTwiceTelVerifyRequest): DescribePhoneTwiceTelVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhoneTwiceTelVerify', 'POST', '/', 'json', false, 'json', request);
}

model GetUAIDApplyTokenSignRequest {
  authCode: string(name='AuthCode', example='HwD97InG', position='Query'),
  carrier: string(name='Carrier', example='CM', position='Query'),
  clientType: string(name='ClientType', example='30300', position='Query'),
  format?: string(name='Format', example='示例值示例值', position='Query'),
  outId: string(name='OutId', example='b8b5b3a*******0b9893484fdf412c99', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  paramKey?: string(name='ParamKey', example='955EC1A869852EA8BC66F********D7C6E92017BBD5B001C736EFEAFB775C232', position='Query'),
  paramStr?: string(name='ParamStr', example='B2F0D4CD7A216D16CE2AF4BBC********29A454FDDD991F919106C12CB89ABA8', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  time: string(name='Time', example='20121227180001165', position='Query'),
}

model GetUAIDApplyTokenSignResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    carrier?: string(name='Carrier', example='CM'),
    outId?: string(name='OutId', example='b8b5b3a*******0b9893484fdf412c99'),
    sign?: string(name='Sign', example='D2E204D74EEB373E468632********23F592C4C9'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD******177'),
}

model GetUAIDApplyTokenSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUAIDApplyTokenSignResponseBody(name='body'),
}

async function getUAIDApplyTokenSign(request: GetUAIDApplyTokenSignRequest): GetUAIDApplyTokenSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUAIDApplyTokenSign', 'POST', '/', 'json', false, 'json', request);
}

model GetUAIDConversionSignRequest {
  authCode: string(name='AuthCode', example='示例值示例值', position='Query'),
  carrier: string(name='Carrier', example='示例值示例值示例值', position='Query'),
  clientType?: string(name='ClientType', example='示例值', position='Query'),
  format?: string(name='Format', example='示例值示例值示例值', position='Query'),
  outId?: string(name='OutId', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  paramKey?: string(name='ParamKey', example='示例值示例值', position='Query'),
  paramStr?: string(name='ParamStr', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  time?: string(name='Time', example='示例值示例值', position='Query'),
}

model GetUAIDConversionSignResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    carrier?: string(name='Carrier', example='示例值示例值示例值'),
    outId?: string(name='OutId', example='示例值示例值'),
    sign?: string(name='Sign', example='示例值'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetUAIDConversionSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUAIDConversionSignResponseBody(name='body'),
}

async function getUAIDConversionSign(request: GetUAIDConversionSignRequest): GetUAIDConversionSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUAIDConversionSign', 'POST', '/', 'json', false, 'json', request);
}

model InvalidPhoneNumberFilterRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='QASDW@#**', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.', example='1390000****', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number.

>  Only the NORMAL encryption method is supported.', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model InvalidPhoneNumberFilterResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **MobileNumberIllegal**: The phone number is invalid.
*   **EncyrptTypeIllegal**: The encryption type is invalid.
*   **MobileNumberTypeNotMatch**: The phone number does not match the encryption type.
*   **CarrierIllegal**: The carrier type is invalid.
*   **AuthCodeNotExist**: The authorization code does not exist.
*   **PortabilityNumberNotSupported**: Mobile number portability is not supported.
*   **Unknown**: An unknown exception occurred.
*   **AuthCodeAndApiNotMatch**: A system exception occurred.
*   **AuthCodeAndApiNotMatch**: The authorization code does not match the API operation.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: [ 
    {
      code?: string(name='Code', description='The returned filter results.

*   **YES**: the valid phone number. The mappings are returned.
*   **NO**: the invalid phone number. No mappings are returned.', example='YES'),
      encryptedNumber?: string(name='EncryptedNumber', description='The encrypted phone number.', example='1400513****'),
      expireTime?: string(name='ExpireTime', description='The time when the phone number expires.', example='2022-05-27 16:05:23'),
      originalNumber?: string(name='OriginalNumber', description='The original phone number.', example='1390000****'),
    }
  ](name='Data', description='Details about the returned entries.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model InvalidPhoneNumberFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvalidPhoneNumberFilterResponseBody(name='body'),
}

/**
  * Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function invalidPhoneNumberFilter(request: InvalidPhoneNumberFilterRequest): InvalidPhoneNumberFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvalidPhoneNumberFilter', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberConvertServiceRequest {
  authCode: string(name='AuthCode', position='Query'),
  inputNumber: string(name='InputNumber', position='Query'),
  mask: string(name='Mask', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberConvertServiceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      converResult?: boolean(name='ConverResult'),
      number?: string(name='Number'),
      numberMd5?: string(name='NumberMd5'),
      numberSha256?: string(name='NumberSha256'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model PhoneNumberConvertServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberConvertServiceResponseBody(name='body'),
}

async function phoneNumberConvertService(request: PhoneNumberConvertServiceRequest): PhoneNumberConvertServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberConvertService', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberEncryptRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='QASDW@#**', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

>  You can query only one phone number at a time.', example='1390000****', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Set the value to **NORMAL**.

>  Only the NORMAL encryption method is supported.', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberEncryptResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](~~109196~~).', example='OK'),
  data?: [ 
    {
      encryptedNumber?: string(name='EncryptedNumber', description='The encrypted phone number.', example='1400513****'),
      expireTime?: string(name='ExpireTime', description='The time when the phone number expires.', example='2022-05-27 16:05:23'),
      originalNumber?: string(name='OriginalNumber', description='The original phone number.', example='1390000****'),
    }
  ](name='Data', description='Details about the returned entries.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberEncryptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberEncryptResponseBody(name='body'),
}

/**
  * Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberEncrypt(request: PhoneNumberEncryptRequest): PhoneNumberEncryptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberEncrypt', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberStatusForAccountRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, specify an 11-digit phone number in plaintext.
*   If the value of Mask is MD5, specify a 32-bit string that is encrypted by using MD5.
*   If the value of Mask is SHA256, specify a 64-bit string that is encrypted by using SHA256.

>  Letters in the encrypted strings are not case-sensitive.', example='139****1234', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberStatusForAccountResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **OperatorLimit**: The carrier prohibits the query of the phone number.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    carrier?: string(name='Carrier', description='The basic carrier who assings the phone number. If the queried phone number involves mobile number portability, the carrier after mobile number portability is returned. Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom

>  You are not allowed to query the phone numbers assigned by China Broadnet.', example='CMCC'),
    status?: string(name='Status', description='The returned status for the queried phone number. Valid values:

*   **NORMAL**: The queried phone number is valid.
*   **SHUTDOWN**: The queried phone number is suspended.
*   **POWER_OFF**: The queried phone number cannot be connected.
*   **NOT_EXIST**: The queried phone number is a nonexistent number.
*   **DEFECT**: The queried phone number is invalid.
*   **UNKNOWN**: The queried phone number is unknown.

>  Due to system adjustment of the carrier, the BUSY and POWER_OFF states cannot be returned for the numbers assigned by China Telecom. [For more information, see the official announcements](https://help.aliyun.com/document_detail/2489709.html).', example='NORMAL'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberStatusForAccountResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 300 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberStatusForAccount(request: PhoneNumberStatusForAccountRequest): PhoneNumberStatusForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberStatusForAccount', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberStatusForPublicRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization ID.', example='Dd1r***4id', position='Query'),
  inputNumber?: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, the value of this field is an 11-digit phone number.
*   If the value of Mask is MD5, the value of this field is a 32-bit encrypted string.
*   If the value of Mask is SHA256, the value of this field is a 64-bit encrypted string.

>  Letters in the encrypted strings are not case-sensitive.', example='139****1234', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberStatusForPublicResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **OperatorLimit**: The carrier prohibits the query of the phone number.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.

>  For a list of error codes, see [Service error codes](https://next.api.aliyun.com/document/Dytnsapi/2020-02-17/errorCode).', example='OK'),
  data?: {
    carrier?: string(name='Carrier', description='The basic carrier who assigns the phone number. If the queried phone number involves mobile number portability, the carrier after mobile number portability is returned.

Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom

>  You are not allowed to query the phone numbers assigned by China Broadnet.', example='CMCC'),
    status?: string(name='Status', description='The returned status for the queried phone number. Valid values:

*   **NORMAL**: The queried phone number can be reached.
*   **SHUTDOWN**: The queried phone number is suspended.
*   **POWER_OFF**: The phone is powered off.
*   **NOT_EXIST**: The queried phone number is a nonexistent number.
*   **SUSPECTED_POWER_OFF**: The phone is suspected to be powered off.
*   **BUSY**: The queried phone number is busy.
*   **UNKNOWN**: The queried phone number is unknown.

>  Due to system adjustment of the carrier, the BUSY and POWER_OFF states cannot be returned for the numbers assigned by China Telecom. [For more information, see the official announcements](https://help.aliyun.com/document_detail/2489709.html).', example='NORMAL'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='CC3BB6D2-****-****-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForPublicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberStatusForPublicResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 300 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberStatusForPublic(request: PhoneNumberStatusForPublicRequest): PhoneNumberStatusForPublicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberStatusForPublic', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberStatusForRealRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization ID.', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, the value of this field is an 11-digit phone number.
*   If the value of Mask is MD5, the value of this field is a 32-bit encrypted string.
*   If the value of Mask is SHA256, the value of this field is a 64-bit encrypted string.

>  Letters in the encrypted strings are not case-sensitive.', example='189****8999', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberStatusForRealResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **OperatorLimit**: The carrier prohibits the query of the phone number.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    carrier?: string(name='Carrier', description='The basic carrier who assigns the phone number. If the queried phone number involves mobile number portability, the carrier after mobile number portability is returned. Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom

>  You are not allowed to query the phone numbers assigned by China Broadnet.', example='CMCC'),
    status?: string(name='Status', description='The returned status for the queried phone number. Valid values:

*   **NORMAL**: The queried phone number can be reached.
*   **SHUTDOWN**: The queried phone number is suspended.
*   **POWER_OFF**: The phone is powered off.
*   **NOT_EXIST**: The queried phone number is a nonexistent number.
*   **BUSY**: The queried phone number is busy.
*   **SUSPECTED_POWER_OFF**: The phone is suspected to be powered off.
*   **DEFECT**: The queried phone number is invalid.
*   **UNKNOWN**: The queried phone number is unknown.

>  Due to system adjustment of the carrier, the BUSY and POWER_OFF states cannot be returned for the numbers assigned by China Telecom. [For more information, see the official announcements](https://help.aliyun.com/document_detail/2489709.html).', example='NORMAL'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForRealResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberStatusForRealResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 300 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberStatusForReal(request: PhoneNumberStatusForRealRequest): PhoneNumberStatusForRealResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberStatusForReal', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberStatusForSmsRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='zf08***pi6', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, specify an 11-digit phone number in plaintext.
*   If the value of Mask is MD5, specify a 32-bit string that is encrypted by using MD5.
*   If the value of Mask is SHA256, specify a 64-bit string that is encrypted by using SHA256.

>  Letters in the encrypted strings are not case-sensitive.', example='181****1234', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: plaintext
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberStatusForSmsResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **OperatorLimit**: The carrier prohibits the query of the phone number.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    carrier?: string(name='Carrier', description='The basic carrier who assigns the phone number. If the queried phone number involves mobile number portability, the carrier after mobile number portability is returned. Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom

>  You are not allowed to query the phone numbers assigned by China Broadnet.', example='CMCC'),
    status?: string(name='Status', description='The returned status for the queried phone number. Valid values:

*   **NORMAL**: The queried phone number can be reached.
*   **SHUTDOWN**: The queried phone number is suspended.
*   **POWER_OFF**: The phone is powered off.
*   **NOT_EXIST**: The queried phone number is a nonexistent number.
*   **DEFECT**: The queried phone number is invalid.
*   **UNKNOWN**: The queried phone number is unknown.

>  Due to system adjustment of the carrier, the BUSY, SUSPECTED_POWER_OFF, and POWER_OFF states cannot be returned for the numbers assigned by China Telecom. [For more information, see the official announcements](https://help.aliyun.com/document_detail/2489709.html).', example='NORMAL'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='68A40250-50CD-034C-B728-0BD135850177'),
}

model PhoneNumberStatusForSmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberStatusForSmsResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 300 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberStatusForSms(request: PhoneNumberStatusForSmsRequest): PhoneNumberStatusForSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberStatusForSms', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberStatusForVirtualRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization ID.', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, the value of this field is an 11-digit phone number.
*   If the value of Mask is MD5, the value of this field is a 32-bit encrypted string.
*   If the value of Mask is SHA256, the value of this field is a 64-bit encrypted string.

>  Letters in the encrypted strings are not case-sensitive.', example='139****0000', position='Query'),
  mask: string(name='Mask', description='The encryption method of the phone number. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberStatusForVirtualResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **OperatorLimit**: The carrier prohibits the query of the phone number.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    isPrivacyNumber?: boolean(name='IsPrivacyNumber', description='Indicate whether the phone number is a virtual number assigned by the carrier. Valid values:

*   **true**
*   **false**', example='true'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForVirtualResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberStatusForVirtualResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   You are charged only if the value of Code is OK and the value of IsPrivacyNumber is true or false.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 300 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberStatusForVirtual(request: PhoneNumberStatusForVirtualRequest): PhoneNumberStatusForVirtualResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberStatusForVirtual', 'POST', '/', 'json', false, 'json', request);
}

model PhoneNumberStatusForVoiceRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='Dd1r***4id', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be queried.

*   If the value of Mask is NORMAL, specify an 11-digit phone number in plaintext.
*   If the value of Mask is MD5, specify a 32-bit string that is encrypted by using MD5.
*   If the value of Mask is SHA256, specify a 64-bit string that is encrypted by using SHA256.

>  Letters in the encrypted strings are not case-sensitive.', example='139****1234', position='Query'),
  mask: string(name='Mask', description='The encryption method. Valid values:

*   **NORMAL**: plaintext
*   **MD5**
*   **SHA256**', example='NORMAL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PhoneNumberStatusForVoiceResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   **OperatorLimit**: The carrier prohibits the query of the phone number.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    carrier?: string(name='Carrier', description='The basic carrier who assigns the phone number. If the queried phone number involves mobile number portability, the carrier after mobile number portability is returned. Valid values:

*   **CMCC**: China Mobile
*   **CUCC**: China Unicom
*   **CTCC**: China Telecom

>  You are not allowed to query the phone numbers assigned by China Broadnet.', example='CTCC'),
    status?: string(name='Status', description='The returned status for the queried phone number. Valid values:

*   **NORMAL**: The queried phone number can be reached.
*   **SHUTDOWN**: The queried phone number is suspended.
*   **POWER_OFF**: The phone is powered off.
*   **NOT_EXIST**: The queried phone number is a nonexistent number.
*   **SUSPECTED_POWER_OFF**: The phone is suspected to be powered off.
*   **DEFECT**: The queried phone number is invalid.
*   **UNKNOWN**: The queried phone number is unknown.

>  Due to system adjustment of the carrier, the BUSY, SUSPECTED_POWER_OFF, and POWER_OFF states cannot be returned for the numbers assigned by China Telecom. [For more information, see the official announcements](https://help.aliyun.com/document_detail/2489709.html).', example='NORMAL'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The unique request ID. It is a common parameter and can be used to troubleshoot issues.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model PhoneNumberStatusForVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PhoneNumberStatusForVoiceResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   By default, only Alibaba Cloud accounts can call this operation. RAM users can call this operation only after the RAM users are granted the related permissions. For more information, see [Grant permissions to RAM users](~~154006~~).
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * ### [](#qps)QPS limits
  * You can call this operation up to 300 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function phoneNumberStatusForVoice(request: PhoneNumberStatusForVoiceRequest): PhoneNumberStatusForVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PhoneNumberStatusForVoice', 'POST', '/', 'json', false, 'json', request);
}

model QueryAvailableAuthCodeRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagId?: long(name='TagId', description='The tag ID.', example='22', position='Query'),
}

model QueryAvailableAuthCodeResponseBody = {
  code?: string(name='Code', description='The response code. **OK** indicates that the request is successful.', example='OK'),
  data?: [ string ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6ADDCD31-6BC7-5913-A47F-E29A07E37FEE'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='false'),
}

model QueryAvailableAuthCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvailableAuthCodeResponseBody(name='body'),
}

async function queryAvailableAuthCode(request: QueryAvailableAuthCodeRequest): QueryAvailableAuthCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAvailableAuthCode', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneNumberOnlineTimeRequest {
  authCode?: string(name='AuthCode', example='示例值示例值示例值', position='Query'),
  inputNumber?: string(name='InputNumber', example='示例值', position='Query'),
  mask?: string(name='Mask', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPhoneNumberOnlineTimeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    carrierCode?: string(name='CarrierCode', example='示例值示例值示例值'),
    verifyResult?: long(name='VerifyResult', example='29'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryPhoneNumberOnlineTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneNumberOnlineTimeResponseBody(name='body'),
}

async function queryPhoneNumberOnlineTime(request: QueryPhoneNumberOnlineTimeRequest): QueryPhoneNumberOnlineTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneNumberOnlineTime', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneTwiceTelVerifyRequest {
  authCode: string(name='AuthCode', example='示例值', position='Query'),
  inputNumber: string(name='InputNumber', example='示例值示例值示例值', position='Query'),
  mask: string(name='Mask', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', example='示例值示例值示例值', position='Query'),
}

model QueryPhoneTwiceTelVerifyResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    carrierCode?: string(name='CarrierCode', example='示例值示例值'),
    verifyResult?: long(name='VerifyResult', example='73'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryPhoneTwiceTelVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneTwiceTelVerifyResponseBody(name='body'),
}

async function queryPhoneTwiceTelVerify(request: QueryPhoneTwiceTelVerifyRequest): QueryPhoneTwiceTelVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneTwiceTelVerify', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagApplyRuleRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagId?: long(name='TagId', description='The tag ID.', example='61', position='Query'),
}

model QueryTagApplyRuleResponseBody = {
  code?: string(name='Code', description='The response code. **OK** indicates that the request is successful.', example='OK'),
  data?: {
    applyMaterialDesc?: string(name='ApplyMaterialDesc', description='The requirements for application materials.', example='Requirements for application materials'),
    autoAudit?: long(name='AutoAudit', description='Indicates whether the application is automatically approved.', example='16'),
    chargingStandardLink?: string(name='ChargingStandardLink', description='The URL for the billing documentation.', example='aliyundoc.com'),
    encryptedQuery?: long(name='EncryptedQuery', description='indicates whether encrypted queries are supported.', example='99'),
    needApplyMaterial?: long(name='NeedApplyMaterial', description='Indicates whether application materials are required.', example='46'),
    slaLink?: string(name='SlaLink', description='The URL for the service agreement.', example='example.aliyundoc.com'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-****-****-9DCE-B38165CE4C47'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='false'),
}

model QueryTagApplyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagApplyRuleResponseBody(name='body'),
}

async function queryTagApplyRule(request: QueryTagApplyRuleRequest): QueryTagApplyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagApplyRule', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagInfoBySelectionRequest {
  industryId?: long(name='IndustryId', description='The industry ID.', example='58', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneId?: long(name='SceneId', description='The scene ID.', example='83', position='Query'),
  tagId?: long(name='TagId', description='The tag ID.', example='71', position='Query'),
}

model QueryTagInfoBySelectionResponseBody = {
  code?: string(name='Code', description='The response code. **OK** indicates that the request is successful.', example='OK'),
  data?: [ 
    {
      authCodeList?: [ string ](name='AuthCodeList', description='The list of available authorization codes.'),
      complexityType?: string(name='ComplexityType'),
      demoAddress?: string(name='DemoAddress', description='The URL for the API demo.', example='https://help.aliyun.com/document_detail/388997.html?spm=a2c4g.2573870.0.0.3aa921cbOrtqJz'),
      docAddress?: string(name='DocAddress', description='The URL for the API documentation.', example='https://help.aliyun.com/document_detail/388997.html?spm=a2c4g.2573870.0.0.3aa921cbOrtqJz'),
      enumDefinitionAddress?: string(name='EnumDefinitionAddress', description='The URL for the definitions of the enumerated values.', example='example.aliyundoc.com'),
      flowName?: string(name='FlowName', description='The flow name.', example='process name'),
      industryId?: long(name='IndustryId', description='The industry ID.', example='83'),
      industryName?: string(name='IndustryName', description='The industry name.', example='logistics'),
      paramList?: [ 
        {
          code?: string(name='Code', description='The English name of the parameter.', example='preame'),
          hint?: string(name='Hint', description='The input hint.', example='none'),
          must?: boolean(name='Must', description='Indicates whether the parameter is required.', example='false'),
          name?: string(name='Name', description='The Chinese name of the parameter.', example='none'),
          type?: string(name='Type', description='The type. The code that corresponds to EnumUIWidgetTypes.', example='aqzx'),
          valueDict?: [ 
            {
              code?: string(name='Code', description='The English name.', example='Aliyun'),
              desc?: string(name='Desc', description='The Chinese name.', example='阿里云'),
            }
          ](name='ValueDict', description='The definitions of the enumerated values such as Code or Desc.'),
        }
      ](name='ParamList', description='The list of tag parameters.'),
      richTextDescription?: string(name='RichTextDescription'),
      sceneId?: long(name='SceneId', description='The scene ID.', example='41'),
      sceneName?: string(name='SceneName', description='The scene name.', example='General scenario'),
      tagId?: long(name='TagId', description='The tag ID.', example='31'),
      tagName?: string(name='TagName', description='The tag name.', example='Number ownership'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='1C3B8084-3A7D-570B-BC84-BF945A9CF65E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='false'),
}

model QueryTagInfoBySelectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagInfoBySelectionResponseBody(name='body'),
}

async function queryTagInfoBySelection(request: QueryTagInfoBySelectionRequest): QueryTagInfoBySelectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagInfoBySelection', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagListPageRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='The page number. Default value: **1**.', example='18', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='66', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTagListPageResponseBody = {
  code?: string(name='Code', description='The response code. **OK** indicates that the request is successful.', example='OK'),
  data?: {
    pageNo?: long(name='PageNo', description='The page number.', example='11'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='24'),
    records?: [ 
      {
        apiName?: string(name='ApiName', description='The API operation that is called by the frontend.', example='TwoElementsVerification'),
        code?: string(name='Code', description='Code', example='OK'),
        docAddress?: string(name='DocAddress', description='The URL for the API documentation.', example='https://help.aliyun.com/document_detail/388997.html?spm=a2c4g.388997.0.0.cf804cc7DX4vlP'),
        id?: long(name='Id', description='The tag ID.', example='75'),
        industryId?: long(name='IndustryId', description='The industry ID.', example='2'),
        industryName?: string(name='IndustryName', description='The industry name.', example='Test'),
        introduction?: string(name='Introduction', description='The tag description.', example='for autotest new'),
        isOpen?: long(name='IsOpen', description='Indicates whether the number is activated.', example='45'),
        name?: string(name='Name', description='The tag name.', example='Aliyun'),
        saleStatusStr?: string(name='SaleStatusStr', description='*   0: The number is hidden.
*   1: The number is public.', example='1'),
        sceneId?: long(name='SceneId', description='The scene ID.', example='13'),
        sceneName?: string(name='SceneName', description='The scene name.', example='check'),
      }
    ](name='Records', description='The retruned data.'),
    totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='32'),
    totalPage?: long(name='TotalPage', description='The total number of returned pages.', example='91'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4475657-BB7E-585D-9E09-37934F096103'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='true'),
}

model QueryTagListPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagListPageResponseBody(name='body'),
}

async function queryTagListPage(request: QueryTagListPageRequest): QueryTagListPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagListPage', 'POST', '/', 'json', false, 'json', request);
}

model QueryUsageStatisticsByTagIdRequest {
  beginTime?: string(name='BeginTime', description='The beginning of the time range to query.', example='20230308', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='20230406', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagId?: long(name='TagId', description='The tag ID.', example='14', position='Query'),
}

model QueryUsageStatisticsByTagIdResponseBody = {
  code?: string(name='Code', description='The response code. **OK** indicates that the request is successful.', example='OK'),
  data?: [ 
    {
      authorizationCode?: string(name='AuthorizationCode', description='The authorization code.', example='g61I8UV5zd'),
      failTotal?: long(name='FailTotal', description='The numbers for which the query failed.', example='71'),
      gmtDateStr?: string(name='GmtDateStr', description='The creation time.', example='20230312'),
      id?: long(name='Id', description='The ID of the authorization code usage record.', example='17'),
      industryName?: string(name='IndustryName', description='The industry name.', example='Home security'),
      partnerId?: long(name='PartnerId', description='The customer product ID (PID).', example='89'),
      sceneName?: string(name='SceneName', description='The scene name.', example='Return visit'),
      successTotal?: long(name='SuccessTotal', description='The numbers for which the query succeeded.', example='93'),
      tagId?: long(name='TagId', description='The tag name.', example='69'),
      tagName?: string(name='TagName', description='The tag name.', example='Alibaba Cloud Query'),
      total?: long(name='Total', description='The total quantity of numbers that are involved in the query.', example='41'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D45CC751-34DF-5797-81FB-9A2ED6DC024B'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.

*   true
*   false', example='true'),
}

model QueryUsageStatisticsByTagIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUsageStatisticsByTagIdResponseBody(name='body'),
}

async function queryUsageStatisticsByTagId(request: QueryUsageStatisticsByTagIdRequest): QueryUsageStatisticsByTagIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUsageStatisticsByTagId', 'POST', '/', 'json', false, 'json', request);
}

model ThreeElementsVerificationRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='QASDW@#**', position='Query'),
  certCode: string(name='CertCode', description='The ID card number to be verified.

*   If the value of Mask is NORMAL, specify a value in plaintext for this field.
*   If the value of Mask is MD5, specify a MD5-encrypted value for this field.
*   If the value of Mask is SHA256, specify a SHA256-encrypted value for this field.

>  Letters in the encrypted strings are not case-sensitive.', example='83d8040d3cb2181e04****dc6ff5566d4493876a4a5da782887446356b0a787e', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be verified.

*   If the value of Mask is NORMAL, specify a value in plaintext for this field.
*   If the value of Mask is MD5, specify a MD5-encrypted value for this field.
*   If the value of Mask is SHA256, specify a SHA256-encrypted value for this field.

>  Letters in the encrypted strings are not case-sensitive.', example='1390000****', position='Query'),
  mask: string(name='Mask', description='The encryption method. Valid values:

*   **NORMAL**: The phone number is not encrypted.
*   **MD5**
*   **SHA256**', example='MD5', position='Query'),
  name: string(name='Name', description='The name to be verified.

*   If the value of Mask is NORMAL, specify a value in plaintext for this field.
*   If the value of Mask is MD5, specify a MD5-encrypted value for this field.
*   If the value of Mask is SHA256, specify a SHA256-encrypted value for this field.

>  Letters in the encrypted strings are not case-sensitive.', example='Aliyun', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ThreeElementsVerificationResponseBody = {
  code?: string(name='Code', description='The response code.

*   **OK**: The request is successful.
*   For more information, see Error codes in this documentation.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier', description='The basic carrier. Valid values:

*   **China Mobile**
*   **China Unicom**
*   **China Telecom**', example='China Mobile'),
    isConsistent?: int32(name='IsConsistent', description='Indicates whether the specified name, phone number, and ID card number belong to the same user. Valid values:

* **1**: The specified name, phone number, and ID card number belong to the same user.
* **0**: The specified name, phone number, and ID card number do not belong to the same user.
* **2**: The specified name, phone number, and ID card number cannot be found.

**Note** The phone number registration data of a user is usually updated one or three days after registration. The registration data can be queried only after the update. The following table shows the verification results under different phone number states.

|Carrier/Phone number state|Out-of-service|Nonexistent|Canceled|
|---|---|---|---|
|China Mobile|Verifications can be carried out normally.|The specified name, phone number, and ID card number cannot be found.|The specified name, phone number, and ID card number cannot be found.|
|China Unicom|Verifications can be carried out normally.|The specified name, phone number, and ID card number do not belong to the same user.|The specified name, phone number, and ID card number do not belong to the same user.|
|China Telecom|Verifications can be carried out normally.|The specified name, phone number, and ID card number cannot be found.|The specified name, phone number, and ID card number cannot be found.|', example='1'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model ThreeElementsVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ThreeElementsVerificationResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * *   You are charged only if the value of Code is OK and the value of IsConsistent is not 2.
  * ### [](#qps)QPS limits
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function threeElementsVerification(request: ThreeElementsVerificationRequest): ThreeElementsVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ThreeElementsVerification', 'POST', '/', 'json', false, 'json', request);
}

model TwoElementsVerificationRequest {
  authCode: string(name='AuthCode', description='The authorization code.

>  On the **My Applications** page in the [Cell Phone Number Service console](https://dytns.console.aliyun.com/analysis/apply), you can obtain the authorization code (also known as authorization ID).', example='QASDW@#**', position='Query'),
  inputNumber: string(name='InputNumber', description='The phone number to be verified.

*   If the value of Mask is NORMAL, specify a value in plaintext for this field.
*   If the value of Mask is MD5, specify a MD5-encrypted value for this field.
*   If the value of Mask is SHA256, specify a SHA256-encrypted value for this field.

>  Letters in the encrypted strings are not case-sensitive.', example='1390000****', position='Query'),
  mask: string(name='Mask', description='The encryption method. Valid values:

*   **NORMAL**: plaintext
*   **MD5**
*   **SHA256**', example='MD5', position='Query'),
  name: string(name='Name', description='The name to be verified.

*   If the value of Mask is NORMAL, specify a value in plaintext for this field.
*   If the value of Mask is MD5, specify a MD5-encrypted value for this field.
*   If the value of Mask is SHA256, specify a SHA256-encrypted value for this field.

>  Letters in the encrypted strings are not case-sensitive.', example='Aliyun', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model TwoElementsVerificationResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   **OK**: The request is successful.
*   For more information, see Error codes in this documentation.
*   **RequestFrequencyLimit**: Repeated queries for the same phone number or name at a high frequency within a short period of time are prohibited due to restrictions that are set by carriers. If this error code is returned, please try again later.', example='OK'),
  data?: {
    basicCarrier?: string(name='BasicCarrier', description='The basic carriers. Valid values:

*   **China Mobile**
*   **China Unicom**
*   **China Telecom**

>  You are not allowed to verify numbers assigned by China Broadnet.', example='China Mobile'),
    isConsistent?: int32(name='IsConsistent', description='Indicates whether the specified name and phone number belong to the same user. Valid values:

* **1**: The specified name and phone number belong to the same user.

* **0**: The specified name and phone number do not belong to the same user.

* **2**: The specified name and phone number cannot be found.

The phone number registration data of a user is usually updated one or three days after registration. The registration data can be queried only after the update. The following table shows the verification results under different phone number states.

|Carrier/Phone number state|Out-of-service|Nonexistent|Canceled|
|---|---|---|---|
|China Mobile|Verifications can be carried out normally.|The specified name and phone number cannot be found.|The specified name and phone number cannot be found.|
|China Unicom|Verifications can be carried out normally.|The specified name and phone number do not belong to the same user.|The specified name and phone number do not belong to the same user.|
|China Telecom|Verifications can be carried out normally.|The specified name and phone number cannot be found.|The specified name and phone number cannot be found.|', example='1'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE****'),
}

model TwoElementsVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TwoElementsVerificationResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the [billing](~~154751~~) of Cell Phone Number Service.
  * *   Before you call this operation, perform the following operations: Log on to the Cell Phone Number Service console. On the [Labels](https://dytns.console.aliyun.com/analysis/square) page, find the label that you want to use, click **Activate Now**, enter the required information, and then submit your application. After your application is approved, you can use the label.
  * *   You are charged only if the value of Code is OK and the value of IsConsistent is not 2.
  * ### [](#qps)QPS limits
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function twoElementsVerification(request: TwoElementsVerificationRequest): TwoElementsVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TwoElementsVerification', 'POST', '/', 'json', false, 'json', request);
}

model UAIDCollectionRequest {
  authCode: string(name='AuthCode', example='示例值', position='Query'),
  carrier?: string(name='Carrier', example='示例值', position='Query'),
  ip?: string(name='Ip', example='示例值示例值示例值', position='Query'),
  outId: string(name='OutId', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  province?: string(name='Province', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  token: string(name='Token', example='示例值示例值', position='Query'),
  userGrantId?: string(name='UserGrantId', example='示例值示例值', position='Query'),
}

model UAIDCollectionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    uaid?: string(name='Uaid', example='示例值'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值示例值'),
}

model UAIDCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UAIDCollectionResponseBody(name='body'),
}

async function uAIDCollection(request: UAIDCollectionRequest): UAIDCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UAIDCollection', 'POST', '/', 'json', false, 'json', request);
}

model UAIDConversionRequest {
  authCode: string(name='AuthCode', example='示例值', position='Query'),
  carrier: string(name='Carrier', example='示例值示例值', position='Query'),
  outId?: string(name='OutId', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uaidList?: string(name='UaidList', example='示例值示例值示例值', position='Query'),
}

model UAIDConversionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值'),
  message?: string(name='Message', example='示例值'),
  model?: {
    phoneList?: string(name='PhoneList', example='示例值示例值示例值'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
}

model UAIDConversionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UAIDConversionResponseBody(name='body'),
}

async function uAIDConversion(request: UAIDConversionRequest): UAIDConversionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UAIDConversion', 'POST', '/', 'json', false, 'json', request);
}

model UAIDVerificationRequest {
  authCode: string(name='AuthCode', example='HwD97InG', position='Query'),
  carrier: string(name='Carrier', example='CM', position='Query'),
  ip?: string(name='Ip', example='示例值', position='Query'),
  outId?: string(name='OutId', example='b8b5b3a*******0b9893484fdf412c99', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  province?: string(name='Province', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  token: string(name='Token', example='MIGfMA0********3DQEBAQUAA4GNADCB', position='Query'),
  userGrantId?: string(name='UserGrantId', example='Md****a3Em', position='Query'),
}

model UAIDVerificationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    uaid?: string(name='Uaid', example='B1E0C1********9F757AF52A035'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='68A40250-50CD-034C-B728-0BD******177'),
}

model UAIDVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UAIDVerificationResponseBody(name='body'),
}

async function uAIDVerification(request: UAIDVerificationRequest): UAIDVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UAIDVerification', 'POST', '/', 'json', false, 'json', request);
}

