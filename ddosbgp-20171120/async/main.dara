/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ddosbgp';
  @version = '2017-11-20';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ddosbgp.aliyuncs.com',
    cn-beijing = 'ddosbgp.aliyuncs.com',
    cn-zhangjiakou = 'ddosbgp.aliyuncs.com',
    cn-huhehaote = 'ddosbgp.aliyuncs.com',
    cn-hangzhou = 'ddosbgp.aliyuncs.com',
    cn-shanghai = 'ddosbgp.aliyuncs.com',
    cn-shenzhen = 'ddosbgp.aliyuncs.com',
    ap-northeast-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'ddosbgp.aliyuncs.com',
    eu-central-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'ddosbgp.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-shanghai-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-north-2-gov-1 = 'ddosbgp.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddIpRequest {
  ipList: string(name='IpList', position='Query'),
  packId: string(name='PackId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model AddIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddIpResponse = {
  headers: map[string]string(name='headers'),
  body: AddIpResponseBody(name='body'),
}

async function addIp(request: AddIpRequest): AddIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIp', 'POST', '/', 'json', false, 'json', request);
}

model AddProductRequest {
  packId: string(name='PackId', position='Query'),
  product: string(name='Product', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model AddProductResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddProductResponse = {
  headers: map[string]string(name='headers'),
  body: AddProductResponseBody(name='body'),
}

async function addProduct(request: AddProductRequest): AddProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddProduct', 'POST', '/', 'json', false, 'json', request);
}

model CheckGrantRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CheckGrantResponseBody = {
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
}

model CheckGrantResponse = {
  headers: map[string]string(name='headers'),
  body: CheckGrantResponseBody(name='body'),
}

async function checkGrant(request: CheckGrantRequest): CheckGrantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckGrant', 'GET', '/', 'json', false, 'json', request);
}

model DeleteBlackholeRequest {
  ip: string(name='Ip', position='Query'),
  packId: string(name='PackId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteBlackholeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBlackholeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBlackholeResponseBody(name='body'),
}

async function deleteBlackhole(request: DeleteBlackholeRequest): DeleteBlackholeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBlackhole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpRequest {
  ipList: string(name='IpList', position='Query'),
  packId: string(name='PackId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIpResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpResponseBody(name='body'),
}

async function deleteIp(request: DeleteIpRequest): DeleteIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductRequest {
  packId: string(name='PackId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProduct', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosEventRequest {
  endTime: int32(name='EndTime', position='Query'),
  packId: string(name='PackId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
}

model DescribeDdosEventResponseBody = {
  events?: [ 
    {
      endTime?: int32(name='EndTime'),
      ip?: string(name='Ip'),
      mbps?: int32(name='Mbps'),
      pps?: int32(name='Pps'),
      startTime?: int32(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Events'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDdosEventResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosEventResponseBody(name='body'),
}

async function describeDdosEvent(request: DescribeDdosEventRequest): DescribeDdosEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceListRequest {
  instanceIdList?: string(name='InstanceIdList', position='Query'),
  packIdList?: string(name='PackIdList', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeInstanceListResponseBody = {
  instanceList?: [ 
    {
      expireTime?: long(name='ExpireTime'),
      gmtCreate?: long(name='GmtCreate'),
      instanceId?: string(name='InstanceId'),
      packId?: string(name='PackId'),
      product?: string(name='Product'),
      remark?: string(name='Remark'),
      status?: string(name='Status'),
    }
  ](name='InstanceList'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceListResponseBody(name='body'),
}

async function describeInstanceList(request: DescribeInstanceListRequest): DescribeInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnDemandInstanceRequest {
  pageNo: int32(name='PageNo', description='The page number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance that you want to query. 

>  You can call the [DescribeRegions](https://www.alibabacloud.com/help/en/ddos-protection/latest/instances-describeregions) operation to query the most recent region list.', example='cn-zhangjiakou', position='Query'),
}

model DescribeOnDemandInstanceResponseBody = {
  instances?: [ 
    {
      defenseStatus?: string(name='DefenseStatus', description='The protection status of the on-demand instance. Valid values:

- **Defense**: The on-demand instance is protecting your assets, which indicates that traffic is routed to the on-demand instance.
- **UnDefense**: The on-demand instance does not protect your assets.', example='Defense'),
      instanceId?: string(name='InstanceId', description='The ID of the on-demand instance.', example='ddosbgp-cn-z2q1qzxb****'),
      ipnet?: [ string ](name='Ipnet', description='The CIDR block of the on-demand instance.'),
      regionId?: string(name='RegionId', description='The region ID of the on-demand instance.', example='cn-zhangjiakou'),
      remark?: string(name='Remark', description='The description of the on-demand instance.', example='123'),
    }
  ](name='Instances', description='The details of the on-demand instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: string(name='Total', description='The number of entries that were returned.', example='1'),
}

model DescribeOnDemandInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOnDemandInstanceResponseBody(name='body'),
}

/**
  * Queries the information about on-demand instances, such as whether an on-demand instance is enabled and the CIDR block of each on-demand instance.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeOnDemandInstance(request: DescribeOnDemandInstanceRequest): DescribeOnDemandInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnDemandInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpEntitiesRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeOpEntitiesResponseBody = {
  opEntities?: [ 
    {
      entityObject?: string(name='EntityObject'),
      entityType?: int32(name='EntityType'),
      gmtCreate?: long(name='GmtCreate'),
      opAccount?: string(name='OpAccount'),
      opAction?: int32(name='OpAction'),
      opDesc?: string(name='OpDesc'),
    }
  ](name='OpEntities'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOpEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpEntitiesResponseBody(name='body'),
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpEntities', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackRequest {
  packId: string(name='PackId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribePackResponseBody = {
  packInfo?: {
    availableDeleteBlackholeCount?: int32(name='AvailableDeleteBlackholeCount'),
    ipList?: [ 
      {
        ip?: string(name='Ip'),
      }
    ](name='IpList'),
    packConfig?: {
      ipAdvanceThre?: int32(name='IpAdvanceThre'),
      ipBasicThre?: int32(name='IpBasicThre'),
      ipSpec?: int32(name='IpSpec'),
      packAdvThre?: int32(name='PackAdvThre'),
      packBasicThre?: int32(name='PackBasicThre'),
    }(name='PackConfig'),
    region?: string(name='Region'),
  }(name='PackInfo'),
  requestId?: string(name='RequestId'),
}

model DescribePackResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackResponseBody(name='body'),
}

async function describePack(request: DescribePackRequest): DescribePackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePack', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackListRequest {
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribePackListResponseBody = {
  packList?: [ 
    {
      availableDeleteBlackholeCount?: int32(name='AvailableDeleteBlackholeCount'),
      packConfig?: {
        ipAdvanceThre?: int32(name='IpAdvanceThre'),
        ipBasicThre?: int32(name='IpBasicThre'),
        ipSpec?: int32(name='IpSpec'),
        packAdvThre?: int32(name='PackAdvThre'),
        packBasicThre?: int32(name='PackBasicThre'),
      }(name='PackConfig'),
      packId?: string(name='PackId'),
      region?: string(name='Region'),
    }
  ](name='PackList'),
  requestId?: string(name='RequestId'),
}

model DescribePackListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackListResponseBody(name='body'),
}

async function describePackList(request: DescribePackListRequest): DescribePackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackPaidTrafficRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePackPaidTrafficResponseBody = {
  packPaidTraffics?: [ 
    {
      baseBandwidth?: int32(name='BaseBandwidth'),
      elasticBandwidth?: int32(name='ElasticBandwidth'),
      instanceId?: string(name='InstanceId'),
      maxAttack?: float(name='MaxAttack'),
      paidCapacity?: float(name='PaidCapacity'),
      startTime?: long(name='StartTime'),
      totalCapacity?: float(name='TotalCapacity'),
    }
  ](name='PackPaidTraffics'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePackPaidTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackPaidTrafficResponseBody(name='body'),
}

async function describePackPaidTraffic(request: DescribePackPaidTrafficRequest): DescribePackPaidTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackPaidTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcePackInstancesRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeResourcePackInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePacks?: [ 
    {
      currCapacity?: long(name='CurrCapacity'),
      endTime?: long(name='EndTime'),
      initCapacity?: long(name='InitCapacity'),
      resourcePackId?: string(name='ResourcePackId'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='ResourcePacks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeResourcePackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackInstancesResponseBody(name='body'),
}

async function describeResourcePackInstances(request: DescribeResourcePackInstancesRequest): DescribeResourcePackInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcePackInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcePackStatisticsRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeResourcePackStatisticsResponseBody = {
  availablePackNum?: int32(name='AvailablePackNum'),
  requestId?: string(name='RequestId'),
  totalCurrCapacity?: long(name='TotalCurrCapacity'),
  totalInitCapacity?: long(name='TotalInitCapacity'),
  totalUsedCapacity?: long(name='TotalUsedCapacity'),
}

model DescribeResourcePackStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackStatisticsResponseBody(name='body'),
}

async function describeResourcePackStatistics(request: DescribeResourcePackStatisticsRequest): DescribeResourcePackStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcePackStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcePackUsageRequest {
  endTime: long(name='EndTime', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeResourcePackUsageResponseBody = {
  endTime?: long(name='EndTime'),
  interval?: long(name='Interval'),
  packUsages?: [ 
    {
      time?: long(name='Time'),
      traffic?: float(name='Traffic'),
    }
  ](name='PackUsages'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
}

model DescribeResourcePackUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackUsageResponseBody(name='body'),
}

async function describeResourcePackUsage(request: DescribeResourcePackUsageRequest): DescribeResourcePackUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcePackUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTopTrafficRequest {
  endTime: string(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp. Unit: seconds.', example='1563445054', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  ipnet?: string(name='Ipnet', description='The CIDR block of the on-demand instance that you want to query.', example='47.XX.XX.0/24', position='Query'),
  pageNo?: int32(name='PageNo', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Maximum value: **50**.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-zhangjiakou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the on-demand instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
  rn?: int32(name='Rn', description='The number of IP addresses from which the most traffic is forwarded. Default value: **1**, which indicates the IP address from which the most traffic is forwarded.', example='1', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. This value is a UNIX timestamp. Unit: seconds.', example='1560853054', position='Query'),
}

model DescribeTopTrafficResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', description='The total number of entries returned.', example='1'),
  trafficList?: [ 
    {
      attackBps?: int32(name='AttackBps', description='The attack traffic. Unit: Kbit/s.', example='0'),
      attackPps?: int32(name='AttackPps', description='The number of attack data packets. Unit: packets per second (pps).', example='0'),
      bps?: int32(name='Bps', description='The total traffic. Unit: Kbit/s.', example='2919212'),
      ip?: string(name='Ip', description='The IP address from which the most traffic is forwarded by the on-demand instance.', example='47.XX.XX.0'),
      pps?: int32(name='Pps', description='The total number of data packets. Unit: pps.', example='100000'),
    }
  ](name='TrafficList', description='The information about the traffic that is forwarded by the on-demand instance.'),
}

model DescribeTopTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTopTrafficResponseBody(name='body'),
}

/**
  * You can call the DescribeTopTraffic operation to query the top N IP addresses from which the most traffic is forwarded by an on-demand instance within a specific period. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeTopTraffic(request: DescribeTopTrafficRequest): DescribeTopTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTopTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficRequest {
  endTime: int32(name='EndTime', position='Query'),
  interval: int32(name='Interval', position='Query'),
  name: string(name='Name', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
}

model DescribeTrafficResponseBody = {
  flowList?: [ 
    {
      flowType?: string(name='FlowType'),
      kbps?: int32(name='Kbps'),
      name?: string(name='Name'),
      pps?: int32(name='Pps'),
      time?: int32(name='Time'),
    }
  ](name='FlowList'),
  requestId?: string(name='RequestId'),
}

model DescribeTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficResponseBody(name='body'),
}

async function describeTraffic(request: DescribeTrafficRequest): DescribeTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTraffic', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOnDemaondDefenseStatusRequest {
  defenseStatus: string(name='DefenseStatus', description='The protection status of the on-demand instance. Valid values:

*   **Defense**: enables the on-demand instance.
*   **UnDefense**: disables the on-demand instance.', example='Defense', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-zhangjiakou', position='Query'),
}

model ModifyOnDemaondDefenseStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ModifyOnDemaondDefenseStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOnDemaondDefenseStatusResponseBody(name='body'),
}

async function modifyOnDemaondDefenseStatus(request: ModifyOnDemaondDefenseStatusRequest): ModifyOnDemaondDefenseStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOnDemaondDefenseStatus', 'POST', '/', 'json', false, 'json', request);
}

