/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'adp';
  @version = '2021-07-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ComponentVersion {
  appVersion?: string(name='appVersion'),
  componentName?: string(name='componentName'),
  componentUID?: string(name='componentUID'),
  description?: string(name='description'),
  documents?: string(name='documents'),
  imagesMapping?: string(name='imagesMapping'),
  namespace?: string(name='namespace'),
  orchestrationType?: string(name='orchestrationType'),
  orchestrationValues?: string(name='orchestrationValues'),
  packageURL?: string(name='packageURL'),
  parentComponent?: boolean(name='parentComponent'),
  platforms?: [
    Platform
  ](name='platforms'),
  readme?: string(name='readme'),
  resources?: string(name='resources'),
  source?: string(name='source'),
  uid?: string(name='uid'),
  version?: string(name='version'),
}

model Disk {
  capacity?: int32(name='capacity'),
  fsType?: string(name='fsType'),
  mountPoint?: string(name='mountPoint'),
  name?: string(name='name'),
  remain?: int32(name='remain'),
  type?: string(name='type'),
}

model ExportPort {
  cidrIP?: string(name='cidrIP', example='0.0.0.0/0'),
  portRange?: string(name='portRange', example='53/65000'),
  protocol?: string(name='protocol', example='all/tcp/udp'),
  unallowed?: boolean(name='unallowed', example='false'),
}

model FoundationComponentReferenceDetail {
  appVersion?: string(name='appVersion'),
  category?: string(name='category'),
  class?: string(name='class'),
  componentDescription?: string(name='componentDescription'),
  componentName?: string(name='componentName'),
  componentReferenceUID?: string(name='componentReferenceUID'),
  componentUID?: string(name='componentUID'),
  componentVersionDescription?: string(name='componentVersionDescription'),
  componentVersionUID?: string(name='componentVersionUID'),
  createdAt?: string(name='createdAt'),
  documents?: string(name='documents'),
  enable?: boolean(name='enable'),
  imagesMapping?: string(name='imagesMapping'),
  namespace?: string(name='namespace'),
  orchestrationType?: string(name='orchestrationType'),
  orchestrationValues?: string(name='orchestrationValues'),
  parentComponent?: boolean(name='parentComponent'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID'),
  priority?: int32(name='priority'),
  provider?: string(name='provider'),
  public?: boolean(name='public'),
  readme?: string(name='readme'),
  relationUID?: string(name='relationUID'),
  releaseName?: string(name='releaseName'),
  resources?: string(name='resources'),
  sequence?: int32(name='sequence'),
  singleton?: boolean(name='singleton'),
  source?: string(name='source'),
  values?: string(name='values'),
  version?: string(name='version'),
}

model FoundationVersion {
  clusterConfigSchema?: string(name='clusterConfigSchema'),
  clusterEngines: [ 
    {
      infrastructureStatements?: [ 
        {
          default?: boolean(name='default', example='false'),
          distroName?: string(name='distroName', example='CentOS, Ubuntu, Anolis, Kylin, etc'),
          distroVersion?: string(name='distroVersion', example='7.6, 7.9, V10, etc'),
          platform?: Platform(name='platform'),
        }
      ](name='infrastructureStatements'),
      networkList?: [ 
        {
          ipFamilies?: [ string ](name='ipFamilies'),
          name?: string(name='name', example='Calico'),
        }
      ](name='networkList'),
      packageTools: [ 
        {
          image?: string(name='image'),
          installToolPackages?: [ 
            {
              architecture: string(name='architecture', example='ENUM:["amd64","arm64"]'),
              os: string(name='os', example='ENUM:["linux","windows"]'),
              url?: string(name='url'),
            }
          ](name='installToolPackages'),
          name?: string(name='name'),
          packageFormat: string(name='packageFormat', example='ENUM:["HopctlPackage","CloudImage"]'),
          type?: string(name='type', example='ENUM:["Hopctl","HopctlSealer"]'),
          version?: string(name='version'),
        }
      ](name='packageTools'),
      packages?: [ 
        {
          architecture: string(name='architecture', example='ENUM:["amd64","arm64"]'),
          os: string(name='os', example='ENUM:["linux","windows"]'),
          platforms?: [
            Platform
          ](name='platforms'),
          url: string(name='url'),
        }
      ](name='packages'),
      type: string(name='type', example='ENUM:["TRIDENT","ACK-D"]'),
      version: string(name='version'),
    }
  ](name='clusterEngines'),
  defaultClusterConfig?: string(name='defaultClusterConfig'),
  description?: string(name='description'),
  documents?: string(name='documents'),
  driver?: {
    components?: [ 
      {
        name?: string(name='name'),
        version?: string(name='version'),
      }
    ](name='components'),
  }(name='driver'),
  features?: [ string ](name='features'),
  isDefault?: boolean(name='isDefault'),
  labels?: string(name='labels'),
  name: string(name='name', example='ADP 底座'),
  packageTools?: [ 
    {
      name?: string(name='name'),
      version?: string(name='version'),
    }
  ](name='packageTools'),
  platforms?: [
    Platform
  ](name='platforms'),
  specName?: string(name='specName'),
  status: string(name='status', example='Testing'),
  tools?: {
    siteSurvey?: {
      clusterCheckerURL?: string(name='clusterCheckerURL'),
      clusterInfoBrief?: string(name='clusterInfoBrief'),
    }(name='siteSurvey'),
  }(name='tools'),
  type: string(name='type', example='trident'),
  uid?: string(name='uid'),
  userWhiteList?: [ string ](name='userWhiteList'),
  version: string(name='version'),
}

model GetInstanceInfoResponse {
  annotations?: map[string]string(name='annotations'),
  arch?: string(name='arch'),
  clusterLabels?: map[string]string(name='clusterLabels'),
  clusterTaints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='clusterTaints'),
  cpu?: string(name='cpu'),
  dataDisk?: [
    Disk
  ](name='dataDisk'),
  hostName?: string(name='hostName'),
  identifier?: string(name='identifier'),
  imageID?: string(name='imageID'),
  instanceType?: string(name='instanceType'),
  internetBandwidth?: int32(name='internetBandwidth'),
  kernel?: string(name='kernel'),
  labels?: map[string]string(name='labels'),
  macAddress?: string(name='macAddress'),
  memory?: string(name='memory'),
  networkCards?: [ 
    {
      ip?: string(name='ip'),
      name?: string(name='name'),
    }
  ](name='networkCards'),
  os?: string(name='os'),
  osVersion?: string(name='osVersion'),
  privateIP?: string(name='privateIP'),
  publicIP?: string(name='publicIP'),
  rootPassword?: string(name='rootPassword'),
  systemDisk?: [
    Disk
  ](name='systemDisk'),
  systemInfo?: string(name='systemInfo'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints'),
  uid?: string(name='uid'),
}

model GetPayAsYouGoPriceData {
  moduleList?: [ 
    {
      config?: string(name='Config'),
      moduleCode?: string(name='ModuleCode'),
      priceType?: string(name='PriceType'),
    }
  ](name='ModuleList'),
  ownerId?: string(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  region?: string(name='Region'),
  subscriptionType?: string(name='SubscriptionType'),
}

model InstanceInfo {
  annotations?: map[string]string(name='annotations'),
  arch?: string(name='arch'),
  clusterLabels?: map[string]string(name='clusterLabels'),
  clusterTaints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='clusterTaints'),
  clusterUID?: string(name='clusterUID'),
  cpu?: string(name='cpu'),
  createdAt?: string(name='createdAt'),
  dataDisk?: [
    Disk
  ](name='dataDisk'),
  diskConfigAnnotations?: map[string]string(name='diskConfigAnnotations'),
  hostName?: string(name='hostName'),
  identifier?: string(name='identifier'),
  imageID?: string(name='imageID'),
  instanceType?: string(name='instanceType'),
  internetBandwidth?: int32(name='internetBandwidth'),
  kernel?: string(name='kernel'),
  labels?: map[string]string(name='labels'),
  macAddress?: string(name='macAddress'),
  memory?: string(name='memory'),
  networkCards?: [ 
    {
      ip?: string(name='ip'),
      name?: string(name='name'),
    }
  ](name='networkCards'),
  os?: string(name='os'),
  osVersion?: string(name='osVersion'),
  privateIP?: string(name='privateIP'),
  publicIP?: string(name='publicIP'),
  rootPassword?: string(name='rootPassword'),
  systemDisk?: [
    Disk
  ](name='systemDisk'),
  systemInfo?: string(name='systemInfo'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints'),
  uid: string(name='uid'),
}

model LabelSelector {
  matchExpressions?: [ 
    {
      key?: string(name='key', example='key1'),
      operator?: string(name='operator'),
      values?: [ string ](name='values'),
    }
  ](name='matchExpressions'),
  matchLabels?: map[string]string(name='matchLabels', example='key:value'),
}

model Platform {
  architecture?: string(name='architecture'),
  os?: string(name='os'),
}

model ProductComponentRelationDetail {
  appVersion?: string(name='appVersion'),
  category?: string(name='category'),
  class?: string(name='class'),
  componentName?: string(name='componentName'),
  componentOrchestrationValues?: string(name='componentOrchestrationValues'),
  componentUID?: string(name='componentUID'),
  componentVersionSpecUID?: string(name='componentVersionSpecUID'),
  componentVersionSpecValues?: string(name='componentVersionSpecValues'),
  componentVersionUID?: string(name='componentVersionUID'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  documents?: string(name='documents'),
  enable?: boolean(name='enable'),
  imagesMapping?: string(name='imagesMapping'),
  namespace?: string(name='namespace'),
  orchestrationType?: string(name='orchestrationType'),
  parentComponent?: boolean(name='parentComponent'),
  parentComponentVersionRelationUID?: string(name='parentComponentVersionRelationUID'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID'),
  policy?: {
    multiCluster?: {
      targetClusters?: [ string ](name='targetClusters'),
    }(name='multiCluster'),
  }(name='policy'),
  priority?: int32(name='priority'),
  productVersionUID?: string(name='productVersionUID'),
  provider?: string(name='provider'),
  public?: boolean(name='public'),
  readme?: string(name='readme'),
  relationUID?: string(name='relationUID'),
  releaseName?: string(name='releaseName'),
  resources?: string(name='resources'),
  sequence?: int32(name='sequence'),
  singleton?: boolean(name='singleton'),
  source?: string(name='source'),
  version?: string(name='version'),
}

model Resource {
  cpu?: {
    required?: int32(name='required', example='4'),
  }(name='cpu'),
  hostname?: string(name='hostname'),
  identifier: string(name='identifier'),
  image?: {
    id?: string(name='id'),
    nameRegex?: string(name='nameRegex', example='^centos_7'),
  }(name='image'),
  instanceType?: string(name='instanceType'),
  memory?: {
    required?: int32(name='required', example='8'),
  }(name='memory'),
  ports?: [
    ExportPort
  ](name='ports'),
  publicIP?: {
    bandwidth?: int32(name='bandwidth', example='100'),
    required?: int32(name='required', example='1'),
  }(name='publicIP'),
  replica?: int32(name='replica'),
  storage?: [ 
    {
      required?: int32(name='required'),
    }
  ](name='storage'),
}

model AddEnvironmentNodesRequest {
  uid?: string(name='uid', position='Path'),
  applicationDisk?: string(name='applicationDisk', example='/dev/sdb', position='Body'),
  cpu?: int32(name='cpu', position='Body'),
  dataDisk?: [ 
    {
      name?: string(name='name'),
      required?: int32(name='required'),
    }
  ](name='dataDisk', position='Body'),
  etcdDisk?: string(name='etcdDisk', example='/dev/sdb', position='Body'),
  hostName?: string(name='hostName', position='Body'),
  labels?: map[string]any(name='labels', position='Body'),
  masterPrivateIPs?: [ string ](name='masterPrivateIPs', position='Body'),
  memory?: int32(name='memory', position='Body'),
  os?: string(name='os', position='Body'),
  rootPassword?: string(name='rootPassword', position='Body'),
  systemDisk?: [ 
    {
      name?: string(name='name'),
      required?: int32(name='required'),
    }
  ](name='systemDisk', position='Body'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints', position='Body'),
  tridentSystemDisk?: string(name='tridentSystemDisk', example='/dev/sdb', position='Body'),
  tridentSystemSizeDisk?: int32(name='tridentSystemSizeDisk', example='80', position='Body'),
  workerPrivateIPs?: [ string ](name='workerPrivateIPs', position='Body'),
}

model AddEnvironmentNodesResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model AddEnvironmentNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddEnvironmentNodesResponseBody(name='body'),
}

async function addEnvironmentNodes(request: AddEnvironmentNodesRequest): AddEnvironmentNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddEnvironmentNodes', 'POST', '/api/v2/environments/{uid}/nodes', 'json', false, 'json', request);
}

model AddEnvironmentProductVersionsRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  productVersionInfoList?: [ 
    {
      namespace?: string(name='namespace'),
      productVersionUID?: string(name='productVersionUID'),
      specUID?: string(name='specUID'),
    }
  ](name='productVersionInfoList', position='Body'),
  productVersionUIDList: [ string ](name='productVersionUIDList', position='Body'),
}

model AddEnvironmentProductVersionsResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model AddEnvironmentProductVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddEnvironmentProductVersionsResponseBody(name='body'),
}

async function addEnvironmentProductVersions(request: AddEnvironmentProductVersionsRequest): AddEnvironmentProductVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddEnvironmentProductVersions', 'POST', '/api/v2/environments/{uid}/product-versions', 'json', false, 'json', request);
}

model AddProductComponentVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  componentVersionUID: string(name='componentVersionUID', example='9963a9ec-95d0-4e82-88c8-xxxxxxxxxxxx', position='Path'),
  componentVersionSpecUID?: string(name='componentVersionSpecUID', position='Body'),
  componentVersionSpecValues?: string(name='componentVersionSpecValues', position='Body'),
  releaseName?: string(name='releaseName', example='component-release', position='Body'),
}

model AddProductComponentVersionResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='85f035f0-7a56-478c-8869-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model AddProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddProductComponentVersionResponseBody(name='body'),
}

async function addProductComponentVersion(request: AddProductComponentVersionRequest): AddProductComponentVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddProductComponentVersion', 'POST', '/integration/api/v2/product-versions/{uid}/component-versions/{componentVersionUID}', 'json', false, 'json', request);
}

model AddProductVersionConfigRequest {
  uid?: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  componentReleaseName?: string(name='componentReleaseName', position='Body'),
  componentVersionUID?: string(name='componentVersionUID', example='9963a9ec-95d0-4e82-88c8-xxxxxxxxxxxx', position='Body'),
  description?: string(name='description', example='config', position='Body'),
  name?: string(name='name', example='key', position='Body'),
  parentComponentReleaseName?: string(name='parentComponentReleaseName', position='Body'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID', example='d415e042-c4be-4707-9bda-xxxxxxxxxxxx', position='Body'),
  scope?: string(name='scope', position='Body'),
  value?: string(name='value', example='value', position='Body'),
  valueType?: string(name='valueType', example='string', position='Body'),
}

model AddProductVersionConfigResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='fd460c2f-1d81-428d-81f7-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
  requestId?: string(name='requestId', example='41FFEC34-1EFD-5634-B9A9-xxxxxxxxxxxx'),
}

model AddProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddProductVersionConfigResponseBody(name='body'),
}

async function addProductVersionConfig(request: AddProductVersionConfigRequest): AddProductVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddProductVersionConfig', 'POST', '/api/v2/product-versions/{uid}/configs', 'json', false, 'json', request);
}

model AddResourceSnapshotRequest {
  name?: string(name='name', position='Body'),
  clusterUID?: string(name='clusterUID', position='Query'),
  productVersionUID?: string(name='productVersionUID', position='Query'),
}

model AddResourceSnapshotResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model AddResourceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddResourceSnapshotResponseBody(name='body'),
}

async function addResourceSnapshot(request: AddResourceSnapshotRequest): AddResourceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddResourceSnapshot', 'POST', '/api/v2/resource-snapshots', 'json', false, 'json', request);
}

model BatchAddEnvironmentNodesRequest {
  uid?: string(name='uid', example='8d1d9b69-87a5-4755-9c1e-xxx', position='Path'),
  instanceList?: [
    InstanceInfo
  ](name='instanceList', position='Body'),
  overwrite?: boolean(name='overwrite', example='true覆盖', position='Body'),
}

model BatchAddEnvironmentNodesResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model BatchAddEnvironmentNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddEnvironmentNodesResponseBody(name='body'),
}

async function batchAddEnvironmentNodes(request: BatchAddEnvironmentNodesRequest): BatchAddEnvironmentNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchAddEnvironmentNodes', 'POST', '/api/v2/environments/{uid}/batch/nodes', 'json', false, 'json', request);
}

model BatchAddProductVersionConfigRequest {
  uid?: string(name='uid', position='Path'),
  productVersionConfigList?: [ 
    {
      componentReleaseName?: string(name='componentReleaseName'),
      componentVersionUID?: string(name='componentVersionUID'),
      description?: string(name='description'),
      name?: string(name='name'),
      parentComponentReleaseName?: string(name='parentComponentReleaseName'),
      parentComponentVersionUID?: string(name='parentComponentVersionUID'),
      scope?: string(name='scope'),
      value?: string(name='value'),
      valueType?: string(name='valueType'),
    }
  ](name='productVersionConfigList', position='Body'),
}

model BatchAddProductVersionConfigResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model BatchAddProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddProductVersionConfigResponseBody(name='body'),
}

async function batchAddProductVersionConfig(request: BatchAddProductVersionConfigRequest): BatchAddProductVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchAddProductVersionConfig', 'POST', '/api/v2/product-versions/{uid}/batch/configs', 'json', false, 'json', request);
}

model CreateDeliverableRequest {
  foundation?: {
    clusterConfig?: string(name='clusterConfig'),
    foundationReferenceUID?: string(name='foundationReferenceUID', example='529478b4-ce43-4b4b-8073-74dfbb387dac'),
    foundationVersion?: string(name='foundationVersion', example='1.4.2'),
    foundationVersionUID?: string(name='foundationVersionUID', example='b1a4f675-7c2c-4b98-a480-73d272ec4a9b'),
    reusable?: boolean(name='reusable'),
  }(name='foundation', position='Body'),
  products?: [ 
    {
      namespace?: string(name='namespace'),
      productName?: string(name='productName', example='hpa-it'),
      productType?: string(name='productType', example='own'),
      productUID?: string(name='productUID', example='0cdfafd4-7ee1-4524-9ac5-0746320360c2'),
      productVersion?: string(name='productVersion', example='0.0.3'),
      productVersionSpecName?: string(name='productVersionSpecName'),
      productVersionSpecUID?: string(name='productVersionSpecUID', example='bb0e459d-795c-3eea-ab36-6ca6faaa2cec'),
      productVersionUID?: string(name='productVersionUID', example='5b0e459d-795c-4eea-8836-6ca6fa2a2cec'),
    }
  ](name='products', position='Body'),
}

model CreateDeliverableResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='deliver-Y08jrzAj0PMk'),
  }(name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model CreateDeliverableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeliverableResponseBody(name='body'),
}

async function createDeliverable(request: CreateDeliverableRequest): CreateDeliverableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeliverable', 'POST', '/api/v2/delivery/deliverables', 'json', false, 'json', request);
}

model CreateDeliveryInstanceRequest {
  clusterUID?: string(name='clusterUID', example='f222c860-ebc7-4e93-b479-8e7f196deeef', position='Body'),
  deliverableConfigUID?: string(name='deliverableConfigUID', example='deliver-cfg-x24xj0yDB4X9', position='Body'),
  deliverableUID?: string(name='deliverableUID', example='deliver-3wEoymP6l4Jo', position='Body'),
  envUID?: string(name='envUID', example='0f1b6f56-1206-4945-9b8a-a158f9240576', position='Body'),
  foundation?: {
    clusterConfig?: string(name='clusterConfig'),
    foundationReferenceUID?: string(name='foundationReferenceUID'),
    foundationVersion?: string(name='foundationVersion'),
    foundationVersionUID?: string(name='foundationVersionUID'),
    reusable?: string(name='reusable'),
  }(name='foundation', position='Body'),
  products?: [ 
    {
      namespace?: string(name='namespace'),
      order?: string(name='order'),
      productName?: string(name='productName'),
      productType?: string(name='productType'),
      productUID?: string(name='productUID'),
      productVersion?: string(name='productVersion'),
      productVersionSpecName?: string(name='productVersionSpecName'),
      productVersionSpecUID?: string(name='productVersionSpecUID'),
      productVersionUID?: string(name='productVersionUID'),
    }
  ](name='products', position='Body'),
  templateUID?: string(name='templateUID', position='Body'),
}

model CreateDeliveryInstanceResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='delivery-inst-ggQBEEz85VJv'),
  }(name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model CreateDeliveryInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeliveryInstanceResponseBody(name='body'),
}

async function createDeliveryInstance(request: CreateDeliveryInstanceRequest): CreateDeliveryInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeliveryInstance', 'POST', '/api/v2/delivery/delivery-instances', 'json', false, 'json', request);
}

model CreateDeliveryPackageRequest {
  deliverableUID?: string(name='deliverableUID', example='deliver-PKYgLx7l6VOA', position='Body'),
  deliveryInstanceUID?: string(name='deliveryInstanceUID', position='Body'),
  originDeliverableUID?: string(name='originDeliverableUID', example='delivery-pkg-rqYQp1Y4rNXg', position='Body'),
  packageContentType?: string(name='packageContentType', example='all', position='Body'),
  packageType?: string(name='packageType', example='full', position='Body'),
  platform?: string(name='platform', example='linux/amd64', position='Body'),
}

model CreateDeliveryPackageResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='delivery-pkg-3N4o4j1712OA'),
  }(name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model CreateDeliveryPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeliveryPackageResponseBody(name='body'),
}

async function createDeliveryPackage(request: CreateDeliveryPackageRequest): CreateDeliveryPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeliveryPackage', 'POST', '/api/v2/delivery/delivery-packages', 'json', false, 'json', request);
}

model CreateEnvironmentRequest {
  clientToken?: string(name='ClientToken', example='ClientToken', position='Header'),
  annotations?: string(name='annotations', position='Body'),
  description?: string(name='description', position='Body'),
  expiredAt?: string(name='expiredAt', position='Body'),
  location?: string(name='location', position='Body'),
  name?: string(name='name', example='env-demo', position='Body'),
  platform?: {
    architecture?: string(name='architecture', example='amd64'),
    os?: string(name='os', example='linux'),
  }(name='platform', position='Body'),
  platformList?: [
    Platform
  ](name='platformList', position='Body'),
  productVersionUID?: string(name='productVersionUID', example='2c87c449-7f5e-4ee6-9bb3-xxx', position='Body'),
  type: string(name='type', example='production', position='Body'),
  vendorConfig?: string(name='vendorConfig', position='Body'),
  vendorType?: string(name='vendorType', example='alicloud', position='Body'),
}

model CreateEnvironmentResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    environmentUID?: string(name='environmentUID', example='b8ec63af-7859-4464-9cff-xxx'),
    vendorConfig?: string(name='vendorConfig'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model CreateEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEnvironmentResponseBody(name='body'),
}

async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEnvironment', 'POST', '/api/v2/environments', 'json', false, 'json', request);
}

model CreateEnvironmentLicenseRequest {
  uid: string(name='uid', example='1f597e3d-6c11-4ed9-8f59-xxxxxxxxxxxx', position='Path'),
  companyName?: string(name='companyName', position='Body'),
  contact?: string(name='contact', example='188xxxxxxxx', position='Body'),
  description?: string(name='description', position='Body'),
  expireTime?: string(name='expireTime', position='Body'),
  licenseQuota?: {
    clusterQuota?: {
      cpuCoreLimit?: long(name='cpuCoreLimit', example='100'),
    }(name='clusterQuota'),
    customQuotas?: [ 
      {
        description?: string(name='description', example='value of name'),
        key?: string(name='key', example='name'),
        value?: string(name='value', example='aliyun'),
      }
    ](name='customQuotas'),
  }(name='licenseQuota', position='Body'),
  machineFingerprint?: string(name='machineFingerprint', example='xxxxx', position='Body'),
  name?: string(name='name', position='Body'),
  productVersionUID?: string(name='productVersionUID', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Body'),
  scenario?: string(name='scenario', position='Body'),
  scope?: string(name='scope', example='foundation', position='Body'),
  type: string(name='type', example='OnTrial,Production', position='Body'),
}

model CreateEnvironmentLicenseResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='3c35c6fa-c080-444b-89ac-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model CreateEnvironmentLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEnvironmentLicenseResponseBody(name='body'),
}

async function createEnvironmentLicense(request: CreateEnvironmentLicenseRequest): CreateEnvironmentLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEnvironmentLicense', 'POST', '/api/v2/environments/{uid}/licenses', 'json', false, 'json', request);
}

model CreateFoundationReferenceRequest {
  clusterConfig?: string(name='clusterConfig', position='Body'),
  componentConfigs?: [ 
    {
      componentVersionUID?: string(name='componentVersionUID'),
      orchestrationValues?: string(name='orchestrationValues'),
    }
  ](name='componentConfigs', position='Body'),
  foundationReferenceConfigs?: [ 
    {
      componentReleaseName?: string(name='componentReleaseName'),
      configType?: string(name='configType'),
      name?: string(name='name'),
      value?: string(name='value'),
    }
  ](name='foundationReferenceConfigs', position='Body'),
  foundationVersionUID: string(name='foundationVersionUID', example='796f9044-8684-4de5-9b12-xxxx', position='Body'),
  originFoundationReferenceUID?: string(name='originFoundationReferenceUID', position='Body'),
}

model CreateFoundationReferenceResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='ccbec64f-bc0e-4c21-9d24-xxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model CreateFoundationReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFoundationReferenceResponseBody(name='body'),
}

async function createFoundationReference(request: CreateFoundationReferenceRequest): CreateFoundationReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFoundationReference', 'POST', '/api/v2/foundation-references', 'json', false, 'json', request);
}

model CreateProductRequest {
  clientToken?: string(name='ClientToken', example='ClientToken', position='Header'),
  categories?: [ string ](name='categories', position='Body'),
  description?: string(name='description', position='Body'),
  displayName?: string(name='displayName', position='Body'),
  foundationVersionUID?: string(name='foundationVersionUID', example='796f9044-8684-4de5-9b12-xxxxxxxxxxxx', position='Body'),
  productName: string(name='productName', example='product-name', position='Body'),
  vendor?: string(name='vendor', position='Body'),
  withoutProductVersion?: boolean(name='withoutProductVersion', position='Body'),
}

model CreateProductResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='bb6d7d5b-2ead-4102-8a30-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProduct', 'POST', '/integration/api/v2/products', 'json', false, 'json', request);
}

model CreateProductDeploymentRequest {
  environmentUID: string(name='environmentUID', example='3c923aa6-2fcf-40cc-8412-xxx', position='Body'),
  namespace?: string(name='namespace', position='Body'),
  oldProductVersionUID?: string(name='oldProductVersionUID', example='93cf4ffe-9dc6-4a84-ba8d-xxx', position='Body'),
  packageConfig?: string(name='packageConfig', position='Body'),
  packageUID?: string(name='packageUID', example='474daaa5-0a7b-4af9-8080-xxx', position='Body'),
  productVersionUID?: string(name='productVersionUID', example='bef2616b-b469-4a6f-b405-xxx', position='Body'),
  timeout?: long(name='timeout', position='Body'),
}

model CreateProductDeploymentResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='5699b683-075a-4c51-a78c-xxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model CreateProductDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductDeploymentResponseBody(name='body'),
}

async function createProductDeployment(request: CreateProductDeploymentRequest): CreateProductDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProductDeployment', 'POST', '/api/v2/product-instances/deployments', 'json', false, 'json', request);
}

model CreateProductVersionRequest {
  uid?: string(name='uid', position='Path'),
  baseProductVersionUID?: string(name='baseProductVersionUID', position='Query'),
  version?: string(name='version', position='Body'),
  withoutBaseProductVersion?: boolean(name='withoutBaseProductVersion', position='Body'),
}

model CreateProductVersionResponseBody = {
  code?: string(name='code'),
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
  msg?: string(name='msg'),
}

model CreateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductVersionResponseBody(name='body'),
}

async function createProductVersion(request: CreateProductVersionRequest): CreateProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProductVersion', 'POST', '/integration/api/v2/products/{uid}/versions', 'json', false, 'json', request);
}

model CreateProductVersionPackageRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  clientToken?: string(name='ClientToken', position='Header'),
  clusterEngineType?: string(name='clusterEngineType', example='TRIDENT', position='Query'),
  foundationReferenceUID?: string(name='foundationReferenceUID', position='Query'),
  oldFoundationReferenceUID?: string(name='oldFoundationReferenceUID', position='Query'),
  oldProductVersionUID?: string(name='oldProductVersionUID', example='5f1261e4-7462-48d8-8f9d-xxxxxxxxxxxx', position='Query'),
  packageContentType?: string(name='packageContentType', example='all', position='Query'),
  packageToolType?: string(name='packageToolType', example='Hopctl', position='Query'),
  packageType?: string(name='packageType', example='full', position='Query'),
  platform?: string(name='platform', example='linux/amd64', position='Query'),
}

model CreateProductVersionPackageResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='1c33e7b7-2df8-4632-9f94-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model CreateProductVersionPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductVersionPackageResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createProductVersionPackage(request: CreateProductVersionPackageRequest): CreateProductVersionPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProductVersionPackage', 'POST', '/api/v2/hosting/product-versions/{uid}/packages', 'json', false, 'json', request);
}

model DeleteEnvironmentRequest {
  uid?: string(name='uid', example='56081164-5b2a-4d23-8b1c-xxx', position='Path'),
}

model DeleteEnvironmentResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model DeleteEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnvironmentResponseBody(name='body'),
}

async function deleteEnvironment(request: DeleteEnvironmentRequest): DeleteEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironment', 'DELETE', '/api/v2/environments/{uid}', 'json', false, 'json', request);
}

model DeleteEnvironmentLicenseRequest {
  uid?: string(name='uid', position='Path'),
  licenseUID?: string(name='licenseUID', position='Path'),
}

model DeleteEnvironmentLicenseResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model DeleteEnvironmentLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnvironmentLicenseResponseBody(name='body'),
}

async function deleteEnvironmentLicense(request: DeleteEnvironmentLicenseRequest): DeleteEnvironmentLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironmentLicense', 'DELETE', '/api/v2/environments/{uid}/licenses/{licenseUID}', 'json', false, 'json', request);
}

model DeleteEnvironmentNodeRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  nodeUID: string(name='nodeUID', example='8e340ce5-53c3-4976-93f4-xxx', position='Path'),
}

model DeleteEnvironmentNodeResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model DeleteEnvironmentNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnvironmentNodeResponseBody(name='body'),
}

async function deleteEnvironmentNode(request: DeleteEnvironmentNodeRequest): DeleteEnvironmentNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironmentNode', 'DELETE', '/api/v2/environments/{uid}/nodes/{nodeUID}', 'json', false, 'json', request);
}

model DeleteEnvironmentProductVersionRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  productVersionUID: string(name='productVersionUID', example='039666a2-3a8f-4f21-8279-xxx', position='Path'),
}

model DeleteEnvironmentProductVersionResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model DeleteEnvironmentProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnvironmentProductVersionResponseBody(name='body'),
}

async function deleteEnvironmentProductVersion(request: DeleteEnvironmentProductVersionRequest): DeleteEnvironmentProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironmentProductVersion', 'DELETE', '/api/v2/environments/{uid}/product-versions/{productVersionUID}', 'json', false, 'json', request);
}

model DeleteProductRequest {
  uid: string(name='uid', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx', position='Path'),
}

model DeleteProductResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProduct', 'DELETE', '/integration/api/v2/products/{uid}', 'json', false, 'json', request);
}

model DeleteProductComponentVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  relationUID: string(name='relationUID', example='85f035f0-7a56-478c-8869-xxxxxxxxxxxx', position='Path'),
}

model DeleteProductComponentVersionResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model DeleteProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductComponentVersionResponseBody(name='body'),
}

async function deleteProductComponentVersion(request: DeleteProductComponentVersionRequest): DeleteProductComponentVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProductComponentVersion', 'DELETE', '/api/v2/product-versions/{uid}/relations/{relationUID}', 'json', false, 'json', request);
}

model DeleteProductInstanceConfigRequest {
  configUID: string(name='configUID', position='Path'),
  environmentUID: string(name='environmentUID', position='Query'),
  productVersionUID: string(name='productVersionUID', position='Query'),
}

model DeleteProductInstanceConfigResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model DeleteProductInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductInstanceConfigResponseBody(name='body'),
}

async function deleteProductInstanceConfig(request: DeleteProductInstanceConfigRequest): DeleteProductInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProductInstanceConfig', 'DELETE', '/api/v2/product-instances/configs/{configUID}', 'json', false, 'json', request);
}

model DeleteProductVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
}

model DeleteProductVersionResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
  requestId?: string(name='requestId', example='7CADF6FD-0A4A-5BC5-8C89-xxxxxxxxxxxx'),
}

model DeleteProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductVersionResponseBody(name='body'),
}

async function deleteProductVersion(request: DeleteProductVersionRequest): DeleteProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProductVersion', 'DELETE', '/api/v2/product-versions/{uid}', 'json', false, 'json', request);
}

model DeleteProductVersionConfigRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  configUID: string(name='configUID', example='fd460c2f-1d81-428d-81f7-xxxxxxxxxxxx', position='Path'),
}

model DeleteProductVersionConfigResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
  requestId?: string(name='requestId', example='C2B58140-529E-5335-B998-xxxxxxxxxxxx'),
}

model DeleteProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductVersionConfigResponseBody(name='body'),
}

async function deleteProductVersionConfig(request: DeleteProductVersionConfigRequest): DeleteProductVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProductVersionConfig', 'DELETE', '/api/v2/product-versions/{uid}/configs/{configUID}', 'json', false, 'json', request);
}

model GenerateProductInstanceDeploymentConfigRequest {
  environmentUID: string(name='environmentUID', example='eda83f48-8c50-4e74-a307-xxx', position='Body'),
  packageContentType?: string(name='packageContentType', position='Body'),
  packageUID?: string(name='packageUID', example='94f632a9-1990-4c9b-8fd8-xxx', position='Body'),
  productVersionUID?: string(name='productVersionUID', example='125c24a0-1b5c-42bd-b043-xxx', position='Body'),
  productVersionUIDList?: [ string ](name='productVersionUIDList', position='Body'),
}

model GenerateProductInstanceDeploymentConfigResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    packageConfig?: string(name='packageConfig', example='clusterId: 21349919-530c-41bb-a0a9-xxx
cluster: {}
global: {}
system: {}
operator:
  cert: |
    -----BEGIN PUBLIC KEY-----
    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDGpjGRy6YIEjbQHTZ/QHe9TQ9O
    cHDp6nvRLPjqycypVhnIB9RAUEo1n+Ts99OiNef9eNw4EUmBIX2bRNwFy4ZWxSh1
    ekA/6VKXx82sMTEFjHTDtm5gjxn5TnoBcpgoChOPu7VLpPCRO6Xr/MW7/rQ/0gWg
    eknTMLE0JzTXXXXXXX
    -----END PUBLIC KEY-----'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GenerateProductInstanceDeploymentConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateProductInstanceDeploymentConfigResponseBody(name='body'),
}

async function generateProductInstanceDeploymentConfig(request: GenerateProductInstanceDeploymentConfigRequest): GenerateProductInstanceDeploymentConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateProductInstanceDeploymentConfig', 'POST', '/api/v2/product-instances/package-configs', 'json', false, 'json', request);
}

model GetComponentRequest {
  uid?: string(name='uid', example='62cd4869-71b4-4c9f-b6c4-xxxxxxxxxxxx', position='Path'),
}

model GetComponentResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    category?: string(name='category', example='SAAS'),
    description?: string(name='description'),
    documents?: string(name='documents'),
    name?: string(name='name', example='component-name'),
    public?: boolean(name='public', example='false'),
    singleton?: boolean(name='singleton', example='false'),
    source?: string(name='source', example='aliyun-inc.com'),
    uid?: string(name='uid', example='62cd4869-71b4-4c9f-b6c4-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetComponentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetComponentResponseBody(name='body'),
}

async function getComponent(request: GetComponentRequest): GetComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetComponent', 'GET', '/api/v2/components/{uid}', 'json', false, 'json', request);
}

model GetComponentVersionRequest {
  uid: string(name='uid', position='Path'),
  versionUID: string(name='versionUID', position='Path'),
  withoutChartContent?: boolean(name='withoutChartContent', position='Query'),
}

model GetComponentVersionResponseBody = {
  code?: string(name='code'),
  data?: [ 
    {
      componentName?: string(name='componentName'),
      componentUID?: string(name='componentUID'),
      description?: string(name='description'),
      documents?: string(name='documents'),
      orchestrationValues?: string(name='orchestrationValues'),
      packageURL?: string(name='packageURL'),
      parentComponent?: boolean(name='parentComponent'),
      productComponentVersionUID?: string(name='productComponentVersionUID'),
      provider?: string(name='provider'),
      readme?: string(name='readme'),
      resources?: {
        limits?: map[string]any(name='limits'),
        requests?: map[string]any(name='requests'),
      }(name='resources'),
      uid?: string(name='uid'),
      version?: string(name='version'),
    }
  ](name='data'),
  msg?: string(name='msg'),
}

model GetComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetComponentVersionResponseBody(name='body'),
}

async function getComponentVersion(request: GetComponentVersionRequest): GetComponentVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetComponentVersion', 'GET', '/integration/api/v2/components/{uid}/versions/{versionUID}', 'json', false, 'json', request);
}

model GetDeliverableRequest {
  uid?: string(name='uid', example='deliver-VPoEx12RgwKVX', position='Path'),
}

model GetDeliverableResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    foundation?: {
      clusterConfig?: string(name='clusterConfig'),
      foundationReferenceUID?: string(name='foundationReferenceUID', example='d4b3b7a4-53cc-4a8e-b500-f6ade9509eb1'),
      foundationVersion?: string(name='foundationVersion', example='1.4.2'),
      foundationVersionUID?: string(name='foundationVersionUID', example='b1a4f675-7c2c-4b98-a480-73d272ec4a9b'),
    }(name='foundation'),
    products?: [ 
      {
        namespace?: string(name='namespace'),
        productName?: string(name='productName', example='tsjdth-805'),
        productType?: string(name='productType', example='own'),
        productUID?: string(name='productUID', example='a203271c-a95a-490d-9a8d-7e7d162e6295'),
        productVersion?: string(name='productVersion', example='1.0.5'),
        productVersionSpecName?: string(name='productVersionSpecName'),
        productVersionSpecUID?: string(name='productVersionSpecUID', example='1a535a2e-6ec6-40aa-7774-0a1342311bf21'),
        productVersionUID?: string(name='productVersionUID', example='0d43562e-3eb5-408a-9974-0a134811bf21'),
      }
    ](name='products'),
    uid?: string(name='uid', example='deliver-2pAoq2DqKvY8'),
  }(name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model GetDeliverableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeliverableResponseBody(name='body'),
}

async function getDeliverable(request: GetDeliverableRequest): GetDeliverableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeliverable', 'GET', '/api/v2/delivery/deliverables/{uid}', 'json', false, 'json', request);
}

model GetDeliveryPackageRequest {
  uid?: string(name='uid', example='delivery-pkg-2QoZPLrYwyY8', position='Path'),
}

model GetDeliveryPackageResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    deliverableUID?: string(name='deliverableUID', example='deliver-glXKBVYg8qBL'),
    originDeliverableUID?: string(name='originDeliverableUID', example='deliver-ovAgJx80B9ZV'),
    packageContentType?: string(name='packageContentType', example='all'),
    packageSize?: string(name='packageSize', example='3.97GB'),
    packageStatus?: string(name='packageStatus', example='Success'),
    packageType?: string(name='packageType', example='full'),
    packageUID?: string(name='packageUID', example='1c33e7b7-2df8-4632-9f94-e1d98caa410d'),
    packageURL?: string(name='packageURL', example='https://cn-shanghai-cnx-packages.oss-cn-shanghai.aliyuncs.com/products/xxxxxxxxxxxxxxxxxx'),
    platform?: string(name='platform', example='linux/amd64'),
  }(name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model GetDeliveryPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeliveryPackageResponseBody(name='body'),
}

async function getDeliveryPackage(request: GetDeliveryPackageRequest): GetDeliveryPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeliveryPackage', 'GET', '/api/v2/delivery/delivery-packages/{uid}', 'json', false, 'json', request);
}

model GetEnvironmentRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  options?: {
    withSiteSurveyReport?: boolean(name='withSiteSurveyReport'),
  }(name='options', shrink='json', position='Query'),
}

model GetEnvironmentResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    advancedConfigs?: {
      enableDeploySimulation?: boolean(name='enableDeploySimulation'),
      enableSiteSurvey?: boolean(name='enableSiteSurvey'),
    }(name='advancedConfigs'),
    clusterId?: string(name='clusterId', example='Deprecated'),
    clusterUID?: string(name='clusterUID'),
    createdAt?: string(name='createdAt', example='2022-05-11T00:00:00+08:00'),
    description?: string(name='description'),
    expiredAt?: string(name='expiredAt'),
    foundationType?: string(name='foundationType'),
    foundationVersion?: string(name='foundationVersion', example='v1.4.3'),
    foundationVersionUID?: string(name='foundationVersionUID', example='484c4a1e-69c7-4395-8e02-xxx'),
    instanceList?: [
      InstanceInfo
    ](name='instanceList'),
    instanceStatus?: string(name='instanceStatus', example='INITING'),
    location?: string(name='location'),
    name?: string(name='name', example='env-demo'),
    oldProductVersion?: string(name='oldProductVersion', example='v1.0.0'),
    oldProductVersionUID?: string(name='oldProductVersionUID', example='79afa0dc-8557-4cff-aec7-xxx'),
    platform?: {
      architecture?: string(name='architecture', example='amd64'),
      os?: string(name='os', example='linux'),
    }(name='platform'),
    platformList?: [
      Platform
    ](name='platformList'),
    platformStatus?: string(name='platformStatus', example='INIT'),
    productName?: string(name='productName', example='demo-product'),
    productVersion?: string(name='productVersion', example='v1.0.2'),
    siteSurveyReport?: {
      checkList?: [ 
        {
          description?: map[string]any(name='description'),
          failedList?: [ 
            {
              ip?: string(name='ip'),
              reason?: map[string]any(name='reason'),
            }
          ](name='failedList'),
          level?: string(name='level'),
          name?: string(name='name'),
          status?: string(name='status'),
        }
      ](name='checkList'),
      result?: string(name='result'),
    }(name='siteSurveyReport'),
    uid?: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx'),
    vendorConfig?: string(name='vendorConfig'),
    vendorType?: string(name='vendorType', example='alicloud'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnvironmentResponseBody(name='body'),
}

async function getEnvironment(request: GetEnvironmentRequest): GetEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironment', 'GET', '/api/v2/environments/{uid}', 'json', false, 'json', request);
}

model GetEnvironmentDeliveryInstanceRequest {
  clusterUID?: string(name='clusterUID', example='45e95854-0562-4678-a526-93106a24df1b', position='Query'),
  envUID?: string(name='envUID', example='c1bb74cb-c549-4b70-8f92-187b3015d309', position='Query'),
}

model GetEnvironmentDeliveryInstanceResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    clusterUID?: string(name='clusterUID', example='4a66131e-23da-423a-8c9a-c77ee9373013'),
    deliverableConfigUID?: string(name='deliverableConfigUID', example='deliver-cfg-x24xj0yDB4X9'),
    deliverableUID?: string(name='deliverableUID', example='deliver-glXKBVYg8qBL'),
    envUID?: string(name='envUID', example='150ed1ae-eacd-4b9c-80d8-512c569b662a'),
    uid?: string(name='uid', example='f1a5956b-662f-4621-a1ae-45313b7b00e7'),
  }(name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model GetEnvironmentDeliveryInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnvironmentDeliveryInstanceResponseBody(name='body'),
}

async function getEnvironmentDeliveryInstance(request: GetEnvironmentDeliveryInstanceRequest): GetEnvironmentDeliveryInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironmentDeliveryInstance', 'GET', '/api/v2/delivery/delivery-instances', 'json', false, 'json', request);
}

model GetEnvironmentLicenseRequest {
  uid?: string(name='uid', example='1f597e3d-6c11-4ed9-8f59-xxxxxxxxxxxx', position='Path'),
  licenseUID?: string(name='licenseUID', example='3c35c6fa-c080-444b-89ac-xxxxxxxxxxxx', position='Path'),
  options?: {
    withSecretYAML?: boolean(name='withSecretYAML', example='false'),
  }(name='options', shrink='json', position='Query'),
}

model GetEnvironmentLicenseResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    expireTime?: string(name='expireTime', example='2122-05-10T19:42:15+08:00'),
    licenseKey?: string(name='licenseKey', example='sKSQqgNrIhSL46z44zmNdCTfswaz5qM4inMHUMuCOtnIif4sNaor5U57iuDgrQLDNowllLht1gscn9/5jvhLbaPX5/BsdIqcTG2CVsQdu1g9Jhntw70h3upoWJFzEEo/+hOLRjjGPxWAiDwCflscDlL6JhMJq4tI7Uh/tPx8X7xtIyvH09DJdONfh54hznJrofmLyvrmkqt8VaM5ZPXsLDhetoYcXVCjc4fgSF3t3m+LCFevZKiIjwYc0TMirHZACjU2L0o3ovPzT5crpRafHV3B5GhBPuTlEZ7azdRs2tOKPj/56mPA1mv9easgheGcibeblo+Fnwf/S5CcADfzAwkKCO/57joJu6Wwwnw+VtRcbi2+Eiw7/wohBze8nS6G9J/arjJdmiOyQQ1FTY47mB71x05aFg+ZiLosfZigHG0XgTFx1Is63l6cpfECdCkRh5CwdtOi4Eceto3svcJO1dddBAtcPsYCbtqw8Los38KILlXSVVEgHAhBqHxudAHnZ27CX/z5tizLg6+jNEVpyRJCA1Vm+zAzVJ62xxxxxxxx='),
    licenseQuota?: {
      clusterQuota?: {
        cpuCoreLimit?: long(name='cpuCoreLimit', example='100'),
      }(name='clusterQuota'),
      componentQuotas?: [ 
        {
          componentName?: string(name='componentName', example='adp-test'),
          componentSource?: string(name='componentSource', example='aliyun-inc'),
          instanceLimit?: long(name='instanceLimit', example='1'),
        }
      ](name='componentQuotas'),
      customQuotas?: [ 
        {
          description?: string(name='description', example='value of name'),
          key?: string(name='key', example='name'),
          value?: string(name='value', example='aliyun'),
        }
      ](name='customQuotas'),
    }(name='licenseQuota'),
    productVersionUID?: string(name='productVersionUID', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
    rejectReason?: string(name='rejectReason'),
    scope?: string(name='scope', example='foundation'),
    secretYAML?: string(name='secretYAML', description='kubernetes secret yaml。', example='apiVersion: v1\\ndata:\\n  license: xxxxxXFnTnJJaFNMNDZ6NDR6bU5kQ1Rmc3dhejVxTTRpbk1IVU11Q090bklpZjRzTmFvcjVVNTdpdURnclFMRE5vd2xsTGh0MWdzY245LzVqdmhMYmFQWDUvQnNkSXFjVEcyQ1ZzUWR1MWc5SmhudHc3MGgzdXBvV0pGekVFby8raE9MUmpqR1B4V0FpRHdDZmxzY0RsTDZKaE1KcTR0STdVaC90UHg4WDd4dEl5dkgwOURKZE9OZmg1NGh6bkpyb2ZtTHl2cm1rcXQ4VmFNNVpQWHNMRGhldG9ZY1hWQ2pjNGZnU0YzdDNtK0xDRmV2WktpSWp3WWMwVE1pckhaQUNqVTJMMG8zb3ZQelQ1Y3JwUmFmSFYzQjVHaEJQdVRsRVo3YXpkUnMydE9LUGovNTZtUEExbXY5ZWFzZ2hlR2NpYmVibG8rRm53Zi9TNUNjQURmekF3a0tDTy81N2pvSnU2V3d3bncrVnRSY2JpMitFaXc3L3dvaEJ6ZThuUzZHOUovYXJqSmRtaU95UVExRlRZNDdtQjcxeDA1YUZnK1ppTG9zZlppZ0hHMFhnVEZ4MUlzNjNsNmNwZkVDZENrUmg1Q3dkdE9pNEVjZXRvM3N2Y0pPMWRkZEJBdGNQc1lDYnRxdzhMb3MzOEtJTGxYU1ZWRWdIQWhCcUh4dWRBSG5aMjdDWC96NXRpekxnNitqTkVWcHlSSkNBMVZtK3pBelZKNjJHc3ZJcTVzPQ==\\nkind: Secret\\nmetadata:\\n  creationTimestamp: null\\n  labels:\\n    adp.aliyuncs.com/application-name: adp\\n    adp.aliyuncs.com/license: \\"true\\"\\n  name: license-adp\\ntype: Opaque\\n'),
    status?: string(name='status', example='approved'),
    type?: string(name='type', example='OnTrial'),
    uid?: string(name='uid', example='3c35c6fa-c080-444b-89ac-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetEnvironmentLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnvironmentLicenseResponseBody(name='body'),
}

async function getEnvironmentLicense(request: GetEnvironmentLicenseRequest): GetEnvironmentLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironmentLicense', 'GET', '/api/v2/environments/{uid}/licenses/{licenseUID}', 'json', false, 'json', request);
}

model GetEnvironmentNodeRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  nodeUID: string(name='nodeUID', example='8e340ce5-53c3-4976-93f4-xxx', position='Path'),
}

model GetEnvironmentNodeResponseBody = {
  code?: string(name='code', example='Success'),
  data?: InstanceInfo(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetEnvironmentNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnvironmentNodeResponseBody(name='body'),
}

async function getEnvironmentNode(request: GetEnvironmentNodeRequest): GetEnvironmentNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironmentNode', 'GET', '/api/v2/environments/{uid}/nodes/{nodeUID}', 'json', false, 'json', request);
}

model GetFoundationComponentReferenceRequest {
  componentReferenceUID: string(name='componentReferenceUID', example='53193d8e-47b8-41f6-90be-xxx', position='Path'),
  uid: string(name='uid', example='df63affe-4e6e-4cc3-af77-xxx', position='Path'),
}

model GetFoundationComponentReferenceResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [
      FoundationComponentReferenceDetail
    ](name='list'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetFoundationComponentReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFoundationComponentReferenceResponseBody(name='body'),
}

async function getFoundationComponentReference(request: GetFoundationComponentReferenceRequest): GetFoundationComponentReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFoundationComponentReference', 'GET', '/api/v2/foundation-references/{uid}/components/{componentReferenceUID}', 'json', false, 'json', request);
}

model GetFoundationReferenceRequest {
  uid: string(name='uid', example='d1fa61dd-fe19-47e4-9abd-xxx', position='Path'),
}

model GetFoundationReferenceResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    clusterConfig?: string(name='clusterConfig'),
    foundationVersionUID?: string(name='foundationVersionUID', example='b1b528a6-8341-4f06-89af-xxx'),
    uid?: string(name='uid', example='d26ddfad-fa97-4a2b-9433-xxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetFoundationReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFoundationReferenceResponseBody(name='body'),
}

async function getFoundationReference(request: GetFoundationReferenceRequest): GetFoundationReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFoundationReference', 'GET', '/api/v2/foundation-references/{uid}/info', 'json', false, 'json', request);
}

model GetFoundationVersionRequest {
  uid: string(name='uid', example='4686a7d7-04b4-4101-9466-xxx', position='Path'),
}

model GetFoundationVersionResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    description?: string(name='description'),
    features?: [ string ](name='features'),
    isDefault?: boolean(name='isDefault'),
    labels?: string(name='labels', example='{}'),
    name: string(name='name', example='ADP 底座'),
    platforms?: [
      Platform
    ](name='platforms'),
    siteSurveyTool?: {
      clusterCheckerURL?: string(name='clusterCheckerURL'),
      clusterInfoBrief?: string(name='clusterInfoBrief'),
    }(name='siteSurveyTool'),
    specName?: string(name='specName'),
    status: string(name='status', example='Published'),
    type: string(name='type', example='trident'),
    uid?: string(name='uid', example='4686a7d7-04b4-4101-9466-xxx'),
    version: string(name='version', description='version', example='v1.4.3'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetFoundationVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFoundationVersionResponseBody(name='body'),
}

async function getFoundationVersion(request: GetFoundationVersionRequest): GetFoundationVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFoundationVersion', 'GET', '/api/v2/foundation/versions/{uid}', 'json', false, 'json', request);
}

model GetProductRequest {
  uid: string(name='uid', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx', position='Path'),
  withIconURL?: boolean(name='withIconURL', position='Query'),
}

model GetProductResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    categories?: [ string ](name='categories'),
    description?: string(name='description'),
    displayName?: string(name='displayName'),
    icons?: [ 
      {
        description?: string(name='description'),
        name?: string(name='name'),
        url?: string(name='url'),
      }
    ](name='icons'),
    name?: string(name='name', example='test-product'),
    uid?: string(name='uid', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx'),
    vendor?: string(name='vendor'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductResponseBody(name='body'),
}

async function getProduct(request: GetProductRequest): GetProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProduct', 'GET', '/api/v2/products/{uid}', 'json', false, 'json', request);
}

model GetProductComponentVersionRequest {
  relationUID: string(name='relationUID', example='85f035f0-7a56-478c-8869-xxxxxxxxxxxx', position='Path'),
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
}

model GetProductComponentVersionResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      appVersion?: string(name='appVersion', example='1.0.0'),
      category?: string(name='category'),
      componentDescription?: string(name='componentDescription'),
      componentName?: string(name='componentName', example='component-name'),
      componentUID?: string(name='componentUID', example='62cd4869-71b4-4c9f-b6c4-xxxxxxxxxxxx'),
      componentVersionDescription?: string(name='componentVersionDescription'),
      componentVersionUID?: string(name='componentVersionUID', example='9963a9ec-95d0-4e82-88c8-xxxxxxxxxxxx'),
      enable?: boolean(name='enable', example='true'),
      namespace?: string(name='namespace', example='default'),
      orchestrationValues?: string(name='orchestrationValues', example='replicaCount: 2\\n\\nresources:\\n  limits:\\n    cpu: 200m\\n    memory: 512Mi\\n  requests:\\n    cpu: 100m\\n    memory: 256Mi'),
      parentComponent?: boolean(name='parentComponent', example='false'),
      parentComponentVersionRelationUID?: string(name='parentComponentVersionRelationUID', example='7a5685f0-35f0--478c-8869-xxxxxxxxxxxx'),
      parentComponentVersionUID?: string(name='parentComponentVersionUID', example='944ce61f-10c1-46bd-a877-xxxxxxxxxxxx'),
      productVersionUID?: string(name='productVersionUID', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
      relationUID?: string(name='relationUID', example='85f035f0-7a56-478c-8869-xxxxxxxxxxxx'),
      releaseName?: string(name='releaseName', example='component-release'),
      resources?: string(name='resources'),
      sequence?: int32(name='sequence'),
      source?: string(name='source'),
      values?: string(name='values', example='replicaCount: 2\\n\\nresources:\\n  limits:\\n    cpu: 200m\\n    memory: 512Mi\\n  requests:\\n    cpu: 100m\\n    memory: 256Mi'),
      version?: string(name='version', example='1.0.0'),
    }
  ](name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductComponentVersionResponseBody(name='body'),
}

async function getProductComponentVersion(request: GetProductComponentVersionRequest): GetProductComponentVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProductComponentVersion', 'GET', '/integration/api/v2/product-versions/{uid}/relations/{relationUID}', 'json', false, 'json', request);
}

model GetProductDeploymentRequest {
  deploymentUID: string(name='deploymentUID', example='5699b683-075a-4c51-a78c-xxx', position='Path'),
  environmentUID: string(name='environmentUID', example='b8ec63af-7859-4464-9cff-xxx', position='Query'),
  productVersionUID: string(name='productVersionUID', example='de08f185-b117-4ff5-9335-xxx', position='Query'),
  withParamConfig?: boolean(name='withParamConfig', example='false', position='Query'),
}

model GetProductDeploymentResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    envParams?: string(name='envParams', example='clusterId: db53384e-6ed2-4902-ad38-xxx
cluster: {}
nodes: []
global: {}
system:
  CLUSTER_MASTER0_PUB_IP: xxx.xxx.xxx.xxx
operator:
  cert: |
    -----BEGIN PUBLIC KEY-----
    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDEU9lG21mFMo+E1Iq72arIxVV1
    7wDfmeS+mrGC748XcxxxxAQh16Y8Cf4qTW8G1Azj3dMED6043VNzfg7b7Mn
    sEZ6tunK7FJFw3wdF/15g6zZs4LRBGlxNmpWm/l1cl5y2bjwV68IWWYLLF2EhOcs
    R28x8ZA6UOPyL13vXXXX
    -----END PUBLIC KEY-----'),
    envUID?: string(name='envUID', example='b8ec63af-7859-4464-9cff-xxx'),
    status?: string(name='status', example='Success'),
    uid?: string(name='uid', example='5699b683-075a-4c51-a78c-xxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetProductDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductDeploymentResponseBody(name='body'),
}

async function getProductDeployment(request: GetProductDeploymentRequest): GetProductDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProductDeployment', 'GET', '/api/v2/product-instances/deployments/{deploymentUID}', 'json', false, 'json', request);
}

model GetProductVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  withDocumentationURL?: boolean(name='withDocumentationURL', position='Query'),
  withExtendResourceURL?: boolean(name='withExtendResourceURL', position='Query'),
}

model GetProductVersionResponseBody = {
  code?: string(name='code', example='Success。'),
  data?: {
    continuousIntegration?: boolean(name='continuousIntegration'),
    description?: string(name='description'),
    documentations?: [ 
      {
        description?: string(name='description'),
        name?: string(name='name'),
        url?: string(name='url'),
      }
    ](name='documentations'),
    extendedResources?: [ 
      {
        description?: string(name='description'),
        name?: string(name='name'),
        url?: string(name='url'),
      }
    ](name='extendedResources'),
    foundationVersionUID?: string(name='foundationVersionUID'),
    packageURL?: string(name='packageURL'),
    platforms?: [
      Platform
    ](name='platforms'),
    productName?: string(name='productName', example='test-product'),
    productUID?: string(name='productUID', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx'),
    provider?: string(name='provider'),
    timeout?: long(name='timeout'),
    uid?: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
    version?: string(name='version', example='1.0.0'),
  }(name='data'),
  msg?: string(name='msg', example='Success。'),
}

model GetProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductVersionResponseBody(name='body'),
}

async function getProductVersion(request: GetProductVersionRequest): GetProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProductVersion', 'GET', '/api/v2/product-versions/{uid}', 'json', false, 'json', request);
}

model GetProductVersionDifferencesRequest {
  uid: string(name='uid', position='Path'),
  versionUID?: string(name='versionUID', position='Path'),
  preVersionUID?: string(name='preVersionUID', position='Query'),
}

model GetProductVersionDifferencesResponseBody = {
  code?: string(name='code'),
  data?: [ 
    {
      componentName?: string(name='componentName'),
      difference?: string(name='difference', example='Create/Delete/VersionUpdate/ConfigUpdate/NoChanged'),
      message?: string(name='message'),
      preVersion?: string(name='preVersion'),
      releaseName?: string(name='releaseName'),
      upgradeFlag?: boolean(name='upgradeFlag'),
      version?: string(name='version'),
    }
  ](name='data'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model GetProductVersionDifferencesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductVersionDifferencesResponseBody(name='body'),
}

async function getProductVersionDifferences(request: GetProductVersionDifferencesRequest): GetProductVersionDifferencesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProductVersionDifferences', 'GET', '/integration/api/v2/products/{uid}/versions/{versionUID}/differences', 'json', false, 'json', request);
}

model GetProductVersionPackageRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  foundationReferenceUID?: string(name='foundationReferenceUID', position='Query'),
  oldFoundationReferenceUID?: string(name='oldFoundationReferenceUID', position='Query'),
  oldProductVersionUID?: string(name='oldProductVersionUID', example='5f1261e4-7462-48d8-8f9d-xxxxxxxxxxxx', position='Query'),
  packageContentType?: string(name='packageContentType', example='all', position='Query'),
  packageType?: string(name='packageType', example='full', position='Query'),
  packageUID?: string(name='packageUID', example='1c33e7b7-2df8-4632-9f94-xxxxxxxxxxxx', position='Query'),
  platform?: string(name='platform', example='linux/amd64', position='Query'),
  withURL?: boolean(name='withURL', example='true', position='Query'),
}

model GetProductVersionPackageResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    packageContentType?: string(name='packageContentType', example='all'),
    packageSize?: string(name='packageSize', example='3.97GB'),
    packageStatus?: string(name='packageStatus', example='Success'),
    packageType?: string(name='packageType', example='full'),
    packageUID?: string(name='packageUID', example='1c33e7b7-2df8-4632-9f94-e1d98caa410d'),
    packageURL?: string(name='packageURL', example='https://cn-shanghai-cnx-packages.oss-cn-shanghai.aliyuncs.com/products/xxxxxxxxxxxxxxxxxx'),
    platform?: Platform(name='platform', example='{
  "os":"linux",
  "architecture":"amd64"
}'),
    platformList?: [
      Platform
    ](name='platformList'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model GetProductVersionPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductVersionPackageResponseBody(name='body'),
}

async function getProductVersionPackage(request: GetProductVersionPackageRequest): GetProductVersionPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProductVersionPackage', 'GET', '/api/v2/hosting/product-versions/{uid}/packages', 'json', false, 'json', request);
}

model GetResourceSnapshotRequest {
  productVersionUID?: string(name='productVersionUID', position='Query'),
  uid?: string(name='uid', position='Query'),
}

model GetResourceSnapshotResponseBody = {
  CPULimit?: string(name='CPULimit'),
  CPURequest?: string(name='CPURequest'),
  adpInfo?: {
    CPURequest?: string(name='CPURequest'),
    componentNum?: int32(name='componentNum'),
    components?: [ 
      {
        CPULimit?: string(name='CPULimit'),
        CPURequest?: string(name='CPURequest'),
        componentName?: string(name='componentName'),
        componentReleaseName?: string(name='componentReleaseName'),
        componentVersion?: string(name='componentVersion'),
        memoryLimit?: string(name='memoryLimit'),
        memoryRequest?: string(name='memoryRequest'),
        orchestrationValue?: string(name='orchestrationValue'),
        status?: string(name='status'),
        storageRequest?: string(name='storageRequest'),
      }
    ](name='components'),
    memoryRequest?: string(name='memoryRequest'),
    podNum?: int32(name='podNum'),
    storageRequest?: string(name='storageRequest'),
    workloadNum?: int32(name='workloadNum'),
  }(name='adpInfo'),
  memoryLimit?: string(name='memoryLimit'),
  memoryRequest?: string(name='memoryRequest'),
  productInfo?: {
    CPURequest?: string(name='CPURequest'),
    componentNum?: int32(name='componentNum'),
    components?: [ 
      {
        CPULimit?: string(name='CPULimit'),
        CPURequest?: string(name='CPURequest'),
        componentName?: string(name='componentName'),
        componentReleaseName?: string(name='componentReleaseName'),
        componentVersion?: string(name='componentVersion'),
        memoryLimit?: string(name='memoryLimit'),
        memoryRequest?: string(name='memoryRequest'),
        orchestrationValue?: string(name='orchestrationValue'),
        status?: string(name='status'),
        storageRequest?: string(name='storageRequest'),
      }
    ](name='components'),
    memoryRequest?: string(name='memoryRequest'),
    podNum?: int32(name='podNum'),
    storageRequest?: string(name='storageRequest'),
    workloadNum?: int32(name='workloadNum'),
  }(name='productInfo'),
  specParamConfigs?: [ 
    {
      componentName?: string(name='componentName'),
      componentReleaseName?: string(name='componentReleaseName'),
      componentSource?: string(name='componentSource'),
      componentVersion?: string(name='componentVersion'),
      name?: string(name='name'),
      paramType?: string(name='paramType'),
      parentComponentName?: string(name='parentComponentName'),
      parentComponentReleaseName?: string(name='parentComponentReleaseName'),
      parentComponentVersion?: string(name='parentComponentVersion'),
      value?: string(name='value'),
      valueType?: string(name='valueType'),
    }
  ](name='specParamConfigs'),
  storageRequest?: string(name='storageRequest'),
}

model GetResourceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceSnapshotResponseBody(name='body'),
}

async function getResourceSnapshot(request: GetResourceSnapshotRequest): GetResourceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceSnapshot', 'GET', '/api/v2/resource-snapshots', 'json', false, 'json', request);
}

model GetWorkflowStatusRequest {
  workflowType: string(name='workflowType', position='Query'),
  xuid: string(name='xuid', position='Query'),
}

model GetWorkflowStatusResponseBody = {
  code?: string(name='code'),
  data?: {
    status?: string(name='status'),
    stepStatus?: [ 
      {
        name?: string(name='name'),
        status?: string(name='status'),
        workflowTasks?: [ 
          {
            name?: string(name='name'),
            status?: string(name='status'),
          }
        ](name='workflowTasks'),
      }
    ](name='stepStatus'),
  }(name='data'),
  msg?: string(name='msg'),
}

model GetWorkflowStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkflowStatusResponseBody(name='body'),
}

async function getWorkflowStatus(request: GetWorkflowStatusRequest): GetWorkflowStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkflowStatus', 'GET', '/api/v2/workflows/status', 'json', false, 'json', request);
}

model InitEnvironmentResourceRequest {
  uid: string(name='uid', position='Path'),
  accessKeyID?: string(name='accessKeyID', position='Body'),
  accessKeySecret?: string(name='accessKeySecret', position='Body'),
  securityToken?: string(name='securityToken', position='Body'),
}

model InitEnvironmentResourceResponseBody = {
  code?: string(name='code'),
  data?: {
    status?: string(name='status'),
  }(name='data'),
  msg?: string(name='msg'),
}

model InitEnvironmentResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitEnvironmentResourceResponseBody(name='body'),
}

async function initEnvironmentResource(request: InitEnvironmentResourceRequest): InitEnvironmentResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InitEnvironmentResource', 'POST', '/api/v2/environments/{uid}/resources', 'json', false, 'json', request);
}

model ListComponentVersionsRequest {
  uid?: string(name='uid', example='62cd4869-71b4-4c9f-b6c4-xxxxxxxxxxxx', position='Path'),
  pageNum?: int32(name='pageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
  platforms?: [ 
    {
      architecture?: string(name='architecture', example='amd64'),
      os?: string(name='os', example='linux'),
    }
  ](name='platforms', shrink='json', position='Query'),
  version?: string(name='version', position='Query'),
}

model ListComponentVersionsResponseBody = {
  requestId?: string(name='RequestId', example='994FA608-A84E-5DA6-B8E6-xxxxxxxxxxxx'),
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        appVersion?: string(name='appVersion', example='1.0.0'),
        componentName?: string(name='componentName', example='component'),
        componentUID?: string(name='componentUID', example='62cd4869-71b4-4c9f-b6c4-xxxxxxxxxxxx'),
        description?: string(name='description', example='test'),
        documents?: string(name='documents'),
        imagesMapping?: string(name='imagesMapping', example='[{"Registry":"harbor.middleware.com","Repository":"middleware/rocketmq-namesrv","Tag":"4.8.0","ImageID":"sha256:d4a8260cffbd40cc4bd586cbf7cc29d22fb0807e318ec1aca66fb3e82fa7xxxx","ManagedImage":"xxx-registry.cn-shanghai.cr.aliyuncs.com/cloud-middleware/harmonycloud-cn-rocketmq:middleware_rocketmq-namesrv-4.8.0-d4a8260cxxxx"}]'),
        orchestrationValues?: string(name='orchestrationValues', example='replicaCount: 2\\n\\nresources:\\n  limits:\\n    cpu: 200m\\n    memory: 512Mi\\n  requests:\\n    cpu: 100m\\n    memory: 256Mi'),
        packageURL?: string(name='packageURL'),
        parentComponent?: boolean(name='parentComponent', example='false'),
        readme?: string(name='readme', example='readme'),
        resources?: string(name='resources'),
        uid?: string(name='uid', example='8020f041-4a8f-4222-a9d7-aa6b8effb701'),
        version?: string(name='version', example='1.0.0'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListComponentVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListComponentVersionsResponseBody(name='body'),
}

async function listComponentVersions(request: ListComponentVersionsRequest): ListComponentVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListComponentVersions', 'GET', '/api/v2/components/{uid}/versions', 'json', false, 'json', request);
}

model ListComponentsRequest {
  category?: string(name='category', example='SAAS', position='Query'),
  fuzzy?: string(name='fuzzy', example='name', position='Query'),
  name?: string(name='name', example='component-name', position='Query'),
  pageNum?: int32(name='pageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
  public?: boolean(name='public', example='false', position='Query'),
}

model ListComponentsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        annotations?: {
          annotations?: string(name='annotations'),
        }(name='annotations'),
        category?: string(name='category', example='SAAS'),
        description?: string(name='description', example='test'),
        documents?: string(name='documents'),
        name?: string(name='name', example='test'),
        provider?: string(name='provider'),
        public?: boolean(name='public', example='false'),
        singleton?: boolean(name='singleton', example='false'),
        source?: string(name='source', example='aliyun-inc.com'),
        uid?: string(name='uid', example='62cd4869-71b4-4c9f-b6c4-xxxxxxxxxxxx'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListComponentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListComponentsResponseBody(name='body'),
}

async function listComponents(request: ListComponentsRequest): ListComponentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListComponents', 'GET', '/api/v2/components', 'json', false, 'json', request);
}

model ListDeliveryInstanceChangeRecordsRequest {
  uid?: string(name='uid', example='delivery-inst-5DzPgoGEmOlz', position='Path'),
}

model ListDeliveryInstanceChangeRecordsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      deliverableUID?: string(name='deliverableUID', example='deliver-glXKBVYg8qBL'),
      envChangeRecords?: map[string]any(name='envChangeRecords'),
      envNodeInfo?: [ 
        {
          capacity?: string(name='capacity', example='1530'),
          cpu?: string(name='cpu', example='64'),
          identifier?: string(name='identifier', example='master'),
          label?: map[string]any(name='label'),
          memory?: string(name='memory', example='128'),
          name?: string(name='name', example='qimr'),
          privateIP?: string(name='privateIP', example='192.168.0.1'),
          taints?: map[string]any(name='taints'),
        }
      ](name='envNodeInfo'),
      envPackageConfig?: string(name='envPackageConfig', example='clusterId: dbd9be27-a21d-46f7-b1f0-8c9e383a9099
cluster:
  spec:
    network:
      cniName: calico
      podCIDR: 100.64.0.0/16
      svcCIDR: 10.96.0.0/16
products:
  cy-robot:
    version: 1.0.2
    components:
      robot:
        ROBOT_NUM: \\"2\\"
    namespace: cy-robot
nodes: []
global: {}
system: {}
operator:
  cert: |
    -----BEGIN PUBLIC KEY-----
    
    -----END PUBLIC KEY-----
applicationModel: \\"\\"'),
      originDeliverableUID?: string(name='originDeliverableUID', example='deliver-5OQqK2lMlzZV'),
      uid?: string(name='uid', example='delivery-rec-wMVj9Kp4XW7r'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model ListDeliveryInstanceChangeRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryInstanceChangeRecordsResponseBody(name='body'),
}

async function listDeliveryInstanceChangeRecords(request: ListDeliveryInstanceChangeRecordsRequest): ListDeliveryInstanceChangeRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeliveryInstanceChangeRecords', 'GET', '/api/v2/delivery/delivery-instances/{uid}/delivery-records', 'json', false, 'json', request);
}

model ListDeliveryPackageRequest {
  deliverableUID?: string(name='deliverableUID', example='deliver-lP4pO6yRPqV6', position='Query'),
  platform?: string(name='platform', position='Query'),
}

model ListDeliveryPackageResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      deliverableUID?: string(name='deliverableUID', example='deliver-5MRxYz00PvMk'),
      originDeliverableUID?: string(name='originDeliverableUID', example='deliver-ovAgJx80B9ZV'),
      packageContentType?: string(name='packageContentType', example='application'),
      packageSize?: string(name='packageSize', example='3.97GB'),
      packageStatus?: string(name='packageStatus', example='Success'),
      packageType?: string(name='packageType', example='full'),
      packageUID?: string(name='packageUID', example='1c33e7b7-2df8-4632-9f94-e1d98caa410d'),
      packageURL?: string(name='packageURL', example='https://cn-shanghai-cnx-packages.oss-cn-shanghai.aliyuncs.com/products/xxxxxxxxxxxxxxxxxx'),
      platform?: string(name='platform', example='linux/amd64'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model ListDeliveryPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryPackageResponseBody(name='body'),
}

async function listDeliveryPackage(request: ListDeliveryPackageRequest): ListDeliveryPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeliveryPackage', 'GET', '/api/v2/delivery/delivery-packages', 'json', false, 'json', request);
}

model ListEnvironmentLicensesRequest {
  uid?: string(name='uid', example='1f597e3d-6c11-4ed9-8f59-xxxxxxxxxxxx', position='Path'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  scope?: string(name='scope', example='foundation', position='Query'),
  type?: string(name='type', example='Production', position='Query'),
}

model ListEnvironmentLicensesResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        expireTime?: string(name='expireTime', example='2122-05-10T19:42:15+08:00'),
        licenseKey?: string(name='licenseKey', example='sKSQqgNrIhSL46z44zmNdCTfswaz5qM4inMHUMuCOtnIif4sNaor5U57iuDgrQLDNowllLht1gscn9/5jvhLbaPX5/BsdIqcTG2CVsQdu1g9Jhntw70h3upoWJFzEEo/+hOLRjjGPxWAiDwCflscDlL6JhMJq4tI7Uh/tPx8X7xtIyvH09DJdONfh54hznJrofmLyvrmkqt8VaM5ZPXsLDhetoYcXVCjc4fgSF3t3m+LCFevZKiIjwYc0TMirHZACjU2L0o3ovPzT5crpRafHV3B5GhBPuTlEZ7azdRs2tOKPj/56mPA1mv9easgheGcibeblo+Fnwf/S5CcADfzAwkKCO/57joJu6Wwwnw+VtRcbi2+Eiw7/wohBze8nS6G9J/arjJdmiOyQQ1FTY47mB71x05aFg+ZiLosfZigHG0XgTFx1Is63l6cpfECdCkRh5CwdtOi4Eceto3svcJO1dddBAtcPsYCbtqw8Los38KILlXSVVEgHAhBqHxudAHnZ27CX/z5tizLg6+jNEVpyRJCA1Vm+zAzVJ62xxxxxxxx='),
        licenseQuota?: {
          clusterQuota?: {
            cpuCoreLimit?: int32(name='cpuCoreLimit', example='100'),
          }(name='clusterQuota'),
          componentQuotas?: [ 
            {
              componentName?: string(name='componentName', example='test-component'),
              componentSource?: string(name='componentSource', example='aliyun-inc.com'),
              instanceLimit?: int32(name='instanceLimit', example='1'),
            }
          ](name='componentQuotas'),
          customQuotas?: [ 
            {
              description?: string(name='description', example='description'),
              key?: string(name='key', example='name'),
              value?: string(name='value', example='aliyun'),
            }
          ](name='customQuotas'),
        }(name='licenseQuota'),
        productVersionUID?: string(name='productVersionUID', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
        rejectReason?: string(name='rejectReason'),
        scope?: string(name='scope', example='foundation'),
        status?: string(name='status', example='approved'),
        type?: string(name='type', example='OnTrial'),
        uid?: string(name='uid', example='3c35c6fa-c080-444b-89ac-xxxxxxxxxxxx'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListEnvironmentLicensesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnvironmentLicensesResponseBody(name='body'),
}

async function listEnvironmentLicenses(request: ListEnvironmentLicensesRequest): ListEnvironmentLicensesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironmentLicenses', 'GET', '/api/v2/environments/{uid}/licenses', 'json', false, 'json', request);
}

model ListEnvironmentNodesRequest {
  uid?: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  pageNum?: int32(name='pageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
}

model ListEnvironmentNodesResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [
      InstanceInfo
    ](name='list'),
    pageNum?: long(name='pageNum', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    total?: long(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListEnvironmentNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnvironmentNodesResponseBody(name='body'),
}

async function listEnvironmentNodes(request: ListEnvironmentNodesRequest): ListEnvironmentNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironmentNodes', 'GET', '/api/v2/environments/{uid}/nodes', 'json', false, 'json', request);
}

model ListEnvironmentTunnelsRequest {
  uid: string(name='uid', example='1f597e3d-6c11-4ed9-8f59-xxxxxxxxxxxx', position='Path'),
}

model ListEnvironmentTunnelsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        tunnelConfig?: {
          hostname?: string(name='hostname', example='43.183.xx.xx'),
          password?: string(name='password', example='paasword'),
          regionId?: string(name='regionId', example='cn-hangzhou'),
          sshPort?: int32(name='sshPort', example='22'),
          username?: string(name='username', example='root'),
          vpcId?: string(name='vpcId', example='vpc-uf6cj8ytglguhhxxxxxxxx'),
        }(name='tunnelConfig'),
        tunnelType?: string(name='tunnelType', example='jumpServer'),
      }
    ](name='list'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListEnvironmentTunnelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnvironmentTunnelsResponseBody(name='body'),
}

async function listEnvironmentTunnels(request: ListEnvironmentTunnelsRequest): ListEnvironmentTunnelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironmentTunnels', 'GET', '/api/v2/environments/{uid}/tunnels', 'json', false, 'json', request);
}

model ListEnvironmentsRequest {
  clusterUID?: string(name='clusterUID', example='1f597e3d-6c11-4ed9-8f59-xxx', position='Query'),
  endpoint?: string(name='endpoint', position='Query'),
  foundationType?: string(name='foundationType', example='trident', position='Query'),
  fuzzy?: string(name='fuzzy', example='name', position='Query'),
  instanceStatus?: string(name='instanceStatus', example='INITING', position='Query'),
  name?: string(name='name', position='Query'),
  pageNum?: int32(name='pageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
  type?: string(name='type', example='production', position='Query'),
  vendorType?: string(name='vendorType', example='alicloud', position='Query'),
}

model ListEnvironmentsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        createdAt?: string(name='createdAt', example='2022-05-11T00:00:00+08:00'),
        description?: string(name='description'),
        expireAt: string(name='expireAt'),
        instanceStatus?: string(name='instanceStatus'),
        location?: string(name='location'),
        name?: string(name='name', example='env-demo'),
        platform?: {
          architecture?: string(name='architecture', example='amd64'),
          os?: string(name='os', example='linux'),
        }(name='platform'),
        platformList?: [
          Platform
        ](name='platformList'),
        platformStatus?: string(name='platformStatus'),
        productName?: string(name='productName', example='demo-product'),
        productVersion?: string(name='productVersion', example='v1.0.0'),
        productVersionUID?: string(name='productVersionUID', example='fea3185f-027c-484f-9570-xxx'),
        uid?: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx'),
        vendorType?: string(name='vendorType', example='alicloud'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListEnvironmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnvironmentsResponseBody(name='body'),
}

async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironments', 'GET', '/api/v2/environments', 'json', false, 'json', request);
}

model ListFoundationComponentVersionsRequest {
  uid?: string(name='uid', example='484c4a1e-69c7-4395-8e02-xxx', position='Path'),
  onlyEnabled?: boolean(name='onlyEnabled', position='Query'),
  parentComponentRelationUID?: string(name='parentComponentRelationUID', position='Query'),
}

model ListFoundationComponentVersionsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [
      ComponentVersion
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListFoundationComponentVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoundationComponentVersionsResponseBody(name='body'),
}

async function listFoundationComponentVersions(request: ListFoundationComponentVersionsRequest): ListFoundationComponentVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFoundationComponentVersions', 'GET', '/api/v2/foundation/versions/{uid}/component-versions', 'json', false, 'json', request);
}

model ListFoundationReferenceComponentsRequest {
  foundationReferenceUID?: string(name='foundationReferenceUID', example='d5246b4b-b058-41df-84d0-xxx', position='Query'),
  foundationVersionUID?: string(name='foundationVersionUID', example='4686a7d7-04b4-4101-9466-xxx', position='Query'),
  onlyEnabled?: boolean(name='onlyEnabled', example='false', position='Query'),
  parentComponentReferenceUID?: string(name='parentComponentReferenceUID', position='Query'),
  productVersionUID?: string(name='productVersionUID', example='c67144dc-92a2-4269-a886-xxx', position='Query'),
}

model ListFoundationReferenceComponentsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [
    ProductComponentRelationDetail
  ](name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListFoundationReferenceComponentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoundationReferenceComponentsResponseBody(name='body'),
}

async function listFoundationReferenceComponents(request: ListFoundationReferenceComponentsRequest): ListFoundationReferenceComponentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFoundationReferenceComponents', 'GET', '/api/v2/foundation-references/component-versions', 'json', false, 'json', request);
}

model ListFoundationVersionsRequest {
  onlyDefault?: boolean(name='onlyDefault', position='Query'),
  pageNum?: int32(name='pageNum', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  sortDirect?: string(name='sortDirect', example='ENUM:["DESC","ASC"]', position='Query'),
  sortKey?: string(name='sortKey', example='"created_at"/"sequence"', position='Query'),
  type?: string(name='type', example='ENUM:["trident","ack"]', position='Query'),
  version?: string(name='version', position='Query'),
}

model ListFoundationVersionsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [
      FoundationVersion
    ](name='list'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListFoundationVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoundationVersionsResponseBody(name='body'),
}

async function listFoundationVersions(request: ListFoundationVersionsRequest): ListFoundationVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFoundationVersions', 'GET', '/api/v2/foundation/versions', 'json', false, 'json', request);
}

model ListProductComponentVersionsRequest {
  uid?: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  category?: string(name='category', example='SAAS', position='Query'),
  pageNum?: string(name='pageNum', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='10', maxLength=2, position='Query'),
  releaseName?: string(name='releaseName', position='Query'),
  sortDirect?: string(name='sortDirect', example='ASC', position='Query'),
  sortKey?: string(name='sortKey', example='created_at', position='Query'),
}

model ListProductComponentVersionsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [
      ProductComponentRelationDetail
    ](name='list'),
    pageNum?: long(name='pageNum', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    total?: long(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListProductComponentVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductComponentVersionsResponseBody(name='body'),
}

async function listProductComponentVersions(request: ListProductComponentVersionsRequest): ListProductComponentVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductComponentVersions', 'GET', '/api/v2/product-versions/{uid}/component-versions', 'json', false, 'json', request);
}

model ListProductDeploymentsRequest {
  environmentUID: string(name='environmentUID', example='caf855b8-8c30-498e-96af-xxx', position='Query'),
  pageNum?: int32(name='pageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
  productVersionUID: string(name='productVersionUID', example='3ae49e0d-676c-45a5-8f0e-xxx', position='Query'),
}

model ListProductDeploymentsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        envParams?: string(name='envParams'),
        envUID?: string(name='envUID', example='b8ec63af-7859-4464-9cff-xxx'),
        oldProductVersion?: string(name='oldProductVersion', example='1.0.1'),
        packageContentType?: string(name='packageContentType', example='all'),
        packageInfoUID?: string(name='packageInfoUID', example='dc78905e-f03f-4759-932e-xxx'),
        packageType?: string(name='packageType', example='full'),
        productName?: string(name='productName', example='demo-product'),
        productVersion?: string(name='productVersion', example='1.0.2'),
        status?: string(name='status', example='Success'),
        uid?: string(name='uid', example='5699b683-075a-4c51-a78c-xxx'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListProductDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductDeploymentsResponseBody(name='body'),
}

async function listProductDeployments(request: ListProductDeploymentsRequest): ListProductDeploymentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductDeployments', 'GET', '/api/v2/product-instances/deployments', 'json', false, 'json', request);
}

model ListProductEnvironmentsRequest {
  uid: string(name='uid', position='Path'),
  compatibleProductVersionUID?: string(name='compatibleProductVersionUID', position='Query'),
  envType?: string(name='envType', position='Query'),
  options?: {
    filterWithSpecUID?: boolean(name='filterWithSpecUID'),
    specUID?: string(name='specUID'),
  }(name='options', shrink='json', position='Query'),
  platforms?: [ 
    {
      architecture?: string(name='architecture'),
      os?: string(name='os'),
    }
  ](name='platforms', shrink='json', position='Query'),
  productVersionSpecUID?: string(name='productVersionSpecUID', position='Query'),
  productVersionUID?: string(name='productVersionUID', position='Query'),
}

model ListProductEnvironmentsResponseBody = {
  code?: string(name='code'),
  data?: [ 
    {
      envName?: string(name='envName'),
      envType?: string(name='envType'),
      envUID?: string(name='envUID'),
      instanceStatus?: string(name='instanceStatus', example='实例状态'),
      oldProductVersion?: string(name='oldProductVersion'),
      oldProductVersionUID?: string(name='oldProductVersionUID'),
      platformStatus?: string(name='platformStatus'),
      productName?: string(name='productName'),
      productUID?: string(name='productUID'),
      productVersion?: string(name='productVersion'),
      productVersionUID?: string(name='productVersionUID'),
      provider?: string(name='provider'),
      uid?: string(name='uid'),
      vendorConfig?: string(name='vendorConfig'),
      vendorType?: string(name='vendorType', example='环境类型'),
    }
  ](name='data'),
  msg?: string(name='msg'),
}

model ListProductEnvironmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductEnvironmentsResponseBody(name='body'),
}

async function listProductEnvironments(request: ListProductEnvironmentsRequest): ListProductEnvironmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductEnvironments', 'GET', '/api/v2/hosting/products/{uid}/environments', 'json', false, 'json', request);
}

model ListProductFoundationReferencesRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
}

model ListProductFoundationReferencesResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      foundationReferenceUID?: string(name='foundationReferenceUID', example='b1b528a6-8341-4f06-89af-xxxxxxxxxxxx'),
      foundationVersion?: string(name='foundationVersion', example='1.4.3'),
      foundationVersionName?: string(name='foundationVersionName'),
      foundationVersionType?: string(name='foundationVersionType', example='trident'),
      foundationVersionUID?: string(name='foundationVersionUID', example='796f9044-8684-4de5-9b12-xxxxxxxxxxxx'),
      productVersionUID?: string(name='productVersionUID', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
    }
  ](name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListProductFoundationReferencesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductFoundationReferencesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listProductFoundationReferences(request: ListProductFoundationReferencesRequest): ListProductFoundationReferencesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductFoundationReferences', 'GET', '/api/v2/product-versions/{uid}/foundation-references', 'json', false, 'json', request);
}

model ListProductInstanceConfigsRequest {
  componentReleaseName?: string(name='componentReleaseName', position='Query'),
  environmentUID: string(name='environmentUID', position='Query'),
  fuzzy?: string(name='fuzzy', position='Query'),
  pageNum?: int32(name='pageNum', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', minimum=0, maximum=100, position='Query'),
  paramType: string(name='paramType', example='component/global', position='Query'),
  parameter?: string(name='parameter', position='Query'),
  productVersionUID: string(name='productVersionUID', position='Query'),
}

model ListProductInstanceConfigsResponseBody = {
  code?: string(name='code'),
  data?: {
    list?: [ 
      {
        componentName?: string(name='componentName'),
        componentReleaseName?: string(name='componentReleaseName'),
        componentUID?: string(name='componentUID'),
        componentVersionUID?: string(name='componentVersionUID'),
        createdAt?: string(name='createdAt'),
        description?: string(name='description'),
        envUID?: string(name='envUID'),
        name?: string(name='name'),
        parentComponentName?: string(name='parentComponentName'),
        parentComponentReleaseName?: string(name='parentComponentReleaseName'),
        parentComponentVersionUID?: string(name='parentComponentVersionUID'),
        productName?: string(name='productName'),
        productVersion?: string(name='productVersion'),
        productVersionUID?: string(name='productVersionUID'),
        uid?: string(name='uid'),
        value?: string(name='value'),
        valueType?: string(name='valueType'),
        vendorType?: string(name='vendorType'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  msg?: string(name='msg'),
}

model ListProductInstanceConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductInstanceConfigsResponseBody(name='body'),
}

async function listProductInstanceConfigs(request: ListProductInstanceConfigsRequest): ListProductInstanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductInstanceConfigs', 'GET', '/api/v2/product-instances/configs', 'json', false, 'json', request);
}

model ListProductInstancesRequest {
  envUID?: string(name='envUID', example='b8ec63af-7859-4464-9cff-xxx', position='Query'),
  options?: {
    filterWithSpecUID?: boolean(name='filterWithSpecUID'),
    specUID?: string(name='specUID'),
  }(name='options', shrink='json', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  productVersionUID?: string(name='productVersionUID', example='a38eaad7-d1e7-4395-8d8a-xxx', position='Query'),
}

model ListProductInstancesResponseBody = {
  code?: string(name='code'),
  data?: {
    list?: [ 
      {
        clusterUID?: string(name='clusterUID'),
        continuousDeployment?: boolean(name='continuousDeployment'),
        namespace?: string(name='namespace'),
        productName?: string(name='productName', example='demo-product'),
        productUID?: string(name='productUID'),
        productVersion?: string(name='productVersion', example='v1.0.0'),
        productVersionSpecUID?: string(name='productVersionSpecUID'),
        productVersionUID?: string(name='productVersionUID', example='17c62480-8d60-482d-b1bc-xxx'),
        status?: string(name='status', example='INITIALIZING'),
        timeout?: long(name='timeout'),
        uid?: string(name='uid', example='7f15e716-acfe-4ebe-8def-xxx'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  msg?: string(name='msg'),
}

model ListProductInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductInstancesResponseBody(name='body'),
}

async function listProductInstances(request: ListProductInstancesRequest): ListProductInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductInstances', 'GET', '/api/v2/product-instances', 'json', false, 'json', request);
}

model ListProductVersionConfigsRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  componentReleaseName?: string(name='componentReleaseName', position='Query'),
  configType?: string(name='configType', example='component', position='Query'),
  fuzzy?: string(name='fuzzy', position='Query'),
  pageNum?: string(name='pageNum', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='10', position='Query'),
  parameter?: string(name='parameter', position='Query'),
  scope?: string(name='scope', position='Query'),
}

model ListProductVersionConfigsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        componentName?: string(name='componentName', example='component'),
        componentReleaseName?: string(name='componentReleaseName', example='component'),
        componentVersionUID?: string(name='componentVersionUID', example='9963a9ec-95d0-4e82-88c8-xxxxxxxxxxxx'),
        description?: string(name='description', example='config'),
        name?: string(name='name', example='key'),
        parentComponentName?: string(name='parentComponentName', example='parent-component'),
        parentComponentReleaseName?: string(name='parentComponentReleaseName', example='parent-component'),
        parentComponentVersionUID?: string(name='parentComponentVersionUID', example='d415e042-c4be-4707-9bda-xxxxxxxxxxxx'),
        productVersionUID?: string(name='productVersionUID', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
        scope?: string(name='scope'),
        uid?: string(name='uid', example='fd460c2f-1d81-428d-81f7-xxxxxxxxxxxx'),
        value?: string(name='value', example='value'),
        valueType?: string(name='valueType'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListProductVersionConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductVersionConfigsResponseBody(name='body'),
}

async function listProductVersionConfigs(request: ListProductVersionConfigsRequest): ListProductVersionConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductVersionConfigs', 'GET', '/api/v2/product-versions/{uid}/configs', 'json', false, 'json', request);
}

model ListProductVersionsRequest {
  fuzzy?: string(name='fuzzy', position='Query'),
  pageNum?: string(name='pageNum', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='10', position='Query'),
  platforms?: [ 
    {
      architecture?: string(name='architecture', example='amd64'),
      os?: string(name='os', example='linux'),
    }
  ](name='platforms', shrink='json', position='Query'),
  productName?: string(name='productName', example='test-product', position='Query'),
  productUID?: string(name='productUID', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx', position='Query'),
  released?: boolean(name='released', example='true', position='Query'),
  supportedFoundationTypes?: [ string ](name='supportedFoundationTypes', shrink='json', position='Query'),
  tag?: {
    key?: string(name='key'),
    value?: string(name='value'),
  }(name='tag', shrink='json', position='Query'),
  version?: string(name='version', example='1.0.0', position='Query'),
}

model ListProductVersionsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        annotations?: {
          additionalProp1?: string(name='additionalProp1'),
          additionalProp2?: string(name='additionalProp2'),
          additionalProp3?: string(name='additionalProp3'),
        }(name='annotations'),
        description?: string(name='description', example='test product version'),
        packageURL?: string(name='packageURL'),
        productName?: string(name='productName', example='test'),
        productUID?: string(name='productUID', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx'),
        provider?: string(name='provider'),
        releasedAt?: string(name='releasedAt'),
        tags?: [ 
          {
            key?: string(name='key'),
            value?: string(name='value'),
          }
        ](name='tags'),
        uid?: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx'),
        version?: string(name='version', example='1.0.0'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListProductVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductVersionsResponseBody(name='body'),
}

async function listProductVersions(request: ListProductVersionsRequest): ListProductVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProductVersions', 'GET', '/api/v2/product-versions', 'json', false, 'json', request);
}

model ListProductsRequest {
  description?: string(name='description', position='Query'),
  fuzzy?: string(name='fuzzy', example='name', position='Query'),
  name?: string(name='name', example='product-name', position='Query'),
  pageNum: int32(name='pageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
}

model ListProductsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    list?: [ 
      {
        description?: string(name='description', example='test product'),
        name?: string(name='name', example='test'),
        uid?: string(name='uid', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProducts', 'GET', '/api/v2/products', 'json', false, 'json', request);
}

model ListWorkflowTaskLogsRequest {
  stepName: string(name='stepName', position='Path'),
  taskName: string(name='taskName', position='Path'),
  filterValues?: [ string ](name='filterValues', shrink='json', position='Query'),
  orderType?: string(name='orderType', example='ENUM:["positive","reverse"]', position='Query'),
  pageNum?: long(name='pageNum', minimum=1, maximum=10000, position='Query'),
  pageSize?: long(name='pageSize', example='100', maximum=100, position='Query'),
  workflowType: string(name='workflowType', position='Query'),
  xuid: string(name='xuid', position='Query'),
}

model ListWorkflowTaskLogsResponseBody = {
  code?: string(name='code'),
  data?: {
    list?: [ string ](name='list'),
    pageNum?: long(name='pageNum'),
    pageSize?: long(name='pageSize'),
    total?: long(name='total'),
  }(name='data'),
  msg?: string(name='msg'),
}

model ListWorkflowTaskLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkflowTaskLogsResponseBody(name='body'),
}

async function listWorkflowTaskLogs(request: ListWorkflowTaskLogsRequest): ListWorkflowTaskLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkflowTaskLogs', 'GET', '/api/v2/workflows/steps/{stepName}/tasks/{taskName}/logs', 'json', false, 'json', request);
}

model PutEnvironmentTunnelRequest {
  uid: string(name='uid', example='1f597e3d-6c11-4ed9-8f59-xxxxxxxxxxxx', position='Path'),
  tunnelConfig: {
    hostname?: string(name='hostname', example='43.183.xx.xx'),
    password?: string(name='password', example='paasword'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    sshPort?: int32(name='sshPort', example='22'),
    username?: string(name='username', example='root'),
    vpcId?: string(name='vpcId', example='vpc-uf6cj8ytglguhhxxxxxxxx'),
  }(name='tunnelConfig', position='Body'),
  tunnelType: string(name='tunnelType', example='jumpServer', position='Body'),
}

model PutEnvironmentTunnelResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    uid?: string(name='uid', example='07841a56-b0e5-4241-a4a0-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model PutEnvironmentTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutEnvironmentTunnelResponseBody(name='body'),
}

async function putEnvironmentTunnel(request: PutEnvironmentTunnelRequest): PutEnvironmentTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutEnvironmentTunnel', 'PUT', '/api/v2/environments/{uid}/tunnels', 'json', false, 'json', request);
}

model PutProductInstanceConfigRequest {
  componentUID?: string(name='componentUID', position='Body'),
  componentVersionUID?: string(name='componentVersionUID', position='Body'),
  configUID?: string(name='configUID', position='Body'),
  description?: string(name='description', position='Body'),
  environmentUID?: string(name='environmentUID', position='Body'),
  name?: string(name='name', position='Body'),
  parentComponentName?: string(name='parentComponentName', position='Body'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID', position='Body'),
  productVersionUID?: string(name='productVersionUID', position='Body'),
  releaseName?: string(name='releaseName', position='Body'),
  scope?: [ string ](name='scope', position='Body'),
  value?: string(name='value', position='Body'),
  valueType?: string(name='valueType', position='Body'),
}

model PutProductInstanceConfigResponseBody = {
  code?: string(name='code'),
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
  msg?: string(name='msg'),
}

model PutProductInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutProductInstanceConfigResponseBody(name='body'),
}

async function putProductInstanceConfig(request: PutProductInstanceConfigRequest): PutProductInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProductInstanceConfig', 'PUT', '/api/v2/product-instances/configs', 'json', false, 'json', request);
}

model SetEnvironmentFoundationReferenceRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  foundationReferenceUID: string(name='foundationReferenceUID', example='d69bcc72-2117-4902-8d12-xxx', position='Path'),
}

model SetEnvironmentFoundationReferenceResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model SetEnvironmentFoundationReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetEnvironmentFoundationReferenceResponseBody(name='body'),
}

async function setEnvironmentFoundationReference(request: SetEnvironmentFoundationReferenceRequest): SetEnvironmentFoundationReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetEnvironmentFoundationReference', 'POST', '/api/v2/environments/{uid}/foundation-references/{foundationReferenceUID}', 'json', false, 'json', request);
}

model UpdateDeliverableRequest {
  uid?: string(name='uid', example='deliver-Y08jrzAj0PMk', position='Path'),
  foundation?: {
    clusterConfig?: string(name='clusterConfig'),
    foundationReferenceUID?: string(name='foundationReferenceUID', example='1c70d948-a94f-4371-9bc1-8979b01cedfe'),
    foundationVersion?: string(name='foundationVersion', example='1.4.2'),
    foundationVersionUID?: string(name='foundationVersionUID', example='484c4a1e-69c7-4395-8e02-d461b6894076'),
    reusable?: boolean(name='reusable'),
  }(name='foundation', position='Body'),
  products?: [ 
    {
      namespace?: string(name='namespace'),
      productName?: string(name='productName', example='catalog-demo'),
      productType?: string(name='productType', example='own'),
      productUID?: string(name='productUID', example='cf509b6f-fb35-428c-af8d-8c3feac4a868'),
      productVersion?: string(name='productVersion', example='0.1.11'),
      productVersionSpecName?: string(name='productVersionSpecName'),
      productVersionSpecUID?: string(name='productVersionSpecUID', example='a3ebabac-5249-47b7-9d9f-969e9b284f1c'),
      productVersionUID?: string(name='productVersionUID', example='244e3507-cc73-4709-b547-a72f41245d9a'),
    }
  ](name='products', position='Body'),
  status?: string(name='status', position='Body'),
}

model UpdateDeliverableResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model UpdateDeliverableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeliverableResponseBody(name='body'),
}

async function updateDeliverable(request: UpdateDeliverableRequest): UpdateDeliverableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeliverable', 'PUT', '/api/v2/delivery/deliverables/{uid}', 'json', false, 'json', request);
}

model UpdateDeliveryInstanceRequest {
  uid?: string(name='uid', example='delivery-inst-1R3og8LzprBM', position='Path'),
  deliverableConfigUID?: string(name='deliverableConfigUID', example='deliver-cfg-Y5lx8QmLLp9O', position='Body'),
  deliverableUID?: string(name='deliverableUID', example='deliver-ppAzK3r8nvVp', position='Body'),
  desc?: string(name='desc', position='Body'),
}

model UpdateDeliveryInstanceResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='succeed in handling request'),
}

model UpdateDeliveryInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeliveryInstanceResponseBody(name='body'),
}

async function updateDeliveryInstance(request: UpdateDeliveryInstanceRequest): UpdateDeliveryInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeliveryInstance', 'PUT', '/api/v2/delivery/delivery-instances/{uid}', 'json', false, 'json', request);
}

model UpdateEnvironmentRequest {
  uid: string(name='uid', example='bc126240-c4c2-4199-9f22-xxx', position='Path'),
  advancedConfigs?: {
    enableDeploySimulation?: boolean(name='enableDeploySimulation'),
    enableSiteSurvey?: boolean(name='enableSiteSurvey'),
  }(name='advancedConfigs', position='Body'),
  description?: string(name='description', position='Body'),
  location?: string(name='location', position='Body'),
  vendorConfig?: string(name='vendorConfig', position='Body'),
}

model UpdateEnvironmentResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnvironmentResponseBody(name='body'),
}

async function updateEnvironment(request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEnvironment', 'PUT', '/api/v2/environments/{uid}', 'json', false, 'json', request);
}

model UpdateEnvironmentNodeRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  nodeUID: string(name='nodeUID', example='8e340ce5-53c3-4976-93f4-xxx', position='Path'),
  applicationDisk?: string(name='applicationDisk', example='/dev/vdb', position='Body'),
  etcdDisk?: string(name='etcdDisk', example='/dev/vdc', position='Body'),
  labels?: map[string]any(name='labels', example='{"key1":"value1","key2":"value2"}', position='Body'),
  rootPassword?: string(name='rootPassword', example='rootPassword', position='Body'),
  taints?: [ 
    {
      effect?: string(name='effect', example='NoSchedule'),
      key?: string(name='key', example='key'),
      value?: string(name='value', example='value'),
    }
  ](name='taints', position='Body'),
  tridentSystemDisk?: string(name='tridentSystemDisk', example='/dev/vdb', position='Body'),
  tridentSystemSizeDisk?: int32(name='tridentSystemSizeDisk', example='400', position='Body'),
}

model UpdateEnvironmentNodeResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateEnvironmentNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnvironmentNodeResponseBody(name='body'),
}

async function updateEnvironmentNode(request: UpdateEnvironmentNodeRequest): UpdateEnvironmentNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEnvironmentNode', 'PUT', '/api/v2/environments/{uid}/nodes/{nodeUID}', 'json', false, 'json', request);
}

model UpdateEnvironmentProductVersionRequest {
  uid: string(name='uid', example='b8ec63af-7859-4464-9cff-xxx', position='Path'),
  oldProductVersionSpecUID?: string(name='oldProductVersionSpecUID', position='Body'),
  oldProductVersionUID?: string(name='oldProductVersionUID', example='9cb5d348-7c0a-4428-8ed1-xxx', position='Body'),
  productVersionSpecUID?: string(name='productVersionSpecUID', position='Body'),
  productVersionUID: string(name='productVersionUID', example='1280876d-d548-45cb-bd90-xxx', position='Body'),
}

model UpdateEnvironmentProductVersionResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateEnvironmentProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnvironmentProductVersionResponseBody(name='body'),
}

async function updateEnvironmentProductVersion(request: UpdateEnvironmentProductVersionRequest): UpdateEnvironmentProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEnvironmentProductVersion', 'PUT', '/api/v2/environments/{uid}/product-versions', 'json', false, 'json', request);
}

model UpdateFoundationComponentReferenceRequest {
  uid: string(name='uid', example='d5246b4b-b058-41df-84d0-xxx', position='Path'),
  componentReferenceUID: string(name='componentReferenceUID', example='53193d8e-47b8-41f6-90be-xxx', position='Path'),
  componentOrchestrationValues?: string(name='componentOrchestrationValues', position='Body'),
  enable?: boolean(name='enable', example='false', position='Body'),
}

model UpdateFoundationComponentReferenceResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateFoundationComponentReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFoundationComponentReferenceResponseBody(name='body'),
}

async function updateFoundationComponentReference(request: UpdateFoundationComponentReferenceRequest): UpdateFoundationComponentReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFoundationComponentReference', 'PUT', '/api/v2/foundation-references/{uid}/components/{componentReferenceUID}', 'json', false, 'json', request);
}

model UpdateFoundationReferenceRequest {
  uid: string(name='uid', example='d82752c1-7247-4679-8f31-xxx', position='Path'),
  clusterConfig: string(name='clusterConfig', position='Body'),
}

model UpdateFoundationReferenceResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateFoundationReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFoundationReferenceResponseBody(name='body'),
}

async function updateFoundationReference(request: UpdateFoundationReferenceRequest): UpdateFoundationReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFoundationReference', 'PUT', '/api/v2/foundation-references/{uid}', 'json', false, 'json', request);
}

model UpdateProductRequest {
  uid: string(name='uid', example='54ccb2c9-3205-4159-8c44-xxxxxxxxxxxx', position='Path'),
  categories?: [ string ](name='categories', position='Body'),
  description?: string(name='description', position='Body'),
  displayName?: string(name='displayName', position='Body'),
  vendor?: string(name='vendor', position='Body'),
}

model UpdateProductResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProduct', 'PUT', '/api/v2/products/{uid}', 'json', false, 'json', request);
}

model UpdateProductComponentVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  relationUID: string(name='relationUID', example='85f035f0-7a56-478c-8869-xxxxxxxxxxxx', position='Path'),
  componentOrchestrationValues?: string(name='componentOrchestrationValues', example='replicaCount: 2\\n\\nresources:\\n  limits:\\n    cpu: 200m\\n    memory: 512Mi\\n  requests:\\n    cpu: 100m\\n    memory: 256Mi', position='Body'),
  componentSpecificationUid?: string(name='componentSpecificationUid', position='Body'),
  componentSpecificationValues?: string(name='componentSpecificationValues', position='Body'),
  enable?: boolean(name='enable', example='true', position='Body'),
  newComponentVersionUID?: string(name='newComponentVersionUID', example='9963a9ec-95d0-4e82-88c8-xxxxxxxxxxxx', position='Body'),
  policy?: {
    multiCluster?: {
      autoInstall?: boolean(name='autoInstall'),
      targetClusters?: [ string ](name='targetClusters'),
    }(name='multiCluster'),
  }(name='policy', position='Body'),
  releaseName?: string(name='releaseName', example='component-release', position='Body'),
  unsetComponentVersionSpec?: boolean(name='unsetComponentVersionSpec', position='Body'),
}

model UpdateProductComponentVersionResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    relationUID?: string(name='relationUID', example='85f035f0-7a56-478c-8869-xxxxxxxxxxxx'),
  }(name='data'),
  msg?: string(name='msg', example='Success'),
}

model UpdateProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductComponentVersionResponseBody(name='body'),
}

async function updateProductComponentVersion(request: UpdateProductComponentVersionRequest): UpdateProductComponentVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProductComponentVersion', 'PUT', '/api/v2/product-versions/{uid}/relations/{relationUID}', 'json', false, 'json', request);
}

model UpdateProductFoundationVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  foundationVersionUID?: string(name='foundationVersionUID', example='796f9044-8684-4de5-9b12-xxxxxxxxxxxx', position='Body'),
}

model UpdateProductFoundationVersionResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateProductFoundationVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductFoundationVersionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function updateProductFoundationVersion(request: UpdateProductFoundationVersionRequest): UpdateProductFoundationVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProductFoundationVersion', 'PUT', '/api/v2/product-versions/{uid}/foundation', 'json', false, 'json', request);
}

model UpdateProductVersionRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  action?: string(name='action', position='Query'),
  continuousIntegration?: boolean(name='continuousIntegration', position='Body'),
  description?: string(name='description', position='Body'),
  entry?: string(name='entry', position='Body'),
  timeout?: long(name='timeout', position='Body'),
  version?: string(name='version', example='1.0.0', position='Body'),
}

model UpdateProductVersionResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model UpdateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductVersionResponseBody(name='body'),
}

async function updateProductVersion(request: UpdateProductVersionRequest): UpdateProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProductVersion', 'PUT', '/api/v2/product-versions/{uid}', 'json', false, 'json', request);
}

model UpdateProductVersionConfigRequest {
  uid: string(name='uid', example='e61f944c-c021-46bd-a877-xxxxxxxxxxxx', position='Path'),
  configUID: string(name='configUID', example='fd460c2f-1d81-428d-81f7-xxxxxxxxxxxx', position='Path'),
  componentVersionUID?: string(name='componentVersionUID', example='9963a9ec-95d0-4e82-88c8-xxxxxxxxxxxx', position='Body'),
  description?: string(name='description', example='config', position='Body'),
  name?: string(name='name', example='key', position='Body'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID', example='d415e042-c4be-4707-9bda-xxxxxxxxxxxx', position='Body'),
  value?: string(name='value', example='value', position='Body'),
  valueType?: string(name='valueType', example='string', position='Body'),
}

model UpdateProductVersionConfigResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
  requestId?: string(name='requestId', example='C2B58140-529E-5335-B998-xxxxxxxxxxxx'),
}

model UpdateProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductVersionConfigResponseBody(name='body'),
}

async function updateProductVersionConfig(request: UpdateProductVersionConfigRequest): UpdateProductVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProductVersionConfig', 'PUT', '/api/v2/product-versions/{uid}/configs/{configUID}', 'json', false, 'json', request);
}

model ValidateEnvironmentTunnelRequest {
  uid: string(name='uid', example='1f597e3d-6c11-4ed9-8f59-xxxxxxxxxxxx', position='Path'),
  tunnelConfig: {
    hostname?: string(name='hostname', example='43.183.xx.xx'),
    password?: string(name='password', example='password'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    sshPort?: int32(name='sshPort', example='22'),
    username?: string(name='username', example='root'),
    vpcId?: string(name='vpcId', example='vpc-uf6cj8ytglguhhxxxxxxxx'),
  }(name='tunnelConfig', position='Body'),
  tunnelType: string(name='tunnelType', example='jumpServer', position='Body'),
}

model ValidateEnvironmentTunnelResponseBody = {
  code?: string(name='code', example='Success'),
  msg?: string(name='msg', example='Success'),
}

model ValidateEnvironmentTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateEnvironmentTunnelResponseBody(name='body'),
}

async function validateEnvironmentTunnel(request: ValidateEnvironmentTunnelRequest): ValidateEnvironmentTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateEnvironmentTunnel', 'PUT', '/api/v2/environments/{uid}/tunnels/validation', 'json', false, 'json', request);
}

