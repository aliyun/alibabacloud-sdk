/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('adp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ProductComponentRelationDetail {
  appVersion?: string(name='appVersion', description='appVersion'),
  category?: string(name='category', description='category'),
  class?: string(name='class', description='class'),
  componentName?: string(name='componentName', description='componentName'),
  componentOrchestrationValues?: string(name='componentOrchestrationValues', description='componentOrchestrationValues'),
  componentUID?: string(name='componentUID', description='componentUID'),
  componentVersionUID?: string(name='componentVersionUID', description='componentVersionUID'),
  createdAt?: string(name='createdAt', description='createdAt'),
  description?: string(name='description', description='description'),
  documents?: string(name='documents', description='documents'),
  enable?: boolean(name='enable', description='enable'),
  imagesMapping?: string(name='imagesMapping', description='imagesMapping'),
  namespace?: string(name='namespace', description='namespace'),
  orchestrationType?: string(name='orchestrationType', description='orchestrationType'),
  parentComponent?: boolean(name='parentComponent', description='parentComponent'),
  parentComponentVersionRelationUID?: string(name='parentComponentVersionRelationUID', description='parentComponentVersionRelationUID'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID', description='parentComponentVersionUID'),
  priority?: int32(name='priority', description='priority'),
  productVersionUID?: string(name='productVersionUID', description='productVersionUID'),
  provider?: string(name='provider', description='provider'),
  public?: boolean(name='public', description='public'),
  readme?: string(name='readme', description='readme'),
  relationUID?: string(name='relationUID', description='relationUID'),
  releaseName?: string(name='releaseName', description='releaseName'),
  resources?: string(name='resources', description='resources'),
  sequence?: int32(name='sequence', description='sequence'),
  singleton?: boolean(name='singleton', description='singleton'),
  source?: string(name='source', description='source'),
  version?: string(name='version', description='version'),
}

model Platform {
  architecture?: string(name='architecture', description='architecture'),
  os?: string(name='os', description='os'),
}

model FoundationVersion {
  description?: string(name='description', description='description'),
  documents?: string(name='documents', description='documents'),
  name?: string(name='name', description='name'),
  status?: string(name='status', description='status'),
  uid?: string(name='uid', description='uid'),
  version?: string(name='version', description='version'),
  platforms?: [
    Platform
  ](name='platforms', description='platforms'),
}

model GetInstanceInfoResponse {
  identifier?: string(name='identifier', description='identifier'),
  hostName?: string(name='hostName', description='hostName'),
  os?: string(name='os', description='os'),
  osVersion?: string(name='osVersion', description='osVersion'),
  arch?: string(name='arch', description='arch'),
  kernel?: string(name='kernel', description='kernel'),
  macAddress?: string(name='macAddress', description='macAddress'),
  cpu?: string(name='cpu', description='cpu'),
  memory?: string(name='memory', description='memory'),
  systemDisk?: [
    Disk
  ](name='systemDisk', description='systemDisk'),
  dataDisk?: [
    Disk
  ](name='dataDisk', description='dataDisk'),
  privateIP?: string(name='privateIP', description='privateIP'),
  publicIP?: string(name='publicIP', description='publicIP'),
  internetBandwidth?: int32(name='internetBandwidth', description='internetBandwidth'),
  networkCards?: [ 
    {
      name?: string(name='name', description='name'),
      ip?: string(name='ip', description='ip'),
    }
  ](name='networkCards', description='networkCards'),
  imageID?: string(name='imageID', description='imageID'),
  uid?: string(name='uid', description='uid'),
  instanceType?: string(name='instanceType', description='instanceType'),
  systemInfo?: string(name='systemInfo', description='systemInfo'),
  rootPassword?: string(name='rootPassword', description='rootPassword'),
  labels?: map[string]string(name='labels', description='labels'),
  taints?: [ 
    {
      key?: string(name='key', description='key'),
      value?: string(name='value', description='value'),
      effect?: string(name='effect', description='effect'),
    }
  ](name='taints', description='taints'),
  annotations?: map[string]string(name='annotations', description='annotations'),
}

model InstanceInfo {
  identifier?: string(name='identifier', description='identifier'),
  hostName?: string(name='hostName', description='hostName'),
  os?: string(name='os', description='os'),
  osVersion?: string(name='osVersion', description='osVersion'),
  arch?: string(name='arch', description='arch'),
  kernel?: string(name='kernel', description='kernel'),
  macAddress?: string(name='macAddress', description='macAddress'),
  cpu?: string(name='cpu', description='cpu'),
  memory?: string(name='memory', description='memory'),
  systemDisk?: [
    Disk
  ](name='systemDisk', description='systemDisk'),
  dataDisk?: [
    Disk
  ](name='dataDisk', description='dataDisk'),
  privateIP?: string(name='privateIP', description='privateIP'),
  publicIP?: string(name='publicIP', description='publicIP'),
  internetBandwidth?: int32(name='internetBandwidth', description='internetBandwidth'),
  networkCards?: [ 
    {
      name?: string(name='name', description='name'),
      ip?: string(name='ip', description='ip'),
    }
  ](name='networkCards', description='networkCards'),
  imageID?: string(name='imageID', description='imageID'),
  instanceType?: string(name='instanceType', description='instanceType'),
  systemInfo?: string(name='systemInfo', description='systemInfo'),
  rootPassword?: string(name='rootPassword', description='rootPassword'),
  labels?: map[string]string(name='labels', description='labels'),
  taints?: [ 
    {
      key?: string(name='key', description='key'),
      value?: string(name='value', description='value'),
      effect?: string(name='effect', description='effect'),
    }
  ](name='taints', description='taints'),
  annotations?: map[string]string(name='annotations', description='annotations'),
}

model Disk {
  name?: string(name='name', description='name'),
  capacity?: int32(name='capacity', description='capacity'),
  remain?: int32(name='remain', description='remain'),
  fsType?: string(name='fsType', description='fsType'),
  mountPoint?: string(name='mountPoint', description='mountPoint'),
  type?: string(name='type', description='type'),
}

model ComponentVersion {
  appVersion?: string(name='appVersion', description='appVersion'),
  componentName?: string(name='componentName', description='componentName'),
  componentUID?: string(name='componentUID', description='componentUID'),
  description?: string(name='description', description='description'),
  documents?: string(name='documents', description='documents'),
  imagesMapping?: string(name='imagesMapping', description='imagesMapping'),
  namespace?: string(name='namespace', description='namespace'),
  orchestrationType?: string(name='orchestrationType', description='orchestrationType'),
  orchestrationValues?: string(name='orchestrationValues', description='orchestrationValues'),
  packageURL?: string(name='packageURL', description='packageURL'),
  parentComponent?: boolean(name='parentComponent', description='parentComponent'),
  platforms?: [
    Platform
  ](name='platforms', description='platforms'),
  readme?: string(name='readme', description='readme'),
  resources?: string(name='resources', description='resources'),
  source?: string(name='source', description='source'),
  uid?: string(name='uid', description='uid'),
  version?: string(name='version', description='version'),
}

model GetEnvironmentResponseBody = {
  data?: {
    clusterId?: string(name='clusterId'),
    createdAt?: string(name='createdAt'),
    description?: string(name='description'),
    instanceList?: [
      InstanceInfo
    ](name='instanceList'),
    location?: string(name='location'),
    name?: string(name='name'),
    platform?: {
      architecture?: string(name='architecture'),
      os?: string(name='os'),
    }(name='platform'),
    productName?: string(name='productName'),
    productVersion?: string(name='productVersion'),
    uid?: string(name='uid'),
    vendorConfig?: string(name='vendorConfig'),
    vendorType?: string(name='vendorType'),
    instanceStatus?: string(name='instanceStatus'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnvironmentResponseBody(name='body'),
}

async function getEnvironment(uid: string): GetEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEnvironmentWithOptions(uid, headers, runtime);
}

async function getEnvironmentWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetEnvironmentResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetEnvironment', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/environments/${uid}`, 'json', req, runtime);
}

model GetProductVersionPackageRequest {
  packageUID?: string(name='packageUID'),
  platform?: string(name='platform'),
  packageType?: string(name='packageType'),
  packageContentType?: string(name='packageContentType'),
  oldProductVersionUID?: string(name='oldProductVersionUID'),
  withURL?: boolean(name='withURL'),
}

model GetProductVersionPackageResponseBody = {
  data?: {
    packageUID?: string(name='packageUID'),
    packageStatus?: string(name='packageStatus'),
    packageURL?: string(name='packageURL'),
    packageSize?: string(name='packageSize'),
    packageType?: string(name='packageType'),
    packageContentType?: string(name='packageContentType'),
    platform?: Platform(name='platform'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetProductVersionPackageResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductVersionPackageResponseBody(name='body'),
}

async function getProductVersionPackage(uid: string, request: GetProductVersionPackageRequest): GetProductVersionPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductVersionPackageWithOptions(uid, request, headers, runtime);
}

async function getProductVersionPackageWithOptions(uid: string, request: GetProductVersionPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductVersionPackageResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var query : map[string]any= {};
  if (!Util.isUnset(request.packageUID)) {
    query.packageUID = request.packageUID;
  }
  if (!Util.isUnset(request.platform)) {
    query.platform = request.platform;
  }
  if (!Util.isUnset(request.packageType)) {
    query.packageType = request.packageType;
  }
  if (!Util.isUnset(request.packageContentType)) {
    query.packageContentType = request.packageContentType;
  }
  if (!Util.isUnset(request.oldProductVersionUID)) {
    query.oldProductVersionUID = request.oldProductVersionUID;
  }
  if (!Util.isUnset(request.withURL)) {
    query.withURL = request.withURL;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetProductVersionPackage', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/hosting/product-versions/${uid}/packages`, 'json', req, runtime);
}

model ListProductDeploymentsRequest {
  environmentUID?: string(name='environmentUID'),
  productVersionUID?: string(name='productVersionUID'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
}

model ListProductDeploymentsResponseBody = {
  data?: {
    list?: [ 
      {
        envUID?: string(name='envUID'),
        status?: string(name='status'),
        uid?: string(name='uid'),
        productVersion?: string(name='productVersion'),
        oldProductVersion?: string(name='oldProductVersion'),
        packageInfoUID?: string(name='packageInfoUID'),
        envParams?: string(name='envParams'),
        packageType?: string(name='packageType'),
        packageContentType?: string(name='packageContentType'),
        productName?: string(name='productName'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListProductDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductDeploymentsResponseBody(name='body'),
}

async function listProductDeployments(request: ListProductDeploymentsRequest): ListProductDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductDeploymentsWithOptions(request, headers, runtime);
}

async function listProductDeploymentsWithOptions(request: ListProductDeploymentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductDeploymentsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.environmentUID)) {
    query.environmentUID = request.environmentUID;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    query.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListProductDeployments', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/product-instances/deployments`, 'json', req, runtime);
}

model ListEnvironmentNodesRequest {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
}

model ListEnvironmentNodesResponseBody = {
  data?: {
    list?: [
      GetInstanceInfoResponse
    ](name='list'),
    pageNum?: long(name='pageNum'),
    pageSize?: long(name='pageSize'),
    total?: long(name='total'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListEnvironmentNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnvironmentNodesResponseBody(name='body'),
}

async function listEnvironmentNodes(uid: string, request: ListEnvironmentNodesRequest): ListEnvironmentNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentNodesWithOptions(uid, request, headers, runtime);
}

async function listEnvironmentNodesWithOptions(uid: string, request: ListEnvironmentNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentNodesResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListEnvironmentNodes', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/environments/${uid}/nodes`, 'json', req, runtime);
}

model AddProductComponentVersionRequest {
  releaseName?: string(name='releaseName'),
}

model AddProductComponentVersionResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
}

model AddProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: AddProductComponentVersionResponseBody(name='body'),
}

async function addProductComponentVersion(uid: string, componentVersionUID: string, request: AddProductComponentVersionRequest): AddProductComponentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addProductComponentVersionWithOptions(uid, componentVersionUID, request, headers, runtime);
}

async function addProductComponentVersionWithOptions(uid: string, componentVersionUID: string, request: AddProductComponentVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductComponentVersionResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  componentVersionUID = OpenApiUtil.getEncodeParam(componentVersionUID);
  var body : map[string]any= {};
  if (!Util.isUnset(request.releaseName)) {
    body.releaseName = request.releaseName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('AddProductComponentVersion', '2021-07-20', 'HTTPS', 'POST', 'AK', `/integration/api/v2/product-versions/${uid}/component-versions/${componentVersionUID}`, 'json', req, runtime);
}

model UpdateEnvironmentNodeRequest {
  labels?: map[string]any(name='labels'),
  rootPassword?: string(name='rootPassword'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints'),
  etcdDisk?: string(name='etcdDisk', description='etcd数据盘'),
  tridentSystemDisk?: string(name='tridentSystemDisk', description='k8s管控数据盘'),
  tridentSystemSizeDisk?: int32(name='tridentSystemSizeDisk', description='k8s管控数据盘大小'),
  applicationDisk?: string(name='applicationDisk', description='保留业务分区'),
}

model UpdateEnvironmentNodeResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateEnvironmentNodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEnvironmentNodeResponseBody(name='body'),
}

async function updateEnvironmentNode(uid: string, nodeUID: string, request: UpdateEnvironmentNodeRequest): UpdateEnvironmentNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateEnvironmentNodeWithOptions(uid, nodeUID, request, headers, runtime);
}

async function updateEnvironmentNodeWithOptions(uid: string, nodeUID: string, request: UpdateEnvironmentNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEnvironmentNodeResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  nodeUID = OpenApiUtil.getEncodeParam(nodeUID);
  var body : map[string]any= {};
  if (!Util.isUnset(request.labels)) {
    body.labels = request.labels;
  }
  if (!Util.isUnset(request.rootPassword)) {
    body.rootPassword = request.rootPassword;
  }
  if (!Util.isUnset(request.taints)) {
    body.taints = request.taints;
  }
  if (!Util.isUnset(request.etcdDisk)) {
    body.etcdDisk = request.etcdDisk;
  }
  if (!Util.isUnset(request.tridentSystemDisk)) {
    body.tridentSystemDisk = request.tridentSystemDisk;
  }
  if (!Util.isUnset(request.tridentSystemSizeDisk)) {
    body.tridentSystemSizeDisk = request.tridentSystemSizeDisk;
  }
  if (!Util.isUnset(request.applicationDisk)) {
    body.applicationDisk = request.applicationDisk;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateEnvironmentNode', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/environments/${uid}/nodes/${nodeUID}`, 'json', req, runtime);
}

model DeleteProductVersionResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model DeleteProductVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductVersionResponseBody(name='body'),
}

async function deleteProductVersion(uid: string): DeleteProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductVersionWithOptions(uid, headers, runtime);
}

async function deleteProductVersionWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductVersionResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteProductVersion', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/api/v2/products/${uid}/versions`, 'json', req, runtime);
}

model CreateProductHeaders {
  commonHeaders?: map[string]string,
  clientToken?: string(name='ClientToken'),
}

model CreateProductRequest {
  description?: string(name='description'),
  foundationVersionUID?: string(name='foundationVersionUID'),
  productName?: string(name='productName'),
}

model CreateProductResponseBody = {
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductResponseBody(name='body'),
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateProductHeaders{};
  return createProductWithOptions(request, headers, runtime);
}

async function createProductWithOptions(request: CreateProductRequest, headers: CreateProductHeaders, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.foundationVersionUID)) {
    body.foundationVersionUID = request.foundationVersionUID;
  }
  if (!Util.isUnset(request.productName)) {
    body.productName = request.productName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.clientToken)) {
    realHeaders.ClientToken = headers.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProduct', '2021-07-20', 'HTTPS', 'POST', 'AK', `/integration/api/v2/products`, 'json', req, runtime);
}

model ValidateEnvironmentTunnelRequest {
  tunnelType?: string(name='tunnelType', description='通道类型'),
  tunnelConfig?: {
    hostname?: string(name='hostname', description='跳板机hostname'),
    sshPort?: int32(name='sshPort', description='跳板机ssh端口号'),
    username?: string(name='username', description='跳板机用户名'),
    password?: string(name='password', description='跳板机密码'),
    vpcId?: string(name='vpcId', description='直连vpcId'),
    regionId?: string(name='regionId', description='直连地域id'),
  }(name='tunnelConfig', description='通道配置'),
}

model ValidateEnvironmentTunnelResponseBody = {
  code?: string(name='code', description='错误码'),
  msg?: string(name='msg', description='错误信息'),
}

model ValidateEnvironmentTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateEnvironmentTunnelResponseBody(name='body'),
}

async function validateEnvironmentTunnel(uid: string, request: ValidateEnvironmentTunnelRequest): ValidateEnvironmentTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return validateEnvironmentTunnelWithOptions(uid, request, headers, runtime);
}

async function validateEnvironmentTunnelWithOptions(uid: string, request: ValidateEnvironmentTunnelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ValidateEnvironmentTunnelResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.tunnelType)) {
    body.tunnelType = request.tunnelType;
  }
  if (!Util.isUnset(request.tunnelConfig)) {
    body.tunnelConfig = request.tunnelConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ValidateEnvironmentTunnel', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/environments/${uid}/tunnels/validation`, 'json', req, runtime);
}

model CreateProductDeploymentRequest {
  packageUID?: string(name='packageUID', description='部署包uid'),
  environmentUID?: string(name='environmentUID', description='环境uid'),
  productVersionUID?: string(name='productVersionUID', description='产品版本uid'),
  oldProductVersionUID?: string(name='oldProductVersionUID', description='旧产品版本uid'),
}

model CreateProductDeploymentResponseBody = {
  code?: string(name='code', description='错误码'),
  msg?: string(name='msg', description='错误信息'),
  data?: {
    uid?: string(name='uid', description='部署uid'),
  }(name='data', description='数据'),
}

model CreateProductDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductDeploymentResponseBody(name='body'),
}

async function createProductDeployment(request: CreateProductDeploymentRequest): CreateProductDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductDeploymentWithOptions(request, headers, runtime);
}

async function createProductDeploymentWithOptions(request: CreateProductDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProductDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.packageUID)) {
    body.packageUID = request.packageUID;
  }
  if (!Util.isUnset(request.environmentUID)) {
    body.environmentUID = request.environmentUID;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    body.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.oldProductVersionUID)) {
    body.oldProductVersionUID = request.oldProductVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProductDeployment', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/product-instances/deployments`, 'json', req, runtime);
}

model DeleteProductComponentVersionResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model DeleteProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductComponentVersionResponseBody(name='body'),
}

async function deleteProductComponentVersion(uid: string, relationUID: string): DeleteProductComponentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductComponentVersionWithOptions(uid, relationUID, headers, runtime);
}

async function deleteProductComponentVersionWithOptions(uid: string, relationUID: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductComponentVersionResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  relationUID = OpenApiUtil.getEncodeParam(relationUID);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteProductComponentVersion', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/api/v2/product-versions/${uid}/relations/${relationUID}`, 'json', req, runtime);
}

model DeleteEnvironmentResponseBody = {
  msg?: string(name='msg'),
  code?: string(name='code'),
}

model DeleteEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEnvironmentResponseBody(name='body'),
}

async function deleteEnvironment(uid: string): DeleteEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEnvironmentWithOptions(uid, headers, runtime);
}

async function deleteEnvironmentWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEnvironmentResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteEnvironment', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/api/v2/environments/${uid}`, 'json', req, runtime);
}

model CreateProductVersionResponseBody = {
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model CreateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductVersionResponseBody(name='body'),
}

async function createProductVersion(uid: string): CreateProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductVersionWithOptions(uid, headers, runtime);
}

async function createProductVersionWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProductVersionResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateProductVersion', '2021-07-20', 'HTTPS', 'POST', 'AK', `/integration/api/v2/products/${uid}/versions`, 'json', req, runtime);
}

model PutEnvironmentTunnelRequest {
  tunnelType?: string(name='tunnelType', description='通道类型'),
  tunnelConfig?: {
    sshPort?: int32(name='sshPort', description='跳板机ssh端口号'),
    hostname?: string(name='hostname', description='跳板机hostname'),
    username?: string(name='username', description='跳板机用户名'),
    password?: string(name='password', description='跳板机密码'),
    vpcId?: string(name='vpcId', description='直连vpcId'),
    regionId?: string(name='regionId', description='直连地域id'),
  }(name='tunnelConfig', description='通道配置'),
}

model PutEnvironmentTunnelResponseBody = {
  code?: string(name='code', description='错误码'),
  msg?: string(name='msg', description='错误信息'),
  data?: {
    uid?: string(name='uid', description='通道id，可空'),
  }(name='data', description='数据'),
}

model PutEnvironmentTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: PutEnvironmentTunnelResponseBody(name='body'),
}

async function putEnvironmentTunnel(uid: string, request: PutEnvironmentTunnelRequest): PutEnvironmentTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putEnvironmentTunnelWithOptions(uid, request, headers, runtime);
}

async function putEnvironmentTunnelWithOptions(uid: string, request: PutEnvironmentTunnelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutEnvironmentTunnelResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.tunnelType)) {
    body.tunnelType = request.tunnelType;
  }
  if (!Util.isUnset(request.tunnelConfig)) {
    body.tunnelConfig = request.tunnelConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('PutEnvironmentTunnel', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/environments/${uid}/tunnels`, 'json', req, runtime);
}

model ListProductEnvironmentsRequest {
  envType?: string(name='envType'),
  compatibleProductVersionUID?: string(name='compatibleProductVersionUID', description='兼容版本产品版本id'),
  platforms?: [ 
    {
      architecture?: string(name='architecture'),
      os?: string(name='os'),
    }
  ](name='platforms'),
  productVersionUID?: string(name='productVersionUID'),
}

model ListProductEnvironmentsShrinkRequest {
  envType?: string(name='envType'),
  compatibleProductVersionUID?: string(name='compatibleProductVersionUID', description='兼容版本产品版本id'),
  platformsShrink?: string(name='platforms'),
  productVersionUID?: string(name='productVersionUID'),
}

model ListProductEnvironmentsResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
  data?: [ 
    {
      uid?: string(name='uid'),
      productUID?: string(name='productUID'),
      productName?: string(name='productName'),
      productVersion?: string(name='productVersion'),
      productVersionUID?: string(name='productVersionUID'),
      provider?: string(name='provider'),
      envUID?: string(name='envUID'),
      envType?: string(name='envType'),
      envName?: string(name='envName'),
      oldProductVersion?: string(name='oldProductVersion'),
      oldProductVersionUID?: string(name='oldProductVersionUID'),
      vendorType?: string(name='vendorType'),
      instanceStatus?: string(name='instanceStatus'),
    }
  ](name='data'),
}

model ListProductEnvironmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductEnvironmentsResponseBody(name='body'),
}

async function listProductEnvironments(uid: string, request: ListProductEnvironmentsRequest): ListProductEnvironmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductEnvironmentsWithOptions(uid, request, headers, runtime);
}

async function listProductEnvironmentsWithOptions(uid: string, tmpReq: ListProductEnvironmentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductEnvironmentsResponse {
  Util.validateModel(tmpReq);
  uid = OpenApiUtil.getEncodeParam(uid);
  var request = new ListProductEnvironmentsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.platforms)) {
    request.platformsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.platforms, 'platforms', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.envType)) {
    query.envType = request.envType;
  }
  if (!Util.isUnset(request.compatibleProductVersionUID)) {
    query.compatibleProductVersionUID = request.compatibleProductVersionUID;
  }
  if (!Util.isUnset(request.platformsShrink)) {
    query.platforms = request.platformsShrink;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    query.productVersionUID = request.productVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListProductEnvironments', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/hosting/products/${uid}/environments`, 'json', req, runtime);
}

model DeleteEnvironmentNodeResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model DeleteEnvironmentNodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEnvironmentNodeResponseBody(name='body'),
}

async function deleteEnvironmentNode(uid: string, nodeUID: string): DeleteEnvironmentNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEnvironmentNodeWithOptions(uid, nodeUID, headers, runtime);
}

async function deleteEnvironmentNodeWithOptions(uid: string, nodeUID: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEnvironmentNodeResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  nodeUID = OpenApiUtil.getEncodeParam(nodeUID);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteEnvironmentNode', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/api/v2/environments/${uid}/nodes/${nodeUID}`, 'json', req, runtime);
}

model UpdateProductComponentVersionRequest {
  componentOrchestrationValues?: string(name='componentOrchestrationValues'),
  enable?: boolean(name='enable'),
  releaseName?: string(name='releaseName'),
  newComponentVersionUID?: string(name='newComponentVersionUID', description='如果该参数不为空，则代表更新组件版本'),
}

model UpdateProductComponentVersionResponseBody = {
  msg?: string(name='msg'),
  code?: string(name='code'),
  data?: {
    relationUID?: string(name='relationUID'),
  }(name='data'),
}

model UpdateProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductComponentVersionResponseBody(name='body'),
}

async function updateProductComponentVersion(uid: string, relationUID: string, request: UpdateProductComponentVersionRequest): UpdateProductComponentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProductComponentVersionWithOptions(uid, relationUID, request, headers, runtime);
}

async function updateProductComponentVersionWithOptions(uid: string, relationUID: string, request: UpdateProductComponentVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductComponentVersionResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  relationUID = OpenApiUtil.getEncodeParam(relationUID);
  var body : map[string]any= {};
  if (!Util.isUnset(request.componentOrchestrationValues)) {
    body.componentOrchestrationValues = request.componentOrchestrationValues;
  }
  if (!Util.isUnset(request.enable)) {
    body.enable = request.enable;
  }
  if (!Util.isUnset(request.releaseName)) {
    body.releaseName = request.releaseName;
  }
  if (!Util.isUnset(request.newComponentVersionUID)) {
    body.newComponentVersionUID = request.newComponentVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProductComponentVersion', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/product-versions/${uid}/relations/${relationUID}`, 'json', req, runtime);
}

model DeleteProductResponseBody = {
  msg?: string(name='msg'),
  code?: string(name='code'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(uid: string): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductWithOptions(uid, headers, runtime);
}

async function deleteProductWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteProduct', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/integration/api/v2/products/${uid}`, 'json', req, runtime);
}

model AddProductVersionConfigRequest {
  name?: string(name='name', description='配置信息key'),
  value?: string(name='value', description='配置信息value'),
  description?: string(name='description', description='配置说明'),
  componentVersionUID?: string(name='componentVersionUID', description='组件uid'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID', description='父组件uid'),
}

model AddProductVersionConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  code?: string(name='code'),
  msg?: string(name='msg'),
  data?: {
    uid?: string(name='uid', description='product version config uid'),
  }(name='data'),
}

model AddProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddProductVersionConfigResponseBody(name='body'),
}

async function addProductVersionConfig(uid: string, request: AddProductVersionConfigRequest): AddProductVersionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addProductVersionConfigWithOptions(uid, request, headers, runtime);
}

async function addProductVersionConfigWithOptions(uid: string, request: AddProductVersionConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductVersionConfigResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.value)) {
    body.value = request.value;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.componentVersionUID)) {
    body.componentVersionUID = request.componentVersionUID;
  }
  if (!Util.isUnset(request.parentComponentVersionUID)) {
    body.parentComponentVersionUID = request.parentComponentVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('AddProductVersionConfig', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/product-versions/${uid}/configs`, 'json', req, runtime);
}

model InitEnvironmentResourceRequest {
  accessKeyID?: string(name='accessKeyID'),
  accessKeySecret?: string(name='accessKeySecret'),
  securityToken?: string(name='securityToken'),
}

model InitEnvironmentResourceResponseBody = {
  data?: {
    status?: string(name='status'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model InitEnvironmentResourceResponse = {
  headers: map[string]string(name='headers'),
  body: InitEnvironmentResourceResponseBody(name='body'),
}

async function initEnvironmentResource(uid: string, request: InitEnvironmentResourceRequest): InitEnvironmentResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return initEnvironmentResourceWithOptions(uid, request, headers, runtime);
}

async function initEnvironmentResourceWithOptions(uid: string, request: InitEnvironmentResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitEnvironmentResourceResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessKeyID)) {
    body.accessKeyID = request.accessKeyID;
  }
  if (!Util.isUnset(request.accessKeySecret)) {
    body.accessKeySecret = request.accessKeySecret;
  }
  if (!Util.isUnset(request.securityToken)) {
    body.securityToken = request.securityToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('InitEnvironmentResource', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/environments/${uid}/resources`, 'json', req, runtime);
}

model DeleteProductInstanceConfigRequest {
  environmentUID?: string(name='environmentUID'),
  productVersionUID?: string(name='productVersionUID'),
}

model DeleteProductInstanceConfigResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model DeleteProductInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductInstanceConfigResponseBody(name='body'),
}

async function deleteProductInstanceConfig(configUID: string, request: DeleteProductInstanceConfigRequest): DeleteProductInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductInstanceConfigWithOptions(configUID, request, headers, runtime);
}

async function deleteProductInstanceConfigWithOptions(configUID: string, request: DeleteProductInstanceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductInstanceConfigResponse {
  Util.validateModel(request);
  configUID = OpenApiUtil.getEncodeParam(configUID);
  var query : map[string]any= {};
  if (!Util.isUnset(request.environmentUID)) {
    query.environmentUID = request.environmentUID;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    query.productVersionUID = request.productVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteProductInstanceConfig', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/api/v2/product-instances/configs/${configUID}`, 'json', req, runtime);
}

model CreateEnvironmentHeaders {
  commonHeaders?: map[string]string,
  clientToken?: string(name='ClientToken'),
}

model CreateEnvironmentRequest {
  description?: string(name='description'),
  location?: string(name='location'),
  name?: string(name='name'),
  platform?: {
    architecture?: string(name='architecture'),
    os?: string(name='os'),
  }(name='platform'),
  vendorType?: string(name='vendorType'),
  productVersionUID?: string(name='productVersionUID'),
  type?: string(name='type', description='环境类型'),
}

model CreateEnvironmentResponseBody = {
  data?: {
    environmentUID?: string(name='environmentUID'),
    vendorConfig?: string(name='vendorConfig'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model CreateEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnvironmentResponseBody(name='body'),
}

async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateEnvironmentHeaders{};
  return createEnvironmentWithOptions(request, headers, runtime);
}

async function createEnvironmentWithOptions(request: CreateEnvironmentRequest, headers: CreateEnvironmentHeaders, runtime: Util.RuntimeOptions): CreateEnvironmentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.location)) {
    body.location = request.location;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.platform)) {
    body.platform = request.platform;
  }
  if (!Util.isUnset(request.vendorType)) {
    body.vendorType = request.vendorType;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    body.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.clientToken)) {
    realHeaders.ClientToken = headers.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateEnvironment', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/environments`, 'json', req, runtime);
}

model AddEnvironmentNodesRequest {
  labels?: map[string]any(name='labels'),
  masterPrivateIPs?: [ string ](name='masterPrivateIPs', description='master privateId'),
  rootPassword?: string(name='rootPassword'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints'),
  workerPrivateIPs?: [ string ](name='workerPrivateIPs', description='work privateIp'),
  etcdDisk?: string(name='etcdDisk', description='etcd数据盘'),
  tridentSystemDisk?: string(name='tridentSystemDisk', description='k8s管控数据盘'),
  tridentSystemSizeDisk?: int32(name='tridentSystemSizeDisk', description='k8s管控数据盘大小'),
  applicationDisk?: string(name='applicationDisk', description='保留业务分区'),
  cpu?: int32(name='cpu'),
  dataDisk?: [ 
    {
      name?: string(name='name'),
      required?: int32(name='required'),
    }
  ](name='dataDisk'),
  hostName?: string(name='hostName'),
  memory?: int32(name='memory'),
  os?: string(name='os'),
  systemDisk?: [ 
    {
      name?: string(name='name'),
      required?: int32(name='required'),
    }
  ](name='systemDisk'),
}

model AddEnvironmentNodesResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model AddEnvironmentNodesResponse = {
  headers: map[string]string(name='headers'),
  body: AddEnvironmentNodesResponseBody(name='body'),
}

async function addEnvironmentNodes(uid: string, request: AddEnvironmentNodesRequest): AddEnvironmentNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addEnvironmentNodesWithOptions(uid, request, headers, runtime);
}

async function addEnvironmentNodesWithOptions(uid: string, request: AddEnvironmentNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddEnvironmentNodesResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.labels)) {
    body.labels = request.labels;
  }
  if (!Util.isUnset(request.masterPrivateIPs)) {
    body.masterPrivateIPs = request.masterPrivateIPs;
  }
  if (!Util.isUnset(request.rootPassword)) {
    body.rootPassword = request.rootPassword;
  }
  if (!Util.isUnset(request.taints)) {
    body.taints = request.taints;
  }
  if (!Util.isUnset(request.workerPrivateIPs)) {
    body.workerPrivateIPs = request.workerPrivateIPs;
  }
  if (!Util.isUnset(request.etcdDisk)) {
    body.etcdDisk = request.etcdDisk;
  }
  if (!Util.isUnset(request.tridentSystemDisk)) {
    body.tridentSystemDisk = request.tridentSystemDisk;
  }
  if (!Util.isUnset(request.tridentSystemSizeDisk)) {
    body.tridentSystemSizeDisk = request.tridentSystemSizeDisk;
  }
  if (!Util.isUnset(request.applicationDisk)) {
    body.applicationDisk = request.applicationDisk;
  }
  if (!Util.isUnset(request.cpu)) {
    body.cpu = request.cpu;
  }
  if (!Util.isUnset(request.dataDisk)) {
    body.dataDisk = request.dataDisk;
  }
  if (!Util.isUnset(request.hostName)) {
    body.hostName = request.hostName;
  }
  if (!Util.isUnset(request.memory)) {
    body.memory = request.memory;
  }
  if (!Util.isUnset(request.os)) {
    body.os = request.os;
  }
  if (!Util.isUnset(request.systemDisk)) {
    body.systemDisk = request.systemDisk;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('AddEnvironmentNodes', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/environments/${uid}/nodes`, 'json', req, runtime);
}

model CreateProductVersionPackageHeaders {
  commonHeaders?: map[string]string,
  clientToken?: string(name='ClientToken'),
}

model CreateProductVersionPackageRequest {
  packageType?: string(name='packageType', description='ENUM:["full","upgrade"]'),
  packageContentType?: string(name='packageContentType', description='ENUM:["all","base"."application"]'),
  oldProductVersionUID?: string(name='oldProductVersionUID'),
  platform?: string(name='platform'),
}

model CreateProductVersionPackageResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
}

model CreateProductVersionPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductVersionPackageResponseBody(name='body'),
}

async function createProductVersionPackage(uid: string, request: CreateProductVersionPackageRequest): CreateProductVersionPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateProductVersionPackageHeaders{};
  return createProductVersionPackageWithOptions(uid, request, headers, runtime);
}

async function createProductVersionPackageWithOptions(uid: string, request: CreateProductVersionPackageRequest, headers: CreateProductVersionPackageHeaders, runtime: Util.RuntimeOptions): CreateProductVersionPackageResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var query : map[string]any= {};
  if (!Util.isUnset(request.packageType)) {
    query.packageType = request.packageType;
  }
  if (!Util.isUnset(request.packageContentType)) {
    query.packageContentType = request.packageContentType;
  }
  if (!Util.isUnset(request.oldProductVersionUID)) {
    query.oldProductVersionUID = request.oldProductVersionUID;
  }
  if (!Util.isUnset(request.platform)) {
    query.platform = request.platform;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.clientToken)) {
    realHeaders.ClientToken = headers.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('CreateProductVersionPackage', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/hosting/product-versions/${uid}/packages`, 'json', req, runtime);
}

model ListProductInstanceConfigsRequest {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  paramType?: string(name='paramType', description='组件和全局类型字段'),
  productVersionUID?: string(name='productVersionUID'),
  environmentUID?: string(name='environmentUID'),
}

model ListProductInstanceConfigsResponseBody = {
  data?: {
    list?: [ 
      {
        createdAt?: string(name='createdAt'),
        description?: string(name='description'),
        name?: string(name='name'),
        productName?: string(name='productName'),
        productVersion?: string(name='productVersion'),
        productVersionUID?: string(name='productVersionUID'),
        uid?: string(name='uid'),
        vendorType?: string(name='vendorType'),
        value?: string(name='value'),
        componentUID?: string(name='componentUID'),
        componentVersionUID?: string(name='componentVersionUID'),
        componentName?: string(name='componentName'),
        parentComponentName?: string(name='parentComponentName'),
        componentReleaseName?: string(name='componentReleaseName'),
        parentComponentReleaseName?: string(name='parentComponentReleaseName'),
        parentComponentVersionUID?: string(name='parentComponentVersionUID'),
        envUID?: string(name='envUID'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListProductInstanceConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductInstanceConfigsResponseBody(name='body'),
}

async function listProductInstanceConfigs(request: ListProductInstanceConfigsRequest): ListProductInstanceConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductInstanceConfigsWithOptions(request, headers, runtime);
}

async function listProductInstanceConfigsWithOptions(request: ListProductInstanceConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductInstanceConfigsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.paramType)) {
    query.paramType = request.paramType;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    query.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.environmentUID)) {
    query.environmentUID = request.environmentUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListProductInstanceConfigs', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/product-instances/configs`, 'json', req, runtime);
}

model UpdateProductVersionRequest {
  description?: string(name='description'),
  version?: string(name='version', description='更新版本号，只允许从latest 更新到其他版本号，更新之后代表已发布'),
}

model UpdateProductVersionResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductVersionResponseBody(name='body'),
}

async function updateProductVersion(uid: string, request: UpdateProductVersionRequest): UpdateProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProductVersionWithOptions(uid, request, headers, runtime);
}

async function updateProductVersionWithOptions(uid: string, request: UpdateProductVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductVersionResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.version)) {
    body.version = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProductVersion', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/product-versions/${uid}`, 'json', req, runtime);
}

model GetProductComponentVersionResponseBody = {
  data?: [ 
    {
      relationUID?: string(name='relationUID'),
      productVersionUID?: string(name='productVersionUID'),
      parentComponentVersionUID?: string(name='parentComponentVersionUID'),
      parentComponentVersionRelationUID?: string(name='parentComponentVersionRelationUID'),
      orchestrationValues?: string(name='orchestrationValues'),
      values?: string(name='values'),
      releaseName?: string(name='releaseName'),
      sequence?: int32(name='sequence'),
      componentVersionUID?: string(name='componentVersionUID'),
      componentUID?: string(name='componentUID'),
      componentName?: string(name='componentName'),
      componentDescription?: string(name='componentDescription'),
      version?: string(name='version'),
      appVersion?: string(name='appVersion'),
      componentVersionDescription?: string(name='componentVersionDescription'),
      parentComponent?: boolean(name='parentComponent'),
      resources?: string(name='resources'),
      namespace?: string(name='namespace'),
      enable?: boolean(name='enable'),
    }
  ](name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetProductComponentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductComponentVersionResponseBody(name='body'),
}

async function getProductComponentVersion(relationUID: string, uid: string): GetProductComponentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductComponentVersionWithOptions(relationUID, uid, headers, runtime);
}

async function getProductComponentVersionWithOptions(relationUID: string, uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductComponentVersionResponse {
  relationUID = OpenApiUtil.getEncodeParam(relationUID);
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetProductComponentVersion', '2021-07-20', 'HTTPS', 'GET', 'AK', `/integration/api/v2/product-versions/${uid}/relations/${relationUID}`, 'json', req, runtime);
}

model ListEnvironmentsRequest {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  name?: string(name='name'),
  fuzzy?: string(name='fuzzy'),
  instanceStatus?: string(name='instanceStatus'),
  vendorType?: string(name='vendorType'),
  clusterUID?: string(name='clusterUID'),
}

model ListEnvironmentsResponseBody = {
  data?: {
    list?: [ 
      {
        createdAt?: string(name='createdAt'),
        description?: string(name='description'),
        id?: int32(name='id'),
        location?: string(name='location'),
        name?: string(name='name'),
        platform?: {
          architecture?: string(name='architecture'),
          os?: string(name='os'),
        }(name='platform'),
        productName?: string(name='productName'),
        productVersion?: string(name='productVersion'),
        productVersionUID?: string(name='productVersionUID'),
        uid?: string(name='uid'),
        vendorType?: string(name='vendorType'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListEnvironmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnvironmentsResponseBody(name='body'),
}

async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentsWithOptions(request, headers, runtime);
}

async function listEnvironmentsWithOptions(request: ListEnvironmentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.name)) {
    query.name = request.name;
  }
  if (!Util.isUnset(request.fuzzy)) {
    query.fuzzy = request.fuzzy;
  }
  if (!Util.isUnset(request.instanceStatus)) {
    query.instanceStatus = request.instanceStatus;
  }
  if (!Util.isUnset(request.vendorType)) {
    query.vendorType = request.vendorType;
  }
  if (!Util.isUnset(request.clusterUID)) {
    query.clusterUID = request.clusterUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListEnvironments', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/environments`, 'json', req, runtime);
}

model UpdateProductRequest {
  description?: string(name='description'),
}

model UpdateProductResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProduct(uid: string, request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProductWithOptions(uid, request, headers, runtime);
}

async function updateProductWithOptions(uid: string, request: UpdateProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProduct', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/products/${uid}`, 'json', req, runtime);
}

model DeleteProductVersionConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model DeleteProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductVersionConfigResponseBody(name='body'),
}

async function deleteProductVersionConfig(uid: string, configUID: string): DeleteProductVersionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductVersionConfigWithOptions(uid, configUID, headers, runtime);
}

async function deleteProductVersionConfigWithOptions(uid: string, configUID: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductVersionConfigResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  configUID = OpenApiUtil.getEncodeParam(configUID);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteProductVersionConfig', '2021-07-20', 'HTTPS', 'DELETE', 'AK', `/api/v2/product-versions/${uid}/configs/${configUID}`, 'json', req, runtime);
}

model ListProductComponentVersionsRequest {
  pageNum?: string(name='pageNum'),
  pageSize?: string(name='pageSize'),
  sortKey?: string(name='sortKey'),
  sortDirect?: string(name='sortDirect'),
  category?: string(name='category', description='组件类型，不填写则为全部'),
}

model ListProductComponentVersionsResponseBody = {
  data?: {
    list?: [
      ProductComponentRelationDetail
    ](name='list'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListProductComponentVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductComponentVersionsResponseBody(name='body'),
}

async function listProductComponentVersions(uid: string, request: ListProductComponentVersionsRequest): ListProductComponentVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductComponentVersionsWithOptions(uid, request, headers, runtime);
}

async function listProductComponentVersionsWithOptions(uid: string, request: ListProductComponentVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductComponentVersionsResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortKey)) {
    query.sortKey = request.sortKey;
  }
  if (!Util.isUnset(request.sortDirect)) {
    query.sortDirect = request.sortDirect;
  }
  if (!Util.isUnset(request.category)) {
    query.category = request.category;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListProductComponentVersions', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/product-versions/${uid}/component-versions`, 'json', req, runtime);
}

model GetEnvironmentNodeResponseBody = {
  data?: {
    uid?: string(name='uid'),
    createdAt?: string(name='createdAt'),
    clusterUID?: string(name='clusterUID'),
    identifier?: string(name='identifier', description='identifier'),
    hostName?: string(name='hostName', description='hostName'),
    os?: string(name='os', description='os'),
    osVersion?: string(name='osVersion', description='osVersion'),
    arch?: string(name='arch', description='arch'),
    kernel?: string(name='kernel', description='kernel'),
    macAddress?: string(name='macAddress', description='macAddress'),
    cpu?: string(name='cpu', description='cpu'),
    memory?: string(name='memory', description='memory'),
    systemDisk?: [
      Disk
    ](name='systemDisk', description='systemDisk'),
    dataDisk?: [
      Disk
    ](name='dataDisk', description='dataDisk'),
    privateIP?: string(name='privateIP', description='privateIP'),
    publicIP?: string(name='publicIP', description='publicIP'),
    internetBandwidth?: int32(name='internetBandwidth', description='internetBandwidth'),
    networkCards?: [ 
      {
        name?: string(name='name', description='name'),
        ip?: string(name='ip', description='ip'),
      }
    ](name='networkCards', description='networkCards'),
    imageID?: string(name='imageID', description='imageID'),
    instanceType?: string(name='instanceType', description='instanceType'),
    systemInfo?: string(name='systemInfo', description='systemInfo'),
    rootPassword?: string(name='rootPassword', description='rootPassword'),
    labels?: map[string]string(name='labels', description='labels'),
    taints?: [ 
      {
        key?: string(name='key', description='key'),
        value?: string(name='value', description='value'),
        effect?: string(name='effect', description='effect'),
      }
    ](name='taints', description='taints'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetEnvironmentNodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnvironmentNodeResponseBody(name='body'),
}

async function getEnvironmentNode(uid: string, nodeUID: string): GetEnvironmentNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEnvironmentNodeWithOptions(uid, nodeUID, headers, runtime);
}

async function getEnvironmentNodeWithOptions(uid: string, nodeUID: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetEnvironmentNodeResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  nodeUID = OpenApiUtil.getEncodeParam(nodeUID);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetEnvironmentNode', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/environments/${uid}/nodes/${nodeUID}`, 'json', req, runtime);
}

model ListProductsRequest {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  name?: string(name='name'),
  fuzzy?: string(name='fuzzy'),
}

model ListProductsResponseBody = {
  data?: {
    list?: [ 
      {
        description?: string(name='description'),
        name?: string(name='name'),
        uid?: string(name='uid'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductsWithOptions(request, headers, runtime);
}

async function listProductsWithOptions(request: ListProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.name)) {
    query.name = request.name;
  }
  if (!Util.isUnset(request.fuzzy)) {
    query.fuzzy = request.fuzzy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListProducts', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/products`, 'json', req, runtime);
}

model GenerateProductInstanceDeploymentConfigRequest {
  environmentUID?: string(name='environmentUID'),
  productVersionUID?: string(name='productVersionUID'),
}

model GenerateProductInstanceDeploymentConfigResponseBody = {
  data?: {
    packageConfig?: string(name='packageConfig'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GenerateProductInstanceDeploymentConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateProductInstanceDeploymentConfigResponseBody(name='body'),
}

async function generateProductInstanceDeploymentConfig(request: GenerateProductInstanceDeploymentConfigRequest): GenerateProductInstanceDeploymentConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateProductInstanceDeploymentConfigWithOptions(request, headers, runtime);
}

async function generateProductInstanceDeploymentConfigWithOptions(request: GenerateProductInstanceDeploymentConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateProductInstanceDeploymentConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.environmentUID)) {
    body.environmentUID = request.environmentUID;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    body.productVersionUID = request.productVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GenerateProductInstanceDeploymentConfig', '2021-07-20', 'HTTPS', 'POST', 'AK', `/api/v2/product-instances/package-configs`, 'json', req, runtime);
}

model GetProductDeploymentRequest {
  environmentUID?: string(name='environmentUID'),
  productVersionUID?: string(name='productVersionUID'),
  withParamConfig?: boolean(name='withParamConfig'),
}

model GetProductDeploymentResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
  data?: {
    envUID?: string(name='envUID'),
    status?: string(name='status'),
    uid?: string(name='uid'),
    envParams?: string(name='envParams'),
  }(name='data'),
}

model GetProductDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductDeploymentResponseBody(name='body'),
}

async function getProductDeployment(deploymentUID: string, request: GetProductDeploymentRequest): GetProductDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductDeploymentWithOptions(deploymentUID, request, headers, runtime);
}

async function getProductDeploymentWithOptions(deploymentUID: string, request: GetProductDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductDeploymentResponse {
  Util.validateModel(request);
  deploymentUID = OpenApiUtil.getEncodeParam(deploymentUID);
  var query : map[string]any= {};
  if (!Util.isUnset(request.environmentUID)) {
    query.environmentUID = request.environmentUID;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    query.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.withParamConfig)) {
    query.withParamConfig = request.withParamConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetProductDeployment', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/product-instances/deployments/${deploymentUID}`, 'json', req, runtime);
}

model ListFoundationReferenceComponentsRequest {
  productVersionUID?: string(name='productVersionUID', description='产品版本uid'),
  foundationVersionUID?: string(name='foundationVersionUID', description='foundation version uid'),
  onlyEnabled?: boolean(name='onlyEnabled'),
}

model ListFoundationReferenceComponentsResponseBody = {
  data?: [
    ProductComponentRelationDetail
  ](name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListFoundationReferenceComponentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFoundationReferenceComponentsResponseBody(name='body'),
}

async function listFoundationReferenceComponents(request: ListFoundationReferenceComponentsRequest): ListFoundationReferenceComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFoundationReferenceComponentsWithOptions(request, headers, runtime);
}

async function listFoundationReferenceComponentsWithOptions(request: ListFoundationReferenceComponentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFoundationReferenceComponentsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.productVersionUID)) {
    query.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.foundationVersionUID)) {
    query.foundationVersionUID = request.foundationVersionUID;
  }
  if (!Util.isUnset(request.onlyEnabled)) {
    query.onlyEnabled = request.onlyEnabled;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListFoundationReferenceComponents', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/foundation-references/component-versions`, 'json', req, runtime);
}

model GetProductVersionDifferencesRequest {
  preVersionUID?: string(name='preVersionUID', description='上一个产品版本id'),
}

model GetProductVersionDifferencesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  data?: [ 
    {
      componentName?: string(name='componentName', description='组件名称'),
      releaseName?: string(name='releaseName', description='组件实例名称'),
      version?: string(name='version', description='组件当前的版本号'),
      preVersion?: string(name='preVersion', description='组件之前的版本号'),
      difference?: string(name='difference', description='变更类型，ENUM 类型'),
      upgradeFlag?: boolean(name='upgradeFlag'),
      message?: string(name='message', description='变更描述信息'),
    }
  ](name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetProductVersionDifferencesResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductVersionDifferencesResponseBody(name='body'),
}

async function getProductVersionDifferences(uid: string, versionUID: string, request: GetProductVersionDifferencesRequest): GetProductVersionDifferencesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductVersionDifferencesWithOptions(uid, versionUID, request, headers, runtime);
}

async function getProductVersionDifferencesWithOptions(uid: string, versionUID: string, request: GetProductVersionDifferencesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductVersionDifferencesResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  versionUID = OpenApiUtil.getEncodeParam(versionUID);
  var query : map[string]any= {};
  if (!Util.isUnset(request.preVersionUID)) {
    query.preVersionUID = request.preVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetProductVersionDifferences', '2021-07-20', 'HTTPS', 'GET', 'AK', `/integration/api/v2/products/${uid}/versions/${versionUID}/differences`, 'json', req, runtime);
}

model UpdateEnvironmentRequest {
  description?: string(name='description'),
  location?: string(name='location'),
  vendorConfig?: string(name='vendorConfig'),
}

model UpdateEnvironmentResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEnvironmentResponseBody(name='body'),
}

async function updateEnvironment(uid: string, request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateEnvironmentWithOptions(uid, request, headers, runtime);
}

async function updateEnvironmentWithOptions(uid: string, request: UpdateEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEnvironmentResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.location)) {
    body.location = request.location;
  }
  if (!Util.isUnset(request.vendorConfig)) {
    body.vendorConfig = request.vendorConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateEnvironment', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/environments/${uid}`, 'json', req, runtime);
}

model ListEnvironmentTunnelsResponseBody = {
  code?: string(name='code', description='错误码'),
  msg?: string(name='msg', description='错误信息'),
  data?: {
    list?: [ 
      {
        tunnelType?: string(name='tunnelType', description='通道类型'),
        tunnelConfig?: {
          hostname?: string(name='hostname', description='跳板机hostname'),
          sshPort?: int32(name='sshPort', description='跳板机ssh端口号'),
          username?: string(name='username', description='跳板机用户名'),
          password?: string(name='password', description='跳板机密码'),
          vpcId?: string(name='vpcId', description='直连vpcId'),
          regionId?: string(name='regionId', description='直连regionId'),
        }(name='tunnelConfig'),
      }
    ](name='list'),
  }(name='data'),
}

model ListEnvironmentTunnelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnvironmentTunnelsResponseBody(name='body'),
}

async function listEnvironmentTunnels(uid: string): ListEnvironmentTunnelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentTunnelsWithOptions(uid, headers, runtime);
}

async function listEnvironmentTunnelsWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentTunnelsResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListEnvironmentTunnels', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/environments/${uid}/tunnels`, 'json', req, runtime);
}

model ListProductVersionsRequest {
  productUID?: string(name='productUID', description='过滤参数，产品uid'),
  productName?: string(name='productName', description='过滤参数，产品名称'),
  version?: string(name='version', description='过滤参数，产品版本号'),
  released?: boolean(name='released', description='过滤参数，是否已发布'),
  supportedFoundationTypes?: [ string ](name='supportedFoundationTypes', description='过滤参数，支持的环境类型'),
  platforms?: [ 
    {
      architecture?: string(name='architecture'),
      os?: string(name='os'),
    }
  ](name='platforms', description='支持的platform，为空则不过滤'),
  pageNum?: string(name='pageNum'),
  pageSize?: string(name='pageSize'),
}

model ListProductVersionsShrinkRequest {
  productUID?: string(name='productUID', description='过滤参数，产品uid'),
  productName?: string(name='productName', description='过滤参数，产品名称'),
  version?: string(name='version', description='过滤参数，产品版本号'),
  released?: boolean(name='released', description='过滤参数，是否已发布'),
  supportedFoundationTypesShrink?: string(name='supportedFoundationTypes', description='过滤参数，支持的环境类型'),
  platformsShrink?: string(name='platforms', description='支持的platform，为空则不过滤'),
  pageNum?: string(name='pageNum'),
  pageSize?: string(name='pageSize'),
}

model ListProductVersionsResponseBody = {
  data?: {
    list?: [ 
      {
        annotations?: {
          additionalProp1?: string(name='additionalProp1'),
          additionalProp2?: string(name='additionalProp2'),
          additionalProp3?: string(name='additionalProp3'),
        }(name='annotations'),
        description?: string(name='description'),
        packageURL?: string(name='packageURL'),
        productName?: string(name='productName'),
        productUID?: string(name='productUID'),
        provider?: string(name='provider'),
        uid?: string(name='uid'),
        version?: string(name='version'),
      }
    ](name='list'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model ListProductVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductVersionsResponseBody(name='body'),
}

async function listProductVersions(request: ListProductVersionsRequest): ListProductVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductVersionsWithOptions(request, headers, runtime);
}

async function listProductVersionsWithOptions(tmpReq: ListProductVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductVersionsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProductVersionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.supportedFoundationTypes)) {
    request.supportedFoundationTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.supportedFoundationTypes, 'supportedFoundationTypes', 'json');
  }
  if (!Util.isUnset(tmpReq.platforms)) {
    request.platformsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.platforms, 'platforms', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.productUID)) {
    query.productUID = request.productUID;
  }
  if (!Util.isUnset(request.productName)) {
    query.productName = request.productName;
  }
  if (!Util.isUnset(request.version)) {
    query.version = request.version;
  }
  if (!Util.isUnset(request.released)) {
    query.released = request.released;
  }
  if (!Util.isUnset(request.supportedFoundationTypesShrink)) {
    query.supportedFoundationTypes = request.supportedFoundationTypesShrink;
  }
  if (!Util.isUnset(request.platformsShrink)) {
    query.platforms = request.platformsShrink;
  }
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListProductVersions', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/product-versions`, 'json', req, runtime);
}

model PutProductInstanceConfigRequest {
  environmentUID?: string(name='environmentUID'),
  productVersionUID?: string(name='productVersionUID'),
  componentUID?: string(name='componentUID'),
  componentVersionUID?: string(name='componentVersionUID'),
  name?: string(name='name'),
  configUID?: string(name='configUID'),
  releaseName?: string(name='releaseName'),
  scope?: [ string ](name='scope'),
  value?: string(name='value'),
  description?: string(name='description'),
  parentComponentName?: string(name='parentComponentName'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID'),
}

model PutProductInstanceConfigResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
  data?: {
    uid?: string(name='uid'),
  }(name='data'),
}

model PutProductInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PutProductInstanceConfigResponseBody(name='body'),
}

async function putProductInstanceConfig(request: PutProductInstanceConfigRequest): PutProductInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putProductInstanceConfigWithOptions(request, headers, runtime);
}

async function putProductInstanceConfigWithOptions(request: PutProductInstanceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutProductInstanceConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.environmentUID)) {
    body.environmentUID = request.environmentUID;
  }
  if (!Util.isUnset(request.productVersionUID)) {
    body.productVersionUID = request.productVersionUID;
  }
  if (!Util.isUnset(request.componentUID)) {
    body.componentUID = request.componentUID;
  }
  if (!Util.isUnset(request.componentVersionUID)) {
    body.componentVersionUID = request.componentVersionUID;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.configUID)) {
    body.configUID = request.configUID;
  }
  if (!Util.isUnset(request.releaseName)) {
    body.releaseName = request.releaseName;
  }
  if (!Util.isUnset(request.scope)) {
    body.scope = request.scope;
  }
  if (!Util.isUnset(request.value)) {
    body.value = request.value;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.parentComponentName)) {
    body.parentComponentName = request.parentComponentName;
  }
  if (!Util.isUnset(request.parentComponentVersionUID)) {
    body.parentComponentVersionUID = request.parentComponentVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('PutProductInstanceConfig', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/product-instances/configs`, 'json', req, runtime);
}

model UpdateEnvironmentProductVersionRequest {
  productVersionUID?: string(name='productVersionUID'),
}

model UpdateEnvironmentProductVersionResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateEnvironmentProductVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEnvironmentProductVersionResponseBody(name='body'),
}

async function updateEnvironmentProductVersion(uid: string, request: UpdateEnvironmentProductVersionRequest): UpdateEnvironmentProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateEnvironmentProductVersionWithOptions(uid, request, headers, runtime);
}

async function updateEnvironmentProductVersionWithOptions(uid: string, request: UpdateEnvironmentProductVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEnvironmentProductVersionResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.productVersionUID)) {
    body.productVersionUID = request.productVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateEnvironmentProductVersion', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/environments/${uid}/product-versions`, 'json', req, runtime);
}

model GetProductVersionResponseBody = {
  data?: {
    description?: string(name='description'),
    provider?: string(name='provider'),
    uid?: string(name='uid'),
    productUID?: string(name='productUID'),
    productName?: string(name='productName'),
    version?: string(name='version'),
    foundationVersionUID?: string(name='foundationVersionUID'),
    packageURL?: string(name='packageURL'),
    platforms?: [
      Platform
    ](name='platforms'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetProductVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductVersionResponseBody(name='body'),
}

async function getProductVersion(uid: string): GetProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductVersionWithOptions(uid, headers, runtime);
}

async function getProductVersionWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductVersionResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetProductVersion', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/product-versions/${uid}`, 'json', req, runtime);
}

model UpdateProductFoundationVersionRequest {
  foundationVersionUID?: string(name='foundationVersionUID', description='底座版本uid'),
}

model UpdateProductFoundationVersionResponseBody = {
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateProductFoundationVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductFoundationVersionResponseBody(name='body'),
}

async function updateProductFoundationVersion(uid: string, request: UpdateProductFoundationVersionRequest): UpdateProductFoundationVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProductFoundationVersionWithOptions(uid, request, headers, runtime);
}

async function updateProductFoundationVersionWithOptions(uid: string, request: UpdateProductFoundationVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductFoundationVersionResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  var body : map[string]any= {};
  if (!Util.isUnset(request.foundationVersionUID)) {
    body.foundationVersionUID = request.foundationVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProductFoundationVersion', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/product-versions/${uid}/foundation`, 'json', req, runtime);
}

model GetProductResponseBody = {
  data?: {
    description?: string(name='description'),
    name?: string(name='name'),
    uid?: string(name='uid'),
  }(name='data'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model GetProductResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductResponseBody(name='body'),
}

async function getProduct(uid: string): GetProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductWithOptions(uid, headers, runtime);
}

async function getProductWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductResponse {
  uid = OpenApiUtil.getEncodeParam(uid);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetProduct', '2021-07-20', 'HTTPS', 'GET', 'AK', `/api/v2/products/${uid}`, 'json', req, runtime);
}

model UpdateProductVersionConfigRequest {
  name?: string(name='name', description='配置信息key'),
  value?: string(name='value', description='配置信息value'),
  description?: string(name='description', description='配置说明'),
  componentVersionUID?: string(name='componentVersionUID', description='子组件versinid'),
  parentComponentVersionUID?: string(name='parentComponentVersionUID', description='父组件versionid'),
}

model UpdateProductVersionConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  code?: string(name='code'),
  msg?: string(name='msg'),
}

model UpdateProductVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductVersionConfigResponseBody(name='body'),
}

async function updateProductVersionConfig(uid: string, configUID: string, request: UpdateProductVersionConfigRequest): UpdateProductVersionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProductVersionConfigWithOptions(uid, configUID, request, headers, runtime);
}

async function updateProductVersionConfigWithOptions(uid: string, configUID: string, request: UpdateProductVersionConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductVersionConfigResponse {
  Util.validateModel(request);
  uid = OpenApiUtil.getEncodeParam(uid);
  configUID = OpenApiUtil.getEncodeParam(configUID);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.value)) {
    body.value = request.value;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.componentVersionUID)) {
    body.componentVersionUID = request.componentVersionUID;
  }
  if (!Util.isUnset(request.parentComponentVersionUID)) {
    body.parentComponentVersionUID = request.parentComponentVersionUID;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProductVersionConfig', '2021-07-20', 'HTTPS', 'PUT', 'AK', `/api/v2/product-versions/${uid}/configs/${configUID}`, 'json', req, runtime);
}

