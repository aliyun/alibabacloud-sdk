/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'market.aliyuncs.com',
    ap-northeast-1 = 'market.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'market.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'market.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'market.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'market.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'market.aliyuncs.com',
    cn-chengdu = 'market.aliyuncs.com',
    cn-hongkong = 'market.aliyuncs.com',
    cn-huhehaote = 'market.aliyuncs.com',
    cn-qingdao = 'market.aliyuncs.com',
    cn-shanghai = 'market.aliyuncs.com',
    cn-shenzhen = 'market.aliyuncs.com',
    cn-zhangjiakou = 'market.aliyuncs.com',
    eu-central-1 = 'market.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'market.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'market.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'market.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'market.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'market.aliyuncs.com',
    cn-shenzhen-finance-1 = 'market.aliyuncs.com',
    cn-shanghai-finance-1 = 'market.aliyuncs.com',
    cn-north-2-gov-1 = 'market.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('market', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateLicenseRequest {
  identification?: string(name='Identification'),
  licenseCode?: string(name='LicenseCode'),
}

model ActivateLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ActivateLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateLicenseResponseBody(name='body'),
}

async function activateLicenseWithOptions(request: ActivateLicenseRequest, runtime: Util.RuntimeOptions): ActivateLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identification)) {
    query['Identification'] = request.identification;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateLicense',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateLicenseWithOptions(request, runtime);
}

model CreateOrderRequest {
  clientToken?: string(name='ClientToken'),
  commodity?: string(name='Commodity'),
  orderSouce?: string(name='OrderSouce'),
  orderType?: string(name='OrderType'),
  ownerId?: string(name='OwnerId'),
  paymentType?: string(name='PaymentType'),
}

model CreateOrderResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrderWithOptions(request: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!Util.isUnset(request.orderSouce)) {
    query['OrderSouce'] = request.orderSouce;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrder',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model DescribeCurrentNodeInfoRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeCurrentNodeInfoResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    allowRollbackNode?: boolean(name='AllowRollbackNode'),
    autoFinishNode?: boolean(name='AutoFinishNode'),
    finalStepNo?: int32(name='FinalStepNo'),
    gmtExpired?: long(name='GmtExpired'),
    gmtFinished?: long(name='GmtFinished'),
    gmtStart?: long(name='GmtStart'),
    needAttachment?: boolean(name='NeedAttachment'),
    nextNodeId?: long(name='NextNodeId'),
    nodeId?: long(name='NodeId'),
    nodeName?: string(name='NodeName'),
    nodeStatus?: string(name='NodeStatus'),
    operatorRole?: string(name='OperatorRole'),
    parentNodeId?: long(name='ParentNodeId'),
    previousNodeId?: long(name='PreviousNodeId'),
    stepNo?: int32(name='StepNo'),
    templateForm?: string(name='TemplateForm'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeCurrentNodeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCurrentNodeInfoResponseBody(name='body'),
}

async function describeCurrentNodeInfoWithOptions(request: DescribeCurrentNodeInfoRequest, runtime: Util.RuntimeOptions): DescribeCurrentNodeInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCurrentNodeInfo',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCurrentNodeInfo(request: DescribeCurrentNodeInfoRequest): DescribeCurrentNodeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCurrentNodeInfoWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  instanceId?: string(name='InstanceId'),
  orderType?: string(name='OrderType'),
  ownerId?: long(name='OwnerId'),
}

model DescribeInstanceResponseBody = {
  appJson?: string(name='AppJson'),
  beganOn?: long(name='BeganOn'),
  componentJson?: string(name='ComponentJson'),
  constraints?: string(name='Constraints'),
  createdOn?: long(name='CreatedOn'),
  endOn?: long(name='EndOn'),
  extendJson?: string(name='ExtendJson'),
  hostJson?: string(name='HostJson'),
  instanceId?: long(name='InstanceId'),
  isTrial?: boolean(name='IsTrial'),
  modules?: {
    module?: [ 
    {
      code?: string(name='Code'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      properties?: {
        property?: [ 
        {
          displayUnit?: string(name='DisplayUnit'),
          key?: string(name='Key'),
          name?: string(name='Name'),
          propertyValues?: {
            propertyValue?: [ 
            {
              displayName?: string(name='DisplayName'),
              max?: string(name='Max'),
              min?: string(name='Min'),
              remark?: string(name='Remark'),
              step?: string(name='Step'),
              type?: string(name='Type'),
              value?: string(name='Value'),
            }
          ](name='PropertyValue')
          }(name='PropertyValues'),
          showType?: string(name='ShowType'),
        }
      ](name='Property')
      }(name='Properties'),
    }
  ](name='Module')
  }(name='Modules'),
  orderId?: long(name='OrderId'),
  productCode?: string(name='ProductCode'),
  productName?: string(name='ProductName'),
  productSkuCode?: string(name='ProductSkuCode'),
  productType?: string(name='ProductType'),
  relationalData?: {
    serviceStatus?: string(name='ServiceStatus'),
  }(name='RelationalData'),
  status?: string(name='Status'),
  supplierName?: string(name='SupplierName'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  codes?: string(name='Codes'),
  exceptCodes?: string(name='ExceptCodes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productType?: string(name='ProductType'),
}

model DescribeInstancesResponseBody = {
  instanceItems?: {
    instanceItem?: [ 
    {
      apiJson?: string(name='ApiJson'),
      appJson?: string(name='AppJson'),
      beganOn?: long(name='BeganOn'),
      createdOn?: long(name='CreatedOn'),
      endOn?: long(name='EndOn'),
      extendJson?: string(name='ExtendJson'),
      hostJson?: string(name='HostJson'),
      idaasJson?: string(name='IdaasJson'),
      imageJson?: string(name='ImageJson'),
      instanceId?: long(name='InstanceId'),
      orderId?: long(name='OrderId'),
      productCode?: string(name='ProductCode'),
      productName?: string(name='ProductName'),
      productSkuCode?: string(name='ProductSkuCode'),
      productType?: string(name='ProductType'),
      status?: string(name='Status'),
      supplierName?: string(name='SupplierName'),
    }
  ](name='InstanceItem')
  }(name='InstanceItems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codes)) {
    query['Codes'] = request.codes;
  }
  if (!Util.isUnset(request.exceptCodes)) {
    query['ExceptCodes'] = request.exceptCodes;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeLicenseRequest {
  licenseCode?: string(name='LicenseCode'),
}

model DescribeLicenseResponseBody = {
  license?: {
    activateTime?: string(name='ActivateTime'),
    createTime?: string(name='CreateTime'),
    expiredTime?: string(name='ExpiredTime'),
    extendArray?: {
      licenseAttribute?: [ 
      {
        code?: string(name='Code'),
        value?: string(name='Value'),
      }
    ](name='LicenseAttribute')
    }(name='ExtendArray'),
    extendInfo?: {
      accountQuantity?: long(name='AccountQuantity'),
      aliUid?: long(name='AliUid'),
      email?: string(name='Email'),
      mobile?: string(name='Mobile'),
    }(name='ExtendInfo'),
    instanceId?: string(name='InstanceId'),
    licenseCode?: string(name='LicenseCode'),
    licenseStatus?: string(name='LicenseStatus'),
    productCode?: string(name='ProductCode'),
    productName?: string(name='ProductName'),
    productSkuId?: string(name='ProductSkuId'),
    supplierName?: string(name='SupplierName'),
  }(name='License'),
  requestId?: string(name='RequestId'),
}

model DescribeLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLicenseResponseBody(name='body'),
}

async function describeLicenseWithOptions(request: DescribeLicenseRequest, runtime: Util.RuntimeOptions): DescribeLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLicense',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLicense(request: DescribeLicenseRequest): DescribeLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLicenseWithOptions(request, runtime);
}

model DescribeOrderRequest {
  orderId?: string(name='OrderId'),
}

model DescribeOrderResponseBody = {
  accountQuantity?: long(name='AccountQuantity'),
  aliUid?: long(name='AliUid'),
  components?: map[string]any(name='Components'),
  couponPrice?: float(name='CouponPrice'),
  createdOn?: long(name='CreatedOn'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: long(name='OrderId'),
  orderStatus?: string(name='OrderStatus'),
  orderType?: string(name='OrderType'),
  originalPrice?: float(name='OriginalPrice'),
  paidOn?: long(name='PaidOn'),
  payStatus?: string(name='PayStatus'),
  paymentPrice?: float(name='PaymentPrice'),
  periodType?: string(name='PeriodType'),
  productCode?: string(name='ProductCode'),
  productName?: string(name='ProductName'),
  productSkuCode?: string(name='ProductSkuCode'),
  quantity?: int32(name='Quantity'),
  requestId?: string(name='RequestId'),
  supplierCompanyName?: string(name='SupplierCompanyName'),
  supplierTelephones?: {
    telephone?: [ string ](name='Telephone')
  }(name='SupplierTelephones'),
  totalPrice?: float(name='TotalPrice'),
}

model DescribeOrderResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOrderResponseBody(name='body'),
}

async function describeOrderWithOptions(request: DescribeOrderRequest, runtime: Util.RuntimeOptions): DescribeOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOrder',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOrder(request: DescribeOrderRequest): DescribeOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOrderWithOptions(request, runtime);
}

model DescribePriceRequest {
  commodity?: string(name='Commodity'),
  orderType?: string(name='OrderType'),
}

model DescribePriceResponseBody = {
  coupons?: {
    coupon?: [ 
    {
      canPromFee?: float(name='CanPromFee'),
      couponDesc?: string(name='CouponDesc'),
      couponName?: string(name='CouponName'),
      couponOptionCode?: string(name='CouponOptionCode'),
      couponOptionNo?: string(name='CouponOptionNo'),
      isSelected?: boolean(name='IsSelected'),
    }
  ](name='Coupon')
  }(name='Coupons'),
  currency?: string(name='Currency'),
  cuxiao?: boolean(name='Cuxiao'),
  cycle?: string(name='Cycle'),
  discountPrice?: float(name='DiscountPrice'),
  duration?: int32(name='Duration'),
  expressionCode?: string(name='ExpressionCode'),
  expressionMessage?: string(name='ExpressionMessage'),
  infoTitle?: string(name='InfoTitle'),
  originalPrice?: float(name='OriginalPrice'),
  productCode?: string(name='ProductCode'),
  promotionRules?: {
    promotionRule?: [ 
    {
      name?: string(name='Name'),
      ruleId?: string(name='RuleId'),
      title?: string(name='Title'),
    }
  ](name='PromotionRule')
  }(name='PromotionRules'),
  tradePrice?: float(name='TradePrice'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeProductRequest {
  aliUid?: string(name='AliUid'),
  code?: string(name='Code'),
  queryDraft?: boolean(name='QueryDraft'),
}

model DescribeProductResponseBody = {
  auditFailMsg?: string(name='AuditFailMsg'),
  auditStatus?: string(name='AuditStatus'),
  auditTime?: long(name='AuditTime'),
  code?: string(name='Code'),
  description?: string(name='Description'),
  frontCategoryId?: long(name='FrontCategoryId'),
  gmtCreated?: long(name='GmtCreated'),
  gmtModified?: long(name='GmtModified'),
  name?: string(name='Name'),
  picUrl?: string(name='PicUrl'),
  productExtras?: {
    productExtra?: [ 
    {
      key?: string(name='Key'),
      label?: string(name='Label'),
      order?: int32(name='Order'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='ProductExtra')
  }(name='ProductExtras'),
  productSkus?: {
    productSku?: [ 
    {
      chargeType?: string(name='ChargeType'),
      code?: string(name='Code'),
      constraints?: string(name='Constraints'),
      hidden?: boolean(name='Hidden'),
      modules?: {
        module?: [ 
        {
          code?: string(name='Code'),
          id?: string(name='Id'),
          name?: string(name='Name'),
          properties?: {
            property?: [ 
            {
              displayUnit?: string(name='DisplayUnit'),
              key?: string(name='Key'),
              name?: string(name='Name'),
              propertyValues?: {
                propertyValue?: [ 
                {
                  displayName?: string(name='DisplayName'),
                  max?: string(name='Max'),
                  min?: string(name='Min'),
                  remark?: string(name='Remark'),
                  step?: string(name='Step'),
                  type?: string(name='Type'),
                  value?: string(name='Value'),
                }
              ](name='PropertyValue')
              }(name='PropertyValues'),
              showType?: string(name='ShowType'),
            }
          ](name='Property')
          }(name='Properties'),
        }
      ](name='Module')
      }(name='Modules'),
      name?: string(name='Name'),
      orderPeriods?: {
        orderPeriod?: [ 
        {
          name?: string(name='Name'),
          periodType?: string(name='PeriodType'),
        }
      ](name='OrderPeriod')
      }(name='OrderPeriods'),
    }
  ](name='ProductSku')
  }(name='ProductSkus'),
  requestId?: string(name='RequestId'),
  score?: float(name='Score'),
  shopInfo?: {
    emails?: string(name='Emails'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    telephones?: {
      telephone?: [ string ](name='Telephone')
    }(name='Telephones'),
    wangWangs?: {
      wangWang?: [ 
      {
        remark?: string(name='Remark'),
        userName?: string(name='UserName'),
      }
    ](name='WangWang')
    }(name='WangWangs'),
  }(name='ShopInfo'),
  shortDescription?: string(name='ShortDescription'),
  status?: string(name='Status'),
  supplierPk?: long(name='SupplierPk'),
  type?: string(name='Type'),
  useCount?: long(name='UseCount'),
}

model DescribeProductResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductResponseBody(name='body'),
}

async function describeProductWithOptions(request: DescribeProductRequest, runtime: Util.RuntimeOptions): DescribeProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.queryDraft)) {
    query['QueryDraft'] = request.queryDraft;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProduct',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProduct(request: DescribeProductRequest): DescribeProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductWithOptions(request, runtime);
}

model DescribeProductsRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchTerm?: string(name='SearchTerm'),
}

model DescribeProductsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productItems?: {
    productItem?: [ 
    {
      categoryId?: long(name='CategoryId'),
      code?: string(name='Code'),
      deliveryDate?: string(name='DeliveryDate'),
      deliveryWay?: string(name='DeliveryWay'),
      imageUrl?: string(name='ImageUrl'),
      name?: string(name='Name'),
      operationSystem?: string(name='OperationSystem'),
      priceInfo?: string(name='PriceInfo'),
      score?: string(name='Score'),
      shortDescription?: string(name='ShortDescription'),
      suggestedPrice?: string(name='SuggestedPrice'),
      supplierId?: long(name='SupplierId'),
      supplierName?: string(name='SupplierName'),
      tags?: string(name='Tags'),
      targetUrl?: string(name='TargetUrl'),
      warrantyDate?: string(name='WarrantyDate'),
    }
  ](name='ProductItem')
  }(name='ProductItems'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeProductsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductsResponseBody(name='body'),
}

async function describeProductsWithOptions(request: DescribeProductsRequest, runtime: Util.RuntimeOptions): DescribeProductsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchTerm)) {
    query['SearchTerm'] = request.searchTerm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProducts',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProducts(request: DescribeProductsRequest): DescribeProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductsWithOptions(request, runtime);
}

model DescribeProjectAttachmentsRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeProjectAttachmentsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      attachmentToken?: string(name='AttachmentToken'),
      attachmentType?: string(name='AttachmentType'),
      content?: string(name='Content'),
      fileLink?: string(name='FileLink'),
      fileLinkGmtExpired?: long(name='FileLinkGmtExpired'),
      fileName?: string(name='FileName'),
      fileSize?: long(name='FileSize'),
      fileSuffix?: string(name='FileSuffix'),
      gmtCreate?: long(name='GmtCreate'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      operator?: long(name='Operator'),
      operatorName?: string(name='OperatorName'),
      operatorRole?: string(name='OperatorRole'),
      stepNo?: int32(name='StepNo'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeProjectAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectAttachmentsResponseBody(name='body'),
}

async function describeProjectAttachmentsWithOptions(request: DescribeProjectAttachmentsRequest, runtime: Util.RuntimeOptions): DescribeProjectAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectAttachments',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectAttachments(request: DescribeProjectAttachmentsRequest): DescribeProjectAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectAttachmentsWithOptions(request, runtime);
}

model DescribeProjectInfoRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeProjectInfoResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    currentStepNo?: int32(name='CurrentStepNo'),
    customerAliUid?: long(name='CustomerAliUid'),
    finalStepNo?: int32(name='FinalStepNo'),
    finishType?: string(name='FinishType'),
    gmtCreate?: long(name='GmtCreate'),
    gmtExpired?: long(name='GmtExpired'),
    gmtFinished?: long(name='GmtFinished'),
    instanceId?: string(name='InstanceId'),
    orderId?: long(name='OrderId'),
    productCode?: string(name='ProductCode'),
    productName?: string(name='ProductName'),
    productSkuCode?: string(name='ProductSkuCode'),
    productSkuName?: string(name='ProductSkuName'),
    projectStatus?: string(name='ProjectStatus'),
    supplierAliUid?: long(name='SupplierAliUid'),
    templateId?: long(name='TemplateId'),
    templateType?: string(name='TemplateType'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeProjectInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectInfoResponseBody(name='body'),
}

async function describeProjectInfoWithOptions(request: DescribeProjectInfoRequest, runtime: Util.RuntimeOptions): DescribeProjectInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectInfo',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectInfo(request: DescribeProjectInfoRequest): DescribeProjectInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectInfoWithOptions(request, runtime);
}

model DescribeProjectMessagesRequest {
  instanceId?: string(name='InstanceId'),
  pageIndex?: int32(name='PageIndex'),
}

model DescribeProjectMessagesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      content?: string(name='Content'),
      gmtCreate?: long(name='GmtCreate'),
      operator?: long(name='Operator'),
      operatorName?: string(name='OperatorName'),
      operatorRole?: string(name='OperatorRole'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeProjectMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectMessagesResponseBody(name='body'),
}

async function describeProjectMessagesWithOptions(request: DescribeProjectMessagesRequest, runtime: Util.RuntimeOptions): DescribeProjectMessagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectMessages',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectMessages(request: DescribeProjectMessagesRequest): DescribeProjectMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectMessagesWithOptions(request, runtime);
}

model DescribeProjectNodesRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeProjectNodesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      allowRollbackNode?: boolean(name='AllowRollbackNode'),
      autoFinishNode?: boolean(name='AutoFinishNode'),
      finalStepNo?: int32(name='FinalStepNo'),
      gmtExpired?: long(name='GmtExpired'),
      gmtFinished?: long(name='GmtFinished'),
      gmtStart?: long(name='GmtStart'),
      needAttachment?: boolean(name='NeedAttachment'),
      nextNodeId?: long(name='NextNodeId'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      nodeStatus?: string(name='NodeStatus'),
      operatorRole?: string(name='OperatorRole'),
      parentNodeId?: long(name='ParentNodeId'),
      previousNodeId?: long(name='PreviousNodeId'),
      stepNo?: int32(name='StepNo'),
      templateForm?: string(name='TemplateForm'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeProjectNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectNodesResponseBody(name='body'),
}

async function describeProjectNodesWithOptions(request: DescribeProjectNodesRequest, runtime: Util.RuntimeOptions): DescribeProjectNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectNodes',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectNodes(request: DescribeProjectNodesRequest): DescribeProjectNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectNodesWithOptions(request, runtime);
}

model DescribeProjectOperateLogsRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeProjectOperateLogsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      description?: string(name='Description'),
      gmtCreate?: long(name='GmtCreate'),
      operator?: long(name='Operator'),
      operatorName?: string(name='OperatorName'),
      operatorRole?: string(name='OperatorRole'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeProjectOperateLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectOperateLogsResponseBody(name='body'),
}

async function describeProjectOperateLogsWithOptions(request: DescribeProjectOperateLogsRequest, runtime: Util.RuntimeOptions): DescribeProjectOperateLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectOperateLogs',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectOperateLogs(request: DescribeProjectOperateLogsRequest): DescribeProjectOperateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectOperateLogsWithOptions(request, runtime);
}

model FinishCurrentProjectNodeRequest {
  instanceId?: string(name='InstanceId'),
  nodeId?: long(name='NodeId'),
  remark?: string(name='Remark'),
  templateForm?: string(name='TemplateForm'),
}

model FinishCurrentProjectNodeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model FinishCurrentProjectNodeResponse = {
  headers: map[string]string(name='headers'),
  body: FinishCurrentProjectNodeResponseBody(name='body'),
}

async function finishCurrentProjectNodeWithOptions(request: FinishCurrentProjectNodeRequest, runtime: Util.RuntimeOptions): FinishCurrentProjectNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.templateForm)) {
    query['TemplateForm'] = request.templateForm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FinishCurrentProjectNode',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function finishCurrentProjectNode(request: FinishCurrentProjectNodeRequest): FinishCurrentProjectNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishCurrentProjectNodeWithOptions(request, runtime);
}

model PauseProjectRequest {
  instanceId?: string(name='InstanceId'),
  nodeId?: long(name='NodeId'),
  remark?: string(name='Remark'),
}

model PauseProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model PauseProjectResponse = {
  headers: map[string]string(name='headers'),
  body: PauseProjectResponseBody(name='body'),
}

async function pauseProjectWithOptions(request: PauseProjectRequest, runtime: Util.RuntimeOptions): PauseProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseProject',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseProject(request: PauseProjectRequest): PauseProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseProjectWithOptions(request, runtime);
}

model PushMeteringDataRequest {
  metering?: string(name='Metering'),
}

model PushMeteringDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PushMeteringDataResponse = {
  headers: map[string]string(name='headers'),
  body: PushMeteringDataResponseBody(name='body'),
}

async function pushMeteringDataWithOptions(request: PushMeteringDataRequest, runtime: Util.RuntimeOptions): PushMeteringDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.metering)) {
    query['Metering'] = request.metering;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushMeteringData',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushMeteringData(request: PushMeteringDataRequest): PushMeteringDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMeteringDataWithOptions(request, runtime);
}

model ResumeProjectRequest {
  instanceId?: string(name='InstanceId'),
  nodeId?: long(name='NodeId'),
  remark?: string(name='Remark'),
}

model ResumeProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model ResumeProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeProjectResponseBody(name='body'),
}

async function resumeProjectWithOptions(request: ResumeProjectRequest, runtime: Util.RuntimeOptions): ResumeProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeProject',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeProject(request: ResumeProjectRequest): ResumeProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeProjectWithOptions(request, runtime);
}

model RollbackCurrentProjectNodeRequest {
  instanceId?: string(name='InstanceId'),
  nodeId?: long(name='NodeId'),
  remark?: string(name='Remark'),
}

model RollbackCurrentProjectNodeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model RollbackCurrentProjectNodeResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackCurrentProjectNodeResponseBody(name='body'),
}

async function rollbackCurrentProjectNodeWithOptions(request: RollbackCurrentProjectNodeRequest, runtime: Util.RuntimeOptions): RollbackCurrentProjectNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackCurrentProjectNode',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollbackCurrentProjectNode(request: RollbackCurrentProjectNodeRequest): RollbackCurrentProjectNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackCurrentProjectNodeWithOptions(request, runtime);
}

