/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'market.aliyuncs.com',
    ap-northeast-1 = 'market.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'market.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'market.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'market.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'market.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'market.aliyuncs.com',
    cn-chengdu = 'market.aliyuncs.com',
    cn-hongkong = 'market.aliyuncs.com',
    cn-huhehaote = 'market.aliyuncs.com',
    cn-qingdao = 'market.aliyuncs.com',
    cn-shanghai = 'market.aliyuncs.com',
    cn-shenzhen = 'market.aliyuncs.com',
    cn-zhangjiakou = 'market.aliyuncs.com',
    eu-central-1 = 'market.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'market.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'market.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'market.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'market.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'market.aliyuncs.com',
    cn-shenzhen-finance-1 = 'market.aliyuncs.com',
    cn-shanghai-finance-1 = 'market.aliyuncs.com',
    cn-north-2-gov-1 = 'market.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('market', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateLicenseRequest {
  identification?: string(name='Identification', example='129****1111'),
  licenseCode?: string(name='LicenseCode', example='APSEDH8TA5CSGK-********_6CNTACBH9EQPOATFXJQL4B2COE7M43VVQ7GUGKAA'),
}

model ActivateLicenseResponseBody = {
  requestId?: string(name='RequestId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  success?: boolean(name='Success', example='true'),
}

model ActivateLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateLicenseResponseBody(name='body'),
}

async function activateLicenseWithOptions(request: ActivateLicenseRequest, runtime: Util.RuntimeOptions): ActivateLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identification)) {
    query['Identification'] = request.identification;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateLicense',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateLicenseWithOptions(request, runtime);
}

model AutoRenewInstanceRequest {
  autoRenewCycle?: string(name='AutoRenewCycle'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  orderBizId?: long(name='OrderBizId'),
  ownerId?: long(name='OwnerId'),
  type?: string(name='Type'),
}

model AutoRenewInstanceResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AutoRenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AutoRenewInstanceResponseBody(name='body'),
}

async function autoRenewInstanceWithOptions(request: AutoRenewInstanceRequest, runtime: Util.RuntimeOptions): AutoRenewInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenewCycle)) {
    body['AutoRenewCycle'] = request.autoRenewCycle;
  }
  if (!Util.isUnset(request.autoRenewDuration)) {
    body['AutoRenewDuration'] = request.autoRenewDuration;
  }
  if (!Util.isUnset(request.orderBizId)) {
    body['OrderBizId'] = request.orderBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    body['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AutoRenewInstance',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function autoRenewInstance(request: AutoRenewInstanceRequest): AutoRenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return autoRenewInstanceWithOptions(request, runtime);
}

model CreateOrderRequest {
  clientToken?: string(name='ClientToken', example='2709c68a-d569-4819-9c5d-1222ed2ee924'),
  commodity?: string(name='Commodity'),
  orderSouce?: string(name='OrderSouce', example='abc'),
  orderType?: string(name='OrderType', example='INSTANCE_BUY'),
  ownerId?: string(name='OwnerId', example='111********11'),
  paymentType?: string(name='PaymentType', example='HAND'),
}

model CreateOrderResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: string(name='OrderId', example='202********0117'),
  requestId?: string(name='RequestId', example='4ca591b5-bc30-4fa7-aeaa-c4d0ec5d24ed'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrderWithOptions(request: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!Util.isUnset(request.orderSouce)) {
    query['OrderSouce'] = request.orderSouce;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrder',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model CrossAccountVerifyTokenRequest {
  token?: string(name='Token', example='C19D103FEA2D50A584410267CE9FBA56'),
}

model CrossAccountVerifyTokenResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='RequestId', example='C19D103F-EA2D-50A5-8441-0267CE9FBA56'),
  result?: {
    authRoles?: [ string ](name='AuthRoles'),
    authTime?: long(name='AuthTime', example='1676974108866'),
    name?: string(name='Name', example='marketplace_wangxiao_test'),
    uid?: string(name='Uid', example='1744526877246715'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CrossAccountVerifyTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CrossAccountVerifyTokenResponseBody(name='body'),
}

async function crossAccountVerifyTokenWithOptions(request: CrossAccountVerifyTokenRequest, runtime: Util.RuntimeOptions): CrossAccountVerifyTokenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CrossAccountVerifyToken',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function crossAccountVerifyToken(request: CrossAccountVerifyTokenRequest): CrossAccountVerifyTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return crossAccountVerifyTokenWithOptions(request, runtime);
}

model DescribeCurrentNodeInfoRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
}

model DescribeCurrentNodeInfoResponseBody = {
  requestId?: string(name='RequestId', example='00eb4de1-6cff-4f56-833e-7b1e070e398d'),
  result?: {
    allowRollbackNode?: boolean(name='AllowRollbackNode', example='false'),
    autoFinishNode?: boolean(name='AutoFinishNode', example='false'),
    finalStepNo?: int32(name='FinalStepNo', example='4'),
    gmtExpired?: long(name='GmtExpired', example='1588920725000'),
    gmtFinished?: long(name='GmtFinished', example='1588920725000'),
    gmtStart?: long(name='GmtStart', example='1588834325000'),
    needAttachment?: boolean(name='NeedAttachment', example='false'),
    nextNodeId?: long(name='NextNodeId', example='8473'),
    nodeId?: long(name='NodeId', example='8472'),
    nodeName?: string(name='NodeName'),
    nodeStatus?: string(name='NodeStatus', example='Starting'),
    operatorRole?: string(name='OperatorRole', example='Provider'),
    parentNodeId?: long(name='ParentNodeId', example='0'),
    previousNodeId?: long(name='PreviousNodeId', example='8471'),
    stepNo?: int32(name='StepNo', example='3'),
    templateForm?: string(name='TemplateForm'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCurrentNodeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCurrentNodeInfoResponseBody(name='body'),
}

async function describeCurrentNodeInfoWithOptions(request: DescribeCurrentNodeInfoRequest, runtime: Util.RuntimeOptions): DescribeCurrentNodeInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCurrentNodeInfo',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCurrentNodeInfo(request: DescribeCurrentNodeInfoRequest): DescribeCurrentNodeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCurrentNodeInfoWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  instanceId?: string(name='InstanceId', example='155****11'),
  orderType?: string(name='OrderType', example='NEW'),
  ownerId?: long(name='OwnerId'),
}

model DescribeInstanceResponseBody = {
  appJson?: string(name='AppJson', example='{"frontEndUrl":"https://****.aliyundoc.com","password":"Sjtv***","adminUrl":"https://****.aliyundoc.com","username":"aliyun***"}'),
  autoRenewal?: string(name='AutoRenewal'),
  beganOn?: long(name='BeganOn', example='1570634021000'),
  componentJson?: string(name='ComponentJson', example='{"package_version":"yuncode000111"}'),
  constraints?: string(name='Constraints', example='{}'),
  createdOn?: long(name='CreatedOn', example='1570634018000'),
  endOn?: long(name='EndOn', example='1602259200000'),
  extendJson?: string(name='ExtendJson'),
  hostJson?: string(name='HostJson', example='{"password":"***","ip":"118.31.***.41","innerIp":"118.31.***.41","region":"","username":"***","beianInfo":""}'),
  instanceId?: long(name='InstanceId', example='1551111111'),
  isTrial?: boolean(name='IsTrial', example='true'),
  modules?: {
    module?: [ 
    {
      code?: string(name='Code', example='package_config'),
      id?: string(name='Id', example='101*********026'),
      name?: string(name='Name'),
      properties?: {
        property?: [ 
        {
          displayUnit?: string(name='DisplayUnit', example='12'),
          key?: string(name='Key', example='12'),
          name?: string(name='Name', example='12'),
          propertyValues?: {
            propertyValue?: [ 
            {
              displayName?: string(name='DisplayName', example='12'),
              max?: string(name='Max', example='12'),
              min?: string(name='Min', example='12'),
              remark?: string(name='Remark', example='12'),
              step?: string(name='Step', example='12'),
              type?: string(name='Type', example='12'),
              value?: string(name='Value', example='12'),
            }
          ](name='PropertyValue')
          }(name='PropertyValues'),
          showType?: string(name='ShowType', example='12'),
        }
      ](name='Property')
      }(name='Properties'),
    }
  ](name='Module')
  }(name='Modules'),
  orderId?: long(name='OrderId', example='204211111111111'),
  productCode?: string(name='ProductCode', example='cmgj00**11'),
  productName?: string(name='ProductName'),
  productSkuCode?: string(name='ProductSkuCode', example='cmgj00**11-prepay'),
  productType?: string(name='ProductType', example='APP'),
  relationalData?: {
    serviceStatus?: string(name='ServiceStatus', example='STARTED'),
  }(name='RelationalData'),
  status?: string(name='Status', example='OPENED'),
  supplierName?: string(name='SupplierName'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  codes?: string(name='Codes', example='cmgj000112,cmgj000113'),
  exceptCodes?: string(name='ExceptCodes', example='cmgj000114,cmgj000115'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  productType?: string(name='ProductType', example='1'),
}

model DescribeInstancesResponseBody = {
  instanceItems?: {
    instanceItem?: [ 
    {
      apiJson?: string(name='ApiJson', example='{}'),
      appJson?: string(name='AppJson', example='{"frontEndUrl":"https://***.aliyun.com","password":"Sjtv***","adminUrl":"https://***.aiiyun.com","username":"aliyun***"}'),
      beganOn?: long(name='BeganOn', example='1570634021000'),
      createdOn?: long(name='CreatedOn', example='1570634021000'),
      endOn?: long(name='EndOn', example='1570644021000'),
      extendJson?: string(name='ExtendJson'),
      hostJson?: string(name='HostJson', example='{"password":"***","ip":"118.31.***.41","innerIp":"118.31.***.41","region":"","username":"***","beianInfo":""}'),
      idaasJson?: string(name='IdaasJson', example='{}'),
      imageJson?: string(name='ImageJson', example='{}'),
      instanceId?: long(name='InstanceId', example='1551111111'),
      orderId?: long(name='OrderId', example='204211111111111'),
      productCode?: string(name='ProductCode', example='cmgj00**11'),
      productName?: string(name='ProductName'),
      productSkuCode?: string(name='ProductSkuCode', example='cmgj00**11-prepay'),
      productType?: string(name='ProductType', example='APP'),
      status?: string(name='Status', example='OPENED'),
      supplierName?: string(name='SupplierName'),
    }
  ](name='InstanceItem')
  }(name='InstanceItems'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='54C22FB9-0CB1-5629-97A8-653FC7990F00'),
  totalCount?: int32(name='TotalCount', example='55'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codes)) {
    query['Codes'] = request.codes;
  }
  if (!Util.isUnset(request.exceptCodes)) {
    query['ExceptCodes'] = request.exceptCodes;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeLicenseRequest {
  licenseCode?: string(name='LicenseCode', example='xxxxxx'),
}

model DescribeLicenseResponseBody = {
  license?: {
    activateTime?: string(name='ActivateTime', example='2019-05-25 09:00:00'),
    createTime?: string(name='CreateTime', example='2019-05-25 09:00:00'),
    expiredTime?: string(name='ExpiredTime', example='2019-06-25 09:00:00'),
    extendArray?: {
      licenseAttribute?: [ 
      {
        code?: string(name='Code', example='-'),
        value?: string(name='Value', example='-'),
      }
    ](name='LicenseAttribute')
    }(name='ExtendArray'),
    extendInfo?: {
      accountQuantity?: long(name='AccountQuantity', example='-'),
      aliUid?: long(name='AliUid', example='190311111111****'),
      email?: string(name='Email', example='id***@**.com'),
      mobile?: string(name='Mobile', example='129****1111'),
    }(name='ExtendInfo'),
    instanceId?: string(name='InstanceId', example='1551111111'),
    licenseCode?: string(name='LicenseCode', example='-'),
    licenseStatus?: string(name='LicenseStatus', example='ACTIVATED'),
    productCode?: string(name='ProductCode', example='cmgj02****'),
    productName?: string(name='ProductName'),
    productSkuId?: string(name='ProductSkuId', example='cmgj02****-prepay'),
    supplierName?: string(name='SupplierName'),
  }(name='License'),
  requestId?: string(name='RequestId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model DescribeLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLicenseResponseBody(name='body'),
}

async function describeLicenseWithOptions(request: DescribeLicenseRequest, runtime: Util.RuntimeOptions): DescribeLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLicense',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLicense(request: DescribeLicenseRequest): DescribeLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLicenseWithOptions(request, runtime);
}

model DescribeOrderRequest {
  orderId?: string(name='OrderId', example='202*********415'),
}

model DescribeOrderResponseBody = {
  accountQuantity?: long(name='AccountQuantity', example='0'),
  aliUid?: long(name='AliUid', example='190311111111****'),
  components?: map[string]any(name='Components'),
  couponPrice?: float(name='CouponPrice', example='0.0'),
  createdOn?: long(name='CreatedOn', example='1531191564000'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: long(name='OrderId', example='202211111111111'),
  orderStatus?: string(name='OrderStatus', example='NORMAL'),
  orderType?: string(name='OrderType', example='NEW'),
  originalPrice?: float(name='OriginalPrice', example='10.0'),
  paidOn?: long(name='PaidOn', example='1531191675000'),
  payStatus?: string(name='PayStatus', example='PAID'),
  paymentPrice?: float(name='PaymentPrice', example='0.0'),
  periodType?: string(name='PeriodType', example='MONTH'),
  productCode?: string(name='ProductCode', example='cmgj02****'),
  productName?: string(name='ProductName'),
  productSkuCode?: string(name='ProductSkuCode', example='cmgj02****-prepay'),
  quantity?: int32(name='Quantity', example='1'),
  requestId?: string(name='RequestId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  supplierCompanyName?: string(name='SupplierCompanyName'),
  supplierTelephones?: {
    telephone?: [ string ](name='Telephone')
  }(name='SupplierTelephones'),
  totalPrice?: float(name='TotalPrice', example='0.0'),
}

model DescribeOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOrderResponseBody(name='body'),
}

async function describeOrderWithOptions(request: DescribeOrderRequest, runtime: Util.RuntimeOptions): DescribeOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOrder',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOrder(request: DescribeOrderRequest): DescribeOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOrderWithOptions(request, runtime);
}

model DescribePriceRequest {
  commodity?: string(name='Commodity', example='{"components":{"package_version":"yuncode12928000016"},"duration":1,"pricingCycle":"YEAR","productCode":"cmgj01**28","quantity":1,"skuCode":"prepay"}'),
  orderType?: string(name='OrderType', example='INSTANCE_BUY'),
}

model DescribePriceResponseBody = {
  coupons?: {
    coupon?: [ 
    {
      canPromFee?: float(name='CanPromFee', example='100.00'),
      couponDesc?: string(name='CouponDesc'),
      couponName?: string(name='CouponName'),
      couponOptionCode?: string(name='CouponOptionCode', example='ActiveCoupon'),
      couponOptionNo?: string(name='CouponOptionNo', example='3874923111'),
      isSelected?: boolean(name='IsSelected', example='false'),
    }
  ](name='Coupon')
  }(name='Coupons'),
  currency?: string(name='Currency', example='CNY'),
  cuxiao?: boolean(name='Cuxiao', example='true'),
  cycle?: string(name='Cycle', example='MONTH'),
  discountPrice?: float(name='DiscountPrice', example='178.20'),
  duration?: int32(name='Duration', example='1'),
  expressionCode?: string(name='ExpressionCode', example='ORDER.NO_REAL_NAME_AUTHENTICATION'),
  expressionMessage?: string(name='ExpressionMessage'),
  infoTitle?: string(name='InfoTitle'),
  originalPrice?: float(name='OriginalPrice', example='198.00'),
  productCode?: string(name='ProductCode', example='cmgj01****'),
  promotionRules?: {
    promotionRule?: [ 
    {
      name?: string(name='Name'),
      ruleId?: string(name='RuleId', example='102112'),
      title?: string(name='Title'),
    }
  ](name='PromotionRule')
  }(name='PromotionRules'),
  tradePrice?: float(name='TradePrice', example='19.80'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeProductRequest {
  aliUid?: string(name='AliUid', description='AliUid', example='190********569'),
  code?: string(name='Code', example='cmjj01**45'),
  queryDraft?: boolean(name='QueryDraft', example='false'),
}

model DescribeProductResponseBody = {
  auditFailMsg?: string(name='AuditFailMsg'),
  auditStatus?: string(name='AuditStatus', example='function_fail'),
  auditTime?: long(name='AuditTime', example='1581609600000'),
  code?: string(name='Code', example='cmjj01**45'),
  description?: string(name='Description'),
  frontCategoryId?: long(name='FrontCategoryId', example='523617212'),
  gmtCreated?: long(name='GmtCreated', example='1578931200000'),
  gmtModified?: long(name='GmtModified', example='1578931200000'),
  name?: string(name='Name'),
  picUrl?: string(name='PicUrl', example='https://oss.aliyuncs.com/photogallery/photo/1930532890589852/6245/495d5f19-03e4-4c2e-9c4e-bef9ab6af1e1.png'),
  productExtras?: {
    productExtra?: [ 
    {
      key?: string(name='Key', example='product_advantage'),
      label?: string(name='Label'),
      order?: int32(name='Order', example='0'),
      type?: string(name='Type', example='HTML'),
      values?: string(name='Values'),
    }
  ](name='ProductExtra')
  }(name='ProductExtras'),
  productSkus?: {
    productSku?: [ 
    {
      chargeType?: string(name='ChargeType', example='PREPAY'),
      code?: string(name='Code', example='cmjj01****-Package'),
      constraints?: string(name='Constraints', example='{\\"img_id\\":{\\"img_version|img_region\\":{\\"V1.7|cn-shenzhen-st3-a01\\":[\\"m-wz9ho4hmos0lpxcldqoq\\"]}}'),
      hidden?: boolean(name='Hidden', example='true'),
      modules?: {
        module?: [ 
        {
          code?: string(name='Code', example='img_id'),
          id?: string(name='Id', example='248220'),
          name?: string(name='Name'),
          properties?: {
            property?: [ 
            {
              displayUnit?: string(name='DisplayUnit', example='1'),
              key?: string(name='Key', example='img_id'),
              name?: string(name='Name'),
              propertyValues?: {
                propertyValue?: [ 
                {
                  displayName?: string(name='DisplayName'),
                  max?: string(name='Max', example='123'),
                  min?: string(name='Min', example='11'),
                  remark?: string(name='Remark', example='abc'),
                  step?: string(name='Step', example='1'),
                  type?: string(name='Type', example='single_string'),
                  value?: string(name='Value', example='m-28e213e7t'),
                }
              ](name='PropertyValue')
              }(name='PropertyValues'),
              showType?: string(name='ShowType', example='number'),
            }
          ](name='Property')
          }(name='Properties'),
        }
      ](name='Module')
      }(name='Modules'),
      name?: string(name='Name', example='21'),
      orderPeriods?: {
        orderPeriod?: [ 
        {
          name?: string(name='Name'),
          periodType?: string(name='PeriodType', example='HOUR'),
        }
      ](name='OrderPeriod')
      }(name='OrderPeriods'),
    }
  ](name='ProductSku')
  }(name='ProductSkus'),
  requestId?: string(name='RequestId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  score?: float(name='Score', example='5.0'),
  shopInfo?: {
    emails?: string(name='Emails', example='46**41@example.com'),
    id?: long(name='Id', example='123'),
    name?: string(name='Name'),
    telephones?: {
      telephone?: [ string ](name='Telephone')
    }(name='Telephones'),
    wangWangs?: {
      wangWang?: [ 
      {
        remark?: string(name='Remark', example='123'),
        userName?: string(name='UserName', example='ABC'),
      }
    ](name='WangWang')
    }(name='WangWangs'),
  }(name='ShopInfo'),
  shortDescription?: string(name='ShortDescription'),
  status?: string(name='Status', example='1'),
  supplierPk?: long(name='SupplierPk', example='1526111111****'),
  type?: string(name='Type', example='MIRROR'),
  useCount?: long(name='UseCount', example='10'),
}

model DescribeProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductResponseBody(name='body'),
}

async function describeProductWithOptions(request: DescribeProductRequest, runtime: Util.RuntimeOptions): DescribeProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.queryDraft)) {
    query['QueryDraft'] = request.queryDraft;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProduct',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProduct(request: DescribeProductRequest): DescribeProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductWithOptions(request, runtime);
}

model DescribeProductsRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='categoryId'),
      value?: string(name='Value', example='53366009'),
    }
  ](name='Filter'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchTerm?: string(name='SearchTerm'),
}

model DescribeProductsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productItems?: {
    productItem?: [ 
    {
      categoryId?: long(name='CategoryId', example='53398003'),
      code?: string(name='Code', example='cmjj02****'),
      deliveryDate?: string(name='DeliveryDate'),
      deliveryWay?: string(name='DeliveryWay'),
      imageUrl?: string(name='ImageUrl', example='https://oss.aliyuncs.com/photogallery/photo/1904996544835414/7549/767d6d07-8366-4822-b84e-61f6ea10d146.png'),
      name?: string(name='Name'),
      operationSystem?: string(name='OperationSystem', example='windows'),
      priceInfo?: string(name='PriceInfo', example='{\\"DiscountPrice\\": 0.0, \\"TradePrice\\": 15750.0, \\"Currency\\": \\"CNY\\", \\"OriginalPrice\\": 15750.0, \\"RuleIds\\": {\\"RuleId\\": []}, \\"Coupons\\": {\\"Coupon\\": []}}'),
      score?: string(name='Score', example='5.0'),
      shortDescription?: string(name='ShortDescription'),
      suggestedPrice?: string(name='SuggestedPrice'),
      supplierId?: long(name='SupplierId', example='228399'),
      supplierName?: string(name='SupplierName'),
      tags?: string(name='Tags'),
      targetUrl?: string(name='TargetUrl', example='/products/53616009/cmjj02****.html'),
      warrantyDate?: string(name='WarrantyDate'),
    }
  ](name='ProductItem')
  }(name='ProductItems'),
  requestId?: string(name='RequestId', example='A077D99E-0C4D-421E-A5D4-F533F6657817'),
  totalCount?: int32(name='TotalCount', example='75'),
}

model DescribeProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductsResponseBody(name='body'),
}

async function describeProductsWithOptions(request: DescribeProductsRequest, runtime: Util.RuntimeOptions): DescribeProductsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchTerm)) {
    query['SearchTerm'] = request.searchTerm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProducts',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProducts(request: DescribeProductsRequest): DescribeProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductsWithOptions(request, runtime);
}

model DescribeProjectAttachmentsRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
}

model DescribeProjectAttachmentsResponseBody = {
  requestId?: string(name='RequestId', example='e03a9f78-7b40-4fb3-a015-350913e37e3f'),
  result?: [ 
    {
      attachmentToken?: string(name='AttachmentToken', example='Mzc4NDAtODQ3MjY4MzI='),
      attachmentType?: string(name='AttachmentType', example='File'),
      content?: string(name='Content'),
      fileLink?: string(name='FileLink', example='http://delivery-center.oss-cn-shanghai.aliyuncs.com/6a8****0e2/e0a***f3.jpg?Expires=1589334682&OSSAccessKeyId=wI2r*********&Signature=JWB39pUxs7RCqrcw58qXPEGu6M0%3D'),
      fileLinkGmtExpired?: long(name='FileLinkGmtExpired', example='1589334682404'),
      fileName?: string(name='FileName', example='f8-test-perview.jpeg'),
      fileSize?: long(name='FileSize', example='109124'),
      fileSuffix?: string(name='FileSuffix', example='jpg'),
      gmtCreate?: long(name='GmtCreate', example='1587968858000'),
      nodeId?: long(name='NodeId', example='8472'),
      nodeName?: string(name='NodeName'),
      operator?: long(name='Operator', example='45261111****'),
      operatorName?: string(name='OperatorName'),
      operatorRole?: string(name='OperatorRole', example='Provider'),
      stepNo?: int32(name='StepNo', example='3'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProjectAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProjectAttachmentsResponseBody(name='body'),
}

async function describeProjectAttachmentsWithOptions(request: DescribeProjectAttachmentsRequest, runtime: Util.RuntimeOptions): DescribeProjectAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectAttachments',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectAttachments(request: DescribeProjectAttachmentsRequest): DescribeProjectAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectAttachmentsWithOptions(request, runtime);
}

model DescribeProjectInfoRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
}

model DescribeProjectInfoResponseBody = {
  requestId?: string(name='RequestId', example='ee3e1b3b-6c38-4bcf-be40-5a946cfda761'),
  result?: {
    currentStepNo?: int32(name='CurrentStepNo', example='3'),
    customerAliUid?: long(name='CustomerAliUid', example='27291111****'),
    finalStepNo?: int32(name='FinalStepNo', example='4'),
    finishType?: string(name='FinishType', example='null'),
    gmtCreate?: long(name='GmtCreate', example='1588834324000'),
    gmtExpired?: long(name='GmtExpired', example='1620403200000'),
    gmtFinished?: long(name='GmtFinished', example='1620403200000'),
    instanceId?: string(name='InstanceId', example='4****89'),
    orderId?: long(name='OrderId', example='2059111111111'),
    productCode?: string(name='ProductCode', example='cmgj***055'),
    productName?: string(name='ProductName'),
    productSkuCode?: string(name='ProductSkuCode', example='yuncode****500001'),
    productSkuName?: string(name='ProductSkuName'),
    projectStatus?: string(name='ProjectStatus', example='Starting'),
    supplierAliUid?: long(name='SupplierAliUid', example='45121111****'),
    templateId?: long(name='TemplateId', example='410'),
    templateType?: string(name='TemplateType', example='Public'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProjectInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProjectInfoResponseBody(name='body'),
}

async function describeProjectInfoWithOptions(request: DescribeProjectInfoRequest, runtime: Util.RuntimeOptions): DescribeProjectInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectInfo',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectInfo(request: DescribeProjectInfoRequest): DescribeProjectInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectInfoWithOptions(request, runtime);
}

model DescribeProjectMessagesRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
  pageIndex?: int32(name='PageIndex', example='1'),
}

model DescribeProjectMessagesResponseBody = {
  requestId?: string(name='RequestId', example='00eb4de1-6cff-4f56-833e-7b1e070e398d'),
  result?: [ 
    {
      content?: string(name='Content'),
      gmtCreate?: long(name='GmtCreate', example='1589015560000'),
      operator?: long(name='Operator', example='452611111****'),
      operatorName?: string(name='OperatorName'),
      operatorRole?: string(name='OperatorRole', example='Provider'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='28'),
}

model DescribeProjectMessagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProjectMessagesResponseBody(name='body'),
}

async function describeProjectMessagesWithOptions(request: DescribeProjectMessagesRequest, runtime: Util.RuntimeOptions): DescribeProjectMessagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectMessages',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectMessages(request: DescribeProjectMessagesRequest): DescribeProjectMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectMessagesWithOptions(request, runtime);
}

model DescribeProjectNodesRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
}

model DescribeProjectNodesResponseBody = {
  requestId?: string(name='RequestId', example='937fee1f-26bb-4b6e-8def-977a6bdaa1e5'),
  result?: [ 
    {
      allowRollbackNode?: boolean(name='AllowRollbackNode', example='false'),
      autoFinishNode?: boolean(name='AutoFinishNode', example='false'),
      finalStepNo?: int32(name='FinalStepNo', example='4'),
      gmtExpired?: long(name='GmtExpired', example='1588834325000'),
      gmtFinished?: long(name='GmtFinished', example='1588834325000'),
      gmtStart?: long(name='GmtStart', example='1588834325000'),
      needAttachment?: boolean(name='NeedAttachment', example='false'),
      nextNodeId?: long(name='NextNodeId', example='8472'),
      nodeId?: long(name='NodeId', example='8471'),
      nodeName?: string(name='NodeName'),
      nodeStatus?: string(name='NodeStatus', example='Finish'),
      operatorRole?: string(name='OperatorRole', example='System'),
      parentNodeId?: long(name='ParentNodeId', example='0'),
      previousNodeId?: long(name='PreviousNodeId', example='8470'),
      stepNo?: int32(name='StepNo', example='2'),
      templateForm?: string(name='TemplateForm'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProjectNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProjectNodesResponseBody(name='body'),
}

/**
  * **
  * **
  *
  * @param request DescribeProjectNodesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeProjectNodesResponse
 */
async function describeProjectNodesWithOptions(request: DescribeProjectNodesRequest, runtime: Util.RuntimeOptions): DescribeProjectNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectNodes',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **
  * **
  *
  * @param request DescribeProjectNodesRequest
  * @return DescribeProjectNodesResponse
 */
async function describeProjectNodes(request: DescribeProjectNodesRequest): DescribeProjectNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectNodesWithOptions(request, runtime);
}

model DescribeProjectOperateLogsRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
}

model DescribeProjectOperateLogsResponseBody = {
  requestId?: string(name='RequestId', example='e6037e86-657f-4194-bb6a-7b26973aec8d'),
  result?: [ 
    {
      description?: string(name='Description'),
      gmtCreate?: long(name='GmtCreate', example='1587624497000'),
      operator?: long(name='Operator', example='0'),
      operatorName?: string(name='OperatorName'),
      operatorRole?: string(name='OperatorRole', example='System'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProjectOperateLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProjectOperateLogsResponseBody(name='body'),
}

async function describeProjectOperateLogsWithOptions(request: DescribeProjectOperateLogsRequest, runtime: Util.RuntimeOptions): DescribeProjectOperateLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProjectOperateLogs',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProjectOperateLogs(request: DescribeProjectOperateLogsRequest): DescribeProjectOperateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectOperateLogsWithOptions(request, runtime);
}

model FinishCurrentProjectNodeRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
  nodeId?: long(name='NodeId', example='1924'),
  remark?: string(name='Remark'),
  templateForm?: string(name='TemplateForm'),
}

model FinishCurrentProjectNodeResponseBody = {
  requestId?: string(name='RequestId', example='ee69a00f-189b-400f-9fd2-af89749fb50f'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model FinishCurrentProjectNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FinishCurrentProjectNodeResponseBody(name='body'),
}

async function finishCurrentProjectNodeWithOptions(request: FinishCurrentProjectNodeRequest, runtime: Util.RuntimeOptions): FinishCurrentProjectNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.templateForm)) {
    query['TemplateForm'] = request.templateForm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FinishCurrentProjectNode',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function finishCurrentProjectNode(request: FinishCurrentProjectNodeRequest): FinishCurrentProjectNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishCurrentProjectNodeWithOptions(request, runtime);
}

model PauseProjectRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
  nodeId?: long(name='NodeId', example='1922'),
  remark?: string(name='Remark'),
}

model PauseProjectResponseBody = {
  requestId?: string(name='RequestId', example='ee69a00f-189b-400f-9fd2-af89749fb50f'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model PauseProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseProjectResponseBody(name='body'),
}

async function pauseProjectWithOptions(request: PauseProjectRequest, runtime: Util.RuntimeOptions): PauseProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseProject',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseProject(request: PauseProjectRequest): PauseProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseProjectWithOptions(request, runtime);
}

model PushMeteringDataRequest {
  metering?: string(name='Metering', example='[{"InstanceId":"1000001","StartTime":"100000000","EndTime":"100000010","Entities":[{"Key":"PeriodMin","Value":"96","meteringAssit":"cmapi00060317-PeriodMin-4"}]}]'),
}

model PushMeteringDataResponseBody = {
  requestId?: string(name='RequestId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  success?: boolean(name='Success', example='true'),
}

model PushMeteringDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushMeteringDataResponseBody(name='body'),
}

async function pushMeteringDataWithOptions(request: PushMeteringDataRequest, runtime: Util.RuntimeOptions): PushMeteringDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.metering)) {
    query['Metering'] = request.metering;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushMeteringData',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushMeteringData(request: PushMeteringDataRequest): PushMeteringDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMeteringDataWithOptions(request, runtime);
}

model ResumeProjectRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
  nodeId?: long(name='NodeId', example='1922'),
  remark?: string(name='Remark'),
}

model ResumeProjectResponseBody = {
  requestId?: string(name='RequestId', example='ee69a00f-189b-400f-9fd2-af89749fb50f'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model ResumeProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeProjectResponseBody(name='body'),
}

async function resumeProjectWithOptions(request: ResumeProjectRequest, runtime: Util.RuntimeOptions): ResumeProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeProject',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeProject(request: ResumeProjectRequest): ResumeProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeProjectWithOptions(request, runtime);
}

model RollbackCurrentProjectNodeRequest {
  instanceId?: string(name='InstanceId', example='4****89'),
  nodeId?: long(name='NodeId', example='1925'),
  remark?: string(name='Remark'),
}

model RollbackCurrentProjectNodeResponseBody = {
  requestId?: string(name='RequestId', example='ee69a00f-189b-400f-9fd2-af89749fb50f'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model RollbackCurrentProjectNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackCurrentProjectNodeResponseBody(name='body'),
}

async function rollbackCurrentProjectNodeWithOptions(request: RollbackCurrentProjectNodeRequest, runtime: Util.RuntimeOptions): RollbackCurrentProjectNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackCurrentProjectNode',
    version = '2015-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollbackCurrentProjectNode(request: RollbackCurrentProjectNodeRequest): RollbackCurrentProjectNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackCurrentProjectNodeWithOptions(request, runtime);
}

