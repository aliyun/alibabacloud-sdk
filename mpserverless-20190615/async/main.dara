/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'MPServerless';
  @version = '2019-06-15';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCorsDomainRequest {
  domain: string(name='Domain', example='*.example.com:*', minLength=1, maxLength=253, position='Body'),
  spaceId: string(name='SpaceId', example='mp-0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model AddCorsDomainResponseBody = {
  domainId?: string(name='DomainId', example='97e3ff58-01e4-****-b975-1805fec34d77'),
  requestId?: string(name='RequestId', example='74374923-6536-46EB-8639-409384EAE980'),
}

model AddCorsDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddCorsDomainResponseBody(name='body'),
}

async function addCorsDomain(request: AddCorsDomainRequest): AddCorsDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCorsDomain', 'POST', '/', 'json', true, 'form', request);
}

model AddDingtalkOpenPlatformConfigRequest {
  appId: string(name='AppId', example='dingoa7pqicyk3x9t*****', maxLength=64, position='Body'),
  appSecret: string(name='AppSecret', example='1r0ElNPFqLI6qgY08*******************************9TIK3RN_5fk9SEMO', maxLength=200, position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model AddDingtalkOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='44DF7A95-603F-4651-9298-BE1850BEB53F'),
}

model AddDingtalkOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddDingtalkOpenPlatformConfigResponseBody(name='body'),
}

async function addDingtalkOpenPlatformConfig(request: AddDingtalkOpenPlatformConfigRequest): AddDingtalkOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDingtalkOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model AttachWebHostingCertificateRequest {
  certName?: string(name='CertName', example='testCert', position='Body'),
  certType: string(name='CertType', example='upload', position='Body'),
  domain: string(name='Domain', example='www.example.com', position='Body'),
  privateKey: string(name='PrivateKey', example='-----BEGIN RSA PRIVATE KEY----- ...... -----END RSA PRIVATE KEY-----', position='Body'),
  serverCertificate: string(name='ServerCertificate', example='-----BEGIN CERTIFICATE-----  ...... -----END CERTIFICATE-----', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model AttachWebHostingCertificateResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='CEF9831B-A6D2-4485-9CAD-1B8FBC8B****'),
}

model AttachWebHostingCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: AttachWebHostingCertificateResponseBody(name='body'),
}

async function attachWebHostingCertificate(request: AttachWebHostingCertificateRequest): AttachWebHostingCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachWebHostingCertificate', 'POST', '/', 'json', true, 'form', request);
}

model BatchDeleteWebHostingFilesRequest {
  filePaths: [ string ](name='FilePaths', example='/static/test.png', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model BatchDeleteWebHostingFilesResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****'),
}

model BatchDeleteWebHostingFilesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteWebHostingFilesResponseBody(name='body'),
}

async function batchDeleteWebHostingFiles(request: BatchDeleteWebHostingFilesRequest): BatchDeleteWebHostingFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteWebHostingFiles', 'POST', '/', 'json', true, 'form', request);
}

model BindWebHostingCustomDomainRequest {
  customDomain: string(name='CustomDomain', example='www.example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model BindWebHostingCustomDomainResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='CEF9831B-A6D2-4485-9CAD-1B8FBC8BC6F7'),
}

model BindWebHostingCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BindWebHostingCustomDomainResponseBody(name='body'),
}

async function bindWebHostingCustomDomain(request: BindWebHostingCustomDomainRequest): BindWebHostingCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindWebHostingCustomDomain', 'POST', '/', 'json', true, 'form', request);
}

model CheckMpServerlessRoleExistsRequest {
  roleName: string(name='RoleName', example='AliyunServiceRoleForMPServerless', position='Query'),
}

model CheckMpServerlessRoleExistsResponseBody = {
  exists?: boolean(name='Exists', example='true'),
  requestId?: string(name='RequestId', example='F340DF8D-7125-49B7-AC48-7F5C8DB382CB'),
}

model CheckMpServerlessRoleExistsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckMpServerlessRoleExistsResponseBody(name='body'),
}

async function checkMpServerlessRoleExists(request: CheckMpServerlessRoleExistsRequest): CheckMpServerlessRoleExistsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMpServerlessRoleExists', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBExportTaskRequest {
  collection: string(name='Collection', example='article', position='Body'),
  fields?: string(name='Fields', example='name,content', position='Body'),
  fileType: string(name='FileType', example='CSV', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model CreateDBExportTaskResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  taskId?: string(name='TaskId', example='0150006d-ab93-4920-a63e-c011dea1e089'),
}

model CreateDBExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBExportTaskResponseBody(name='body'),
}

async function createDBExportTask(request: CreateDBExportTaskRequest): CreateDBExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBExportTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateDBImportTaskRequest {
  collection: string(name='Collection', example='test', position='Body'),
  fileType: string(name='FileType', example='CSV', position='Body'),
  mode?: string(name='Mode', example='UPSERT', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model CreateDBImportTaskResponseBody = {
  accessKeyId?: string(name='AccessKeyId', example='LTAIupaslTlU*****'),
  expireTime?: string(name='ExpireTime', example='2020-07-20T05:32:03Z'),
  fileKey?: string(name='FileKey', example='mongo/import/0e16bb12-14af-4635-b24c-5ac1a9*****/20200720130203_973820af-966d-42ec-9fab-17dfe4a******.csv'),
  host?: string(name='Host', example='https://mps-zjk-share.oss-cn-zhangjiakou.aliyuncs.com'),
  policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjjoiMjAyMC0wNy0yMFQwNTozMjowMy40NDVaIiwiY29uZGl0aW9ucyI*****Y29udGVudC1sZW5ndoiMjAyMC=='),
  requestId?: string(name='RequestId', example='692DCFEF-46DD-4EBB-B1DB-338E687DC260'),
  signature?: string(name='Signature', example='*****luWDvbmhqwwy9pm/Mso++pk='),
  taskId?: string(name='TaskId', example='973820af-966d-42ec-9fab-17dfe4a*****'),
}

model CreateDBImportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBImportTaskResponseBody(name='body'),
}

async function createDBImportTask(request: CreateDBImportTaskRequest): CreateDBImportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBImportTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateDBRestoreTaskRequest {
  backupId: string(name='BackupId', example='20201118114602_6bd7c996-f620-4026-ae24-418eddf78671', position='Body'),
  newCollections: string(name='NewCollections', example='newColl1,newColl2', position='Body'),
  originCollections: string(name='OriginCollections', example='coll1,coll2', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model CreateDBRestoreTaskResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  taskId?: string(name='TaskId', example='0150006d-ab93-4920-a63e-c011dea1e089'),
}

model CreateDBRestoreTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBRestoreTaskResponseBody(name='body'),
}

async function createDBRestoreTask(request: CreateDBRestoreTaskRequest): CreateDBRestoreTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBRestoreTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateFunctionRequest {
  desc?: string(name='Desc', maxLength=128, position='Body'),
  memory?: int32(name='Memory', example='512', position='Body'),
  name: string(name='Name', example='demoFunction', position='Body'),
  runtime?: string(name='Runtime', example='nodejs12', position='Body'),
  spaceId: string(name='SpaceId', example='226e5213-697c-4a52-b4ff-xxxxx', position='Body'),
  timeout?: int32(name='Timeout', example='5', position='Body'),
}

model CreateFunctionResponseBody = {
  createdAt?: string(name='CreatedAt', example='2021-11-18T08:02:33.954Z'),
  desc?: string(name='Desc'),
  modifiedAt?: string(name='ModifiedAt', example='021-11-18T08:02:33.954Z'),
  name?: string(name='Name', example='demoFunction'),
  requestId?: string(name='RequestId', example='E63E7F4F-8538-5B0E-8712-78F92B6DCB9C'),
  spec?: {
    instanceConcurrency?: string(name='InstanceConcurrency', example='1'),
    memory?: string(name='Memory', example='512 MB'),
    runtime?: string(name='Runtime', example='Node.js 12'),
    timeout?: string(name='Timeout', example='5s'),
  }(name='Spec'),
}

model CreateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionResponseBody(name='body'),
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFunction', 'POST', '/', 'json', true, 'form', request);
}

model CreateFunctionDeploymentRequest {
  name: string(name='Name', example='demoFunction', position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-8514-xxxx', position='Body'),
}

model CreateFunctionDeploymentResponseBody = {
  deploymentId?: string(name='DeploymentId', example='dep-5e49fd471c9d4451c33bdd06'),
  requestId?: string(name='RequestId', example='9D653EC3-8F53-4307-9B1C-52F5922384A6'),
  uploadSignedUrl?: string(name='UploadSignedUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/afc0e1c9d446fxxxxx-v2.zip?OSSAccessKeyId=LTAIKCq5x****kK6&Expires=1561425220&Signature=xEuiAgUMShQ4v8fYIl3FM8Jp3MA%3D'),
}

model CreateFunctionDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionDeploymentResponseBody(name='body'),
}

async function createFunctionDeployment(request: CreateFunctionDeploymentRequest): CreateFunctionDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFunctionDeployment', 'POST', '/', 'json', true, 'form', request);
}

model CreateSpaceRequest {
  desc?: string(name='Desc', example='description', maxLength=128, position='Body'),
  name?: string(name='Name', example='space1', position='Body'),
  workspaceId?: long(name='WorkspaceId', example='211975XXXX', minimum=1, maximum=9223372036854775807, position='Body'),
}

model CreateSpaceResponseBody = {
  requestId?: string(name='RequestId', example='C44BB160-2F2D-5E34-BC08-B8C8B6D7702F'),
  spaceId?: string(name='SpaceId', example='fd46b91a-4591-49b6-abcd-59e9733*****'),
}

model CreateSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSpaceResponseBody(name='body'),
}

async function createSpace(request: CreateSpaceRequest): CreateSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSpace', 'POST', '/', 'json', true, 'form', request);
}

model CreateSpaceWithOrderRequest {
  desc?: string(name='Desc', maxLength=128, position='Body'),
  name: string(name='Name', example='test', position='Body'),
  packageVersion?: string(name='PackageVersion', example='professional', position='Body'),
  period?: int32(name='Period', example='1', position='Body'),
  subscriptionType: string(name='SubscriptionType', example='Subscription', position='Body'),
  useCoupon?: boolean(name='UseCoupon', example='true', position='Body'),
}

model CreateSpaceWithOrderResponseBody = {
  instanceId?: string(name='InstanceId', example='emas_EmasServerlessPost_public_cn-n8m2y7l****'),
  orderId?: string(name='OrderId', example='222082414200***'),
  requestId?: string(name='RequestId', example='C71E8AEA-D1C3-****-956F-C261B7A43E92'),
  spaceId?: string(name='SpaceId', example='mp-1140a548-****-44ac-8bfb-a21c073f0d1a'),
}

model CreateSpaceWithOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSpaceWithOrderResponseBody(name='body'),
}

async function createSpaceWithOrder(request: CreateSpaceWithOrderRequest): CreateSpaceWithOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSpaceWithOrder', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntOpenPlatformConfigRequest {
  appId: string(name='AppId', example='201909116717****', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DeleteAntOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='2540E86F-2CD4-44AC-A7AB-59CAF40C225D'),
}

model DeleteAntOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntOpenPlatformConfigResponseBody(name='body'),
}

async function deleteAntOpenPlatformConfig(request: DeleteAntOpenPlatformConfigRequest): DeleteAntOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCorsDomainRequest {
  domainId: string(name='DomainId', example='97e3ff58-01e4-****-b975-1805fec34d77', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DeleteCorsDomainResponseBody = {
  requestId?: string(name='RequestId', example='091A8BC0-8A73-4035-9441-922BF969631D'),
}

model DeleteCorsDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCorsDomainResponseBody(name='body'),
}

async function deleteCorsDomain(request: DeleteCorsDomainRequest): DeleteCorsDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCorsDomain', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDBCollectionRequest {
  body: string(name='Body', example='{"command": "drop", "collection": "table1"}', position='Body'),
  spaceId: string(name='SpaceId', example='92e26ea9-6450-4b40-9c20-xxxx', position='Body'),
}

model DeleteDBCollectionResponseBody = {
  requestId?: string(name='RequestId', example='20C1EDFE-6355-4344-B20A-A7A5A1581026'),
}

model DeleteDBCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBCollectionResponseBody(name='body'),
}

async function deleteDBCollection(request: DeleteDBCollectionRequest): DeleteDBCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCollection', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDingtalkOpenPlatformConfigRequest {
  appId: string(name='AppId', example='dingoa7pqicyk3x9t*****', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DeleteDingtalkOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model DeleteDingtalkOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDingtalkOpenPlatformConfigResponseBody(name='body'),
}

async function deleteDingtalkOpenPlatformConfig(request: DeleteDingtalkOpenPlatformConfigRequest): DeleteDingtalkOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDingtalkOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFileRequest {
  id: string(name='Id', example='c568f23d-a46f-4866-****-142e5eb3e174', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DeleteFileResponseBody = {
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFile', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFunctionRequest {
  name: string(name='Name', example='demoFunction', position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-****-8a88d205e2b8', position='Body'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId', example='9D653EC3-8F53-4307-9B1C-52F5922384A6'),
}

model DeleteFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFunctionResponseBody(name='body'),
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFunction', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSpaceRequest {
  spaceId: string(name='SpaceId', example='92e26ea9-6450-4b40-9c20-xxxx', position='Body'),
}

model DeleteSpaceResponseBody = {
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
}

model DeleteSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpaceResponseBody(name='body'),
}

async function deleteSpace(request: DeleteSpaceRequest): DeleteSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWebHostingCertificateRequest {
  domain: string(name='Domain', example='www.example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model DeleteWebHostingCertificateResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='D85CAE0D-5B1F-4A56-B776-DEEA2B232E9F'),
}

model DeleteWebHostingCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebHostingCertificateResponseBody(name='body'),
}

async function deleteWebHostingCertificate(request: DeleteWebHostingCertificateRequest): DeleteWebHostingCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebHostingCertificate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWebHostingFileRequest {
  filePath: string(name='FilePath', example='/error.jpg', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model DeleteWebHostingFileResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****'),
}

model DeleteWebHostingFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebHostingFileResponseBody(name='body'),
}

async function deleteWebHostingFile(request: DeleteWebHostingFileRequest): DeleteWebHostingFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebHostingFile', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWechatOpenPlatformConfigRequest {
  appId: string(name='AppId', example='123456', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DeleteWechatOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model DeleteWechatOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWechatOpenPlatformConfigResponseBody(name='body'),
}

async function deleteWechatOpenPlatformConfig(request: DeleteWechatOpenPlatformConfigRequest): DeleteWechatOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWechatOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeployFunctionRequest {
  deploymentId: string(name='DeploymentId', example='dep-5e49fd471c9d4451c33bdd06', position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-****-8a88d205e2b8xxxx', position='Body'),
}

model DeployFunctionResponseBody = {
  requestId?: string(name='RequestId', example='9D653EC3-8F53-4307-9B1C-52F5922384A6'),
}

model DeployFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DeployFunctionResponseBody(name='body'),
}

async function deployFunction(request: DeployFunctionRequest): DeployFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployFunction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFCOpenStatusRequest {
}

model DescribeFCOpenStatusResponseBody = {
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-xxxx'),
  status?: string(name='Status', example='Opened'),
}

model DescribeFCOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFCOpenStatusResponseBody(name='body'),
}

async function describeFCOpenStatus(request: DescribeFCOpenStatusRequest): DescribeFCOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFCOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFileUploadSignedUrlRequest {
  contentType: string(name='ContentType', example='png', position='Body'),
  fileId?: string(name='FileId', position='Body'),
  filename: string(name='Filename', example='wlop29.jpg', position='Body'),
  size: long(name='Size', example='41836', position='Body'),
  spaceId: string(name='SpaceId', example='mp-0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DescribeFileUploadSignedUrlResponseBody = {
  id?: string(name='Id', example='2fada31e-8fa5-****-b595-9698cd6b5f06'),
  ossCallbackUrl?: string(name='OssCallbackUrl', example='https://api.next.bspapp.com/oss_upload_callback'),
  requestId?: string(name='RequestId', example='E9A50E1B-5ECE-42D4-B261-C07D1BBE68DE'),
  signUrl?: string(name='SignUrl', example='https://bsppub.oss-cn-shanghai.aliyuncs.com/FBPSBVMO-myspace/41552d60-52de-xxx-a713-43e879b0717a.JPG?OSSAccessKeyId=LTAIk****dtFueLA&Expires=1582152512&Signature=sek1B0Xm2r***tNvfX9tX%2BBJxA%3D'),
}

model DescribeFileUploadSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileUploadSignedUrlResponseBody(name='body'),
}

async function describeFileUploadSignedUrl(request: DescribeFileUploadSignedUrlRequest): DescribeFileUploadSignedUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFileUploadSignedUrl', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFunctionRequest {
  name: string(name='Name', example='demoFunction', position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-8514-xxxx', position='Body'),
}

model DescribeFunctionResponseBody = {
  deployment?: {
    createdAt?: string(name='CreatedAt', example='2019-06-11T10:51:19Z'),
    deploymentId?: string(name='DeploymentId', example='dep-62020d3bea44fd4608118233'),
    downloadSignedUrl?: string(name='DownloadSignedUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/xxxx-v2.zip?OSSAccessKeyId=LT*********1DkK6&Expires=1561425220&Signature=xEuiAgUMShQ4v8fYIl3FM8Jp3MA%3D'),
    modifiedAt?: string(name='ModifiedAt', example='2019-06-11T10:51:19Z'),
    versionNo?: string(name='VersionNo', example='2019061110511905080'),
  }(name='Deployment'),
  function?: {
    createdAt?: string(name='CreatedAt', example='2021-12-02T02:40:37Z'),
    desc?: string(name='Desc'),
    httpTriggerPath?: string(name='HttpTriggerPath', example='/http/getWxToken'),
    modifiedAt?: string(name='ModifiedAt', example='2019-06-21T02:22:53Z'),
    name?: string(name='Name', example='demoFunction'),
    spec?: {
      instanceConcurrency?: int32(name='InstanceConcurrency', example='1'),
      memory?: string(name='Memory', example='512'),
      runtime?: string(name='Runtime', example='nodejs12'),
      timeout?: string(name='Timeout', example='5'),
    }(name='Spec'),
    timingTriggerConfig?: string(name='TimingTriggerConfig'),
    timingTriggerUserPayload?: string(name='TimingTriggerUserPayload', example='hello'),
  }(name='Function'),
  requestId?: string(name='RequestId', example='75CE67BE-48E9-52AF-B965-4690270CD53A'),
}

model DescribeFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFunctionResponseBody(name='body'),
}

async function describeFunction(request: DescribeFunctionRequest): DescribeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFunction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeHttpTriggerConfigRequest {
  spaceId: string(name='SpaceId', example='34C45988-2B24-****-A4DC-4D6C952890D8', position='Body'),
}

model DescribeHttpTriggerConfigResponseBody = {
  customDomain?: string(name='CustomDomain', example='abc.example.com'),
  customDomainCertificateInfo?: string(name='CustomDomainCertificateInfo', example='{"notAfter":"2021-09-28T08:21:42Z","notBefore":"2021-06-30T08:21:43Z","subject":"CN=*.example.com"}'),
  customDomainCname?: string(name='CustomDomainCname', example='724d************795a2.custom.bspapp.com'),
  defaultEndpoint?: string(name='DefaultEndpoint', example='724dade5-492f-426b-a5df-ff****0795a2.bspapp.com'),
  enableService?: boolean(name='EnableService', example='true'),
  requestId?: string(name='RequestId', example='4555773F-769B-4960-87E6-16009E5A4844'),
}

model DescribeHttpTriggerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHttpTriggerConfigResponseBody(name='body'),
}

async function describeHttpTriggerConfig(request: DescribeHttpTriggerConfigRequest): DescribeHttpTriggerConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHttpTriggerConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeResourceQuotaRequest {
  spaceId: string(name='SpaceId', example='226e5213-697c-****-b4ff-35a09f8a52de', position='Body'),
}

model DescribeResourceQuotaResponseBody = {
  cloudStorageDataSizeQuota?: double(name='CloudStorageDataSizeQuota', example='10'),
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
  staticWebDataSizeQuota?: double(name='StaticWebDataSizeQuota', example='2'),
}

model DescribeResourceQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceQuotaResponseBody(name='body'),
}

async function describeResourceQuota(request: DescribeResourceQuotaRequest): DescribeResourceQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceQuota', 'POST', '/', 'json', true, 'form', request);
}

model DescribeResourceUsageRequest {
  endTime?: string(name='EndTime', example='2021-10-02T00:00:00Z', position='Body'),
  format?: string(name='Format', example='JSON', position='Body'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, position='Body'),
  pageSize?: long(name='PageSize', example='100', minimum=1, maximum=1000, position='Body'),
  spaceId: string(name='SpaceId', example='226e5213-697c-****-b4ff-35a09f8a52de', position='Body'),
  startTime?: string(name='StartTime', example='2021-10-01T00:00:00Z', position='Body'),
}

model DescribeResourceUsageResponseBody = {
  code?: string(name='Code', example='success'),
  dataList?: [ 
    {
      cloudDB?: {
        dataSize?: long(name='DataSize', example='0'),
        read?: long(name='Read', example='0'),
        write?: long(name='Write', example='0'),
      }(name='CloudDB'),
      cloudFunction?: {
        compute?: long(name='Compute', example='0'),
        count?: long(name='Count', example='0'),
        traffic?: long(name='Traffic', example='0'),
      }(name='CloudFunction'),
      cloudStorage?: {
        dataSize?: long(name='DataSize', example='0'),
        download?: long(name='Download', example='0'),
        traffic?: long(name='Traffic', example='0'),
        upload?: long(name='Upload', example='0'),
      }(name='CloudStorage'),
      endTime?: string(name='EndTime', example='2021-10-01T16:00:00Z'),
      startTime?: string(name='StartTime', example='2021-10-01T15:00:00Z'),
      staticWeb?: {
        dataSize?: long(name='DataSize', example='0'),
        traffic?: long(name='Traffic', example='0'),
      }(name='StaticWeb'),
    }
  ](name='DataList'),
  httpStatusCode: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='SpaceNotExist'),
  paginator?: {
    pageCount?: long(name='PageCount', example='3'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='100'),
    total?: long(name='Total', example='255'),
  }(name='Paginator'),
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
  success?: boolean(name='Success', example='true'),
}

model DescribeResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageResponseBody(name='body'),
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceUsage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServicePolicyRequest {
  collectionName?: string(name='CollectionName', example='test', position='Body'),
  serviceName: string(name='ServiceName', example='db', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model DescribeServicePolicyResponseBody = {
  collectionName?: string(name='CollectionName', example='test'),
  policy?: string(name='Policy', example='{\\".write\\":false,\\".read\\":true}'),
  policyName?: string(name='PolicyName', example='ADMINWRITEONLY'),
  requestId?: string(name='RequestId', example='15F08A3A-DDBC-4199-93CA-343419E81235'),
  serviceName?: string(name='ServiceName', example='db'),
  spaceId?: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f'),
}

model DescribeServicePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServicePolicyResponseBody(name='body'),
}

async function describeServicePolicy(request: DescribeServicePolicyRequest): DescribeServicePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServicePolicy', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSpaceClientConfigRequest {
  detail?: string(name='Detail', example='true', position='Body'),
  spaceId?: string(name='SpaceId', example='226e5213-697c-4a52-b4ff-35a09f8*****', position='Body'),
  workspaceId?: long(name='WorkspaceId', example='211975XXXX', minimum=1, maximum=9223372036854775807, position='Body'),
}

model DescribeSpaceClientConfigResponseBody = {
  apiKey?: string(name='ApiKey', example='0a4gJT0faV*****D4lgQmw=='),
  endpoint?: string(name='Endpoint', example='226e5213-697c-4a52-b4ff-35a09f8*****'),
  fileUploadEndpoint?: string(name='FileUploadEndpoint', example='cocdsfmb-12266946259*****-file.oss-cn-zhangjiakou.aliyuncs.com'),
  name?: string(name='Name', example='myspace'),
  privateKey?: string(name='PrivateKey', example='-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhki******G9w0BAQE7V0sQaj\\n-----END PRIVATE KEY-----'),
  requestId?: string(name='RequestId', example='EA770971-A4A0-4555-9E00-C94A2194E150'),
  spaceId?: string(name='SpaceId', example='226e5213-697c-4a52-b4ff-35a09f8*****'),
}

model DescribeSpaceClientConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpaceClientConfigResponseBody(name='body'),
}

async function describeSpaceClientConfig(request: DescribeSpaceClientConfigRequest): DescribeSpaceClientConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSpaceClientConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSpacesRequest {
  emasWorkspaceId?: long(name='EmasWorkspaceId', example='3449110', position='Body'),
  pageNum?: int32(name='PageNum', example='0', minimum=0, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Body'),
  spaceIds?: [ string ](name='SpaceIds', shrink='simple', position='Body'),
  specCode?: string(name='SpecCode', example='ULTIMATE', position='Body'),
  tenantId?: string(name='TenantId', example='XKHKTPDJ', position='Body'),
}

model DescribeSpacesResponseBody = {
  count?: int32(name='Count', example='10'),
  gmtCreate?: string(name='GmtCreate', example='-'),
  requestId?: string(name='RequestId', example='68B76E59-CC10-5EEC-BCED-73A6C51179BC'),
  spaces?: [ 
    {
      autoRenew?: boolean(name='AutoRenew', example='true'),
      chargeType?: string(name='ChargeType', example='PREPAY'),
      description?: string(name='Description'),
      emasWorkspaceId?: long(name='EmasWorkspaceId', example='3818905'),
      gmtCreate?: string(name='GmtCreate', example='2022-05-19T06:06:05Z'),
      gmtModified?: string(name='GmtModified', example='2022-05-19T06:06:05Z'),
      instanceId?: string(name='InstanceId', example='emas_EmasServerlessPre_public_cn-0ju2pax****'),
      name?: string(name='Name', example='myspace'),
      orderType?: string(name='OrderType', example='BUY'),
      packageEndDate?: string(name='PackageEndDate', example='2022-09-18T16:00:00Z'),
      packageStartDate?: string(name='PackageStartDate', example='2022-06-18T16:00:00Z'),
      packageStatus?: string(name='PackageStatus', example='UPGRADING'),
      renewDuration?: string(name='RenewDuration', example='3'),
      serviceStatus?: string(name='ServiceStatus', example='IN_SERVICE'),
      spaceId?: string(name='SpaceId', example='mp-f215973f-db40-4013-92a8-b09690c7****'),
      specCode?: string(name='SpecCode', example='ENTERPRISE'),
    }
  ](name='Spaces'),
}

model DescribeSpacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpacesResponseBody(name='body'),
}

async function describeSpaces(request: DescribeSpacesRequest): DescribeSpacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSpaces', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWebHostingFileRequest {
  filePath: string(name='FilePath', example='/error.png', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model DescribeWebHostingFileResponseBody = {
  data?: {
    contentType?: string(name='ContentType', example='image/png'),
    eTag?: string(name='ETag', example='test'),
    exists?: boolean(name='Exists', example='true'),
    filePath?: string(name='FilePath', example='/error.png'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1590398956000'),
    signedUrl?: string(name='SignedUrl', example='http://fbpsbvmo-154159039388****-static.oss-cn-zhangjiakou.aliyuncs.com/0e16bb12-14af-4635-b24c-5ac1a9a*****/error.png?Expires=1590460358&OSSAccessKeyId=STS.NUcPHyHQr2xQ6zAe5ybi*****&Signature=b2L4kBEFrA2EZvZbm3B%2FyNSxVeA%3D&security-token=CAISgQJ1q6Ft5B2yfSjIr5bWG%2FLNpY5Thbq6NFzwgTUsbuZ4grfe0Tz2IHBEeXRuA%2B0WsvQ%2Bnm9X6vgelqFZYqRoYGHiUZOjKEbIPUXzDbDasumZsJYm6vT8a0XxZjf%2F2MjNGZabKPrWZvaqbX3diyZ32sGUXD6%2BXlujQ%2Fbr4NwdGbZxZASjaidcD9p7PxZrrNRgVUHcLvGwKBXn8AGyZQhKwlMh1ToiuPzkk5bMukuE1gXAp7VL99irEP%2BNdNJxOZpzadCx0dFte7DJuCwqsEgaqfoo1vEUpWeW5I7CXwcN%2BWePN%2BvF79tuIEpwae0gEqsBtv%2F4mLhxtunSkZQQTrutnEPAOhqAAU49tl4awl%2F0fID3wRpPDCKqg%2BfXifeRRPI2Tr%2Bm4PmK4qPffsI%2F5JXB4JA71uN5TkvMC6LxxTuQnJaTateDrfEDnzyyIVISjvQ7rzt8sxZCnDDfjzx6Lc5TAELuapDjeXK6w%2BWkbhwBTWcjrGAJvdaOA4IodaPZyDlyhO4jt1nv'),
    size?: long(name='Size', example='235628'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='93FC5921-2A54-408B-B360-2E5C93488CF4'),
}

model DescribeWebHostingFileResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebHostingFileResponseBody(name='body'),
}

async function describeWebHostingFile(request: DescribeWebHostingFileRequest): DescribeWebHostingFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebHostingFile', 'POST', '/', 'json', true, 'form', request);
}

model EnableExtensionRequest {
  extensionId: string(name='ExtensionId', example='ext-5d53a4fb1c9d446e2075a2cc', position='Body'),
}

model EnableExtensionResponseBody = {
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model EnableExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableExtensionResponseBody(name='body'),
}

async function enableExtension(request: EnableExtensionRequest): EnableExtensionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableExtension', 'POST', '/', 'json', true, 'form', request);
}

model GetWebHostingCertificateDetailRequest {
  customDomain: string(name='CustomDomain', example='www.example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a7bb9f', position='Body'),
}

model GetWebHostingCertificateDetailResponseBody = {
  data?: {
    certDomainName?: string(name='CertDomainName', example='www.example.com'),
    certExpiredTime?: long(name='CertExpiredTime', example='1621252800000'),
    certLife?: string(name='CertLife', example='1 years'),
    certName?: string(name='CertName', example='test'),
    certType?: string(name='CertType', example='upload'),
    serverCertificateStatus?: string(name='ServerCertificateStatus', example='on'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D85CAE0D-5B1F-4A56-B776-DEEA2B232E9F'),
}

model GetWebHostingCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingCertificateDetailResponseBody(name='body'),
}

async function getWebHostingCertificateDetail(request: GetWebHostingCertificateDetailRequest): GetWebHostingCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWebHostingCertificateDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetWebHostingConfigRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model GetWebHostingConfigResponseBody = {
  data?: {
    allowedIps?: string(name='AllowedIps', example='42.120.72.0/24'),
    defaultDomain?: string(name='DefaultDomain', example='static-0e16bb12-14af-4635-b24c-5ac1a9a*****.bspapp.com'),
    errorPath?: string(name='ErrorPath', example='error.html'),
    historyModePath?: string(name='HistoryModePath', example='/'),
    indexPath?: string(name='IndexPath', example='index.html'),
    spaceId?: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='828A8808-3FC9-418C-893A-5A708CFABB8E'),
}

model GetWebHostingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingConfigResponseBody(name='body'),
}

async function getWebHostingConfig(request: GetWebHostingConfigRequest): GetWebHostingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWebHostingConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetWebHostingDomainVerificationContentRequest {
  domain: string(name='Domain', example='example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model GetWebHostingDomainVerificationContentResponseBody = {
  data?: {
    content?: string(name='Content', example='verify_c28a8e24b4bc9fab22d949cebdb1d7ae'),
    domain?: string(name='Domain', example='example.com'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='74374923-6536-46EB-8639-409384EAE980'),
}

model GetWebHostingDomainVerificationContentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingDomainVerificationContentResponseBody(name='body'),
}

async function getWebHostingDomainVerificationContent(request: GetWebHostingDomainVerificationContentRequest): GetWebHostingDomainVerificationContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWebHostingDomainVerificationContent', 'POST', '/', 'json', true, 'form', request);
}

model GetWebHostingStatusRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model GetWebHostingStatusResponseBody = {
  data?: {
    spaceId?: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****'),
    status?: string(name='Status', example='OPENING'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D8F7FDDC-4EF3-44B9-9452-CFD7A081FB85'),
}

model GetWebHostingStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingStatusResponseBody(name='body'),
}

async function getWebHostingStatus(request: GetWebHostingStatusRequest): GetWebHostingStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWebHostingStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetWebHostingUploadCredentialRequest {
  filePath: string(name='FilePath', example='/', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model GetWebHostingUploadCredentialResponseBody = {
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='STS.NUcPHyHQr2xQ6zAe5ybi*****'),
    endpoint?: string(name='Endpoint', example='fbpsbvmo-154159039388***-static.oss-cn-zhangjiakou.aliyuncs.com'),
    expiredTime?: long(name='ExpiredTime', example='1590460358'),
    filePath?: string(name='FilePath', example='/'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAyMC0wNS0yNlQwNjozMjoxOC43NTZaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsNTI0Mjg4MDBdLHsia2V5IjoiMGUxNmJiMTItMTRhZi00NjM1LWIyNGMtNWFjMWE5YTdiYjlmL2Zvcm1hdC5qc29uIn1dfQ=='),
    securityToken?: string(name='SecurityToken', example='CAISgQJ1q6Ft5B2yfSjIr5bWG%2FLNpY5Thbq6NFzwgTUsbuZ4grfe0Tz2IHBEeXRuA%2B0WsvQ%2Bnm9X6vgelqFZYqRoYGHiUZOjKEbIPUXzDbDasumZsJYm6vT8a0XxZjf%2F2MjNGZabKPrWZvaqbX3diyZ32sGUXD6%2BXlujQ%2Fbr4NwdGbZxZASjaidcD9p7PxZrrNRgVUHcLvGwKBXn8AGyZQhKwlMh1ToiuPzkk5bMukuE1gXAp7VL99irEP%2BNdNJxOZpzadCx0dFte7DJuCwqsEgaqfoo1vEUpWeW5I7CXwcN%2BWePN%2BvF79tuIEpwae0gEqsBtv%2F4mLhxtunSkZQQTrutnEPAOhqAAU49tl4awl%2F0fID3wRpPDCKqg%2BfXifeRRPI2Tr%2Bm4PmK4qPffsI%2F5JXB4JA71uN5TkvMC6LxxTuQnJaTateDrfEDnzyyIVISjvQ7rzt8sxZCnDDfjzx6Lc5TAELuapDjeXK6w%2BWkbhwBTWcjrGAJvdaOA4IodaPZyDlyhO4jt1nv'),
    signature?: string(name='Signature', example='w7ke9GsiFjb2bR7bQNOOTk4nlbA'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='93FC5921-2A54-408B-B360-2E5C93488CF4'),
}

model GetWebHostingUploadCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingUploadCredentialResponseBody(name='body'),
}

async function getWebHostingUploadCredential(request: GetWebHostingUploadCredentialRequest): GetWebHostingUploadCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWebHostingUploadCredential', 'POST', '/', 'json', true, 'form', request);
}

model ListAvailableCertificatesRequest {
  domain: string(name='Domain', example='www.example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model ListAvailableCertificatesResponseBody = {
  data?: [ 
    {
      id?: string(name='Id', example='3969858'),
      name?: string(name='Name', example='testCert'),
      statusCode?: string(name='StatusCode', example='ISSUED'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='D85CAE0D-5B1F-4A56-B776-DEEA2B232E9F'),
}

model ListAvailableCertificatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAvailableCertificatesResponseBody(name='body'),
}

async function listAvailableCertificates(request: ListAvailableCertificatesRequest): ListAvailableCertificatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableCertificates', 'POST', '/', 'json', true, 'form', request);
}

model ListCorsDomainsRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model ListCorsDomainsResponseBody = {
  domains?: [ 
    {
      domain?: string(name='Domain', example='example.com'),
      domainId?: string(name='DomainId', example='97e3ff58-01e4-****-b975-1805fec34d77'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId', example='ED81670E-570A-481C-A50D-6B0EAA823BB1'),
}

model ListCorsDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorsDomainsResponseBody(name='body'),
}

async function listCorsDomains(request: ListCorsDomainsRequest): ListCorsDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCorsDomains', 'POST', '/', 'json', true, 'form', request);
}

model ListDingtalkOpenPlatformConfigsRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model ListDingtalkOpenPlatformConfigsResponseBody = {
  configs?: [ 
    {
      appId?: string(name='AppId', example='dingoa7pqicyk3x9******'),
      appSecret?: string(name='AppSecret', example='1r0ElNPFqLI6qgY08*******************************9TIK3RN_5fk9SEMO'),
      createTime?: string(name='CreateTime', example='2020-01-17T03:04:46Z'),
      updateTime?: string(name='UpdateTime', example='2020-01-17T03:04:46Z'),
    }
  ](name='Configs'),
  requestId?: string(name='RequestId', example='D8A5FF68-2C8A-46D0-A11C-FA034F4F475F'),
}

model ListDingtalkOpenPlatformConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDingtalkOpenPlatformConfigsResponseBody(name='body'),
}

async function listDingtalkOpenPlatformConfigs(request: ListDingtalkOpenPlatformConfigsRequest): ListDingtalkOpenPlatformConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDingtalkOpenPlatformConfigs', 'POST', '/', 'json', true, 'form', request);
}

model ListExtensionsRequest {
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
}

model ListExtensionsResponseBody = {
  extensions?: [ 
    {
      enabled?: string(name='Enabled', example='true'),
      extensionDesc?: string(name='ExtensionDesc'),
      extensionDocumentationLink?: string(name='ExtensionDocumentationLink', example='https://help.aliyun.com/document_detail/137586.html'),
      extensionId?: string(name='ExtensionId', example='ext-5d53a4fb1c9d446e2075a2cc'),
      extensionName?: string(name='ExtensionName'),
    }
  ](name='Extensions'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DD0F8BC9-516F-4AEF-8D95-D290C2296D78'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListExtensionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListExtensionsResponseBody(name='body'),
}

async function listExtensions(request: ListExtensionsRequest): ListExtensionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExtensions', 'POST', '/', 'json', true, 'form', request);
}

model ListFileRequest {
  fileId?: string(name='FileId', example='id1', position='Body'),
  keyword?: string(name='Keyword', position='Body'),
  mode?: string(name='Mode', position='Body'),
  nextToken?: string(name='NextToken', example='CAESBgoEIgIIABgAIrQBCrEBA6wAAAAxTDdmZmZmZmZmZjg5OWJlMzguUzZkNzAyZDY2Mz***', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  prefix?: string(name='Prefix', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-xxxx-5ac1a9a7bb9f', position='Body'),
}

model ListFileResponseBody = {
  dataList?: [ 
    {
      gmtCreate?: string(name='GmtCreate', example='2020-01-16T05:45:33.000Z'),
      gmtModified?: string(name='GmtModified', example='2020-01-16T05:45:33.000Z'),
      id?: string(name='Id', example='c568f23d-a46f-4866-xxxx-142e5eb3e174'),
      name?: string(name='Name', example='1579153532001.JPG'),
      size?: int32(name='Size', example='1000'),
      type?: string(name='Type', example='JPG'),
      url?: string(name='Url', example='https://fbpxxx.cdn.bspapp.com/FBPSBVMO-myspace/68dbd670-3823-11ea-bfb9-xxxx.JPG'),
    }
  ](name='DataList'),
  paginator?: {
    nextToken?: string(name='NextToken', example='eyJhY2NvdW50IjoiMTE2MTQwNTMxMDE0OTY2OCIsImV2ZW50SWQiOiIzMkI3QTE1Mi05NUJFLTUyNkMtQjEyNC00RUYxRDk2RDM4QkEiLCJsb2dJZCI6IjE0LTExNjE0MDUzMTAxNDk2NjgiLCJ0aW1lIjoxNjM1MjEzMzk0MDAwfQ'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Paginator'),
  requestId?: string(name='RequestId', example='FE88BEC8-8F83-408A-9ED3-771C510C705F'),
}

model ListFileResponse = {
  headers: map[string]string(name='headers'),
  body: ListFileResponseBody(name='body'),
}

async function listFile(request: ListFileRequest): ListFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFile', 'POST', '/', 'json', true, 'form', request);
}

model ListFunctionRequest {
  filterBy?: string(name='FilterBy', example='demo', position='Body'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, maximum=100, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-****-8a88d205e2b8', position='Body'),
}

model ListFunctionResponseBody = {
  dataList?: [ 
    {
      createdAt?: string(name='CreatedAt', example='2019-06-21T02:22:55.996Z'),
      desc?: string(name='Desc', example='test'),
      httpTriggerPath?: string(name='HttpTriggerPath', example='/http/hello'),
      modifiedAt?: string(name='ModifiedAt', example='2019-06-21T02:22:55.996Z'),
      name?: string(name='Name', example='demoFunction'),
      spec?: {
        instanceConcurrency?: int32(name='InstanceConcurrency', example='1'),
        memory?: string(name='Memory', example='128 MB'),
        runtime?: string(name='Runtime', example='Node.js 8'),
        timeout?: string(name='Timeout', example='5s'),
      }(name='Spec'),
      timingTriggerConfig?: string(name='TimingTriggerConfig', example='cron:0 0 * * * *'),
    }
  ](name='DataList'),
  paginator?: {
    pageCount?: int32(name='PageCount', example='1'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
  }(name='Paginator'),
  requestId?: string(name='RequestId', example='D388FE2B-61D5-4A76-A8F0-xxxx'),
}

model ListFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionResponseBody(name='body'),
}

async function listFunction(request: ListFunctionRequest): ListFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunction', 'POST', '/', 'json', true, 'form', request);
}

model ListFunctionDeploymentRequest {
  name: string(name='Name', example='demoFunction', position='Body'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, maximum=9223372036854775807, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-****-8a88d205e2b8', position='Body'),
  status?: string(name='Status', example='DEPLOY_SUCCESS', position='Body'),
}

model ListFunctionDeploymentResponseBody = {
  dataList?: [ 
    {
      createdAt?: string(name='CreatedAt', example='2019-06-21T02:22:53.309Z'),
      deploymentId?: string(name='DeploymentId', example='dep-5e49fd471c9d4451c33bdd06'),
      downloadSignedUrl?: string(name='DownloadSignedUrl', example='http://function-apiserver-test.oss-cn-shanghai.aliyuncs.com/5d0afc0e1c9d44*****32c30a-v5.zip?OSSAccessKeyId=LTA************&Expires=1561425220&Signature=SAgUkZFK54eAbU6TLT9zMZ7S8eg%3D'),
      modifiedAt?: string(name='ModifiedAt', example='2019-06-21T02:22:55.996Z'),
      status?: {
        label?: string(name='Label'),
        status?: string(name='Status', example='DEPLOY_SUCCESS'),
      }(name='Status'),
      versionNo?: string(name='VersionNo', example='2019061110511930090'),
    }
  ](name='DataList'),
  paginator?: {
    pageCount?: int32(name='PageCount', example='1'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
  }(name='Paginator'),
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
}

model ListFunctionDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionDeploymentResponseBody(name='body'),
}

async function listFunctionDeployment(request: ListFunctionDeploymentRequest): ListFunctionDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctionDeployment', 'POST', '/', 'json', true, 'form', request);
}

model ListFunctionLogRequest {
  fromDate?: long(name='FromDate', example='1560134212326', position='Body'),
  logRequestId?: string(name='LogRequestId', example='0a206a521561344642018387523432', position='Body'),
  name: string(name='Name', example='demoFunction', position='Body'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-****-4cfa-8514-8a88d205e2b8', position='Body'),
  status?: string(name='Status', example='SUCCESS', position='Body'),
  toDate?: long(name='ToDate', example='1560134212326', position='Body'),
}

model ListFunctionLogResponseBody = {
  dataList?: [ 
    {
      contents?: [ string ](name='Contents'),
      functionName?: string(name='FunctionName', example='demoFunction'),
      levels?: [ string ](name='Levels'),
      requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
      spaceId?: string(name='SpaceId', example='dece4ea0-d432-4cfa-8514-8a88d205e2b8'),
      status?: string(name='Status', example='SUCCESS'),
      timestamps?: [ string ](name='Timestamps'),
    }
  ](name='DataList'),
  paginator?: {
    pageCount?: int32(name='PageCount', example='1'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
  }(name='Paginator'),
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
}

model ListFunctionLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionLogResponseBody(name='body'),
}

async function listFunctionLog(request: ListFunctionLogRequest): ListFunctionLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctionLog', 'POST', '/', 'json', true, 'form', request);
}

model ListOpenPlatformConfigRequest {
  platform: string(name='Platform', example='Alipay', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model ListOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='2540E86F-2CD4-44AC-A7AB-59CAF40C225D'),
  secretList?: [ 
    {
      appCert?: string(name='AppCert', example='-----BEGIN CERTIFICATE----- MIIEwTCCA6mgAwIBAgIQICAJGbUNoqdPr25qpPU7+ -----END CERTIFICATE-----'),
      appId?: string(name='AppId', example='201909116717****'),
      appSecret?: string(name='AppSecret', example='1r0ElNPFqLI6qgY08*******************************9TIK3RN_5fk9SEMO'),
      platform?: string(name='Platform', example='Alipay'),
      privateKey?: string(name='PrivateKey', example='MIIEvgIBADANBgkqhkiG9w0BAQEFAAS'),
      publicCert?: string(name='PublicCert', example='-----BEGIN CERTIFICATE----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQ -----END CERTIFICATE-----'),
      publicKey?: string(name='PublicKey', example='MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ'),
      rootCert?: string(name='RootCert', example='-----BEGIN CERTIFICATE----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQ -----END CERTIFICATE-----'),
      signMode?: string(name='SignMode', example='CERT'),
      spaceId?: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f'),
    }
  ](name='SecretList'),
}

model ListOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenPlatformConfigResponseBody(name='body'),
}

async function listOpenPlatformConfig(request: ListOpenPlatformConfigRequest): ListOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model ListSpaceRequest {
  emasWorkspaceId?: string(name='EmasWorkspaceId', example='3821658', position='Body'),
  pageNum?: int32(name='PageNum', example='0', minimum=0, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Body'),
  spaceIds?: [ string ](name='SpaceIds', shrink='simple', position='Body'),
}

model ListSpaceResponseBody = {
  count?: int32(name='Count', example='23'),
  gmtCreate?: string(name='GmtCreate'),
  requestId?: string(name='RequestId', example='B314EDAD-FFCA-536D-BA9C-08B42F7C2DDE'),
  spaces?: [ 
    {
      desc?: string(name='Desc'),
      gmtCreate?: long(name='GmtCreate', example='1582018007000'),
      gmtLastAccess?: long(name='GmtLastAccess', example='1582018007000'),
      name?: string(name='Name', example='myspace'),
      spaceId?: string(name='SpaceId', example='368ef42a-763f-0000-acc2-8aa9564c****'),
      status?: string(name='Status', example='IN_SERVICE'),
    }
  ](name='Spaces'),
}

model ListSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: ListSpaceResponseBody(name='body'),
}

async function listSpace(request: ListSpaceRequest): ListSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSpace', 'POST', '/', 'json', true, 'form', request);
}

model ListWebHostingCustomDomainsRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model ListWebHostingCustomDomainsResponseBody = {
  data?: [ 
    {
      accessControlAllowOrigin?: string(name='AccessControlAllowOrigin', example='https://*.example.com, https://*.example.org'),
      cname?: string(name='Cname', example='www.test.com.w.kunlungr.com'),
      createTime?: long(name='CreateTime', example='1590470646000'),
      description?: string(name='Description'),
      domain?: string(name='Domain', example='www.test.com'),
      enableCors?: boolean(name='EnableCors', example='true'),
      forceRedirectType?: string(name='ForceRedirectType', example='HTTPS_FORCE'),
      sslProtocol?: string(name='SslProtocol', example='off'),
      status?: string(name='Status', example='online'),
      updateTime?: long(name='UpdateTime', example='1590470646143'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='93FC5921-2A54-408B-B360-2E5C93488CF4'),
}

model ListWebHostingCustomDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWebHostingCustomDomainsResponseBody(name='body'),
}

async function listWebHostingCustomDomains(request: ListWebHostingCustomDomainsRequest): ListWebHostingCustomDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWebHostingCustomDomains', 'POST', '/', 'json', true, 'form', request);
}

model ListWebHostingFilesRequest {
  marker?: string(name='Marker', example='0e16bb12-14af-4635-b24c-5ac1a9a*****/test/error1.png', position='Body'),
  pageSize?: int32(name='PageSize', example='100', minimum=1, maximum=500, position='Body'),
  prefix: string(name='Prefix', example='/', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model ListWebHostingFilesResponseBody = {
  data?: {
    count?: int32(name='Count', example='50'),
    nextMarker?: string(name='NextMarker', example='0e16bb12-14af-4635-b24c-5ac1a9a*****/test/error1.png'),
    webHostingFiles?: [ 
      {
        contentType?: string(name='ContentType', example='image/png'),
        eTag?: string(name='ETag', example='test'),
        filePath?: string(name='FilePath', example='error/error.jpg'),
        lastModifiedTime?: long(name='LastModifiedTime', example='1590398956000'),
        signedUrl?: string(name='SignedUrl', example='http://fbpsbvmo-15415903938*****-static.oss-cn-zhangjiakou.aliyuncs.com/0e16bb12-14af-4635-b24c-5ac1a9a*****/test/error.jpg?Expires=1590462873&OSSAccessKeyId=STS.NT9oaFvbRzj8vSViJL2y*****&Signature=pSMbsZUZGwfZEcvT9R7VZPMp%2BVA%3D&security-token=CAISgQJ1q6Ft5B2yfSjIr5eMJNvym71zzajTdHXnjUoZPvYVjIHgpjz2IHBEeXRuA%2B0WsvQ%2Bnm9X6vgelqFZYqRoYGHiUZOgBG3HPUXzDbDasumZsJYm6vT8a0XxZjf%2F2MjNGZabKPrWZvaqbX3diyZ32sGUXD6%2BXlujQ%2Fbr4NwdGbZxZASjaidcD9p7PxZrrNRgVUHcLvGwKBXn8AGyZQhKwlMh1ToiuPzkk5bMukuE1gXAp7VL99irEP%2BNdNJxOZpzadCx0dFte7DJuCwqsEgaqfoo1vEUpWeW5I7CXwcN%2BWePN%2BvF79tuIEpwae0gEqsBtv%2F4mLhxtunSkZQQTrutnEPAOhqAAZ6L6gVhZYEK78ZBsQq1hP9nvtEGENelJYiTPWAHmB1mDutOaEzgSpwVMaP3FWpMTy6KgBKMox1NJLUZJK23NlJIlMIJ8lVyCQOG4Ig7oTXTbFc0PQMShK%2FeQIQ2WvZ2x%2F%2FZdgaZIeQR4WnawsWF%2BYC4ScTig0wYTuaLx7pH2WHJ'),
        size?: long(name='Size', example='235628'),
      }
    ](name='WebHostingFiles'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='93FC5921-2A54-408B-B360-2E5C93488CF4'),
}

model ListWebHostingFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWebHostingFilesResponseBody(name='body'),
}

async function listWebHostingFiles(request: ListWebHostingFilesRequest): ListWebHostingFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWebHostingFiles', 'POST', '/', 'json', true, 'form', request);
}

model ModifyWebHostingConfigRequest {
  allowedIps?: string(name='AllowedIps', example='42.120.72.0/24', position='Body'),
  errorPath?: string(name='ErrorPath', example='error.html', position='Body'),
  historyModePath?: string(name='HistoryModePath', example='/', position='Body'),
  indexPath: string(name='IndexPath', example='index.html', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model ModifyWebHostingConfigResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='074C8CF9-E7F8-436D-A546-4E5876D0F800'),
}

model ModifyWebHostingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebHostingConfigResponseBody(name='body'),
}

async function modifyWebHostingConfig(request: ModifyWebHostingConfigRequest): ModifyWebHostingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebHostingConfig', 'POST', '/', 'json', true, 'form', request);
}

model OpenServiceRequest {
  serviceName: string(name='ServiceName', example='CLOUD_FUNCTION', position='Body'),
  spaceId: string(name='SpaceId', example='226e5213-697c-4a52-b4ff-xxxxx', position='Body'),
}

model OpenServiceResponseBody = {
  requestId?: string(name='RequestId', example='E63E7F4F-8538-5B0E-8712-78F92B6DCB9C'),
}

model OpenServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenServiceResponseBody(name='body'),
}

async function openService(request: OpenServiceRequest): OpenServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenService', 'POST', '/', 'json', true, 'form', request);
}

model OpenWebHostingServiceRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model OpenWebHostingServiceResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='1819B1E4-3540-47ED-8E5A-A252C926D81D'),
}

model OpenWebHostingServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenWebHostingServiceResponseBody(name='body'),
}

async function openWebHostingService(request: OpenWebHostingServiceRequest): OpenWebHostingServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenWebHostingService', 'POST', '/', 'json', true, 'form', request);
}

model QueryDBBackupCollectionsRequest {
  backupId: string(name='BackupId', example='20201118114602_6bd7c996-f620-4026-ae24-418eddf78671', position='Body'),
  spaceId: string(name='SpaceId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E', position='Body'),
}

model QueryDBBackupCollectionsResponseBody = {
  collections?: [ string ](name='Collections'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model QueryDBBackupCollectionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBBackupCollectionsResponseBody(name='body'),
}

async function queryDBBackupCollections(request: QueryDBBackupCollectionsRequest): QueryDBBackupCollectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDBBackupCollections', 'POST', '/', 'json', true, 'form', request);
}

model QueryDBBackupDumpTimesRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model QueryDBBackupDumpTimesResponseBody = {
  backupDumpTimes?: [ 
    {
      backupId?: string(name='BackupId', example='20201118114602_6bd7c996-f620-4026-ae24-418eddf78671'),
      dumpTime?: string(name='DumpTime', example='2020-11-18T03:46:02Z'),
    }
  ](name='BackupDumpTimes'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model QueryDBBackupDumpTimesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBBackupDumpTimesResponseBody(name='body'),
}

async function queryDBBackupDumpTimes(request: QueryDBBackupDumpTimesRequest): QueryDBBackupDumpTimesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDBBackupDumpTimes', 'POST', '/', 'json', true, 'form', request);
}

model QueryDBExportTaskStatusRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9*****', position='Body'),
  taskId: string(name='TaskId', example='0150006d-ab93-4920-a63e-c011dea*****', position='Body'),
}

model QueryDBExportTaskStatusResponseBody = {
  detailMessage?: string(name='DetailMessage', example='SERVER_BUSY'),
  downloadUrl?: string(name='DownloadUrl', example='https://mps-zjk-share.oss-cn-zhangjiakou.aliyuncs.com/mongo/export/0e16bb12-14af-4635-b24c-5ac1a9a7bb9f/20200720104406_0150006d-ab93-4920-a63e-c011dea1e089.csv?Expires=1595215206&OSSAccessKeyId=LTAIupaslTlU****&Signature=CKxpKX3Wj%2BLVtZ****%2FTbe%2BX9sc%3D'),
  exportedCount?: string(name='ExportedCount', example='2'),
  requestId?: string(name='RequestId', example='58881468-E779-4203-B933-BD53FDC60D6F'),
  status?: string(name='Status', example='SUCCESS'),
}

model QueryDBExportTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBExportTaskStatusResponseBody(name='body'),
}

async function queryDBExportTaskStatus(request: QueryDBExportTaskStatusRequest): QueryDBExportTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDBExportTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model QueryDBImportTaskStatusRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
  taskId: string(name='TaskId', example='973820af-966d-42ec-9fab-17dfe4a*****', position='Body'),
}

model QueryDBImportTaskStatusResponseBody = {
  detailMessage?: string(name='DetailMessage', example='SERVER_BUSY'),
  failedCount?: string(name='FailedCount', example='0'),
  requestId?: string(name='RequestId', example='692DCFEF-46DD-4EBB-B1DB-338E687DC260'),
  status?: string(name='Status', example='SUCCESS'),
  successCount?: string(name='SuccessCount', example='6'),
}

model QueryDBImportTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBImportTaskStatusResponseBody(name='body'),
}

async function queryDBImportTaskStatus(request: QueryDBImportTaskStatusRequest): QueryDBImportTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDBImportTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model QueryDBRestoreTaskStatusRequest {
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
  taskId: string(name='TaskId', example='0150006d-ab93-4920-a63e-c011dea1e089', position='Body'),
}

model QueryDBRestoreTaskStatusResponseBody = {
  detailMessage?: string(name='DetailMessage', example='SERVER_BUSY'),
  failedCount?: long(name='FailedCount', example='1'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  status?: string(name='Status', example='SUCCESS'),
  successCount?: long(name='SuccessCount', example='1'),
}

model QueryDBRestoreTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBRestoreTaskStatusResponseBody(name='body'),
}

async function queryDBRestoreTaskStatus(request: QueryDBRestoreTaskStatusRequest): QueryDBRestoreTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDBRestoreTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model QueryServiceStatusRequest {
  serviceName: string(name='ServiceName', example='CLOUD_FUNCTION', position='Body'),
  spaceId: string(name='SpaceId', example='226e5213-697c-4a52-b4ff-xxxxx', position='Body'),
}

model QueryServiceStatusResponseBody = {
  requestId?: string(name='RequestId', example='E63E7F4F-8538-5B0E-8712-78F92B6DCB9C'),
  serviceStatus?: string(name='ServiceStatus', example='OPENING'),
}

model QueryServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServiceStatusResponseBody(name='body'),
}

async function queryServiceStatus(request: QueryServiceStatusRequest): QueryServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryServiceStatus', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpaceConsumptionRequest {
  spaceId?: string(name='SpaceId', example='mp-95865273-9b1f-496d-****-cb88fa4d66a2', position='Body'),
}

model QuerySpaceConsumptionResponseBody = {
  csUsage?: {
    cdnTraffic?: long(name='CdnTraffic', example='0'),
    downloadCount?: long(name='DownloadCount', example='0'),
    storageSize?: long(name='StorageSize', example='0'),
    uploadCount?: long(name='UploadCount', example='0'),
  }(name='CsUsage'),
  cycleEndTime?: long(name='CycleEndTime', example='1667059200'),
  cycleStartTime?: long(name='CycleStartTime', example='1664467200'),
  dbUsage?: {
    readCount?: long(name='ReadCount', example='0'),
    storageSize?: long(name='StorageSize', example='0'),
    writeCount?: long(name='WriteCount', example='0'),
  }(name='DbUsage'),
  fcUsage?: {
    cost?: long(name='Cost', example='0'),
    requestCount?: long(name='RequestCount', example='0'),
    txTraffic?: long(name='TxTraffic', example='0'),
  }(name='FcUsage'),
  gmtCreate?: string(name='GmtCreate', example='0'),
  requestId?: string(name='RequestId', example='F16FEFE8-4E57-5795-BE7B-2D29F0C61B8C'),
  spaceId?: string(name='SpaceId', example='mp-26fe89b6-****-4a90-b332-b424ce9651e6'),
  specCode?: string(name='SpecCode', example='BASE'),
  whUsage?: {
    cdnTraffic?: long(name='CdnTraffic', example='0'),
    storageSize?: long(name='StorageSize', example='0'),
  }(name='WhUsage'),
}

model QuerySpaceConsumptionResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpaceConsumptionResponseBody(name='body'),
}

async function querySpaceConsumption(request: QuerySpaceConsumptionRequest): QuerySpaceConsumptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpaceConsumption', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpaceSpecDetailRequest {
  specCode: string(name='SpecCode', example='BASE', position='Body'),
}

model QuerySpaceSpecDetailResponseBody = {
  csCdnTraffic?: long(name='CsCdnTraffic', example='2147483648'),
  csDownloadCount?: long(name='CsDownloadCount', example='100000'),
  csStorageSize?: long(name='CsStorageSize', example='8589934592'),
  csUploadCount?: long(name='CsUploadCount', example='50000'),
  dbReadCount?: long(name='DbReadCount', example='50000'),
  dbStorageSize?: long(name='DbStorageSize', example='2147483648'),
  dbWriteCount?: long(name='DbWriteCount', example='30000'),
  fcCost?: long(name='FcCost', example='102400000'),
  fcRequestCount?: long(name='FcRequestCount', example='150000'),
  fcTxTraffic?: long(name='FcTxTraffic', example='1073741824'),
  gmtCreate?: string(name='GmtCreate'),
  requestId?: string(name='RequestId', example='20C1EDFE-6355-4344-B20A-A7A5A1581026'),
  specCode?: string(name='SpecCode', example='BASE'),
  specDetailText?: string(name='SpecDetailText'),
  whCdnTraffic?: long(name='WhCdnTraffic', example='2147483648'),
  whStorageSize?: long(name='WhStorageSize', example='8589934592'),
}

model QuerySpaceSpecDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpaceSpecDetailResponseBody(name='body'),
}

async function querySpaceSpecDetail(request: QuerySpaceSpecDetailRequest): QuerySpaceSpecDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpaceSpecDetail', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpaceUsageRequest {
  endTime?: string(name='EndTime', example='2022-06-18T16:00:00Z', position='Body'),
  spaceId?: string(name='SpaceId', example='mp-fd37e37e-b436-4a7a-****-58c89ce3586d', position='Body'),
  startTime?: string(name='StartTime', example='2022-06-17T16:00:00Z', position='Body'),
}

model QuerySpaceUsageResponseBody = {
  endTime?: string(name='EndTime', example='2022-06-18T16:00:00Z'),
  requestId?: string(name='RequestId', example='A9FB71D5-2C06-5810-A5FA-B88E45FEA677'),
  spaceId?: string(name='SpaceId', example='mp-23c7c857-****-4512-bab0-3dbf986e7576'),
  spaceUsageDataList?: [ 
    {
      csUsage?: {
        cdnTraffic?: long(name='CdnTraffic', example='94134230'),
        downloadCount?: long(name='DownloadCount', example='45668113'),
        storageSize?: long(name='StorageSize', example='4024575081'),
        uploadCount?: long(name='UploadCount', example='2352'),
      }(name='CsUsage'),
      dbUsage?: {
        readCount?: long(name='ReadCount', example='5685123'),
        storageSize?: long(name='StorageSize', example='2542108'),
        writeCount?: long(name='WriteCount', example='241500'),
      }(name='DbUsage'),
      effectiveBillFlag?: boolean(name='EffectiveBillFlag'),
      fcUsage?: {
        cost?: long(name='Cost', example='35645000'),
        requestCount?: long(name='RequestCount', example='12451'),
        txTraffic?: long(name='TxTraffic', example='124521635'),
      }(name='FcUsage'),
      timestamp?: string(name='Timestamp', example='2022-06-17T16:00:00Z'),
      whUsage?: {
        cdnTraffic?: long(name='CdnTraffic', example='5644311'),
        storageSize?: long(name='StorageSize', example='226230160'),
      }(name='WhUsage'),
    }
  ](name='SpaceUsageDataList'),
  startTime?: string(name='StartTime', example='2022-06-17T16:00:00Z'),
}

model QuerySpaceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpaceUsageResponseBody(name='body'),
}

async function querySpaceUsage(request: QuerySpaceUsageRequest): QuerySpaceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpaceUsage', 'POST', '/', 'json', true, 'form', request);
}

model RefreshWebHostingCustomDomainCacheRequest {
  domainName: string(name='DomainName', example='www.example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a7bb9f', position='Body'),
}

model RefreshWebHostingCustomDomainCacheResponseBody = {
  requestId?: string(name='RequestId', example='E63E7F4F-8538-5B0E-8712-78F92B6DCB9C'),
}

model RefreshWebHostingCustomDomainCacheResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshWebHostingCustomDomainCacheResponseBody(name='body'),
}

async function refreshWebHostingCustomDomainCache(request: RefreshWebHostingCustomDomainCacheRequest): RefreshWebHostingCustomDomainCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshWebHostingCustomDomainCache', 'POST', '/', 'json', true, 'form', request);
}

model RegisterFileRequest {
  id: string(name='Id', example='2fada31e-8fa5-****-b595-9698cd6b5f06', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-****-4635-b24c-5ac1a9a7bb9f', position='Body'),
}

model RegisterFileResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model RegisterFileResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterFileResponseBody(name='body'),
}

async function registerFile(request: RegisterFileRequest): RegisterFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterFile', 'POST', '/', 'json', true, 'form', request);
}

model RenameDBCollectionRequest {
  newCollection: string(name='NewCollection', example='newColl1', position='Body'),
  originCollection: string(name='OriginCollection', example='coll1', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9*****', position='Body'),
}

model RenameDBCollectionResponseBody = {
  requestId?: string(name='RequestId', example='20C1EDFE-6355-4344-B20A-A7A5A1581026'),
}

model RenameDBCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: RenameDBCollectionResponseBody(name='body'),
}

async function renameDBCollection(request: RenameDBCollectionRequest): RenameDBCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameDBCollection', 'POST', '/', 'json', true, 'form', request);
}

model ResetServerSecretRequest {
  spaceId: string(name='SpaceId', example='826061c4-5095-4550-8b74-3bcd9af*****', position='Body'),
}

model ResetServerSecretResponseBody = {
  requestId?: string(name='RequestId', example='EA770971-A4A0-4555-9E00-C94A2194E150'),
}

model ResetServerSecretResponse = {
  headers: map[string]string(name='headers'),
  body: ResetServerSecretResponseBody(name='body'),
}

async function resetServerSecret(request: ResetServerSecretRequest): ResetServerSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetServerSecret', 'POST', '/', 'json', true, 'form', request);
}

model RunDBCommandRequest {
  body: string(name='Body', example='{"command":"findOne","collection":"test_collection","query":{"name":"tome"}}', position='Body'),
  spaceId: string(name='SpaceId', example='ach41172-adba-4af1-b2e5-63fc5f56a649', position='Body'),
}

model RunDBCommandResponseBody = {
  affectedDocs?: int32(name='AffectedDocs', example='1'),
  requestId?: string(name='RequestId', example='F75E60FA-7583-4E2E-AC14-6C608F89804'),
  result?: string(name='Result', example='{"_id":"5d107e5af957c439d505b95b","age":1,"name":"aaaaa","time":1561362071732}'),
}

model RunDBCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunDBCommandResponseBody(name='body'),
}

async function runDBCommand(request: RunDBCommandRequest): RunDBCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDBCommand', 'POST', '/', 'json', true, 'form', request);
}

model RunFunctionRequest {
  body: string(name='Body', example='{"functionTarget":"test-function","functionArgs":{"a":"aaaa","b":"bbbb","num":100}}', position='Body'),
  spaceId: string(name='SpaceId', example='ach41172-adba-4af1-b2e5-63fc5f56a649', position='Body'),
}

model RunFunctionResponseBody = {
  requestId?: string(name='RequestId', example='F75E60FA-7583-4E2E-AC14-6C608F89804'),
  result?: string(name='Result', example='{"name":"tom"}'),
  runtimeMeta?: {
    billingDuration?: int32(name='BillingDuration', example='600'),
    invocationDuration?: int32(name='InvocationDuration', example='523'),
    maxMemoryUsage?: int32(name='MaxMemoryUsage', example='27'),
    requestId?: string(name='RequestId', example='980879201561364765437209427735'),
  }(name='RuntimeMeta'),
}

model RunFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: RunFunctionResponseBody(name='body'),
}

async function runFunction(request: RunFunctionRequest): RunFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunFunction', 'POST', '/', 'json', true, 'form', request);
}

model SaveAntOpenPlatformConfigRequest {
  appCert?: string(name='AppCert', example='-----BEGIN CERTIFICATE----- MIIEwTCCA6mgAwIBAgIQICAJGbUNoqdPr25qpPU7+ -----END CERTIFICATE-----', position='Body'),
  appId: string(name='AppId', example='201909116717****', maxLength=64, position='Body'),
  privateKey: string(name='PrivateKey', example='MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSk', position='Body'),
  publicCert?: string(name='PublicCert', example='-----BEGIN CERTIFICATE----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQ -----END CERTIFICATE-----', position='Body'),
  publicKey?: string(name='PublicKey', example='MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCA', position='Body'),
  rootCert?: string(name='RootCert', example='-----BEGIN CERTIFICATE----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQ -----END CERTIFICATE-----', position='Body'),
  signMode: string(name='SignMode', example='CERT', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model SaveAntOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='2540E86F-2CD4-44AC-A7AB-59CAF40C225D'),
}

model SaveAntOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveAntOpenPlatformConfigResponseBody(name='body'),
}

async function saveAntOpenPlatformConfig(request: SaveAntOpenPlatformConfigRequest): SaveAntOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveAntOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model SaveAppAuthTokenRequest {
  appAuthToken: string(name='AppAuthToken', example='202111BB576ef688a3564875a75a9babd6XXXXXX', position='Body'),
  appId: string(name='AppId', example='2021002198669xxx', position='Body'),
  isvAppId: string(name='IsvAppId', example='2021002110693xxx', position='Body'),
  spaceId: string(name='SpaceId', example='368ef42a-763f-0000-acc2-8aa9564c****', position='Body'),
}

model SaveAppAuthTokenResponseBody = {
  requestId?: string(name='RequestId', example='F340DF8D-7125-49B7-AC48-7F5C8DB382CB'),
}

model SaveAppAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: SaveAppAuthTokenResponseBody(name='body'),
}

async function saveAppAuthToken(request: SaveAppAuthTokenRequest): SaveAppAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveAppAuthToken', 'POST', '/', 'json', true, 'form', request);
}

model SaveWebHostingCustomDomainConfigRequest {
  domainName: string(name='DomainName', example='www.example.com', position='Body'),
  forceRedirectType: string(name='ForceRedirectType', example='HTTPS_FORCE', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model SaveWebHostingCustomDomainConfigResponseBody = {
  requestId?: string(name='RequestId', example='828A8808-3FC9-418C-893A-5A708CFABB8E'),
}

model SaveWebHostingCustomDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebHostingCustomDomainConfigResponseBody(name='body'),
}

async function saveWebHostingCustomDomainConfig(request: SaveWebHostingCustomDomainConfigRequest): SaveWebHostingCustomDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveWebHostingCustomDomainConfig', 'POST', '/', 'json', true, 'form', request);
}

model SaveWebHostingCustomDomainCorsConfigRequest {
  accessControlAllowOrigin?: string(name='AccessControlAllowOrigin', example='https://*.example.com, https://*.example.org', position='Body'),
  domainName: string(name='DomainName', example='www.example.com', position='Body'),
  enableCors: boolean(name='EnableCors', example='true', position='Body'),
  spaceId: string(name='SpaceId', example='226e5213-697c-4a52-b4ff-35a09f8*****', position='Body'),
}

model SaveWebHostingCustomDomainCorsConfigResponseBody = {
  code?: string(name='Code', description='Id of the request', example='success'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='SpaceNotExist'),
  requestId?: string(name='RequestId', example='6E2E1770-E9C7-52E9-BF2C-94A0BACFADBE"'),
  success?: boolean(name='Success', example='true'),
}

model SaveWebHostingCustomDomainCorsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebHostingCustomDomainCorsConfigResponseBody(name='body'),
}

async function saveWebHostingCustomDomainCorsConfig(request: SaveWebHostingCustomDomainCorsConfigRequest): SaveWebHostingCustomDomainCorsConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveWebHostingCustomDomainCorsConfig', 'POST', '/', 'json', true, 'form', request);
}

model SaveWechatOpenPlatformConfigRequest {
  appId: string(name='AppId', example='123456', maxLength=64, position='Body'),
  appSecret: string(name='AppSecret', example='9w0BAQEFAASCBKgwggSkAgEAAoI', maxLength=200, position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model SaveWechatOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='44DF7A95-603F-4651-9298-BE1850BEB53F'),
}

model SaveWechatOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWechatOpenPlatformConfigResponseBody(name='body'),
}

async function saveWechatOpenPlatformConfig(request: SaveWechatOpenPlatformConfigRequest): SaveWechatOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveWechatOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model UnbindWebHostingCustomDomainRequest {
  customDomain: string(name='CustomDomain', example='www.example.com', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-4635-b24c-5ac1a9a*****', position='Body'),
}

model UnbindWebHostingCustomDomainResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='CEF9831B-A6D2-4485-9CAD-1B8FBC8BC6F7'),
}

model UnbindWebHostingCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindWebHostingCustomDomainResponseBody(name='body'),
}

async function unbindWebHostingCustomDomain(request: UnbindWebHostingCustomDomainRequest): UnbindWebHostingCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindWebHostingCustomDomain', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDingtalkOpenPlatformConfigRequest {
  appId: string(name='AppId', example='dingoa7pqicyk3x9t*****', maxLength=128, position='Body'),
  appSecret: string(name='AppSecret', example='1r0ElNPFqLI6qgY08*******************************9TIK3RN_5fk9SEMO', maxLength=400, position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model UpdateDingtalkOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model UpdateDingtalkOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDingtalkOpenPlatformConfigResponseBody(name='body'),
}

async function updateDingtalkOpenPlatformConfig(request: UpdateDingtalkOpenPlatformConfigRequest): UpdateDingtalkOpenPlatformConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDingtalkOpenPlatformConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFunctionRequest {
  desc?: string(name='Desc', example='description', maxLength=128, position='Body'),
  httpTriggerPath?: string(name='HttpTriggerPath', example='/http/hello', maxLength=128, position='Body'),
  instanceConcurrency?: int32(name='InstanceConcurrency', example='1', minimum=1, maximum=100, position='Body'),
  memory?: int32(name='Memory', example='256', minimum=128, maximum=3096, position='Body'),
  name: string(name='Name', example='demoFunction', position='Body'),
  runtime?: string(name='Runtime', example='nodejs8', position='Body'),
  spaceId: string(name='SpaceId', example='dece4ea0-d432-4cfa-8514-8a88d205e2b8', position='Body'),
  timeout?: int32(name='Timeout', example='5', minimum=1, maximum=600, position='Body'),
  timingTriggerConfig?: string(name='TimingTriggerConfig', position='Body'),
  timingTriggerUserPayload?: string(name='TimingTriggerUserPayload', example='hello', position='Body'),
}

model UpdateFunctionResponseBody = {
  createdAt?: string(name='CreatedAt', example='2019-06-20T03:22:54Z'),
  desc?: string(name='Desc', example='description'),
  httpTriggerPath?: string(name='HttpTriggerPath', example='/http/hello'),
  modifiedAt?: string(name='ModifiedAt', example='2019-06-20T03:22:54Z'),
  name?: string(name='Name', example='demoFunction'),
  requestId?: string(name='RequestId', example='C293BB03-B6AD-46C2-80D1-19C8FB573916'),
  spec?: {
    instanceConcurrency?: int32(name='InstanceConcurrency', example='1'),
    memory?: string(name='Memory', example='128 MB'),
    runtime?: string(name='Runtime', example='Node.js 8'),
    timeout?: string(name='Timeout', example='5s'),
  }(name='Spec'),
  timingTriggerConfig?: string(name='TimingTriggerConfig', example='cron:0 0 * * * *'),
  timingTriggerUserPayload?: string(name='TimingTriggerUserPayload'),
}

model UpdateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFunctionResponseBody(name='body'),
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFunction', 'POST', '/', 'json', true, 'form', request);
}

model UpdateHttpTriggerConfigRequest {
  customDomain?: string(name='CustomDomain', example='abc.xxx.com', maxLength=253, position='Body'),
  customDomainCertificate?: string(name='CustomDomainCertificate', example='-----BEGIN CERTIFICATE----- MIIFK****GCSqGSIb3DQEBCwUA= -----END CERTIFICATE-----', position='Body'),
  customDomainPrivateKey?: string(name='CustomDomainPrivateKey', example='-----BEGIN PRIVATE KEY----- MIIEwA******DmUwVD0M74ECwZw= -----END PRIVATE KEY-----', position='Body'),
  enableService: boolean(name='EnableService', example='true', position='Body'),
  spaceId: string(name='SpaceId', example='34C45988-2B24-****-A4DC-4D6C952890D8', position='Body'),
}

model UpdateHttpTriggerConfigResponseBody = {
  customDomain?: string(name='CustomDomain', example='abc.example.com'),
  customDomainCertificateInfo?: string(name='CustomDomainCertificateInfo', example='{"notAfter":"2021-09-28T08:21:42Z","notBefore":"2021-06-30T08:21:43Z","subject":"CN=*.example.com"}'),
  customDomainCname?: string(name='CustomDomainCname', example='724d************795a2.custom.bspapp.com'),
  defaultEndpoint?: string(name='DefaultEndpoint', example='724dade5-492f-426b-a5df-ff****0795a2.bspapp.com'),
  enableService?: boolean(name='EnableService', example='true'),
  requestId?: string(name='RequestId', example='34C45988-2B24-****-A4DC-4D6C952890D8'),
}

model UpdateHttpTriggerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHttpTriggerConfigResponseBody(name='body'),
}

async function updateHttpTriggerConfig(request: UpdateHttpTriggerConfigRequest): UpdateHttpTriggerConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHttpTriggerConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateServicePolicyRequest {
  collectionName?: string(name='CollectionName', example='test', position='Body'),
  policy?: string(name='Policy', example='{\\".write\\":false,\\".read\\":true}', position='Body'),
  policyName?: string(name='PolicyName', example='EXTENDED', position='Body'),
  serviceName: string(name='ServiceName', example='db', position='Body'),
  spaceId: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f', position='Body'),
}

model UpdateServicePolicyResponseBody = {
  collectionName?: string(name='CollectionName', example='test'),
  policy?: string(name='Policy', example='{\\".write\\":false,\\".read\\":true}'),
  policyName?: string(name='PolicyName', example='EXTENDED'),
  requestId?: string(name='RequestId', example='8932780D-9AF2-4E50-844C-13A1250918EE'),
  serviceName?: string(name='ServiceName', example='db'),
  spaceId?: string(name='SpaceId', example='0e16bb12-14af-****-b24c-5ac1a9a7bb9f'),
}

model UpdateServicePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServicePolicyResponseBody(name='body'),
}

async function updateServicePolicy(request: UpdateServicePolicyRequest): UpdateServicePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServicePolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSpaceRequest {
  desc?: string(name='Desc', position='Body'),
  spaceId: string(name='SpaceId', example='826061c4-5095-4550-8b74-3bcd9af*****', position='Body'),
  status?: string(name='Status', example='IN_SERVICE', position='Body'),
}

model UpdateSpaceResponseBody = {
  requestId?: string(name='RequestId', example='EA770971-A4A0-4555-9E00-C94A2194E150'),
}

model UpdateSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSpaceResponseBody(name='body'),
}

async function updateSpace(request: UpdateSpaceRequest): UpdateSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSpace', 'POST', '/', 'json', true, 'form', request);
}

model VerifyWebHostingDomainOwnerRequest {
  domain: string(name='Domain', example='example.com', position='Body'),
  spaceId: string(name='SpaceId', example='226e5213-697c-****-b4ff-35a09f8a52de', position='Body'),
  verifyType: string(name='VerifyType', example='dnsCheck', position='Body'),
}

model VerifyWebHostingDomainOwnerResponseBody = {
  requestId?: string(name='RequestId', example='74374923-6536-46EB-8639-409384EAE980'),
}

model VerifyWebHostingDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyWebHostingDomainOwnerResponseBody(name='body'),
}

async function verifyWebHostingDomainOwner(request: VerifyWebHostingDomainOwnerRequest): VerifyWebHostingDomainOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyWebHostingDomainOwner', 'POST', '/', 'json', true, 'form', request);
}

