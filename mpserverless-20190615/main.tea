/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mpserverless', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model RunFunctionRequest {
  spaceId?: string(name='SpaceId'),
  body?: string(name='Body'),
}

model RunFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  runtimeMeta?: {
    invocationDuration?: int32(name='InvocationDuration'),
    requestId?: string(name='RequestId'),
    billingDuration?: int32(name='BillingDuration'),
    maxMemoryUsage?: int32(name='MaxMemoryUsage'),
  }(name='RuntimeMeta'),
}

model RunFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: RunFunctionResponseBody(name='body'),
}

async function runFunctionWithOptions(request: RunFunctionRequest, runtime: Util.RuntimeOptions): RunFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runFunction(request: RunFunctionRequest): RunFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return runFunctionWithOptions(request, runtime);
}

model ListFunctionRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  filterBy?: string(name='FilterBy'),
  spaceId?: string(name='SpaceId'),
}

model ListFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  paginator?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Paginator'),
  dataList?: [ 
    {
      timingTriggerConfig?: string(name='TimingTriggerConfig'),
      httpTriggerPath?: string(name='HttpTriggerPath'),
      createdAt?: string(name='CreatedAt'),
      modifiedAt?: string(name='ModifiedAt'),
      name?: string(name='Name'),
      desc?: string(name='Desc'),
      spec?: {
        timeout?: string(name='Timeout'),
        runtime?: string(name='Runtime'),
        instanceConcurrency?: int32(name='InstanceConcurrency'),
        memory?: string(name='Memory'),
      }(name='Spec'),
    }
  ](name='DataList'),
}

model ListFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionResponseBody(name='body'),
}

async function listFunctionWithOptions(request: ListFunctionRequest, runtime: Util.RuntimeOptions): ListFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunction(request: ListFunctionRequest): ListFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionWithOptions(request, runtime);
}

model GetWebHostingCertificateDetailRequest {
  spaceId?: string(name='SpaceId'),
  customDomain?: string(name='CustomDomain'),
}

model GetWebHostingCertificateDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    certLife?: string(name='CertLife'),
    certType?: string(name='CertType'),
    certDomainName?: string(name='CertDomainName'),
    serverCertificateStatus?: string(name='ServerCertificateStatus'),
    certName?: string(name='CertName'),
    certExpiredTime?: long(name='CertExpiredTime'),
  }(name='Data'),
}

model GetWebHostingCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingCertificateDetailResponseBody(name='body'),
}

async function getWebHostingCertificateDetailWithOptions(request: GetWebHostingCertificateDetailRequest, runtime: Util.RuntimeOptions): GetWebHostingCertificateDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWebHostingCertificateDetail', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWebHostingCertificateDetail(request: GetWebHostingCertificateDetailRequest): GetWebHostingCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebHostingCertificateDetailWithOptions(request, runtime);
}

model UpdateSpaceRequest {
  spaceId?: string(name='SpaceId'),
  desc?: string(name='Desc'),
  status?: string(name='Status'),
}

model UpdateSpaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSpaceResponseBody(name='body'),
}

async function updateSpaceWithOptions(request: UpdateSpaceRequest, runtime: Util.RuntimeOptions): UpdateSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSpace', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSpace(request: UpdateSpaceRequest): UpdateSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSpaceWithOptions(request, runtime);
}

model SaveWebHostingCustomDomainConfigRequest {
  spaceId?: string(name='SpaceId'),
  forceRedirectType?: string(name='ForceRedirectType'),
  domainName?: string(name='DomainName'),
}

model SaveWebHostingCustomDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveWebHostingCustomDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebHostingCustomDomainConfigResponseBody(name='body'),
}

async function saveWebHostingCustomDomainConfigWithOptions(request: SaveWebHostingCustomDomainConfigRequest, runtime: Util.RuntimeOptions): SaveWebHostingCustomDomainConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveWebHostingCustomDomainConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveWebHostingCustomDomainConfig(request: SaveWebHostingCustomDomainConfigRequest): SaveWebHostingCustomDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebHostingCustomDomainConfigWithOptions(request, runtime);
}

model ListFunctionSpecResponseBody = {
  requestId?: string(name='RequestId'),
  memoryList?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='MemoryList'),
  runtimeList?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='RuntimeList'),
}

model ListFunctionSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionSpecResponseBody(name='body'),
}

async function listFunctionSpecWithOptions(runtime: Util.RuntimeOptions): ListFunctionSpecResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListFunctionSpec', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunctionSpec(): ListFunctionSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionSpecWithOptions(runtime);
}

model DeleteWechatOpenPlatformConfigRequest {
  spaceId?: string(name='SpaceId'),
  appId?: string(name='AppId'),
}

model DeleteWechatOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWechatOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWechatOpenPlatformConfigResponseBody(name='body'),
}

async function deleteWechatOpenPlatformConfigWithOptions(request: DeleteWechatOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): DeleteWechatOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWechatOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWechatOpenPlatformConfig(request: DeleteWechatOpenPlatformConfigRequest): DeleteWechatOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWechatOpenPlatformConfigWithOptions(request, runtime);
}

model CreateSpaceRequest {
  name?: string(name='Name'),
  desc?: string(name='Desc'),
  workspaceId?: long(name='WorkspaceId'),
}

model CreateSpaceResponseBody = {
  spaceId?: string(name='SpaceId'),
  requestId?: string(name='RequestId'),
}

model CreateSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSpaceResponseBody(name='body'),
}

async function createSpaceWithOptions(request: CreateSpaceRequest, runtime: Util.RuntimeOptions): CreateSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSpace', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSpace(request: CreateSpaceRequest): CreateSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSpaceWithOptions(request, runtime);
}

model OpenProductRequest {
  data?: string(name='data'),
}

model OpenProductResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
  synchro?: string(name='synchro'),
}

model OpenProductResponse = {
  headers: map[string]string(name='headers'),
  body: OpenProductResponseBody(name='body'),
}

async function openProductWithOptions(request: OpenProductRequest, runtime: Util.RuntimeOptions): OpenProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenProduct', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openProduct(request: OpenProductRequest): OpenProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return openProductWithOptions(request, runtime);
}

model OpenServiceRequest {
  spaceId?: string(name='SpaceId'),
  serviceName?: string(name='ServiceName'),
}

model OpenServiceResponseBody = {
  requestId?: string(name='RequestId'),
  serviceStatus?: string(name='ServiceStatus'),
  count?: int32(name='Count'),
}

model OpenServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenServiceResponseBody(name='body'),
}

async function openServiceWithOptions(request: OpenServiceRequest, runtime: Util.RuntimeOptions): OpenServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenService', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openService(request: OpenServiceRequest): OpenServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openServiceWithOptions(request, runtime);
}

model DeleteSpaceRequest {
  spaceId?: string(name='SpaceId'),
}

model DeleteSpaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpaceResponseBody(name='body'),
}

async function deleteSpaceWithOptions(request: DeleteSpaceRequest, runtime: Util.RuntimeOptions): DeleteSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSpace', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSpace(request: DeleteSpaceRequest): DeleteSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpaceWithOptions(request, runtime);
}

model DeleteAntOpenPlatformConfigRequest {
  spaceId?: string(name='SpaceId'),
  appId?: string(name='AppId'),
}

model DeleteAntOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAntOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntOpenPlatformConfigResponseBody(name='body'),
}

async function deleteAntOpenPlatformConfigWithOptions(request: DeleteAntOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): DeleteAntOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAntOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAntOpenPlatformConfig(request: DeleteAntOpenPlatformConfigRequest): DeleteAntOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntOpenPlatformConfigWithOptions(request, runtime);
}

model DescribeFCOpenStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  isAuthorized?: boolean(name='IsAuthorized'),
}

model DescribeFCOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFCOpenStatusResponseBody(name='body'),
}

async function describeFCOpenStatusWithOptions(runtime: Util.RuntimeOptions): DescribeFCOpenStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeFCOpenStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFCOpenStatus(): DescribeFCOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFCOpenStatusWithOptions(runtime);
}

model DescribeFileUploadSignedUrlRequest {
  filename?: string(name='Filename'),
  size?: long(name='Size'),
  spaceId?: string(name='SpaceId'),
  contentType?: string(name='ContentType'),
}

model DescribeFileUploadSignedUrlResponseBody = {
  signUrl?: string(name='SignUrl'),
  requestId?: string(name='RequestId'),
  id?: string(name='Id'),
}

model DescribeFileUploadSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileUploadSignedUrlResponseBody(name='body'),
}

async function describeFileUploadSignedUrlWithOptions(request: DescribeFileUploadSignedUrlRequest, runtime: Util.RuntimeOptions): DescribeFileUploadSignedUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFileUploadSignedUrl', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFileUploadSignedUrl(request: DescribeFileUploadSignedUrlRequest): DescribeFileUploadSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileUploadSignedUrlWithOptions(request, runtime);
}

model DeleteFileRequest {
  id?: string(name='Id'),
  spaceId?: string(name='SpaceId'),
}

model DeleteFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model QueryDBImportTaskStatusRequest {
  spaceId?: string(name='SpaceId'),
  taskId?: string(name='TaskId'),
}

model QueryDBImportTaskStatusResponseBody = {
  status?: string(name='Status'),
  failedCount?: string(name='FailedCount'),
  requestId?: string(name='RequestId'),
  detailMessage?: string(name='DetailMessage'),
  successCount?: string(name='SuccessCount'),
}

model QueryDBImportTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBImportTaskStatusResponseBody(name='body'),
}

async function queryDBImportTaskStatusWithOptions(request: QueryDBImportTaskStatusRequest, runtime: Util.RuntimeOptions): QueryDBImportTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDBImportTaskStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDBImportTaskStatus(request: QueryDBImportTaskStatusRequest): QueryDBImportTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDBImportTaskStatusWithOptions(request, runtime);
}

model RegisterFileRequest {
  id?: string(name='Id'),
  spaceId?: string(name='SpaceId'),
}

model RegisterFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model RegisterFileResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterFileResponseBody(name='body'),
}

async function registerFileWithOptions(request: RegisterFileRequest, runtime: Util.RuntimeOptions): RegisterFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerFile(request: RegisterFileRequest): RegisterFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerFileWithOptions(request, runtime);
}

model SaveAntOpenPlatformConfigRequest {
  spaceId?: string(name='SpaceId'),
  appId?: string(name='AppId'),
  publicKey?: string(name='PublicKey'),
  privateKey?: string(name='PrivateKey'),
  signMode?: string(name='SignMode'),
  appCert?: string(name='AppCert'),
  publicCert?: string(name='PublicCert'),
  rootCert?: string(name='RootCert'),
}

model SaveAntOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveAntOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveAntOpenPlatformConfigResponseBody(name='body'),
}

async function saveAntOpenPlatformConfigWithOptions(request: SaveAntOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): SaveAntOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveAntOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveAntOpenPlatformConfig(request: SaveAntOpenPlatformConfigRequest): SaveAntOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveAntOpenPlatformConfigWithOptions(request, runtime);
}

model DescribeFunctionRequest {
  name?: string(name='Name'),
  spaceId?: string(name='SpaceId'),
}

model DescribeFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  function?: {
    timingTriggerConfig?: string(name='TimingTriggerConfig'),
    httpTriggerPath?: string(name='HttpTriggerPath'),
    createdAt?: string(name='CreatedAt'),
    name?: string(name='Name'),
    modifiedAt?: string(name='ModifiedAt'),
    desc?: string(name='Desc'),
    spec?: {
      timeout?: string(name='Timeout'),
      runtime?: string(name='Runtime'),
      instanceConcurrency?: int32(name='InstanceConcurrency'),
      memory?: string(name='Memory'),
    }(name='Spec'),
  }(name='Function'),
  deployment?: {
    createdAt?: string(name='CreatedAt'),
    deploymentId?: string(name='DeploymentId'),
    downloadSignedUrl?: string(name='DownloadSignedUrl'),
    versionNo?: string(name='VersionNo'),
    modifiedAt?: string(name='ModifiedAt'),
  }(name='Deployment'),
}

model DescribeFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFunctionResponseBody(name='body'),
}

async function describeFunctionWithOptions(request: DescribeFunctionRequest, runtime: Util.RuntimeOptions): DescribeFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFunction(request: DescribeFunctionRequest): DescribeFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFunctionWithOptions(request, runtime);
}

model OpenWebHostingServiceRequest {
  spaceId?: string(name='SpaceId'),
}

model OpenWebHostingServiceResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model OpenWebHostingServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenWebHostingServiceResponseBody(name='body'),
}

async function openWebHostingServiceWithOptions(request: OpenWebHostingServiceRequest, runtime: Util.RuntimeOptions): OpenWebHostingServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenWebHostingService', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openWebHostingService(request: OpenWebHostingServiceRequest): OpenWebHostingServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openWebHostingServiceWithOptions(request, runtime);
}

model DescribeSmsSignRequest {
  signId?: string(name='SignId'),
  spaceId?: string(name='SpaceId'),
}

model DescribeSmsSignResponseBody = {
  spaceId?: string(name='SpaceId'),
  updateTime?: string(name='UpdateTime'),
  requestId?: string(name='RequestId'),
  remark?: string(name='Remark'),
  createTime?: string(name='CreateTime'),
  signName?: string(name='SignName'),
}

model DescribeSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSmsSignResponseBody(name='body'),
}

async function describeSmsSignWithOptions(request: DescribeSmsSignRequest, runtime: Util.RuntimeOptions): DescribeSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSmsSign', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSmsSign(request: DescribeSmsSignRequest): DescribeSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmsSignWithOptions(request, runtime);
}

model ListAvailableCertificatesRequest {
  spaceId?: string(name='SpaceId'),
  domain?: string(name='Domain'),
}

model ListAvailableCertificatesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      name?: string(name='Name'),
      id?: string(name='Id'),
      statusCode?: string(name='StatusCode'),
    }
  ](name='Data'),
}

model ListAvailableCertificatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAvailableCertificatesResponseBody(name='body'),
}

async function listAvailableCertificatesWithOptions(request: ListAvailableCertificatesRequest, runtime: Util.RuntimeOptions): ListAvailableCertificatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAvailableCertificates', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAvailableCertificates(request: ListAvailableCertificatesRequest): ListAvailableCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvailableCertificatesWithOptions(request, runtime);
}

model ListOpenPlatformConfigRequest {
  spaceId?: string(name='SpaceId'),
  platform?: string(name='Platform'),
}

model ListOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
  secretList?: [ 
    {
      spaceId?: string(name='SpaceId'),
      appSecret?: string(name='AppSecret'),
      publicCert?: string(name='PublicCert'),
      appCert?: string(name='AppCert'),
      privateKey?: string(name='PrivateKey'),
      appId?: string(name='AppId'),
      rootCert?: string(name='RootCert'),
      publicKey?: string(name='PublicKey'),
      platform?: string(name='Platform'),
      signMode?: string(name='SignMode'),
    }
  ](name='SecretList'),
}

model ListOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenPlatformConfigResponseBody(name='body'),
}

async function listOpenPlatformConfigWithOptions(request: ListOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): ListOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOpenPlatformConfig(request: ListOpenPlatformConfigRequest): ListOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOpenPlatformConfigWithOptions(request, runtime);
}

model ModifyWebHostingConfigRequest {
  spaceId?: string(name='SpaceId'),
  indexPath?: string(name='IndexPath'),
  errorPath?: string(name='ErrorPath'),
  allowedIps?: string(name='AllowedIps'),
}

model ModifyWebHostingConfigResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyWebHostingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebHostingConfigResponseBody(name='body'),
}

async function modifyWebHostingConfigWithOptions(request: ModifyWebHostingConfigRequest, runtime: Util.RuntimeOptions): ModifyWebHostingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebHostingConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebHostingConfig(request: ModifyWebHostingConfigRequest): ModifyWebHostingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebHostingConfigWithOptions(request, runtime);
}

model DeleteSmsSignRequest {
  spaceId?: string(name='SpaceId'),
  signId?: string(name='SignId'),
}

model DeleteSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsSignResponseBody(name='body'),
}

async function deleteSmsSignWithOptions(request: DeleteSmsSignRequest, runtime: Util.RuntimeOptions): DeleteSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSmsSign', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSmsSign(request: DeleteSmsSignRequest): DeleteSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmsSignWithOptions(request, runtime);
}

model DescribeSmsOpenStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  isAuthorized?: boolean(name='IsAuthorized'),
}

model DescribeSmsOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSmsOpenStatusResponseBody(name='body'),
}

async function describeSmsOpenStatusWithOptions(runtime: Util.RuntimeOptions): DescribeSmsOpenStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeSmsOpenStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSmsOpenStatus(): DescribeSmsOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmsOpenStatusWithOptions(runtime);
}

model ListSpaceRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model ListSpaceResponseBody = {
  requestId?: string(name='RequestId'),
  gmtCreate?: string(name='GmtCreate'),
  count?: int32(name='Count'),
  spaces?: [ 
    {
      status?: string(name='Status'),
      gmtCreate?: long(name='GmtCreate'),
      spaceId?: string(name='SpaceId'),
      name?: string(name='Name'),
      desc?: string(name='Desc'),
    }
  ](name='Spaces'),
}

model ListSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: ListSpaceResponseBody(name='body'),
}

async function listSpaceWithOptions(request: ListSpaceRequest, runtime: Util.RuntimeOptions): ListSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSpace', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSpace(request: ListSpaceRequest): ListSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSpaceWithOptions(request, runtime);
}

model DeleteDBCollectionRequest {
  spaceId?: string(name='SpaceId'),
  body?: string(name='Body'),
}

model DeleteDBCollectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBCollectionResponseBody(name='body'),
}

async function deleteDBCollectionWithOptions(request: DeleteDBCollectionRequest, runtime: Util.RuntimeOptions): DeleteDBCollectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBCollection', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBCollection(request: DeleteDBCollectionRequest): DeleteDBCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBCollectionWithOptions(request, runtime);
}

model CreateFunctionDeploymentRequest {
  name?: string(name='Name'),
  spaceId?: string(name='SpaceId'),
}

model CreateFunctionDeploymentResponseBody = {
  uploadSignedUrl?: string(name='UploadSignedUrl'),
  deploymentId?: string(name='DeploymentId'),
  requestId?: string(name='RequestId'),
}

model CreateFunctionDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionDeploymentResponseBody(name='body'),
}

async function createFunctionDeploymentWithOptions(request: CreateFunctionDeploymentRequest, runtime: Util.RuntimeOptions): CreateFunctionDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFunctionDeployment', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFunctionDeployment(request: CreateFunctionDeploymentRequest): CreateFunctionDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFunctionDeploymentWithOptions(request, runtime);
}

model GetWebHostingUploadCredentialRequest {
  spaceId?: string(name='SpaceId'),
  filePath?: string(name='FilePath'),
}

model GetWebHostingUploadCredentialResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    filePath?: string(name='FilePath'),
    signature?: string(name='Signature'),
    policy?: string(name='Policy'),
    securityToken?: string(name='SecurityToken'),
    expiredTime?: long(name='ExpiredTime'),
    endpoint?: string(name='Endpoint'),
    accessKeyId?: string(name='AccessKeyId'),
  }(name='Data'),
}

model GetWebHostingUploadCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingUploadCredentialResponseBody(name='body'),
}

async function getWebHostingUploadCredentialWithOptions(request: GetWebHostingUploadCredentialRequest, runtime: Util.RuntimeOptions): GetWebHostingUploadCredentialResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWebHostingUploadCredential', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWebHostingUploadCredential(request: GetWebHostingUploadCredentialRequest): GetWebHostingUploadCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebHostingUploadCredentialWithOptions(request, runtime);
}

model ListFunctionDeploymentRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  spaceId?: string(name='SpaceId'),
  status?: string(name='Status'),
}

model ListFunctionDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
  paginator?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Paginator'),
  dataList?: [ 
    {
      createdAt?: string(name='CreatedAt'),
      deploymentId?: string(name='DeploymentId'),
      downloadSignedUrl?: string(name='DownloadSignedUrl'),
      versionNo?: string(name='VersionNo'),
      modifiedAt?: string(name='ModifiedAt'),
      status?: {
        status?: string(name='Status'),
        label?: string(name='Label'),
      }(name='Status'),
    }
  ](name='DataList'),
}

model ListFunctionDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionDeploymentResponseBody(name='body'),
}

async function listFunctionDeploymentWithOptions(request: ListFunctionDeploymentRequest, runtime: Util.RuntimeOptions): ListFunctionDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFunctionDeployment', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunctionDeployment(request: ListFunctionDeploymentRequest): ListFunctionDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionDeploymentWithOptions(request, runtime);
}

model AddDingtalkOpenPlatformConfigRequest {
  appId?: string(name='AppId'),
  appSecret?: string(name='AppSecret'),
  spaceId?: string(name='SpaceId'),
}

model AddDingtalkOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDingtalkOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddDingtalkOpenPlatformConfigResponseBody(name='body'),
}

async function addDingtalkOpenPlatformConfigWithOptions(request: AddDingtalkOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): AddDingtalkOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDingtalkOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDingtalkOpenPlatformConfig(request: AddDingtalkOpenPlatformConfigRequest): AddDingtalkOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDingtalkOpenPlatformConfigWithOptions(request, runtime);
}

model CreateDBRestoreTaskRequest {
  spaceId?: string(name='SpaceId'),
  backupId?: string(name='BackupId'),
  originCollections?: string(name='OriginCollections'),
  newCollections?: string(name='NewCollections'),
}

model CreateDBRestoreTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateDBRestoreTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBRestoreTaskResponseBody(name='body'),
}

async function createDBRestoreTaskWithOptions(request: CreateDBRestoreTaskRequest, runtime: Util.RuntimeOptions): CreateDBRestoreTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBRestoreTask', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBRestoreTask(request: CreateDBRestoreTaskRequest): CreateDBRestoreTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBRestoreTaskWithOptions(request, runtime);
}

model AttachWebHostingCertificateRequest {
  spaceId?: string(name='SpaceId'),
  domain?: string(name='Domain'),
  certType?: string(name='CertType'),
  certName?: string(name='CertName'),
  serverCertificate?: string(name='ServerCertificate'),
  privateKey?: string(name='PrivateKey'),
}

model AttachWebHostingCertificateResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model AttachWebHostingCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: AttachWebHostingCertificateResponseBody(name='body'),
}

async function attachWebHostingCertificateWithOptions(request: AttachWebHostingCertificateRequest, runtime: Util.RuntimeOptions): AttachWebHostingCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachWebHostingCertificate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachWebHostingCertificate(request: AttachWebHostingCertificateRequest): AttachWebHostingCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachWebHostingCertificateWithOptions(request, runtime);
}

model ListFileRequest {
  spaceId?: string(name='SpaceId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  keyword?: string(name='Keyword'),
}

model ListFileResponseBody = {
  requestId?: string(name='RequestId'),
  paginator?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Paginator'),
  dataList?: [ 
    {
      type?: string(name='Type'),
      size?: int32(name='Size'),
      gmtCreate?: string(name='GmtCreate'),
      url?: string(name='Url'),
      gmtModified?: string(name='GmtModified'),
      name?: string(name='Name'),
      id?: string(name='Id'),
    }
  ](name='DataList'),
}

model ListFileResponse = {
  headers: map[string]string(name='headers'),
  body: ListFileResponseBody(name='body'),
}

async function listFileWithOptions(request: ListFileRequest, runtime: Util.RuntimeOptions): ListFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFile(request: ListFileRequest): ListFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileWithOptions(request, runtime);
}

model QueryDBRestoreTaskStatusRequest {
  spaceId?: string(name='SpaceId'),
  taskId?: string(name='TaskId'),
}

model QueryDBRestoreTaskStatusResponseBody = {
  status?: string(name='Status'),
  failedCount?: long(name='FailedCount'),
  requestId?: string(name='RequestId'),
  detailMessage?: string(name='DetailMessage'),
  successCount?: long(name='SuccessCount'),
}

model QueryDBRestoreTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBRestoreTaskStatusResponseBody(name='body'),
}

async function queryDBRestoreTaskStatusWithOptions(request: QueryDBRestoreTaskStatusRequest, runtime: Util.RuntimeOptions): QueryDBRestoreTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDBRestoreTaskStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDBRestoreTaskStatus(request: QueryDBRestoreTaskStatusRequest): QueryDBRestoreTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDBRestoreTaskStatusWithOptions(request, runtime);
}

model VerifyWebHostingDomainOwnerRequest {
  spaceId?: string(name='SpaceId'),
  domain?: string(name='Domain'),
  verifyType?: string(name='VerifyType'),
}

model VerifyWebHostingDomainOwnerResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model VerifyWebHostingDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyWebHostingDomainOwnerResponseBody(name='body'),
}

async function verifyWebHostingDomainOwnerWithOptions(request: VerifyWebHostingDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyWebHostingDomainOwnerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyWebHostingDomainOwner', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyWebHostingDomainOwner(request: VerifyWebHostingDomainOwnerRequest): VerifyWebHostingDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyWebHostingDomainOwnerWithOptions(request, runtime);
}

model DeleteSmsTemplateRequest {
  templateCode?: string(name='TemplateCode'),
  spaceId?: string(name='SpaceId'),
}

model DeleteSmsTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsTemplateResponseBody(name='body'),
}

async function deleteSmsTemplateWithOptions(request: DeleteSmsTemplateRequest, runtime: Util.RuntimeOptions): DeleteSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSmsTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSmsTemplate(request: DeleteSmsTemplateRequest): DeleteSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmsTemplateWithOptions(request, runtime);
}

model QueryDBExportTaskStatusRequest {
  spaceId?: string(name='SpaceId'),
  taskId?: string(name='TaskId'),
}

model QueryDBExportTaskStatusResponseBody = {
  exportedCount?: string(name='ExportedCount'),
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  downloadUrl?: string(name='DownloadUrl'),
  detailMessage?: string(name='DetailMessage'),
}

model QueryDBExportTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBExportTaskStatusResponseBody(name='body'),
}

async function queryDBExportTaskStatusWithOptions(request: QueryDBExportTaskStatusRequest, runtime: Util.RuntimeOptions): QueryDBExportTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDBExportTaskStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDBExportTaskStatus(request: QueryDBExportTaskStatusRequest): QueryDBExportTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDBExportTaskStatusWithOptions(request, runtime);
}

model CreateDBImportTaskRequest {
  spaceId?: string(name='SpaceId'),
  collection?: string(name='Collection'),
  fileType?: string(name='FileType'),
  mode?: string(name='Mode'),
}

model CreateDBImportTaskResponseBody = {
  host?: string(name='Host'),
  expireTime?: string(name='ExpireTime'),
  fileKey?: string(name='FileKey'),
  accessKeyId?: string(name='AccessKeyId'),
  signature?: string(name='Signature'),
  requestId?: string(name='RequestId'),
  policy?: string(name='Policy'),
  taskId?: string(name='TaskId'),
}

model CreateDBImportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBImportTaskResponseBody(name='body'),
}

async function createDBImportTaskWithOptions(request: CreateDBImportTaskRequest, runtime: Util.RuntimeOptions): CreateDBImportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBImportTask', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBImportTask(request: CreateDBImportTaskRequest): CreateDBImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBImportTaskWithOptions(request, runtime);
}

model CheckSmsHasAuthorizedToMPSRequest {
  spaceId?: string(name='SpaceId'),
}

model CheckSmsHasAuthorizedToMPSResponseBody = {
  requestId?: string(name='RequestId'),
  isAuthorized?: boolean(name='IsAuthorized'),
}

model CheckSmsHasAuthorizedToMPSResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSmsHasAuthorizedToMPSResponseBody(name='body'),
}

async function checkSmsHasAuthorizedToMPSWithOptions(request: CheckSmsHasAuthorizedToMPSRequest, runtime: Util.RuntimeOptions): CheckSmsHasAuthorizedToMPSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckSmsHasAuthorizedToMPS', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkSmsHasAuthorizedToMPS(request: CheckSmsHasAuthorizedToMPSRequest): CheckSmsHasAuthorizedToMPSResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSmsHasAuthorizedToMPSWithOptions(request, runtime);
}

model DescribeServicePolicyRequest {
  spaceId?: string(name='SpaceId'),
  serviceName?: string(name='ServiceName'),
  collectionName?: string(name='CollectionName'),
}

model DescribeServicePolicyResponseBody = {
  spaceId?: string(name='SpaceId'),
  requestId?: string(name='RequestId'),
  policy?: string(name='Policy'),
  policyName?: string(name='PolicyName'),
  serviceName?: string(name='ServiceName'),
  collectionName?: string(name='CollectionName'),
}

model DescribeServicePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServicePolicyResponseBody(name='body'),
}

async function describeServicePolicyWithOptions(request: DescribeServicePolicyRequest, runtime: Util.RuntimeOptions): DescribeServicePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeServicePolicy', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeServicePolicy(request: DescribeServicePolicyRequest): DescribeServicePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServicePolicyWithOptions(request, runtime);
}

model ListSmsTemplatesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  spaceId?: string(name='SpaceId'),
}

model ListSmsTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  smsTemplates?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      templateContent?: string(name='TemplateContent'),
      remark?: string(name='Remark'),
      templateCode?: string(name='TemplateCode'),
      createTime?: string(name='CreateTime'),
      templateType?: int32(name='TemplateType'),
      templateName?: string(name='TemplateName'),
    }
  ](name='SmsTemplates'),
}

model ListSmsTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmsTemplatesResponseBody(name='body'),
}

async function listSmsTemplatesWithOptions(request: ListSmsTemplatesRequest, runtime: Util.RuntimeOptions): ListSmsTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSmsTemplates', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSmsTemplates(request: ListSmsTemplatesRequest): ListSmsTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmsTemplatesWithOptions(request, runtime);
}

model QueryDBBackupCollectionsRequest {
  spaceId?: string(name='SpaceId'),
  backupId?: string(name='BackupId'),
}

model QueryDBBackupCollectionsResponseBody = {
  requestId?: string(name='RequestId'),
  collections?: [ string ](name='Collections'),
}

model QueryDBBackupCollectionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBBackupCollectionsResponseBody(name='body'),
}

async function queryDBBackupCollectionsWithOptions(request: QueryDBBackupCollectionsRequest, runtime: Util.RuntimeOptions): QueryDBBackupCollectionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDBBackupCollections', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDBBackupCollections(request: QueryDBBackupCollectionsRequest): QueryDBBackupCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDBBackupCollectionsWithOptions(request, runtime);
}

model QueryServiceStatusRequest {
  spaceId?: string(name='SpaceId'),
  serviceName?: string(name='ServiceName'),
}

model QueryServiceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  serviceStatus?: string(name='ServiceStatus'),
  count?: int32(name='Count'),
}

model QueryServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServiceStatusResponseBody(name='body'),
}

async function queryServiceStatusWithOptions(request: QueryServiceStatusRequest, runtime: Util.RuntimeOptions): QueryServiceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryServiceStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryServiceStatus(request: QueryServiceStatusRequest): QueryServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServiceStatusWithOptions(request, runtime);
}

model DescribeSpaceClientConfigRequest {
  spaceId?: string(name='SpaceId'),
  detail?: string(name='Detail'),
  workspaceId?: long(name='WorkspaceId'),
}

model DescribeSpaceClientConfigResponseBody = {
  apiKey?: string(name='ApiKey'),
  spaceId?: string(name='SpaceId'),
  requestId?: string(name='RequestId'),
  privateKey?: string(name='PrivateKey'),
  endpoint?: string(name='Endpoint'),
  fileUploadEndpoint?: string(name='FileUploadEndpoint'),
  name?: string(name='Name'),
}

model DescribeSpaceClientConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpaceClientConfigResponseBody(name='body'),
}

async function describeSpaceClientConfigWithOptions(request: DescribeSpaceClientConfigRequest, runtime: Util.RuntimeOptions): DescribeSpaceClientConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSpaceClientConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSpaceClientConfig(request: DescribeSpaceClientConfigRequest): DescribeSpaceClientConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpaceClientConfigWithOptions(request, runtime);
}

model SaveBuiltinFunctionTemplateRequest {
  bizId?: string(name='BizId'),
  builtinFunctionTemplateCategoryId?: string(name='BuiltinFunctionTemplateCategoryId'),
  builtinFunctionTemplateProfile?: string(name='BuiltinFunctionTemplateProfile'),
}

model SaveBuiltinFunctionTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  builtinFunctionTemplateId?: string(name='BuiltinFunctionTemplateId'),
}

model SaveBuiltinFunctionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: SaveBuiltinFunctionTemplateResponseBody(name='body'),
}

async function saveBuiltinFunctionTemplateWithOptions(request: SaveBuiltinFunctionTemplateRequest, runtime: Util.RuntimeOptions): SaveBuiltinFunctionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveBuiltinFunctionTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveBuiltinFunctionTemplate(request: SaveBuiltinFunctionTemplateRequest): SaveBuiltinFunctionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveBuiltinFunctionTemplateWithOptions(request, runtime);
}

model DescribeISVFileUploadSignedUrlRequest {
  filename?: string(name='Filename'),
  bucketName?: string(name='BucketName'),
  tenantId?: string(name='TenantId'),
}

model DescribeISVFileUploadSignedUrlResponseBody = {
  signUrl?: string(name='SignUrl'),
  requestId?: string(name='RequestId'),
  id?: string(name='Id'),
}

model DescribeISVFileUploadSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeISVFileUploadSignedUrlResponseBody(name='body'),
}

async function describeISVFileUploadSignedUrlWithOptions(request: DescribeISVFileUploadSignedUrlRequest, runtime: Util.RuntimeOptions): DescribeISVFileUploadSignedUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeISVFileUploadSignedUrl', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeISVFileUploadSignedUrl(request: DescribeISVFileUploadSignedUrlRequest): DescribeISVFileUploadSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeISVFileUploadSignedUrlWithOptions(request, runtime);
}

model CreateBuiltinFunctionTemplateRequest {
  builtinFunctionTemplateCategoryId?: string(name='BuiltinFunctionTemplateCategoryId'),
}

model CreateBuiltinFunctionTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  bizId?: string(name='BizId'),
  artifactUploadUrl?: string(name='ArtifactUploadUrl'),
}

model CreateBuiltinFunctionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBuiltinFunctionTemplateResponseBody(name='body'),
}

async function createBuiltinFunctionTemplateWithOptions(request: CreateBuiltinFunctionTemplateRequest, runtime: Util.RuntimeOptions): CreateBuiltinFunctionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBuiltinFunctionTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBuiltinFunctionTemplate(request: CreateBuiltinFunctionTemplateRequest): CreateBuiltinFunctionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBuiltinFunctionTemplateWithOptions(request, runtime);
}

model GetWebHostingStatusRequest {
  spaceId?: string(name='SpaceId'),
}

model GetWebHostingStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    spaceId?: string(name='SpaceId'),
  }(name='Data'),
}

model GetWebHostingStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingStatusResponseBody(name='body'),
}

async function getWebHostingStatusWithOptions(request: GetWebHostingStatusRequest, runtime: Util.RuntimeOptions): GetWebHostingStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWebHostingStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWebHostingStatus(request: GetWebHostingStatusRequest): GetWebHostingStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebHostingStatusWithOptions(request, runtime);
}

model ListFunctionLogRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  spaceId?: string(name='SpaceId'),
  logRequestId?: string(name='LogRequestId'),
  fromDate?: long(name='FromDate'),
  toDate?: long(name='ToDate'),
  status?: string(name='Status'),
}

model ListFunctionLogResponseBody = {
  requestId?: string(name='RequestId'),
  paginator?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Paginator'),
  dataList?: [ 
    {
      status?: string(name='Status'),
      spaceId?: string(name='SpaceId'),
      requestId?: string(name='RequestId'),
      functionName?: string(name='FunctionName'),
      timestamps?: [ string ](name='Timestamps'),
      contents?: [ string ](name='Contents'),
      levels?: [ string ](name='Levels'),
    }
  ](name='DataList'),
}

model ListFunctionLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionLogResponseBody(name='body'),
}

async function listFunctionLogWithOptions(request: ListFunctionLogRequest, runtime: Util.RuntimeOptions): ListFunctionLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFunctionLog', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunctionLog(request: ListFunctionLogRequest): ListFunctionLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionLogWithOptions(request, runtime);
}

model ListWebHostingFilesRequest {
  spaceId?: string(name='SpaceId'),
  prefix?: string(name='Prefix'),
  marker?: string(name='Marker'),
  pageSize?: int32(name='PageSize'),
}

model ListWebHostingFilesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    nextMarker?: string(name='NextMarker'),
    count?: int32(name='Count'),
    webHostingFiles?: [ 
      {
        filePath?: string(name='FilePath'),
        contentType?: string(name='ContentType'),
        ETag?: string(name='ETag'),
        size?: long(name='Size'),
        lastModifiedTime?: long(name='LastModifiedTime'),
        signedUrl?: string(name='SignedUrl'),
      }
    ](name='WebHostingFiles'),
  }(name='Data'),
}

model ListWebHostingFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWebHostingFilesResponseBody(name='body'),
}

async function listWebHostingFilesWithOptions(request: ListWebHostingFilesRequest, runtime: Util.RuntimeOptions): ListWebHostingFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListWebHostingFiles', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listWebHostingFiles(request: ListWebHostingFilesRequest): ListWebHostingFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWebHostingFilesWithOptions(request, runtime);
}

model DescribeFileRequest {
  id?: string(name='Id'),
  spaceId?: string(name='SpaceId'),
}

model DescribeFileResponseBody = {
  type?: string(name='Type'),
  url?: string(name='Url'),
  gmtModified?: string(name='GmtModified'),
  requestId?: string(name='RequestId'),
  size?: float(name='Size'),
  gmtCreate?: string(name='GmtCreate'),
  name?: string(name='Name'),
  id?: string(name='Id'),
}

model DescribeFileResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileResponseBody(name='body'),
}

async function describeFileWithOptions(request: DescribeFileRequest, runtime: Util.RuntimeOptions): DescribeFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFile(request: DescribeFileRequest): DescribeFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileWithOptions(request, runtime);
}

model MoveWebHostingFileRequest {
  spaceId?: string(name='SpaceId'),
  sourceFilePath?: string(name='SourceFilePath'),
  targetFilePath?: string(name='TargetFilePath'),
}

model MoveWebHostingFileResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model MoveWebHostingFileResponse = {
  headers: map[string]string(name='headers'),
  body: MoveWebHostingFileResponseBody(name='body'),
}

async function moveWebHostingFileWithOptions(request: MoveWebHostingFileRequest, runtime: Util.RuntimeOptions): MoveWebHostingFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveWebHostingFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveWebHostingFile(request: MoveWebHostingFileRequest): MoveWebHostingFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveWebHostingFileWithOptions(request, runtime);
}

model CreateSmsTemplateRequest {
  spaceId?: string(name='SpaceId'),
  templateType?: int32(name='TemplateType'),
  templateName?: string(name='TemplateName'),
  templateContent?: string(name='TemplateContent'),
  remark?: string(name='Remark'),
}

model CreateSmsTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSmsTemplateResponseBody(name='body'),
}

async function createSmsTemplateWithOptions(request: CreateSmsTemplateRequest, runtime: Util.RuntimeOptions): CreateSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSmsTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSmsTemplate(request: CreateSmsTemplateRequest): CreateSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmsTemplateWithOptions(request, runtime);
}

model DescribeSmsTemplateStatusRequest {
  templateCodes?: string(name='TemplateCodes'),
  spaceId?: string(name='SpaceId'),
}

model DescribeSmsTemplateStatusResponseBody = {
  requestId?: string(name='RequestId'),
  templateStatuses?: [ 
    {
      templateCode?: string(name='TemplateCode'),
      reason?: string(name='Reason'),
      templateStatus?: string(name='TemplateStatus'),
    }
  ](name='TemplateStatuses'),
}

model DescribeSmsTemplateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSmsTemplateStatusResponseBody(name='body'),
}

async function describeSmsTemplateStatusWithOptions(request: DescribeSmsTemplateStatusRequest, runtime: Util.RuntimeOptions): DescribeSmsTemplateStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSmsTemplateStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSmsTemplateStatus(request: DescribeSmsTemplateStatusRequest): DescribeSmsTemplateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmsTemplateStatusWithOptions(request, runtime);
}

model BindWebHostingCustomDomainRequest {
  spaceId?: string(name='SpaceId'),
  customDomain?: string(name='CustomDomain'),
}

model BindWebHostingCustomDomainResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model BindWebHostingCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BindWebHostingCustomDomainResponseBody(name='body'),
}

async function bindWebHostingCustomDomainWithOptions(request: BindWebHostingCustomDomainRequest, runtime: Util.RuntimeOptions): BindWebHostingCustomDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindWebHostingCustomDomain', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindWebHostingCustomDomain(request: BindWebHostingCustomDomainRequest): BindWebHostingCustomDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindWebHostingCustomDomainWithOptions(request, runtime);
}

model CreateFunctionRequest {
  name?: string(name='Name'),
  desc?: string(name='Desc'),
  spaceId?: string(name='SpaceId'),
  runtime?: string(name='Runtime'),
}

model CreateFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  createdAt?: string(name='CreatedAt'),
  name?: string(name='Name'),
  modifiedAt?: string(name='ModifiedAt'),
  desc?: string(name='Desc'),
  spec?: {
    timeout?: string(name='Timeout'),
    runtime?: string(name='Runtime'),
    instanceConcurrency?: string(name='InstanceConcurrency'),
    memory?: string(name='Memory'),
  }(name='Spec'),
}

model CreateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionResponseBody(name='body'),
}

async function createFunctionWithOptions(request: CreateFunctionRequest, runtime: Util.RuntimeOptions): CreateFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFunctionWithOptions(request, runtime);
}

model DeleteDingtalkOpenPlatformConfigRequest {
  appId?: string(name='AppId'),
  spaceId?: string(name='SpaceId'),
}

model DeleteDingtalkOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDingtalkOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDingtalkOpenPlatformConfigResponseBody(name='body'),
}

async function deleteDingtalkOpenPlatformConfigWithOptions(request: DeleteDingtalkOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): DeleteDingtalkOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDingtalkOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDingtalkOpenPlatformConfig(request: DeleteDingtalkOpenPlatformConfigRequest): DeleteDingtalkOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDingtalkOpenPlatformConfigWithOptions(request, runtime);
}

model ListExtensionsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListExtensionsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  extensions?: [ 
    {
      extensionDocumentationLink?: string(name='ExtensionDocumentationLink'),
      extensionId?: string(name='ExtensionId'),
      extensionDesc?: string(name='ExtensionDesc'),
      extensionName?: string(name='ExtensionName'),
      enabled?: string(name='Enabled'),
    }
  ](name='Extensions'),
}

model ListExtensionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListExtensionsResponseBody(name='body'),
}

async function listExtensionsWithOptions(request: ListExtensionsRequest, runtime: Util.RuntimeOptions): ListExtensionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListExtensions', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listExtensions(request: ListExtensionsRequest): ListExtensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExtensionsWithOptions(request, runtime);
}

model EnableSmsServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableSmsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSmsServiceResponseBody(name='body'),
}

async function enableSmsServiceWithOptions(runtime: Util.RuntimeOptions): EnableSmsServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('EnableSmsService', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableSmsService(): EnableSmsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSmsServiceWithOptions(runtime);
}

model ReleaseBuiltinFunctionTemplateRequest {
  builtinFunctionTemplateId?: string(name='BuiltinFunctionTemplateId'),
}

model ReleaseBuiltinFunctionTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseBuiltinFunctionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseBuiltinFunctionTemplateResponseBody(name='body'),
}

async function releaseBuiltinFunctionTemplateWithOptions(request: ReleaseBuiltinFunctionTemplateRequest, runtime: Util.RuntimeOptions): ReleaseBuiltinFunctionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseBuiltinFunctionTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseBuiltinFunctionTemplate(request: ReleaseBuiltinFunctionTemplateRequest): ReleaseBuiltinFunctionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseBuiltinFunctionTemplateWithOptions(request, runtime);
}

model CreateSmsSignRequest {
  signName?: string(name='SignName'),
  remark?: string(name='Remark'),
  spaceId?: string(name='SpaceId'),
}

model CreateSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSmsSignResponseBody(name='body'),
}

async function createSmsSignWithOptions(request: CreateSmsSignRequest, runtime: Util.RuntimeOptions): CreateSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSmsSign', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSmsSign(request: CreateSmsSignRequest): CreateSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmsSignWithOptions(request, runtime);
}

model UpdateFunctionRequest {
  desc?: string(name='Desc'),
  name?: string(name='Name'),
  spaceId?: string(name='SpaceId'),
  memory?: int32(name='Memory'),
  timeout?: int32(name='Timeout'),
  httpTriggerPath?: string(name='HttpTriggerPath'),
  timingTriggerConfig?: string(name='TimingTriggerConfig'),
  instanceConcurrency?: int32(name='InstanceConcurrency'),
  runtime?: string(name='Runtime'),
}

model UpdateFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  timingTriggerConfig?: string(name='TimingTriggerConfig'),
  httpTriggerPath?: string(name='HttpTriggerPath'),
  createdAt?: string(name='CreatedAt'),
  name?: string(name='Name'),
  modifiedAt?: string(name='ModifiedAt'),
  desc?: string(name='Desc'),
  spec?: {
    timeout?: string(name='Timeout'),
    runtime?: string(name='Runtime'),
    instanceConcurrency?: int32(name='InstanceConcurrency'),
    memory?: string(name='Memory'),
  }(name='Spec'),
}

model UpdateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFunctionResponseBody(name='body'),
}

async function updateFunctionWithOptions(request: UpdateFunctionRequest, runtime: Util.RuntimeOptions): UpdateFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFunctionWithOptions(request, runtime);
}

model UpdateHttpTriggerConfigRequest {
  enableService?: boolean(name='EnableService'),
  spaceId?: string(name='SpaceId'),
  customDomain?: string(name='CustomDomain'),
  customDomainCertificate?: string(name='CustomDomainCertificate'),
  customDomainPrivateKey?: string(name='CustomDomainPrivateKey'),
}

model UpdateHttpTriggerConfigResponseBody = {
  enableService?: boolean(name='EnableService'),
  customDomainCname?: string(name='CustomDomainCname'),
  requestId?: string(name='RequestId'),
  defaultEndpoint?: string(name='DefaultEndpoint'),
  customDomainCertificateInfo?: string(name='CustomDomainCertificateInfo'),
  customDomain?: string(name='CustomDomain'),
}

model UpdateHttpTriggerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHttpTriggerConfigResponseBody(name='body'),
}

async function updateHttpTriggerConfigWithOptions(request: UpdateHttpTriggerConfigRequest, runtime: Util.RuntimeOptions): UpdateHttpTriggerConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateHttpTriggerConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateHttpTriggerConfig(request: UpdateHttpTriggerConfigRequest): UpdateHttpTriggerConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHttpTriggerConfigWithOptions(request, runtime);
}

model ResetServerSecretRequest {
  spaceId?: string(name='SpaceId'),
}

model ResetServerSecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetServerSecretResponse = {
  headers: map[string]string(name='headers'),
  body: ResetServerSecretResponseBody(name='body'),
}

async function resetServerSecretWithOptions(request: ResetServerSecretRequest, runtime: Util.RuntimeOptions): ResetServerSecretResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetServerSecret', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetServerSecret(request: ResetServerSecretRequest): ResetServerSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetServerSecretWithOptions(request, runtime);
}

model GetWebHostingDomainVerificationContentRequest {
  spaceId?: string(name='SpaceId'),
  domain?: string(name='Domain'),
}

model GetWebHostingDomainVerificationContentResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    content?: string(name='Content'),
    domain?: string(name='Domain'),
  }(name='Data'),
}

model GetWebHostingDomainVerificationContentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingDomainVerificationContentResponseBody(name='body'),
}

async function getWebHostingDomainVerificationContentWithOptions(request: GetWebHostingDomainVerificationContentRequest, runtime: Util.RuntimeOptions): GetWebHostingDomainVerificationContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWebHostingDomainVerificationContent', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWebHostingDomainVerificationContent(request: GetWebHostingDomainVerificationContentRequest): GetWebHostingDomainVerificationContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebHostingDomainVerificationContentWithOptions(request, runtime);
}

model UpdateDingtalkOpenPlatformConfigRequest {
  appId?: string(name='AppId'),
  appSecret?: string(name='AppSecret'),
  spaceId?: string(name='SpaceId'),
}

model UpdateDingtalkOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDingtalkOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDingtalkOpenPlatformConfigResponseBody(name='body'),
}

async function updateDingtalkOpenPlatformConfigWithOptions(request: UpdateDingtalkOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): UpdateDingtalkOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDingtalkOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDingtalkOpenPlatformConfig(request: UpdateDingtalkOpenPlatformConfigRequest): UpdateDingtalkOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDingtalkOpenPlatformConfigWithOptions(request, runtime);
}

model CheckMpServerlessRoleExistsRequest {
  roleName?: string(name='RoleName'),
}

model CheckMpServerlessRoleExistsResponseBody = {
  requestId?: string(name='RequestId'),
  exists?: boolean(name='Exists'),
}

model CheckMpServerlessRoleExistsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckMpServerlessRoleExistsResponseBody(name='body'),
}

async function checkMpServerlessRoleExistsWithOptions(request: CheckMpServerlessRoleExistsRequest, runtime: Util.RuntimeOptions): CheckMpServerlessRoleExistsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckMpServerlessRoleExists', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkMpServerlessRoleExists(request: CheckMpServerlessRoleExistsRequest): CheckMpServerlessRoleExistsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMpServerlessRoleExistsWithOptions(request, runtime);
}

model EnableExtensionRequest {
  extensionId?: string(name='ExtensionId'),
}

model EnableExtensionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableExtensionResponseBody(name='body'),
}

async function enableExtensionWithOptions(request: EnableExtensionRequest, runtime: Util.RuntimeOptions): EnableExtensionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableExtension', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableExtension(request: EnableExtensionRequest): EnableExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableExtensionWithOptions(request, runtime);
}

model ListSmsSignsForAccountRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  spaceId?: string(name='SpaceId'),
}

model ListSmsSignsForAccountResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  smsSigns?: [ 
    {
      signName?: string(name='SignName'),
    }
  ](name='SmsSigns'),
}

model ListSmsSignsForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmsSignsForAccountResponseBody(name='body'),
}

async function listSmsSignsForAccountWithOptions(request: ListSmsSignsForAccountRequest, runtime: Util.RuntimeOptions): ListSmsSignsForAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSmsSignsForAccount', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSmsSignsForAccount(request: ListSmsSignsForAccountRequest): ListSmsSignsForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmsSignsForAccountWithOptions(request, runtime);
}

model ListCorsDomainsRequest {
  spaceId?: string(name='SpaceId'),
}

model ListCorsDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  domains?: [ 
    {
      domain?: string(name='Domain'),
      domainId?: string(name='DomainId'),
    }
  ](name='Domains'),
}

model ListCorsDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorsDomainsResponseBody(name='body'),
}

async function listCorsDomainsWithOptions(request: ListCorsDomainsRequest, runtime: Util.RuntimeOptions): ListCorsDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCorsDomains', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCorsDomains(request: ListCorsDomainsRequest): ListCorsDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorsDomainsWithOptions(request, runtime);
}

model ListDingtalkOpenPlatformConfigsRequest {
  spaceId?: string(name='SpaceId'),
}

model ListDingtalkOpenPlatformConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  configs?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      appSecret?: string(name='AppSecret'),
      appId?: string(name='AppId'),
      createTime?: string(name='CreateTime'),
    }
  ](name='Configs'),
}

model ListDingtalkOpenPlatformConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDingtalkOpenPlatformConfigsResponseBody(name='body'),
}

async function listDingtalkOpenPlatformConfigsWithOptions(request: ListDingtalkOpenPlatformConfigsRequest, runtime: Util.RuntimeOptions): ListDingtalkOpenPlatformConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDingtalkOpenPlatformConfigs', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDingtalkOpenPlatformConfigs(request: ListDingtalkOpenPlatformConfigsRequest): ListDingtalkOpenPlatformConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDingtalkOpenPlatformConfigsWithOptions(request, runtime);
}

model CreateDBExportTaskRequest {
  spaceId?: string(name='SpaceId'),
  collection?: string(name='Collection'),
  fileType?: string(name='FileType'),
  fields?: string(name='Fields'),
}

model CreateDBExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateDBExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBExportTaskResponseBody(name='body'),
}

async function createDBExportTaskWithOptions(request: CreateDBExportTaskRequest, runtime: Util.RuntimeOptions): CreateDBExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBExportTask', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBExportTask(request: CreateDBExportTaskRequest): CreateDBExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBExportTaskWithOptions(request, runtime);
}

model GetWebHostingConfigRequest {
  spaceId?: string(name='SpaceId'),
}

model GetWebHostingConfigResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    spaceId?: string(name='SpaceId'),
    allowedIps?: string(name='AllowedIps'),
    errorPath?: string(name='ErrorPath'),
    defaultDomain?: string(name='DefaultDomain'),
    indexPath?: string(name='IndexPath'),
  }(name='Data'),
}

model GetWebHostingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebHostingConfigResponseBody(name='body'),
}

async function getWebHostingConfigWithOptions(request: GetWebHostingConfigRequest, runtime: Util.RuntimeOptions): GetWebHostingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWebHostingConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWebHostingConfig(request: GetWebHostingConfigRequest): GetWebHostingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebHostingConfigWithOptions(request, runtime);
}

model UnbindWebHostingCustomDomainRequest {
  spaceId?: string(name='SpaceId'),
  customDomain?: string(name='CustomDomain'),
}

model UnbindWebHostingCustomDomainResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model UnbindWebHostingCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindWebHostingCustomDomainResponseBody(name='body'),
}

async function unbindWebHostingCustomDomainWithOptions(request: UnbindWebHostingCustomDomainRequest, runtime: Util.RuntimeOptions): UnbindWebHostingCustomDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindWebHostingCustomDomain', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindWebHostingCustomDomain(request: UnbindWebHostingCustomDomainRequest): UnbindWebHostingCustomDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindWebHostingCustomDomainWithOptions(request, runtime);
}

model DescribeSmsTemplateRequest {
  templateCode?: string(name='TemplateCode'),
  spaceId?: string(name='SpaceId'),
}

model DescribeSmsTemplateResponseBody = {
  updateTime?: string(name='UpdateTime'),
  templateContent?: string(name='TemplateContent'),
  requestId?: string(name='RequestId'),
  createTime?: string(name='CreateTime'),
  templateType?: string(name='TemplateType'),
  templateName?: string(name='TemplateName'),
}

model DescribeSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSmsTemplateResponseBody(name='body'),
}

async function describeSmsTemplateWithOptions(request: DescribeSmsTemplateRequest, runtime: Util.RuntimeOptions): DescribeSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSmsTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSmsTemplate(request: DescribeSmsTemplateRequest): DescribeSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmsTemplateWithOptions(request, runtime);
}

model SaveWebHostingCustomDomainCorsConfigRequest {
  spaceId?: string(name='SpaceId'),
  domainName?: string(name='DomainName'),
  enableCors?: boolean(name='EnableCors'),
  accessControlAllowOrigin?: string(name='AccessControlAllowOrigin'),
}

model SaveWebHostingCustomDomainCorsConfigResponseBody = {
  code?: string(name='Code', description='Id of the request'),
  message?: string(name='Message'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: boolean(name='Data'),
}

model SaveWebHostingCustomDomainCorsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebHostingCustomDomainCorsConfigResponseBody(name='body'),
}

async function saveWebHostingCustomDomainCorsConfigWithOptions(request: SaveWebHostingCustomDomainCorsConfigRequest, runtime: Util.RuntimeOptions): SaveWebHostingCustomDomainCorsConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveWebHostingCustomDomainCorsConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveWebHostingCustomDomainCorsConfig(request: SaveWebHostingCustomDomainCorsConfigRequest): SaveWebHostingCustomDomainCorsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebHostingCustomDomainCorsConfigWithOptions(request, runtime);
}

model BatchDeleteWebHostingFilesRequest {
  spaceId?: string(name='SpaceId'),
  filePaths?: [ string ](name='FilePaths'),
}

model BatchDeleteWebHostingFilesResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model BatchDeleteWebHostingFilesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteWebHostingFilesResponseBody(name='body'),
}

async function batchDeleteWebHostingFilesWithOptions(request: BatchDeleteWebHostingFilesRequest, runtime: Util.RuntimeOptions): BatchDeleteWebHostingFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeleteWebHostingFiles', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeleteWebHostingFiles(request: BatchDeleteWebHostingFilesRequest): BatchDeleteWebHostingFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteWebHostingFilesWithOptions(request, runtime);
}

model DeleteCorsDomainRequest {
  domainId?: string(name='DomainId'),
  spaceId?: string(name='SpaceId'),
}

model DeleteCorsDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCorsDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCorsDomainResponseBody(name='body'),
}

async function deleteCorsDomainWithOptions(request: DeleteCorsDomainRequest, runtime: Util.RuntimeOptions): DeleteCorsDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCorsDomain', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCorsDomain(request: DeleteCorsDomainRequest): DeleteCorsDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCorsDomainWithOptions(request, runtime);
}

model DescribeHttpTriggerConfigRequest {
  spaceId?: string(name='SpaceId'),
}

model DescribeHttpTriggerConfigResponseBody = {
  enableService?: boolean(name='EnableService'),
  customDomainCname?: string(name='CustomDomainCname'),
  requestId?: string(name='RequestId'),
  defaultEndpoint?: string(name='DefaultEndpoint'),
  customDomainCertificateInfo?: string(name='CustomDomainCertificateInfo'),
  customDomain?: string(name='CustomDomain'),
}

model DescribeHttpTriggerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHttpTriggerConfigResponseBody(name='body'),
}

async function describeHttpTriggerConfigWithOptions(request: DescribeHttpTriggerConfigRequest, runtime: Util.RuntimeOptions): DescribeHttpTriggerConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHttpTriggerConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHttpTriggerConfig(request: DescribeHttpTriggerConfigRequest): DescribeHttpTriggerConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHttpTriggerConfigWithOptions(request, runtime);
}

model SaveAppAuthTokenRequest {
  spaceId?: string(name='SpaceId'),
  isvAppId?: string(name='IsvAppId'),
  appId?: string(name='AppId'),
  appAuthToken?: string(name='AppAuthToken'),
}

model SaveAppAuthTokenResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveAppAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: SaveAppAuthTokenResponseBody(name='body'),
}

async function saveAppAuthTokenWithOptions(request: SaveAppAuthTokenRequest, runtime: Util.RuntimeOptions): SaveAppAuthTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveAppAuthToken', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveAppAuthToken(request: SaveAppAuthTokenRequest): SaveAppAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveAppAuthTokenWithOptions(request, runtime);
}

model DescribeSmsSignStatusRequest {
  spaceId?: string(name='SpaceId'),
  signIds?: string(name='SignIds'),
}

model DescribeSmsSignStatusResponseBody = {
  requestId?: string(name='RequestId'),
  signStatuses?: [ 
    {
      signId?: string(name='SignId'),
      signStatus?: int32(name='SignStatus'),
      reason?: string(name='Reason'),
      signName?: string(name='SignName'),
    }
  ](name='SignStatuses'),
}

model DescribeSmsSignStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSmsSignStatusResponseBody(name='body'),
}

async function describeSmsSignStatusWithOptions(request: DescribeSmsSignStatusRequest, runtime: Util.RuntimeOptions): DescribeSmsSignStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSmsSignStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSmsSignStatus(request: DescribeSmsSignStatusRequest): DescribeSmsSignStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmsSignStatusWithOptions(request, runtime);
}

model SaveWechatOpenPlatformConfigRequest {
  spaceId?: string(name='SpaceId'),
  appId?: string(name='AppId'),
  appSecret?: string(name='AppSecret'),
}

model SaveWechatOpenPlatformConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveWechatOpenPlatformConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWechatOpenPlatformConfigResponseBody(name='body'),
}

async function saveWechatOpenPlatformConfigWithOptions(request: SaveWechatOpenPlatformConfigRequest, runtime: Util.RuntimeOptions): SaveWechatOpenPlatformConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveWechatOpenPlatformConfig', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveWechatOpenPlatformConfig(request: SaveWechatOpenPlatformConfigRequest): SaveWechatOpenPlatformConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWechatOpenPlatformConfigWithOptions(request, runtime);
}

model DescribeSpaceRequest {
  spaceId?: string(name='SpaceId'),
}

model DescribeSpaceResponseBody = {
  status?: string(name='Status'),
  spaceId?: string(name='SpaceId'),
  requestId?: string(name='RequestId'),
  gmtCreate?: string(name='GmtCreate'),
  name?: string(name='Name'),
  desc?: string(name='Desc'),
}

model DescribeSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpaceResponseBody(name='body'),
}

async function describeSpaceWithOptions(request: DescribeSpaceRequest, runtime: Util.RuntimeOptions): DescribeSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSpace', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSpace(request: DescribeSpaceRequest): DescribeSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpaceWithOptions(request, runtime);
}

model RenameDBCollectionRequest {
  spaceId?: string(name='SpaceId'),
  originCollection?: string(name='OriginCollection'),
  newCollection?: string(name='NewCollection'),
}

model RenameDBCollectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenameDBCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: RenameDBCollectionResponseBody(name='body'),
}

async function renameDBCollectionWithOptions(request: RenameDBCollectionRequest, runtime: Util.RuntimeOptions): RenameDBCollectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenameDBCollection', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renameDBCollection(request: RenameDBCollectionRequest): RenameDBCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameDBCollectionWithOptions(request, runtime);
}

model ListSmsSignsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  spaceId?: string(name='SpaceId'),
}

model ListSmsSignsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  smsSigns?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      signId?: string(name='SignId'),
      remark?: string(name='Remark'),
      signName?: string(name='SignName'),
      createTime?: string(name='CreateTime'),
    }
  ](name='SmsSigns'),
}

model ListSmsSignsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmsSignsResponseBody(name='body'),
}

async function listSmsSignsWithOptions(request: ListSmsSignsRequest, runtime: Util.RuntimeOptions): ListSmsSignsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSmsSigns', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSmsSigns(request: ListSmsSignsRequest): ListSmsSignsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmsSignsWithOptions(request, runtime);
}

model DescribeProductOpenStatusRequest {
  name?: string(name='Name'),
  desc?: string(name='Desc'),
  labels?: [ 
    {
      value?: string(name='Value'),
      name?: string(name='Name'),
    }
  ](name='Labels'),
}

model DescribeProductOpenStatusResponseBody = {
  spaceId?: string(name='SpaceId'),
  requestId?: string(name='RequestId'),
}

model DescribeProductOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductOpenStatusResponseBody(name='body'),
}

async function describeProductOpenStatusWithOptions(request: DescribeProductOpenStatusRequest, runtime: Util.RuntimeOptions): DescribeProductOpenStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProductOpenStatus', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProductOpenStatus(request: DescribeProductOpenStatusRequest): DescribeProductOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductOpenStatusWithOptions(request, runtime);
}

model UpdateSmsSignRequest {
  signId?: string(name='SignId'),
  remark?: string(name='Remark'),
  spaceId?: string(name='SpaceId'),
  signName?: string(name='SignName'),
}

model UpdateSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSmsSignResponseBody(name='body'),
}

async function updateSmsSignWithOptions(request: UpdateSmsSignRequest, runtime: Util.RuntimeOptions): UpdateSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSmsSign', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSmsSign(request: UpdateSmsSignRequest): UpdateSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmsSignWithOptions(request, runtime);
}

model DeleteWebHostingCertificateRequest {
  spaceId?: string(name='SpaceId'),
  domain?: string(name='Domain'),
}

model DeleteWebHostingCertificateResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteWebHostingCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebHostingCertificateResponseBody(name='body'),
}

async function deleteWebHostingCertificateWithOptions(request: DeleteWebHostingCertificateRequest, runtime: Util.RuntimeOptions): DeleteWebHostingCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWebHostingCertificate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWebHostingCertificate(request: DeleteWebHostingCertificateRequest): DeleteWebHostingCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebHostingCertificateWithOptions(request, runtime);
}

model QueryDBBackupDumpTimesRequest {
  spaceId?: string(name='SpaceId'),
}

model QueryDBBackupDumpTimesResponseBody = {
  requestId?: string(name='RequestId'),
  backupDumpTimes?: [ 
    {
      backupId?: string(name='BackupId'),
      dumpTime?: string(name='DumpTime'),
    }
  ](name='BackupDumpTimes'),
}

model QueryDBBackupDumpTimesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDBBackupDumpTimesResponseBody(name='body'),
}

async function queryDBBackupDumpTimesWithOptions(request: QueryDBBackupDumpTimesRequest, runtime: Util.RuntimeOptions): QueryDBBackupDumpTimesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDBBackupDumpTimes', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDBBackupDumpTimes(request: QueryDBBackupDumpTimesRequest): QueryDBBackupDumpTimesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDBBackupDumpTimesWithOptions(request, runtime);
}

model DeployFunctionRequest {
  deploymentId?: string(name='DeploymentId'),
  spaceId?: string(name='SpaceId'),
}

model DeployFunctionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DeployFunctionResponseBody(name='body'),
}

async function deployFunctionWithOptions(request: DeployFunctionRequest, runtime: Util.RuntimeOptions): DeployFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeployFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deployFunction(request: DeployFunctionRequest): DeployFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFunctionWithOptions(request, runtime);
}

model AttachSmsSignRequest {
  spaceId?: string(name='SpaceId'),
  signName?: string(name='SignName'),
}

model AttachSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: AttachSmsSignResponseBody(name='body'),
}

async function attachSmsSignWithOptions(request: AttachSmsSignRequest, runtime: Util.RuntimeOptions): AttachSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachSmsSign', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachSmsSign(request: AttachSmsSignRequest): AttachSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachSmsSignWithOptions(request, runtime);
}

model UpdateServicePolicyRequest {
  spaceId?: string(name='SpaceId'),
  serviceName?: string(name='ServiceName'),
  policy?: string(name='Policy'),
  collectionName?: string(name='CollectionName'),
  policyName?: string(name='PolicyName'),
}

model UpdateServicePolicyResponseBody = {
  spaceId?: string(name='SpaceId'),
  requestId?: string(name='RequestId'),
  policy?: string(name='Policy'),
  policyName?: string(name='PolicyName'),
  serviceName?: string(name='ServiceName'),
  collectionName?: string(name='CollectionName'),
}

model UpdateServicePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServicePolicyResponseBody(name='body'),
}

async function updateServicePolicyWithOptions(request: UpdateServicePolicyRequest, runtime: Util.RuntimeOptions): UpdateServicePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateServicePolicy', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateServicePolicy(request: UpdateServicePolicyRequest): UpdateServicePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServicePolicyWithOptions(request, runtime);
}

model AddCorsDomainRequest {
  domain?: string(name='Domain'),
  spaceId?: string(name='SpaceId'),
}

model AddCorsDomainResponseBody = {
  requestId?: string(name='RequestId'),
  domainId?: string(name='DomainId'),
}

model AddCorsDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddCorsDomainResponseBody(name='body'),
}

async function addCorsDomainWithOptions(request: AddCorsDomainRequest, runtime: Util.RuntimeOptions): AddCorsDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCorsDomain', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCorsDomain(request: AddCorsDomainRequest): AddCorsDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCorsDomainWithOptions(request, runtime);
}

model DescribeWebHostingFileRequest {
  spaceId?: string(name='SpaceId'),
  filePath?: string(name='FilePath'),
}

model DescribeWebHostingFileResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    filePath?: string(name='FilePath'),
    contentType?: string(name='ContentType'),
    ETag?: string(name='ETag'),
    size?: long(name='Size'),
    exists?: boolean(name='Exists'),
    lastModifiedTime?: long(name='LastModifiedTime'),
    signedUrl?: string(name='SignedUrl'),
  }(name='Data'),
}

model DescribeWebHostingFileResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebHostingFileResponseBody(name='body'),
}

async function describeWebHostingFileWithOptions(request: DescribeWebHostingFileRequest, runtime: Util.RuntimeOptions): DescribeWebHostingFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWebHostingFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWebHostingFile(request: DescribeWebHostingFileRequest): DescribeWebHostingFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebHostingFileWithOptions(request, runtime);
}

model UpdateSmsTemplateRequest {
  spaceId?: string(name='SpaceId'),
  templateCode?: string(name='TemplateCode'),
  templateType?: string(name='TemplateType'),
  templateName?: string(name='TemplateName'),
  templateContent?: string(name='TemplateContent'),
  remark?: string(name='Remark'),
}

model UpdateSmsTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSmsTemplateResponseBody(name='body'),
}

async function updateSmsTemplateWithOptions(request: UpdateSmsTemplateRequest, runtime: Util.RuntimeOptions): UpdateSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSmsTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSmsTemplate(request: UpdateSmsTemplateRequest): UpdateSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmsTemplateWithOptions(request, runtime);
}

model VerifyBuiltinFunctionTemplateRequest {
  builtinFunctionTemplateId?: string(name='BuiltinFunctionTemplateId'),
  status?: string(name='Status'),
}

model VerifyBuiltinFunctionTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyBuiltinFunctionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyBuiltinFunctionTemplateResponseBody(name='body'),
}

async function verifyBuiltinFunctionTemplateWithOptions(request: VerifyBuiltinFunctionTemplateRequest, runtime: Util.RuntimeOptions): VerifyBuiltinFunctionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyBuiltinFunctionTemplate', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyBuiltinFunctionTemplate(request: VerifyBuiltinFunctionTemplateRequest): VerifyBuiltinFunctionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyBuiltinFunctionTemplateWithOptions(request, runtime);
}

model DeleteWebHostingFileRequest {
  spaceId?: string(name='SpaceId'),
  filePath?: string(name='FilePath'),
}

model DeleteWebHostingFileResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteWebHostingFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebHostingFileResponseBody(name='body'),
}

async function deleteWebHostingFileWithOptions(request: DeleteWebHostingFileRequest, runtime: Util.RuntimeOptions): DeleteWebHostingFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWebHostingFile', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWebHostingFile(request: DeleteWebHostingFileRequest): DeleteWebHostingFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebHostingFileWithOptions(request, runtime);
}

model ListWebHostingCustomDomainsRequest {
  spaceId?: string(name='SpaceId'),
}

model ListWebHostingCustomDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      status?: string(name='Status'),
      domain?: string(name='Domain'),
      updateTime?: long(name='UpdateTime'),
      sslProtocol?: string(name='SslProtocol'),
      forceRedirectType?: string(name='ForceRedirectType'),
      description?: string(name='Description'),
      createTime?: long(name='CreateTime'),
      cname?: string(name='Cname'),
      enableCors?: boolean(name='EnableCors'),
      accessControlAllowOrigin?: string(name='AccessControlAllowOrigin'),
    }
  ](name='Data'),
}

model ListWebHostingCustomDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWebHostingCustomDomainsResponseBody(name='body'),
}

async function listWebHostingCustomDomainsWithOptions(request: ListWebHostingCustomDomainsRequest, runtime: Util.RuntimeOptions): ListWebHostingCustomDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListWebHostingCustomDomains', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listWebHostingCustomDomains(request: ListWebHostingCustomDomainsRequest): ListWebHostingCustomDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWebHostingCustomDomainsWithOptions(request, runtime);
}

model RunDBCommandRequest {
  spaceId?: string(name='SpaceId'),
  body?: string(name='Body'),
}

model RunDBCommandResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  affectedDocs?: int32(name='AffectedDocs'),
}

model RunDBCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunDBCommandResponseBody(name='body'),
}

async function runDBCommandWithOptions(request: RunDBCommandRequest, runtime: Util.RuntimeOptions): RunDBCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunDBCommand', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runDBCommand(request: RunDBCommandRequest): RunDBCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runDBCommandWithOptions(request, runtime);
}

model DeleteFunctionRequest {
  name?: string(name='Name'),
  spaceId?: string(name='SpaceId'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFunctionResponseBody(name='body'),
}

async function deleteFunctionWithOptions(request: DeleteFunctionRequest, runtime: Util.RuntimeOptions): DeleteFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFunction', '2019-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFunctionWithOptions(request, runtime);
}

