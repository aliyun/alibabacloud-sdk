/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OceanBasePro';
  @version = '2019-09-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateDatabaseRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  clientToken?: string(name='ClientToken', description='The token used to ensure idempotence.  
The value of this parameter is generated by the client and is unique among different requests.   

> <br>ClientToken can contain only ASCII characters, and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  collation?: string(name='Collation', description='The collation.', example='utf8mb4_general_ci', position='Body'),
  databaseName: string(name='DatabaseName', description='The name of the database.   
You cannot use reserved keywords, such as test and mysql.', example='sms_pre', position='Body'),
  description?: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  encoding: string(name='Encoding', description='The encoding standard of the database.
For more information, see the Charset field returned by the DescribeCharset operation.', example='utf8mb4', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model CreateDatabaseResponseBody = {
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='sms_pre'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseResponseBody(name='body'),
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabase', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  regionId: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable automatic renewal.   
This parameter is valid only when the ChargeType parameter is set to PrePaid. Valid values: 
- true: enables automatic renewal for the instance.   
- false: disables automatic renewal for the instance. This is the default value.', example='true', position='Body'),
  autoRenewPeriod?: long(name='AutoRenewPeriod', description='The automatic renewal period of the instance. This parameter is required when the AutoRenew parameter is set to true. Valid values:  
- If the PeriodUnit parameter is set to Week: 1, 2, and 3.   
- If the PeriodUnit parameter is set to Month: 1, 2, 3, 6, and 12.', example='2', position='Body'),
  chargeType: string(name='ChargeType', description='The billing method of the instance. Valid values:  
-PrePay: the subscription billing method. You must ensure that the remaining balance or credit balance of your account can cover the cost of the subscription. Otherwise, you will receive an InvalidPayMethod error. 
- PostPay: the pay-as-you-go billing method. This is the default value. By default, fees are charged on an hourly basis.', example='PrePay', position='Body'),
  diskSize?: long(name='DiskSize', description='The size of the storage space, in GB.    
The limits on the storage space vary with the cluster specifications:   
- 8C32GB: 100 GB to 10000 GB   
- 14C70GB: 200 GB to 10000 GB   
- 30C180GB: 400 GB to 10000 GB   
- 62C400GB: 800 GB to 10000 GB    
The preceding minimum storage space sizes are the default storage space sizes of the corresponding cluster specification plans.', example='200', position='Body'),
  diskType?: string(name='DiskType', description='集群的存储类型。仅在标准集群版（云盘）下生效。当前支持两种类型：- cloud_essd_pl1：云盘ESSD PL1; -- cloud_essd_pl1：云盘ESSD PL1; - cloud_essd_pl0：云盘ESSD PL0。默认值为cloud_essd_pl1。', position='Body'),
  instanceClass: string(name='InstanceClass', description='The specifications of the cluster.     
You can specify one of the following four plans:   
 - 8C32GB: indicates 8 CPU cores and 32 GB of memory.    
 - 14C70GB: indicates 14 CPU cores and 70 GB of memory. This is the default value.     
- 30C180GB: indicates 30 CPU cores and 180 GB of memory.     
- 62C400GB: indicates 62 CPU cores and 400 GB of memory.', example='14C70GB', position='Body'),
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.    
It must be 1 to 20 characters in length.   
If this parameter is not specified, the value is the instance ID of the cluster by default.', example='amap_aos_tx_ob', maxLength=20, position='Body'),
  obVersion?: string(name='ObVersion', description='Oceanbase Server的版本号。', example='3.2.3.3', position='Body'),
  period?: long(name='Period', description='The valid duration of the purchased resources. The unit is specified by the PeriodUnit parameter.   
This parameter is valid and required only when the InstanceChargeType parameter is set to PrePaid.   
If the DedicatedHostId parameter is specified, the subscription period of the instance must be shorter than that of the dedicated host.   
Valid values:    
- If the PeriodUnit parameter is set to Week: 1, 2, 3, and 4.   
- If the PeriodUnit parameter is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1', position='Body'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the valid duration of the purchased resources.     
Valid value for subscription: Month.   
Default value: Month for subscription, and Hour for pay-as-you-go.', example='Month', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Body'),
  series: string(name='Series', description='The series of the OceanBase cluster. Valid values:    
normal: the high availability edition. This is the default value.', example='Normal', position='Body'),
  zones: string(name='Zones', description='The ID of the zone to which the instance belongs.   
For more information about how to obtain the list of zones, see [DescribeZones](https://www.alibabacloud.com/help/zh/doc-detail/25610.htm).', example='cn-hangzhou-h,cn-hangzhou-i,cn-hangzhou-j', position='Body'),
}

model CreateInstanceResponseBody = {
  data?: {
    instanceId?: string(name='InstanceId', description='实例ID', example='i-bp67acfmxazb4p****'),
    orderId?: string(name='OrderId', description='订单ID。该参数只有创建包年包月ECS实例（请求参数InstanceChargeType=PrePaid）时有返回值。', example='1234567890'),
    resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='rg-***************'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateOmsMysqlDataSourceRequest {
  regionId: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  description?: string(name='Description', description='The description of the data source.   
It must be 2 to 256 characters in length. The default value is null.', example='MySQL data source for OMS testing', position='Body'),
  dgDatabaseId?: string(name='DgDatabaseId', description='The ID of the database gateway instance.   

> <br>If Type is set to DG, this parameter is required.', example='dg-yhss6sdlaff****', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the ECS instance of the data source.   

> <br>If Type is set to RDS, POLARDB, or DG, this parameter is required.', example='pc-12ab34cd56******', position='Body'),
  ip?: string(name='Ip', description='The IP address of the data source.   

> <br>If Type is set to INTERNET or VPC, this parameter is required.', example='10.0.****', position='Body'),
  name: string(name='Name', description='The name of the data source.   
It must be 2 to 128 characters in length and can contain letters, digits, underscores (_), periods (.), and hyphens (-).   

> <br>Invalid characters, such as slashes (/), are not allowed.', example='oms-mysql', position='Body'),
  password: string(name='Password', description='The password of the username that is used to access the database. It must be Base64 encoded.   
For example, for the password abcd123@!, the Base64-encoded value is YWJjZDEyM0Ah.', example='YWJjZDEyM0Ah', position='Body'),
  port?: string(name='Port', description='The port number of the data source.   

> <br>If Type is set to INTERNET or VPC, this parameter is required.', example='3306', position='Body'),
  schema?: string(name='Schema', description='The name of the database.   

> <br>If you specify this parameter, subsequent migration or synchronization operations will take effect on this database only.', example='test', position='Body'),
  type: string(name='Type', description='The type of the MySQL data source.   
Valid values: INTERNET, VPC, RDS, POLARDB, and DG.', example='INTERNET', position='Body'),
  username: string(name='Username', description='The username that is used to access the database.', example='omsTestUser', position='Body'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the data source belongs.   

> <br>If Type is set to VPC, this parameter is required.', example='vpc-12345abcde*******', position='Body'),
}

model CreateOmsMysqlDataSourceResponseBody = {
  data?: {
    endpointId?: string(name='EndpointId', description='The ID of the data source record.', example='e_1234abcd*****'),
  }(name='Data', description='The return result of the request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateOmsMysqlDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOmsMysqlDataSourceResponseBody(name='body'),
}

/**
  * To call this operation, you must add the IP address of the OceanBase Migration Service (OMS) server to the whitelist of the Alibaba Cloud database instance, the security rules of the ECS instance, or the security settings of your self-managed database (usually the firewall of your self-managed database) to ensure that OMS can successfully access your database instance. To obtain the IP address of the OMS server, go to the OMS data source management page in the OMS console.
  *
 */
async function createOmsMysqlDataSource(request: CreateOmsMysqlDataSourceRequest): CreateOmsMysqlDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOmsMysqlDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  businessName?: string(name='BusinessName', description='The business system identifier, which is optional and is a specific field of the Post message.', example='OMS_TEST', position='Body'),
  destConfig?: {
    enableMsgTrace?: boolean(name='EnableMsgTrace', description='Specifies whether to enable message tracing when the destination data source is RocketMQ.', example='false'),
    endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
    endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
    msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
    partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
    partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
    producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
    sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period for a single Post message when the destination data source is RocketMQ.', example='10'),
    sequenceEnable?: boolean(name='SequenceEnable', description='Specifies whether to enable message sequencing when the destination data source is DataHub.', example='false'),
    sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
    serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, Canal, Dataworks, SharePlex, and DefaultExtendColumnType.', example='DEFAULT'),
    topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
  }(name='DestConfig', description='The settings of the destination data source.', shrink='json', position='Body'),
  labelIds?: [ string ](name='LabelIds', description='A collection of label IDs.', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='10', position='Body'),
  projectName?: string(name='ProjectName', description='The name of the project.', example='test-l', position='Body'),
  sourceConfig?: {
    enableMsgTrace?: boolean(name='EnableMsgTrace', description='Specifies whether to enable message tracing when the destination data source is RocketMQ.', example='false'),
    endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
    endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
    msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
    partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
    partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
    producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
    sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period for a single Post message when the destination data source is RocketMQ.', example='10'),
    sequenceEnable?: boolean(name='SequenceEnable', description='Specifies whether to enable message sequencing when the destination data source is DataHub.', example='false'),
    sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
    serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, Canal, Dataworks, SharePlex, and DefaultExtendColumnType.', example='DEFAULT'),
    topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
  }(name='SourceConfig', description='The settings of the source data source.', shrink='json', position='Body'),
  transferMapping?: {
    databases?: [ 
      {
        databaseId?: string(name='DatabaseId', description='The ID of the database. This parameter takes effect when the source data source is IDB.', example='db_id1'),
        databaseName?: string(name='DatabaseName', description='The name of the database.', example='db1'),
        mappedName?: string(name='MappedName', description='The mapped-to database. This parameter takes effect when the destination data source is a database.', example='mapped_db'),
        tables?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys', description='The list of distribution key columns.'),
              partitionLifeCycle?: int32(name='PartitionLifeCycle', description='The lifecycle of the table.', example='30'),
              partitionStatement?: string(name='PartitionStatement', description='The partitioning expression.', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys', description='The list of primary key columns.'),
            }(name='AdbTableSchema', description='The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.'),
            filterColumns?: [ string ](name='FilterColumns', description='The list of filter columns, which are the columns to be synchronized.'),
            mappedName?: string(name='MappedName', description='The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.', example='mapped_table'),
            shardColumns?: [ string ](name='ShardColumns', description='The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.'),
            tableId?: string(name='TableId', description='The ID of the table. This parameter takes effect when the source data source is IDB.', example='table_id'),
            tableName?: string(name='TableName', description='The name of the table.', example='table'),
            type?: string(name='Type', description='Valid values: DATABASE and TABLE.', example='DATABASE'),
            whereClause?: string(name='WhereClause', description='The row filter conditions.', example='id > 1'),
          }
        ](name='Tables', description='The settings for the target table objects in the current database.'),
        tenantName?: string(name='TenantName', description='The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.', example='tenant'),
        type?: string(name='Type', description='Valid values: DATABASE and TABLE.', example='DATABASE'),
      }
    ](name='Databases', description='The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.'),
    mode?: string(name='Mode', description='The mapping type. Valid values: \\"NORMAL\\" and \\"WHITE_AND_BLACK_LIST\\".', example='NORMAL'),
  }(name='TransferMapping', description='The mappings for the synchronization objects.', shrink='json', position='Body'),
  transferStepConfig?: {
    enableFullSync?: boolean(name='EnableFullSync', description='Specifies whether to enable full migration.', example='false'),
    enableIncrSync?: boolean(name='EnableIncrSync', description='Specifies whether to enable incremental synchronization.', example='false'),
    enableStructSync?: boolean(name='EnableStructSync', description='Specifies whether to enable schema synchronization.', example='false'),
    incrSyncStepTransferConfig?: {
      recordTypeList?: [ string ](name='RecordTypeList', description='The list of data types of incremental data synchronized in incremental synchronization.'),
      startTimestamp?: long(name='StartTimestamp', description='The start time for incremental synchronization. The value is a timestamp in seconds.', example='1637568354'),
      storeLogKeptHour?: long(name='StoreLogKeptHour', description='The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.', example='1'),
      storeTransactionEnabled?: boolean(name='StoreTransactionEnabled', description='Specifies whether to enable intra-transaction sequencing when incremental synchronization is enabled and the incremental log pull component is Store.', example='false'),
      transferStepType?: string(name='TransferStepType', description='Valid values: STRUCT, FULL, and INCR.', example='STRUCT'),
    }(name='IncrSyncStepTransferConfig', description='The settings of incremental synchronization steps.'),
  }(name='TransferStepConfig', description='The settings of synchronization steps.', example='OMS_TEST', shrink='json', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcd', position='Body'),
}

model CreateOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: string(name='Data', description='The project creation details.', example='abcdg'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='WARN'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model CreateOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOmsOpenAPIProjectResponseBody(name='body'),
}

async function createOmsOpenAPIProject(request: CreateOmsOpenAPIProjectRequest): CreateOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateSecurityIpGroupRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='pay_online', position='Body'),
  securityIps: string(name='SecurityIps', description='The IP addresses or CIDR blocks in the IP address whitelist group.   
It is a JSON array. Each object in the array is an IP address or CIDR block. The following two formats are supported:  
- IP address: for example, 10.23.12.24. 
- CIDR block: for example, 10.23.12.24/24, where 24 indicates the length of the prefix in the IP address, and the prefix is 1 to 30 characters in length.  Limit: You can set no more than 40 IP addresses or CIDR blocks for a whitelist group. A total of 200 IP addresses or CIDR blocks are supported for all whitelist groups.', example='{"192.168.1.1","192.168.0.0.1/8"}', position='Body'),
}

model CreateSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='pay_online'),
    securityIps?: string(name='SecurityIps', description='The IP addresses or CIDR blocks in the IP address whitelist group.   
The return values of SecurityIps are strings that are separated with commas (,).', example='192.168.1.1,192.168.0.0.1/8'),
  }(name='SecurityIpGroup', description='The information of the whitelist group.'),
}

model CreateSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityIpGroupResponseBody(name='body'),
}

async function createSecurityIpGroup(request: CreateSecurityIpGroupRequest): CreateSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  charset: string(name='Charset', description='The character set.    
For more information, see DescribeCharset.', example='utf8mb4', position='Body'),
  cpu: int32(name='Cpu', description='The number of CPU cores of the tenant.   

> <br>The CPU specification of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the CPU specification of the tenant cannot exceed 14 cores.', example='2', position='Body'),
  description?: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  memory: int32(name='Memory', description='The memory size of the tenant, in GB.   

> <br>The memory size of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the memory size of the tenant cannot exceed 70 GB.', example='10', position='Body'),
  primaryZone: string(name='PrimaryZone', description='The primary zone of the tenant.    
It is one of the zones in which the cluster is deployed.', example='cn-hangzhou-h', position='Body'),
  tenantMode: string(name='TenantMode', description='The tenant mode.    
Valid values: Oracle and MySQL.   
For more information, see [DescribeInstanceTenantModes](~~410354~~).', example='Oracle', position='Body'),
  tenantName: string(name='TenantName', description='The name of the tenant.    
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.', example='pay_online', position='Body'),
  timeZone: string(name='TimeZone', description='The time zone of the tenant. For more information, see [DescribeTimeZones](~~410361~~).', example='Asia/Shanghai', position='Body'),
  unitNum?: int32(name='UnitNum', description='The number of resource distribution nodes in the tenant.    
The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.', example='2', position='Body'),
  userVSwitchId: string(name='UserVSwitchId', description='The ID of the vSwitch.    
If no suitable vSwitch is available, create a vSwitch as prompted.   
For more information, see Use a vSwitch.', example='vsw-bp11k1aypnzu1l3whi****', position='Body'),
  userVpcId: string(name='UserVpcId', description='The ID of the VPC.   
 If no suitable VPC is available, create a VPC as prompted.   
For more information, see "What is a VPC".', example='vpc-bp1d2q3mhg9i23ofi****', position='Body'),
}

model CreateTenantResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
}

model CreateTenantResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantResponseBody(name='body'),
}

async function createTenant(request: CreateTenantRequest): CreateTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenant', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantReadOnlyConnectionRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  zoneId: string(name='ZoneId', description='The ID of the zone.  

For more information, see AvailableZones in DescribeInstance.', example='cn-hangzhou-i', position='Body'),
}

model CreateTenantReadOnlyConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model CreateTenantReadOnlyConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantReadOnlyConnectionResponseBody(name='body'),
}

async function createTenantReadOnlyConnection(request: CreateTenantReadOnlyConnectionRequest): CreateTenantReadOnlyConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenantReadOnlyConnection', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantUserRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  description?: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  encryptionType?: string(name='EncryptionType', description='加密方式。', example='RAS', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  roles?: string(name='Roles', description='The role of the user account.   

- In Oracle mode, this parameter is left unspecified.    
- In MySQL mode, the super administrator account has ALL PRIVILEGES, and you can leave this parameter unspecified.   
 
You need to specify the account information for a general user account. By default, the account information is a JSON array that contains the information of the role and the schema (Oracle mode) or database (MySQL mode). Valid values:  

- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.    
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
   
- DML: a role that has DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='[{"Database":"20210824160559","Role":"readwrite"}]', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The name of the database account.   
You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
  userPassword: string(name='UserPassword', description='The password of the database account. 

> <br>It must be 10 to 32 characters in length and contain three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. The special characters are ! @ # $ % ^ & \\ * ( ) _ + - =', example='!Aliyun4Oceanbase', position='Body'),
  userType: string(name='UserType', description='The type of the database account. Valid values:   

- Admin: the super administrator account.   
- Normal: a general account.', example='Normal', position='Body'),
}

model CreateTenantUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: [ 
    {
      roles?: [ 
        {
          database?: string(name='Database', description='The name of the database.', example='db_pay1'),
          role?: string(name='Role', description='The role of the account.   
In Oracle mode, a role is a schema-level role. Valid values:  

- ReadWrite: a role that has the read and write privileges, including CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SYNONYM, CREATE SEQUENCE, CREATE TRIGGER, CREATE TYPE, CREATE SESSION, EXECUTE ANY PROCEDURE, CREATE ANY OUTLINE, ALTER ANY OUTLINE, DROP ANY OUTLINE, CREATE ANY PROCEDURE, ALTER ANY PROCEDURE, DROP ANY PROCEDURE, CREATE ANY SEQUENCE, ALTER ANY SEQUENCE, DROP ANY SEQUENCE, CREATE ANY TYPE, ALTER ANY TYPE, DROP ANY TYPE, SYSKM, CREATE ANY TRIGGER, ALTER ANY TRIGGER, DROP ANY TRIGGER, CREATE PROFILE, ALTER PROFILE, and DROP PROFILE.   
- ReadOnly: a role that has only the read-only privilege SELECT. 

In MySQL mode, a role is a database-level role. Valid values:  

- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES. 
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW. 

> <br>By default, an Oracle account has the read and write privileges on its own schema, which are not listed here.', example='ReadOnly'),
        }
      ](name='Roles', description='The roles of the accounts.'),
      userName?: string(name='UserName', description='The name of the database account.', example='pay_test'),
      userStatus?: string(name='UserStatus', description='The status of the database account. Valid values:    
- Locked: The account is locked.   
- ONLINE: The account is unlocked. The default status of a new account is ONLINE after it is created.', example='ONLINE'),
      userType?: string(name='UserType', description='The type of the database account. Valid values:   
 - Admin: the super administrator account.   
 - Normal: a general account.', example='Normal'),
    }
  ](name='TenantUser', description='The list of database accounts in the tenant.'),
}

model CreateTenantUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantUserResponseBody(name='body'),
}

async function createTenantUser(request: CreateTenantUserRequest): CreateTenantUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenantUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatabasesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  databaseNames: string(name='DatabaseNames', description='The list of database names.    
It is a JSON array. Each object in the array is a database name string.', example='["sms_pre", "pay_pre"]', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model DeleteDatabasesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DeleteDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatabasesResponseBody(name='body'),
}

async function deleteDatabases(request: DeleteDatabasesRequest): DeleteDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabases', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  backupRetainMode?: string(name='BackupRetainMode', description='The backup retention strategy for cluster deletion. Valid values:  
- receive_all: retains all backup sets.   
- delete_all: deletes all backup sets.   
- receive_last: retains the last backup set.    

> <br>Default value: delete_all.', example='delete_all', position='Body'),
  instanceIds: string(name='InstanceIds', description='The ID of the cluster to be deleted.   
The value is a string in the JSON format.', example='[”ob ob3f6yhv9uxxxx“]', position='Body'),
}

model DeleteInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstancesResponseBody(name='body'),
}

/**
  * Before you call this operation, ensure that the following requirements are met:
  * - The cluster is in the Running state.
  * - The cluster is a primary cluster and the billing method is pay-as-you-go.
  *
 */
async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstances', 'POST', '/', 'json', true, 'form', request);
}

model DeleteOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model DeleteOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: boolean(name='Data', description='Indicates whether the project has been deleted.', example='true'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model DeleteOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOmsOpenAPIProjectResponseBody(name='body'),
}

async function deleteOmsOpenAPIProject(request: DeleteOmsOpenAPIProjectRequest): DeleteOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSecurityIpGroupRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The name of the IP address whitelist group.    
It must be 2 to 32 characters in length, start with a lowercase letter, end with a lowercase letter or digit, and contain only lowercase letters, digits, and underscores (_).', example='paytest', position='Body'),
}

model DeleteSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the deleted IP address whitelist group.', example='paytest'),
  }(name='SecurityIpGroup', description='The information of the deleted IP whitelist group.'),
}

model DeleteSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityIpGroupResponseBody(name='body'),
}

async function deleteSecurityIpGroup(request: DeleteSecurityIpGroupRequest): DeleteSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTenantUsersRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  users: string(name='Users', description='A list of usernames and their respective roles.', example='["testUser"]', position='Body'),
}

model DeleteTenantUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DeleteTenantUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTenantUsersResponseBody(name='body'),
}

async function deleteTenantUsers(request: DeleteTenantUsersRequest): DeleteTenantUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTenantUsers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTenantsRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantIds: string(name='TenantIds', description='The list of tenant IDs.   
It is a JSON array. Each object in the array is a tenant name string.', example='["ob2mr3oae0****", "ob2mr3oae1****"]', position='Body'),
}

model DeleteTenantsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantIds?: [ string ](name='TenantIds', description='The list of tenant IDs.'),
}

model DeleteTenantsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTenantsResponseBody(name='body'),
}

async function deleteTenants(request: DeleteTenantsRequest): DeleteTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTenants', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAnomalySQLListRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the returned data.   
Default value: CN for a China site and EN for an International site.', example='zh-CN', position='Body'),
  dbName?: string(name='DbName', description='The name of the database.', example='testdb', position='Body'),
  endTime: string(name='EndTime', description='The end time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  filterCondition?: map[string]any(name='FilterCondition', description='The filter condition.   
> <br> - All fields in OceanBase Database support filtering. <br> - You can write the key-value pair of a parameter in a JSON string in the JSON format to filter the parameter.', example='{
  "UserName":testUser
}', shrink='json', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp19y05uq6xpacyqnlrc', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.    
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  SQLId?: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParameter?: string(name='SearchParameter', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.   
Valid values: "=", ">", ">=", "<", and "<="', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sortColumn?: string(name='SortColumn', description='The sorted column.', example='cputime', position='Body'),
  sortOrder?: string(name='SortOrder', description='The sorting rule.', example='desc', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeAnomalySQLListResponseBody = {
  anomalySQLList?: [ 
    {
      cpuTime?: float(name='CpuTime', description='The average CPU time, in ms.', example='50.13'),
      dbName?: string(name='DbName', description='The name of the database.', example='database1'),
      diagnosis?: string(name='Diagnosis', description='The diagnosis information.', example='Total number of executions = 80199, Average CPU time = 6.8 ms, Overall CPU utilization = 87%'),
      diagnosisRule?: string(name='DiagnosisRule', description='The diagnostic rule.', example='Utilization above threshold'),
      executions?: long(name='Executions', description='The number of executions.', example='89043'),
      key?: long(name='Key', description='The sequence number of the returned SQL statement.', example='1'),
      requestTime?: float(name='RequestTime', description='The request time, in ms.', example='50.00'),
      requestTimeUTCString?: string(name='RequestTimeUTCString', description='The request time in UTC +0.', example='2022-01-11T07:08:00Z'),
      SQLId?: string(name='SQLId', description='SQLID.', example='99E9D3BF****B486239E6C7BC79B****'),
      SQLText?: string(name='SQLText', description='The SQL text.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      suggestion?: string(name='Suggestion', description='The suggestions.', example='Check your business scenarios, data distribution changes, request surges, and execution plan changes.'),
      userName?: string(name='UserName', description='The username.', example='tester'),
    }
  ](name='AnomalySQLList', description='The list of suspicious SQL statements.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The total count.', example='2'),
}

model DescribeAnomalySQLListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnomalySQLListResponseBody(name='body'),
}

async function describeAnomalySQLList(request: DescribeAnomalySQLListRequest): DescribeAnomalySQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnomalySQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableCpuResourceRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  modifyType?: string(name='ModifyType', description='The type of the privilege modification operation.   
 Valid values:  
update: updates all privileges. This is the default value.  
add: adds a privilege.   
delete: deletes a privilege.', example='update', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model DescribeAvailableCpuResourceResponseBody = {
  data?: [ 
    {
      maxCpu?: long(name='MaxCpu', description='The maximum number of CPU cores per resource unit.', example='10'),
      minCpu?: long(name='MinCpu', description='The minimum number of CPU cores per resource unit.', example='2'),
      unitNum?: long(name='UnitNum', description='The number of resource units in the tenant.', example='2'),
    }
  ](name='Data', description='The CPU resources available.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableCpuResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableCpuResourceResponseBody(name='body'),
}

async function describeAvailableCpuResource(request: DescribeAvailableCpuResourceRequest): DescribeAvailableCpuResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableCpuResource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableMemResourceRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  cpuNum: long(name='CpuNum', description='The number of CPU cores.', example='14', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  unitNum: long(name='UnitNum', description='The number of resource distribution nodes in the tenant.   
The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.', example='2', position='Body'),
}

model DescribeAvailableMemResourceResponseBody = {
  data?: {
    maxMem?: long(name='MaxMem', description='The maximum memory size for each resource unit, in GB.', example='10'),
    minMem?: long(name='MinMem', description='The minimum memory size required for each resource unit, in GB.', example='5'),
    usedMem?: long(name='UsedMem', description='The number of resource units in the tenant.', example='2'),
  }(name='Data', description='The available memory size.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableMemResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableMemResourceResponseBody(name='body'),
}

async function describeAvailableMemResource(request: DescribeAvailableMemResourceRequest): DescribeAvailableMemResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableMemResource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCharsetRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  tenantMode: string(name='TenantMode', description='The tenant mode.    
Valid values: Oracle and MySQL.   
For more information, see [DescribeInstanceTenantModes](~~410354~~).', example='Oracle', position='Body'),
}

model DescribeCharsetResponseBody = {
  charset?: [ 
    {
      charset?: string(name='Charset', description='The character set name.', example='utf8'),
      collations?: [ string ](name='Collations', description='The collation set.'),
    }
  ](name='Charset', description='The list of character sets.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeCharsetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharsetResponseBody(name='body'),
}

async function describeCharset(request: DescribeCharsetRequest): DescribeCharsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCharset', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDatabasesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  databaseName?: string(name='DatabaseName', description='The name of the database.    
You cannot use reserved keywords, such as test and mysql.', example='sms_pre', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.   
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100.  
- Default value: 10', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='pay', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  withTables?: boolean(name='WithTables', description='Specifies whether to return the information of tables in the database.   
Default value: false.', example='true', position='Body'),
}

model DescribeDatabasesResponseBody = {
  databases?: [ 
    {
      collation?: string(name='Collation', description='字符序', example='utf8mb4_general_ci'),
      createTime?: string(name='CreateTime', description='The time when the database was created.', example='2022-02-21 15:41:06'),
      dataSize?: double(name='DataSize', description='The actual data size, in GB.', example='5.67 GB'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='sms_pre'),
      dbType?: string(name='DbType', description='The database type.', example='mysql'),
      description?: string(name='Description', description='The description of the database.', example='test db'),
      encoding?: string(name='Encoding', description='The encoding standard of the database. Encoding standards such as utf8mb4 and GBK are supported.', example='utf8mb4'),
      instanceId?: string(name='InstanceId', description='所属集群Id', example='obsdh2f****'),
      requiredSize?: double(name='RequiredSize', description='The storage space required, in GB.', example='0.00 GB'),
      status?: string(name='Status', description='The status of the database. Valid values:    
- ONLINE: The database is running.  
- DELETING: The database is being deleted.', example='ONLINE'),
      tables?: [ 
        {
          tableName?: string(name='TableName', description='The name of the database table.', example='testTables'),
        }
      ](name='Tables', description='The information about the database tables.'),
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
      users?: [ 
        {
          role?: string(name='Role', description='The role of the account.    
In MySQL mode, a role is a database-level role. Valid values:  
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.  
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='ReadOnly'),
          userName?: string(name='UserName', description='The name of the account.', example='user_pay_ro'),
          userType?: string(name='UserType', description='The type of the account. Valid values:  - Admin: the super administrator account. - Normal: a general account.', example='Normal'),
        }
      ](name='Users', description='The accounts that have privileges on the database.'),
    }
  ](name='Databases', description='The list of databases in the tenant.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='The total number of databases in the tenant.', example='1'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabases', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId', description='地域 ID。', example='cn-hangzhou', position='Host'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. 
- Start value: 1  
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
}

model DescribeInstanceResponseBody = {
  instance?: {
    autoRenewal?: boolean(name='AutoRenewal', description='Indicates whether automatic renewal is enabled. 

This parameter is valid only for clusters whose billing methods are set to PREPAY.', example='true'),
    autoUpgradeObVersion?: boolean(name='AutoUpgradeObVersion', description='Indicates whether automatic upgrade of the OBServer version is enabled.', example='true'),
    availableZones?: [ string ](name='AvailableZones', description='The list of zones.'),
    createTime?: string(name='CreateTime', description='The time in UTC when the cluster was created.', example='2021-10-19T07:13:41Z'),
    dataMergeTime?: string(name='DataMergeTime', description='The time when the major compaction of cluster data is performed.', example='02:00'),
    deployMode?: string(name='DeployMode', description='The data replica distribution mode of the cluster. Valid values: 
- n: indicates the single-IDC mode. 
- n-n: indicates the dual-IDC mode. 
- n-n-n: indicates the multi-IDC mode. 

> <br>The integer n represents the number of OBServer nodes in each IDC.', example='1-1-1'),
    deployType?: string(name='DeployType', description='The deployment type of the cluster. Valid values:  
- multiple: multi-IDC deployment   
- single: single-IDC deployment   
- dual: dual-IDC deployment', example='multiple'),
    diskType?: string(name='DiskType', description='The type of the storage disk where the cluster is deployed. 

The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.', example='cloud_essd_pl1'),
    enableUpgradeLogDisk?: boolean(name='EnableUpgradeLogDisk', description='Indicates whether the log disk specifications can be upgraded.', example='false'),
    expireTime?: string(name='ExpireTime', description='The time in UTC when the cluster expires.', example='2021-10-17T16:00:00Z'),
    instanceClass?: string(name='InstanceClass', description='The specifications of the cluster.  You can specify one of the following four plans:    
- 8C32G: indicates 8 CPU cores and 32 GB of memory. 
- 14C70G: indicates 14 CPU cores and 70 GB of memory. 
- 30C180G: indicates 30 CPU cores and 180 GB of memory. 
- 62C400G: indicates 62 CPU cores and 400 GB of memory.', example='14C70G'),
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.', example='ob4test'),
    instanceRole?: string(name='InstanceRole', description='实例角色'),
    isLatestObVersion?: boolean(name='IsLatestObVersion', description='Indicates whether the OBServer version is the latest.', example='true'),
    isTrustEcs?: boolean(name='IsTrustEcs', description='Indicates whether trusted ECS instances are used.', example='true'),
    maintainTime?: string(name='MaintainTime', description='The time period in UTC for the daily routine maintenance of the cluster.', example='19:00Z-20:00Z'),
    nodeNum?: string(name='NodeNum'),
    obRpmVersion?: string(name='ObRpmVersion', description='The detailed information of the OBServer version.', example='2.2.77-20210526202046'),
    payType?: string(name='PayType', description='The billing method of the OceanBase cluster. Valid values: 
- PREPAY: the subscription billing method. 
- POSTPAY: the pay-as-you-go billing method.', example='PREPAY'),
    resource?: {
      cpu?: {
        totalCpu?: long(name='TotalCpu', description='The total number of CPU cores of the cluster.', example='14'),
        unitCpu?: long(name='UnitCpu', description='The number of CPU cores of each replica node in the cluster.', example='10'),
        usedCpu?: long(name='UsedCpu', description='The number of CPU cores used in the cluster.', example='10'),
      }(name='Cpu', description='The information about the CPU resources of the cluster.'),
      diskSize?: {
        dataUsedSize?: double(name='DataUsedSize', description='The size of the data disk, in GB.', example='200'),
        maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer', description='The server with the highest disk usage.'),
        maxDiskUsedPercent?: double(name='MaxDiskUsedPercent', description='The maximum disk usage, in percentage.', example='0.14'),
        totalDiskSize?: long(name='TotalDiskSize', description='The total storage space of the cluster, in GB.', example='200'),
        unitDiskSize?: long(name='UnitDiskSize', description='The storage space of each replica node in the cluster, in GB.', example='200'),
        usedDiskSize?: long(name='UsedDiskSize', description='The size of used storage space of the cluster, in GB.', example='100'),
      }(name='DiskSize', description='The information about the storage resources of the cluster.'),
      logDiskSize?: {
        totalDiskSize?: long(name='TotalDiskSize', description='The total log disk space of the cluster, in GB.', example='400'),
        unitDiskSize?: long(name='UnitDiskSize', description='The log disk space of each replica node in the cluster. Unit: GB.', example='200'),
      }(name='LogDiskSize', description='The information about the log disk space of the cluster.'),
      memory?: {
        totalMemory?: long(name='TotalMemory', description='The total memory size of the cluster, in GB.', example='70'),
        unitMemory?: long(name='UnitMemory', description='The memory size of each replica node in the cluster, in GB.', example='10'),
        usedMemory?: long(name='UsedMemory', description='The size of used memory in the cluster, in GB.', example='10'),
      }(name='Memory', description='The information about the memory resources of the cluster.'),
      unitCount?: long(name='UnitCount', description='The number of resource units in the cluster.', example='1'),
    }(name='Resource', description='The information about cluster resources.'),
    series?: string(name='Series', description='The series of the OceanBase cluster. Valid values:   
- NORMAL: the high availability edition.   
- BASIC: the basic edition.', example='NORMAL'),
    status?: string(name='Status', description='The status of the cluster. Valid values: 
 - PENDING_CREATE: The cluster is being created. 
 - ONLINE: The cluster is running. 
 - TENANT_CREATING: The tenant is being created. 
- TENANT_SPEC_MODIFYING: The tenant specifications are being modified. 
- EXPANDING: Nodes are being added to the cluster to increase its capacity. 
- REDUCING: Nodes are being removed from the cluster to reduce its capacity. 
- SPEC_UPGRADING: The service plan is being upgraded. 
- DISK_UPGRADING: The storage space is being expanded. 
- WHITE_LIST_MODIFYING: The whitelist is being modified. 
- PARAMETER_MODIFYING: Parameters are being modified. 
- SSL_MODIFYING: The SSL certificate is being changed. 
- PREPAID_EXPIRE_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to PREPAY. 
- ARREARS_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to POSTPAY. 
- PENDING_DELETE: The cluster is being deleted.    
Generally, the cluster is in the ONLINE state.', example='ONLINE'),
    version?: string(name='Version', description='The OBServer version.', example='2.2.77'),
    zones?: [ string ](name='Zones'),
  }(name='Instance', description='The information of the OceanBase cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceCreatableZoneRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceCreatableZoneResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  zoneList?: [ 
    {
      isInCluster?: boolean(name='IsInCluster', description='Indicates whether the cluster is deployed in the zone.', example='true'),
      zone?: string(name='Zone', description='The ID of the zone.', example='cn-hangzhou-i'),
    }
  ](name='ZoneList', description='The list of zones.'),
}

model DescribeInstanceCreatableZoneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceCreatableZoneResponseBody(name='body'),
}

async function describeInstanceCreatableZone(request: DescribeInstanceCreatableZoneRequest): DescribeInstanceCreatableZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceCreatableZone', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceSecurityConfigsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='Oceanbase集群ID', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceSecurityConfigsResponseBody = {
  instanceSecurityConfigs?: {
    securityConfigs?: [ 
      {
        configDescription?: string(name='ConfigDescription', description='检测项名称', example='校验集群白名单范围是否过大'),
        configGroup?: string(name='ConfigGroup', description='检测分组', example='WHITELIST'),
        configName?: string(name='ConfigName', description='具体检测项名称', example='aaa'),
        risk?: boolean(name='Risk', description='是否存在风险', example='true'),
        riskDescription?: string(name='RiskDescription', description='安全建议', example='aaa'),
      }
    ](name='SecurityConfigs', description='检测项目列表'),
    totalCheckCount?: int32(name='TotalCheckCount', description='集群安全项检测总数', example='5'),
    totalRiskCount?: int32(name='TotalRiskCount', description='集群安全项风险总数', example='0'),
  }(name='InstanceSecurityConfigs'),
  requestId?: string(name='RequestId', description='请求ID', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceSecurityConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSecurityConfigsResponseBody(name='body'),
}

async function describeInstanceSecurityConfigs(request: DescribeInstanceSecurityConfigsRequest): DescribeInstanceSecurityConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSecurityConfigs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTagsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceIds?: string(name='InstanceIds', description='The list of cluster IDs.', example='["ob3za5w73as8rk"]', position='Body'),
  tags?: string(name='Tags', description='The tags.', example='[{"Key": "xxx", "Value", "xxx"},{}]', position='Body'),
}

model DescribeInstanceTagsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='ob317v4uif****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
      tag?: string(name='Tag', description='The tag of the resource.', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
    }
  ](name='TagResources', description='The list of tags.'),
}

model DescribeInstanceTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTagsResponseBody(name='body'),
}

async function describeInstanceTags(request: DescribeInstanceTagsRequest): DescribeInstanceTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTags', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTenantModesRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceTenantModesResponseBody = {
  instanceModes?: [ string ](name='InstanceModes', description='The information of tenants.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceTenantModesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTenantModesResponseBody(name='body'),
}

async function describeInstanceTenantModes(request: DescribeInstanceTenantModesRequest): DescribeInstanceTenantModesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTenantModes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTopologyRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceTopologyResponseBody = {
  instanceTopology?: {
    tenants?: [ 
      {
        primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='The deployment type of the primary zone.', example='RANDOM'),
        tenantCpu?: float(name='TenantCpu', description='The number of CPU cores of the tenant.', example='2'),
        tenantDeployType?: string(name='TenantDeployType', description='The deployment type of the tenant.   
- multiple: multi-IDC deployment   
- single: single-IDC deployment   
- dual: dual-IDC deployment', example='multiple'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
        tenantMemory?: float(name='TenantMemory', description='The memory size of the tenant, in GB.', example='10'),
        tenantMode?: string(name='TenantMode', description='The tenant mode. Valid values:   
- Oracle   
- MySQL', example='Oracle'),
        tenantName?: string(name='TenantName', description='The name of the tenant.', example='pay_online'),
        tenantStatus?: string(name='TenantStatus', description='The status of the tenant.   
- PENDING_CREATE: The tenant is being created.   
- RESTORE: The tenant is being recovered.   
- ONLINE: The tenant is running.   
- SPEC_MODIFYING: The specification of the tenant is being modified.   
- ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.   
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.   
- PARAMETER_MODIFYING: Parameters are being modified.   
- WHITE_LIST_MODIFYING: The whitelist is being modified.', example='ONLINE'),
        tenantUnitNum?: int32(name='TenantUnitNum', description='The number of resource units in the tenant.', example='1'),
        tenantZones?: [ 
          {
            isPrimaryTenantZone?: string(name='IsPrimaryTenantZone', description='Indicates whether the zone is the primary zone.', example='true'),
            tenantZoneId?: string(name='TenantZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
            tenantZoneRole?: string(name='TenantZoneRole', description='The role to access the zone. Valid values:   
 - ReadWrite: a role that has the read and write privileges.
 - ReadOnly: a role that has only the read-only privilege.', example='ReadWrite'),
            units?: [ 
              {
                enableCancelMigrateUnit?: boolean(name='EnableCancelMigrateUnit', description='Indicates whether the migration can be canceled.   
This field is valid only for units that are being manually immigrated or emigrated.', example='true'),
                enableMigrateUnit?: boolean(name='EnableMigrateUnit', description='Indicates whether migration can be performed.', example='true'),
                manualMigrate?: boolean(name='ManualMigrate', description='Indicates whether the migration is manually performed.', example='true'),
                nodeId?: string(name='NodeId', description='The ID of the OBServer where the resource unit resides.', example='i-bp16niirq4zdmgvm****'),
                unitCpu?: float(name='UnitCpu', description='The number of CPU cores of the resource unit.', example='2'),
                unitDataSize?: long(name='UnitDataSize', description='The data size of the unit.', example='10'),
                unitId?: string(name='UnitId', description='The ID of the resource unit.', example='1002'),
                unitMemory?: float(name='UnitMemory', description='The memory size of the resource unit, in GB.', example='10'),
                unitStatus?: string(name='UnitStatus', description='The status of the resource unit. Valid values:    

- ONLINE: The resource unit is running.
- IMMIGRATING: The resource unit is being immigrated.
- EMIGRATING: The resource unit is being emigrated.
- CANCEL_EMIGRATING: Resource node immigration is being canceled.
- CANCEL_EMIGRATING: Resource node emigration is being canceled.
- DELETING: The resource unit is being deleted.', example='ONLINE'),
              }
            ](name='Units', description='The information about resource units.'),
          }
        ](name='TenantZones', description='The zone information of the tenant.'),
      }
    ](name='Tenants', description='The information of the tenant.'),
    zones?: [ 
      {
        nodes?: [ 
          {
            nodeCopyId?: long(name='NodeCopyId', description='The ID of the replica node.', example='1'),
            nodeId?: string(name='NodeId', description='The ID of the node.', example='i-bp16niirq4zdmgvm****'),
            nodeResource?: [ 
              {
                cpu?: {
                  totalCpu?: int32(name='TotalCpu', description='The total number of CPU cores for the node.', example='14'),
                  usedCpu?: float(name='UsedCpu', description='The number of CPU cores used by the node.', example='4'),
                }(name='Cpu', description='The information about the CPU resources of the node.'),
                diskSize?: {
                  totalDiskSize?: double(name='TotalDiskSize', description='The total storage space of the node, in GB.', example='400'),
                  usedDiskSize?: double(name='UsedDiskSize', description='The size of used storage space of the node, in GB.', example='200'),
                }(name='DiskSize', description='The information about the storage resources of the node.'),
                memory?: {
                  totalMemory?: long(name='TotalMemory', description='The total memory size of the node, in GB.', example='70'),
                  usedMemory?: float(name='UsedMemory', description='The size of used memory of the node, in GB.', example='10'),
                }(name='Memory', description='The information about the memory resources of the node.'),
              }
            ](name='NodeResource', description='The information of node resources.'),
            nodeStatus?: string(name='NodeStatus', description='The status of the node.', example='ONLINE'),
          }
        ](name='Nodes', description='The information of the nodes.'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        zoneDisk?: string(name='ZoneDisk', description='The storage capacity of the zone.', example='200 GB'),
        zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-i'),
        zoneResource?: {
          diskSize?: {
            maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer', description='The server with the highest disk usage.'),
            maxDiskUsedPercent?: double(name='MaxDiskUsedPercent', description='The maximum disk usage, in percentage.', example='0.14'),
          }(name='DiskSize', description='The information about the storage resources of the node.'),
        }(name='ZoneResource', description='The information of zones.'),
      }
    ](name='Zones', description='The zone information of the cluster.'),
  }(name='InstanceTopology', description='The topology of the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTopologyResponseBody(name='body'),
}

async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTopology', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstancesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.    
It must be 1 to 20 characters in length.   
If this parameter is not specified, the value is the instance ID of the cluster by default.', example='ob4prod', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    

- Start value: 1 
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.    
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='group1', position='Body'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='pay', position='Body'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      availableZones?: [ string ](name='AvailableZones', description='The information about the zone in which the cluster is deployed.'),
      commodityCode?: string(name='CommodityCode', description='The product code of the OceanBase cluster.   
- oceanbase_oceanbasepre_public_cn: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in a China site.  
- oceanbase_oceanbasepost_public_cn: indicates an OceanBase cluster that is billed based on the pay-as-you-go plan and that is deployed in a China site.  
- oceanbase_obpre_public_intl: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in an international site.', example='oceanbase_oceanbasepost_public_cn'),
      cpu?: int32(name='Cpu', description='The number of CPU cores of the cluster.', example='14'),
      createTime?: string(name='CreateTime', description='The time in UTC when the cluster was created.', example='2021-10-19T07:13:41Z'),
      deployMode?: string(name='DeployMode', description='The data replica distribution mode of the cluster. Valid values:    

- n: indicates the single-IDC mode.  
- n-n: indicates the dual-IDC mode.  
- n-n-n: indicates the multi-IDC mode. The integer n represents the number of OBServer nodes in each IDC.', example='1-1-1'),
      deployType?: string(name='DeployType', description='The deployment type of the cluster. Valid values:   
- multiple: multi-IDC deployment  
- single: single-IDC deployment  
- dual: dual-IDC deployment', example='multiple'),
      diskSize?: string(name='DiskSize', description='The size of the storage space, in GB.', example='200'),
      diskType?: string(name='DiskType', description='The type of the storage disk where the cluster is deployed.   
The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.', example='cloud_essd_pl1'),
      enableUpgradeNodes?: boolean(name='EnableUpgradeNodes', description='Indicates whether new nodes can be added.', example='true'),
      expireSeconds?: int32(name='ExpireSeconds', description='The time elapsed since the expiration of the cluster, in seconds.', example='2606682'),
      expireTime?: string(name='ExpireTime', description='The time in UTC when the cluster expires.', example='2021-10-17T16:00:00Z'),
      instanceClass?: string(name='InstanceClass', description='The specifications of the cluster.  You can specify one of the following four plans:  
- 8C32G: indicates 8 CPU cores and 32 GB of memory.  
- 14C70G: indicates 14 CPU cores and 70 GB of memory.  
- 30C180G: indicates 30 CPU cores and 180 GB of memory.  
- 62C400G: indicates 62 CPU cores and 400 GB of memory.', example='14C70G'),
      instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
      instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.', example='ob4test'),
      instanceRole?: string(name='InstanceRole'),
      instanceType?: string(name='InstanceType', description='The instance type.', example='KAFKA_PUBLIC'),
      maintainTime?: string(name='MaintainTime', description='The time period in UTC for the daily routine maintenance of the cluster.', example='2021-10-19T07:13:41Z'),
      mem?: long(name='Mem', description='The memory size of the instance, in GB.', example='70'),
      payType?: string(name='PayType', description='The billing method for the OceanBase cluster. Valid values:  
- PREPAY: the subscription billing method.  
- POSTPAY: the pay-as-you-go billing method.', example='PREPAY'),
      resource?: {
        cpu?: {
          totalCpu?: long(name='TotalCpu', description='The total number of CPU cores of the cluster.', example='14'),
          unitCpu?: long(name='UnitCpu', description='The number of CPU cores of each replica node in the cluster.', example='10'),
          usedCpu?: long(name='UsedCpu', description='The number of CPU cores used in the cluster.', example='10'),
        }(name='Cpu', description='The information about the CPU resources of the cluster.'),
        diskSize?: {
          totalDiskSize?: long(name='TotalDiskSize', description='The total storage space of the cluster, in GB.', example='200'),
          unitDiskSize?: long(name='UnitDiskSize', description='The storage space of each replica node in the cluster, in GB.', example='200'),
          usedDiskSize?: long(name='UsedDiskSize', description='The size of used storage space of the cluster, in GB.', example='100'),
        }(name='DiskSize', description='The information about the storage resources of the cluster.'),
        memory?: {
          totalMemory?: long(name='TotalMemory', description='The total memory size of the cluster, in GB.', example='70'),
          unitMemory?: long(name='UnitMemory', description='The memory size of each replica node in the cluster, in GB.', example='10'),
          usedMemory?: long(name='UsedMemory', description='The size of used memory in the cluster, in GB.', example='10'),
        }(name='Memory', description='The information about the memory resources of the cluster.'),
        unitCount?: long(name='UnitCount', description='The number of resource units in the cluster.', example='1'),
      }(name='Resource', description='The information about cluster resources.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='group1'),
      securityIps?: [ string ](name='SecurityIps', description='The whitelist information of the cluster.'),
      series?: string(name='Series', description='The series of the OceanBase cluster. Valid values:   
- NORMAL: the high availability edition.   
- BASIC: the basic edition.', example='NORMAL'),
      state?: string(name='State', description='The status of the cluster. Valid values:   
- PENDING_CREATE: The cluster is being created.  
- ONLINE: The cluster is running.  
- TENANT_CREATING: The tenant is being created.  
- TENANT_SPEC_MODIFYING: The tenant specifications are being modified.  
- EXPANDING: Nodes are being added to the cluster to increase its capacity.  
- REDUCING: Nodes are being removed from the cluster to reduce its capacity.  
- SPEC_UPGRADING: The service plan is being upgraded.  
- DISK_UPGRADING: The storage space is being expanded.  
- WHITE_LIST_MODIFYING: The whitelist is being modified.  
- PARAMETER_MODIFYING: Parameters are being modified.  
- SSL_MODIFYING: The SSL certificate is being changed.  
- PREPAID_EXPIRE_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to PREPAY.  
- ARREARS_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to POSTPAY.  
- PENDING_DELETE: The cluster is being deleted.   
Generally, the cluster is in the ONLINE state.', example='ONLINE'),
      usedDiskSize?: long(name='UsedDiskSize', description='The size of used storage space of the cluster, in GB.', example='20'),
      version?: string(name='Version', description='The OBServer version.', example='2.2.77'),
      vpcId?: string(name='VpcId', description='vpcId', example='vpc-8vb8qjrixzovjpy******'),
    }
  ](name='Instances', description='The information of the OceanBase cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='The number of OceanBase clusters queried.', example='2'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', true, 'form', request);
}

model DescribeNodeMetricsRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='The end time of the time range for querying monitoring data.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  metrics: string(name='Metrics', description='The monitoring metrics.     
For more information about supported metrics, see [Node statistics](~~212099~~).', example='tps', position='Body'),
  nodeIdList?: string(name='NodeIdList', description='The list of nodes.', example='[i-bp16niirq4zdmgvm****,i-bp16n56hq4z4fgvm****]', position='Body'),
  nodeName?: string(name='NodeName', description='The name of the node.', example='i-bp16niirq4zdmgvm****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.   
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying monitoring data.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='tfafd34fs****', position='Body'),
}

model DescribeNodeMetricsResponseBody = {
  nodeMetrics?: string(name='NodeMetrics', description='The metrics of the node.', example='-'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='The total count.', example='9'),
}

model DescribeNodeMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeMetricsResponseBody(name='body'),
}

async function describeNodeMetrics(request: DescribeNodeMetricsRequest): DescribeNodeMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeMetrics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model DescribeOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: {
    businessName?: string(name='BusinessName', description='The business system identifier, which is optional and is a specific field of the Post message.', example='OMS_TEST'),
    destConfig?: {
      enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
      endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
      endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
      msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
      partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
      partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
      producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
      sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
      sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
      sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
      serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
      topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
    }(name='DestConfig', description='The settings of the destination data source.'),
    labels?: [ 
      {
        count?: int32(name='Count', description='The number of projects that use this label.', example='3'),
        creator?: string(name='Creator', description='The creator. This parameter value is returned only when you log on as the administrator.', example='Zhang San'),
        id?: string(name='Id', description='The ID of a label.', example='abc'),
        name?: string(name='Name', description='The name of the label.', example='label_name'),
      }
    ](name='Labels', description='A collection of label IDs.'),
    projectId?: string(name='ProjectId', description='The project ID.', example='p_gasdfdsfg'),
    projectName?: string(name='ProjectName', description='The name of the project.', example='The name of the project.'),
    projectOwner?: string(name='ProjectOwner', description='The project owner.', example='Zhang San'),
    sourceConfig?: {
      enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
      endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
      endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
      msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
      partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
      partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
      producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
      sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
      sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
      sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
      serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
      topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
    }(name='SourceConfig', description='The settings of the source data source.'),
    steps?: [ 
      {
        estimatedRemainingSeconds?: long(name='EstimatedRemainingSeconds', description='The estimated time remained.', example='100'),
        extraInfo?: {
          errorCode?: string(name='ErrorCode', description='The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.', example='PARAMERROR'),
          errorDetails?: [ 
            {
              code?: string(name='Code', description='The error code.', example='200'),
              level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='CRITICAL'),
              message?: string(name='Message', description='The error message.', example='A system error occurred.'),
              proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
            }
          ](name='ErrorDetails', description='The error details.'),
          errorMsg?: string(name='ErrorMsg', description='The error message.', example='A system error occurred.'),
          errorParam?: map[string]string(name='ErrorParam', description='The error related parameters.'),
          failedTime?: string(name='FailedTime', description='The time when the error occurred.', example='2020-05-22T17:04:18'),
        }(name='ExtraInfo', description='The additional information. The value is a JSON string.'),
        finishTime?: string(name='FinishTime', description='The end time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
        interactive?: boolean(name='Interactive', description='Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.', example='true'),
        startTime?: string(name='StartTime', description='The start time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
        stepDescription?: string(name='StepDescription', description='The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.', example='Schema migration'),
        stepInfo?: {
          capacity?: long(name='Capacity', description='The estimated total number of rows.', example='10'),
          checkpoint?: string(name='Checkpoint', description='The checkpoint. The value is a unix timestamp in seconds.', example='1'),
          connectorFullProgressOverview?: {
            estimatedRemainingTimeOfSec?: long(name='EstimatedRemainingTimeOfSec', description='The estimated maximum time remained, in seconds.', example='100'),
            estimatedTotalCount?: long(name='EstimatedTotalCount', description='The estimated amount of data to migrate.', example='100'),
            finishedCount?: long(name='FinishedCount', description='The amount of data migrated.', example='50'),
            progress?: int32(name='Progress', description='finishedCount / estimatedTotalCount', example='1120'),
          }(name='ConnectorFullProgressOverview', description='The full synchronization progress.'),
          deployId?: string(name='DeployId', description='The resource deployment ID.', example='abcd'),
          dstIops?: long(name='DstIops', description='The read/write throughput of the destination data source, in bytes per second.', example='1'),
          dstRps?: long(name='DstRps', description='The read/write RPS of the destination data source.', example='1'),
          dstRpsRef?: long(name='DstRpsRef', description='The read/write RPS baseline of the destination data source.', example='1'),
          dstRt?: long(name='DstRt', description='The read/write RT per record of the destination data source, in ms.', example='1'),
          dstRtRef?: long(name='DstRtRef', description='The read/write RT baseline of the destination data source.', example='1'),
          gmt?: long(name='Gmt', description='The checkpoint collection time. The value is a unix timestamp in seconds.', example='1'),
          inconsistencies?: long(name='Inconsistencies', description='The amount of inconsistent data found during full verification.', example='1'),
          incrTimestampCheckpoint?: long(name='IncrTimestampCheckpoint', description='The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.', example='1'),
          jobId?: string(name='JobId', description='The job ID.', example='abcd'),
          processedRecords?: long(name='ProcessedRecords', description='The number of migrated rows.', example='6'),
          skipped?: boolean(name='Skipped', description='A sub-status that indicates whether this step is skipped.', example='true'),
          srcIops?: long(name='SrcIops', description='The read throughput of the source data source, in bytes per second.', example='1'),
          srcIopsRef?: long(name='SrcIopsRef', description='The read throughput baseline of the source data source.', example='1'),
          srcRps?: long(name='SrcRps', description='The read requests per second (RPS) of the source data source.', example='1'),
          srcRpsRef?: long(name='SrcRpsRef', description='The read RPS baseline of the source data source.', example='1'),
          srcRt?: long(name='SrcRt', description='The read response time (RT) per record of the source data source, in ms.', example='1'),
          srcRtRef?: long(name='SrcRtRef', description='The read RT baseline of the source data source.', example='1'),
          validated?: boolean(name='Validated', description='A sub-status that indicates whether the checker has completed full verification.', example='true'),
        }(name='StepInfo', description='The step details. The value is a JSON string.'),
        stepName?: string(name='StepName', description='The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.', example='structmigration'),
        stepOrder?: int32(name='StepOrder', description='The sequence of steps.', example='1'),
        stepProgress?: int32(name='StepProgress', description='The step progress.', example='10'),
        stepStatus?: string(name='StepStatus', description='The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.', example='INT'),
      }
    ](name='Steps', description='The detailed project steps.'),
    transferMapping?: {
      databases?: [ 
        {
          databaseId?: string(name='DatabaseId', description='The ID of the database. This parameter takes effect when the source data source is IDB.', example='db_id1'),
          databaseName?: string(name='DatabaseName', description='The name of the database.', example='db1'),
          mappedName?: string(name='MappedName', description='The mapped-to database. This parameter takes effect when the destination data source is a database.', example='mapped_db'),
          tables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys', description='The list of distribution key columns.'),
                partitionLifeCycle?: int32(name='PartitionLifeCycle', description='The lifecycle of the table.', example='30'),
                partitionStatement?: string(name='PartitionStatement', description='The partitioning expression.', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys', description='The list of primary key columns.'),
              }(name='AdbTableSchema', description='The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.'),
              filterColumns?: [ string ](name='FilterColumns', description='The list of filter columns, which are the columns to be synchronized.'),
              mappedName?: string(name='MappedName', description='The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.', example='mapped_table'),
              shardColumns?: [ string ](name='ShardColumns', description='The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.'),
              tableId?: string(name='TableId', description='The ID of the table. This parameter takes effect when the source data source is IDB.', example='table_id'),
              tableName?: string(name='TableName', description='The name of the table.', example='table'),
              type?: string(name='Type', description='Valid values: DATABASE and TABLE.', example='DATABASE'),
              whereClause?: string(name='WhereClause', description='The row filter conditions.', example='id > 1'),
            }
          ](name='Tables', description='The settings for the target table objects in the current database.'),
          tenantName?: string(name='TenantName', description='The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.', example='tenant'),
          type?: string(name='Type', description='Valid values: DATABASE and TABLE.', example='DATABASE'),
        }
      ](name='Databases', description='The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.'),
      mode?: string(name='Mode', description='The mapping type. Valid values: \\"NORMAL\\" and \\"WHITE_AND_BLACK_LIST\\".', example='NORMAL'),
    }(name='TransferMapping', description='The mappings for the synchronization objects.'),
    transferStepConfig?: {
      enableFullSync?: boolean(name='EnableFullSync', description='Indicates whether full migration is enabled.', example='false'),
      enableIncrSync?: boolean(name='EnableIncrSync', description='Indicates whether incremental synchronization is enabled.', example='false'),
      enableStructSync?: boolean(name='EnableStructSync', description='Indicates whether schema synchronization is enabled.', example='false'),
      incrSyncStepTransferConfig?: {
        recordTypeList?: [ string ](name='RecordTypeList', description='The list of data types of incremental data synchronized in incremental synchronization.'),
        startTimestamp?: long(name='StartTimestamp', description='The start time for incremental synchronization. The value is a timestamp in seconds.', example='1656644154'),
        storeLogKeptHour?: long(name='StoreLogKeptHour', description='The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.', example='1'),
        storeTransactionEnabled?: boolean(name='StoreTransactionEnabled', description='Indicates whether intra-transaction sequencing is enabled when incremental synchronization is enabled and the incremental log pull component is Store.', example='false'),
        transferStepType?: string(name='TransferStepType', description='Valid values: STRUCT, FULL, and INCR.', example='STRUCT'),
      }(name='IncrSyncStepTransferConfig', description='The settings of incremental synchronization steps.'),
    }(name='TransferStepConfig', description='The settings of synchronization steps'),
  }(name='Data', description='The business data returned.'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model DescribeOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOmsOpenAPIProjectResponseBody(name='body'),
}

async function describeOmsOpenAPIProject(request: DescribeOmsOpenAPIProjectRequest): DescribeOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOmsOpenAPIProjectStepsRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model DescribeOmsOpenAPIProjectStepsResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: [ 
    {
      estimatedRemainingSeconds?: long(name='EstimatedRemainingSeconds', description='The estimated time remained.', example='2020-05-22T17:04:18'),
      extraInfo?: {
        errorCode?: string(name='ErrorCode', description='The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.', example='INNER_ERROR'),
        errorDetails?: [ 
          {
            code?: string(name='Code', description='The error code.', example='200'),
            level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='CRITICAL'),
            message?: string(name='Message', description='The error message.', example='A system error occurred.'),
            proposal?: string(name='Proposal', description='The suggestions.', example='Contact the administrator.'),
          }
        ](name='ErrorDetails', description='The error details.'),
        errorMsg?: string(name='ErrorMsg', description='The error message.', example='A system error occurred.'),
        errorParam?: map[string]string(name='ErrorParam', description='The error related parameters.'),
        failedTime?: string(name='FailedTime', description='The time when the error occurred.', example='2020-05-22T17:04:18'),
      }(name='ExtraInfo', description='The additional information. The value is a JSON string.'),
      finishTime?: string(name='FinishTime', description='The end time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:05:18'),
      interactive?: boolean(name='Interactive', description='Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.', example='false'),
      startTime?: string(name='StartTime', description='The start time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
      stepDescription?: string(name='StepDescription', description='The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.', example='Schema migration'),
      stepInfo?: {
        capacity?: long(name='Capacity', description='The estimated total number of rows.', example='10000'),
        checkpoint?: string(name='Checkpoint', description='The checkpoint. The value is a unix timestamp in seconds.', example='1656669613'),
        connectorFullProgressOverview?: {
          estimatedRemainingTimeOfSec?: long(name='EstimatedRemainingTimeOfSec', description='The estimated maximum time remained, in seconds.', example='100'),
          estimatedTotalCount?: long(name='EstimatedTotalCount', description='The estimated amount of data to migrate.', example='100'),
          finishedCount?: long(name='FinishedCount', description='The amount of data migrated.', example='50'),
          progress?: int32(name='Progress', description='finishedCount / estimatedTotalCount', example='1120'),
        }(name='ConnectorFullProgressOverview', description='The full synchronization progress.'),
        deployId?: string(name='DeployId', description='The resource deployment ID.', example='ewtfqwt'),
        dstIops?: long(name='DstIops', description='The read/write throughput of the destination data source, in bytes per second.', example='1'),
        dstRps?: long(name='DstRps', description='The read/write RPS of the destination data source.', example='1'),
        dstRpsRef?: long(name='DstRpsRef', description='The read/write RPS baseline of the destination data source.', example='1'),
        dstRt?: long(name='DstRt', description='The read/write RT per record of the destination data source, in ms.', example='1'),
        dstRtRef?: long(name='DstRtRef', description='The read/write RT baseline of the destination data source.', example='1'),
        gmt?: long(name='Gmt', description='The checkpoint collection time. The value is a unix timestamp in seconds.', example='1656669613'),
        inconsistencies?: long(name='Inconsistencies', description='The amount of inconsistent data found during full verification.', example='1'),
        incrTimestampCheckpoint?: long(name='IncrTimestampCheckpoint', description='The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.', example='100'),
        jobId?: string(name='JobId', description='The job ID.', example='abcd'),
        processedRecords?: long(name='ProcessedRecords', description='The number of migrated rows.', example='10'),
        skipped?: boolean(name='Skipped', description='A sub-status that indicates whether this step is skipped.', example='false'),
        srcIops?: long(name='SrcIops', description='The read throughput of the source data source, in bytes per second.', example='1'),
        srcIopsRef?: long(name='SrcIopsRef', description='The read throughput baseline of the source data source.', example='1'),
        srcRps?: long(name='SrcRps', description='The read requests per second (RPS) of the source data source.', example='1'),
        srcRpsRef?: long(name='SrcRpsRef', description='The read RPS baseline of the source data source.', example='1'),
        srcRt?: long(name='SrcRt', description='The read response time (RT) per record of the source data source, in ms.', example='1'),
        srcRtRef?: long(name='SrcRtRef', description='The read RT baseline of the source data source.', example='1'),
        validated?: boolean(name='Validated', description='A sub-status that indicates whether the checker has completed full verification.', example='false'),
      }(name='StepInfo', description='The step details. The value is a JSON string.'),
      stepName?: string(name='StepName', description='The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.', example='structmigration'),
      stepOrder?: int32(name='StepOrder', description='The sequence of steps.', example='1'),
      stepProgress?: int32(name='StepProgress', description='The step progress.', example='10'),
      stepStatus?: string(name='StepStatus', description='The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.', example='INIT'),
    }
  ](name='Data', description='The business data returned.'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model DescribeOmsOpenAPIProjectStepsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOmsOpenAPIProjectStepsResponseBody(name='body'),
}

async function describeOmsOpenAPIProjectSteps(request: DescribeOmsOpenAPIProjectStepsRequest): DescribeOmsOpenAPIProjectStepsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOmsOpenAPIProjectSteps', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOutlineBindingRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  databaseName: string(name='DatabaseName', description='The name of the database.', example='testdb', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  isConcurrentLimit?: boolean(name='IsConcurrentLimit', description='- When the value is set to True, the throttling information in the database is queried based on the SQL ID.   
- When the value is set to False, the bound index or execution plan in the database is queried based on the SQL ID.', example='false', position='Body'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tableName: string(name='TableName', description='The name of the tenant.    
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_). It cannot be set to SYS.', example='pay_online', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeOutlineBindingResponseBody = {
  outlineBinding?: {
    bindIndex?: string(name='BindIndex', description='The bound index.', example='PRIMARY'),
    bindPlan?: string(name='BindPlan', description='The bound plan.', example='PHY_TABLE_SCAN | bmsql_order_line | 40 ******'),
    maxConcurrent?: int32(name='MaxConcurrent', description='The maximum number of concurrent tasks.', example='2'),
    outlineId?: long(name='OutlineId', description='OutlineID.', example='-1'),
  }(name='OutlineBinding', description='The binding information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeOutlineBindingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOutlineBindingResponseBody(name='body'),
}

async function describeOutlineBinding(request: DescribeOutlineBindingRequest): DescribeOutlineBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOutlineBinding', 'POST', '/', 'json', true, 'form', request);
}

model DescribeParametersRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  dimension: string(name='Dimension', description='The type of the parameter.    
Valid values: CLUSTER and TENANT.', example='TENANT', position='Body'),
  dimensionValue?: string(name='DimensionValue', description='The resource ID of the parameter type.   
You can leave this parameter unspecified when you call this operation to query cluster parameters. In the case of tenant parameters, pass the tenant ID.', example='ob2mr3oae0****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      acceptableValue?: [ string ](name='AcceptableValue', description='The valid value range of the parameter.  It is an array with two string elements, which represents a range. The first element represents the minimum value and the second element represents the maximum value.'),
      currentValue?: string(name='CurrentValue', description='The current value of the parameter.', example='600'),
      defaultValue?: string(name='DefaultValue', description='The default value of the parameter.', example='600s'),
      description?: string(name='Description', description='The description of the parameter.', example='The maximum delay allowed in weak-consistency reads.'),
      name?: string(name='Name', description='The name of the parameter.', example='connect_timeout'),
      needReboot?: boolean(name='NeedReboot', description='Indicates whether a restart is required for changes to the parameter to take effect. Valid values:   
- true: A restart is required.   
- false: A restart is not required.', example='false'),
      rejectedValue?: [ string ](name='RejectedValue', description='The invalid value range of the parameter.    
It is an array with two string elements, which represents a range. The first element represents the minimum value and the second element represents the maximum value.'),
      valueType?: string(name='ValueType', description='The type of the parameter value.    Valid values:   
- ENUM: an enumeration value.   
- RANGE: a value range.   
- TIME: a time value.   
- CAPACITY: a storage capacity, in KB, MB, or GB.', example='CAPACITY'),
    }
  ](name='Parameters', description='The information of parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', true, 'form', request);
}

model DescribeParametersHistoryRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  dimension: string(name='Dimension', description='The type of the parameter.   
Valid values: CLUSTER and TENANT.', example='TENANT', position='Body'),
  dimensionValue?: string(name='DimensionValue', description='The resource ID of the parameter type.   
You can leave this parameter unspecified when you call this operation to query the modification history of cluster parameters. In the case of tenant parameters, pass the tenant ID.', example='ob2mr3oae0****', position='Body'),
  endTime: string(name='EndTime', description='The end time for the query of parameter modification history.', example='2021-09-13 15:40:43', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', minimum=1, maximum=999999, position='Body'),
  pageSize: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='10', minimum=1, maximum=999999, position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying the parameter modification history.', example='2021-06-13 15:40:43', position='Body'),
}

model DescribeParametersHistoryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  respond?: [ 
    {
      pageNumber?: int32(name='PageNumber', description='The number of returned entries on each page.', example='Default value: 10.'),
      parameters?: [ 
        {
          createTime?: string(name='CreateTime', description='The time when the parameter modification was initiated.', example='2021-09-14 10:57:44'),
          dimensionValue?: string(name='DimensionValue', description='The resource ID of the parameter type.    
- When you called this operation to query the modification history of cluster parameters, the value is DEFAULT_DIMENSION_VALUE.   
- When you called this operation to query the modification history of tenant parameters, the value is the tenant ID.', example='DEFAULT_DIMENSION_VALUE'),
          name?: string(name='Name', description='The name of the parameter.', example='connect_timeout'),
          newValue?: string(name='NewValue', description='The value of the parameter after the modification.', example='200'),
          oldValue?: string(name='OldValue', description='The parameter value before modification.', example='300'),
          status?: string(name='Status', description='The modification status. Valid values:    
- APPLIED: The modification was successful.   
- SCHEDULING: The modification was to be made.', example='APPLIED'),
          updateTime?: string(name='UpdateTime', description='The time when the parameter modification took effect.', example='2021-09-14 10:57:44'),
        }
      ](name='Parameters', description='The parameter modification history.'),
      totalCount?: int32(name='TotalCount', description='The number of parameter modification records.', example='2'),
    }
  ](name='Respond', description='The list of parameter modification records.'),
}

model DescribeParametersHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersHistoryResponseBody(name='body'),
}

async function describeParametersHistory(request: DescribeParametersHistoryRequest): DescribeParametersHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParametersHistory', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRecommendIndexRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  SQLId: string(name='SQLId', description='You can obtain the SQL ID from the return value of the DescribeSlowSQLList or DescribeTopSQLList operation.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeRecommendIndexResponseBody = {
  recommendIndex?: {
    suggestIndex?: string(name='SuggestIndex', description='The index recommended for the SQL statement after calculation by the diagnostic system.   
- If the recommended index is the primary key, PRIMARY is returned.  
- If an index created by the user is recommended, the index name is returned.   
The system recommends only one index for an SQL statement. You can call the DescribeIndexes operation to view the indexes of a table.', example='PRIMARY'),
    tableList?: string(name='TableList', description='The tables.   
The data tables involved in the SQL statement corresponding to the SQL ID are returned. For a single-table query, the data table accessed is returned. For a join query, all data tables accessed by the SQL statement are returned and separated with vertical bars (|), for example, "Table1|Table2".', example='testtable'),
    tenantMode?: string(name='TenantMode', description='The tenant mode.   Valid values:  
Oracle   
MySQL', example='mysql'),
  }(name='RecommendIndex', description='The information about the recommended index.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeRecommendIndexResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecommendIndexResponseBody(name='body'),
}

async function describeRecommendIndex(request: DescribeRecommendIndexRequest): DescribeRecommendIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendIndex', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLDetailsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSQLDetailsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SQLDetails?: [ 
    {
      dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
      SQLText?: string(name='SQLText', description='The SQL text.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      userName?: string(name='UserName', description='The username.', example='tester'),
    }
  ](name='SQLDetails', description='The details of the SQL statement.'),
}

model DescribeSQLDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLDetailsResponseBody(name='body'),
}

async function describeSQLDetails(request: DescribeSQLDetailsRequest): DescribeSQLDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLDetails', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLHistoryListRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='The end time of the time range for querying the SQL execution history.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.   
Default value: 10.', example='10', position='Body'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying the SQL execution history.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSQLHistoryListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SQLHistoryList?: {
    count?: long(name='Count', description='The quantity.', example='1'),
    list?: [ 
      {
        affectedRows?: long(name='AffectedRows', description='The number of rows affected.', example='0'),
        appWaitTime?: float(name='AppWaitTime', description='The wait time of the client.', example='0.0'),
        blockCacheHit?: long(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
        blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
        bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
        clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
        concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The wait time in concurrent execution.', example='0.0'),
        cpuTime?: float(name='CpuTime', description='The average CPU time.', example='50.13'),
        dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
        decodeTime?: float(name='DecodeTime', description='The time to wait for decoding.', example='0.0'),
        diskRead?: long(name='DiskRead', description='The number of physical reads.', example='0'),
        elapsedTime?: float(name='ElapsedTime', description='The average response time.', example='76.382'),
        endTime?: long(name='EndTime', description='The end time.', example='2021-12-28T02:08:18Z'),
        endTimeUTCString?: string(name='EndTimeUTCString', description='The end time in UTC +0.', example='2021-12-28T02:08:18Z'),
        event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
        execPerSecond?: long(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
        executeTime?: float(name='ExecuteTime', description='The internal execution time.', example='61.044'),
        executions?: long(name='Executions', description='The number of executions.', example='89403'),
        failTimes?: long(name='FailTimes', description='The number of failures.', example='0'),
        getPlanTime?: float(name='GetPlanTime', description='The time spent in hard parsing.', example='0.052'),
        IOWaitTime?: float(name='IOWaitTime', description='The I/O wait time.', example='0.0'),
        logicalRead?: long(name='LogicalRead', description='The number of logical reads.', example='19'),
        maxCpuTime?: float(name='MaxCpuTime', description='The maximum CPU time.', example='257.967'),
        maxElapsedTime?: float(name='MaxElapsedTime', description='The maximum response time.', example='260.44'),
        memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
        missPlans?: long(name='MissPlans', description='The number of plan misses.', example='0'),
        netWaitTime?: float(name='NetWaitTime', description='The network latency.', example='0.0'),
        nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
        queueTime?: float(name='QueueTime', description='The queuing time.', example='15.275'),
        RPCCount?: long(name='RPCCount', description='The number of RPCs.', example='0'),
        remotePlans?: long(name='RemotePlans', description='The number of remote plans.', example='0'),
        retryCount?: long(name='RetryCount', description='The number of retries.', example='0'),
        returnRows?: long(name='ReturnRows', description='The number of rows returned.', example='1'),
        rowCacheHit?: long(name='RowCacheHit', description='The number of row cache hits.', example='0'),
        scheduleTime?: float(name='ScheduleTime', description='The scheduling duration.', example='0.0'),
        ssstoreReadRowCount?: long(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
        totalWaitTime?: float(name='TotalWaitTime', description='The internal wait time.', example='10.966'),
        userName?: string(name='UserName', description='The username.', example='tester'),
      }
    ](name='List'),
  }(name='SQLHistoryList', description='The execution history of the SQL statement.'),
}

model DescribeSQLHistoryListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLHistoryListResponseBody(name='body'),
}

async function describeSQLHistoryList(request: DescribeSQLHistoryListRequest): DescribeSQLHistoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLHistoryList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLPlansRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSQLPlansResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  SQLPlans?: [ 
    {
      avgExecutionMS?: float(name='AvgExecutionMS', description='The average execution duration, in ms.', example='1'),
      avgExecutionTimeMS?: long(name='AvgExecutionTimeMS', description='The average execution duration when the database uses this execution plan, in ms.', example='288'),
      firstLoadTime?: long(name='FirstLoadTime', description='The time when the plan was loaded for the first time, .', example='1641492303000'),
      firstLoadTimeUTCString?: string(name='FirstLoadTimeUTCString', description='The time when the plan was loaded for the first time, in UTC +0.', example='2022-01-06T18:05:03Z'),
      hitCount?: int32(name='HitCount', description='The number of hits.', example='3'),
      mergedVersion?: int32(name='MergedVersion', description='The major compaction version.', example='132'),
      nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp16niirq4zdmgvm****'),
      outlineData?: string(name='OutlineData', description='The outline data.', example='/*+ BEGIN_OUTLINE_DATA FULL(@\\"SEL$1\\" \\"testdb1.bmsql_order_line\\"@\\"SEL$1\\") END_OUTLINE_DATA*/'),
      outlineId?: long(name='OutlineId', description='OutlineID.', example='-1'),
      outlineTime?: long(name='OutlineTime', description='The time when the plan was bound.', example='1641492303000'),
      outlineTimeUTCString?: string(name='OutlineTimeUTCString', description='The time when the plan was bound, in UTC +0.', example='2022-01-06T18:05:03Z'),
      planFull?: string(name='PlanFull', description='The complete execution plan of the SQL statement.', example='PHY_TABLE_SCAN | bmsql_order_line | 40 ******'),
      planId?: int32(name='PlanId', description='The ID of the SQL execution plan in the database.', example='9114'),
      planInfo?: string(name='PlanInfo', description='The information about the plan.', example='PHY_TABLE_SCAN'),
      planUnionHash?: string(name='PlanUnionHash', description='The unique identifier of the SQL execution plan in the diagnostic system.', example='859ef7ee****b23ac98cdeb2476f****'),
      querySQL?: string(name='QuerySQL', description='The query SQL statement.', example='SELECT ol_i_id, ***, *** FROM aaa'),
    }
  ](name='SQLPlans', description='The information about the execution plan.'),
}

model DescribeSQLPlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlansResponseBody(name='body'),
}

async function describeSQLPlans(request: DescribeSQLPlansRequest): DescribeSQLPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPlans', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSecurityIpGroupsRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='i-bp67acfmxazb4p****', position='Body'),
}

model DescribeSecurityIpGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroups?: [ 
    {
      securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the security group.', example='online_paycore'),
      securityIps?: string(name='SecurityIps', description='The list of IP addresses and CIDR blocks in the whitelist.   
It is a JSON array. Each object in the array is an IP address or CIDR block.', example='{“127.0.0.1”, ”123.123.1.23“}'),
    }
  ](name='SecurityIpGroups', description='The information of the IP address whitelist group.'),
  totalCount?: int32(name='TotalCount', description='The number of whitelist groups returned.', example='2'),
}

model DescribeSecurityIpGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpGroupsResponseBody(name='body'),
}

async function describeSecurityIpGroups(request: DescribeSecurityIpGroupsRequest): DescribeSecurityIpGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIpGroups', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSlowSQLHistoryListRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='The end time of the time range for querying the execution history of the slow SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-12-14T08:34:49Z', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.  
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  SQLId: string(name='SQLId', description='The SQL ID, which uniquely identifies an SQL statement.', example='8D6E84735C0****1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying the execution history of the slow SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-12-14T02:34:49Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t384tolsj****', position='Body'),
}

model DescribeSlowSQLHistoryListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  slowSQLHistoryList?: {
    count?: long(name='Count', description='The quantity.', example='1'),
    list?: [ 
      {
        affectedRows?: double(name='AffectedRows', description='The number of rows affected.', example='0'),
        appWaitTime?: double(name='AppWaitTime', description='The wait time of the client.', example='0.0'),
        blockCacheHit?: double(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
        blockIndexCacheHit?: double(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
        bloomFilterCacheHit?: double(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
        clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
        concurrencyWaitTime?: double(name='ConcurrencyWaitTime', description='The wait time in concurrent execution.', example='0.0'),
        cpuTime?: double(name='CpuTime', description='The average CPU time.', example='50.13'),
        dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
        decodeTime?: double(name='DecodeTime', description='The time to wait for decoding.', example='0.0'),
        diskRead?: double(name='DiskRead', description='The number of physical reads.', example='0'),
        elapsedTime?: double(name='ElapsedTime', description='The average response time.', example='76.382'),
        endTimeUTCString?: string(name='EndTimeUTCString', description='The end time.', example='2021-12-28T02:08:18Z'),
        event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
        execPerSecond?: double(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
        executeTime?: double(name='ExecuteTime', description='The internal execution time.', example='61.044'),
        executions?: double(name='Executions', description='The number of executions.', example='89403'),
        failTimes?: double(name='FailTimes', description='The number of failures.', example='0'),
        getPlanTime?: double(name='GetPlanTime', description='Hard parsing time.', example='0.052'),
        IOWaitTime?: double(name='IOWaitTime', description='The I/O wait time.', example='0.0'),
        logicalRead?: double(name='LogicalRead', description='The number of logical reads.', example='19'),
        maxCpuTime?: double(name='MaxCpuTime', description='The maximum CPU time.', example='257.967'),
        maxElapsedTime?: double(name='MaxElapsedTime', description='The maximum response time.', example='260.044'),
        memstoreReadRowCount?: double(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
        missPlans?: double(name='MissPlans', description='The number of plan misses.', example='0'),
        netWaitTime?: double(name='NetWaitTime', description='The wait time for network.', example='0.0'),
        nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
        queueTime?: double(name='QueueTime', description='The queuing time.', example='15.275'),
        RPCCount?: double(name='RPCCount', description='The number of RPCs.', example='0'),
        remotePlans?: double(name='RemotePlans', description='The number of remote plans.', example='0'),
        retryCount?: double(name='RetryCount', description='The number of retries.', example='0'),
        returnRows?: double(name='ReturnRows', description='The number of rows returned.', example='1'),
        rowCacheHit?: double(name='RowCacheHit', description='The number of row cache hits.', example='0'),
        scheduleTime?: double(name='ScheduleTime', description='The scheduling duration.', example='0.0'),
        sqlId?: string(name='SqlId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****'),
        sqlType?: string(name='SqlType', description='The SQL type.', example='1'),
        ssstoreReadRowCount?: double(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
        tenantName?: string(name='TenantName', description='The name of the tenant.', example='pay_online'),
        totalWaitTime?: double(name='TotalWaitTime', description='The internal wait time.', example='10.966'),
        userName?: string(name='UserName', description='The username.', example='tester'),
      }
    ](name='List', description='The return result of the request.'),
  }(name='SlowSQLHistoryList', description='The execution history of the slow SQL statement.'),
}

model DescribeSlowSQLHistoryListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowSQLHistoryListResponseBody(name='body'),
}

async function describeSlowSQLHistoryList(request: DescribeSlowSQLHistoryListRequest): DescribeSlowSQLHistoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowSQLHistoryList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSlowSQLListRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  dbName?: string(name='DbName', description='The name of the database.', example='testdb', position='Body'),
  endTime: string(name='EndTime', description='The end time of the time range for querying slow SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  filterCondition?: map[string]any(name='FilterCondition', description='The filter condition.', example='[dbName:sys]', shrink='json', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP address of the database node.', example='i-bp18qljorblo8es*****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of rows to return on each page.  
- Maximum value: 100  
- Default value: 10', example='10', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  SQLId?: string(name='SQLId', description='The SQL ID, which uniquely identifies an SQL statement.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParameter?: string(name='SearchParameter', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sortColumn?: string(name='SortColumn', description='The sorted column.', example='cputime', position='Body'),
  sortOrder?: string(name='SortOrder', description='The sorting rule.', example='desc', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying slow SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSlowSQLListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  slowSQLList?: [ 
    {
      affectedRows?: long(name='AffectedRows', description='The number of rows affected.', example='0'),
      appWaitTime?: float(name='AppWaitTime', description='The wait time of the client.', example='0.0'),
      blockCacheHit?: long(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
      blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
      bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
      concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The wait time in concurrent execution.', example='0.0'),
      cpuTime?: float(name='CpuTime', description='The average CPU time.', example='50.13'),
      dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
      decodeTime?: float(name='DecodeTime', description='The time to wait for decoding.', example='0.0'),
      diskRead?: long(name='DiskRead', description='The number of physical reads.', example='0'),
      elapsedTime?: float(name='ElapsedTime', description='The average response time.', example='76.382'),
      event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
      execPerSecond?: float(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
      executeTime?: float(name='ExecuteTime', description='The internal execution time.', example='61.044'),
      executions?: long(name='Executions', description='The number of executions.', example='89403'),
      failTimes?: long(name='FailTimes', description='The number of failures.', example='0'),
      getPlanTime?: float(name='GetPlanTime', description='The time spent in hard parsing.', example='0.052'),
      IOWaitTime?: float(name='IOWaitTime', description='The I/O wait time.', example='0.0'),
      key?: long(name='Key', description='The sequence number of the returned SQL statement.', example='1'),
      logicalRead?: long(name='LogicalRead', description='The number of logical reads.', example='19'),
      maxCpuTime?: float(name='MaxCpuTime', description='The maximum CPU time.', example='257.967'),
      maxElapsedTime?: float(name='MaxElapsedTime', description='The maximum response time.', example='260.044'),
      memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
      missPlans?: long(name='MissPlans', description='The number of plan misses.', example='0'),
      netWaitTime?: float(name='NetWaitTime', description='The network latency.', example='0.0'),
      nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
      queueTime?: float(name='QueueTime', description='The queuing time.', example='15.275'),
      RPCCount?: long(name='RPCCount', description='The number of RPCs.', example='0'),
      remotePlans?: long(name='RemotePlans', description='The number of remote plans.', example='0'),
      retryCount?: long(name='RetryCount', description='The number of retries.', example='0'),
      returnRows?: long(name='ReturnRows', description='The number of rows returned.', example='1'),
      rowCacheHit?: long(name='RowCacheHit', description='The number of row cache hits.', example='0'),
      SQLId?: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      SQLText?: string(name='SQLText', description='The SQL text.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      SQLType?: long(name='SQLType', description='The SQL type.', example='1'),
      scheduleTime?: float(name='ScheduleTime', description='The scheduling duration.', example='0.0'),
      ssstoreReadRowCount?: long(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
      totalWaitTime?: float(name='TotalWaitTime', description='The internal wait time.', example='10.966'),
      userName?: string(name='UserName', description='The username.', example='tester'),
    }
  ](name='SlowSQLList', description='The list of slow SQL statements.'),
  totalCount?: long(name='TotalCount', description='The total count.', example='2'),
}

model DescribeSlowSQLListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowSQLListResponseBody(name='body'),
}

async function describeSlowSQLList(request: DescribeSlowSQLListRequest): DescribeSlowSQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowSQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model DescribeTenantResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenant?: {
    availableZones?: [ string ](name='AvailableZones', description='The list of zones.'),
    charset?: string(name='Charset', description='The character set.', example='utf8mb4'),
    clogServiceStatus?: string(name='ClogServiceStatus', description='The enabling status of the clog service.  
- CLOSED: The clog service is disabled.  
- ONLINE: The clog service is running.', example='CLOSED'),
    collation?: string(name='Collation', description='The collation.', example='utf8mb4_general_ci'),
    createTime?: string(name='CreateTime', description='The time when the tenant was created.', example='2021-09-17 15:52:17'),
    deployMode?: string(name='DeployMode', description='The data replica distribution mode of the tenant.    

- For the high availability version, N-N-N indicates the three-zone mode, and N-N indicates the dual-zone or single-zone mode.
- For the basic version, N indicates the single-zone mode. 

> <br>N represents the number of nodes in a single zone.', example='1-1-1'),
    deployType?: string(name='DeployType', description='The deployment type of the cluster. Valid values:  
- multiple: multi-IDC deployment   
- single: single-IDC deployment   
- dual: dual-IDC deployment', example='multiple'),
    description?: string(name='Description', description='The description of the tenant.', example='PayCore business database'),
    diskType?: string(name='DiskType', description='The type of the disk.', example='cloud_essd_pl1'),
    enableClogService?: boolean(name='EnableClogService', description='Indicates whether the clog service is available. To enable the clog service, submit a ticket.', example='false'),
    enableInternetAddressService?: boolean(name='EnableInternetAddressService', description='Indicates whether the Internet address can be enabled for the tenant.', example='true'),
    enableReadWriteSplit?: boolean(name='EnableReadWriteSplit', description='Indicates whether to enable read/write splitting endpoint.', example='false'),
    instanceType?: string(name='InstanceType', description='The type of the instance.', example='KAFKA_PUBLIC'),
    masterIntranetAddressZone?: string(name='MasterIntranetAddressZone', description='The zone where the primary node is located.', example='cn-hangzhou-h'),
    payType?: string(name='PayType', description='The type of the payment.', example='POSTPAY'),
    primaryZone?: string(name='PrimaryZone', description='The primary zone of the tenant.', example='cn-hangzhou-i'),
    primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='The deployment type of the primary zone.', example='RANDOM'),
    series?: string(name='Series', description='The series of the instance.', example='normal'),
    status?: string(name='Status', description='The status of the tenant.   
- PENDING_CREATE: The tenant is being created.   
- RESTORE: The tenant is being recovered.   
- ONLINE: The tenant is running.   
- SPEC_MODIFYING: The specification of the tenant is being modified.   
- ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.  
- PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.  
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.  
- PARAMETER_MODIFYING: Parameters are being modified.   
- WHITE_LIST_MODIFYING: The whitelist is being modified.', example='ONLINE'),
    tenantConnections?: [ 
      {
        addressType?: string(name='AddressType', description='The type of the address.', example='MASTER'),
        connectionRole?: string(name='ConnectionRole', description='The service mode of the connection address. Valid values:  
- ReadWrite: provides strong-consistency read and write services.   
- ReadOnly: provides the read-only service to ensure ultimate consistency of data.   
- Clog: provides transaction log services.', example='ReadWrite'),
        connectionZones?: [ string ](name='ConnectionZones', description='The list of zones corresponding to the tenant connection.', example='["cn-hangzhou-i", "cn-hangzhou-j"]'),
        internetAddress?: string(name='InternetAddress', description='The Internet address for accessing the tenant.', example='t32a7ru5u****mo.oceanbase.aliyuncs.com'),
        internetAddressStatus?: string(name='InternetAddressStatus', description='The status of the Internet address for accessing the tenant. Valid values:   
- CLOSED: The address is disabled.   
- ALLOCATING_INTERNET_ADDRESS: An address is being applied for.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.   
- ONLINE: The address is in service.', example='CLOSED'),
        internetPort?: int32(name='InternetPort', description='The Internet port for accessing the tenant.', example='3306'),
        intranetAddress?: string(name='IntranetAddress', description='The intranet address for accessing the tenant.', example='t32a7ru5u****.oceanbase.aliyuncs.com'),
        intranetAddressMasterZoneId?: string(name='IntranetAddressMasterZoneId', description='The primary zone corresponding to the address for accessing the tenant.', example='cn-hangzhou-i'),
        intranetAddressSlaveZoneId?: string(name='IntranetAddressSlaveZoneId', description='The standby zone corresponding to the address for accessing the tenant.', example='cn-hangzhou-j'),
        intranetAddressStatus?: string(name='IntranetAddressStatus', description='The status of the intranet address for accessing the tenant.  
The value ONLINE indicates that the address is in service.', example='ONLINE'),
        intranetPort?: int32(name='IntranetPort', description='The intranet port for accessing the tenant.', example='3306'),
        transactionSplit?: boolean(name='TransactionSplit', description='Indicates whether to enable transaction splitting.', example='true'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp11k1aypnzu1l3whi****'),
        vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1qiail1asmfe23t****'),
      }
    ](name='TenantConnections', description='The connection information of the tenant.'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
    tenantMode?: string(name='TenantMode', description='The tenant mode.   
Valid values:
- Oracle   
- MySQL', example='Oracle'),
    tenantName?: string(name='TenantName', description='The name of the tenant.', example='pay_online'),
    tenantResource?: {
      cpu?: {
        totalCpu?: float(name='TotalCpu', description='The total number of CPU cores of the tenant.', example='10'),
        unitCpu?: float(name='UnitCpu', description='The number of CPU cores in each resource unit of the tenant.', example='8'),
        usedCpu?: float(name='UsedCpu', description='The number of used CPU cores of the tenant.', example='8'),
      }(name='Cpu', description='The information about the CPU resources of the tenant.'),
      diskSize?: {
        usedDiskSize?: float(name='UsedDiskSize', description='The size of used disk space of the tenant, in GB.', example='86'),
      }(name='DiskSize', description='The information about the disk resources of the tenant.'),
      memory?: {
        totalMemory?: float(name='TotalMemory', description='The total memory size of the tenant, in GB.', example='64'),
        unitMemory?: float(name='UnitMemory', description='The memory size of each resource unit of the tenant, in GB.', example='32'),
        usedMemory?: float(name='UsedMemory', description='The size of used memory of the tenant, in GB.', example='30'),
      }(name='Memory', description='The information about the memory resources of the tenant.'),
      unitNum?: int32(name='UnitNum', description='The number of resource units in the tenant.', example='1'),
    }(name='TenantResource', description='The resource information of the tenant.'),
    tenantZones?: [ 
      {
        region?: string(name='Region', description='The region where the zone of the tenant resides.', example='cn-hangzhou'),
        tenantZoneId?: string(name='TenantZoneId', description='The ID of the zone.', example='cn-hangzhou-i'),
        tenantZoneRole?: string(name='TenantZoneRole', description='The role of the zone of the tenant.', example='ReadOnly'),
      }
    ](name='TenantZones', description='The zone information of the tenant.'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.    
If no suitable VPC is available, create a VPC as prompted. For more information, see "What is a VPC".', example='vpc-bp1d2q3mhg9i23ofi****'),
  }(name='Tenant', description='The information of the tenant.'),
}

model DescribeTenantResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantResponseBody(name='body'),
}

async function describeTenant(request: DescribeTenantRequest): DescribeTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenant', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantMetricsRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='The end time of the time range for querying monitoring data.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:45:43Z', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  metrics: string(name='Metrics', description='The monitoring metrics.   
For more information about supported metrics, see [View tenant statistics](~~212125~~).', example='tps', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1 
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying monitoring data.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.   
> <br>This parameter will be deprecated. We recommend that you use the TenantIdList parameter instead.', example='tfafd34fs****', deprecated='true', position='Body'),
  tenantIdList?: string(name='TenantIdList', description='The list of tenant IDs.', example='[tdak3nac****,tdakc42df****]', position='Body'),
  tenantName?: string(name='TenantName', description='The name of the tenant.    
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.   
> <br>This parameter will be deprecated. We recommend that you use the TenantIdList parameter instead.', example='pay_online', deprecated='true', position='Body'),
}

model DescribeTenantMetricsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantMetrics?: string(name='TenantMetrics', description='The metrics of the tenant.', example='"Metrics":[ {"request_queue_rt":0.0,"TimeStamp":"2022-02-23T01:58:00Z"}]'),
  totalCount?: int32(name='TotalCount', description='The total count.', example='9'),
}

model DescribeTenantMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantMetricsResponseBody(name='body'),
}

async function describeTenantMetrics(request: DescribeTenantMetricsRequest): DescribeTenantMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantMetrics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantSecurityConfigsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='Oceanbase集群ID', example='ob317v4uif****', position='Body'),
  tenantId?: string(name='TenantId', description='租户Id', example='xxx', position='Body'),
}

model DescribeTenantSecurityConfigsResponseBody = {
  configs?: {
    tenantSecurityConfigs?: [ 
      {
        riskCount?: int32(name='RiskCount', description='租户的风险条目', example='0'),
        securityConfigs?: [ 
          {
            configDescription?: string(name='ConfigDescription', description='检测项名称', example='校验集群白名单范围是否过大'),
            configGroup?: string(name='ConfigGroup', description='风险分组', example='WHITELIST'),
            configName?: string(name='ConfigName', description='风险项目名称', example='WHITELIST_RANGE_LARGE'),
            risk?: boolean(name='Risk', description='是否有风险', example='true'),
            riskDescription?: string(name='RiskDescription', description='风险描述', example='白名单开放过大，建议按需设置'),
          }
        ](name='SecurityConfigs', description='风险列表'),
        tenantId?: string(name='TenantId', description='租户Id', example='xxx'),
        tenantName?: string(name='TenantName', description='租户名称', example='xxx'),
      }
    ](name='TenantSecurityConfigs', description='检测结果'),
    totalCheckCount?: int32(name='TotalCheckCount', description='安全配置总体检测项目', example='4'),
    totalRiskCount?: int32(name='TotalRiskCount', description='检测出来的总体风险项目', example='0'),
  }(name='Configs'),
  requestId?: string(name='RequestId', description='请求ID', example='523E7183-1490-590D-BA03-12DFD316614B'),
}

model DescribeTenantSecurityConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantSecurityConfigsResponseBody(name='body'),
}

async function describeTenantSecurityConfigs(request: DescribeTenantSecurityConfigsRequest): DescribeTenantSecurityConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantSecurityConfigs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantTagsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='Oceanbase集群ID', example='ob317v4uif****', position='Body'),
  tags?: string(name='Tags', description='标签值', example='[{"Key": "xxx", "Value", "xxx"},{}]', position='Body'),
  tenantIds?: string(name='TenantIds', description='租户id的json串', example='["xxx", "xxx"]', position='Body'),
}

model DescribeTenantTagsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源id', example='ob317v4uif****'),
      resourceType?: string(name='ResourceType', description='资源类型', example='instance'),
      tag?: string(name='Tag', description='资源标签', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
    }
  ](name='TagResources', description='标签列表'),
}

model DescribeTenantTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantTagsResponseBody(name='body'),
}

async function describeTenantTags(request: DescribeTenantTagsRequest): DescribeTenantTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantTags', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantUserRolesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
}

model DescribeTenantUserRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  role?: [ string ](name='Role', description='The list of roles of the user.   
Valid values: 

ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.
ReadOnly: a role that has only the read-only privilege SELECT.
DDL: a role that has DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.
DML: a role that has DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.'),
}

model DescribeTenantUserRolesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantUserRolesResponseBody(name='body'),
}

async function describeTenantUserRoles(request: DescribeTenantUserRolesRequest): DescribeTenantUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantUserRoles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTenantUsersRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
Start value: 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.    
Maximum value: 100. Default value: 10.', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='pay', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName?: string(name='UserName', description='The name of the database account.    
You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
}

model DescribeTenantUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUsers?: [ 
    {
      databases?: [ 
        {
          database?: string(name='Database', description='The name of the database (MySQL mode) or schema (Oracle mode).', example='db_pay1'),
          role?: string(name='Role', description='The role of the account.   
In Oracle mode, a role is a schema-level role. Valid values:  
- ReadWrite: a role that has the read and write privileges, including: CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SYNONYM, CREATE SEQUENCE, CREATE TRIGGER, CREATE TYPE, CREATE SESSION, EXECUTE ANY PROCEDURE, CREATE ANY OUTLINE, ALTER ANY OUTLINE, DROP ANY OUTLINE, CREATE ANY PROCEDURE, ALTER ANY PROCEDURE, DROP ANY PROCEDURE, CREATE ANY SEQUENCE, ALTER ANY SEQUENCE, DROP ANY SEQUENCE, CREATE ANY TYPE, ALTER ANY TYPE, DROP ANY TYPE, SYSKM, CREATE ANY TRIGGER, ALTER ANY TRIGGER, DROP ANY TRIGGER, CREATE PROFILE, ALTER PROFILE, and DROP PROFILE.  
- ReadOnly: a role that has only the read-only privilege SELECT.
In MySQL mode, a role is a database-level role. Valid values: 
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.   
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.   

> <br>By default, an Oracle account has the read and write privileges on its own schema, which are not listed here.', example='ReadOnly'),
          table?: string(name='Table', description='The name of the table.', example='tbl_pay1'),
        }
      ](name='Databases', description='The database privileges of the account.'),
      description?: string(name='Description', description='The description of the database account.', example='use for test'),
      instanceId?: string(name='InstanceId', description='所属集群Id', example='obshc32****'),
      tenantId?: string(name='TenantId', description='所属租户Id', example='tshfs3****'),
      userName?: string(name='UserName', description='The name of the database account.', example='pay_test'),
      userStatus?: string(name='UserStatus', description='The status of the database account. Valid values:   
 - LOCKED: The account is locked.   
- NORMAL: The account is unlocked.', example='NORMAL'),
      userType?: string(name='UserType', description='The type of the database account. Valid values:    
- Admin: the super administrator account.   
- NORMAL: a general account.', example='NORMAL'),
    }
  ](name='TenantUsers', description='The list of database accounts in the tenant.'),
  totalCount?: int32(name='TotalCount', description='The total number of database accounts in the tenant.', example='1'),
}

model DescribeTenantUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantUsersResponseBody(name='body'),
}

async function describeTenantUsers(request: DescribeTenantUsersRequest): DescribeTenantUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantZonesReadRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model DescribeTenantZonesReadResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantZones?: [ 
    {
      isElectable?: boolean(name='IsElectable', description='Indicates whether the zone can be set as the primary zone.', example='true'),
      isPrimary?: boolean(name='IsPrimary', description='Indicates whether the zone is the primary zone.', example='true'),
      isReadOnlyAddressMaster?: boolean(name='IsReadOnlyAddressMaster', description='Indicates whether a read-only connection has been created.', example='true'),
      isReadable?: string(name='IsReadable', description='Indicates whether a read-only connection needs to be created for the zone.', example='true'),
      zone?: string(name='Zone', description='The ID of the zone.', example='cn-hangzhou-i'),
    }
  ](name='TenantZones', description='The zone information of the tenant.'),
}

model DescribeTenantZonesReadResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantZonesReadResponseBody(name='body'),
}

async function describeTenantZonesRead(request: DescribeTenantZonesReadRequest): DescribeTenantZonesReadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantZonesRead', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantsRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.   
Start value: 1
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100.
- Default value: 10', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='pay', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  tenantName?: string(name='TenantName', description='The name of the tenant.   
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.', example='pay_online', position='Body'),
}

model DescribeTenantsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenants?: [ 
    {
      charset?: string(name='Charset', description='字符集', example='utf8mb4'),
      collation?: string(name='Collation', description='字符序', example='utf8mb4_general_ci'),
      cpu?: int32(name='Cpu', description='The total number of CPU cores of the tenant.', example='10'),
      createTime?: string(name='CreateTime', description='The time when the tenant was created.', example='2021-09-17 15:52:17.0'),
      deployMode?: string(name='DeployMode', description='The data replica distribution mode of the tenant.   

- For the high availability version, N-N-N indicates the three-zone mode, and N-N indicates the dual-zone or single-zone mode.
- For the basic version, N indicates the single-zone mode. 

> <br>N represents the number of nodes in a single zone.', example='1-1-1'),
      deployType?: string(name='DeployType', description='The deployment type of the tenant. <br>
- multiple: multi-IDC deployment
- single: single-IDC deployment
- dual: dual-IDC deployment', example='multiple'),
      description?: string(name='Description', description='The description of the tenant.', example='PayCore business database'),
      mem?: int32(name='Mem', description='The total memory size of the tenant, in GB.', example='20'),
      primaryZone?: string(name='PrimaryZone', description='The primary zone of the tenant.', example='cn-hangzhou-i'),
      status?: string(name='Status', description='The status of the tenant.  <br>
- PENDING_CREATE: The tenant is being created.
- RESTORE: The tenant is being recovered.
- ONLINE: The tenant is running.
- SPEC_MODIFYING: The specification of the tenant is being modified.
ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.
PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.
- PARAMETER_MODIFYING: Parameters are being modified.
- WHITE_LIST_MODIFYING: The whitelist is being modified.', example='ONLINE'),
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
      tenantMode?: string(name='TenantMode', description='The tenant mode.   
Valid values:   
Oracle
MySQL', example='Oracle'),
      tenantName?: string(name='TenantName', description='The name of the tenant.', example='pay_online'),
      unitCpu?: int32(name='UnitCpu', description='The number of CPU cores in each resource unit of the tenant.', example='5'),
      unitMem?: int32(name='UnitMem', description='The memory size of each resource unit of the tenant, in GB.', example='10'),
      unitNum?: int32(name='UnitNum', description='The number of resource units in the tenant.', example='2'),
      usedDiskSize?: double(name='UsedDiskSize', description='The number of used disks of the tenant.', example='10'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.   <br>If no suitable VPC is available, create a VPC as prompted. For more information, see "What is a VPC".', example='vpc-bp1d2q3mhg9i23ofi****'),
    }
  ](name='Tenants', description='The information of tenants.'),
  totalCount?: int32(name='TotalCount', description='The total number of tenants in the specified OceanBase cluster.', example='1'),
}

model DescribeTenantsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTenantsResponseBody(name='body'),
}

async function describeTenants(request: DescribeTenantsRequest): DescribeTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenants', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTimeZonesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
}

model DescribeTimeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  timeZones?: {
    default?: string(name='Default', description='The default time zone.', example='Asia/Shanghai'),
    list?: [ 
      {
        description?: string(name='Description', description='The description of the time zone.', example='(GMT+8:00) Asia/Shanghai'),
        timeZone?: string(name='TimeZone', description='The name of the time zone.', example='Asia/Shanghai'),
      }
    ](name='List', description='The list of time zones.'),
  }(name='TimeZones', description='The time zones supported by the tenant.'),
}

model DescribeTimeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTimeZonesResponseBody(name='body'),
}

async function describeTimeZones(request: DescribeTimeZonesRequest): DescribeTimeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTimeZones', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTopSQLListRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  dbName?: string(name='DbName', description='The name of the database.', example='testdb', position='Body'),
  endTime: string(name='EndTime', description='The end time of the time range for querying TOP SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  filterCondition?: map[string]any(name='FilterCondition', description='The filter condition.', example='[dbName:sys]', shrink='json', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp19y05uq6xpacyqnlrc', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  SQLId?: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParameter?: string(name='SearchParameter', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sortColumn?: string(name='SortColumn', description='The sorted column.', example='cputime', position='Body'),
  sortOrder?: string(name='SortOrder', description='The sorting rule.', example='desc', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying TOP SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeTopSQLListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  topSQLList?: [ 
    {
      affectedRows?: long(name='AffectedRows', description='The number of rows affected.', example='0'),
      appWaitTime?: float(name='AppWaitTime', description='The wait time of the client, in ms.', example='0.0'),
      blockCacheHit?: long(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
      blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
      bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
      concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The wait time in concurrent execution, in ms.', example='0.0'),
      cpuTime?: float(name='CpuTime', description='The average CPU time, in ms.', example='50.13'),
      dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
      decodeTime?: float(name='DecodeTime', description='The time to wait for decoding, in ms.', example='0.0'),
      diskRead?: long(name='DiskRead', description='The number of physical reads.', example='0'),
      elapsedTime?: float(name='ElapsedTime', description='The average response time, in ms.', example='76.382'),
      event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
      execPerSecond?: float(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
      executeTime?: float(name='ExecuteTime', description='The internal execution time, in ms.', example='61.044'),
      executions?: long(name='Executions', description='The number of executions.', example='89403'),
      failTimes?: long(name='FailTimes', description='The number of failures.', example='0'),
      getPlanTime?: float(name='GetPlanTime', description='The time spent in hard parsing, in ms.', example='0.052'),
      IOWaitTime?: float(name='IOWaitTime', description='The I/O wait time, in ms.', example='0.0'),
      key?: long(name='Key', description='The sequence number of the returned SQL statement.', example='1'),
      logicalRead?: long(name='LogicalRead', description='The average number of logical reads of the SQL statement during the specified period of time.   
The value covers the numbers of reads of different caches and the number of disk I/Os. It is an important metric for measuring the SQL filtering performance.   

> <br> A higher ratio of the number of logical reads to the number of returned rows indicates poorer filtering performance. General causes include non-standard content written by SQL statements, non-standard table indexes created, and non-standard SQL execution plans.', example='19'),
      maxCpuTime?: float(name='MaxCpuTime', description='The maximum CPU time, in ms.', example='257.967'),
      maxElapsedTime?: float(name='MaxElapsedTime', description='The maximum response time, in ms.', example='260.044'),
      memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
      missPlans?: long(name='MissPlans', description='The number of plan misses.', example='0'),
      netWaitTime?: float(name='NetWaitTime', description='The network latency, in ms.', example='0.0'),
      nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
      queueTime?: float(name='QueueTime', description='The queuing time, in ms.', example='15.275'),
      RPCCount?: long(name='RPCCount', description='The number of RPCs.', example='0'),
      remotePlans?: long(name='RemotePlans', description='The number of remote plans.', example='0'),
      retryCount?: long(name='RetryCount', description='The number of retries.', example='0'),
      returnRows?: long(name='ReturnRows', description='The number of rows returned.', example='1'),
      rowCacheHit?: long(name='RowCacheHit', description='The number of row cache hits.', example='0'),
      SQLId?: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      SQLText?: string(name='SQLText', description='The SQL text.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      SQLType?: long(name='SQLType', description='The SQL type.', example='1'),
      scheduleTime?: float(name='ScheduleTime', description='The scheduling duration, in ms.', example='0.0'),
      ssstoreReadRowCount?: long(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
      totalWaitTime?: float(name='TotalWaitTime', description='The internal wait time, in ms.', example='10.966'),
      userName?: string(name='UserName', description='The username.', example='tester'),
    }
  ](name='TopSQLList', description='The list of top SQL statements.'),
  totalCount?: long(name='TotalCount', description='The total count.', example='9'),
}

model DescribeTopSQLListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTopSQLListResponseBody(name='body'),
}

async function describeTopSQLList(request: DescribeTopSQLListRequest): DescribeTopSQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTopSQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeZonesRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  deployType?: string(name='DeployType', description='The deployment type of the cluster. Valid values:   
- multiple: multi-IDC deployment   
- single: single-IDC deployment   
- dual: dual-IDC deployment', example='single', position='Body'),
  series?: string(name='Series', description='The series of the OceanBase cluster. Valid values:   
NORMAL: the high availability version. This is the default value.', example='NORMAL', position='Body'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  zones?: [ 
    {
      deployType?: string(name='DeployType', description='The deployment mode.', example='1-1-1'),
      series?: string(name='Series', description='The series of the OceanBase cluster. Valid values:   
NORMAL: the high availability version. This is the default value.', example='NORMAL'),
      zoneId?: string(name='ZoneId', description='The list of zone IDs.   
For a cluster with multiple zones, separate the zone names with commas (,).', example='cn-hangzhou-i,cn-hangzhou-j,cn-hangzhou-h'),
      zoneName?: string(name='ZoneName', description='The name of the zone.', example='H/I/J'),
    }
  ](name='Zones', description='The list of zones.'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDatabaseDescriptionRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  databaseName: string(name='DatabaseName', description='The name of the database.    
You cannot use reserved keywords, such as test and mysql.', example='sms_pre', position='Body'),
  description: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model ModifyDatabaseDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyDatabaseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseDescription', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDatabaseUserRolesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  databaseName: string(name='DatabaseName', description='The name of the database.    
You cannot use reserved keywords, such as test and mysql.', example='sms_pre', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  users: string(name='Users', description='A list of usernames and their respective roles.', example='[{"UserName":"omstest","Role":"readwrite"}]', position='Body'),
}

model ModifyDatabaseUserRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    databaseName?: string(name='DatabaseName', description='The name of the database.', example='sms_pre'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
    users?: [ 
      {
        role?: string(name='Role', description='The role of the account.   
In MySQL mode, a role is a database-level role. Valid values:
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.
- ReadOnly: a role that has only the read-only privilege SELECT. 
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW. 
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='ReadOnly'),
        userName?: string(name='UserName', description='The name of the account.', example='user_pay_ro'),
      }
    ](name='Users', description='The accounts that have privileges on the database.'),
  }(name='TenantUser', description='The account information.'),
}

model ModifyDatabaseUserRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseUserRolesResponseBody(name='body'),
}

async function modifyDatabaseUserRoles(request: ModifyDatabaseUserRolesRequest): ModifyDatabaseUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseUserRoles', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceNameRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the OceanBase cluster.   
It must be 1 to 20 characters in length.', example='ob4prod', position='Body'),
}

model ModifyInstanceNameResponseBody = {
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.', example='ob4test'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNameResponseBody(name='body'),
}

async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceNodeNumRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='Oceanbase集群的ID', example='ob3h8ytroxxxxx', position='Body'),
  nodeNum: string(name='NodeNum', description='集群节点个数信息。 如果部署模式为n-n-n，则节点个数为n * 3', example='6', position='Body'),
}

model ModifyInstanceNodeNumResponseBody = {
  data?: {
    orderId?: string(name='OrderId', description='订单号。', example='21329031xxxxxxxx'),
  }(name='Data', description='请求返回的信息。'),
  requestId?: string(name='RequestId', description='请求ID', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceNodeNumResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNodeNumResponseBody(name='body'),
}

async function modifyInstanceNodeNum(request: ModifyInstanceNodeNumRequest): ModifyInstanceNodeNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceNodeNum', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceSpecRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  diskSize?: long(name='DiskSize', description='存储空间大小，单位GB。 存储空间的限制根据集群规格不同而不同，具体如下： - 8C32G：100GB~10TB - 14C70G：200GB~10TB - 30C180G：400GB~10TB - 62C400G：800GB-10TB。 各套餐的存储空间默认值为其最小值。', example='200', position='Body'),
  instanceClass?: string(name='InstanceClass', description='集群规格信息。 当前支持四种套餐： - 8C32GB：8核 32GB - 14C70GB（默认）：14核 70GB - 30C180GB：30核 180GB - 62C400GB：62核 400GB。', example='14C70GB', position='Body'),
  instanceId: string(name='InstanceId', description='Oceanbase集群的ID。', example='ob3h8ytroxxxxx', position='Body'),
}

model ModifyInstanceSpecResponseBody = {
  data?: {
    orderId?: string(name='OrderId', description='订单ID。', example='21329031xxxxxxx'),
  }(name='Data', description='请求返回的数据。', example='1234567890'),
  requestId?: string(name='RequestId', description='请求ID', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSpec', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceTagsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tags: string(name='Tags', description='The tags.', example='[{"Key": "xxx", "Value", "xxx"},{}]', position='Body'),
}

model ModifyInstanceTagsResponseBody = {
  message?: string(name='Message', description='The update status of the tags.', example='done'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceTagsResponseBody(name='body'),
}

async function modifyInstanceTags(request: ModifyInstanceTagsRequest): ModifyInstanceTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceTags', 'POST', '/', 'json', true, 'form', request);
}

model ModifyParametersRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  dimension: string(name='Dimension', description='The type of the parameter.   
Valid values: CLUSTER and TENANT.', example='TENANT', position='Body'),
  dimensionValue?: string(name='DimensionValue', description='The resource ID of the parameter type.    
You can leave this parameter unspecified when you call this operation to modify cluster parameters. In the case of tenant parameters, pass the tenant ID.', example='ob2mr3oae0****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  parameters: string(name='Parameters', description='The parameters.   
It is a JSON array. Each object in the array has two elements: Name and Value. 

> <br>The names and values of cluster parameters that can be modified are different from those of tenant parameters. For more information, see DescribeParameters.', example='[{"Name":"connect_timeout","Value":"20"}]', position='Body'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  results?: {
    message?: string(name='Message', description='The cause of the modification failure.', example='schedule timeout.'),
    success?: boolean(name='Success', description='Indicates whether the parameter has been modified. Valid values:   
true: The modification is successful. 
false: The modification failed.', example='false'),
  }(name='Results', description='The modification results.'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParametersResponseBody(name='body'),
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameters', 'POST', '/', 'json', true, 'form', request);
}

model ModifySecurityIpsRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the IP address whitelist group.   
It must be 2 to 32 characters in length, start with a lowercase letter, end with a lowercase letter or digit, and contain only lowercase letters, digits, and underscores (_).', example='paytest', position='Body'),
  securityIps?: string(name='SecurityIps', description='The list of IP addresses and CIDR blocks in the whitelist.   
It is a JSON array. Each object in the array is an IP address or CIDR block. You can specify at most 40 IP addresses or CIDR blocks.', example='["192.168.0.0/20","192.169.1.1"]', position='Body'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the security group.', example='online_paycore'),
    securityIps?: string(name='SecurityIps', description='The list of IP addresses and CIDR blocks in the whitelist.   
The return values of SecurityIps are strings that are separated with commas (,).', example='121.41.106.33,100.104.7.0/26'),
  }(name='SecurityIpGroup', description='The information of the IP address whitelist group.'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantPrimaryZoneRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  masterIntranetAddressZone?: string(name='MasterIntranetAddressZone', description='The availability zone where the primary node is located.', example='cn-hangzhou-h', position='Body'),
  modifyType?: string(name='ModifyType', description='The switching mode.', example='AllLink', position='Body'),
  primaryZone?: string(name='PrimaryZone', description='The primary zone of the tenant.    
It is one of the zones in which the cluster is deployed.', example='cn-hangzhou-h', position='Body'),
  primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='The deployment type of the primary zone.', example='RANDOM', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userVSwitchId?: string(name='UserVSwitchId', description='The ID of the vSwitch.', example='vsw-xxx', position='Body'),
}

model ModifyTenantPrimaryZoneResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantPrimaryZoneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantPrimaryZoneResponseBody(name='body'),
}

async function modifyTenantPrimaryZone(request: ModifyTenantPrimaryZoneRequest): ModifyTenantPrimaryZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantPrimaryZone', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantResourceRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  cpu: int32(name='Cpu', description='The information about the CPU resources of the tenant.', example='2', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  memory: int32(name='Memory', description='The memory size of the tenant, in GB.', example='2', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model ModifyTenantResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
}

model ModifyTenantResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantResourceResponseBody(name='body'),
}

async function modifyTenantResource(request: ModifyTenantResourceRequest): ModifyTenantResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantResource', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantTagsRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='Oceanbase集群ID', example='ob317v4uif****', position='Body'),
  tags: string(name='Tags', description='标签值', example='[{"Key": "xxx", "Value", "xxx"},{}]', position='Body'),
  tenantId: string(name='TenantId', description='租户id', example='xxx', position='Body'),
}

model ModifyTenantTagsResponseBody = {
  message?: string(name='Message', description='打标情况', example='done'),
  requestId?: string(name='RequestId', description='请求ID', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantTagsResponseBody(name='body'),
}

async function modifyTenantTags(request: ModifyTenantTagsRequest): ModifyTenantTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantTags', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserDescriptionRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  description: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The name of the database account.   
You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
}

model ModifyTenantUserDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantUserDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantUserDescriptionResponseBody(name='body'),
}

async function modifyTenantUserDescription(request: ModifyTenantUserDescriptionRequest): ModifyTenantUserDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserDescription', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserPasswordRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The name of the database account.    
You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
  userPassword: string(name='UserPassword', description='The password of the database account.    
It must be 10 to 32 characters in length and contain three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. The special characters are ! @ # $ % \\ ^ \\ & \\ * ( ) _ + - =', example='!Aliyun4Oceanbase', position='Body'),
}

model ModifyTenantUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantUserPasswordResponseBody(name='body'),
}

async function modifyTenantUserPassword(request: ModifyTenantUserPasswordRequest): ModifyTenantUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserRolesRequest {
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  modifyType?: string(name='ModifyType', description='The type of the privilege modification operation.   
Valid values:  
update: updates all privileges. This is the default value.  
add: adds a privilege.  
delete: deletes a privilege.', example='update', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The name of the database account.   
You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
  userRole: string(name='UserRole', description='The role of the database account.', example='[{"Database":"20210824160559","Role":"readwrite"}]', position='Body'),
}

model ModifyTenantUserRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
    userName?: string(name='UserName', description='The name of the account.', example='pay_test'),
    userRole?: [ 
      {
        database?: string(name='Database', description='The name of the database (MySQL mode) or schema (Oracle mode).', example='db_pay1'),
        isSuccess?: boolean(name='IsSuccess', description='Indicates whether the privilege was granted to the role.', example='true'),
        role?: string(name='Role', description='The role of the account.', example='ReadOnly'),
        table?: string(name='Table', description='The name of the table.', example='tbl_pay1'),
      }
    ](name='UserRole', description='The type of the account. Valid values:   
- Admin: the super administrator account.   
- Normal: a general account.', example='The list of database privileges of the account.'),
  }(name='TenantUser', description='The list of database accounts in the tenant.'),
}

model ModifyTenantUserRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantUserRolesResponseBody(name='body'),
}

async function modifyTenantUserRoles(request: ModifyTenantUserRolesRequest): ModifyTenantUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserRoles', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserStatusRequest {
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The name of the database account.    
You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
  userStatus: string(name='UserStatus', description='The status of the database account. Valid values:   
- Locked: The account is locked. 
- Online: The account is unlocked.', example='Locked', position='Body'),
}

model ModifyTenantUserStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: [ 
    {
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
      userName?: string(name='UserName', description='The name of the account.', example='pay_test'),
      userStatus?: string(name='UserStatus', description='The status of the database account. Valid values:   
- LOCKED: The account is locked. 
- ONLINE: The account is unlocked.', example='LOCKED'),
    }
  ](name='TenantUser', description='The list of database accounts in the tenant.'),
}

model ModifyTenantUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantUserStatusResponseBody(name='body'),
}

async function modifyTenantUserStatus(request: ModifyTenantUserStatusRequest): ModifyTenantUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserStatus', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model ReleaseOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent, in seconds.', example='1'),
  data?: boolean(name='Data', description='Indicates whether the project is released.', example='true'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model ReleaseOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseOmsOpenAPIProjectResponseBody(name='body'),
}

async function releaseOmsOpenAPIProject(request: ReleaseOmsOpenAPIProjectRequest): ReleaseOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model ResetOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model ResetOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent, in seconds.', example='1'),
  data?: boolean(name='Data', description='Indicates whether the resetting is successful.', example='true'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model ResetOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ResetOmsOpenAPIProjectResponseBody(name='body'),
}

async function resetOmsOpenAPIProject(request: ResetOmsOpenAPIProjectRequest): ResetOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model ResumeOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model ResumeOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent, in seconds.', example='1'),
  data?: boolean(name='Data', description='Indicates whether the project is resumed.', example='True'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model ResumeOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeOmsOpenAPIProjectResponseBody(name='body'),
}

async function resumeOmsOpenAPIProject(request: ResumeOmsOpenAPIProjectRequest): ResumeOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model SearchOmsOpenAPIMonitorMetricRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  beginTime?: long(name='BeginTime', description='The query start time, which is a second-level timestamp.', example='1656512800', position='Body'),
  endTime?: long(name='EndTime', description='The query end time, which is a second-level timestamp.', example='1656512860', position='Body'),
  maxPointNum?: long(name='MaxPointNum', description='The maximum number of query points.', example='5', position='Body'),
  metric?: string(name='Metric', description='The query metric. For example, if you want to query the incremental transactions per second (TPS), set the value to CONNECTOR_TPS. Valid values: CONNECTOR_TPS: the TPS of the Connector component; CONNECTOR_DELAY: the latency of the Connector component; CONNECTOR_SOURCE_QUEUE_SIZE: the queue size of the Connector source; CONNECTOR_IOPS: the Connector IOPS; CONNECTOR_WRITE_COST: the time spent in writing at the Connector destination; CONNECTOR_SOURCE_READ_COST: the time spent in reading at the Connector source; JDBCWRITER_DELAY: the latency of the JDBCWriter; JDBCWRITER_IOPS: the IOPS of the JDBCWriter; JDBCWRITER_RPS: the requests per second (RPS) of the JDBCWriter; STORE_DELAY: the latency of the Store component; STORE_CONN: the number of store connections; STORE_IOPS: the IOPS of the Store component; STORE_TPS: the TPS of the Store component; CHECKER_SOURCE_NONE_RPS: the instantaneous RPS of the Checker component at the source end during full migration; CHECKER_SOURCE_AVG_RPS: the average RPS of the Checker component at the source end during full migration; CHECKER_DEST_NONE_RPS: the instantaneous RPS of the Checker component at the destination end during full migration; CHECKER_DEST_AVG_RPS: the average RPS of the Checker component at the destination end during full migration; CHECKER_SOURCE_NONE_RT: the instantaneous response time (RT) of the Checker component at the source end during full migration; CHECKER_SOURCE_AVG_RT: the average RT of the Checker component at the source end during full migration; CHECKER_DEST_NONE_RT: the instantaneous RT of the Checker component at the destination end during full migration; CHECKER_DEST_AVG_RT: the average RT of the Checker component at the destination end during full migration; CHECKER_SOURCE_NONE_READ_IOPS: the instantaneous read IOPS of the Checker component at the source end during full migration; CHECKER_SOURCE_AVG_READ_IOPS: the average read IOPS of the Checker component at the source end during full migration; CHECKER_DEST_NONE_WRITE_IOPS: the instantaneous write IOPS of the Checker component at the destination end during full migration; CHECKER_DEST_AVG_WRITE_IOPS: the average write IOPS of the Checker component at the destination end during full migration; CHECKER_VERIFY_SOURCE_NONE_RPS: the instantaneous RPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_SOURCE_AVG_RPS: the average RPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_DEST_NONE_RPS: the instantaneous RPS of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_DEST_AVG_RPS: the average RPS of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_SOURCE_NONE_RT: the instantaneous RT of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_SOURCE_AVG_RT: the average RT of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_DEST_NONE_RT: the instantaneous RT of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_DEST_AVG_RT: the average RT of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_SOURCE_NONE_READ_IOPS: the instantaneous read IOPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_SOURCE_AVG_READ_IOPS: the average read IOPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_DEST_NONE_READ_IOPS: the instantaneous read IOPS of the Checker-Verify component at the destination end during full verification; and CHECKER_VERIFY_DEST_AVG_READ_IOPS: the average read IOPS of the Checker-Verify component at the destination end during full verification.', example='CONNECTOR_TPS', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The ID of the project to query.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model SearchOmsOpenAPIMonitorMetricResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: [ 
    {
      dataPoints?: [ 
        {
          timestamp?: long(name='Timestamp', description='A millisecond-level timestamp.', example='1656669613'),
          value?: double(name='Value', description='The value corresponding to the time.', example='200'),
        }
      ](name='DataPoints', description='connector data point'),
      metric?: string(name='Metric', description='The name of the metric.', example='CONNECTOR_TPS'),
      tags?: map[string]string(name='Tags', description='metric tags'),
    }
  ](name='Data', description='The business data returned.'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model SearchOmsOpenAPIMonitorMetricResponse = {
  headers: map[string]string(name='headers'),
  body: SearchOmsOpenAPIMonitorMetricResponseBody(name='body'),
}

async function searchOmsOpenAPIMonitorMetric(request: SearchOmsOpenAPIMonitorMetricRequest): SearchOmsOpenAPIMonitorMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchOmsOpenAPIMonitorMetric', 'POST', '/', 'json', true, 'form', request);
}

model SearchOmsOpenAPIProjectsRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  destDbTypes?: [ string ](name='DestDbTypes', description='The types of destination data sources.', shrink='json', position='Body'),
  labelIds?: [ string ](name='LabelIds', description='The list of labels.', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  searchKey?: string(name='SearchKey', description='The keyword for fuzzy search. A fuzzy search is performed based on the project ID and name.', example='projectName', position='Body'),
  sourceDbTypes?: [ string ](name='SourceDbTypes', description='The types of source data sources.', shrink='json', position='Body'),
  statusList?: [ string ](name='StatusList', description='The list of project statuses.', shrink='json', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model SearchOmsOpenAPIProjectsResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: [ 
    {
      businessName?: string(name='BusinessName', description='The business system identifier, which is optional and is a specific field of the Post message.', example='OMS_TEST'),
      destConfig?: {
        enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
        endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
        endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: MYSQL, MARIADB, OB_MYSQL, OB_MYSQL_CE, OB_ORACLE, ORACLE, DB2_LUW, KAFKA, ROCKETMQ, DATAHUB, SYBASE, LOGPROXY, ADB, DBP_OP_ROUTE, DMS, IDB, and TIDB.', example='OB_MYSQL'),
        msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
        partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, and RocketMQ, and the partitioning mode is set to ONE.', example='0'),
        partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
        producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
        sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
        sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
        sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
        serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
        topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
      }(name='DestConfig', description='The settings of the destination data source.'),
      labels?: [ 
        {
          count?: int32(name='Count', description='The number of projects that use this label.', example='3'),
          creator?: string(name='Creator', description='The creator. This parameter value is returned only when you log on as the administrator.', example='admin'),
          id?: string(name='Id', description='The ID of a label.', example='abc'),
          name?: string(name='Name', description='The name of the label.', example='test'),
        }
      ](name='Labels', description='A collection of label IDs.'),
      projectId?: string(name='ProjectId', description='The project ID.', example='p_gasdfdsfg'),
      projectName?: string(name='ProjectName', description='The name of the project.', example='p_gasdfdsfg'),
      projectOwner?: string(name='ProjectOwner', description='The project owner.', example='Zhang San'),
      sourceConfig?: {
        enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
        endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
        endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
        msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
        partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
        partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
        producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
        sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
        sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
        sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
        serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
        topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
      }(name='SourceConfig', description='The settings of the source data source.'),
      steps?: [ 
        {
          estimatedRemainingSeconds?: long(name='EstimatedRemainingSeconds', description='The estimated time remained.', example='2020-05-22T17:04:18'),
          extraInfo?: {
            errorCode?: string(name='ErrorCode', description='The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.', example='INNER_ERROR'),
            errorDetails?: [ 
              {
                code?: string(name='Code', description='The error code.', example='200'),
                level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='CRITICAL'),
                message?: string(name='Message', description='The error message.', example='A system error occurred.'),
                proposal?: string(name='Proposal', description='The suggestions.', example='Contact the administrator.'),
              }
            ](name='ErrorDetails', description='The error details.'),
            errorMsg?: string(name='ErrorMsg', description='The error message.', example='A system error occurred.'),
            errorParam?: map[string]string(name='ErrorParam', description='The error related parameters.'),
            failedTime?: string(name='FailedTime', description='The time when the error occurred.', example='2020-05-22T17:04:18'),
          }(name='ExtraInfo', description='The additional information. The value is a JSON string.'),
          finishTime?: string(name='FinishTime', description='The end time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:05:18'),
          interactive?: boolean(name='Interactive', description='Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.', example='false'),
          startTime?: string(name='StartTime', description='The start time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
          stepDescription?: string(name='StepDescription', description='The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.', example='Schema migration'),
          stepInfo?: {
            capacity?: long(name='Capacity', description='The estimated total number of rows.', example='10000'),
            checkpoint?: string(name='Checkpoint', description='The checkpoint. The value is a unix timestamp in seconds.', example='1'),
            connectorFullProgressOverview?: {
              estimatedRemainingTimeOfSec?: long(name='EstimatedRemainingTimeOfSec', description='The estimated maximum time remained, in seconds.', example='100'),
              estimatedTotalCount?: long(name='EstimatedTotalCount', description='The estimated amount of data to migrate.', example='100'),
              finishedCount?: long(name='FinishedCount', description='The amount of data migrated.', example='50'),
              progress?: int32(name='Progress', description='finishedCount / estimatedTotalCount', example='1120'),
            }(name='ConnectorFullProgressOverview', description='The full synchronization progress.'),
            deployId?: string(name='DeployId', description='The resource deployment ID.', example='ewtfqwt'),
            dstIops?: long(name='DstIops', description='The read/write throughput of the destination data source, in bytes per second.', example='1'),
            dstRps?: long(name='DstRps', description='The read/write RPS of the destination data source.', example='1'),
            dstRpsRef?: long(name='DstRpsRef', description='The read/write RPS baseline of the destination data source.', example='1'),
            dstRt?: long(name='DstRt', description='The read/write RT per record of the destination data source, in ms.', example='1'),
            dstRtRef?: long(name='DstRtRef', description='The read/write RT baseline of the destination data source.', example='1'),
            gmt?: long(name='Gmt', description='The checkpoint collection time. The value is a unix timestamp in seconds.', example='1'),
            inconsistencies?: long(name='Inconsistencies', description='The amount of inconsistent data found during full verification.', example='1'),
            incrTimestampCheckpoint?: long(name='IncrTimestampCheckpoint', description='The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.', example='1'),
            jobId?: string(name='JobId', description='The ID of the current job of the step.', example='j_dfasefsd'),
            processedRecords?: long(name='ProcessedRecords', description='The number of migrated rows.', example='10'),
            skipped?: boolean(name='Skipped', description='A sub-status that indicates whether this step is skipped.', example='false'),
            srcIops?: long(name='SrcIops', description='The read throughput of the source data source, in bytes per second.', example='1'),
            srcIopsRef?: long(name='SrcIopsRef', description='The read throughput baseline of the source data source.', example='1'),
            srcRps?: long(name='SrcRps', description='The read requests per second (RPS) of the source data source.', example='1'),
            srcRpsRef?: long(name='SrcRpsRef', description='The read RPS baseline of the source data source.', example='1'),
            srcRt?: long(name='SrcRt', description='The read response time (RT) per record of the source data source, in ms.', example='1'),
            srcRtRef?: long(name='SrcRtRef', description='The read RT baseline of the source data source.', example='1'),
            validated?: boolean(name='Validated', description='A sub-status that indicates whether the checker has completed full verification.', example='false'),
          }(name='StepInfo', description='The step details. The value is a JSON string.'),
          stepName?: string(name='StepName', description='The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.', example='structmigration'),
          stepOrder?: int32(name='StepOrder', description='The sequence of steps.', example='1'),
          stepProgress?: int32(name='StepProgress', description='The step progress.', example='10'),
          stepStatus?: string(name='StepStatus', description='The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.', example='INIT'),
        }
      ](name='Steps', description='The detailed project steps.'),
      transferMapping?: {
        databases?: [ 
          {
            databaseId?: string(name='DatabaseId', description='The ID of the database. This parameter takes effect when the source data source is IDB.', example='db_id1'),
            databaseName?: string(name='DatabaseName', description='The name of the database.', example='db1'),
            mappedName?: string(name='MappedName', description='The mapped-to database. This parameter takes effect when the destination data source is a database.', example='mapped_db'),
            tables?: [ 
              {
                adbTableSchema?: {
                  distributedKeys?: [ string ](name='DistributedKeys', description='The list of distribution key columns.'),
                  partitionLifeCycle?: int32(name='PartitionLifeCycle', description='The lifecycle of the table.', example='30'),
                  partitionStatement?: string(name='PartitionStatement', description='The partitioning expression.', example='PARTITION BY VALUE(\\"id\\")'),
                  primaryKeys?: [ string ](name='PrimaryKeys', description='The list of primary key columns.'),
                }(name='AdbTableSchema', description='The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.'),
                filterColumns?: [ string ](name='FilterColumns', description='The list of filter columns, which are the columns to be synchronized.'),
                mappedName?: string(name='MappedName', description='The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.', example='mapped_table'),
                shardColumns?: [ string ](name='ShardColumns', description='The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.'),
                tableId?: string(name='TableId', description='The ID of the table. This parameter takes effect when the source data source is IDB.', example='table_id'),
                tableName?: string(name='TableName', description='The name of the table.', example='table'),
                type?: string(name='Type', description='DATABASE, TABLE', example='DATABASE'),
                whereClause?: string(name='WhereClause', description='The row filter conditions.', example='id > 1'),
              }
            ](name='Tables', description='The settings for the target table objects in the current database.'),
            tenantName?: string(name='TenantName', description='The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.', example='tenant'),
            type?: string(name='Type', description='DATABASE, TABLE', example='DATABASE'),
          }
        ](name='Databases', description='The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.'),
        mode?: string(name='Mode', description='The mapping type. Valid values: \\"NORMAL\\" and \\"WHITE_AND_BLACK_LIST\\".', example='NORMAL'),
      }(name='TransferMapping', description='The mappings for the synchronization objects.'),
      transferStepConfig?: {
        enableFullSync?: boolean(name='EnableFullSync', description='Indicates whether full migration is enabled.', example='false'),
        enableIncrSync?: boolean(name='EnableIncrSync', description='Indicates whether incremental synchronization is enabled.', example='false'),
        enableStructSync?: boolean(name='EnableStructSync', description='Indicates whether schema synchronization is enabled.', example='false'),
        incrSyncStepTransferConfig?: {
          recordTypeList?: [ string ](name='RecordTypeList', description='The list of data types of incremental data synchronized in incremental synchronization.'),
          startTimestamp?: long(name='StartTimestamp', description='The start time for incremental synchronization. The value is a timestamp in seconds.', example='1656644154'),
          storeLogKeptHour?: long(name='StoreLogKeptHour', description='The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.', example='1'),
          storeTransactionEnabled?: boolean(name='StoreTransactionEnabled', description='Indicates whether intra-transaction sequencing is enabled when incremental synchronization is enabled and the incremental log pull component is Store.', example='false'),
          transferStepType?: string(name='TransferStepType', description='STRUCT, FULL, INCR', example='STRUCT'),
        }(name='IncrSyncStepTransferConfig', description='The settings of incremental synchronization steps.'),
      }(name='TransferStepConfig', description='The settings of synchronization steps'),
    }
  ](name='Data', description='The business data returned.'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model SearchOmsOpenAPIProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: SearchOmsOpenAPIProjectsResponseBody(name='body'),
}

async function searchOmsOpenAPIProjects(request: SearchOmsOpenAPIProjectsRequest): SearchOmsOpenAPIProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchOmsOpenAPIProjects', 'POST', '/', 'json', true, 'form', request);
}

model StartOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='10', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_12345', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcd', position='Body'),
}

model StartOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions.', example='cepmgjxp'),
  code?: string(name='Code', description='The error code (old).', example='200'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: boolean(name='Data', description='Indicates whether the project is started.', example='True'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='200'),
    level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='WARN'),
    message?: string(name='Message', description='The error description (new).', example='successful'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='successful'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='True'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='168'),
}

model StartOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: StartOmsOpenAPIProjectResponseBody(name='body'),
}

async function startOmsOpenAPIProject(request: StartOmsOpenAPIProjectRequest): StartOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

model StopOmsOpenAPIProjectRequest {
  regionId?: string(name='RegionId', description='实例所属的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1', position='Body'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj', position='Body'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***', position='Body'),
}

model StopOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: boolean(name='Data', description='Indicates whether the project is paused.', example='True'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model StopOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  body: StopOmsOpenAPIProjectResponseBody(name='body'),
}

async function stopOmsOpenAPIProject(request: StopOmsOpenAPIProjectRequest): StopOmsOpenAPIProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopOmsOpenAPIProject', 'POST', '/', 'json', true, 'form', request);
}

