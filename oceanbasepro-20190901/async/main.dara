/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OceanBasePro';
  @version = '2019-09-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchKillProcessListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  sessionList: string(name='SessionList', description='The list of sessions to close.', example='[{"ProxySessId":"752113700739156671","SessionId":3221555062,"ServerIp":"10.***.**.***"}]', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****', position='Body'),
}

model BatchKillProcessListResponseBody = {
  data?: [ 
    {
      success?: boolean(name='Success', description='Indicates whether the calling is successful.', example='true'),
    }
  ](name='Data', description='The array of the return result.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model BatchKillProcessListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchKillProcessListResponseBody(name='body'),
}

async function batchKillProcessList(request: BatchKillProcessListRequest): BatchKillProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchKillProcessList', 'POST', '/', 'json', true, 'form', request);
}

model BatchKillSessionListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  sessionList: string(name='SessionList', description='The list of sessions, which is concatenated with commas.
>The session information is obtained from the result returned by the DescribeSessionList API.', example='342,354,343', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model BatchKillSessionListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model BatchKillSessionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchKillSessionListResponseBody(name='body'),
}

async function batchKillSessionList(request: BatchKillSessionListRequest): BatchKillSessionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchKillSessionList', 'POST', '/', 'json', true, 'form', request);
}

model CancelProjectModifyRecordRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='344000005', position='Body'),
}

model CancelProjectModifyRecordResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='30'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='200'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model CancelProjectModifyRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelProjectModifyRecordResponseBody(name='body'),
}

async function cancelProjectModifyRecord(request: CancelProjectModifyRecordRequest): CancelProjectModifyRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelProjectModifyRecord', 'POST', '/', 'json', true, 'form', request);
}

model CreateBackupSetDownloadLinkRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  backupSetId: string(name='BackupSetId', example='bak-6f****', position='Body'),
  instanceId: string(name='InstanceId', example='i-bp67acfmxazb4p****', position='Body'),
}

model CreateBackupSetDownloadLinkResponseBody = {
  downloadTaskId?: long(name='DownloadTaskId', example='10000***67'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model CreateBackupSetDownloadLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBackupSetDownloadLinkResponseBody(name='body'),
}

async function createBackupSetDownloadLink(request: CreateBackupSetDownloadLinkRequest): CreateBackupSetDownloadLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupSetDownloadLink', 'POST', '/', 'json', true, 'form', request);
}

model CreateDatabaseRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  clientToken?: string(name='ClientToken', description='The name of the database.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  collation?: string(name='Collation', description='The encoding standard of the database.
For more information, see the Charset field returned by the DescribeCharset operation.', example='utf8mb4_general_ci', position='Body'),
  databaseName: string(name='DatabaseName', description='Alibaba Cloud CLI', example='sms_pre', position='Body'),
  description?: string(name='Description', description='The operation that you want to perform.   
Set the value to **CreateDatabase**.', example='this is a test database', position='Body'),
  encoding: string(name='Encoding', description='The ID of the tenant.', example='utf8mb4', position='Body'),
  instanceId: string(name='InstanceId', description='The collation.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The name of the database.   
You cannot use reserved keywords, such as test and mysql.', example='ob2mr3oae0****', position='Body'),
}

model CreateDatabaseResponseBody = {
  databaseName?: string(name='DatabaseName', description='CreateDatabase', example='sms_pre'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model CreateDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatabaseResponseBody(name='body'),
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabase', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable automatic renewal.   
This parameter is valid only when the ChargeType parameter is set to PrePaid. Valid values: 
- true: enables automatic renewal for the instance.   
- false: disables automatic renewal for the instance. This is the default value.', example='true', position='Body'),
  autoRenewPeriod?: long(name='AutoRenewPeriod', description='The automatic renewal period of the instance. This parameter is required when the AutoRenew parameter is set to true. Valid values:  
- If the PeriodUnit parameter is set to Year: "1", "2", and "3".   
- If the PeriodUnit parameter is set to Month: "1", "2", "3", "6", and "12".', example='2', position='Body'),
  chargeType: string(name='ChargeType', description='The billing method of the instance. Valid values:  
- PrePay: the subscription billing method. You must ensure that the remaining balance or credit balance of your account can cover the cost of the subscription. Otherwise, you will receive an InvalidPayMethod error. 
- PostPay: the pay-as-you-go billing method. This is the default value. By default, fees are charged on an hourly basis.', example='PrePay', position='Body'),
  cpuArch?: string(name='CpuArch', example='x86', position='Body'),
  diskSize?: long(name='DiskSize', description='The size of the storage space,in GB.    
The limits on the storage space vary with the cluster specifications:   
- 8C32GB: 100 GB to 10000 GB   
- 14C70GB: 200 GB to 10000 GB   
- 30C180GB: 400 GB to 10000 GB   
- 62C400GB: 800 GB to 10000 GB    
The preceding minimum storage space sizes are the default storage space sizes of the corresponding cluster specification plans.', example='200', position='Body'),
  diskType?: string(name='DiskType', description='The type of the storage disk where the cluster is deployed. This parameter takes effect only for Standard Cluster Edition (Cloud Disk).
Valid values:
- cloud_essd_pl1: ESSD PL1.
- cloud_essd_pl0: ESSD PL0. Default value: cloud_essd_pl1.', example='cloud_essd_pl1', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
- true: Only a dry-run request is sent and the instance is not created. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
- false: The actual request is sent and no dry run is performed. The instance is created if the requirements are met. By default, the DryRunResult parameter returns false if you set DryRun to false.', example='false', position='Body'),
  instanceClass: string(name='InstanceClass', description='The specifications of the cluster.     
You can specify one of the following four plans:   
 - 8C32GB: indicates 8 CPU cores and 32 GB of memory.    
 - 14C70GB: indicates 14 CPU cores and 70 GB of memory. This is the default value.
- 30C180GB: indicates 30 CPU cores and 180 GB of memory.     
- 62C400GB: indicates 62 CPU cores and 400 GB of memory.', example='14C70GB', position='Body'),
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.    
It must be 1 to 20 characters in length.   
If this parameter is not specified, the value is the instance ID of the cluster by default.', example='amap_aos_tx_ob', maxLength=64, position='Body'),
  isolationOptimization?: string(name='IsolationOptimization', description='Specifies whether to enable the control group feature.
Valid values:
- true
- false', example='true', position='Body'),
  obVersion?: string(name='ObVersion', description='OceanBase Server version number.', example='2.2.77', position='Body'),
  period?: long(name='Period', description='The valid duration of the purchased resources. The unit is specified by the PeriodUnit parameter.   
This parameter is valid and required only when the InstanceChargeType parameter is set to PrePaid.      
Valid values:     
- When the PeriodUnit parameter is set to Month: "1", "2", "3", "4", "5", "6", "7", "8", "9". 
- When the PeriodUnit parameter is set to Year: "1", "2", "3".', example='1', position='Body'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the valid duration of the purchased resources.     
Valid value for subscription: Month or Year.
Default value: Month for subscription, and Hour for pay-as-you-go.', example='Month', position='Body'),
  primaryInstance?: string(name='PrimaryInstance', description='Primary instance ID.', example='ob3h8ytroxxxxx', position='Body'),
  primaryRegion?: string(name='PrimaryRegion', description='Primary instance region.', example='cn-hangzhou', position='Body'),
  replicaMode?: string(name='ReplicaMode', description='The number of full-featured replicas.
- 3F: three full-featured replicas.
- 2F1L: two full-featured replicas and one log replica.
- 2F1A: two full-featured replicas and one arbitration service.
- ApsaraDB for OceanBase earlier than V4.1 supports 3F and 2F1L.
- ApsaraDB for OceanBase V4.1 or later supports 3F and 2F1A.
- An ApsaraDB for OceanBase instance deployed across three zones supports only 3F.
- An ApsaraDB for OceanBase instance deployed across two zones supports 2F1A or 2F1L, depending on the version.
- An ApsaraDB for OceanBase instance deployed in a single zone supports 3F, 2F1A, or 2F1L, depending on the version.', example='3F', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Body'),
  series: string(name='Series', description='The series of the OceanBase cluster. Valid values:    
- normal: Standard Cluster Edition (Cloud Disk). This is the default value.
- normal_ssd: Standard Cluster Edition (Local Disk).
- history: History Database Cluster Edition.', example='Normal', position='Body'),
  zones: string(name='Zones', description='The ID of the zone to which the instance belongs.   
For more information about how to obtain the list of zones, see [DescribeZones](~~25610~~).', example='cn-hangzhou-h,cn-hangzhou-i,cn-hangzhou-j', position='Body'),
}

model CreateInstanceResponseBody = {
  data?: {
    dryRunResult?: boolean(name='DryRunResult', description='The result of the dry-run request.

If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.', example='true'),
    instanceId?: string(name='InstanceId', description='Instance ID.', example='i-bp67acfmxazb4p****'),
    orderId?: string(name='OrderId', description='Order ID. The ID of the order that you have placed.
This parameter returns a value after you create a pre-paid or post-paid cluster.', example='1234567890'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-***************'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateLabelRequest {
  regionId?: string(name='RegionId', position='Host'),
  name: string(name='Name', example='test', position='Body'),
}

model CreateLabelResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: string(name='Data', example='l_****'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E3D924FB-52****B253-0C1A7EFB778C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='24'),
}

model CreateLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabelResponseBody(name='body'),
}

async function createLabel(request: CreateLabelRequest): CreateLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLabel', 'POST', '/', 'json', true, 'form', request);
}

model CreateMySqlDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='test', position='Body'),
  dgInstanceId?: string(name='DgInstanceId', example='dg-x****', position='Body'),
  instanceId?: string(name='InstanceId', example='rm-t4****', position='Body'),
  ip?: string(name='Ip', example='xxx.xxx.xxx.1', position='Body'),
  name: string(name='Name', example='source_name', minLength=1, maxLength=128, position='Body'),
  password: string(name='Password', example='pass_word', position='Body'),
  port?: int32(name='Port', example='2883', position='Body'),
  schema?: string(name='Schema', example='test', position='Body'),
  type: string(name='Type', example='VPC', position='Body'),
  useSsl?: boolean(name='UseSsl', position='Body'),
  userName: string(name='UserName', example='user_name', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-bp1d2q3mhg9i23ofi****', position='Body'),
}

model CreateMySqlDataSourceResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: string(name='Data', example='e_edz****'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='null'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='24'),
}

model CreateMySqlDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMySqlDataSourceResponseBody(name='body'),
}

async function createMySqlDataSource(request: CreateMySqlDataSourceRequest): CreateMySqlDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMySqlDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateOceanBaseDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  cluster?: string(name='Cluster', example='cluster_name', position='Body'),
  configUrl?: string(name='ConfigUrl', example='http://xxx.xxx.xxx.2:2883/services?Action=ObRootServiceInfo&User_ID=alibaba&UID=ocpmaster&ObRegion=ob_1***29.admin', position='Body'),
  description?: string(name='Description', example='test', position='Body'),
  drcPassword?: string(name='DrcPassword', example='pas***', position='Body'),
  drcUserName?: string(name='DrcUserName', example='user_na***', position='Body'),
  innerDrcPassword?: string(name='InnerDrcPassword', example='in***', position='Body'),
  ip?: string(name='Ip', example='xxx.xxx.xxx.1', position='Body'),
  logProxyIp?: string(name='LogProxyIp', description='LogProxy IP。', example='null', position='Body'),
  logProxyPort?: string(name='LogProxyPort', example='null', position='Body'),
  name: string(name='Name', example='source_name', position='Body'),
  password: string(name='Password', example='pass_word', position='Body'),
  port?: int32(name='Port', example='2883', position='Body'),
  tenant: string(name='Tenant', example='tenant_name', position='Body'),
  type: string(name='Type', example='OB_MYSQL_VPC', position='Body'),
  userName: string(name='UserName', example='user_name', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-bp1d2q3mhg9i23ofi****', position='Body'),
}

model CreateOceanBaseDataSourceResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='null'),
  cost?: string(name='Cost', example='1'),
  data?: string(name='Data', example='e_edz****'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='30'),
}

model CreateOceanBaseDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOceanBaseDataSourceResponseBody(name='body'),
}

async function createOceanBaseDataSource(request: CreateOceanBaseDataSourceRequest): CreateOceanBaseDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOceanBaseDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateOmsMysqlDataSourceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  description?: string(name='Description', description='The description of the data source.   

It must be 2 to 256 characters in length. The default value is null.', example='MySQL data source for OMS testing', position='Body'),
  dgDatabaseId?: string(name='DgDatabaseId', description='The ID of the database gateway instance.   

> <br>If Type is set to DG, this parameter is required.', example='dg-yhss6sdlaff****', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the ECS instance of the data source.   

> <br>If Type is set to RDS, PolarDB, or DG, this parameter is required.', example='pc-12ab34cd56******', position='Body'),
  ip?: string(name='Ip', description='The IP address of the data source.   

> <br>If Type is set to INTERNET or VPC, this parameter is required.', example='10.0.****', position='Body'),
  name: string(name='Name', description='The name of the data source.   
It must be 2 to 128 characters in length and can contain letters, digits, underscores (_), periods (.), and hyphens (-).   

> <br>Invalid characters, such as slashes (/), are not allowed.', example='oms-mysql', position='Body'),
  password: string(name='Password', description='The password of the username that is used to access the database. It must be Base64 encoded.   
For example, for the password abcd123@!, the Base64-encoded value is YWJjZDEyM0Ah.', example='YWJjZDEyM0Ah', position='Body'),
  port?: string(name='Port', description='The port number of the data source.   

> <br>If Type is set to INTERNET or VPC, this parameter is required.', example='3306', position='Body'),
  schema?: string(name='Schema', description='The name of the database.   

> <br>If you specify this parameter, subsequent migration or synchronization operations will take effect on this database only.', example='test', position='Body'),
  type: string(name='Type', description='The type of the MySQL data source.   
Valid values: INTERNET, VPC, RDS, PolarDB, and DG.', example='INTERNET', position='Body'),
  username: string(name='Username', description='The username that is used to access the database.', example='omsTestUser', position='Body'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the data source belongs.   

> <br>If Type is set to VPC, this parameter is required.', example='vpc-12345abcde*******', position='Body'),
}

model CreateOmsMysqlDataSourceResponseBody = {
  data?: {
    endpointId?: string(name='EndpointId', description='The ID of the data source record.', example='e_1234abcd*****'),
  }(name='Data', description='The return result of the request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateOmsMysqlDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOmsMysqlDataSourceResponseBody(name='body'),
}

/**
  * To call this operation, you must add the IP address of the OceanBase Migration Service (OMS) server to the whitelist of the Alibaba Cloud database instance, the security rules of the ECS instance, or the security settings of your self-managed database (usually the firewall of your self-managed database) to ensure that OMS can successfully access your database instance. To obtain the IP address of the OMS server, go to the OMS data source management page in the OMS console.
  *
 */
async function createOmsMysqlDataSource(request: CreateOmsMysqlDataSourceRequest): CreateOmsMysqlDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOmsMysqlDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  commonTransferConfig?: {
    activeActive?: boolean(name='ActiveActive', example='false'),
    customColumns?: [ 
      {
        columnName?: string(name='ColumnName'),
        expression?: string(name='Expression'),
      }
    ](name='CustomColumns'),
    dataWorksBusinessName?: string(name='DataWorksBusinessName', example='null'),
    datahubTopicType?: string(name='DatahubTopicType', example='TUPLE'),
    mqPartition?: int32(name='MqPartition', example='0'),
    mqPartitionMode?: string(name='MqPartitionMode', example='ONE'),
    mqSerializerType?: string(name='MqSerializerType', example='DEFAULT'),
    rocketMqEnableMsgTrace?: boolean(name='RocketMqEnableMsgTrace', example='false'),
    rocketMqMsgTags?: string(name='RocketMqMsgTags', example='default_tag'),
    rocketMqProducerGroup?: string(name='RocketMqProducerGroup', example='OMS'),
    rocketMqSendMsgTimeout?: long(name='RocketMqSendMsgTimeout', example='null'),
    sinkStoreFormat?: string(name='SinkStoreFormat'),
    sourceStoreFormat?: string(name='SourceStoreFormat'),
    syncSchema?: boolean(name='SyncSchema'),
    syncSchemaColumnName?: string(name='SyncSchemaColumnName'),
    tableCategory?: string(name='TableCategory', example='ALL'),
  }(name='CommonTransferConfig', shrink='json', position='Body'),
  enableFullTransfer?: boolean(name='EnableFullTransfer', example='true', position='Body'),
  enableFullVerify?: boolean(name='EnableFullVerify', example='true', position='Body'),
  enableIncrTransfer?: boolean(name='EnableIncrTransfer', example='true', position='Body'),
  enableReverseIncrTransfer?: boolean(name='EnableReverseIncrTransfer', example='true', position='Body'),
  enableStructTransfer?: boolean(name='EnableStructTransfer', example='true', position='Body'),
  fullTransferConfig?: {
    allowDestTableNotEmpty?: boolean(name='AllowDestTableNotEmpty', example='true'),
    fullTransferSpeedMode?: string(name='FullTransferSpeedMode', example='NORMAL'),
    fullVerifySpeedMode?: string(name='FullVerifySpeedMode', example='NORMAL'),
    nonePkUkTruncateDstTable?: boolean(name='NonePkUkTruncateDstTable', example='true'),
    readWorkerNum?: int32(name='ReadWorkerNum'),
    throttleIOPS?: int32(name='ThrottleIOPS'),
    throttleRps?: int32(name='ThrottleRps'),
    writeWorkerNum?: int32(name='WriteWorkerNum'),
  }(name='FullTransferConfig', shrink='json', position='Body'),
  id: string(name='Id', position='Body'),
  incrTransferConfig?: {
    enableIncrSyncStatistics?: boolean(name='EnableIncrSyncStatistics', example='true'),
    enableSequencingWithinTxn?: boolean(name='EnableSequencingWithinTxn', example='true'),
    incrSyncConcurrency?: int32(name='IncrSyncConcurrency', example='64', minimum=1, maximum=1024),
    recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
    startTimestamp?: string(name='StartTimestamp', example='1689201369'),
    storeLogKeptHour?: int32(name='StoreLogKeptHour', example='24'),
    supportDDLTypes?: [ string ](name='SupportDDLTypes'),
    throttleIOPS?: int32(name='ThrottleIOPS'),
    throttleRps?: int32(name='ThrottleRps'),
  }(name='IncrTransferConfig', shrink='json', position='Body'),
  labelIds?: [ string ](name='LabelIds', shrink='json', position='Body'),
  name: string(name='Name', example='test', position='Body'),
  ossKey?: string(name='OssKey', example='open_api_create_project/oacp_xxx', position='Body'),
  reverseIncrTransferConfig?: {
    enableIncrSyncStatistics?: boolean(name='EnableIncrSyncStatistics'),
    enableSequencingWithinTxn?: boolean(name='EnableSequencingWithinTxn'),
    incrSyncConcurrency?: int32(name='IncrSyncConcurrency', minimum=1, maximum=1024),
    recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
    startTimestamp?: string(name='StartTimestamp'),
    storeLogKeptHour?: int32(name='StoreLogKeptHour'),
    supportDDLTypes?: [ string ](name='SupportDDLTypes'),
    throttleIOPS?: int32(name='ThrottleIOPS'),
    throttleRps?: int32(name='ThrottleRps'),
  }(name='ReverseIncrTransferConfig', shrink='json', position='Body'),
  sinkEndpointId: string(name='SinkEndpointId', example='e_4j0cz****', position='Body'),
  sourceEndpointId: string(name='SourceEndpointId', example='e_4j0c12z****', position='Body'),
  structTransferConfig?: {
    byteCharConvertStrategy?: string(name='ByteCharConvertStrategy', example='DO_NOTHING_IF_BYTE_USED'),
    deferIndexCreation?: boolean(name='DeferIndexCreation', example='true'),
  }(name='StructTransferConfig', shrink='json', position='Body'),
  transferMapping: {
    databases?: [ 
      {
        clusterName?: string(name='ClusterName', example='cluster_name'),
        id?: string(name='Id', example='gez3***'),
        mappedName?: string(name='MappedName', example='mapped_db'),
        name?: string(name='Name', example='db_name'),
        specificTables?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_4azdil4lu7***'),
            mappedName?: string(name='MappedName', example='mapped_table'),
            name?: string(name='Name', example='table_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id<5'),
          }
        ](name='SpecificTables'),
        specificViews?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_3wsmjv49a***'),
            mappedName?: string(name='MappedName', example='mapped_view'),
            name?: string(name='Name', example='view_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id<5'),
          }
        ](name='SpecificViews'),
        tables?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_4l085bu7***'),
            mappedName?: string(name='MappedName', example='mapped_table'),
            name?: string(name='Name', example='table_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id > 1'),
          }
        ](name='Tables'),
        tenantName?: string(name='TenantName', example='tenant_name'),
        views?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_4himpq4z***'),
            mappedName?: string(name='MappedName', example='mapped_view'),
            name?: string(name='Name', example='view_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id>1'),
          }
        ](name='Views'),
      }
    ](name='Databases'),
    databasesBlack?: [ 
      {
        clusterName?: string(name='ClusterName', example='cluster_name'),
        id?: string(name='Id', example='e_3y6v5v1x94f4'),
        mappedName?: string(name='MappedName', example='mapped_db'),
        name?: string(name='Name', example='db_name'),
        specificTables?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_4himpq4zf***'),
            mappedName?: string(name='MappedName', example='mapped_table'),
            name?: string(name='Name', example='table_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id<1'),
          }
        ](name='SpecificTables'),
        specificViews?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_474hmh5iqo***'),
            mappedName?: string(name='MappedName', example='mapped_table'),
            name?: string(name='Name', example='table_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id<1'),
          }
        ](name='SpecificViews'),
        tables?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_474hmh5iqo***'),
            mappedName?: string(name='MappedName', example='mapped_table'),
            name?: string(name='Name', example='table_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id<1'),
          }
        ](name='Tables'),
        tenantName?: string(name='TenantName', example='tenant_name'),
        views?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            id?: string(name='Id', example='e_4azdil4lu7mo'),
            mappedName?: string(name='MappedName', example='mapped_view'),
            name?: string(name='Name', example='view_name'),
            shardColumns?: [ string ](name='ShardColumns'),
            whereClause?: string(name='WhereClause', example='id<5'),
          }
        ](name='Views'),
      }
    ](name='DatabasesBlack'),
    mode?: string(name='Mode', example='SPCEIFIC'),
    tableAndViewBlackList?: [ string ](name='TableAndViewBlackList'),
    tableAndViewWhiteList?: [ string ](name='TableAndViewWhiteList'),
  }(name='TransferMapping', shrink='json', position='Body'),
  type: string(name='Type', example='MIGRATION', position='Body'),
  useOss?: boolean(name='UseOss', example='true', position='Body'),
  workerGradeId: string(name='WorkerGradeId', example='g_abcdefj***', position='Body'),
}

model CreateProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='27'),
  data?: string(name='Data', example='np_****'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='XCVSADG****DSGDS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateProjectModifyRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  databases: [ 
    {
      id?: string(name='Id', example='db_id'),
      mappedName?: string(name='MappedName', example='mapped_db'),
      name?: string(name='Name', example='db_name'),
      specificTables?: [ 
        {
          adbTableSchema?: {
            distributedKeys?: [ string ](name='DistributedKeys'),
            partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
            partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
            primaryKeys?: [ string ](name='PrimaryKeys'),
          }(name='AdbTableSchema'),
          filterColumns?: [ string ](name='FilterColumns'),
          id?: string(name='Id', example='table_id'),
          mappedName?: string(name='MappedName', example='mapped_table'),
          name?: string(name='Name', example='table_name'),
          shardColumns?: [ string ](name='ShardColumns'),
          whereClause?: string(name='WhereClause', example='id<1'),
        }
      ](name='SpecificTables'),
      specificViews?: [ 
        {
          adbTableSchema?: {
            distributedKeys?: [ string ](name='DistributedKeys'),
            partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
            partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
            primaryKeys?: [ string ](name='PrimaryKeys'),
          }(name='AdbTableSchema'),
          filterColumns?: [ string ](name='FilterColumns'),
          id?: string(name='Id', example='view_id'),
          mappedName?: string(name='MappedName', example='mapped_view'),
          name?: string(name='Name', example='view_name'),
          shardColumns?: [ string ](name='ShardColumns'),
          whereClause?: string(name='WhereClause', example='id <1'),
        }
      ](name='SpecificViews'),
      tables?: [ 
        {
          adbTableSchema?: {
            distributedKeys?: [ string ](name='DistributedKeys'),
            partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
            partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
            primaryKeys?: [ string ](name='PrimaryKeys'),
          }(name='AdbTableSchema'),
          filterColumns?: [ string ](name='FilterColumns'),
          id?: string(name='Id', example='table_id'),
          mappedName?: string(name='MappedName', example='mapped_table'),
          name?: string(name='Name', example='table_name'),
          shardColumns?: [ string ](name='ShardColumns'),
          whereClause?: string(name='WhereClause', example='id<1'),
        }
      ](name='Tables'),
      views?: [ 
        {
          adbTableSchema?: {
            distributedKeys?: [ string ](name='DistributedKeys'),
            partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
            partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
            primaryKeys?: [ string ](name='PrimaryKeys'),
          }(name='AdbTableSchema'),
          filterColumns?: [ string ](name='FilterColumns'),
          id?: string(name='Id', example='view_id'),
          mappedName?: string(name='MappedName', example='mapped_view'),
          name?: string(name='Name', example='view_name'),
          shardColumns?: [ string ](name='ShardColumns'),
          whereClause?: string(name='WhereClause', example='id<1'),
        }
      ](name='Views'),
    }
  ](name='Databases', shrink='json', position='Body'),
  id: string(name='Id', example='np_fe****', position='Body'),
}

model CreateProjectModifyRecordsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='28'),
  data?: long(name='Data', example='4'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model CreateProjectModifyRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectModifyRecordsResponseBody(name='body'),
}

async function createProjectModifyRecords(request: CreateProjectModifyRecordsRequest): CreateProjectModifyRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProjectModifyRecords', 'POST', '/', 'json', true, 'form', request);
}

model CreateRdsPostgreSQLDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseName: string(name='DatabaseName', example='db_name', position='Body'),
  description?: string(name='Description', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', example='g_abcdefj***', position='Body'),
  name: string(name='Name', example='data_name', minLength=1, maxLength=128, position='Body'),
  password: string(name='Password', example='pass_word', position='Body'),
  userName: string(name='UserName', example='user_name', position='Body'),
}

model CreateRdsPostgreSQLDataSourceResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='30'),
  data?: string(name='Data', example='e_5anwndq'),
  errorDetail?: {
    code?: string(name='Code', example='INNER_ERROR'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model CreateRdsPostgreSQLDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRdsPostgreSQLDataSourceResponseBody(name='body'),
}

async function createRdsPostgreSQLDataSource(request: CreateRdsPostgreSQLDataSourceRequest): CreateRdsPostgreSQLDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRdsPostgreSQLDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateSecurityIpGroupRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='pay_online', position='Body'),
  securityIps: string(name='SecurityIps', description='The return result of the request.', example='{"192.168.1.1","192.168.0.0.1/8"}', position='Body'),
}

model CreateSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The IP addresses or CIDR blocks in the IP address whitelist group.   
The return values of SecurityIps are strings that are separated with commas (,).', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='```
http(s)://[Endpoint]/?Action=CreateSecurityIpGroup
&InstanceId=ob317v4uif****
&SecurityIps=192.168.1.1,192.168.0.0.1/8
&SecurityIpGroupName=pay_online
&Common request parameters
```', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='You can call this operation to create an IP address whitelist group.', example='pay_online'),
    securityIps?: string(name='SecurityIps', example='192.168.1.1,192.168.0.0.1/8'),
  }(name='SecurityIpGroup', description='The operation that you want to perform.   
Set the value to **CreateSecurityIpGroup**.'),
}

model CreateSecurityIpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSecurityIpGroupResponseBody(name='body'),
}

async function createSecurityIpGroup(request: CreateSecurityIpGroupRequest): CreateSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateTagRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The identifier of the client.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  key: string(name='Key', description='The name of the tag group.', example='Tag group 1', position='Body'),
}

model CreateTagResponseBody = {
  message?: string(name='Message', description='The tag group creation result.', example='Create tag success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model CreateTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTagResponseBody(name='body'),
}

async function createTag(request: CreateTagRequest): CreateTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTag', 'POST', '/', 'json', true, 'form', request);
}

model CreateTagValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The identifier of the client.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  key: string(name='Key', description='The name of the tag group.', example='Tag group 1', position='Body'),
  value: string(name='Value', description='The name of the tag.', example='Tag 1', position='Body'),
}

model CreateTagValueResponseBody = {
  message?: string(name='Message', description='The tag creation result.', example='create tag value success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model CreateTagValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTagValueResponseBody(name='body'),
}

async function createTagValue(request: CreateTagValueRequest): CreateTagValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTagValue', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  charset: string(name='Charset', description='The character set.    
For more information, see [DescribeCharset](https://www.alibabacloud.com/help/en/apsaradb-for-oceanbase/latest/api-oceanbasepro-2019-09-01-describecharset).', example='utf8mb4', position='Body'),
  cpu: int32(name='Cpu', description='The number of CPU cores of the tenant.   

> <br>The CPU specification of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the CPU specification of the tenant cannot exceed 14 cores.', example='2', position='Body'),
  createParams?: map[string]string(name='CreateParams', shrink='json', position='Body'),
  description?: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  logDisk?: long(name='LogDisk', description='The size of the log disk allocated to the tenant, in GB.', example='128', position='Body'),
  memory: int32(name='Memory', description='The memory size of the tenant, in GB.   

> <br>The memory size of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the memory size of the tenant cannot exceed 70 GB.', example='10', position='Body'),
  primaryZone: string(name='PrimaryZone', description='The primary zone of the tenant.    
It is one of the zones in which the cluster is deployed.', example='cn-hangzhou-h', position='Body'),
  readOnlyZoneList?: string(name='ReadOnlyZoneList', description='Specifies to create a read-only zone. Separate the names of multiple zones with commas (,).
><notice><br>At present, this parameter is unavailable.></notice>', example='cn-shanghai-g-ro,cn-shanghai-h-ro', position='Body'),
  tenantMode: string(name='TenantMode', description='The tenant mode.    
Valid values: Oracle and MySQL.   
For more information, see [DescribeInstanceTenantModes](https://www.alibabacloud.com/help/en/apsaradb-for-oceanbase/latest/api-oceanbasepro-2019-09-01-describeinstancetenantmodes).', example='Oracle', position='Body'),
  tenantName: string(name='TenantName', description='The name of the tenant.    
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.', example='pay_online', position='Body'),
  timeZone: string(name='TimeZone', description='The time zone of the tenant. For more information, see [DescribeTimeZones](https://www.alibabacloud.com/help/en/apsaradb-for-oceanbase/latest/api-oceanbasepro-2019-09-01-describetimezones).', example='Asia/Shanghai', position='Body'),
  unitNum?: int32(name='UnitNum', description='The number of resource distribution nodes in the tenant.    
The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.', example='2', position='Body'),
  userVSwitchId: string(name='UserVSwitchId', description='The ID of the vSwitch.    
If no suitable vSwitch is available, create a vSwitch as prompted.   
For more information, see Use a vSwitch.', example='vsw-bp11k1aypnzu1l3whi****', position='Body'),
  userVpcId: string(name='UserVpcId', description='The ID of the VPC.   
 If no suitable VPC is available, create a VPC as prompted.   
For more information, see "What is a VPC".', example='vpc-bp1d2q3mhg9i23ofi****', position='Body'),
  userVpcOwnerId?: string(name='UserVpcOwnerId', position='Body'),
}

model CreateTenantResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
}

model CreateTenantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTenantResponseBody(name='body'),
}

async function createTenant(request: CreateTenantRequest): CreateTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenant', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantReadOnlyConnectionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', example='ob2mr3oae0****', position='Body'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp11k1aypnzu1l3whi****', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-bp1d2q3mhg9i23ofi****', position='Body'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-i', position='Body'),
}

model CreateTenantReadOnlyConnectionResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model CreateTenantReadOnlyConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTenantReadOnlyConnectionResponseBody(name='body'),
}

async function createTenantReadOnlyConnection(request: CreateTenantReadOnlyConnectionRequest): CreateTenantReadOnlyConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenantReadOnlyConnection', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantSecurityIpGroupRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The group name of the whitelist group of IP addresses.

It starts with lowercase letters and ends with lowercase letters or numbers. It can only contain lowercase letters, numbers, and underscores, and should be 2~32 characters in length.', example='paytest', position='Body'),
  securityIps: string(name='SecurityIps', description='The list of IP addresses in the whitelist group.

It is a JSON array. Each object in the array is an IP address or a CIDR block. You can have up to 40 whitelists.', example='192.***.*.*"', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model CreateTenantSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='paytest'),
    securityIps?: string(name='SecurityIps', description='The list of IP addresses in the IP address whitelist group.   

It is a string separated by commas, and each object is an IP address or CIDR block.', example='192.***.*.*'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****'),
  }(name='SecurityIpGroup', description='The information of the whitelist group.'),
}

model CreateTenantSecurityIpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTenantSecurityIpGroupResponseBody(name='body'),
}

async function createTenantSecurityIpGroup(request: CreateTenantSecurityIpGroupRequest): CreateTenantSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenantSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantUserRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  description?: string(name='Description', description='The description of the database.', example='this is a test database', position='Body'),
  encryptionType?: string(name='EncryptionType', description='加密方式。', example='RAS', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  roles?: string(name='Roles', description='The role of the user account.  In Oracle mode, this parameter unspecified is left unspecified.  In MySQL mode, the super administrator account has ALL PRIVILEGES, and you can leave this parameter unspecified.  You need to specify the account information for a general user account. By default, the account information is a JSON array that contains the information of the role and the schema (Oracle mode) or database (MySQL mode).  Valid values: ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES. ReadOnly: a role that has only the read-only privilege SELECT. DDL: a role that has DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW. DML: a role that has DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='[{"Database":"oceanbase1","Role":"readwrite"},{"Database":"oceanbase2","Role":"readonly"}]', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The name of the database account.  You cannot use reserved keywords, such as SYS and root.', example='pay_test', position='Body'),
  userPassword: string(name='UserPassword', description='The password of the database account.  It must be 10 to 32 characters in length and contain three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. The special characters are ! @ # $ % \\ ^ \\ & \\ * ( ) _ + - =', example='!Aliyun4Oceanbase', position='Body'),
  userType: string(name='UserType', description='The type of the database account. Valid values: Admin: the super administrator account. Normal: a general account.', example='Normal', position='Body'),
}

model CreateTenantUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    roles?: [ 
      {
        database?: string(name='Database', example='db_pay1'),
        role?: string(name='Role', example='ReadOnly'),
      }
    ](name='Roles'),
    userName?: string(name='UserName', example='pay_test'),
    userStatus?: string(name='UserStatus', example='ONLINE'),
    userType?: string(name='UserType'),
  }(name='TenantUser', description='The list of database accounts in the tenant.'),
}

model CreateTenantUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTenantUserResponseBody(name='body'),
}

async function createTenantUser(request: CreateTenantUserRequest): CreateTenantUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenantUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='e_5anwndq', position='Body'),
}

model DeleteDataSourceResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='28'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='INNER_ERROR'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E3D924FB-52****B253-0C1A7EFB778C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatabasesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  databaseNames: string(name='DatabaseNames', example='["sms_pre", "pay_pre"]', position='Body'),
  instanceId?: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', example='ob2mr3oae0****', position='Body'),
}

model DeleteDatabasesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DeleteDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatabasesResponseBody(name='body'),
}

async function deleteDatabases(request: DeleteDatabasesRequest): DeleteDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabases', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  backupRetainMode?: string(name='BackupRetainMode', description='The backup retention strategy for cluster deletion. Valid values:  
- receive_all: retains all backup sets.   
- delete_all: deletes all backup sets.   
- receive_last: retains the last backup set.    

> <br>Default value: delete_all.', example='delete_all', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
- true: Only a dry-run request is sent and the instance is not deleted. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
- false: The actual request is sent and no dry run is performed. The instance is deleted if the requirements are met. By default, false is returned for the parameter DryRunResult if you set DryRun to false.', example='false', position='Body'),
  instanceIds: string(name='InstanceIds', description='The ID of the cluster to be deleted.   
The value is a string in the JSON format.', example='[”ob ob3f6yhv9uxxxx“]', position='Body'),
}

model DeleteInstancesResponseBody = {
  data?: {
    dryRunResult?: boolean(name='DryRunResult', description='The result of the dry-run request.
- If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
- If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.', example='false'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-****-****-B3DB-A3DC0DE3C83E'),
}

model DeleteInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstancesResponseBody(name='body'),
}

/**
  * Before you call this operation, ensure that the following requirements are met:
  * - The cluster is in the Running state.
  * - The cluster is a primary cluster and the billing method is pay-as-you-go.
  *
 */
async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstances', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model DeleteProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-XXXX-XXX-B3DB-A3DC0DE'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='24'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSecurityIpGroupRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The name of the IP address whitelist group.    
It must be 2 to 32 characters in length, start with a lowercase letter, end with a lowercase letter or digit, and contain only lowercase letters, digits, and underscores (_).', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The information of the deleted IP whitelist group.', example='paytest', position='Body'),
}

model DeleteSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='Example 1', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
  }(name='SecurityIpGroup'),
}

model DeleteSecurityIpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecurityIpGroupResponseBody(name='body'),
}

async function deleteSecurityIpGroup(request: DeleteSecurityIpGroupRequest): DeleteSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTagRequest {
  regionId?: string(name='RegionId', position='Host'),
  key: string(name='Key', description='The name of the tag group.', example='Tag group 2', position='Body'),
}

model DeleteTagResponseBody = {
  message?: string(name='Message', description='The tag group deletion result.', example='delete tag success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model DeleteTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTagResponseBody(name='body'),
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTag', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTagValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  key: string(name='Key', description='The name of the tag group.', example='Tag group 1', position='Body'),
  value: string(name='Value', description='The name of the tag.', example='Tag 2', position='Body'),
}

model DeleteTagValueResponseBody = {
  message?: string(name='Message', description='The tag deletion result.', example='delete tag-value success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model DeleteTagValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTagValueResponseBody(name='body'),
}

async function deleteTagValue(request: DeleteTagValueRequest): DeleteTagValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagValue', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTenantSecurityIpGroupRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The group name of the whitelist group of IP addresses.

It starts with lowercase letters and ends with lowercase letters or numbers. It can only contain lowercase letters, numbers, and underscores, and should be 2~32 characters in length.', example='paytest', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DeleteTenantSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='paytest'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****'),
  }(name='SecurityIpGroup', description='The information of the whitelist group.'),
}

model DeleteTenantSecurityIpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTenantSecurityIpGroupResponseBody(name='body'),
}

async function deleteTenantSecurityIpGroup(request: DeleteTenantSecurityIpGroupRequest): DeleteTenantSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTenantSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTenantUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  users: string(name='Users', description='A list of usernames.', example='["testUser"]', position='Body'),
}

model DeleteTenantUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DeleteTenantUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTenantUsersResponseBody(name='body'),
}

async function deleteTenantUsers(request: DeleteTenantUsersRequest): DeleteTenantUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTenantUsers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTenantsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='You can call this operation to delete one or more tenants from an OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantIds: string(name='TenantIds', description='```
http(s)://[Endpoint]/?Action=DeleteTenants
&TenantIds=["ob2mr3oae0****", "ob2mr3oae1****"]
&InstanceId=ob317v4uif****
&Common request parameters
```', example='["ob2mr3oae0****", "ob2mr3oae1****"]', position='Body'),
}

model DeleteTenantsResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantIds?: [ string ](name='TenantIds'),
}

model DeleteTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTenantsResponseBody(name='body'),
}

async function deleteTenants(request: DeleteTenantsRequest): DeleteTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTenants', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAnomalySQLListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the returned data.   
Default value: CN for a China site and EN for an International site.', example='zh-CN', position='Body'),
  dbName?: string(name='DbName', description='The name of the database.', example='testdb', position='Body'),
  endTime: string(name='EndTime', description='The end time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  filterCondition?: map[string]any(name='FilterCondition', description='The filter condition.   
> <br> - All fields in OceanBase Database support filtering. <br> - You can write the key-value pair of a parameter in a JSON string in the JSON format to filter the parameter.', example='{
  "UserName":testUser
}', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', example='obsd23j4f****', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp19y05uq6xpacyqnlrc', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.    
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  SQLId?: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParameter?: string(name='SearchParameter', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.   
Valid values: "=", ">", ">=", "<", and "<="', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sortColumn?: string(name='SortColumn', description='The sorted column.', example='cputime', position='Body'),
  sortOrder?: string(name='SortOrder', description='The sorting rule.', example='desc', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeAnomalySQLListResponseBody = {
  anomalySQLList?: [ 
    {
      cpuTime?: float(name='CpuTime', description='The average CPU time, in ms.', example='50.13'),
      dbName?: string(name='DbName', description='The name of the database.', example='database1'),
      diagnosis?: string(name='Diagnosis', description='The diagnosis information.', example='Total number of executions = 80199, Average CPU time = 6.8 ms, Overall CPU utilization = 87%'),
      diagnosisRule?: string(name='DiagnosisRule', description='The diagnostic rule.', example='Utilization above threshold'),
      executions?: long(name='Executions', description='The number of executions.', example='89043'),
      key?: long(name='Key', description='The sequence number of the returned SQL statement.', example='1'),
      requestTime?: float(name='RequestTime', description='The request time, in ms.', example='50.00'),
      requestTimeUTCString?: string(name='RequestTimeUTCString', description='The request time in UTC +0.', example='2022-01-11T07:08:00Z'),
      SQLId?: string(name='SQLId', description='SQLID.', example='99E9D3BF****B486239E6C7BC79B****'),
      SQLText?: string(name='SQLText', description='The SQL text.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      suggestion?: string(name='Suggestion', description='The suggestions.', example='Check your business scenarios, data distribution changes, request surges, and execution plan changes.'),
      userName?: string(name='UserName', description='The username.', example='tester'),
    }
  ](name='AnomalySQLList', description='The list of suspicious SQL statements.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The total count.', example='2'),
}

model DescribeAnomalySQLListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnomalySQLListResponseBody(name='body'),
}

async function describeAnomalySQLList(request: DescribeAnomalySQLListRequest): DescribeAnomalySQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnomalySQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableCpuResourceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The CPU resources available.', example='ob317v4uif****', position='Body'),
  modifyType?: string(name='ModifyType', description='```
http(s)://[Endpoint]/?Action=DescribeAvailableCpuResource
&InstanceId=ob317v4uif****
&TenantId=ob2mr3oae0****
&ModifyType=update
&Common request parameters
```', example='update', position='Body'),
  tenantId?: string(name='TenantId', description='The operation that you want to perform.   
Set the value to **DescribeAvailableCpuResource**.', example='ob2mr3oae0****', position='Body'),
}

model DescribeAvailableCpuResourceResponseBody = {
  data?: [ 
    {
      comment?: string(name='Comment', example='UnitNum.RejectComment.Storage'),
      maxCpu?: long(name='MaxCpu', example='10'),
      minCpu?: long(name='MinCpu', example='2'),
      reviewCode?: string(name='ReviewCode', example='UnitNum.Change.Accept'),
      unitNum?: long(name='UnitNum', example='2'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableCpuResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableCpuResourceResponseBody(name='body'),
}

async function describeAvailableCpuResource(request: DescribeAvailableCpuResourceRequest): DescribeAvailableCpuResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableCpuResource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableMemResourceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  cpuNum: long(name='CpuNum', description='The number of CPU cores.', example='14', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  unitNum: long(name='UnitNum', description='The number of resource distribution nodes in the tenant.   
The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.', example='2', position='Body'),
}

model DescribeAvailableMemResourceResponseBody = {
  data?: {
    maxMem?: long(name='MaxMem', description='The maximum memory size for each resource unit, in GB.', example='10'),
    minMem?: long(name='MinMem', description='The minimum memory size required for each resource unit, in GB.', example='5'),
    safeMem?: string(name='SafeMem', description='The maximum allowed memory usage, in GB.', example='10.0'),
    usedMem?: long(name='UsedMem', description='The number of resource units in the tenant.', example='2'),
  }(name='Data', description='The available memory size.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeAvailableMemResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableMemResourceResponseBody(name='body'),
}

async function describeAvailableMemResource(request: DescribeAvailableMemResourceRequest): DescribeAvailableMemResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableMemResource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableSpecRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  spec?: string(name='Spec', example='oceanbase.cluster.cd8.xlarge', position='Body'),
  upgradeType: string(name='UpgradeType', example='upgradespec', position='Body'),
}

model DescribeAvailableSpecResponseBody = {
  data?: {
    availableSpecifications?: [ 
      {
        diskSizeRange?: {
          max?: long(name='Max', example='40000'),
          min?: long(name='Min', example='1000'),
          step?: long(name='Step', example='5'),
        }(name='DiskSizeRange'),
        diskTypes?: [ string ](name='DiskTypes'),
        instanceClass?: string(name='InstanceClass', example='4C16GB'),
        logDiskSizeRange?: {
          max?: long(name='Max', example='4000'),
          min?: long(name='Min', example='100'),
          step?: long(name='Step', example='5'),
        }(name='LogDiskSizeRange'),
        nodeNum?: [ int32 ](name='NodeNum'),
        spec?: string(name='Spec', example='oceanbase.cluster.cd8.xlarge'),
      }
    ](name='AvailableSpecifications'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableSpecResponseBody(name='body'),
}

async function describeAvailableSpec(request: DescribeAvailableSpecRequest): DescribeAvailableSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableSpec', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableZoneRequest {
  regionId?: string(name='RegionId', position='Host'),
  cpuArch?: string(name='CpuArch', example='x86', position='Body'),
  deployType?: string(name='DeployType', example='multiple', position='Body'),
  instanceType: string(name='InstanceType', example='cluster', position='Body'),
  obVersion?: string(name='ObVersion', example='3.2.4.4', position='Body'),
  series?: string(name='Series', example='normal', position='Body'),
  spec?: string(name='Spec', example='oceanbase.cluster.cd8.xlarge', position='Body'),
}

model DescribeAvailableZoneResponseBody = {
  data?: {
    availableZones?: [ 
      {
        channel?: string(name='Channel', example='PUBLIC'),
        cpuArch?: string(name='CpuArch', example='x86'),
        deployType?: string(name='DeployType', example='multiple'),
        instanceType?: string(name='InstanceType', example='cluster'),
        region?: string(name='Region', example='cn-hangzhou'),
        series?: string(name='Series', example='normal'),
        supportSpecifications?: [ 
          {
            diskSizeRange?: {
              max?: long(name='Max', example='40000'),
              min?: long(name='Min', example='1000'),
              step?: long(name='Step', example='5'),
            }(name='DiskSizeRange'),
            diskTypes?: [ string ](name='DiskTypes'),
            instanceClass?: string(name='InstanceClass', example='4C16GB'),
            spec?: string(name='Spec', example='oceanbase.cluster.cd8.xlarge'),
            supportEngineVersions?: [ 
              {
                obVersion?: string(name='ObVersion', example='3.2.4.4'),
                supportIsolationOptimization?: boolean(name='SupportIsolationOptimization', example='true'),
                supportReplicaModes?: [ string ](name='SupportReplicaModes'),
              }
            ](name='SupportEngineVersions'),
          }
        ](name='SupportSpecifications'),
        zones?: string(name='Zones', example='cn-hangzhou-h,cn-hangzhou-i,cn-hangzhou-j'),
      }
    ](name='AvailableZones'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableZoneResponseBody(name='body'),
}

async function describeAvailableZone(request: DescribeAvailableZoneRequest): DescribeAvailableZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableZone', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBackupEncryptedStringRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='ob4wibn0abo9uo', position='Body'),
  tenantId: string(name='TenantId', example='txxxxxxx', position='Body'),
}

model DescribeBackupEncryptedStringResponseBody = {
  data?: {
    backupInfoJson?: string(name='BackupInfoJson'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeBackupEncryptedStringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupEncryptedStringResponseBody(name='body'),
}

async function describeBackupEncryptedString(request: DescribeBackupEncryptedStringRequest): DescribeBackupEncryptedStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupEncryptedString', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBackupSetDownloadLinkRequest {
  regionId?: string(name='RegionId', position='Host'),
  downloadTaskId: string(name='DownloadTaskId', description='The ID of the download task corresponding to the target backup set.', example='1000002', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model DescribeBackupSetDownloadLinkResponseBody = {
  data?: {
    backupRestorableTime?: string(name='BackupRestorableTime', description='The restorable time of the backup set.', example='yyyy-MM-dd HH:mm:ss'),
    backupSetId?: string(name='BackupSetId', description='The ID of the target backup set.', example='bak-4n****gacpa8'),
    downloadTaskCreateTime?: string(name='DownloadTaskCreateTime', description='The time when the download task corresponding to the target backup set was created.', example='2020-05-22T17:04:18'),
    downloadTaskId?: long(name='DownloadTaskId', description='The ID of the download task corresponding to the target backup set.', example='1000002'),
    downloadTaskStatus?: string(name='DownloadTaskStatus', description='The status of the download task corresponding to the target backup set.', example='RUNNING'),
    internalUrl?: string(name='InternalUrl', description='The internal URL.', example='http://bucket.oss-region-internal.aliyuncs.com/xxxxx'),
    urlAliveTime?: long(name='UrlAliveTime', description='The validity period of the URL, in seconds.', example='3600'),
    urlExpiredTime?: string(name='UrlExpiredTime', description='The expiration time of the URL.', example='2024-01-04 17:39:49'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeBackupSetDownloadLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupSetDownloadLinkResponseBody(name='body'),
}

async function describeBackupSetDownloadLink(request: DescribeBackupSetDownloadLinkRequest): DescribeBackupSetDownloadLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSetDownloadLink', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCharsetRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId?: string(name='InstanceId', position='Body'),
  series?: string(name='Series', description='实例的系列  - normal（默认）：标准集群版（云盘）  - normal_ssd：标准集群版（本地盘） - history：历史库集群版。', example='normal', position='Body'),
  tenantMode: string(name='TenantMode', description='The return result of the request.', example='Oracle', position='Body'),
}

model DescribeCharsetResponseBody = {
  charset?: [ 
    {
      charset?: string(name='Charset', description='DescribeCharset', example='utf8'),
      collations?: [ string ](name='Collations'),
    }
  ](name='Charset', description='```
http(s)://[Endpoint]/?Action=DescribeCharset
&TenantMode=Oracle
&Common request parameters
```'),
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **DescribeCharset**.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeCharsetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCharsetResponseBody(name='body'),
}

async function describeCharset(request: DescribeCharsetRequest): DescribeCharsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCharset', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDataBackupSetRequest {
  regionId?: string(name='RegionId', position='Host'),
  backupObjectType?: string(name='BackupObjectType', example='tenant', position='Body'),
  endTime?: string(name='EndTime', example='2023-01-06T15:59:59Z', position='Body'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  startTime?: string(name='StartTime', example='2022-12-27T16:00:00Z', position='Body'),
  status?: string(name='Status', example='DONE', position='Body'),
}

model DescribeDataBackupSetResponseBody = {
  data?: [ 
    {
      backupObjectType?: string(name='BackupObjectType', example='cluster'),
      backupObjects?: [ 
        {
          clusterName?: string(name='ClusterName', example='test-****way'),
          databaseTablesList?: [ 
            {
              database?: string(name='Database', example='sms_pre'),
              tables?: [ string ](name='Tables'),
            }
          ](name='DatabaseTablesList'),
          tenantName?: string(name='TenantName', example='ob2mr3oae0****'),
        }
      ](name='BackupObjects'),
      backupResults?: [ 
        {
          clusterName?: string(name='ClusterName', example='container-opa-****-02'),
          tableBackupResults?: [ 
            {
              database?: string(name='Database', example='order_ce****_online'),
              message?: string(name='Message', example='Create tag success'),
              status?: string(name='Status', example='RUNNING'),
              table?: string(name='Table', example='tr_sale_order_****'),
            }
          ](name='TableBackupResults'),
          tenantName?: string(name='TenantName', example='ob2mr3oae0****'),
        }
      ](name='BackupResults'),
      checkpoint?: string(name='Checkpoint', example='2023-05-15T07:11:08Z'),
      dataSize?: int32(name='DataSize', example='31457280'),
      dataVersion?: int32(name='DataVersion', example='1678847020352'),
      downloadTaskId?: long(name='DownloadTaskId', example='100***012'),
      downloadTaskStatus?: string(name='DownloadTaskStatus', example='not_exist'),
      endTime?: string(name='EndTime', example='2023-04-13T03:38:10Z'),
      method?: string(name='Method', example='logical'),
      policy?: string(name='Policy', example='automated'),
      progress?: string(name='Progress', example='52'),
      setId?: int32(name='SetId', example='imm-test-set-cb****ee-b7d7-11ed-956f-****3e10bd70'),
      startTime?: string(name='StartTime', example='2020-05-22T17:04:18'),
      status?: string(name='Status', example='RUNNING'),
      storageClass?: string(name='StorageClass', example='standard'),
      type?: string(name='Type', example='manual'),
      validity?: string(name='Validity', example='VALID'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeDataBackupSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataBackupSetResponseBody(name='body'),
}

async function describeDataBackupSet(request: DescribeDataBackupSetRequest): DescribeDataBackupSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataBackupSet', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDatabasesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  databaseName?: string(name='DatabaseName', description='The name of the database.    
You cannot use reserved keywords, such as test and mysql.', example='sms_pre', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the cluster.', example='ob****n0abo9uo', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page returned.  
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows returned on each page.  
- Maximum value: 100.  
- Default value: 10', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='pay', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  withTables?: boolean(name='WithTables', description='Specifies whether to return the information about tables in the database.
Default value: false. 
> The operation may time out if the database contains a large number of tables.', example='true', position='Body'),
}

model DescribeDatabasesResponseBody = {
  databases?: [ 
    {
      collation?: string(name='Collation', description='The collation.', example='utf8mb4_general_ci'),
      createTime?: string(name='CreateTime', description='The time when the database was created.', example='2022-02-21 15:41:06'),
      dataSize?: double(name='DataSize', description='The actual data size, in GB. 
><notice>This parameter is no longer used in later versions. RequiredSize is used instead.></notice>', example='5.67 GB'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='sms_pre'),
      dbType?: string(name='DbType', description='The database type.', example='mysql'),
      description?: string(name='Description', description='The description of the database.', example='test db'),
      encoding?: string(name='Encoding', description='The encoding standard of the database. Encoding standards such as utf8mb4 and GBK are supported.', example='utf8mb4'),
      instanceId?: string(name='InstanceId', description='The ID of the cluster to which the tenant belongs.', example='obsdh2f****'),
      requiredSize?: double(name='RequiredSize', description='The storage space required, in GB.', example='5.67 GB'),
      status?: string(name='Status', description='The status of the database. Valid values:    
- ONLINE: The database is running.  
- DELETING: The database is being deleted.', example='ONLINE'),
      tables?: [ 
        {
          tableName?: string(name='TableName', description='The name of the database table.', example='testTables'),
        }
      ](name='Tables', description='The list of database tables.'),
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
      tenantName?: string(name='TenantName', description='The name of the tenant.', example='tenantABC'),
      users?: [ 
        {
          privileges?: string(name='Privileges', description='If you have granted custom privileges on the database, this parameter indicates the custom privileges, separated by commas (,). Otherwise, no data is returned for this parameter.', example='select,delete,update'),
          role?: string(name='Role', description='The role of the account.    
In MySQL mode, a role is a database-level role. Valid values:  
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.  
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='ReadOnly'),
          userName?: string(name='UserName', description='The name of the account.', example='user_pay_ro'),
          userType?: string(name='UserType', description='The type of the account. Valid values:  
- Admin: the super administrator account. 
- Normal: a general account.', example='Normal'),
        }
      ](name='Users', description='The list of accounts that are granted privileges on this database.'),
    }
  ](name='Databases', description='The list of databases in the tenant.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='The total number of databases in the tenant.', example='1'),
}

model DescribeDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabases', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The size of the data disk, in GB.', example='ob317v4uif****', position='Body'),
  maxConnectionLimit?: string(name='MaxConnectionLimit', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The information about the storage resources of the cluster.', example='1', position='Body'),
}

model DescribeInstanceResponseBody = {
  instance?: {
    allowCreateProxySqlFirewallRule?: boolean(name='AllowCreateProxySqlFirewallRule'),
    allowModifyInternetAddressConnectionLimit?: boolean(name='AllowModifyInternetAddressConnectionLimit'),
    autoRenewal?: boolean(name='AutoRenewal', description='The operation that you want to perform. <br>Set the value to **DescribeInstance**.', example='true'),
    autoUpgradeObVersion?: boolean(name='AutoUpgradeObVersion', description='Example 1', example='true'),
    availableZones?: [ string ](name='AvailableZones'),
    cpuArchitecture?: string(name='CpuArchitecture', example='X86'),
    createTime?: string(name='CreateTime', description='Indicates whether the log disk specifications can be upgraded.', example='2021-10-19T07:13:41Z'),
    dataDiskAutoScale?: boolean(name='DataDiskAutoScale'),
    dataDiskAutoScaleConfig?: {
      autoScale?: boolean(name='AutoScale'),
      maxDiskSize?: long(name='MaxDiskSize'),
      scaleStepInMerge?: long(name='ScaleStepInMerge'),
      scaleStepInNormal?: long(name='ScaleStepInNormal'),
      upperMergeThreshold?: long(name='UpperMergeThreshold'),
      upperScaleStep?: string(name='UpperScaleStep'),
      upperScaleStrategy?: string(name='UpperScaleStrategy'),
      upperThreshold?: long(name='UpperThreshold'),
      upperbound?: long(name='Upperbound'),
    }(name='DataDiskAutoScaleConfig'),
    dataMergeTime?: string(name='DataMergeTime', description='The total number of CPU cores of the cluster.', example='02:00'),
    deployMode?: string(name='DeployMode', description='Alibaba Cloud CLI', example='1-1-1'),
    deployType?: string(name='DeployType', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='multiple'),
    diskType?: string(name='DiskType', description='The total storage space of the cluster, in GB.', example='cloud_essd_pl1'),
    enableIsolationOptimization?: boolean(name='EnableIsolationOptimization'),
    enableProxyService?: boolean(name='EnableProxyService'),
    enableReadOnlyReplica?: boolean(name='EnableReadOnlyReplica'),
    enableReadOnlyReplicaManagement?: boolean(name='EnableReadOnlyReplicaManagement'),
    enableUpgradeLogDisk?: boolean(name='EnableUpgradeLogDisk', example='false'),
    exclusiveUnitNumLimit?: int32(name='ExclusiveUnitNumLimit'),
    expireTime?: string(name='ExpireTime', description='The information of the OceanBase cluster.', example='2021-10-17T16:00:00Z'),
    inTempCapacityStatus?: boolean(name='InTempCapacityStatus'),
    instanceClass?: string(name='InstanceClass', description='The detailed information of the OBServer version.', example='14C70G'),
    instanceId?: string(name='InstanceId', description='The information about the log disk space of the cluster.', example='ob317v4uif****'),
    instanceName?: string(name='InstanceName', description='Indicates whether automatic upgrade of the OBServer version is enabled.', example='ob4test'),
    instanceRole?: string(name='InstanceRole', example='NORMAL'),
    isLatestObVersion?: boolean(name='IsLatestObVersion', example='true'),
    isTrustEcs?: boolean(name='IsTrustEcs', description='The information about the CPU resources of the cluster.', example='true'),
    isolationOptimization?: boolean(name='IsolationOptimization'),
    maintainTime?: string(name='MaintainTime', description='The time when the major compaction of cluster data is performed.', example='19:00Z-20:00Z'),
    nodeNum?: string(name='NodeNum', example='6'),
    obRpmVersion?: string(name='ObRpmVersion', example='2.2.77-20210526202046'),
    payType?: string(name='PayType', description='The list of zones.', example='PREPAY'),
    primaryInstance?: string(name='PrimaryInstance', example='ob3h8ytroxxxxx'),
    primaryRegion?: string(name='PrimaryRegion', example='cn-hangzhou'),
    proxyClusterId?: string(name='ProxyClusterId'),
    proxyServiceStatus?: string(name='ProxyServiceStatus'),
    readOnlyResource?: {
      capacityUnit?: {
        maxCapacityUnit?: int32(name='MaxCapacityUnit'),
        minCapacityUnit?: int32(name='MinCapacityUnit'),
        usedCapacityUnit?: string(name='UsedCapacityUnit'),
      }(name='CapacityUnit'),
      cpu?: {
        originalTotalCpu?: long(name='OriginalTotalCpu', example='14'),
        totalCpu?: long(name='TotalCpu', example='14'),
        unitCpu?: long(name='UnitCpu', example='10'),
        usedCpu?: long(name='UsedCpu', example='10'),
      }(name='Cpu'),
      diskSize?: {
        dataUsedSize?: double(name='DataUsedSize'),
        maxDiskSize?: double(name='MaxDiskSize'),
        maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer'),
        maxDiskUsedPercent?: double(name='MaxDiskUsedPercent'),
        originalTotalDiskSize?: long(name='OriginalTotalDiskSize', example='200'),
        totalDiskSize?: long(name='TotalDiskSize', example='200'),
        unitDiskSize?: long(name='UnitDiskSize', example='200'),
        usedDiskSize?: long(name='UsedDiskSize', example='100'),
      }(name='DiskSize'),
      logDiskSize?: {
        logAssignedSize?: string(name='LogAssignedSize'),
        maxLogAssignedObServer?: [ string ](name='MaxLogAssignedObServer'),
        maxLogAssignedPercent?: string(name='MaxLogAssignedPercent'),
        totalDiskSize?: long(name='TotalDiskSize', example='400'),
        unitDiskSize?: long(name='UnitDiskSize', example='200'),
      }(name='LogDiskSize'),
      memory?: {
        originalTotalMemory?: long(name='OriginalTotalMemory', example='72'),
        totalMemory?: long(name='TotalMemory', example='70'),
        unitMemory?: long(name='UnitMemory', example='10'),
        usedMemory?: long(name='UsedMemory', example='10'),
      }(name='Memory'),
      unitCount?: long(name='UnitCount', example='1'),
    }(name='ReadOnlyResource'),
    replicaMode?: string(name='ReplicaMode'),
    resource?: {
      capacityUnit?: {
        maxCapacityUnit?: int32(name='MaxCapacityUnit'),
        minCapacityUnit?: int32(name='MinCapacityUnit'),
        usedCapacityUnit?: string(name='UsedCapacityUnit'),
      }(name='CapacityUnit'),
      cpu?: {
        originalTotalCpu?: long(name='OriginalTotalCpu', example='14'),
        totalCpu?: long(name='TotalCpu', description='The series of the OceanBase cluster. Valid values:   
- NORMAL: the high availability edition.   
- BASIC: the basic edition.', example='14'),
        unitCpu?: long(name='UnitCpu', description='The type of the storage disk where the cluster is deployed. 

The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.', example='10'),
        usedCpu?: long(name='UsedCpu', description='Indicates whether automatic upgrade of the OBServer version is enabled.', example='10'),
      }(name='Cpu', description='The information of the OceanBase cluster.'),
      diskSize?: {
        dataUsedSize?: double(name='DataUsedSize', description='The ID of the OceanBase cluster.', example='200'),
        maxDiskSize?: double(name='MaxDiskSize'),
        maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer', description='The time in UTC when the cluster expires.'),
        maxDiskUsedPercent?: double(name='MaxDiskUsedPercent', description='The maximum disk usage, in percentage.', example='0.14'),
        originalTotalDiskSize?: long(name='OriginalTotalDiskSize', example='200'),
        totalDiskSize?: long(name='TotalDiskSize', description='The data replica distribution mode of the cluster. Valid values: 
- n: indicates the single-IDC mode. 
- n-n: indicates the dual-IDC mode. 
- n-n-n: indicates the multi-IDC mode. 

> <br>The integer n represents the number of OBServer nodes in each IDC.', example='200'),
        unitDiskSize?: long(name='UnitDiskSize', description='The list of zones.', example='200'),
        usedDiskSize?: long(name='UsedDiskSize', description='The specifications of the cluster.  You can specify one of the following four plans:    
- 8C32G: indicates 8 CPU cores and 32 GB of memory. 
- 14C70G: indicates 14 CPU cores and 70 GB of memory. 
- 30C180G: indicates 30 CPU cores and 180 GB of memory. 
- 62C400G: indicates 62 CPU cores and 400 GB of memory.', example='100'),
      }(name='DiskSize', description='The number of the page to return. 
- Start value: 1  
- Default value: 1'),
      logDiskSize?: {
        logAssignedSize?: string(name='LogAssignedSize'),
        maxLogAssignedObServer?: [ string ](name='MaxLogAssignedObServer'),
        maxLogAssignedPercent?: string(name='MaxLogAssignedPercent'),
        originalTotalDiskSize?: int32(name='OriginalTotalDiskSize'),
        totalDiskSize?: long(name='TotalDiskSize', description='The ID of the region.', example='400'),
        unitDiskSize?: long(name='UnitDiskSize', description='The request ID.', example='200'),
      }(name='LogDiskSize', description='The server with the highest disk usage.'),
      memory?: {
        originalTotalMemory?: long(name='OriginalTotalMemory', example='72'),
        totalMemory?: long(name='TotalMemory', description='Indicates whether trusted ECS instances are used.', example='70'),
        unitMemory?: long(name='UnitMemory', description='The log disk space of each replica node in the cluster. Unit: GB.', example='10'),
        usedMemory?: long(name='UsedMemory', description='The time in UTC when the cluster was created.', example='10'),
      }(name='Memory', description='The name of the OceanBase cluster.'),
      unitCount?: long(name='UnitCount', description='The number of CPU cores used in the cluster.', example='1'),
    }(name='Resource', description='The size of used memory in the cluster, in GB.'),
    series?: string(name='Series', description='Indicates whether the OBServer version is the latest.', example='Indicates whether the OBServer version is the latest.'),
    sharedUnitNumLimit?: int32(name='SharedUnitNumLimit'),
    specType?: string(name='SpecType'),
    status?: string(name='Status', description='The information about cluster resources.', example='ONLINE'),
    tenantCreatable?: {
      disableCreateTenantReason?: string(name='DisableCreateTenantReason', example='CPU_NOT_ENOUGH、 MEMORY_NOT_ENOUGH、TENANT_COUNT_EXCEEDS_LIMIT'),
      enableCreateTenant?: boolean(name='EnableCreateTenant'),
    }(name='TenantCreatable'),
    unitSpec?: string(name='UnitSpec'),
    version?: string(name='Version', description='You can call this operation to query the detailed information of an OceanBase cluster.', example='2.2.77'),
    zones?: [ string ](name='Zones'),
  }(name='Instance', description='The log disk space of each replica node in the cluster. Unit: GB.'),
  requestId?: string(name='RequestId', description='The total log disk space of the cluster, in GB.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceCreatableZoneRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the zone.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceCreatableZoneResponseBody = {
  requestId?: string(name='RequestId', description='Indicates whether the cluster is deployed in the zone.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  zoneList?: [ 
    {
      isInCluster?: boolean(name='IsInCluster', example='true'),
      zone?: string(name='Zone', description='DescribeInstanceCreatableZone', example='cn-hangzhou-i'),
    }
  ](name='ZoneList', description='The operation that you want to perform.   
Set the value to **DescribeInstanceCreatableZone**.'),
}

model DescribeInstanceCreatableZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceCreatableZoneResponseBody(name='body'),
}

async function describeInstanceCreatableZone(request: DescribeInstanceCreatableZoneRequest): DescribeInstanceCreatableZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceCreatableZone', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceSSLRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceSSLResponseBody = {
  instanceSSL?: {
    caUrl?: string(name='CaUrl', example='https://xxxx'),
    enableSSL?: string(name='EnableSSL', example='OPEN'),
    forceSSL?: string(name='ForceSSL', example='CLOSE'),
    forceSSLSupport?: boolean(name='ForceSSLSupport', example='false'),
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    status?: string(name='Status', example='RUNNING'),
    validPeriod?: string(name='ValidPeriod', example='2024-09-20 07:55:03.0'),
  }(name='InstanceSSL'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-xxxx-xxxx-87E3A8A2AA0C'),
}

model DescribeInstanceSSLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSSLResponseBody(name='body'),
}

async function describeInstanceSSL(request: DescribeInstanceSSLRequest): DescribeInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSSL', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceSecurityConfigsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  checkId?: string(name='CheckId', description='The unique identifier of the check.', example='xxx', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceSecurityConfigsResponseBody = {
  instanceSecurityConfigs?: {
    checkId?: string(name='CheckId', description='The unique identifier of the check.', example='xxx'),
    checkTime?: string(name='CheckTime', description='The time when the check was performed.', example='2023-08-07 15:30:00'),
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityConfigs?: [ 
      {
        configDescription?: string(name='ConfigDescription', description='The name of the check item.', example='Check whether the scope of the cluster allowlist is too big'),
        configGroup?: string(name='ConfigGroup', description='The group of the check.', example='WHITELIST'),
        configName?: string(name='ConfigName', description='The name of the specific check item.', example='xxx'),
        risk?: boolean(name='Risk', description='Specifies whether a risk is detected.', example='true'),
        riskDescription?: string(name='RiskDescription', description='Security recommendations.', example='xxx'),
      }
    ](name='SecurityConfigs', description='The list of check items.'),
    totalCheckCount?: int32(name='TotalCheckCount', description='The total number of security check items for the cluster.', example='5'),
    totalRiskCount?: int32(name='TotalRiskCount', description='The total number of detected cluster security risks.', example='0'),
  }(name='InstanceSecurityConfigs', description='The return result of the request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeInstanceSecurityConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSecurityConfigsResponseBody(name='body'),
}

async function describeInstanceSecurityConfigs(request: DescribeInstanceSecurityConfigsRequest): DescribeInstanceSecurityConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSecurityConfigs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceSummaryRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model DescribeInstanceSummaryResponseBody = {
  instanceSummary?: {
    alarmSummaryCount?: long(name='AlarmSummaryCount', example='1'),
    anomalySQLCount?: long(name='AnomalySQLCount', example='1'),
    clusterInstancesCount?: long(name='ClusterInstancesCount', example='1'),
    expiredInstancesCount?: long(name='ExpiredInstancesCount', example='1'),
    immediatelyExpiredInstancesCount?: long(name='ImmediatelyExpiredInstancesCount', example='1'),
    insufficientDiskInstancesCount?: long(name='InsufficientDiskInstancesCount', example='2'),
    overLoadInstancesCount?: long(name='OverLoadInstancesCount', example='1'),
    regionalInstanceSummaryList?: [ 
      {
        expiredInstancesCount?: string(name='ExpiredInstancesCount', example='1'),
        immediatelyExpiredInstancesCount?: string(name='ImmediatelyExpiredInstancesCount', example='1'),
        recentCreatedInstancesCount?: string(name='RecentCreatedInstancesCount', example='1'),
        region?: string(name='Region', example='cn-shanghai'),
        runningInstancesCount?: string(name='RunningInstancesCount', example='1'),
        totalInstancesCount?: string(name='TotalInstancesCount', example='3'),
      }
    ](name='RegionalInstanceSummaryList'),
    runningInstancesCount?: long(name='RunningInstancesCount', example='1'),
    tenantInstancesCount?: long(name='TenantInstancesCount', example='1'),
    totalInstancesCount?: long(name='TotalInstancesCount', example='3'),
    totalOmsInstancesCount?: long(name='TotalOmsInstancesCount', example='1'),
  }(name='InstanceSummary'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSummaryResponseBody(name='body'),
}

async function describeInstanceSummary(request: DescribeInstanceSummaryRequest): DescribeInstanceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSummary', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTagsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceIds?: string(name='InstanceIds', description='The list of cluster IDs.', example='["ob3za5w73as8rk"]', position='Body'),
  tags?: string(name='Tags', description='The tags.', example='[{"Key": "xxx", "Value", "xxx"},{}]', position='Body'),
}

model DescribeInstanceTagsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='ob317v4uif****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
      tag?: string(name='Tag', description='The tag of the resource.', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
    }
  ](name='TagResources', description='The list of tags.'),
}

model DescribeInstanceTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceTagsResponseBody(name='body'),
}

async function describeInstanceTags(request: DescribeInstanceTagsRequest): DescribeInstanceTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTags', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTenantModesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The operation that you want to perform.   
Set the value to **DescribeInstanceTenantModes**.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceTenantModesResponseBody = {
  instanceModes?: [ string ](name='InstanceModes'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceTenantModesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceTenantModesResponseBody(name='body'),
}

async function describeInstanceTenantModes(request: DescribeInstanceTenantModesRequest): DescribeInstanceTenantModesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTenantModes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTopologyRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The status of the node.', example='ob317v4uif****', position='Body'),
}

model DescribeInstanceTopologyResponseBody = {
  instanceTopology?: {
    replicas?: [ 
      {
        logicalZone?: string(name='LogicalZone'),
        nodeNum?: int32(name='NodeNum'),
        replicaResource?: {
          cpu?: {
            totalCpu?: int32(name='TotalCpu'),
            usedCpu?: int32(name='UsedCpu'),
          }(name='Cpu'),
          diskSize?: {
            totalDiskSize?: long(name='TotalDiskSize'),
            usedDiskSize?: float(name='UsedDiskSize'),
          }(name='DiskSize'),
          memory?: {
            totalMemory?: long(name='TotalMemory'),
            usedMemory?: long(name='UsedMemory'),
          }(name='Memory'),
        }(name='ReplicaResource'),
        replicaType?: string(name='ReplicaType'),
        status?: string(name='Status'),
        zoneLogicalId?: int32(name='ZoneLogicalId'),
        zoneLogicalName?: string(name='ZoneLogicalName'),
        zoneRegionName?: string(name='ZoneRegionName'),
      }
    ](name='Replicas'),
    tenants?: [ 
      {
        primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='The server with the highest disk usage.', example='RANDOM'),
        tenantCpu?: float(name='TenantCpu', description='The information about the memory resources of the node.', example='2'),
        tenantDeployType?: string(name='TenantDeployType', description='The name of the tenant.', example='multiple'),
        tenantDiskSize?: float(name='TenantDiskSize'),
        tenantId?: string(name='TenantId', description='The size of used memory of the node, in GB.', example='t33h8y08k****'),
        tenantMemory?: float(name='TenantMemory', description='The total storage space of the node, in GB.', example='10'),
        tenantMode?: string(name='TenantMode', description='The size of used storage space of the node, in GB.', example='Oracle'),
        tenantName?: string(name='TenantName', description='The total memory size of the node, in GB.', example='pay_online'),
        tenantStatus?: string(name='TenantStatus', description='The size of used memory of the node, in GB.', example='ONLINE'),
        tenantUnitCpu?: float(name='TenantUnitCpu'),
        tenantUnitMemory?: float(name='TenantUnitMemory'),
        tenantUnitNum?: int32(name='TenantUnitNum', description='The number of CPU cores of the tenant.', example='1'),
        tenantZones?: [ 
          {
            isPrimaryTenantZone?: boolean(name='IsPrimaryTenantZone', description='The maximum disk usage, in percentage.', example='true'),
            logicalZone?: string(name='LogicalZone'),
            replicaType?: string(name='ReplicaType'),
            tenantZoneId?: string(name='TenantZoneId', description='The server with the highest disk usage.', example='cn-hangzhou-h'),
            tenantZoneRole?: string(name='TenantZoneRole', description='The information of zones.', example='ReadWrite'),
            units?: [ 
              {
                enableCancelMigrateUnit?: boolean(name='EnableCancelMigrateUnit', description='Indicates whether the migration can be canceled.   
This field is valid only for units that are being manually immigrated or emigrated.', example='true'),
                enableMigrateUnit?: boolean(name='EnableMigrateUnit', description='The return result of the request.', example='true'),
                manualMigrate?: boolean(name='ManualMigrate', description='The return result of the request.', example='true'),
                nodeId?: string(name='NodeId', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='i-bp16niirq4zdmgvm****'),
                replicaType?: string(name='ReplicaType'),
                unitCpu?: float(name='UnitCpu', description='Alibaba Cloud CLI', example='2'),
                unitDataSize?: long(name='UnitDataSize', description='The operation that you want to perform.   
Set the value to **DescribeInstanceTopology**.', example='10'),
                unitId?: string(name='UnitId', description='The topology of the cluster.', example='1002'),
                unitMemory?: float(name='UnitMemory', description='The ID of the tenant.', example='10'),
                unitStatus?: string(name='UnitStatus', description='You can call this operation to query the topology of an OceanBase cluster.', example='ONLINE'),
              }
            ](name='Units', description='The information about the storage resources.'),
          }
        ](name='TenantZones', description='The information about the storage resources of the node.'),
      }
    ](name='Tenants', description='The total number of CPU cores for the node.'),
    zones?: [ 
      {
        nodes?: [ 
          {
            fullCopyId?: long(name='FullCopyId'),
            logicalZone?: string(name='LogicalZone'),
            nodeCopyId?: long(name='NodeCopyId', description='The information of zones.', example='1'),
            nodeId?: string(name='NodeId', description='The ID of the resource unit.', example='i-bp16niirq4zdmgvm****'),
            nodeResource?: {
              cpu?: {
                totalCpu?: int32(name='TotalCpu', example='14'),
                usedCpu?: float(name='UsedCpu', example='4'),
              }(name='Cpu'),
              diskSize?: {
                totalDiskSize?: double(name='TotalDiskSize'),
                usedDiskSize?: double(name='UsedDiskSize'),
              }(name='DiskSize'),
              memory?: {
                totalMemory?: long(name='TotalMemory', example='70'),
                usedMemory?: float(name='UsedMemory', example='10'),
              }(name='Memory'),
            }(name='NodeResource', description='The ID of the node.'),
            nodeStatus?: string(name='NodeStatus', description='The ID of the OBServer where the resource unit resides.', example='ONLINE'),
            readOnlyCopyId?: long(name='ReadOnlyCopyId'),
            replicaType?: string(name='ReplicaType'),
          }
        ](name='Nodes', description='The ID of the region.'),
        region?: string(name='Region', description='The zone information of the cluster.', example='cn-hangzhou'),
        zoneDisk?: string(name='ZoneDisk', description='The information about the memory resources of the node.', example='200 GB'),
        zoneId?: string(name='ZoneId', description='The information of the tenant.', example='cn-hangzhou-i'),
        zoneResource?: {
          diskSize?: {
            maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer'),
            maxDiskUsedPercent?: double(name='MaxDiskUsedPercent', description='DescribeInstanceTopology', example='0.14'),
          }(name='DiskSize'),
        }(name='ZoneResource', description='Example 1'),
      }
    ](name='Zones', description='The information about resource units.'),
  }(name='InstanceTopology', description='The number of CPU cores used by the node.'),
  requestId?: string(name='RequestId', description='The information about the CPU resources of the node.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceTopologyResponseBody(name='body'),
}

async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTopology', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstancesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster. It must be 1 to 20 characters in length. If this parameter is not specified, the value is the instance ID of the cluster by default.', example='ob4prod', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.
- Pages start from page 1.
- Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.
- Maximum value: 100.
- Default value: 10.', example='10', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If you do not specify this parameter, all resources are returned.', example='group1', position='Body'),
  searchKey?: string(name='SearchKey', description='The keyword for fuzzy search, which can be an instance ID, instance name, tenant ID, or tenant name.', example='pay', position='Body'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      availableZones?: [ string ](name='AvailableZones', description='The information about the zone in which the cluster is deployed.'),
      commodityCode?: string(name='CommodityCode', description='The product code of the OceanBase cluster.   
- oceanbase_oceanbasepre_public_cn: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in a China site.  
- oceanbase_oceanbasepost_public_cn: indicates an OceanBase cluster that is billed based on the pay-as-you-go plan and that is deployed in a China site.  
- oceanbase_obpre_public_intl: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in an international site.', example='oceanbase_oceanbasepost_public_cn'),
      cpu?: int32(name='Cpu', description='The number of CPU cores of the cluster.', example='14'),
      cpuArchitecture?: string(name='CpuArchitecture', description='The CPU architecture of the cluster.', example='X86_64, AARCH64'),
      createTime?: string(name='CreateTime', description='The time in UTC when the cluster was created.', example='2021-10-19T07:13:41Z'),
      dataDiskAutoScaleConfig?: {
        autoScale?: boolean(name='AutoScale', description='Specifies whether to enable the automatic scaling of the data disk.', example='true'),
        maxDiskSize?: long(name='MaxDiskSize', description='The maximum size of the disk, in GB.', example='80000'),
        scaleStepInMerge?: double(name='ScaleStepInMerge', description='The size of scaling step during a major compaction.', example='100'),
        scaleStepInNormal?: double(name='ScaleStepInNormal', description='The size of scaling step during daily use.', example='50'),
        upperMergeThreshold?: double(name='UpperMergeThreshold', description='The maximum usage of the data disk, in percentage, that triggers the scaling of the data disk for major compactions.', example='90'),
        upperScaleStrategy?: string(name='UpperScaleStrategy', description='The scale-out strategy. Valid values: RAW and PERCENTAGE.', example='RAW'),
        upperThreshold?: double(name='UpperThreshold', description='The maximum usage of the data disk, in percentage, that triggers the scaling of the data disk for daily use.', example='80'),
        upperbound?: double(name='Upperbound', description='The maximum space, in GB, to which the data disk can be scaled.', example='16'),
      }(name='DataDiskAutoScaleConfig', description='Specifies parameters for the automatic scaling of the data disk.'),
      deployMode?: string(name='DeployMode', description='The data replica distribution mode of the cluster. The value is in the n-n-n format, where n is the number of OBServer nodes in each IDC.', example='1-1-1'),
      deployType?: string(name='DeployType', description='The deployment type of the cluster. Valid values:   
- multiple: multi-IDC deployment  
- single: single-IDC deployment  
- dual: dual-IDC deployment', example='multiple'),
      diskSize?: string(name='DiskSize', description='The size of the storage space, in GB.', example='200'),
      diskType?: string(name='DiskType', description='The type of the storage disk where the cluster is deployed.   
The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.', example='cloud_essd_pl1'),
      enableReadOnlyReplicaManagement?: boolean(name='EnableReadOnlyReplicaManagement', description='Indicates whether the cluster supports read-only replicas.', example='yes'),
      enableUpgradeNodes?: boolean(name='EnableUpgradeNodes', description='Indicates whether new nodes can be added.', example='true'),
      expireSeconds?: int32(name='ExpireSeconds', description='The time elapsed since the expiration of the cluster, in seconds. 
> In subscription mode, if the cluster has not expired, this parameter indicates the remaining validity period of the cluster. If the cluster has expired, this parameter indicates the time elapsed since the expiration.', example='2606682'),
      expireTime?: string(name='ExpireTime', description='The time in UTC when the cluster expires. 
> This parameter is valid only for subscription instances.', example='2021-10-17T16:00:00Z'),
      inTempCapacityStatus?: boolean(name='InTempCapacityStatus', description='Specifies whether to indicate the temporary status of the capacity.', example='false'),
      instanceClass?: string(name='InstanceClass', description='The specifications of the cluster.  You can specify one of the following four plans:  
- 8C32G: indicates 8 CPU cores and 32 GB of memory.  
- 14C70G: indicates 14 CPU cores and 70 GB of memory.  
- 30C180G: indicates 30 CPU cores and 180 GB of memory.  
- 62C400G: indicates 62 CPU cores and 400 GB of memory.', example='14C70G'),
      instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
      instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.', example='ob4test'),
      instanceRole?: string(name='InstanceRole', description='The role of the instance.', example='NORMAL'),
      instanceType?: string(name='InstanceType', description='The instance type.
- cluster: indicates a cluster instance.
- mtenant: indicates a tenant instance in MySQL mode.
- mtenant_serverless: indicates a serverless instance in MySQL mode.', example='CLUSTER'),
      maintainTime?: string(name='MaintainTime', description='The time period in UTC for the daily routine maintenance of the cluster.', example='2021-10-19T07:13:41Z'),
      mem?: long(name='Mem', description='The memory size of the instance, in GB.', example='70'),
      obRpmVersion?: string(name='ObRpmVersion'),
      payType?: string(name='PayType', description='The billing method for the OceanBase cluster. Valid values:  
- PREPAY: the subscription billing method.  
- POSTPAY: the pay-as-you-go billing method.', example='PREPAY'),
      resource?: {
        capacityUnit?: {
          maxCapacityUnit?: int32(name='MaxCapacityUnit', description='The maximum number of capacity units.', example='4'),
          minCapacityUnit?: int32(name='MinCapacityUnit', description='The minimum number of capacity units.', example='1'),
          usedCapacityUnit?: int32(name='UsedCapacityUnit', description='The number of used capacity units.', example='2'),
        }(name='CapacityUnit', description='The information about capacity units.'),
        cpu?: {
          originalTotalCpu?: double(name='OriginalTotalCpu', description='The number of original CPU cores in the cluster.', example='14'),
          totalCpu?: double(name='TotalCpu', description='The total number of CPU cores of the cluster.', example='14'),
          unitCpu?: double(name='UnitCpu', description='The number of CPU cores of each replica node in the cluster.', example='10'),
          usedCpu?: double(name='UsedCpu', description='The number of CPU cores used in the cluster.', example='10'),
        }(name='Cpu', description='The information about the CPU resources of the cluster.'),
        diskSize?: {
          originalTotalDiskSize?: double(name='OriginalTotalDiskSize', description='The original size of the disk.', example='200'),
          totalDiskSize?: double(name='TotalDiskSize', description='The total storage space of the cluster, in GB.', example='200'),
          unitDiskSize?: double(name='UnitDiskSize', description='The storage space of each replica node in the cluster, in GB.', example='200'),
          usedDiskSize?: long(name='UsedDiskSize', description='The size of used storage space of the cluster, in GB.', example='100'),
        }(name='DiskSize', description='The information about the storage resources of the cluster.'),
        memory?: {
          originalTotalMemory?: double(name='OriginalTotalMemory', description='The original memory size of the cluster, in GB.', example='72'),
          totalMemory?: double(name='TotalMemory', description='The total memory size of the cluster, in GB.', example='70'),
          unitMemory?: long(name='UnitMemory', description='The memory size of each replica node in the cluster, in GB.', example='10'),
          usedMemory?: long(name='UsedMemory', description='The size of used memory in the cluster, in GB.', example='10'),
        }(name='Memory', description='The information about the memory resources of the cluster.'),
        unitCount?: long(name='UnitCount', description='The number of resource units in the cluster.', example='1'),
      }(name='Resource', description='The information about cluster resources.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='group1'),
      series?: string(name='Series', description='The series of the OceanBase cluster. Valid values:   
- NORMAL: the high availability edition.   
- BASIC: the basic edition.', example='NORMAL'),
      specType?: string(name='SpecType'),
      state?: string(name='State', description='The status of the cluster. Valid values:   
- ONLINE: The cluster is running.  
- PENDING_CREATE: The cluster is being created.  
- ARREARS_CLOSED("arrears_closed"): The cluster is suspended due to insufficient balance.
- PREPAID_EXPIRE_CLOSED("prepaid_expire_closed"): The cluster is suspended because the subscription has expired.
- WHITE_LIST_MODIFYING("white_list_modifying"): The allowlist of the cluster is being modified.
- SSL_MODIFYING("ssl_modifying"): The Secure Sockets Layer (SSL) settings of the cluster are being modified.
- PARAMETER_MODIFYING("parameter_modifying"): Parameters of the cluster are being modified.
- TENANT_CREATING("tenant_creating"): A tenant is being created in the cluster.
- TENANT_SPEC_MODIFYING("tenant_spec_modifying"): The specifications of a tenant in the cluster are being modified.
- EXPANDING("expanding"): Nodes are being added to the cluster.
- REDUCING("reducing"): Nodes are being removed from the cluster.
- ZONE_CHANGING("zone_changing"): Zones of the cluster are being modified.
- SPEC_UPGRADING: The service plan is being upgraded.
- SPEC_DOWNGRADING("spec_downgrading"): The plan specification is being downgraded.
- DISK_UPGRADING: The storage space is being expanded.
- UPGRADING("upgrading"): The version of the cluster is being upgraded.
- PENDING_DELETE("pending_delete"): The cluster is being deleted.
- DELETED("deleted"): The cluster has been deleted.
- ABNORMAL("abnormal"): The cluster is abnormal.
- OFFLINE("offline"): The cluster is offline.
- STANDBY_CREATING("standby_creating"): A standby cluster is being created for the cluster.
- STANDBY_DELETING("standby_deleting"): A standby cluster of the cluster is being deleted.
- SWITCHOVER_SWITCHING("switchover_switching"): The cluster is undergoing a primary/standby switchover.
- STANDBY_DISCONNECTING("standby_disconnecting"): The cluster is being decoupled from its standby cluster.
- LOG_DISK_UPGRADING("log_disk_upgrading"): The log disk of the cluster is being scaled out.
- ISOLATION_OPTIMIZATION_MODIFYING("isolation_optimization_modifying"): The isolation optimization settings of the cluster are being modified.
- DISKTYPE_MODIFYING("disktype_modifying"): The data disk type of the cluster is being modified.
- PROXY_SERVICE_CREATING("proxy_service_creating"): The proxy service is being enabled for the cluster.
- PROXY_SERVICE_DELETING("proxy_service_deleting"): The proxy service is being disabled for the cluster.
- PROXY_SERVICE_SPEC_MODIFYING("proxy_service_spec_modifying"): The proxy service specification is being modified for the cluster.
- READONLY_ADD_NODE("readonly_add_node"): A read-only node is being added to the cluster.
- READONLY_REDUCE_NODE("readonly_reduce_node"): A read-only node is being removed from the cluster.
- READONLY_REDUCE_ZONE("readonly_reduce_zone"): A read-only zone is being removed from the cluster.
- READONLY_ADD_ZONE("readonly_add_zone"): A read-only zone is being added to the cluster.
- READONLY_UPGRADE_SPEC("readonly_upgrade_spec"): The specification of read-only replicas is being upgraded.
- READONLY_UPGRADE_DISK("readonly_upgrade_disk"): The disk space of read-only replicas is being scaled out.
- READONLY_DOWNGRADE_SPEC("readonly_downgrade_spec"): The specification of read-only replicas is being downgraded.
- READONLY_DOWNGRADE_DISK("readonly_downgrade_disk"): The disk space of read-only replicas is being scaled in.
- CREATING_TENANT_READONLY_REPLICA("creating_tenant_readonly_replica"): A read-only replica is being created for a tenant in the cluster.
- DELETING_TENANT_READONLY_REPLICA("deleting_tenant_readonly_replica"): A read-only replica is being deleted for a tenant in the cluster.
- DISK_DOWNGRADING("disk_downgrading"): The disk space of the cluster is being scaled in.
- DEPLOY_MODE_MODIFYING("deploy_mode_modifying"): The deployment mode of the cluster is being modified.
> Generally, the cluster is in the ONLINE state.', example='ONLINE'),
      usedDiskSize?: long(name='UsedDiskSize', description='The size of used storage space of the cluster, in GB.', example='20'),
      version?: string(name='Version', description='The OBServer version.', example='2.2.77'),
      vpcId?: string(name='VpcId', description='vpcId', example='vpc-8vb8qjrixzovjpy******'),
    }
  ](name='Instances', description='The information of the OceanBase cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='The number of OceanBase clusters queried.', example='2'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMetricsDataRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', example='2021-06-13T15:40:43Z', position='Query'),
  groupByLabels: string(name='GroupByLabels', example='app,clusterId', position='Query'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Query'),
  labels: string(name='Labels', example='app:OB,clusterId:ob***', position='Query'),
  limit?: string(name='Limit', example='5', position='Query'),
  metrics: string(name='Metrics', example='tps', position='Query'),
  replicaType?: string(name='ReplicaType', position='Body'),
  sortMetricKey?: string(name='SortMetricKey', example='tps', position='Query'),
  sortOrder?: string(name='SortOrder', example='DESC', position='Query'),
  startTime: string(name='StartTime', example='2021-06-13T15:40:43Z', position='Query'),
}

model DescribeMetricsDataResponseBody = {
  data?: [ string ](name='Data', example='[
                {
                    "sql_select_count":75.****15****1515,
                    "timestamp":165079****
                },
                ......
            ]'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeMetricsDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMetricsDataResponseBody(name='body'),
}

async function describeMetricsData(request: DescribeMetricsDataRequest): DescribeMetricsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricsData', 'POST', '/', 'json', true, 'form', request);
}

model DescribeNodeMetricsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='$.parameters[7].schema.description', example='2021-09-13T15:40:43Z', position='Body'),
  instanceId: string(name='InstanceId', description='The list of nodes.', example='ob317v4uif****', position='Body'),
  metrics: string(name='Metrics', description='$.parameters[7].schema.enumValueTitles', example='tps', position='Body'),
  nodeIdList?: string(name='NodeIdList', description='$.parameters[10].schema.description', example='[i-bp16niirq4zdmgvm****,i-bp16n56hq4z4fgvm****]', position='Body'),
  nodeName?: string(name='NodeName', description='$.parameters[8].schema.example', example='i-bp16niirq4zdmgvm****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='$.parameters[6].schema.description', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The ID of the tenant.', example='10', position='Body'),
  startTime: string(name='StartTime', description='$.parameters[9].schema.example', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId?: string(name='TenantId', description='$.parameters[6].schema.enumValueTitles', example='tfafd34fs****', position='Body'),
}

model DescribeNodeMetricsResponseBody = {
  nodeMetrics?: string(name='NodeMetrics', example='-'),
  requestId?: string(name='RequestId', description='You can call this operation to query the detailed metrics information of an OceanBase Database node.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='```
http(s)://[Endpoint]/?Action=DescribeNodeMetrics
&InstanceId=ob317v4uif****
&PageSize=10
&PageNumber=1
&TenantId=ob2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-09-13 15:40:43
&Metrics=tps
&NodeName=i-bp16niirq4zdmgvm****
&NodeIdList=["i-bp19y05uq6xpacyqnlrc","i-bp1blcr3htr3g3u2vqvu","i-bp1392ikhayhr3hi4fli"]
&Common request parameters
```', example='9'),
}

model DescribeNodeMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNodeMetricsResponseBody(name='body'),
}

async function describeNodeMetrics(request: DescribeNodeMetricsRequest): DescribeNodeMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeMetrics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOasAnomalySQLListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:
- zh: Chinese
- en: English', example='zh-CN', position='Body'),
  current?: long(name='Current', description='The current page.', example='1', position='Body'),
  dbName?: string(name='DbName', description='The name of the database.', example='db_****', position='Body'),
  dynamicSql?: boolean(name='DynamicSql', position='Body'),
  endTime: string(name='EndTime', description='The end time of the monitoring data.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  filterCondition?: string(name='FilterCondition', description='All parameters are referenced by the symbol @. For a list of available parameters, refer to the returned parameters in [Query performance indicators of an SQL statement](https://en.oceanbase.com/docs/community-ocp-en-10000000000840290).', example='@avgCpuTime > 20 and @executions > 100', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  mergeDynamicSql?: boolean(name='MergeDynamicSql', position='Body'),
  nodeIp?: string(name='NodeIp', description='The node IP.', example='i-bp19y05uq6x*********', position='Body'),
  pageSize?: long(name='PageSize', description='Page size.
- Start value: 1
- Default value: 1', example='10', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParam?: string(name='SearchParam', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.   
Valid values: "=", ">", ">=", "<", and "<="', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sqlId?: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  sqlTextLength?: long(name='SqlTextLength', description='Max length of the returned SQL text.', example='65535', position='Body'),
  startTime: string(name='StartTime', description='The start time of the monitoring data.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeOasAnomalySQLListResponseBody = {
  data?: [ 
    {
      avgCpuTime?: double(name='AvgCpuTime', description='Average CPU time of the suspicious SQL.', example='100.24'),
      avgDbTime?: double(name='AvgDbTime'),
      avgElapsedTime?: double(name='AvgElapsedTime', description='Average response time of the suspicious SQL.', example='100.28'),
      avgGetPlanTime?: double(name='AvgGetPlanTime', description='Average time to obtain the execution plan of the suspicious SQL.', example='0'),
      avgLogicalReads?: float(name='AvgLogicalReads'),
      avgRetryCount?: float(name='AvgRetryCount'),
      cpuTime?: double(name='CpuTime', description='CPU time of the suspicious SQL.', example='100.23'),
      dbName?: string(name='DbName', description='The name of the database.', example='db_***'),
      diagTypes?: [ string ](name='DiagTypes', description='The type of the diagnosis.'),
      diagnosis?: string(name='Diagnosis', description='The details of diagnosis.'),
      dynamicSql?: boolean(name='DynamicSql'),
      executions?: double(name='Executions', description='Total execution count of the suspicious SQL.', example='1'),
      lastExecutedTime?: double(name='LastExecutedTime', description='Last execution time of the suspicious SQL.', example='2023-04-12T04:38:38Z'),
      riskLevel?: string(name='RiskLevel', description='Risk level.', example='high'),
      sqlId?: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      sqlList?: [ 
        {
          avgCpuTime?: double(name='AvgCpuTime'),
          avgDbTime?: double(name='AvgDbTime'),
          avgElapsedTime?: double(name='AvgElapsedTime'),
          avgGetPlanTime?: double(name='AvgGetPlanTime'),
          avgLogicalReads?: float(name='AvgLogicalReads'),
          avgRetryCount?: float(name='AvgRetryCount'),
          cpuTime?: double(name='CpuTime'),
          dbName?: string(name='DbName'),
          diagTypes?: [ string ](name='DiagTypes'),
          diagnosis?: string(name='Diagnosis'),
          executions?: double(name='Executions'),
          lastExecutedTime?: double(name='LastExecutedTime'),
          riskLevel?: string(name='RiskLevel'),
          sqlId?: string(name='SqlId'),
          sqlTextShort?: string(name='SqlTextShort'),
          suggestion?: string(name='Suggestion'),
          sumDbTime?: double(name='SumDbTime'),
          sumElapsedTime?: string(name='SumElapsedTime'),
          sumRetryCount?: float(name='SumRetryCount'),
          userName?: string(name='UserName'),
        }
      ](name='SqlList'),
      sqlTextShort?: string(name='SqlTextShort', description='Prefix of the SQL text.', example='delete /*+ XXX PARALLEL(4) */ from'),
      suggestion?: string(name='Suggestion', description='Suggestion for the suspicious SQL.', example='review'),
      sumDbTime?: double(name='SumDbTime'),
      sumElapsedTime?: string(name='SumElapsedTime', description='Total response time of the suspicious SQL.', example='11452126.36'),
      sumRetryCount?: float(name='SumRetryCount'),
      userName?: string(name='UserName', description='Username.', example='test_user'),
    }
  ](name='Data', description='The list of suspicious SQLs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469**-AA6F-4D**-B3DB-A***********'),
  totalCount?: long(name='TotalCount', description='The total count.', example='9'),
}

model DescribeOasAnomalySQLListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOasAnomalySQLListResponseBody(name='body'),
}

async function describeOasAnomalySQLList(request: DescribeOasAnomalySQLListRequest): DescribeOasAnomalySQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOasAnomalySQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOasSQLDetailsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dbName: string(name='DbName', description='The name of the database.', example='test_db', position='Body'),
  dynamicSql?: boolean(name='DynamicSql', position='Body'),
  endTime: string(name='EndTime', description='The end time of querying the SQL execution plan.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  parseTable?: boolean(name='ParseTable', position='Body'),
  sqlId: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of querying the SQL execution plan.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeOasSQLDetailsResponseBody = {
  data?: {
    dbName?: string(name='DbName', description='The name of the database.', example='test_db'),
    fulltext?: string(name='Fulltext', description='SQL text.', example='select a from b'),
    statement?: string(name='Statement', description='Parameterized text.', example='select a from b'),
    tables?: [ string ](name='Tables', description='The table name related to the SQL.'),
    userName?: string(name='UserName', description='The username.', example='test_user'),
  }(name='Data', description='The list of the SQL execution plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeOasSQLDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOasSQLDetailsResponseBody(name='body'),
}

async function describeOasSQLDetails(request: DescribeOasSQLDetailsRequest): DescribeOasSQLDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOasSQLDetails', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOasSQLHistoryListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:
- zh: Chinese
- en: English', example='zh-CN', position='Body'),
  dbName?: string(name='DbName', description='The name of the database.', example='test_db', position='Body'),
  dynamicSql?: boolean(name='DynamicSql', position='Body'),
  endTime: string(name='EndTime', description='The end time of querying the execution history of the SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp19y05uq6x*********', position='Body'),
  sqlId: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of querying the execution history of the SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeOasSQLHistoryListResponseBody = {
  data?: [ 
    {
      avgAffectedRows?: long(name='AvgAffectedRows', description='Average updated rows during the execution period.', example='9978.75'),
      avgApplicationWaitTime?: double(name='AvgApplicationWaitTime', description='Average Application event wait time (in milliseconds) during the client waiting period.', example='0.0'),
      avgBlockCacheHit?: long(name='AvgBlockCacheHit', description='Average BlockCache hit count during the execution period.', example='0.0'),
      avgBlockIndexCacheHit?: long(name='AvgBlockIndexCacheHit', description='Average BlockIndexCache hit count during the execution period.', example='0.0'),
      avgBloomFilterCacheHit?: long(name='AvgBloomFilterCacheHit', description='Average BloomFilterCache hit count during the execution period.', example='0.0'),
      avgConcurrencyWaitTime?: double(name='AvgConcurrencyWaitTime', description='Average Concurrency event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgCpuTime?: double(name='AvgCpuTime', description='Average CPU time (in milliseconds) during the execution period.', example='1875.34'),
      avgDbTime?: double(name='AvgDbTime'),
      avgDecodeTime?: double(name='AvgDecodeTime', description='Average syntax parsing time (in milliseconds) during the execution period.', example='0.0'),
      avgDiskReads?: long(name='AvgDiskReads', description='Average physical read count during the execution period.', example='0.0'),
      avgElapsedTime?: double(name='AvgElapsedTime', description='Average response time (in milliseconds) during the execution period.', example='1876.78'),
      avgExecuteTime?: double(name='AvgExecuteTime', description='Average plan execution time (in milliseconds) during the execution period.', example='1895.7'),
      avgExecutorRpcCount?: double(name='AvgExecutorRpcCount', description='Average number of RPC requests executed during the execution period.', example='0'),
      avgExpectedWorkerCount?: double(name='AvgExpectedWorkerCount', description='Average degree of parallelism during the execution period.', example='3'),
      avgGetPlanTime?: double(name='AvgGetPlanTime', description='Average plan generation time (in milliseconds) during the execution period.', example='0.0'),
      avgLogicalReads?: long(name='AvgLogicalReads', description='Average logical reads during the execution period.', example='0.0'),
      avgMemstoreReadRows?: long(name='AvgMemstoreReadRows', description='Average Memstore read rows during the execution period.', example='0.0'),
      avgNetTime?: double(name='AvgNetTime', description='Average network transmission time (in milliseconds) during the execution period.', example='8'),
      avgNetWaitTime?: double(name='AvgNetWaitTime', description='Average network enqueue time (in milliseconds) during the network waiting period.', example='0.0'),
      avgPartitionCount?: double(name='AvgPartitionCount', description='Average number of partition accessed during the execution period.', example='1'),
      avgQueueTime?: double(name='AvgQueueTime', description='Average queueing time (in milliseconds) during the execution period.', example='0.01'),
      avgReturnRows?: long(name='AvgReturnRows', description='Average number of rows returned during the execution period.', example='0.0'),
      avgRowCacheHit?: long(name='AvgRowCacheHit', description='Average RowCache hit count during the execution period.', example='0.0'),
      avgRpcCount?: long(name='AvgRpcCount', description='Average number of RPC sent during the execution.', example='8.0'),
      avgScheduleTime?: double(name='AvgScheduleTime', description='Average Schedule event wait time (in milliseconds) during the scheduling period.', example='0.0'),
      avgSsstoreReadRows?: long(name='AvgSsstoreReadRows', description='Average Ssstore read rows during the execution period.', example='0.0'),
      avgUsedWorkerCount?: double(name='AvgUsedWorkerCount', description='Average number of threads used of the SQL during the execution period.', example='3'),
      avgUserIoWaitTime?: double(name='AvgUserIoWaitTime', description='Average UserIO event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgWaitCount?: double(name='AvgWaitCount', description='Average number of waits during the execution period.', example='0'),
      avgWaitTime?: double(name='AvgWaitTime', description='Average wait time (in milliseconds) during the execution period.', example='1442.49'),
      dbName?: string(name='DbName', description='The name of the database.', example='test_db'),
      distPlanPercentage?: double(name='DistPlanPercentage', description='Distributed plan percentage during the execution period.', example='100'),
      execPs?: double(name='ExecPs', description='Average execution count per second during the execution period.', example='0.31'),
      executions?: long(name='Executions', description='Total number of executions during the execution period.', example='1'),
      failCount?: long(name='FailCount', description='The total number of errors during the execution period.', example='0'),
      failPercentage?: double(name='FailPercentage', description='Error percentage during the execution period.', example='0'),
      localPlanPercentage?: double(name='LocalPlanPercentage', description='Local plan percentage during the execution period.', example='0'),
      maxAffectedRows?: double(name='MaxAffectedRows', description='Max updated rows during the execution period.', example='10000'),
      maxApplicationWaitTime?: double(name='MaxApplicationWaitTime', description='Max Application event wait time (in milliseconds) during the execution period', example='0'),
      maxConcurrencyWaitTime?: double(name='MaxConcurrencyWaitTime', description='Max Concurrency event wait time (in milliseconds) during the execution period', example='0'),
      maxCpuTime?: double(name='MaxCpuTime', description='Max CPU time.', example='13641.9'),
      maxDiskReads?: double(name='MaxDiskReads', description='Max physical read count during the execution period.', example='0'),
      maxElapsedTime?: double(name='MaxElapsedTime', description='Max response time.', example='13643.3'),
      maxReturnRows?: double(name='MaxReturnRows', description='Max returned rows during the execution period.', example='0'),
      maxUserIoWaitTime?: double(name='MaxUserIoWaitTime', description='Max UserIO event wait time (in milliseconds) during the execution period', example='0'),
      maxWaitTime?: double(name='MaxWaitTime', description='Max wait time (in milliseconds) during the execution period.', example='3.4'),
      missPlanPercentage?: double(name='MissPlanPercentage', description='Plan hit rage during the execution period.', example='0'),
      missPlans?: long(name='MissPlans', description='Missed plan count.', example='0'),
      remotePlanPercentage?: double(name='RemotePlanPercentage', description='Remote plan percentage during the execution period.', example='0'),
      remotePlans?: long(name='RemotePlans', description='Remote plan count.', example='0'),
      retCode4012Count?: double(name='RetCode4012Count', description='Number of occurrences of code 4012 during the execution period.', example='0'),
      retCode4013Count?: double(name='RetCode4013Count', description='Number of occurrences of code 4013 during the execution period.', example='0'),
      retCode5001Count?: double(name='RetCode5001Count', description='Number of occurrences of code 5001 during the execution period.', example='0'),
      retCode5024Count?: double(name='RetCode5024Count', description='Number of occurrences of code 5024 during the execution period.', example='0'),
      retCode5167Count?: double(name='RetCode5167Count', description='Number of occurrences of code 5167 during the execution period.', example='0'),
      retCode5217Count?: double(name='RetCode5217Count', description='Number of occurrences of code 5217 during the execution period.', example='0'),
      retCode6002Count?: double(name='RetCode6002Count', description='Number of occurrences of code 6002 during the execution period.', example='0'),
      retryCount?: long(name='RetryCount', description='Total number of retries during the execution period.', example='0'),
      SQLId?: string(name='SQLId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      server?: string(name='Server', description='The server where the SQL is executed.', example='i-bp1db1****8uemejio'),
      strongConsistencyPercentage?: double(name='StrongConsistencyPercentage', description='Strong consistent transaction percentage during the execution period.', example='100'),
      sumDbTime?: double(name='SumDbTime'),
      sumElapsedTime?: double(name='SumElapsedTime', description='Total response time (in milliseconds) during the execution period.', example='11452126.36'),
      sumLogicalReads?: double(name='SumLogicalReads', description='Total logical reads.', example='0'),
      sumWaitTime?: double(name='SumWaitTime', description='The total wait time (in milliseconds) during the internal waiting period.', example='9421.73'),
      tableScanPercentage?: double(name='TableScanPercentage', description='Table scan percentage during the execution period.', example='0'),
      timestamp?: string(name='Timestamp', description='Timestamp for the sample.', example='2023-04-12T04:46:38Z'),
      userName?: string(name='UserName', description='Username.', example='test_user'),
      weakConsistencyPercentage?: double(name='WeakConsistencyPercentage', description='Eventually consistent transaction percentage during the execution period.', example='0'),
    }
  ](name='Data', description='The list of SQL execution history.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeOasSQLHistoryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOasSQLHistoryListResponseBody(name='body'),
}

async function describeOasSQLHistoryList(request: DescribeOasSQLHistoryListRequest): DescribeOasSQLHistoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOasSQLHistoryList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOasSQLPlansRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='Supported language. Valid values:
- zh-CN: Chinese
- en-US: English', example='zh-CN', position='Body'),
  dbName: string(name='DbName', description='The name of the database.', example='test_db', position='Body'),
  dynamicSql?: boolean(name='DynamicSql', position='Body'),
  endTime: string(name='EndTime', description='The end time of querying the SQL execution plan.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  planUnionHash?: string(name='PlanUnionHash', position='Body'),
  returnBriefInfo?: boolean(name='ReturnBriefInfo', position='Body'),
  sqlId: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of querying the SQL execution plan.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeOasSQLPlansResponseBody = {
  data?: [ 
    {
      avgCpuTime?: double(name='AvgCpuTime', description='Average CPU time (in milliseconds) during the execution period.', example='1875.34'),
      bounded?: boolean(name='Bounded', description='Whether to bind the execution plan.', example='false'),
      executions?: long(name='Executions', description='Execution count.', example='1'),
      firstLoadTime?: string(name='FirstLoadTime', description='First loading time.', example='2023-04-12T04:46:38Z'),
      hitDiagnosis?: boolean(name='HitDiagnosis', description='Whether to hit the diagnosis.', example='false'),
      hitPercentage?: double(name='HitPercentage', description='Hit rate.', example='100.0'),
      mergedVersion?: long(name='MergedVersion', description='Merge version.', example='513'),
      outlineId?: string(name='OutlineId'),
      outlineStatus?: string(name='OutlineStatus'),
      planExplain?: {
        planJsonString?: string(name='PlanJsonString', description='JSON string of the SQL execution plan.', example='{\\"RootOperations\\":[{\\"Children\\'),
      }(name='PlanExplain', description='Execution plan.'),
      planHash?: string(name='PlanHash', description='The internal identifier of the SQL execution plan in the diagnostic system.', example='1758****24913166****'),
      planType?: string(name='PlanType', description='Execution plan type.', example='LOCAL'),
      planUnionHash?: string(name='PlanUnionHash', description='The internal unique identifier of the SQL execution plan in the diagnostic system.', example='"52c7c53****53e61b3f7586b17****ad"'),
      plans?: [ 
        {
          avgApplicationWaitTime?: double(name='AvgApplicationWaitTime', description='Average Application event waiting time (in milliseconds) during the execution period.', example='0.0'),
          avgBufferGets?: double(name='AvgBufferGets', description='Average cache read count during the execution period.', example='30137.03'),
          avgConcurrencyWaitTime?: double(name='AvgConcurrencyWaitTime', description='Average Concurrency event waiting time (in milliseconds) during the execution period.', example='0.0'),
          avgCpuTime?: double(name='AvgCpuTime', description='Average CPU time (in milliseconds) during the execution period.', example='1875.34'),
          avgDiskReads?: double(name='AvgDiskReads', description='The average physical read count during the execution period.', example='0.0'),
          avgDiskWrites?: double(name='AvgDiskWrites', description='The average physical write count during the execution period.', example='0.0'),
          avgElapsedTime?: double(name='AvgElapsedTime', description='Average interval waiting time (in milliseconds) during the execution period.', example='1876.78'),
          avgRowProcessed?: double(name='AvgRowProcessed', description='Average row processing waiting time (in milliseconds) during the execution period.', example='1.0'),
          avgUserIoWaitTime?: double(name='AvgUserIoWaitTime', description='Average UserIo event waiting time (in milliseconds) during the execution period.', example='0.0'),
          collectTimeUs?: long(name='CollectTimeUs', description='Collection time.', example='1684368****00000'),
          delayedLargeQueryPercentage?: double(name='DelayedLargeQueryPercentage', description='Percentage of delayed long-running queries.', example='0.0'),
          execPs?: double(name='ExecPs', description='The average execution count per second during the execution period.', example='0.31'),
          executions?: long(name='Executions', description='The total number of executions during the execution period.', example='1'),
          firstLoadTime?: string(name='FirstLoadTime', description='First time to load the plan.', example='2023-04-12T04:46:38Z'),
          firstLoadTimeUs?: long(name='FirstLoadTimeUs', description='First loading time.', example='1684****03289441'),
          hitDiagnosis?: boolean(name='HitDiagnosis', description='Whether to hit the diagnosis.', example='false'),
          hitPercentage?: double(name='HitPercentage', description='Hit rate.', example='100.0'),
          largeQueryPercentage?: double(name='LargeQueryPercentage', description='Percentage of completed long-running queries.', example='0.0'),
          mergedVersion?: long(name='MergedVersion', description='Merge version.', example='513'),
          obDbId?: long(name='ObDbId', description='Database ID.', example='11006****828'),
          obServerId?: long(name='ObServerId', description='Server ID.', example='2'),
          outlineData?: string(name='OutlineData', description='The outline_data parameter of the SQL execution plan.', example='/*+ BEGIN_OUTLINE_DATA INDEX(@\\"SEL$1\\'),
          outlineId?: long(name='OutlineId', description='Outline ID.', example='-1'),
          planHash?: string(name='PlanHash', description='The internal identifier of the SQL execution plan in the diagnostic system.', example='-86290582****886880'),
          planId?: long(name='PlanId', description='The ID of the plan.', example='590****'),
          planSize?: long(name='PlanSize', description='Plan size.', example='10****'),
          planType?: string(name='PlanType', description='Plan type, including LOCAL, REMOTE, DIST.', example='LOCAL'),
          planUnionHash?: string(name='PlanUnionHash', description='The internal unique identifier of the SQL execution plan in the diagnostic system.', example='"52c7c53****53e61b3f7586b17****ad"'),
          schemaVersion?: long(name='SchemaVersion', description='Schema version.', example='16838****3550464'),
          server?: string(name='Server', description='The server where the SQL is executed.', example='i-bp1db1a9us038****jio'),
          serverId?: long(name='ServerId', description='The ID of the backend server instance.', example='2'),
          sqlId?: string(name='SqlId'),
          tableScan?: boolean(name='TableScan', description='Whether a full table scan is performed.', example='false'),
          timeoutPercentage?: double(name='TimeoutPercentage', description='Percentage of timeouts.', example='0.0'),
          uid?: string(name='Uid', description='The unique identifier of the plan.', example='AAAAAAAAAAI****AAFoT2QAF--7W****'),
        }
      ](name='Plans', description='The list of the execution plan.'),
      querySql?: string(name='QuerySql', description='The SQL for the query.', example='"select 1 from t"'),
      tableScan?: boolean(name='TableScan'),
    }
  ](name='Data', description='The list of SQL execution plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeOasSQLPlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOasSQLPlansResponseBody(name='body'),
}

async function describeOasSQLPlans(request: DescribeOasSQLPlansRequest): DescribeOasSQLPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOasSQLPlans', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOasSlowSQLListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response.', example='zh-CN', position='Body'),
  dbName?: string(name='DbName', description='The name of the database.', example='test_db', position='Body'),
  dynamicSql?: boolean(name='DynamicSql', position='Body'),
  endTime: string(name='EndTime', description='The end time of querying slow SQL historical parameters.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  filterCondition?: string(name='FilterCondition', description='All parameters are referenced by the symbol @. For a list of available parameters, refer to the returned parameters in [Query performance indicators of an SQL statement](https://en.oceanbase.com/docs/community-ocp-en-10000000000840290).', example='@avgCpuTime > 20 and @executions > 100', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  mergeDynamicSql?: boolean(name='MergeDynamicSql', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP of the database node.', example='i-bp18qljorblo8es*****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParam?: string(name='SearchParam', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sqlId?: string(name='SqlId', description='SQL ID, the unique identifier of the SQL.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  sqlTextLength?: long(name='SqlTextLength', description='Max length of the returned SQL text.', example='65535', position='Body'),
  startTime: string(name='StartTime', description='The start time of querying slow SQL historical parameters.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeOasSlowSQLListResponseBody = {
  data?: [ 
    {
      avgAffectedRows?: double(name='AvgAffectedRows', description='Average updated rows during the execution period.', example='9978.75'),
      avgApplicationWaitTime?: double(name='AvgApplicationWaitTime', description='Average Application event wait time (in milliseconds) during the client waiting period.', example='0.0'),
      avgBlockCacheHit?: double(name='AvgBlockCacheHit', description='Average BlockCache hit count during the execution period.', example='0.0'),
      avgBlockIndexCacheHit?: double(name='AvgBlockIndexCacheHit', description='Average BlockIndexCache hit count during the execution period.', example='0.0'),
      avgBloomFilterCacheHit?: double(name='AvgBloomFilterCacheHit', description='Average BloomFilterCache hit count during the execution period.', example='0.0'),
      avgConcurrencyWaitTime?: double(name='AvgConcurrencyWaitTime', description='Average Concurrency event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgCpuTime?: double(name='AvgCpuTime', description='Average CPU time (in milliseconds) during the execution period.', example='1875.34'),
      avgDbTime?: double(name='AvgDbTime'),
      avgDecodeTime?: double(name='AvgDecodeTime', description='Average syntax parsing time (in milliseconds) during the execution period.', example='0.0'),
      avgDiskReads?: double(name='AvgDiskReads', description='Average physical read count during the execution period.', example='0.0'),
      avgElapsedTime?: double(name='AvgElapsedTime', description='Average response time (in milliseconds) during the execution period.', example='1876.78'),
      avgExecuteTime?: double(name='AvgExecuteTime', description='Average plan execution time (in milliseconds) during the execution period.', example='1895.7'),
      avgExecutorRpcCount?: double(name='AvgExecutorRpcCount', description='Average number of RPC requests executed during the execution period.', example='0.0'),
      avgExpectedWorkerCount?: double(name='AvgExpectedWorkerCount', description='Average degree of parallelism during the execution period.', example='3'),
      avgGetPlanTime?: double(name='AvgGetPlanTime', description='Average plan generation time (in milliseconds) during the execution period.', example='0.0'),
      avgLogicalReads?: double(name='AvgLogicalReads', description='Average logical reads of the SQL during the execution period.', example='0.0'),
      avgMemstoreReadRows?: double(name='AvgMemstoreReadRows', description='Strong consistent transaction percentage during the execution period.', example='0.0'),
      avgNetTime?: double(name='AvgNetTime', description='Average network transmission time (in milliseconds) during the execution period.', example='0.0'),
      avgNetWaitTime?: double(name='AvgNetWaitTime', description='Average network enqueue time (in milliseconds) during the network waiting period.', example='0.0'),
      avgPartitionCount?: double(name='AvgPartitionCount', description='Average number of partition accessed during the execution period.', example='1.0'),
      avgQueueTime?: double(name='AvgQueueTime', description='Average queueing time (in milliseconds) during the execution period.', example='0.01'),
      avgReturnRows?: double(name='AvgReturnRows', description='Average number of rows returned during the execution period.', example='0.0'),
      avgRowCacheHit?: double(name='AvgRowCacheHit', description='Average RowCache hit count during the execution period.', example='0.0'),
      avgRpcCount?: double(name='AvgRpcCount', description='Average number of RPC sent during the execution.', example='8.0'),
      avgScheduleTime?: double(name='AvgScheduleTime', description='Average Schedule event wait time (in milliseconds) during the scheduling period.', example='0.0'),
      avgSsstoreReadRows?: double(name='AvgSsstoreReadRows', description='Eventually consistent transaction percentage during the execution period.', example='0.0'),
      avgUsedWorkerCount?: double(name='AvgUsedWorkerCount', description='Average number of threads used of the SQL during the execution period.', example='3'),
      avgUserIoWaitTime?: double(name='AvgUserIoWaitTime', description='Average UserIO event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgWaitCount?: double(name='AvgWaitCount', description='Average number of waits during the execution period.', example='0.0'),
      avgWaitTime?: double(name='AvgWaitTime', description='Average wait time (in milliseconds) during the execution period.', example='1.42'),
      clientIp?: string(name='ClientIp', description='Client IP.', example='1*2.***.1*3.***'),
      dbName?: string(name='DbName', description='The name of the database.', example='test_db'),
      distPlanPercentage?: double(name='DistPlanPercentage', description='Distributed plan percentage during the execution period.', example='100.0'),
      dynamicSql?: boolean(name='DynamicSql'),
      execPs?: double(name='ExecPs', description='Average execution count per second during the execution period.', example='0.31'),
      executions?: double(name='Executions', description='Total number of executions during the execution period.', example='1'),
      failCount?: double(name='FailCount', description='Average number of partition accessed during the execution period.', example='0'),
      failPercentage?: double(name='FailPercentage', description='Error percentage during the execution period.', example='0.0'),
      inner?: boolean(name='Inner', description='Whether an internal SQL.', example='false'),
      localPlanPercentage?: double(name='LocalPlanPercentage', description='Local plan percentage during the execution period.', example='0.0'),
      maxAffectedRows?: double(name='MaxAffectedRows', description='Max affected rows during the execution period.', example='10000.0'),
      maxApplicationWaitTime?: double(name='MaxApplicationWaitTime', description='Max Application event wait time (in milliseconds) during the execution period', example='0.0'),
      maxConcurrencyWaitTime?: double(name='MaxConcurrencyWaitTime', description='Max Concurrency event wait time (in milliseconds) during the execution period', example='0.0'),
      maxCpuTime?: double(name='MaxCpuTime', description='Max CPU time.', example='257.967'),
      maxDiskReads?: double(name='MaxDiskReads', description='Max physical read count during the execution period.', example='0.0'),
      maxElapsedTime?: double(name='MaxElapsedTime', description='Max response time during the execution period.', example='260.044'),
      maxReturnRows?: double(name='MaxReturnRows', description='Max returned rows during the execution period.', example='0.0'),
      maxUserIoWaitTime?: double(name='MaxUserIoWaitTime', description='Max UserIO event wait time (in milliseconds) during the execution period.', example='0.0'),
      maxWaitTime?: double(name='MaxWaitTime', description='Max wait time (in milliseconds) during the execution period.', example='3.4'),
      missPlanPercentage?: double(name='MissPlanPercentage', description='Plan hit rage during the execution period.', example='0.0'),
      missPlans?: double(name='MissPlans', description='Missed hit count of the execution plan during the execution period.', example='0'),
      remotePlanPercentage?: double(name='RemotePlanPercentage', description='Remote plan percentage during the execution period.', example='0.0'),
      remotePlans?: double(name='RemotePlans', description='Remote execution count during the execution period.', example='0'),
      retCode4012Count?: long(name='RetCode4012Count', description='Number of occurrences of code 4012 during the execution period.', example='0'),
      retCode4013Count?: long(name='RetCode4013Count', description='Number of occurrences of code 4013 during the execution period.', example='0'),
      retCode5001Count?: double(name='RetCode5001Count', description='Number of occurrences of code 5001 during the execution period.', example='0'),
      retCode5024Count?: double(name='RetCode5024Count', description='Number of occurrences of code 5024 during the execution period.', example='0'),
      retCode5167Count?: double(name='RetCode5167Count', description='Number of occurrences of code 5167 during the execution period.', example='0'),
      retCode5217Count?: double(name='RetCode5217Count', description='Number of occurrences of code 5217 during the execution period.', example='0'),
      retCode6002Count?: double(name='RetCode6002Count', description='Number of occurrences of code 6002 during the execution period.', example='0'),
      retryCount?: double(name='RetryCount', description='Total number of retries during the execution period.', example='5'),
      rpcCount?: double(name='RpcCount', description='RPC count during the execution period.', example='0'),
      server?: string(name='Server', description='The server where the SQL is executed.', example='i-bp1db1a**s038**mej**'),
      serverIp?: string(name='ServerIp', description='The IP address of the server.', example='i-bp1db1a**s038**mej**'),
      serverPort?: long(name='ServerPort', description='The server port where the SQL is executed.', example='10110'),
      sqlId?: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      sqlList?: [ 
        {
          avgAffectedRows?: double(name='AvgAffectedRows'),
          avgApplicationWaitTime?: double(name='AvgApplicationWaitTime'),
          avgBlockCacheHit?: double(name='AvgBlockCacheHit'),
          avgBlockIndexCacheHit?: double(name='AvgBlockIndexCacheHit'),
          avgBloomFilterCacheHit?: double(name='AvgBloomFilterCacheHit'),
          avgConcurrencyWaitTime?: double(name='AvgConcurrencyWaitTime'),
          avgCpuTime?: double(name='AvgCpuTime'),
          avgDbTime?: double(name='AvgDbTime'),
          avgDecodeTime?: double(name='AvgDecodeTime'),
          avgDiskReads?: double(name='AvgDiskReads'),
          avgElapsedTime?: double(name='AvgElapsedTime'),
          avgExecuteTime?: double(name='AvgExecuteTime'),
          avgExecutorRpcCount?: double(name='AvgExecutorRpcCount'),
          avgExpectedWorkerCount?: double(name='AvgExpectedWorkerCount'),
          avgGetPlanTime?: double(name='AvgGetPlanTime'),
          avgLogicalReads?: double(name='AvgLogicalReads'),
          avgMemstoreReadRows?: double(name='AvgMemstoreReadRows'),
          avgNetTime?: double(name='AvgNetTime'),
          avgNetWaitTime?: double(name='AvgNetWaitTime'),
          avgPartitionCount?: double(name='AvgPartitionCount'),
          avgQueueTime?: double(name='AvgQueueTime'),
          avgReturnRows?: double(name='AvgReturnRows'),
          avgRowCacheHit?: double(name='AvgRowCacheHit'),
          avgRpcCount?: double(name='AvgRpcCount'),
          avgScheduleTime?: double(name='AvgScheduleTime'),
          avgSsstoreReadRows?: double(name='AvgSsstoreReadRows'),
          avgUsedWorkerCount?: double(name='AvgUsedWorkerCount'),
          avgUserIoWaitTime?: double(name='AvgUserIoWaitTime'),
          avgWaitCount?: double(name='AvgWaitCount'),
          avgWaitTime?: double(name='AvgWaitTime'),
          clientIp?: string(name='ClientIp'),
          dbName?: string(name='DbName'),
          distPlanPercentage?: double(name='DistPlanPercentage'),
          execPs?: double(name='ExecPs'),
          executions?: double(name='Executions'),
          failCount?: double(name='FailCount'),
          failPercentage?: double(name='FailPercentage'),
          inner?: boolean(name='Inner'),
          localPlanPercentage?: double(name='LocalPlanPercentage'),
          maxAffectedRows?: double(name='MaxAffectedRows'),
          maxApplicationWaitTime?: double(name='MaxApplicationWaitTime'),
          maxConcurrencyWaitTime?: double(name='MaxConcurrencyWaitTime'),
          maxCpuTime?: double(name='MaxCpuTime'),
          maxDiskReads?: double(name='MaxDiskReads'),
          maxElapsedTime?: double(name='MaxElapsedTime'),
          maxReturnRows?: double(name='MaxReturnRows'),
          maxUserIoWaitTime?: double(name='MaxUserIoWaitTime'),
          maxWaitTime?: double(name='MaxWaitTime'),
          missPlanPercentage?: double(name='MissPlanPercentage'),
          missPlans?: double(name='MissPlans'),
          remotePlanPercentage?: double(name='RemotePlanPercentage'),
          remotePlans?: double(name='RemotePlans'),
          retCode4012Count?: long(name='RetCode4012Count'),
          retCode4013Count?: long(name='RetCode4013Count'),
          retCode5001Count?: long(name='RetCode5001Count'),
          retCode5024Count?: long(name='RetCode5024Count'),
          retCode5167Count?: long(name='RetCode5167Count'),
          retCode5217Count?: long(name='RetCode5217Count'),
          retCode6002Count?: long(name='RetCode6002Count'),
          retryCount?: double(name='RetryCount'),
          rpcCount?: double(name='RpcCount'),
          server?: string(name='Server'),
          serverIp?: string(name='ServerIp'),
          serverPort?: long(name='ServerPort'),
          sqlId?: string(name='SqlId'),
          sqlTextShort?: string(name='SqlTextShort'),
          sqlType?: string(name='SqlType'),
          strongConsistencyPercentage?: double(name='StrongConsistencyPercentage'),
          sumDbTime?: double(name='SumDbTime'),
          sumElapsedTime?: double(name='SumElapsedTime'),
          sumLogicalReads?: double(name='SumLogicalReads'),
          sumWaitTime?: double(name='SumWaitTime'),
          tableScanPercentage?: double(name='TableScanPercentage'),
          totalWaitTime?: double(name='TotalWaitTime'),
          userName?: string(name='UserName'),
          waitEvent?: string(name='WaitEvent'),
          weakConsistencyPercentage?: double(name='WeakConsistencyPercentage'),
        }
      ](name='SqlList'),
      sqlTextShort?: string(name='SqlTextShort', description='SQL text (the first 100 characters).', example='select a from b where'),
      sqlType?: string(name='SqlType', description='SQL type.', example='select'),
      strongConsistencyPercentage?: double(name='StrongConsistencyPercentage', description='Strong consistent transaction percentage during the execution period.', example='100.0'),
      sumDbTime?: double(name='SumDbTime'),
      sumElapsedTime?: double(name='SumElapsedTime', description='Total response time (in milliseconds) during the execution period.', example='11452126.36'),
      sumLogicalReads?: double(name='SumLogicalReads', description='Total logical reads of the SQL during the execution period.', example='0.0'),
      sumWaitTime?: double(name='SumWaitTime', description='The total wait time (in milliseconds) during the internal waiting period.', example='9421.73'),
      tableScanPercentage?: double(name='TableScanPercentage', description='Table scan percentage during the execution period.', example='0.0'),
      totalWaitTime?: double(name='TotalWaitTime', description='Total wait time during the execution period.', example='10.966'),
      userName?: string(name='UserName', description='Username.', example='test_user'),
      waitEvent?: string(name='WaitEvent', description='Longest wait event during the execution period.', example='none'),
      weakConsistencyPercentage?: double(name='WeakConsistencyPercentage', description='Eventually consistent transaction percentage during the execution period.', example='0.0'),
    }
  ](name='Data', description='The list of slow queries.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeOasSlowSQLListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOasSlowSQLListResponseBody(name='body'),
}

async function describeOasSlowSQLList(request: DescribeOasSlowSQLListRequest): DescribeOasSlowSQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOasSlowSQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOasTopSQLListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh-CN', position='Body'),
  dbName?: string(name='DbName', description='The name of the database.', example='test_db', position='Body'),
  dynamicSql?: boolean(name='DynamicSql', position='Body'),
  endTime: string(name='EndTime', description='The end time of querying the TOPSQL parameter.
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  filterCondition?: string(name='FilterCondition', description='All parameters are referenced by the symbol @. For a list of available parameters, refer to the returned parameters in [Query performance indicators of an SQL statement](https://en.oceanbase.com/docs/community-ocp-en-10000000000840290).', example='@avgCpuTime > 20 and @executions > 100', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  mergeDynamicSql?: boolean(name='MergeDynamicSql', position='Body'),
  nodeIp?: string(name='NodeIp', description='The node IP.', example='i-bp18l4****str4uk03', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParam?: string(name='SearchParam', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sqlId?: string(name='SqlId', description='SQL ID.
> When the SQL ID is provided, the system collects all the request data for the target SQL ID. When the SQL ID is empty, the system collects all the request data for the entire database instance.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  sqlTextLength?: long(name='SqlTextLength', description='Max length of the returned SQL text.', example='65535', position='Body'),
  startTime: string(name='StartTime', description='The start time of querying the TOPSQL parameter.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeOasTopSQLListResponseBody = {
  data?: [ 
    {
      avgAffectedRows?: double(name='AvgAffectedRows', description='Average updated rows during the execution period.', example='9978.75'),
      avgApplicationWaitTime?: double(name='AvgApplicationWaitTime', description='Average Application event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgBlockCacheHit?: double(name='AvgBlockCacheHit', description='Average BlockCache hit count during the execution period.', example='0.0'),
      avgBlockIndexCacheHit?: double(name='AvgBlockIndexCacheHit', description='Average BlockIndexCache hit count during the execution period.', example='0.0'),
      avgBloomFilterCacheHit?: double(name='AvgBloomFilterCacheHit', description='Average BloomFilterCache hit count during the execution period.', example='0.0'),
      avgConcurrencyWaitTime?: double(name='AvgConcurrencyWaitTime', description='Average Concurrency event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgCpuTime?: double(name='AvgCpuTime', description='Average CPU time (in milliseconds) during the execution period.', example='1875.34'),
      avgDbTime?: double(name='AvgDbTime'),
      avgDecodeTime?: double(name='AvgDecodeTime', description='Average syntax parsing time (in milliseconds) during the execution period.', example='0.0'),
      avgDiskReads?: double(name='AvgDiskReads', description='Average physical read count during the execution period.', example='0.0'),
      avgElapsedTime?: double(name='AvgElapsedTime', description='Average response time (in milliseconds) during the execution period.', example='903.29'),
      avgExecuteTime?: double(name='AvgExecuteTime', description='Average plan execution time (in milliseconds) during the execution period.', example='1895.7'),
      avgExecutorRpcCount?: double(name='AvgExecutorRpcCount', description='Average number of RPC requests executed during the execution period.', example='0.0'),
      avgExpectedWorkerCount?: double(name='AvgExpectedWorkerCount', description='Average degree of parallelism during the execution period.', example='3'),
      avgGetPlanTime?: double(name='AvgGetPlanTime', description='Average plan generation time (in milliseconds) during the execution period.', example='0.0'),
      avgLogicalReads?: double(name='AvgLogicalReads', description='Average logical reads of the SQL during the execution period.', example='0.0'),
      avgMemstoreReadRows?: double(name='AvgMemstoreReadRows', description='Strong consistent transaction percentage during the execution period.', example='0.0'),
      avgNetTime?: double(name='AvgNetTime', description='Average network transmission time (in milliseconds) during the execution period.', example='0.0'),
      avgNetWaitTime?: double(name='AvgNetWaitTime', description='Average network enqueue time (in milliseconds) during the execution period.', example='0.0'),
      avgPartitionCount?: double(name='AvgPartitionCount', description='Average number of partition accessed during the execution period.', example='1.0'),
      avgQueueTime?: double(name='AvgQueueTime', description='Average queueing time (in milliseconds) during the execution period.', example='0.01'),
      avgReturnRows?: double(name='AvgReturnRows', description='Average returned rows during the execution period.', example='0.0'),
      avgRowCacheHit?: double(name='AvgRowCacheHit', description='Average RowCache hit count during the execution period.', example='0.0'),
      avgRpcCount?: double(name='AvgRpcCount', description='Average count of RPC sent during the execution period.', example='8.0'),
      avgScheduleTime?: double(name='AvgScheduleTime', description='Average Schedule event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgSsstoreReadRows?: double(name='AvgSsstoreReadRows', description='Eventually consistent transaction percentage during the execution period.', example='0.0'),
      avgUsedWorkerCount?: double(name='AvgUsedWorkerCount', description='Average number of threads used of the SQL during the execution period.', example='3'),
      avgUserIoWaitTime?: double(name='AvgUserIoWaitTime', description='Average UserIO event wait time (in milliseconds) during the execution period.', example='0.0'),
      avgWaitCount?: double(name='AvgWaitCount', description='Average wait count during the execution period.', example='0.0'),
      avgWaitTime?: double(name='AvgWaitTime', description='Average wait time (in milliseconds) during the execution period.', example='1442.49'),
      clientIp?: string(name='ClientIp', description='Client IP.', example='i-bp1db****38uemejio'),
      cpuPercentage?: double(name='CpuPercentage', description='CPU percentage.', example='100.0'),
      dbName?: string(name='DbName', description='The name of the database.', example='test_db'),
      distPlanPercentage?: double(name='DistPlanPercentage', description='Distributed plan percentage during the execution period.', example='100.0'),
      dynamicSql?: boolean(name='DynamicSql'),
      execPs?: double(name='ExecPs', description='Average execution count per second during the execution period.', example='0.31'),
      executions?: long(name='Executions', description='Total number of executions during the execution period.', example='1'),
      failCount?: double(name='FailCount', description='Average number of partition accessed during the execution period.', example='0'),
      failPercentage?: double(name='FailPercentage', description='Error percentage during the execution period.', example='0.0'),
      inner?: boolean(name='Inner', description='Whether a internal SQL.', example='false'),
      lastFailCode?: long(name='LastFailCode'),
      localPlanPercentage?: double(name='LocalPlanPercentage', description='Local plan percentage during the execution period.', example='0.0'),
      maxAffectedRows?: double(name='MaxAffectedRows', description='Max affected rows during the execution period.', example='10000.0'),
      maxApplicationWaitTime?: double(name='MaxApplicationWaitTime', description='Max Application event wait time (in milliseconds) during the execution period.', example='0.0'),
      maxConcurrencyWaitTime?: double(name='MaxConcurrencyWaitTime', description='Max Concurrency event wait time (in milliseconds) during the execution period.', example='0.0'),
      maxCpuTime?: double(name='MaxCpuTime', description='Max CPU time (in milliseconds).', example='13641.9'),
      maxDiskReads?: double(name='MaxDiskReads', description='Max physical read count during the execution period.', example='0.0'),
      maxElapsedTime?: double(name='MaxElapsedTime', description='Max response time during the execution period.', example='13643.3'),
      maxReturnRows?: double(name='MaxReturnRows', description='Max returned rows during the execution period.', example='0.0'),
      maxUserIoWaitTime?: double(name='MaxUserIoWaitTime', description='Max UserIO event wait time (in milliseconds) during the execution period.', example='0.0'),
      maxWaitTime?: double(name='MaxWaitTime', description='Max wait time (in milliseconds) during the execution period.', example='3.4'),
      missPlanPercentage?: double(name='MissPlanPercentage', description='Plan hit rage during the execution period.', example='0.0'),
      missPlans?: double(name='MissPlans', description='Missed hit count of the execution plan during the execution period.', example='0'),
      remotePlanPercentage?: double(name='RemotePlanPercentage', description='Remote plan percentage during the execution period.', example='0.0'),
      remotePlans?: double(name='RemotePlans', description='Remote execution count during the execution period.', example='0'),
      retCode4012Count?: long(name='RetCode4012Count', description='Number of occurrences of the code 4012 during the execution period.', example='0'),
      retCode4013Count?: long(name='RetCode4013Count', description='Number of occurrences of the code 4013 during the execution period.', example='0'),
      retCode5001Count?: long(name='RetCode5001Count', description='Number of occurrences of the code 5001 during the execution period.', example='0'),
      retCode5024Count?: long(name='RetCode5024Count', description='Number of occurrences of the code 5024 during the execution period.', example='0'),
      retCode5167Count?: long(name='RetCode5167Count', description='Number of occurrences of the code 5167 during the execution period.', example='0'),
      retCode5217Count?: long(name='RetCode5217Count', description='Number of occurrences of the code 5217 during the execution period.', example='0'),
      retCode6002Count?: long(name='RetCode6002Count', description='Number of occurrences of the code 6002 during the execution period.', example='0'),
      retryCount?: double(name='RetryCount', description='Total retry count during the execution period.', example='0'),
      rpcCount?: double(name='RpcCount', description='RPC count during the execution period.', example='0.0'),
      server?: string(name='Server', description='The server where the SQL is executed.', example='i-bp1db1****8uemejio'),
      serverIp?: string(name='ServerIp', description='The server IP where the SQL is executed.', example='i-bp1db1****8uemejio'),
      serverPort?: long(name='ServerPort', description='The server port where the SQL is executed.', example='389'),
      sqlId?: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      sqlList?: [ 
        {
          avgAffectedRows?: double(name='AvgAffectedRows'),
          avgApplicationWaitTime?: double(name='AvgApplicationWaitTime'),
          avgBlockCacheHit?: double(name='AvgBlockCacheHit'),
          avgBlockIndexCacheHit?: double(name='AvgBlockIndexCacheHit'),
          avgBloomFilterCacheHit?: double(name='AvgBloomFilterCacheHit'),
          avgConcurrencyWaitTime?: double(name='AvgConcurrencyWaitTime'),
          avgCpuTime?: double(name='AvgCpuTime'),
          avgDbTime?: double(name='AvgDbTime'),
          avgDecodeTime?: double(name='AvgDecodeTime'),
          avgDiskReads?: double(name='AvgDiskReads'),
          avgElapsedTime?: double(name='AvgElapsedTime'),
          avgExecuteTime?: double(name='AvgExecuteTime'),
          avgExecutorRpcCount?: double(name='AvgExecutorRpcCount'),
          avgExpectedWorkerCount?: double(name='AvgExpectedWorkerCount'),
          avgGetPlanTime?: double(name='AvgGetPlanTime'),
          avgLogicalReads?: double(name='AvgLogicalReads'),
          avgMemstoreReadRows?: double(name='AvgMemstoreReadRows'),
          avgNetTime?: double(name='AvgNetTime'),
          avgNetWaitTime?: double(name='AvgNetWaitTime'),
          avgPartitionCount?: double(name='AvgPartitionCount'),
          avgQueueTime?: double(name='AvgQueueTime'),
          avgReturnRows?: double(name='AvgReturnRows'),
          avgRowCacheHit?: double(name='AvgRowCacheHit'),
          avgRpcCount?: double(name='AvgRpcCount'),
          avgScheduleTime?: double(name='AvgScheduleTime'),
          avgSsstoreReadRows?: double(name='AvgSsstoreReadRows'),
          avgUsedWorkerCount?: double(name='AvgUsedWorkerCount'),
          avgUserIoWaitTime?: double(name='AvgUserIoWaitTime'),
          avgWaitCount?: double(name='AvgWaitCount'),
          avgWaitTime?: double(name='AvgWaitTime'),
          clientIp?: string(name='ClientIp'),
          cpuPercentage?: double(name='CpuPercentage'),
          dbName?: string(name='DbName'),
          distPlanPercentage?: double(name='DistPlanPercentage'),
          execPs?: double(name='ExecPs'),
          executions?: long(name='Executions'),
          failCount?: double(name='FailCount'),
          failPercentage?: double(name='FailPercentage'),
          inner?: boolean(name='Inner'),
          localPlanPercentage?: double(name='LocalPlanPercentage'),
          maxAffectedRows?: double(name='MaxAffectedRows'),
          maxApplicationWaitTime?: double(name='MaxApplicationWaitTime'),
          maxConcurrencyWaitTime?: double(name='MaxConcurrencyWaitTime'),
          maxCpuTime?: double(name='MaxCpuTime'),
          maxDiskReads?: double(name='MaxDiskReads'),
          maxElapsedTime?: double(name='MaxElapsedTime'),
          maxReturnRows?: double(name='MaxReturnRows'),
          maxUserIoWaitTime?: double(name='MaxUserIoWaitTime'),
          maxWaitTime?: double(name='MaxWaitTime'),
          missPlanPercentage?: double(name='MissPlanPercentage'),
          missPlans?: double(name='MissPlans'),
          remotePlanPercentage?: double(name='RemotePlanPercentage'),
          remotePlans?: double(name='RemotePlans'),
          retCode4012Count?: long(name='RetCode4012Count'),
          retCode4013Count?: long(name='RetCode4013Count'),
          retCode5001Count?: long(name='RetCode5001Count'),
          retCode5024Count?: long(name='RetCode5024Count'),
          retCode5167Count?: long(name='RetCode5167Count'),
          retCode5217Count?: long(name='RetCode5217Count'),
          retCode6002Count?: long(name='RetCode6002Count'),
          retryCount?: double(name='RetryCount'),
          rpcCount?: double(name='RpcCount'),
          server?: string(name='Server'),
          serverIp?: string(name='ServerIp'),
          serverPort?: long(name='ServerPort'),
          sqlId?: string(name='SqlId'),
          sqlTextShort?: string(name='SqlTextShort'),
          sqlType?: string(name='SqlType'),
          strongConsistencyPercentage?: double(name='StrongConsistencyPercentage'),
          sumDbTime?: double(name='SumDbTime'),
          sumElapsedTime?: double(name='SumElapsedTime'),
          sumLogicalReads?: double(name='SumLogicalReads'),
          sumWaitTime?: double(name='SumWaitTime'),
          tableScanPercentage?: double(name='TableScanPercentage'),
          totalWaitTime?: double(name='TotalWaitTime'),
          userName?: string(name='UserName'),
          waitEvent?: string(name='WaitEvent'),
          weakConsistencyPercentage?: double(name='WeakConsistencyPercentage'),
        }
      ](name='SqlList'),
      sqlTextShort?: string(name='SqlTextShort', description='SQL text (the first 100 characters).', example='delete /*+ XXX PARALLEL(4) */ fro'),
      sqlType?: string(name='SqlType', description='SQL type.', example='select'),
      strongConsistencyPercentage?: double(name='StrongConsistencyPercentage', description='Strong consistent transaction percentage during the execution period.', example='100.0'),
      sumDbTime?: double(name='SumDbTime'),
      sumElapsedTime?: double(name='SumElapsedTime', description='Total response time (in milliseconds) during the execution period.', example='11452126.36'),
      sumLogicalReads?: double(name='SumLogicalReads', description='Total logical reads.', example='0.0'),
      sumWaitTime?: double(name='SumWaitTime', description='Total wait time (in milliseconds) during the execution period.', example='9421.73'),
      tableScanPercentage?: double(name='TableScanPercentage', description='Table scan percentage during the execution period.', example='0.0'),
      totalWaitTime?: double(name='TotalWaitTime', description='Total wait time (in milliseconds) during the execution period.', example='10.966'),
      userName?: string(name='UserName', description='Username.', example='test_user'),
      waitEvent?: string(name='WaitEvent', description='Longest wait event during the execution period.', example='none'),
      weakConsistencyPercentage?: double(name='WeakConsistencyPercentage', description='Eventually consistent transaction percentage during the execution period.', example='0.0'),
    }
  ](name='Data', description='The list of Top SQL.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeOasTopSQLListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOasTopSQLListResponseBody(name='body'),
}

async function describeOasTopSQLList(request: DescribeOasTopSQLListRequest): DescribeOasTopSQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOasTopSQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOutlineBindingRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  databaseName: string(name='DatabaseName', description='The name of the database.', example='testdb', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  isConcurrentLimit?: boolean(name='IsConcurrentLimit', description='- When the value is set to True, the throttling information in the database is queried based on the SQL ID.   
- When the value is set to False, the bound index or execution plan in the database is queried based on the SQL ID.', example='false', position='Body'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tableName: string(name='TableName', description='The name of the tenant.    
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_). It cannot be set to SYS.', example='pay_online', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeOutlineBindingResponseBody = {
  outlineBinding?: {
    bindIndex?: string(name='BindIndex', description='The bound index.', example='PRIMARY'),
    bindPlan?: string(name='BindPlan', description='The bound plan.', example='PHY_TABLE_SCAN | bmsql_order_line | 40 ******'),
    maxConcurrent?: int32(name='MaxConcurrent', description='The maximum number of concurrent tasks.', example='2'),
    outlineId?: long(name='OutlineId', description='OutlineID.', example='-1'),
    tableName?: string(name='TableName', description='表名称'),
  }(name='OutlineBinding', description='The binding information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeOutlineBindingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutlineBindingResponseBody(name='body'),
}

async function describeOutlineBinding(request: DescribeOutlineBindingRequest): DescribeOutlineBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOutlineBinding', 'POST', '/', 'json', true, 'form', request);
}

model DescribeParametersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dimension: string(name='Dimension', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='TENANT', position='Body'),
  dimensionValue?: string(name='DimensionValue', description='Alibaba Cloud CLI', example='ob2mr3oae0****', position='Body'),
  instanceId: string(name='InstanceId', description='498529', example='ob317v4uif****', position='Body'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      acceptableValue?: [ string ](name='AcceptableValue', description='DescribeParameters'),
      currentValue?: string(name='CurrentValue', description='The ID of the OceanBase cluster.', example='600'),
      defaultValue?: string(name='DefaultValue', description='```
http(s)://[Endpoint]/?Action=DescribeParameters
&InstanceId=ob317v4uif****
&Dimension=TENANT
&DimensionValue=ob2mr3oae0****
&Common request parameters
```', example='600s'),
      description?: string(name='Description', description='The description of the parameter.', example='The operation that you want to perform.   
Set the value to **DescribeParameters**.'),
      name?: string(name='Name', description='The request ID.', example='connect_timeout'),
      needReboot?: boolean(name='NeedReboot', description='The name of the parameter.', example='false'),
      readonly?: boolean(name='Readonly', description='参数是否只读'),
      rejectedValue?: [ string ](name='RejectedValue', description='{
    "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
    "Parameters": [
        {
            "Description": "The maximum delay allowed in weak-consistency reads.",
            "ValueType": "CAPACITY",
            "CurrentValue": "600",
            "NeedReboot": false,
            "Name": "connect_timeout",
            "DefaultValue": "600s",
            "RejectedValue": [
                "1s"
            ],
            "AcceptableValue": [
                "1s"
            ]
        }
    ]
}'),
      unit?: string(name='Unit', example='s'),
      valueType?: string(name='ValueType', description='The invalid value range of the parameter.    
It is an array with two string elements, which represents a range. The first element represents the minimum value and the second element represents the maximum value.', example='CAPACITY'),
    }
  ](name='Parameters', description='Indicates whether a restart is required for changes to the parameter to take effect. Valid values:   
- true: A restart is required.   
- false: A restart is not required.'),
  requestId?: string(name='RequestId', description='The return result of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParametersResponseBody(name='body'),
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', true, 'form', request);
}

model DescribeParametersHistoryRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dimension: string(name='Dimension', description='The type of the parameter.   
Valid values: CLUSTER and TENANT.', example='TENANT', position='Body'),
  dimensionValue?: string(name='DimensionValue', description='The resource ID of the parameter type.   
You can leave this parameter unspecified when you call this operation to query the modification history of cluster parameters. In the case of tenant parameters, pass the tenant ID.', example='ob2mr3oae0****', position='Body'),
  endTime: string(name='EndTime', description='The end time for the query of parameter modification history.', example='2021-09-13 15:40:43', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', minimum=1, maximum=999999, position='Body'),
  pageSize: int32(name='PageSize', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='10', minimum=1, maximum=999999, position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying the parameter modification history.', example='2021-06-13 15:40:43', position='Body'),
}

model DescribeParametersHistoryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  respond?: [ 
    {
      pageNumber?: int32(name='PageNumber', description='The number of returned entries on each page.', example='Default value: 10.'),
      parameters?: [ 
        {
          createTime?: string(name='CreateTime', description='The time when the parameter modification was initiated.', example='2021-09-14 10:57:44'),
          dimensionValue?: string(name='DimensionValue', description='The resource ID of the parameter type.    
- When you called this operation to query the modification history of cluster parameters, the value is DEFAULT_DIMENSION_VALUE.   
- When you called this operation to query the modification history of tenant parameters, the value is the tenant ID.', example='DEFAULT_DIMENSION_VALUE'),
          name?: string(name='Name', description='The name of the parameter.', example='connect_timeout'),
          newValue?: string(name='NewValue', description='The value of the parameter after the modification.', example='200'),
          oldValue?: string(name='OldValue', description='The parameter value before modification.', example='300'),
          status?: string(name='Status', description='The modification status. Valid values:    
- APPLIED: The modification was successful.   
- SCHEDULING: The modification was to be made.', example='APPLIED'),
          updateTime?: string(name='UpdateTime', description='The time when the parameter modification took effect.', example='2021-09-14 10:57:44'),
        }
      ](name='Parameters', description='The parameter modification history.'),
      totalCount?: int32(name='TotalCount', description='The number of parameter modification records.', example='2'),
    }
  ](name='Respond', description='The list of parameter modification records.'),
}

model DescribeParametersHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParametersHistoryResponseBody(name='body'),
}

async function describeParametersHistory(request: DescribeParametersHistoryRequest): DescribeParametersHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParametersHistory', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProcessStatsCompositionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  clientIp?: string(name='ClientIp', description='The IP address of the client.', example='127.*.*.*', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  serverIp?: string(name='ServerIp', description='The IP address of the server.', example='127.*.*.*', position='Body'),
  sqlText?: string(name='SqlText', description='The SQL statement. It supports LIKE clauses, and you may specify only part of the clauses in the SQL statement.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC', position='Body'),
  status?: string(name='Status', description='The state of the session.', example='ACTIVE', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****', position='Body'),
  uId?: string(name='UId', description='The user identifier (UID) of OceanBase Database.', example='139*************', position='Body'),
  users?: string(name='Users', description='The username that you use to log in to the database.', example='test1', position='Body'),
}

model DescribeProcessStatsCompositionResponseBody = {
  data?: {
    activeSessionCount?: int32(name='ActiveSessionCount'),
    allProcessList?: [ 
      {
        clientIp?: string(name='ClientIp'),
        command?: string(name='Command'),
        cpuTime?: long(name='CpuTime'),
        database?: string(name='Database'),
        executeTime?: long(name='ExecuteTime'),
        planId?: string(name='PlanId'),
        proxySessId?: string(name='ProxySessId'),
        serverIp?: string(name='ServerIp'),
        sessionId?: long(name='SessionId'),
        sqlId?: string(name='SqlId'),
        sqlText?: string(name='SqlText'),
        status?: string(name='Status'),
        tenantId?: string(name='TenantId'),
        traceId?: string(name='TraceId'),
        user?: string(name='User'),
      }
    ](name='AllProcessList'),
    idleSessionCount?: int32(name='IdleSessionCount'),
    obVersion?: string(name='ObVersion'),
    sessionStatistics?: {
      dataBaseStatistics?: [ 
        {
          activeCount?: long(name='ActiveCount'),
          metricValue?: string(name='MetricValue'),
          totalCount?: long(name='TotalCount'),
          type?: string(name='Type'),
        }
      ](name='DataBaseStatistics'),
      sourceStatistics?: [ 
        {
          activeCount?: long(name='ActiveCount'),
          metricValue?: string(name='MetricValue'),
          totalCount?: long(name='TotalCount'),
          type?: string(name='Type'),
        }
      ](name='SourceStatistics'),
      userStatistics?: [ 
        {
          activeCount?: long(name='ActiveCount'),
          metricValue?: string(name='MetricValue'),
          totalCount?: long(name='TotalCount'),
          type?: string(name='Type'),
        }
      ](name='UserStatistics'),
    }(name='SessionStatistics'),
    totalSessionCount?: int32(name='TotalSessionCount'),
  }(name='Data', description='The return result.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeProcessStatsCompositionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProcessStatsCompositionResponseBody(name='body'),
}

async function describeProcessStatsComposition(request: DescribeProcessStatsCompositionRequest): DescribeProcessStatsCompositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessStatsComposition', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_fe****', position='Body'),
}

model DescribeProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: {
    alarmStats?: {
      alarmContent?: string(name='AlarmContent', example='null'),
      alarming?: boolean(name='Alarming', example='false'),
      openMonitor?: boolean(name='OpenMonitor', example='true'),
      recentlyTriggerCount?: int32(name='RecentlyTriggerCount', example='0'),
      ruleToRecentlyTriggerCount?: map[string]int32(name='RuleToRecentlyTriggerCount'),
      target?: string(name='Target', example='null'),
    }(name='AlarmStats'),
    commonTransferConfig?: {
      activeActive?: boolean(name='ActiveActive', example='true'),
      dataWorksBusinessName?: string(name='DataWorksBusinessName', example='null'),
      datahubTopicType?: string(name='DatahubTopicType', example='TUPLE'),
      mqPartition?: int32(name='MqPartition', example='0'),
      mqPartitionMode?: string(name='MqPartitionMode', example='ONE'),
      mqSerializerType?: string(name='MqSerializerType', example='DEFAULT'),
      rocketMqEnableMsgTrace?: boolean(name='RocketMqEnableMsgTrace', example='true'),
      rocketMqMsgTags?: string(name='RocketMqMsgTags', example='default_tag'),
      rocketMqProducerGroup?: string(name='RocketMqProducerGroup', example='OMS'),
      rocketMqSendMsgTimeout?: long(name='RocketMqSendMsgTimeout', example='null'),
      sinkStoreFormat?: string(name='SinkStoreFormat'),
      sourceStoreFormat?: string(name='SourceStoreFormat'),
      tableCategory?: string(name='TableCategory', example='ALL'),
    }(name='CommonTransferConfig'),
    destConnId?: string(name='DestConnId', example='c_deg***'),
    enableFullTransfer?: boolean(name='EnableFullTransfer', example='true'),
    enableFullVerify?: boolean(name='EnableFullVerify', example='true'),
    enableIncrTransfer?: boolean(name='EnableIncrTransfer', example='true'),
    enableIncrVerify?: boolean(name='EnableIncrVerify', example='true'),
    enableReverseIncrTransfer?: boolean(name='EnableReverseIncrTransfer', example='true'),
    enableStructTransfer?: boolean(name='EnableStructTransfer', example='true'),
    extraInfo?: {
      accessObSource?: boolean(name='AccessObSource', example='true'),
      ignoreUnsupportDdl?: boolean(name='IgnoreUnsupportDdl', example='false'),
      incrSyncTimestamp?: long(name='IncrSyncTimestamp', example='1689244596'),
      logServiceStartCheckpoint?: long(name='LogServiceStartCheckpoint', example='1689214358'),
      maxConnectorCount?: int32(name='MaxConnectorCount', example='-1'),
      monitoringIncr?: boolean(name='MonitoringIncr', example='true'),
      overwriteConfig?: boolean(name='OverwriteConfig', example='true'),
      reverseSubtopics?: [ string ](name='ReverseSubtopics'),
      runningProgress?: int32(name='RunningProgress', example='90'),
      runningStep?: string(name='RunningStep', example='PRE-CHECK'),
      sourceStoreKeptHour?: int32(name='SourceStoreKeptHour', example='24'),
      storeIncr?: boolean(name='StoreIncr', example='true'),
      subConds?: map[string][ DataExtraInfoSubCondsValue       ](name='SubConds'),
      subDbs?: map[string][ DataExtraInfoSubDbsValue       ](name='SubDbs'),
      subIds?: map[string]string(name='SubIds'),
      subtopics?: [ string ](name='Subtopics'),
      syncDelay?: long(name='SyncDelay', example='null'),
      syncDelaySampleTimestamp?: long(name='SyncDelaySampleTimestamp', example='1689214358'),
    }(name='ExtraInfo'),
    fullTransferConfig?: {
      allowDestTableNotEmpty?: boolean(name='AllowDestTableNotEmpty', example='true'),
      fullTransferSpeedMode?: string(name='FullTransferSpeedMode', example='FAST'),
      fullVerifySpeedMode?: string(name='FullVerifySpeedMode', example='FAST'),
      nonePkUkTruncateDstTable?: boolean(name='NonePkUkTruncateDstTable', example='false'),
      readWorkerNum?: int32(name='ReadWorkerNum'),
      throttleIOPS?: int32(name='ThrottleIOPS'),
      throttleRps?: int32(name='ThrottleRps'),
      writeWorkerNum?: int32(name='WriteWorkerNum'),
    }(name='FullTransferConfig'),
    gmtCreate?: string(name='GmtCreate', example='2023-07-13T06:26:15'),
    gmtFinish?: string(name='GmtFinish', example='2023-07-13T07:02:27'),
    gmtModified?: string(name='GmtModified', example='2023-07-13T06:26:15'),
    gmtStart?: string(name='GmtStart', example='2023-07-13T07:02:27'),
    id?: string(name='Id', example='np_fe****'),
    importance?: string(name='Importance', example='HIGH'),
    incrTransferConfig?: {
      enableIncrSyncStatistics?: boolean(name='EnableIncrSyncStatistics', example='true'),
      enableSequencingWithinTxn?: boolean(name='EnableSequencingWithinTxn', example='false'),
      incrSyncConcurrency?: int32(name='IncrSyncConcurrency', example='64'),
      recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
      startTimestamp?: long(name='StartTimestamp', example='1667286900'),
      storeLogKeptHour?: int32(name='StoreLogKeptHour', example='24'),
      supportDDLTypes?: [ string ](name='SupportDDLTypes'),
      throttleIOPS?: int32(name='ThrottleIOPS'),
      throttleRps?: int32(name='ThrottleRps'),
    }(name='IncrTransferConfig'),
    isMerging?: boolean(name='IsMerging', example='false'),
    isModifying?: boolean(name='IsModifying', example='false'),
    isSubProject?: boolean(name='IsSubProject', example='false'),
    labels?: [ 
      {
        id?: string(name='Id', example='l_dr****'),
        name?: string(name='Name', example='test_tag'),
      }
    ](name='Labels'),
    name?: string(name='Name', example='test'),
    owner?: string(name='Owner', example='omsefry***'),
    reverseIncrTransferConfig?: {
      enableIncrSyncStatistics?: boolean(name='EnableIncrSyncStatistics'),
      enableSequencingWithinTxn?: boolean(name='EnableSequencingWithinTxn'),
      incrSyncConcurrency?: int32(name='IncrSyncConcurrency'),
      recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
      startTimestamp?: long(name='StartTimestamp'),
      storeLogKeptHour?: int32(name='StoreLogKeptHour'),
      supportDDLTypes?: [ string ](name='SupportDDLTypes'),
      throttleIOPS?: int32(name='ThrottleIOPS'),
      throttleRps?: int32(name='ThrottleRps'),
    }(name='ReverseIncrTransferConfig'),
    sinkConnectInfo?: {
      charset?: string(name='Charset', example='utf8mb4'),
      connExtraAttributes?: any(name='ConnExtraAttributes', example='null'),
      connectionInfo?: string(name='ConnectionInfo', example='null'),
      dbEngine?: string(name='DbEngine', example='MYSQL_PUBLIC'),
      endpointId?: string(name='EndpointId', example='e_4w1q****'),
      endpointName?: string(name='EndpointName', example='RATION12948*****'),
      endpointSide?: string(name='EndpointSide', example='sink'),
      host?: string(name='Host', example='xxx.xxx.xxx.1'),
      id?: string(name='Id', example='e_4lgzuzi9znr4'),
      nlsLengthSemantics?: string(name='NlsLengthSemantics', example='null'),
      ocpName?: string(name='OcpName', example='null'),
      operatingSystem?: string(name='OperatingSystem', example='Linux'),
      owner?: string(name='Owner', description='Owner。', example='oms_test'),
      port?: int32(name='Port', example='2883'),
      region?: string(name='Region', example='cn-hangzhou'),
      resourceOwner?: string(name='ResourceOwner', example='1325847***'),
      timezone?: string(name='Timezone', example='+08:00'),
      username?: string(name='Username', example='oms2027obmysql@oms_***'),
      version?: string(name='Version', example='2.2.77'),
    }(name='SinkConnectInfo'),
    sinkEndpointType?: string(name='SinkEndpointType', example='MYSQL'),
    sourceConnectInfo?: {
      charset?: string(name='Charset', example='utf8mb4'),
      connExtraAttributes?: any(name='ConnExtraAttributes', example='null'),
      connectionInfo?: string(name='ConnectionInfo', example='null'),
      dbEngine?: string(name='DbEngine', example='OB_MYSQL_PUBLIC'),
      endpointId?: string(name='EndpointId', example='e_3kx5i***1s'),
      endpointName?: string(name='EndpointName', example='migon****'),
      endpointSide?: string(name='EndpointSide', example='source'),
      host?: string(name='Host', example='xxx.xxx.xxx.1'),
      id?: string(name='Id', example='c_feg****'),
      nlsLengthSemantics?: string(name='NlsLengthSemantics', example='null'),
      ocpName?: string(name='OcpName', example='null'),
      operatingSystem?: string(name='OperatingSystem', example='Linux'),
      owner?: string(name='Owner', description='Owner。', example='oms_test'),
      port?: int32(name='Port', example='2883'),
      region?: string(name='Region', example='cn-shanghai'),
      resourceOwner?: string(name='ResourceOwner', example='1325847***'),
      timezone?: string(name='Timezone', example='+08:00'),
      username?: string(name='Username', example='oms2027obmysql@oms_***'),
      version?: string(name='Version', example='2.2.77'),
    }(name='SourceConnectInfo'),
    sourceEndpointType?: string(name='SourceEndpointType', example='OB_MYSQL'),
    status?: string(name='Status', example='RUNNING'),
    steps?: [ 
      {
        description?: string(name='Description'),
        extraInfo?: {
          errorCode?: string(name='ErrorCode', example='INNER_ERROR'),
          errorDetails?: [ 
            {
              code?: string(name='Code', example='CM-RESOAT1111'),
              extraContext?: map[string]any(name='ExtraContext'),
              level?: string(name='Level', description='FATAL, ERROR, WARNING, CRITICAL', example='ERROR'),
              message?: string(name='Message', example='A system error occurred.'),
              messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
              messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
              proposal?: string(name='Proposal', example='Contact the administrator.'),
              proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
              proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
              reason?: string(name='Reason', example='null'),
              reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
              reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
              upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
            }
          ](name='ErrorDetails'),
          errorMsg?: string(name='ErrorMsg', example='A system error occurred.'),
          errorParam?: map[string]string(name='ErrorParam'),
          failedTime?: string(name='FailedTime', example='null'),
        }(name='ExtraInfo'),
        finishTime?: string(name='FinishTime', example='2020-05-22T17:04:18'),
        name?: string(name='Name', example='PRE_CHECK'),
        order?: int32(name='Order', example='1'),
        progress?: int32(name='Progress', example='90'),
        startTime?: string(name='StartTime', example='2020-05-22T17:04:18'),
        status?: string(name='Status', example='RUNNING'),
        stepInfo?: map[string]any(name='StepInfo'),
      }
    ](name='Steps'),
    structTransferConfig?: {
      byteCharConvertStrategy?: string(name='ByteCharConvertStrategy', example='DO_NOTHING_IF_BYTE_USED'),
      deferIndexCreation?: boolean(name='DeferIndexCreation', example='true'),
    }(name='StructTransferConfig'),
    transferMapping?: {
      databases?: [ 
        {
          id?: string(name='Id', example='db_id'),
          mappedName?: string(name='MappedName', example='mapped_db'),
          name?: string(name='Name', example='db_name'),
          specificTables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_table'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id>1'),
            }
          ](name='SpecificTables'),
          specificViews?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='view_id'),
              mappedName?: string(name='MappedName', example='mapped_name'),
              name?: string(name='Name', example='view_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id<3'),
            }
          ](name='SpecificViews'),
          tables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_table'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id > 1'),
            }
          ](name='Tables'),
          tenantName?: string(name='TenantName', example='tenant_name'),
          type?: string(name='Type', example='MYSQL'),
          views?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='fexdg***'),
              mappedName?: string(name='MappedName', example='mapped_view'),
              name?: string(name='Name', example='view_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id < 1'),
            }
          ](name='Views'),
        }
      ](name='Databases'),
      databasesBlack?: [ 
        {
          id?: string(name='Id', example='db_id'),
          mappedName?: string(name='MappedName', example='mapped_db'),
          name?: string(name='Name', example='db_name'),
          specificTables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_table'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id<3'),
            }
          ](name='SpecificTables'),
          specificViews?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='view_id'),
              mappedName?: string(name='MappedName', example='mapped_view'),
              name?: string(name='Name', example='view_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id>2'),
            }
          ](name='SpecificViews'),
          tables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_table'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id>1'),
            }
          ](name='Tables'),
          tenantName?: string(name='TenantName', example='mapped_tenant'),
          type?: string(name='Type', example='DATABASE'),
          views?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: string(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='view_id'),
              mappedName?: string(name='MappedName', example='mapped_name'),
              name?: string(name='Name', example='view_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id>2'),
            }
          ](name='Views'),
        }
      ](name='DatabasesBlack'),
      mode?: string(name='Mode', example='SPECIFIC'),
      tableAndViewBlackList?: [ string ](name='TableAndViewBlackList'),
      tableAndViewWhiteList?: [ string ](name='TableAndViewWhiteList'),
    }(name='TransferMapping'),
    type?: string(name='Type', example='SYNC'),
    workerGradeId?: string(name='WorkerGradeId', example='g_i4wa7XXX'),
    workerGradeInfo?: {
      autoRenewal?: boolean(name='AutoRenewal'),
      chargeType?: string(name='ChargeType'),
      destRegion?: string(name='DestRegion'),
      destType?: string(name='DestType'),
      endTime?: string(name='EndTime'),
      expired?: boolean(name='Expired'),
      gmtCreate?: string(name='GmtCreate'),
      grade?: string(name='Grade'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      sourceRegion?: string(name='SourceRegion'),
      sourceType?: string(name='SourceType'),
      spec?: string(name='Spec'),
      specName?: string(name='SpecName'),
    }(name='WorkerGradeInfo'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-XXXX-XXXX-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='2'),
}

model DescribeProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectResponseBody(name='body'),
}

async function describeProject(request: DescribeProjectRequest): DescribeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProject', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProjectComponentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model DescribeProjectComponentsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='48'),
  data?: {
    fullImportComponents?: [ 
      {
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        gmtCreate?: string(name='GmtCreate', example='2023-07-13T18:04:36'),
        gmtModify?: string(name='GmtModify', example='2023-07-13T18:04:36'),
        identity?: string(name='Identity', example='p_4w8v****'),
        ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
        name?: string(name='Name', example='xxx.xxx.xxx.1-9000:connector_v2:np_4w8v****c-full_trans-1-0:0000000276'),
        progress?: int32(name='Progress', example='90'),
        region?: string(name='Region', example='cn-hangzhou'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='FullImportComponents'),
    fullVerifyComponents?: [ 
      {
        consistentQuantity?: long(name='ConsistentQuantity', example='100'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        inconsistentQuantity?: long(name='InconsistentQuantity', example='0'),
        ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
        name?: string(name='Name', example='xxx.xxx.xxx.1-9000:90247:0000000033'),
        progress?: string(name='Progress', example='100'),
        recordProgress?: int32(name='RecordProgress', example='100'),
        region?: string(name='Region', example='cn-beijing'),
        status?: string(name='Status', example='RUNNING'),
        taskId?: long(name='TaskId', example='1345***'),
      }
    ](name='FullVerifyComponents'),
    incrSyncComponents?: [ 
      {
        checkpoint?: string(name='Checkpoint', example='2023-07-13T09:19:53'),
        checkpointSampleTimestamp?: long(name='CheckpointSampleTimestamp', example='1689250071'),
        delay?: long(name='Delay', example='1'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        gmtCreate?: string(name='GmtCreate', example='2023-07-13T18:04:36'),
        gmtModify?: string(name='GmtModify', example='2023-07-13T18:04:36'),
        identity?: string(name='Identity', example='np_4w***'),
        ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
        name?: string(name='Name', example='xxx.xxx.xxx.1-9000:connector_v2:np_4w****jxc-incr_trans-1-0:0000000277'),
        region?: string(name='Region', example='cn-zhangjiakou'),
        status?: string(name='Status', example='RUNNING'),
        subtopics?: [ string ](name='Subtopics'),
        tps?: long(name='Tps', example='1'),
      }
    ](name='IncrSyncComponents'),
    reverseIncrSyncComponents?: [ 
      {
        checkpoint?: string(name='Checkpoint', example='2023-07-13T09:19:53'),
        checkpointSampleTimestamp?: long(name='CheckpointSampleTimestamp', example='1689250049'),
        delay?: long(name='Delay', example='1'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        gmtCreate?: string(name='GmtCreate', example='2023-07-13T18:04:36'),
        gmtModify?: string(name='GmtModify', example='2023-07-13T18:04:36'),
        identity?: string(name='Identity', example='np_4w8****'),
        ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
        name?: string(name='Name', example='xxx.xxx.xxx.1-9000:connector_v2:np_4w8****9jxc-incr_trans-1-0:0000000277'),
        region?: string(name='Region', example='cn-shanghai'),
        status?: string(name='Status', example='RUNNING'),
        subtopics?: [ string ](name='Subtopics'),
        tps?: long(name='Tps', example='1'),
      }
    ](name='ReverseIncrSyncComponents'),
    reverseStoreList?: [ 
      {
        beginCheckpoint?: string(name='BeginCheckpoint', example='2023-07-13T09:19:53'),
        conn?: long(name='Conn', example='1'),
        delay?: long(name='Delay', example='1'),
        endCheckpoint?: string(name='EndCheckpoint', example='2023-07-13T09:19:53'),
        errMsg?: string(name='ErrMsg', example='null'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        gmt?: long(name='Gmt', example='1689250071'),
        gmtCreate?: string(name='GmtCreate', example='2023-07-13T18:04:36'),
        gmtModified?: string(name='GmtModified', example='2023-07-13T18:04:36'),
        ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
        latelyHeartbeatTimeSec?: long(name='LatelyHeartbeatTimeSec', example='1689250071'),
        name?: string(name='Name', example='xxx.xxx.xxx.1-9000:connector_v2:np_4w****9jxc-incr_trans-1-0:0000000277'),
        port?: int32(name='Port', example='2883'),
        region?: string(name='Region', example='cn-shenzhen'),
        status?: string(name='Status', example='EXCEPTION'),
        storePort?: int32(name='StorePort', example='2882'),
        subtopic?: string(name='Subtopic', description='SubTopic。', example='null'),
        toSwitch?: boolean(name='ToSwitch', example='false'),
        topic?: string(name='Topic', description='Topic。', example='null'),
        tps?: long(name='Tps', example='1'),
      }
    ](name='ReverseStoreList'),
    storeList?: [ 
      {
        beginCheckpoint?: string(name='BeginCheckpoint', example='2023-07-13T09:19:53'),
        conn?: long(name='Conn', example='1'),
        delay?: long(name='Delay', example='24'),
        endCheckpoint?: string(name='EndCheckpoint', example='2023-07-13T09:19:53'),
        errMsg?: string(name='ErrMsg', example='null'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        gmt?: long(name='Gmt', example='1689250049'),
        gmtCreate?: string(name='GmtCreate', example='2023-07-13T17:29:54'),
        gmtModified?: string(name='GmtModified', example='2023-07-13T17:29:54'),
        ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
        latelyHeartbeatTimeSec?: long(name='LatelyHeartbeatTimeSec', example='1689250071'),
        name?: string(name='Name', example='xxx.xxx.xxx.1-7145:OB_ORACLE_np_4w3r***_4w:0000***97'),
        port?: int32(name='Port', example='2883'),
        region?: string(name='Region', example='cn-shanghai'),
        status?: string(name='Status', example='EXCEPTION'),
        storePort?: int32(name='StorePort', example='2882'),
        subtopic?: string(name='Subtopic', description='SubTopic。', example='OB_ORACLE_np_4w3***c_4w3**-0'),
        toSwitch?: boolean(name='ToSwitch', example='false'),
        topic?: string(name='Topic', description='Topic。', example='OB_ORACLE_np_4w3r29c_4w3****'),
        tps?: long(name='Tps', example='0'),
      }
    ](name='StoreList'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='9'),
}

model DescribeProjectComponentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectComponentsResponseBody(name='body'),
}

async function describeProjectComponents(request: DescribeProjectComponentsRequest): DescribeProjectComponentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProjectComponents', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProjectProgressRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model DescribeProjectProgressResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: {
    alarmLevel?: string(name='AlarmLevel', example='MEDIUM'),
    currentStep?: string(name='CurrentStep', example='PRE_CHECK'),
    enableFullTransfer?: boolean(name='EnableFullTransfer', example='true'),
    enableIncrSync?: boolean(name='EnableIncrSync', example='true'),
    enableReverseIncrTransfer?: boolean(name='EnableReverseIncrTransfer', example='true'),
    enableStructTransfer?: boolean(name='EnableStructTransfer', example='true'),
    fullTransferProgress?: int32(name='FullTransferProgress', example='100'),
    incrSyncCheckpoint?: long(name='IncrSyncCheckpoint', example='1689248064'),
    projectId?: string(name='ProjectId', example='np_fe****'),
    reverseIncrTransferCheckpoint?: long(name='ReverseIncrTransferCheckpoint', example='1689248075'),
    status?: string(name='Status', example='RUNNING'),
    structTransferProgress?: int32(name='StructTransferProgress', example='100'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeProjectProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectProgressResponseBody(name='body'),
}

async function describeProjectProgress(request: DescribeProjectProgressRequest): DescribeProjectProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProjectProgress', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProjectStepMetricRequest {
  regionId?: string(name='RegionId', position='Host'),
  aggregator: string(name='Aggregator', example='AVG', position='Body'),
  beginTimestamp: long(name='BeginTimestamp', example='1689244696', position='Body'),
  endTimestamp: long(name='EndTimestamp', example='1689254646', position='Body'),
  maxPointNum?: int32(name='MaxPointNum', example='6', minimum=5, position='Body'),
  metricType: string(name='MetricType', example='RPS', position='Body'),
  projectId: string(name='ProjectId', example='np_dr****', position='Body'),
  stepName: string(name='StepName', example='FULL_TRANSFER', position='Body'),
}

model DescribeProjectStepMetricResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: {
    aggregator?: string(name='Aggregator', example='AVG'),
    metrics?: [ 
      {
        dataPoints?: [ 
          {
            timestamp?: long(name='Timestamp', example='1689244696'),
            value?: double(name='Value', example='0'),
          }
        ](name='DataPoints'),
        name?: string(name='Name', example='metric_name'),
        tags?: map[string]string(name='Tags'),
      }
    ](name='Metrics'),
    referenceValue?: long(name='ReferenceValue', example='null'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeProjectStepMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectStepMetricResponseBody(name='body'),
}

async function describeProjectStepMetric(request: DescribeProjectStepMetricRequest): DescribeProjectStepMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProjectStepMetric', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProjectStepsRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model DescribeProjectStepsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: [ 
    {
      description?: string(name='Description'),
      extraInfo?: {
        errorCode?: string(name='ErrorCode', example='INNER_ERROR'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='A system error occurred.'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        errorMsg?: string(name='ErrorMsg', example='The ResourceDirectoryId is invalid.'),
        errorParam?: map[string]string(name='ErrorParam'),
        failedTime?: string(name='FailedTime', example='null'),
      }(name='ExtraInfo'),
      finishTime?: string(name='FinishTime', example='2020-05-22T17:04:18'),
      name?: string(name='Name', example='PRE_CHECK'),
      order?: int32(name='Order', example='1'),
      progress?: int32(name='Progress', example='100'),
      startTime?: string(name='StartTime', example='2020-05-22T17:04:18'),
      status?: string(name='Status', example='RUNNING'),
      stepInfo?: map[string]any(name='StepInfo', example='null'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='4'),
}

model DescribeProjectStepsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectStepsResponseBody(name='body'),
}

async function describeProjectSteps(request: DescribeProjectStepsRequest): DescribeProjectStepsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProjectSteps', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRecommendIndexRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The return result of the request.', example='ob317v4uif****', position='Body'),
  SQLId: string(name='SQLId', description='The ID of the OceanBase cluster.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tenantId: string(name='TenantId', description='The index recommended for the SQL statement after calculation by the diagnostic system.   
- If the recommended index is the primary key, PRIMARY is returned.  
- If an index created by the user is recommended, the index name is returned.   
The system recommends only one index for an SQL statement. You can call the DescribeIndexes operation to view the indexes of a table.', example='t2mr3oae0****', position='Body'),
}

model DescribeRecommendIndexResponseBody = {
  recommendIndex?: {
    suggestIndex?: string(name='SuggestIndex', description='Example 1', example='PRIMARY'),
    tableList?: string(name='TableList', example='testtable'),
    tenantMode?: string(name='TenantMode', example='mysql'),
  }(name='RecommendIndex', description='The information about the recommended index.'),
  requestId?: string(name='RequestId', description='The tenant mode.   Valid values:  
Oracle   
MySQL', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeRecommendIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendIndexResponseBody(name='body'),
}

async function describeRecommendIndex(request: DescribeRecommendIndexRequest): DescribeRecommendIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendIndex', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRestorableTenantsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  isOnline?: boolean(name='IsOnline', example='true', position='Body'),
  isRemote?: boolean(name='IsRemote', example='true', position='Body'),
  method?: string(name='Method', example='native_logical', position='Body'),
  restoreMode?: string(name='RestoreMode', example='from_time_point', position='Body'),
  restoreObjectType?: string(name='RestoreObjectType', example='tenant', position='Body'),
  setId?: string(name='SetId', example='bak-xxxxx', position='Body'),
}

model DescribeRestorableTenantsResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  tenants?: [ 
    {
      backupBucketName?: string(name='BackupBucketName', example='backup'),
      backupSets?: [ 
        {
          backupSetId?: string(name='BackupSetId', example='bak-4n****gacpa8'),
          checkpoint?: string(name='Checkpoint', example='2024-01-01\\"T\\"12:10:10.000\\"Z\\"'),
          setId?: string(name='SetId', example='bak-xxxxx'),
          tenantId?: string(name='TenantId', example='t5********'),
        }
      ](name='BackupSets'),
      clusterId?: string(name='ClusterId', example='objnf3b2****'),
      clusterName?: string(name='ClusterName', example='testCluster'),
      cpuNum?: long(name='CpuNum', example='1'),
      memoryNum?: long(name='MemoryNum', example='100'),
      method?: string(name='Method', example='logical'),
      obRpmVersion?: string(name='ObRpmVersion', example='3.2.3.1-2022080510****'),
      obTenantId?: string(name='ObTenantId', example='tvd43v****'),
      obVersion?: string(name='ObVersion', example='3.2.3.1'),
      sourceRegion?: string(name='SourceRegion', example='cn-hangzhou'),
      tenantAlias?: string(name='TenantAlias', example='aaa'),
      tenantDataBackupRemainDays?: int32(name='TenantDataBackupRemainDays', example='7'),
      tenantId?: string(name='TenantId', example='ob317v4uif****'),
      tenantMode?: long(name='TenantMode', example='Oracle'),
      tenantName?: string(name='TenantName', example='sbtest1'),
      timeIntervalList?: [ 
        {
          endTime?: string(name='EndTime', example='2023-03-13T02:43:03Z'),
          fromArchive?: boolean(name='FromArchive', example='true'),
          startTime?: string(name='StartTime', example='2023-01-20T16:00:00Z'),
          storageType?: string(name='StorageType', example='standard'),
        }
      ](name='TimeIntervalList'),
      unitNum?: long(name='UnitNum', example='2'),
      usedDisk?: long(name='UsedDisk', example='50'),
    }
  ](name='Tenants'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model DescribeRestorableTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRestorableTenantsResponseBody(name='body'),
}

async function describeRestorableTenants(request: DescribeRestorableTenantsRequest): DescribeRestorableTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestorableTenants', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLDetailsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  SQLId: string(name='SQLId', description='The SQL text.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tenantId: string(name='TenantId', description='SQLID.', example='t2mr3oae0****', position='Body'),
}

model DescribeSQLDetailsResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **DescribeSQLDetails**.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SQLDetails?: [ 
    {
      dbName?: string(name='DbName', example='testdb'),
      SQLText?: string(name='SQLText', description='{"name":"DescribeSQLDetails","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeSQLDetails\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"t2mr3oae0****\\"},{\\"name\\":\\"SQLId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"SQLID\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\\"},{\\"name\\":\\"SQLDetails\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Array\\",\\"subType\\":\\"Object\\",\\"description\\":\\"  \\",\\"children\\":[{\\"name\\":\\"SQLText\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC\\"},{\\"name\\":\\"DbName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"UserName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tester\\"}],\\"title\\":\\"\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{}"}', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      userName?: string(name='UserName', example='tester'),
    }
  ](name='SQLDetails', description='```
http(s)://[Endpoint]/?Action=DescribeSQLDetails
&TenantId=t2mr3oae0****
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&Common request parameters
```'),
}

model DescribeSQLDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSQLDetailsResponseBody(name='body'),
}

async function describeSQLDetails(request: DescribeSQLDetailsRequest): DescribeSQLDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLDetails', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLHistoryListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='The end time of the time range for querying the SQL execution history.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.   
Default value: 10.', example='10', position='Body'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying the SQL execution history.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSQLHistoryListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SQLHistoryList?: {
    count?: long(name='Count', description='The quantity.', example='1'),
    list?: [ 
      {
        affectedRows?: long(name='AffectedRows', description='The number of rows affected.', example='0'),
        appWaitTime?: float(name='AppWaitTime', description='The wait time of the client.', example='0.0'),
        blockCacheHit?: long(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
        blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
        bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
        clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
        concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The wait time in concurrent execution.', example='0.0'),
        cpuTime?: float(name='CpuTime', description='The average CPU time.', example='50.13'),
        dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
        decodeTime?: float(name='DecodeTime', description='The time to wait for decoding.', example='0.0'),
        diskRead?: long(name='DiskRead', description='The number of physical reads.', example='0'),
        elapsedTime?: float(name='ElapsedTime', description='The average response time.', example='76.382'),
        endTime?: long(name='EndTime', description='The end time.', example='2021-12-28T02:08:18Z'),
        endTimeUTCString?: string(name='EndTimeUTCString', description='The end time in UTC +0.', example='2021-12-28T02:08:18Z'),
        event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
        execPerSecond?: long(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
        executeTime?: float(name='ExecuteTime', description='The internal execution time.', example='61.044'),
        executions?: long(name='Executions', description='The number of executions.', example='89403'),
        failTimes?: long(name='FailTimes', description='The number of failures.', example='0'),
        getPlanTime?: float(name='GetPlanTime', description='The time spent in hard parsing.', example='0.052'),
        IOWaitTime?: float(name='IOWaitTime', description='The I/O wait time.', example='0.0'),
        logicalRead?: long(name='LogicalRead', description='The number of logical reads.', example='19'),
        maxCpuTime?: float(name='MaxCpuTime', description='The maximum CPU time.', example='257.967'),
        maxElapsedTime?: float(name='MaxElapsedTime', description='The maximum response time.', example='260.44'),
        memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
        missPlans?: long(name='MissPlans', description='The number of plan misses.', example='0'),
        netWaitTime?: float(name='NetWaitTime', description='The network latency.', example='0.0'),
        nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
        queueTime?: float(name='QueueTime', description='The queuing time.', example='15.275'),
        RPCCount?: long(name='RPCCount', description='The number of RPCs.', example='0'),
        remotePlans?: long(name='RemotePlans', description='The number of remote plans.', example='0'),
        retryCount?: long(name='RetryCount', description='The number of retries.', example='0'),
        returnRows?: long(name='ReturnRows', description='The number of rows returned.', example='1'),
        rowCacheHit?: long(name='RowCacheHit', description='The number of row cache hits.', example='0'),
        scheduleTime?: float(name='ScheduleTime', description='The scheduling duration.', example='0.0'),
        ssstoreReadRowCount?: long(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
        totalWaitTime?: float(name='TotalWaitTime', description='The internal wait time.', example='10.966'),
        userName?: string(name='UserName', description='The username.', example='tester'),
      }
    ](name='List'),
  }(name='SQLHistoryList', description='The execution history of the SQL statement.'),
}

model DescribeSQLHistoryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSQLHistoryListResponseBody(name='body'),
}

async function describeSQLHistoryList(request: DescribeSQLHistoryListRequest): DescribeSQLHistoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLHistoryList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLPlansRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  SQLId: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSQLPlansResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  SQLPlans?: [ 
    {
      avgExecutionMS?: float(name='AvgExecutionMS', description='The average execution duration, in ms.', example='1'),
      avgExecutionTimeMS?: long(name='AvgExecutionTimeMS', description='The average execution duration when the database uses this execution plan, in ms.', example='288'),
      firstLoadTime?: long(name='FirstLoadTime', description='The time when the plan was loaded for the first time, .', example='1641492303000'),
      firstLoadTimeUTCString?: string(name='FirstLoadTimeUTCString', description='The time when the plan was loaded for the first time, in UTC +0.', example='2022-01-06T18:05:03Z'),
      hitCount?: int32(name='HitCount', description='The number of hits.', example='3'),
      mergedVersion?: int32(name='MergedVersion', description='The major compaction version.', example='132'),
      nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp16niirq4zdmgvm****'),
      outlineData?: string(name='OutlineData', description='The outline data.', example='/*+ BEGIN_OUTLINE_DATA FULL(@\\"SEL$1\\" \\"testdb1.bmsql_order_line\\"@\\"SEL$1\\") END_OUTLINE_DATA*/'),
      outlineId?: long(name='OutlineId', description='OutlineID.', example='-1'),
      outlineTime?: long(name='OutlineTime', description='The time when the plan was bound.', example='1641492303000'),
      outlineTimeUTCString?: string(name='OutlineTimeUTCString', description='The time when the plan was bound, in UTC +0.', example='2022-01-06T18:05:03Z'),
      planFull?: string(name='PlanFull', description='The complete execution plan of the SQL statement.', example='PHY_TABLE_SCAN | bmsql_order_line | 40 ******'),
      planId?: int32(name='PlanId', description='The ID of the SQL execution plan in the database.', example='9114'),
      planInfo?: string(name='PlanInfo', description='The information about the plan.', example='PHY_TABLE_SCAN'),
      planUnionHash?: string(name='PlanUnionHash', description='The unique identifier of the SQL execution plan in the diagnostic system.', example='859ef7ee****b23ac98cdeb2476f****'),
      querySQL?: string(name='QuerySQL', description='The query SQL statement.', example='SELECT ol_i_id, ***, *** FROM aaa'),
    }
  ](name='SQLPlans', description='The information about the execution plan.'),
}

model DescribeSQLPlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSQLPlansResponseBody(name='body'),
}

async function describeSQLPlans(request: DescribeSQLPlansRequest): DescribeSQLPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPlans', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLSamplesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dbName: string(name='DbName', description='The database name.', example='test_db', position='Body'),
  endTime: string(name='EndTime', description='The end time of querying the slow query execution.
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T05:38:38Z', position='Body'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='ob317v4uif****', position='Body'),
  returnSqlText?: boolean(name='ReturnSqlText', position='Body'),
  sqlId: string(name='SqlId', description='SQL ID.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of querying the slow query execution.
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId?: string(name='TenantId', description='The tenant ID.', example='t4louaeei****', position='Body'),
}

model DescribeSQLSamplesResponseBody = {
  data?: [ 
    {
      affectedRows?: double(name='AffectedRows', description='Average updated rows during the execution period.', example='10000.0'),
      applicationWaitTime?: double(name='ApplicationWaitTime', description='Application event waiting time (in milliseconds).', example='0.0'),
      blockCacheHit?: double(name='BlockCacheHit', description='BlockCache hit count', example='99279.0'),
      blockIndexCacheHit?: double(name='BlockIndexCacheHit', description='BlockIndexCache hit count', example='142514.0'),
      bloomFilterCacheHit?: double(name='BloomFilterCacheHit', description='BloomFilterCache hit count.', example='0.0'),
      clientIp?: string(name='ClientIp', description='Client IP.', example='i-bp1db****38uemejio'),
      clientPort?: string(name='ClientPort', description='Client port.', example='4****'),
      concurrencyWaitTime?: double(name='ConcurrencyWaitTime', description='Concurrency event waiting time (in milliseconds).', example='0.0'),
      consistencyLevel?: string(name='ConsistencyLevel', description='Consistency level.', example='3'),
      cpuTime?: double(name='CpuTime', description='CPU time (in milliseconds).', example='3377.57'),
      dbName?: string(name='DbName', description='Database name.', example='test_db'),
      decodeTime?: double(name='DecodeTime', description='Syntax parsing time (in milliseconds).', example='0.0'),
      diskReads?: double(name='DiskReads', description='Disk read count.', example='96972.0'),
      elapsedTime?: double(name='ElapsedTime', description='Response time (in milliseconds).', example='2182.66'),
      executeTime?: double(name='ExecuteTime', description='Plan execution time (in milliseconds).', example='8262.01'),
      executorRpc?: boolean(name='ExecutorRpc', description='Whether to initiate RPC.', example='0.0'),
      expectedWorkerCount?: double(name='ExpectedWorkerCount', description='Degree of parallelism.', example='0'),
      fullSqlText?: string(name='FullSqlText'),
      getPlanTime?: double(name='GetPlanTime', description='Plan generation time (in milliseconds).', example='0.19'),
      hitPlan?: boolean(name='HitPlan', description='Whether to hit the execution plan.', example='true'),
      inner?: boolean(name='Inner', description='Whether an internal SQL.', example='false'),
      memstoreReadRows?: double(name='MemstoreReadRows', description='Memstore read row count.', example='0'),
      netTime?: double(name='NetTime', description='Network transmission time (in milliseconds).', example='0.0'),
      netWaitTime?: double(name='NetWaitTime', description='Network enqueue time (in milliseconds).', example='0.0'),
      obDbId?: double(name='ObDbId', description='Database ID.', example='11006111****4828'),
      obServerId?: double(name='ObServerId', description='Server  ID.', example='2'),
      obUserId?: double(name='ObUserId', description='User ID.', example='100010'),
      paramsValue?: string(name='ParamsValue'),
      partitionCount?: double(name='PartitionCount', description='Average number of partition accessed during the execution period.', example='1.0'),
      planId?: double(name='PlanId', description='The execution plan ID.', example='590****'),
      planType?: string(name='PlanType', description='Plan type.', example='LOCAL'),
      queueTime?: double(name='QueueTime', description='Queueing time (in milliseconds).', example='0.02'),
      requestId?: string(name='RequestId', description='Request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
      requestTime?: string(name='RequestTime', description='SQL request time.', example='2023-04-12T04:46:38Z'),
      retCode?: double(name='RetCode', description='Result code.', example='0'),
      retryCount?: double(name='RetryCount', description='Retry count.', example='0'),
      returnRows?: double(name='ReturnRows', description='Average returned rows during the execution period.', example='0.0'),
      rowCacheHit?: double(name='RowCacheHit', description='RowCache hit count.', example='498.0'),
      rpcCount?: double(name='RpcCount', description='Number of RPC sent.', example='8.0'),
      scheduleTime?: double(name='ScheduleTime', description='Schedule event waiting time (in milliseconds).', example='0.0'),
      server?: string(name='Server', description='The server where the SQL is executed.', example='i-bp1db1****8uemejio'),
      sqlText?: string(name='SqlText'),
      sqlType?: string(name='SqlType', description='SQL type.', example='select'),
      ssstoreReadRows?: double(name='SsstoreReadRows', description='Ssstore read row count.', example='986190'),
      statement?: string(name='Statement', description='Parameterized SQL text.', example='select a from b'),
      tableScan?: boolean(name='TableScan', description='Whether to perform full table scan.', example='false'),
      traceId?: string(name='TraceId', description='Trace ID.', example='YB42C****-0005E303D1****-0-0'),
      transHash?: string(name='TransHash', description='Transaction hash.', example='1219****927****73791'),
      usedWorkerCount?: double(name='UsedWorkerCount', description='Actual number of SQL execution threads.', example='0'),
      userIoWaitTime?: double(name='UserIoWaitTime', description='UserIO event waiting time (in milliseconds).', example='0.0'),
      userName?: string(name='UserName', description='Username.', example='test_user'),
      waitCount?: double(name='WaitCount', description='Wait count.', example='0.0'),
      waitEvent?: string(name='WaitEvent', description='Longest wait event during the execution period.', example='none'),
      waitTime?: double(name='WaitTime', description='Wait time (in milliseconds).', example='0.0'),
    }
  ](name='Data', description='The list of sample data of slow query execution details.'),
  requestId?: string(name='RequestId', description='Request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeSQLSamplesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSQLSamplesResponseBody(name='body'),
}

async function describeSQLSamples(request: DescribeSQLSamplesRequest): DescribeSQLSamplesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLSamples', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSQLTuningAdvicesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  dbName: string(name='DbName', example='testdb', position='Body'),
  endTime: string(name='EndTime', example='2023-04-12T05:38:38Z', position='Body'),
  instanceId: string(name='InstanceId', example='obsdf43****', position='Body'),
  sqlId: string(name='SqlId', description='SqlId', example='123456', position='Body'),
  startTime: string(name='StartTime', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId: string(name='TenantId', example='tsdc2s2****', position='Body'),
}

model DescribeSQLTuningAdvicesResponseBody = {
  data?: [ 
    {
      columnNames?: string(name='ColumnNames', example='c1;c2;c3'),
      columns?: [ 
        {
          columnName?: string(name='ColumnName', example='xxxx'),
          maxValue?: string(name='MaxValue', example='100'),
          minValue?: string(name='MinValue', example='1'),
          ndv?: float(name='Ndv', description='NDV', example='100'),
        }
      ](name='Columns'),
      dbName?: string(name='DbName', example='test_db'),
      localityType?: string(name='LocalityType', example='Local/Global'),
      plan?: {
        avgApplicationWaitTime?: float(name='AvgApplicationWaitTime', example='0'),
        avgBufferGets?: float(name='AvgBufferGets', example='0'),
        avgConcurrencyWaitTime?: float(name='AvgConcurrencyWaitTime', example='0'),
        avgCpuTime?: float(name='AvgCpuTime', example='100.36'),
        avgDiskReads?: float(name='AvgDiskReads', example='0'),
        avgDiskWrites?: float(name='AvgDiskWrites', example='0'),
        avgElapsedTime?: float(name='AvgElapsedTime', example='713.62'),
        avgRowProcessed?: float(name='AvgRowProcessed', example='1'),
        avgUserIoWaitTime?: float(name='AvgUserIoWaitTime', example='0'),
        collectTimeUs?: long(name='CollectTimeUs', example='1672358400000000'),
        delayedLargeQueryPercentage?: float(name='DelayedLargeQueryPercentage', example='0'),
        execPs?: float(name='ExecPs', example='1.45'),
        executions?: long(name='Executions', example='2062'),
        firstLoadTime?: string(name='FirstLoadTime', example='2022-12-30T02:25:30.576Z'),
        firstLoadTimeUs?: long(name='FirstLoadTimeUs', example='1672367130576163'),
        hitDiagnosis?: boolean(name='HitDiagnosis', example='false'),
        hitPercentage?: float(name='HitPercentage', example='66.8'),
        largeQueryPercentage?: float(name='LargeQueryPercentage', example='0'),
        mergedVersion?: long(name='MergedVersion', example='3'),
        obDbId?: long(name='ObDbId', example='1108307720799259'),
        obServerId?: long(name='ObServerId', description='server  ID。', example='1'),
        outlineData?: string(name='OutlineData', example='xxxxx'),
        outlineId?: long(name='OutlineId', description='Outline ID。', example='1'),
        planHash?: string(name='PlanHash', example='-86290582****886880'),
        planId?: long(name='PlanId', example='818'),
        planSize?: long(name='PlanSize', example='49216'),
        planType?: string(name='PlanType', example='LOCAL'),
        schemaVersion?: long(name='SchemaVersion', example='1672367130529680'),
        serverSn?: string(name='ServerSn', example='i-bp1*****sw64dhb*****'),
        tableScan?: boolean(name='TableScan', example='false'),
        timeoutPercentage?: float(name='TimeoutPercentage', example='0'),
        uid?: string(name='Uid', example='AAAAAAAAAAEAAAAAAAADMgAF8QJQwIUj'),
      }(name='Plan'),
      table?: string(name='Table', example='test_table'),
      type?: string(name='Type', example='PLAN_BINDING/INDEX_CREATION'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeSQLTuningAdvicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSQLTuningAdvicesResponseBody(name='body'),
}

async function describeSQLTuningAdvices(request: DescribeSQLTuningAdvicesRequest): DescribeSQLTuningAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLTuningAdvices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSampleSqlRawTextsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbName: string(name='DbName', example='test_db', position='Body'),
  endTime: string(name='EndTime', example='2023-04-12T05:38:38Z', position='Body'),
  instanceId?: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  limit?: string(name='Limit', example='20', position='Body'),
  sqlId: string(name='SqlId', description='SQL ID。', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', example='2023-04-12T04:38:38Z', position='Body'),
  tenantId?: string(name='TenantId', example='ob2mr3oae0****', position='Body'),
  traceId?: string(name='TraceId', example='YB420A700EFB-00060D53E42D0C61-0-0', position='Body'),
}

model DescribeSampleSqlRawTextsResponseBody = {
  data?: {
    sqlText?: [ string ](name='SqlText'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeSampleSqlRawTextsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleSqlRawTextsResponseBody(name='body'),
}

async function describeSampleSqlRawTexts(request: DescribeSampleSqlRawTextsRequest): DescribeSampleSqlRawTextsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleSqlRawTexts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSecurityIpGroupsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='i-bp67acfmxazb4p****', position='Body'),
}

model DescribeSecurityIpGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroups?: [ 
    {
      securityIpGroupName?: string(name='SecurityIpGroupName', example='online_paycore'),
      securityIps?: string(name='SecurityIps', example='121.41.106.33,100.104.7.0/26'),
    }
  ](name='SecurityIpGroups'),
  totalCount?: int32(name='TotalCount', description='Example 1', example='2'),
}

model DescribeSecurityIpGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityIpGroupsResponseBody(name='body'),
}

async function describeSecurityIpGroups(request: DescribeSecurityIpGroupsRequest): DescribeSecurityIpGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIpGroups', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSessionListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeSessionListResponseBody = {
  data?: [ 
    {
      host?: string(name='Host', description='The address of the client, with the format ip:port.', example='192.***.**.100:80'),
      sessionId?: string(name='SessionId', description='The session ID of the proxy service.', example='d2c90ad0-bc54-410f-bb89-2dcf14aa3c6d'),
    }
  ](name='Data', description='The object information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeSessionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSessionListResponseBody(name='body'),
}

async function describeSessionList(request: DescribeSessionListRequest): DescribeSessionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSessionList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSlowSQLHistoryListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', description='The end time of the time range for querying the execution history of the slow SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-12-14T08:34:49Z', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of rows to return on each page.  
- Maximum value: 100   
- Default value: 10', example='10', position='Body'),
  SQLId: string(name='SQLId', description='The SQL ID, which uniquely identifies an SQL statement.', example='8D6E84735C0****1823D199E2CA1****', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying the execution history of the slow SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-12-14T02:34:49Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t384tolsj****', position='Body'),
}

model DescribeSlowSQLHistoryListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  slowSQLHistoryList?: {
    count?: long(name='Count', description='The quantity.', example='1'),
    list?: [ 
      {
        affectedRows?: double(name='AffectedRows', description='The number of rows affected.', example='0'),
        appWaitTime?: double(name='AppWaitTime', description='The wait time of the client.', example='0.0'),
        blockCacheHit?: double(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
        blockIndexCacheHit?: double(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
        bloomFilterCacheHit?: double(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
        clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
        concurrencyWaitTime?: double(name='ConcurrencyWaitTime', description='The wait time in concurrent execution.', example='0.0'),
        cpuTime?: double(name='CpuTime', description='The average CPU time.', example='50.13'),
        dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
        decodeTime?: double(name='DecodeTime', description='The time to wait for decoding.', example='0.0'),
        diskRead?: double(name='DiskRead', description='The number of physical reads.', example='0'),
        elapsedTime?: double(name='ElapsedTime', description='The average response time.', example='76.382'),
        endTimeUTCString?: string(name='EndTimeUTCString', description='The end time.', example='2021-12-28T02:08:18Z'),
        event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
        execPerSecond?: double(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
        executeTime?: double(name='ExecuteTime', description='The internal execution time.', example='61.044'),
        executions?: double(name='Executions', description='The number of executions.', example='89403'),
        failTimes?: double(name='FailTimes', description='The number of failures.', example='0'),
        getPlanTime?: double(name='GetPlanTime', description='Hard parsing time.', example='0.052'),
        IOWaitTime?: double(name='IOWaitTime', description='The I/O wait time.', example='0.0'),
        logicalRead?: double(name='LogicalRead', description='The number of logical reads.', example='19'),
        maxCpuTime?: double(name='MaxCpuTime', description='The maximum CPU time.', example='257.967'),
        maxElapsedTime?: double(name='MaxElapsedTime', description='The maximum response time.', example='260.044'),
        memstoreReadRowCount?: double(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
        missPlans?: double(name='MissPlans', description='The number of plan misses.', example='0'),
        netWaitTime?: double(name='NetWaitTime', description='The wait time for network.', example='0.0'),
        nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
        queueTime?: double(name='QueueTime', description='The queuing time.', example='15.275'),
        RPCCount?: double(name='RPCCount', description='The number of RPCs.', example='0'),
        remotePlans?: double(name='RemotePlans', description='The number of remote plans.', example='0'),
        retryCount?: double(name='RetryCount', description='The number of retries.', example='0'),
        returnRows?: double(name='ReturnRows', description='The number of rows returned.', example='1'),
        rowCacheHit?: double(name='RowCacheHit', description='The number of row cache hits.', example='0'),
        scheduleTime?: double(name='ScheduleTime', description='The scheduling duration.', example='0.0'),
        sqlId?: string(name='SqlId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****'),
        sqlType?: string(name='SqlType', description='The SQL type.', example='1'),
        ssstoreReadRowCount?: double(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
        tenantName?: string(name='TenantName', description='The name of the tenant.', example='pay_online'),
        totalWaitTime?: double(name='TotalWaitTime', description='The internal wait time.', example='10.966'),
        userName?: string(name='UserName', description='The username.', example='tester'),
      }
    ](name='List', description='The return result of the request.'),
  }(name='SlowSQLHistoryList', description='The execution history of the slow SQL statement.'),
}

model DescribeSlowSQLHistoryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowSQLHistoryListResponseBody(name='body'),
}

async function describeSlowSQLHistoryList(request: DescribeSlowSQLHistoryListRequest): DescribeSlowSQLHistoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowSQLHistoryList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSlowSQLListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dbName?: string(name='DbName', description='The name of the database.', example='testdb', position='Body'),
  endTime: string(name='EndTime', description='The end time of the time range for querying slow SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-09-13T15:40:43Z', position='Body'),
  filterCondition?: map[string]any(name='FilterCondition', description='The filter condition.', example='[dbName:sys]', shrink='json', position='Body'),
  nodeIp?: string(name='NodeIp', description='The IP address of the database node.', example='i-bp18qljorblo8es*****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of rows to return on each page.  
- Maximum value: 100  
- Default value: 10', example='10', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='1', position='Body'),
  SQLId?: string(name='SQLId', description='The SQL ID, which uniquely identifies an SQL statement.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update', position='Body'),
  searchParameter?: string(name='SearchParameter', description='The search parameter.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The search rule.', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The search value.', example='0.01', position='Body'),
  sortColumn?: string(name='SortColumn', description='The sorted column.', example='cputime', position='Body'),
  sortOrder?: string(name='SortOrder', description='The sorting rule.', example='desc', position='Body'),
  startTime: string(name='StartTime', description='The start time of the time range for querying slow SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t2mr3oae0****', position='Body'),
}

model DescribeSlowSQLListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  slowSQLList?: [ 
    {
      affectedRows?: long(name='AffectedRows', description='The number of rows affected.', example='0'),
      appWaitTime?: float(name='AppWaitTime', description='The wait time of the client.', example='0.0'),
      blockCacheHit?: long(name='BlockCacheHit', description='The number of block cache hits.', example='14'),
      blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
      bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='The number of Bloom filter cache hits.', example='0'),
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='1*2.***.1*3.***'),
      concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The wait time in concurrent execution.', example='0.0'),
      cpuTime?: float(name='CpuTime', description='The average CPU time.', example='50.13'),
      dbName?: string(name='DbName', description='The name of the database.', example='testdb'),
      decodeTime?: float(name='DecodeTime', description='The time to wait for decoding.', example='0.0'),
      diskRead?: long(name='DiskRead', description='The number of physical reads.', example='0'),
      elapsedTime?: float(name='ElapsedTime', description='The average response time.', example='76.382'),
      event?: string(name='Event', description='The wait event.', example='mysql response wait client'),
      execPerSecond?: float(name='ExecPerSecond', description='The number of executions per second.', example='163.0'),
      executeTime?: float(name='ExecuteTime', description='The internal execution time.', example='61.044'),
      executions?: long(name='Executions', description='The number of executions.', example='89403'),
      failTimes?: long(name='FailTimes', description='The number of failures.', example='0'),
      getPlanTime?: float(name='GetPlanTime', description='The time spent in hard parsing.', example='0.052'),
      IOWaitTime?: float(name='IOWaitTime', description='The I/O wait time.', example='0.0'),
      key?: long(name='Key', description='The sequence number of the returned SQL statement.', example='1'),
      logicalRead?: long(name='LogicalRead', description='The number of logical reads.', example='19'),
      maxCpuTime?: float(name='MaxCpuTime', description='The maximum CPU time.', example='257.967'),
      maxElapsedTime?: float(name='MaxElapsedTime', description='The maximum response time.', example='260.044'),
      memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The number of rows read from the memory.', example='527'),
      missPlans?: long(name='MissPlans', description='The number of plan misses.', example='0'),
      netWaitTime?: float(name='NetWaitTime', description='The network latency.', example='0.0'),
      nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='i-bp18qljorblo8es*****'),
      queueTime?: float(name='QueueTime', description='The queuing time.', example='15.275'),
      RPCCount?: long(name='RPCCount', description='The number of RPCs.', example='0'),
      remotePlans?: long(name='RemotePlans', description='The number of remote plans.', example='0'),
      retryCount?: long(name='RetryCount', description='The number of retries.', example='0'),
      returnRows?: long(name='ReturnRows', description='The number of rows returned.', example='1'),
      rowCacheHit?: long(name='RowCacheHit', description='The number of row cache hits.', example='0'),
      SQLId?: string(name='SQLId', description='SQLID.', example='8D6E84****0B8FB1823D199E2CA1****'),
      SQLText?: string(name='SQLText', description='The SQL text.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      SQLType?: long(name='SQLType', description='The SQL type.', example='1'),
      scheduleTime?: float(name='ScheduleTime', description='The scheduling duration.', example='0.0'),
      ssstoreReadRowCount?: long(name='SsstoreReadRowCount', description='The number of rows read from the disk.', example='43086'),
      totalWaitTime?: float(name='TotalWaitTime', description='The internal wait time.', example='10.966'),
      userName?: string(name='UserName', description='The username.', example='tester'),
    }
  ](name='SlowSQLList', description='The list of slow SQL statements.'),
  totalCount?: long(name='TotalCount', description='The total count.', example='2'),
}

model DescribeSlowSQLListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowSQLListResponseBody(name='body'),
}

async function describeSlowSQLList(request: DescribeSlowSQLListRequest): DescribeSlowSQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowSQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStandbyCreateModeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='ob4wibn0abo9uo', position='Body'),
  tenantId: string(name='TenantId', example='txxxxxxx', position='Body'),
}

model DescribeStandbyCreateModeResponseBody = {
  data?: {
    createMode?: string(name='CreateMode', example='BACKUP_RESTORE'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model DescribeStandbyCreateModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStandbyCreateModeResponseBody(name='body'),
}

async function describeStandbyCreateMode(request: DescribeStandbyCreateModeRequest): DescribeStandbyCreateModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStandbyCreateMode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTagValuesRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceType: string(name='ResourceType', description='The type of the resource.', example='tag', position='Body'),
}

model DescribeTagValuesResponseBody = {
  map?: string(name='Map', description='The mappings between tag groups and tags.', example='"{\\"Tag group 2\\":[\\"Tag 2-1\\",\\"Tag 2-2\\"],\\"Tag group 1\\":[\\"Tag 1-1\\"]}"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model DescribeTagValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagValuesResponseBody(name='body'),
}

async function describeTagValues(request: DescribeTagValuesRequest): DescribeTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagValues', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The status of the Internet address for accessing the tenant. Valid values:   
- CLOSED: The address is disabled.   
- ALLOCATING_INTERNET_ADDRESS: An address is being applied for.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.   
- ONLINE: The address is in service.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='Indicates whether to enable transaction splitting.', example='ob2mr3oae0****', position='Body'),
}

model DescribeTenantResponseBody = {
  requestId?: string(name='RequestId', description='The zone information of the tenant.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenant?: {
    availableZones?: [ string ](name='AvailableZones', description='DescribeTenant'),
    charset?: string(name='Charset', description='The number of CPU cores in each resource unit of the tenant.', example='utf8mb4'),
    clogServiceStatus?: string(name='ClogServiceStatus', description='地址类型', example='CLOSED'),
    collation?: string(name='Collation', description='The request ID.', example='utf8mb4_general_ci'),
    createTime?: string(name='CreateTime', description='You can call this operation to create a single tenant in a specific cluster.', example='2021-09-17 15:52:17'),
    dataMergeTime?: string(name='DataMergeTime'),
    deployMode?: string(name='DeployMode', description='The list of zones.', example='1-1-1'),
    deployType?: string(name='DeployType', description='The series of the instance.', example='multiple'),
    description?: string(name='Description', description='Indicates whether to enable read/write splitting endpoint.', example='The information of the tenant.'),
    diskType?: string(name='DiskType', description='You can call this operation to query the information of a specific tenant in a specific cluster.', example='cloud_essd_pl1'),
    enableBinlogService?: boolean(name='EnableBinlogService', description='是否可以申请Binlog服务'),
    enableClogService?: boolean(name='EnableClogService', description='The intranet address for accessing the tenant.', example='false'),
    enableInternetAddressService?: boolean(name='EnableInternetAddressService', description='The deployment type of the primary zone.', example='true'),
    enableParallelQuery?: boolean(name='EnableParallelQuery'),
    enableReadOnlyReplica?: boolean(name='EnableReadOnlyReplica'),
    enableReadWriteSplit?: boolean(name='EnableReadWriteSplit', example='false'),
    instanceType?: string(name='InstanceType', description='{
    "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
    "Tenant": {
        "TenantId": "t33h8y08k****",
        "TenantName": "pay_online",
        "TenantMode": "Oracle",
        "VpcId": "vpc-bp1d2q3mhg9i23ofi****",
        "Status": "ONLINE",
        "PrimaryZone": "cn-hangzhou-i",
        "DeployType": "multiple",
        "DeployMode": "1-1-1",
        "Description": "PayCore business database",
        "CreateTime": "2021-09-17 15:52:17",
        "TenantResource": {
            "UnitNum": 1,
            "Cpu": {
                "UsedCpu": 8,
                "TotalCpu": 10,
                "UnitCpu": 8
            },
            "Memory": {
                "UsedMemory": 30,
                "TotalMemory": 64,
                "UnitMemory": 32
            },
            "DiskSize": {
                "UsedDiskSize": 86
            }
        },
        "TenantConnections": [
            {
                "ConnectionRole": "ReadWrite",
                "IntranetAddress": "t32a7ru5u****.oceanbase.aliyuncs.com",
                "IntranetPort": 3306,
                "InternetAddress": "t32a7ru5u****mo.oceanbase.aliyuncs.com",
                "InternetPort": 3306,
                "VpcId": "vpc-bp1qiail1asmfe23t****",
                "VSwitchId": "vsw-bp11k1aypnzu1l3whi****",
                "IntranetAddressMasterZoneId": "cn-hangzhou-i",
                "IntranetAddressSlaveZoneId": "cn-hangzhou-j",
                "IntranetAddressStatus": "ONLINE",
                "ConnectionZones": [
                    "cn-hangzhou-i"
                ],
                "InternetAddressStatus": "CLOSED"
            }
        ],
        "TenantZones": [
            {
                "TenantZoneId": "cn-hangzhou-i",
                "Region": "cn-hangzhou",
                "TenantZoneRole": "ReadOnly"
            }
        ],
        "ClogServiceStatus": "CLOSED"
    }
}', example='KAFKA_PUBLIC'),
    lowerCaseTableNames?: int32(name='LowerCaseTableNames'),
    masterIntranetAddressZone?: string(name='MasterIntranetAddressZone', description='```
http(s)://[Endpoint]/?Action=DescribeTenant
&InstanceId=ob317v4uif****
&TenantId=ob2mr3oae0****
&Common request parameters
```', example='cn-hangzhou-h'),
    maxParallelQueryDegree?: long(name='MaxParallelQueryDegree', example='32'),
    odpVersion?: string(name='OdpVersion'),
    payType?: string(name='PayType', example='POSTPAY'),
    primaryZone?: string(name='PrimaryZone', description='The type of the payment.', example='cn-hangzhou-i'),
    primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='Example 1', example='RANDOM'),
    readOnlyResource?: {
      capacityUnit?: {
        maxCapacityUnit?: int32(name='MaxCapacityUnit'),
        minCapacityUnit?: int32(name='MinCapacityUnit'),
        usedCapacit?: int32(name='UsedCapacit'),
      }(name='CapacityUnit'),
      cpu?: {
        totalCpu?: float(name='TotalCpu', example='10'),
        unitCpu?: float(name='UnitCpu', example='8'),
        usedCpu?: float(name='UsedCpu'),
      }(name='Cpu'),
      diskSize?: {
        usedDiskSize?: float(name='UsedDiskSize', example='86'),
      }(name='DiskSize'),
      logDiskSize?: {
        totalLogDisk?: int32(name='TotalLogDisk'),
        unitLogDisk?: int32(name='UnitLogDisk'),
      }(name='LogDiskSize'),
      memory?: {
        totalMemory?: float(name='TotalMemory', example='64'),
        unitMemory?: float(name='UnitMemory', example='32'),
        usedMemory?: float(name='UsedMemory', example='30'),
      }(name='Memory'),
      unitNum?: int32(name='UnitNum'),
    }(name='ReadOnlyResource'),
    recycleBinStatus?: string(name='RecycleBinStatus'),
    series?: string(name='Series', description='<DescribeTenantResponse>
    <RequestId>EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C</RequestId>
    <Tenant>
        <TenantId>t33h8y08k****</TenantId>
        <TenantName>pay_online</TenantName>
        <TenantMode>Oracle</TenantMode>
        <VpcId>vpc-bp1d2q3mhg9i23ofi****</VpcId>
        <Status>ONLINE</Status>
        <PrimaryZone>cn-hangzhou-i</PrimaryZone>
        <DeployType>multiple</DeployType>
        <DeployMode>1-1-1</DeployMode>
        <Description>PayCore business database</Description>
        <CreateTime>2021-09-17 15:52:17</CreateTime>
        <TenantResource>
            <UnitNum>1</UnitNum>
            <Cpu>
                <UsedCpu>8</UsedCpu>
                <TotalCpu>10</TotalCpu>
                <UnitCpu>8</UnitCpu>
            </Cpu>
            <Memory>
                <UsedMemory>30</UsedMemory>
                <TotalMemory>64</TotalMemory>
                <UnitMemory>32</UnitMemory>
            </Memory>
            <DiskSize>
                <UsedDiskSize>86</UsedDiskSize>
            </DiskSize>
        </TenantResource>
        <TenantConnections>
            <ConnectionRole>ReadWrite</ConnectionRole>
            <IntranetAddress>t32a7ru5u****.oceanbase.aliyuncs.com</IntranetAddress>
            <IntranetPort>3306</IntranetPort>
            <InternetAddress>t32a7ru5u****mo.oceanbase.aliyuncs.com</InternetAddress>
            <InternetPort>3306</InternetPort>
            <VpcId>vpc-bp1qiail1asmfe23t****</VpcId>
            <VSwitchId>vsw-bp11k1aypnzu1l3whi****</VSwitchId>
            <IntranetAddressMasterZoneId>cn-hangzhou-i</IntranetAddressMasterZoneId>
            <IntranetAddressSlaveZoneId>cn-hangzhou-j</IntranetAddressSlaveZoneId>
            <IntranetAddressStatus>ONLINE</IntranetAddressStatus>
            <ConnectionZones>cn-hangzhou-i</ConnectionZones>
            <InternetAddressStatus>CLOSED</InternetAddressStatus>
        </TenantConnections>
        <TenantZones>
            <TenantZoneId>cn-hangzhou-i</TenantZoneId>
            <Region>cn-hangzhou</Region>
            <TenantZoneRole>ReadOnly</TenantZoneRole>
        </TenantZones>
        <ClogServiceStatus>CLOSED</ClogServiceStatus>
    </Tenant>
</DescribeTenantResponse>', example='normal'),
    status?: string(name='Status', description='The character set.', example='ONLINE'),
    tenantConnections?: [ 
      {
        addressType?: string(name='AddressType', description='The primary zone of the tenant.', example='MASTER'),
        connectionLogicalZones?: [ string ](name='ConnectionLogicalZones'),
        connectionReplicaType?: string(name='ConnectionReplicaType'),
        connectionZones?: [ string ](name='ConnectionZones', description='The Internet address for accessing the tenant.', example='["cn-hangzhou-i", "cn-hangzhou-j"]'),
        enableTransactionSplit?: boolean(name='EnableTransactionSplit'),
        internetAddress?: string(name='InternetAddress', description='The ID of the VPC.', example='t32a7ru5u****mo.oceanbase.aliyuncs.com'),
        internetAddressStatus?: string(name='InternetAddressStatus', description='实例系列', example='CLOSED'),
        internetMaxConnectionLimit?: long(name='InternetMaxConnectionLimit'),
        internetMaxConnectionNum?: long(name='InternetMaxConnectionNum'),
        internetPort?: int32(name='InternetPort', description='实例类型', example='3306'),
        internetRpcPort?: int32(name='InternetRpcPort'),
        intranetAddress?: string(name='IntranetAddress', description='The deployment type of the cluster. Valid values:  
- multiple: multi-IDC deployment   
- single: single-IDC deployment   
- dual: dual-IDC deployment', example='t32a7ru5u****.oceanbase.aliyuncs.com'),
        intranetAddressMasterZoneId?: string(name='IntranetAddressMasterZoneId', description='PayCore business database', example='cn-hangzhou-i'),
        intranetAddressSlaveZoneId?: string(name='IntranetAddressSlaveZoneId', description='The total number of CPU cores of the tenant.', example='cn-hangzhou-j'),
        intranetAddressStatus?: string(name='IntranetAddressStatus', description='付费类型', example='ONLINE'),
        intranetPort?: int32(name='IntranetPort', description='The ID of the tenant.', example='3306'),
        intranetRpcPort?: int32(name='IntranetRpcPort'),
        intranetSqlPort?: int32(name='IntranetSqlPort'),
        maxConnectionLimit?: long(name='MaxConnectionLimit'),
        maxConnectionNum?: long(name='MaxConnectionNum', example='5000'),
        odpVersion?: string(name='OdpVersion'),
        parallelQueryDegree?: long(name='ParallelQueryDegree'),
        proxyClusterId?: string(name='ProxyClusterId'),
        tenantEndpointId?: string(name='TenantEndpointId', example='obe-4tw51gp7****'),
        transactionSplit?: boolean(name='TransactionSplit', description='The primary zone corresponding to the address for accessing the tenant.', example='true'),
        vSwitchId?: string(name='VSwitchId', description='The connection access information of the tenant.', example='vsw-bp11k1aypnzu1l3whi****'),
        vpcId?: string(name='VpcId', description='The service mode of the connection address. Valid values:  
ReadWrite: provides strong-consistency read and write services.   
ReadOnly: provides the read-only service to ensure ultimate consistency of data.   
Clog: provides transaction log services.', example='vpc-bp1qiail1asmfe23t****'),
      }
    ](name='TenantConnections', description='The status of the tenant.   
- PENDING_CREATE: The tenant is being created.   
- RESTORE: The tenant is being recovered.   
- ONLINE: The tenant is running.   
- SPEC_MODIFYING: The specification of the tenant is being modified.   
- ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.  
- PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.  
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.  
- PARAMETER_MODIFYING: Parameters are being modified.   
- WHITE_LIST_MODIFYING: The whitelist is being modified.'),
    tenantId?: string(name='TenantId', description='The region where the zone of the tenant resides.', example='t33h8y08k****'),
    tenantMode?: string(name='TenantMode', description='The enabling status of the clog service.  
- CLOSED: The clog service is disabled.  
- ONLINE: The clog service is running.', example='Oracle'),
    tenantName?: string(name='TenantName', description='The request type of the zone of the tenant.  ReadWrite: The zone supports data reads and writes. ReadOnly: The zone supports only data reads. For a high availability cluster with multiple IDCs, the primary zone provides ReadWrite services, and the standby zone provides ReadOnly services. For a high availability cluster with a single IDC, all zones provide ReadWrite services.', example='pay_online'),
    tenantResource?: {
      capacityUnit?: {
        maxCapacityUnit?: int32(name='MaxCapacityUnit'),
        minCapacityUnit?: int32(name='MinCapacityUnit'),
        usedCapacit?: int32(name='UsedCapacit'),
      }(name='CapacityUnit'),
      cpu?: {
        totalCpu?: float(name='TotalCpu', description='The data replica distribution mode of the tenant.    

- For the high availability version, N-N-N indicates the three-zone mode, and N-N indicates the dual-zone or single-zone mode.
- For the basic version, N indicates the single-zone mode. 

> <br>N represents the number of nodes in a single zone.', example='10'),
        unitCpu?: float(name='UnitCpu', description='The zone corresponding to the tenant connection.', example='8'),
        usedCpu?: float(name='UsedCpu', description='The tenant mode.   
Valid values: 
Oracle   
MySQL', example='8'),
      }(name='Cpu', description='The enabling status of the Clog service.  
CLOSED: The Clog service is disabled.  
- ONLINE: The Clog service is running.'),
      diskSize?: {
        usedDiskSize?: float(name='UsedDiskSize', description='The total memory size of the tenant, in GB.', example='86'),
      }(name='DiskSize', description='The status of the intranet address for accessing the tenant.  
The value ONLINE indicates that the address is in service.'),
      logDiskSize?: {
        totalLogDisk?: int32(name='TotalLogDisk'),
        unitLogDisk?: int32(name='UnitLogDisk'),
      }(name='LogDiskSize'),
      memory?: {
        totalMemory?: float(name='TotalMemory', description='The information about the memory resources of the tenant.', example='64'),
        unitMemory?: float(name='UnitMemory', description='The time when the tenant was created.', example='32'),
        usedMemory?: float(name='UsedMemory', description='The status of the Internet address for accessing the tenant. Valid values:   
Closed: The address is disabled.   
- ALLOCATING_INTERNET_ADDRESS: An address is being applied for.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.   
- ONLINE: The address is in service.', example='30'),
      }(name='Memory', description='The description of the tenant.'),
      unitNum?: int32(name='UnitNum', description='Alibaba Cloud CLI', example='1'),
    }(name='TenantResource', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.'),
    tenantZones?: [ 
      {
        region?: string(name='Region', description='是否允许开启读写分离地址', example='cn-hangzhou'),
        tenantZoneId?: string(name='TenantZoneId', description='The intranet port for accessing the tenant.', example='cn-hangzhou-i'),
        tenantZoneReplicas?: [ 
          {
            fullCopyId?: int32(name='FullCopyId'),
            logicZoneName?: string(name='LogicZoneName'),
            readOnlyCopyId?: string(name='ReadOnlyCopyId'),
            zoneCopyId?: int32(name='ZoneCopyId'),
            zoneNodes?: string(name='ZoneNodes'),
            zoneReplicaType?: string(name='ZoneReplicaType'),
          }
        ](name='TenantZoneReplicas'),
        tenantZoneRole?: string(name='TenantZoneRole', description='The character set.', example='ReadOnly'),
      }
    ](name='TenantZones', description='The standby zone corresponding to the address for accessing the tenant.'),
    timeZone?: string(name='TimeZone'),
    version?: string(name='Version'),
    vpcId?: string(name='VpcId', description='Indicates whether the clog service is available. To enable the clog service, submit a ticket.', example='vpc-bp1d2q3mhg9i23ofi****'),
  }(name='Tenant', description='The ID of the zone.'),
}

model DescribeTenantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantResponseBody(name='body'),
}

async function describeTenant(request: DescribeTenantRequest): DescribeTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenant', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantEncryptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  pageNumber?: long(name='PageNumber', example='1', position='Body'),
  pageSize?: long(name='PageSize', example='10', position='Body'),
  tenantId?: string(name='TenantId', example='t4louaeei****', position='Body'),
  tenantName?: string(name='TenantName', example='forMySQLTenant', position='Body'),
}

model DescribeTenantEncryptionResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantEncryptions?: [ 
    {
      enableEncryption?: boolean(name='EnableEncryption', example='false'),
      encryptionKeyId?: string(name='EncryptionKeyId', example='xxx'),
      encryptionType?: string(name='EncryptionType', example='INTERNAL'),
      status?: string(name='Status', example='OPEN'),
      tenantId?: string(name='TenantId', example='t4louaeei****'),
      tenantMode?: string(name='TenantMode', example='MySQL'),
      tenantName?: string(name='TenantName', example='forMySQLTenant'),
      tenantStatus?: string(name='TenantStatus', example='ONLINE'),
    }
  ](name='TenantEncryptions'),
  totalCount?: int32(name='TotalCount', example='8'),
}

model DescribeTenantEncryptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantEncryptionResponseBody(name='body'),
}

async function describeTenantEncryption(request: DescribeTenantEncryptionRequest): DescribeTenantEncryptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantEncryption', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantMetricsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  endTime: string(name='EndTime', example='2021-06-13T15:45:43Z', position='Body'),
  instanceId: string(name='InstanceId', description='2021-06-13T15:40:43Z', example='ob317v4uif****', position='Body'),
  metrics: string(name='Metrics', description='{"name":"DescribeTenantMetrics","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeTenantMetrics\\"},{\\"name\\":\\"InstanceId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"ob317v4uif****\\"},{\\"name\\":\\"PageSize\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"10\\"},{\\"name\\":\\"PageNumber\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"TenantName\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":true,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"pay_online\\"},{\\"name\\":\\"StartTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:40:43Z\\"},{\\"name\\":\\"EndTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:45:43Z\\"},{\\"name\\":\\"Metrics\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tps\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":true,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tfafd34fs****\\"},{\\"name\\":\\"TenantIdList\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"[tdak3nac****,tdakc42df****]\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"TotalCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"9\\"},{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C\\"},{\\"name\\":\\"TenantMetrics\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"\\\\\\"Metrics\\\\\\":[ {\\\\\\"request_queue_rt\\\\\\":0.0,\\\\\\"TimeStamp\\\\\\":\\\\\\"2022-02-23T01:58:00Z\\\\\\"}]\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{}"}', example='tps', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The ID of the OceanBase cluster.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='tfafd34fs****', example='10', position='Body'),
  startTime: string(name='StartTime', description='Example 1', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId?: string(name='TenantId', example='tfafd34fs****', deprecated='true', position='Body'),
  tenantIdList?: string(name='TenantIdList', example='[tdak3nac****,tdakc42df****]', position='Body'),
  tenantName?: string(name='TenantName', description='2021-06-13T15:45:43Z', example='pay_online', deprecated='true', position='Body'),
}

model DescribeTenantMetricsResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantMetrics?: string(name='TenantMetrics', example='"Metrics":[ {"request_queue_rt":0.0,"TimeStamp":"2022-02-23T01:58:00Z"}]'),
  totalCount?: int32(name='TotalCount', example='9'),
}

model DescribeTenantMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantMetricsResponseBody(name='body'),
}

async function describeTenantMetrics(request: DescribeTenantMetricsRequest): DescribeTenantMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantMetrics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantReadableScnRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****', position='Body'),
}

model DescribeTenantReadableScnResponseBody = {
  data?: {
    readableScn?: long(name='ReadableScn', description='The maximum readable timestamp.', example='1715329164977'),
  }(name='Data', description='The data in the return result of the request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8442BB1E-3171-1192-B9DC-F6F4E53B2673'),
}

model DescribeTenantReadableScnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantReadableScnResponseBody(name='body'),
}

async function describeTenantReadableScn(request: DescribeTenantReadableScnRequest): DescribeTenantReadableScnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantReadableScn', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantSecurityConfigsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  checkId?: string(name='CheckId', description='The unique identifier of the security check.', example='****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeTenantSecurityConfigsResponseBody = {
  configs?: {
    checkId?: string(name='CheckId', description='The unique identifier of the check.', example='xxx'),
    checkTime?: string(name='CheckTime', description='The time when the check was performed.', example='2023-08-07 15:30:00'),
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    tenantSecurityConfigs?: [ 
      {
        riskCount?: int32(name='RiskCount', description='The number of detected tenant security risks.', example='0'),
        securityConfigs?: [ 
          {
            configDescription?: string(name='ConfigDescription', description='The name of the check item.', example='Check whether the scope of the cluster allowlist is too big'),
            configGroup?: string(name='ConfigGroup', description='The group of the risk.', example='WHITELIST'),
            configName?: string(name='ConfigName', description='The name of the risk.', example='WHITELIST_RANGE_LARGE'),
            risk?: boolean(name='Risk', description='Indicates whether the risk causes security issues.', example='true'),
            riskDescription?: string(name='RiskDescription', description='The description of the risk.', example='The scope of the allowlist is too big.'),
          }
        ](name='SecurityConfigs', description='The list of risks.'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='xxx'),
        tenantName?: string(name='TenantName', description='The name of the tenant.', example='xxx'),
      }
    ](name='TenantSecurityConfigs', description='The check result.'),
    totalCheckCount?: int32(name='TotalCheckCount', description='The total number of security check items.', example='4'),
    totalRiskCount?: int32(name='TotalRiskCount', description='The total number of detected security risks.', example='0'),
  }(name='Configs', description='The list of parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='523E7183-****-590D-****-12DFD316614B'),
}

model DescribeTenantSecurityConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantSecurityConfigsResponseBody(name='body'),
}

async function describeTenantSecurityConfigs(request: DescribeTenantSecurityConfigsRequest): DescribeTenantSecurityConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantSecurityConfigs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantSecurityIpGroupsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model DescribeTenantSecurityIpGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469**-AA6F-4D**-B3DB-A***********'),
  securityIpGroups?: [ 
    {
      securityIpGroupName?: string(name='SecurityIpGroupName', description='The group name.', example='test1'),
      securityIpGroupType?: string(name='SecurityIpGroupType', description='The whitelist group type.
- instance: the whitelist group from the cluster.
- tenant: the whitelist group of the current tenant.', example='tenant'),
      securityIps?: string(name='SecurityIps', description='The whitelist of IP addresses. It is a string separated by commas, and each object is an IP string or a CIDR block.', example='192.***.*.*"'),
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****'),
    }
  ](name='SecurityIpGroups', description='The list of the whitelist groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of the whitelist groups.', example='2'),
}

model DescribeTenantSecurityIpGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantSecurityIpGroupsResponseBody(name='body'),
}

async function describeTenantSecurityIpGroups(request: DescribeTenantSecurityIpGroupsRequest): DescribeTenantSecurityIpGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantSecurityIpGroups', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantTagsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tags?: string(name='Tags', description='The tags.', example='[{"Key": "xxx", "Value", "xxx"}]', position='Body'),
  tenantIds: string(name='TenantIds', description='The JSON string of the tenant ID.', example='["t5r0x2f6q****", "t33h8y08k****", "t5r41rtl7****"]', position='Body'),
}

model DescribeTenantTagsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='ob317v4uif****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
      tag?: string(name='Tag', description='The tag of the resource.', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
    }
  ](name='TagResources', description='The list of tags.'),
}

model DescribeTenantTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantTagsResponseBody(name='body'),
}

async function describeTenantTags(request: DescribeTenantTagsRequest): DescribeTenantTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantTags', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantUserRolesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  tenantId?: string(name='TenantId', example='t4pnum****', position='Body'),
}

model DescribeTenantUserRolesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  role?: [ string ](name='Role'),
}

model DescribeTenantUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantUserRolesResponseBody(name='body'),
}

async function describeTenantUserRoles(request: DescribeTenantUserRolesRequest): DescribeTenantUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantUserRoles', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The database privileges of the account.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The return result of the request.', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='The return result of the request.', example='pay', position='Body'),
  tenantId: string(name='TenantId', description='The return result of the request.', example='ob2mr3oae0****', position='Body'),
  userName?: string(name='UserName', description='The operation that you want to perform.   
Set the value to **DescribeTenantUsers**.', example='pay_test', position='Body'),
}

model DescribeTenantUsersResponseBody = {
  requestId?: string(name='RequestId', description='The name of the database account.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUsers?: [ 
    {
      databases?: [ 
        {
          database?: string(name='Database', example='db_pay1'),
          privileges?: string(name='Privileges'),
          role?: string(name='Role', example='ReadOnly'),
          table?: string(name='Table', example='tbl_pay1'),
        }
      ](name='Databases'),
      description?: string(name='Description', example='use for test'),
      instanceId?: string(name='InstanceId', description='所属集群Id', example='obshc32****'),
      tenantId?: string(name='TenantId', description='所属租户Id', example='tshfs3****'),
      userName?: string(name='UserName', example='pay_test'),
      userStatus?: string(name='UserStatus', example='NORMAL'),
      userType?: string(name='UserType', example='NORMAL'),
    }
  ](name='TenantUsers', description='The type of the database account. Valid values:    
- Admin: the super administrator account.   
- NORMAL: a general account.'),
  totalCount?: int32(name='TotalCount', description='The role of the account.   
In Oracle mode, a role is a schema-level role. Valid values:  
- ReadWrite: a role that has the read and write privileges, including: CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SYNONYM, CREATE SEQUENCE, CREATE TRIGGER, CREATE TYPE, CREATE SESSION, EXECUTE ANY PROCEDURE, CREATE ANY OUTLINE, ALTER ANY OUTLINE, DROP ANY OUTLINE, CREATE ANY PROCEDURE, ALTER ANY PROCEDURE, DROP ANY PROCEDURE, CREATE ANY SEQUENCE, ALTER ANY SEQUENCE, DROP ANY SEQUENCE, CREATE ANY TYPE, ALTER ANY TYPE, DROP ANY TYPE, SYSKM, CREATE ANY TRIGGER, ALTER ANY TRIGGER, DROP ANY TRIGGER, CREATE PROFILE, ALTER PROFILE, and DROP PROFILE.  
- ReadOnly: a role that has only the read-only privilege SELECT.
In MySQL mode, a role is a database-level role. Valid values: 
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.   
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.   

> <br>By default, an Oracle account has the read and write privileges on its own schema, which are not listed here.', example='1'),
}

model DescribeTenantUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantUsersResponseBody(name='body'),
}

async function describeTenantUsers(request: DescribeTenantUsersRequest): DescribeTenantUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantZonesReadRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The zone information of the tenant.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The return result of the request.', example='ob2mr3oae0****', position='Body'),
}

model DescribeTenantZonesReadResponseBody = {
  requestId?: string(name='RequestId', description='Indicates whether a read-only connection needs to be created for the zone.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantZones?: [ 
    {
      isElectable?: boolean(name='IsElectable', description='Example 1', example='true'),
      isPrimary?: boolean(name='IsPrimary', example='true'),
      isReadable?: string(name='IsReadable', example='true'),
      zone?: string(name='Zone', example='cn-hangzhou-i'),
    }
  ](name='TenantZones', description='The request ID.'),
}

model DescribeTenantZonesReadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantZonesReadResponseBody(name='body'),
}

async function describeTenantZonesRead(request: DescribeTenantZonesReadRequest): DescribeTenantZonesReadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenantZonesRead', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTenantsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The number of used disks of the tenant.', example='ob317v4uif****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='You can call this operation to query the tenants in an OceanBase cluster.', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='The primary zone of the tenant.', example='pay', position='Body'),
  tenantId?: string(name='TenantId', description='Alibaba Cloud CLI', example='ob2mr3oae0****', position='Body'),
  tenantName?: string(name='TenantName', description='The information of tenants.', example='pay_online', position='Body'),
}

model DescribeTenantsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the tenant.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenants?: [ 
    {
      charset?: string(name='Charset', example='utf8mb4'),
      collation?: string(name='Collation', example='utf8mb4_general_ci'),
      cpu?: int32(name='Cpu', description='The total number of CPU cores of the tenant.', example='10'),
      createTime?: string(name='CreateTime', description='The number of CPU cores in each resource unit of the tenant.', example='2021-09-17 15:52:17.0'),
      deployMode?: string(name='DeployMode', description='The search keyword.', example='1-1-1'),
      deployType?: string(name='DeployType', description='The name of the tenant.   
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.', example='multiple'),
      description?: string(name='Description', description='Example 1', example='```
http(s)://[Endpoint]/?Action=DescribeTenants
&InstanceId=ob317v4uif****
&TenantName=pay_online
&PageSize=10
&PageNumber=1
&TenantId=ob2mr3oae0****
&SearchKey=pay
&Common request parameters
```'),
      enableReadOnlyReplica?: boolean(name='EnableReadOnlyReplica'),
      mem?: int32(name='Mem', description='The number of the page to return.   
Start value: 1
- Default value: 1', example='20'),
      primaryZone?: string(name='PrimaryZone', description='The return result of the request.', example='cn-hangzhou-i'),
      status?: string(name='Status', description='The status of the tenant.  <br>
- PENDING_CREATE: The tenant is being created.
- RESTORE: The tenant is being recovered.
- ONLINE: The tenant is running.
- SPEC_MODIFYING: The specification of the tenant is being modified.
ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.
PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.
- PARAMETER_MODIFYING: Parameters are being modified.
- WHITE_LIST_MODIFYING: The whitelist is being modified.', example='ONLINE'),
      tenantId?: string(name='TenantId', description='You can call this operation to query the tenants in an OceanBase cluster.', example='t33h8y08k****'),
      tenantMode?: string(name='TenantMode', description='{
    "TotalCount": 1,
    "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
    "Tenants": [
        {
            "VpcId": "vpc-bp1d2q3mhg9i23ofi****",
            "Status": "ONLINE",
            "PrimaryZone": "cn-hangzhou-i",
            "DeployType": "multiple",
            "DeployMode": "1-1-1",
            "CreateTime": "2021-09-17 15:52:17.0",
            "TenantName": "pay_online",
            "Mem": 20,
            "Cpu": 10,
            "Description": "PayCore business database",
            "TenantMode": "Oracle",
            "TenantId": "t33h8y08k****",
            "UnitCpu": 5,
            "UnitMem": 10,
            "UnitNum": 2,
            "UsedDiskSize": 10
        }
    ]
}', example='Oracle'),
      tenantName?: string(name='TenantName', description='The information of tenants.', example='pay_online'),
      unitCpu?: int32(name='UnitCpu', example='5'),
      unitMem?: int32(name='UnitMem', example='10'),
      unitNum?: int32(name='UnitNum', example='2'),
      usedDiskSize?: double(name='UsedDiskSize', example='10'),
      vpcId?: string(name='VpcId', description='The time when the tenant was created.', example='vpc-bp1d2q3mhg9i23ofi****'),
    }
  ](name='Tenants', description='The ID of the OceanBase cluster.'),
  totalCount?: int32(name='TotalCount', description='The total memory size of the tenant, in GB.', example='1'),
}

model DescribeTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTenantsResponseBody(name='body'),
}

async function describeTenants(request: DescribeTenantsRequest): DescribeTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTenants', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTimeZonesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeTimeZonesResponseBody = {
  requestId?: string(name='RequestId', description='DescribeTimeZones', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  timeZones?: {
    default?: string(name='Default', example='Asia/Shanghai'),
    list?: [ 
      {
        description?: string(name='Description', description='Example 1', example='(GMT+8:00) Asia/Shanghai'),
        timeZone?: string(name='TimeZone', description='The operation that you want to perform.   
Set the value to **DescribeTimeZones**.', example='Asia/Shanghai'),
      }
    ](name='List', description='The list of time zones.'),
  }(name='TimeZones', description='The description of the time zone.'),
}

model DescribeTimeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTimeZonesResponseBody(name='body'),
}

async function describeTimeZones(request: DescribeTimeZonesRequest): DescribeTimeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTimeZones', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTopSQLListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dbName?: string(name='DbName', description='The number of block index cache hits.', example='testdb', position='Body'),
  endTime: string(name='EndTime', description='The SQL type.', example='2021-09-13T15:40:43Z', position='Body'),
  filterCondition?: map[string]any(name='FilterCondition', description='The average number of logical reads of the SQL statement during the specified period of time.   
The value covers the numbers of reads of different caches and the number of disk I/Os. It is an important metric for measuring the SQL filtering performance.   

> <br> A higher ratio of the number of logical reads to the number of returned rows indicates poorer filtering performance. General causes include non-standard content written by SQL statements, non-standard table indexes created, and non-standard SQL execution plans.', example='[dbName:sys]', shrink='json', position='Body'),
  nodeIp?: string(name='NodeIp', description='The number of failures.', example='i-bp19y05uq6xpacyqnlrc', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The queuing time, in ms.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of row cache hits.', example='10', position='Body'),
  SQLId?: string(name='SQLId', description='The I/O wait time, in ms.', example='8D6E84****0B8FB1823D199E2CA1****', position='Body'),
  searchKeyWord?: string(name='SearchKeyWord', description='The number of retries.', example='update', position='Body'),
  searchParameter?: string(name='SearchParameter', description='SQLID.', example='cputime', position='Body'),
  searchRule?: string(name='SearchRule', description='The IP address of the client.', example='>', position='Body'),
  searchValue?: string(name='SearchValue', description='The number of Bloom filter cache hits.', example='0.01', position='Body'),
  sortColumn?: string(name='SortColumn', description='The number of rows read from the disk.', example='cputime', position='Body'),
  sortOrder?: string(name='SortOrder', description='The list of top SQL statements.', example='desc', position='Body'),
  startTime: string(name='StartTime', description='The maximum response time, in ms.', example='2021-06-13T15:40:43Z', position='Body'),
  tenantId: string(name='TenantId', description='The average CPU time, in ms.', example='t2mr3oae0****', position='Body'),
}

model DescribeTopSQLListResponseBody = {
  requestId?: string(name='RequestId', description='Alibaba Cloud CLI', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  topSQLList?: [ 
    {
      affectedRows?: long(name='AffectedRows', description='The internal wait time, in ms.', example='0'),
      appWaitTime?: float(name='AppWaitTime', description='The wait time in concurrent execution, in ms.', example='0.0'),
      blockCacheHit?: long(name='BlockCacheHit', description='The average CPU time, in ms.', example='14'),
      blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='$.parameters[16].schema.example', example='4'),
      bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='$.parameters[14].schema.enumValueTitles', example='0'),
      clientIp?: string(name='ClientIp', description='$.parameters[14].schema.description', example='1*2.***.1*3.***'),
      concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The number of rows returned.', example='0.0'),
      cpuTime?: float(name='CpuTime', description='The maximum CPU time, in ms.', example='50.13'),
      dbName?: string(name='DbName', description='The number of remote plans.', example='testdb'),
      decodeTime?: float(name='DecodeTime', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='0.0'),
      diskRead?: long(name='DiskRead', description='The IP address of the client.', example='0'),
      elapsedTime?: float(name='ElapsedTime', description='The sorting rule.', example='76.382'),
      event?: string(name='Event', description='The number of rows read from the disk.', example='mysql response wait client'),
      execPerSecond?: float(name='ExecPerSecond', description='The operation that you want to perform.   
Set the value to **DescribeTopSQLList**.', example='163.0'),
      executeTime?: float(name='ExecuteTime', description='The number of rows read from the memory.', example='61.044'),
      executions?: long(name='Executions', description='The number of executions per second.', example='89403'),
      failTimes?: long(name='FailTimes', description='$.parameters[12].schema.description', example='0'),
      getPlanTime?: float(name='GetPlanTime', description='The queuing time, in ms.', example='0.052'),
      IOWaitTime?: float(name='IOWaitTime', description='$.parameters[15].schema.example', example='0.0'),
      key?: long(name='Key', description='The name of the database.', example='1'),
      logicalRead?: long(name='LogicalRead', description='You can call this operation to query SQL execution performance data collected by the diagnostic system.', example='19'),
      maxCpuTime?: float(name='MaxCpuTime', description='SQLID.', example='257.967'),
      maxElapsedTime?: float(name='MaxElapsedTime', description='The sequence number of the returned SQL statement.', example='260.044'),
      memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The name of the database.', example='527'),
      missPlans?: long(name='MissPlans', description='The total count.', example='0'),
      netWaitTime?: float(name='NetWaitTime', description='The end time of the time range for querying TOP SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='0.0'),
      nodeIp?: string(name='NodeIp', description='The username.', example='i-bp18qljorblo8es*****'),
      queueTime?: float(name='QueueTime', description='$.parameters[12].schema.enumValueTitles', example='15.275'),
      RPCCount?: long(name='RPCCount', description='The start time of the time range for querying TOP SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='0'),
      remotePlans?: long(name='RemotePlans', description='The return result of the request.', example='0'),
      retryCount?: long(name='RetryCount', description='$.parameters[13].schema.description', example='0'),
      returnRows?: long(name='ReturnRows', description='The wait event.', example='1'),
      rowCacheHit?: long(name='RowCacheHit', description='```
http(s)://[Endpoint]/?Action=DescribeTopSQLList
&TenantId=t2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-09-13 15:40:43
&DbName=testdb
&SearchKeyWord=update
&SearchParameter=cputime
&SearchRule=>
&SearchValue=0.01
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&NodeIp=i-bp19y05uq6xpacyqnlrc
&PageNumber=1
&PageSize=10
&SortColumn=cputime
&SortOrder=desc
&Common request parameters
```', example='0'),
      SQLId?: string(name='SQLId', description='$.parameters[13].schema.example', example='8D6E84****0B8FB1823D199E2CA1****'),
      SQLText?: string(name='SQLText', description='The list of top SQL statements.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      SQLType?: long(name='SQLType', description='The request ID.', example='1'),
      scheduleTime?: float(name='ScheduleTime', description='The search keyword.', example='0.0'),
      ssstoreReadRowCount?: long(name='SsstoreReadRowCount', example='43086'),
      totalWaitTime?: float(name='TotalWaitTime', description='-', example='10.966'),
      userName?: string(name='UserName', description='The number of Bloom filter cache hits.', example='tester'),
    }
  ](name='TopSQLList', description='The I/O wait time, in ms.'),
  totalCount?: long(name='TotalCount', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='9'),
}

model DescribeTopSQLListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTopSQLListResponseBody(name='body'),
}

async function describeTopSQLList(request: DescribeTopSQLListRequest): DescribeTopSQLListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTopSQLList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  cpuArch?: string(name='CpuArch', example='x86', position='Body'),
  deployType?: string(name='DeployType', description='The operation that you want to perform.   
Set the value to **DescribeZones**.', example='single', position='Body'),
  series?: string(name='Series', description='The deployment mode.', example='NORMAL', position='Body'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='```
http(s)://[Endpoint]/?Action=DescribeZones
&Series=normal
&DeployType=single
&Common request parameters
```', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  zones?: [ 
    {
      deployType?: string(name='DeployType', example='1-1-1'),
      series?: string(name='Series', example='NORMAL'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i,cn-hangzhou-j,cn-hangzhou-h'),
      zoneName?: string(name='ZoneName', example='H/I/J'),
    }
  ](name='Zones', description='You can call this operation to learn of zones where a cluster can be created in an Alibaba Cloud region.'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', true, 'form', request);
}

model GetUploadOssUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  effectiveTimeMinutes?: int32(name='EffectiveTimeMinutes', example='10', position='Body'),
  type: string(name='Type', example='CREATE_PROJECT', position='Body'),
}

model GetUploadOssUrlResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='278'),
  data?: {
    expectedExpirationTime?: string(name='ExpectedExpirationTime', example='2023-07-26T06:33:11.175'),
    ossKey?: string(name='OssKey', example='open_api_create_project/oacp_4xd****vk'),
    ossUrl?: string(name='OssUrl', example='https://cn-hangzhou-pre-omsstore.oss-cn-hangzhou.aliyuncs.com/open_api_create_project/oacp_4x****pvk?Expires=169031&OSSAccessKeyId=LTAI5tMN52D***TBf&Signature=XdDFPz%2BXKC***%2B'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='null'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='11'),
}

model GetUploadOssUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadOssUrlResponseBody(name='body'),
}

async function getUploadOssUrl(request: GetUploadOssUrlRequest): GetUploadOssUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUploadOssUrl', 'POST', '/', 'json', true, 'form', request);
}

model KillProcessListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  sessionList: string(name='SessionList', description='The list of the sessions that need to be closed.', example='[{"ServerIp":"192.168.13.119","SessionId":"3221614618"}]', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model KillProcessListResponseBody = {
  data?: [ 
    {
      clientIp?: string(name='ClientIp', description='The client IP address.', example='127.0.0.1'),
      command?: string(name='Command', description='The start command for the container of the application.', example='select 1'),
      database?: string(name='Database', description='The name of the database.', example='test'),
      errorMessage?: string(name='ErrorMessage', description='The error message.', example='Instance not found.'),
      executeTime?: string(name='ExecuteTime', description='Execution time (UTC+8). If it is left empty, it means to execute immediately.', example='142'),
      serverIp?: string(name='ServerIp', description='The IP address of the server.', example='127.0.0.1'),
      sessionId?: long(name='SessionId', description='The ID of the session.', example='1123'),
      sqlText?: string(name='SqlText', description='The SQL statement.', example=':'),
      status?: string(name='Status', description='The status of the task.', example='SLEEP'),
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t3ogqv07a56n4'),
      user?: string(name='User', description='The database username.', example='oas'),
    }
  ](name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model KillProcessListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KillProcessListResponseBody(name='body'),
}

async function killProcessList(request: KillProcessListRequest): KillProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillProcessList', 'POST', '/', 'json', true, 'form', request);
}

model ListAllLabelsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListAllLabelsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: [ 
    {
      id?: string(name='Id', example='l_4w6r0***'),
      name?: string(name='Name', example='test'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='29'),
}

model ListAllLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAllLabelsResponseBody(name='body'),
}

async function listAllLabels(request: ListAllLabelsRequest): ListAllLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAllLabels', 'POST', '/', 'json', false, 'json', request);
}

model ListDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  order?: string(name='Order', example='descend', position='Body'),
  pageNumber?: string(name='PageNumber', example='1', position='Body'),
  pageSize?: string(name='PageSize', example='10', minLength=1, maxLength=150, position='Body'),
  searchKey?: string(name='SearchKey', example='GRATI****89278244', position='Body'),
  sortField?: string(name='SortField', example='gmtCreate', position='Body'),
  types?: [ string ](name='Types', shrink='json', position='Body'),
}

model ListDataSourceResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='28'),
  data?: [ 
    {
      charset?: string(name='Charset', example='utf8mb4'),
      cluster?: string(name='Cluster', example='cluster_name'),
      connExtraAttributes?: any(name='ConnExtraAttributes', example='null'),
      description?: string(name='Description', example='test'),
      gmtCreate?: string(name='GmtCreate', example='2023-07-13T20:27:28.000+00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-13T20:37:28.000+00:00'),
      id?: string(name='Id', example='e_4w****v'),
      ip?: string(name='Ip', example='xxx.xxx.xxx.1'),
      name?: string(name='Name', example='RATION***1DBUTF11'),
      operatingSystem?: string(name='OperatingSystem', example='Linux'),
      oracleNlsLengthSemantics?: string(name='OracleNlsLengthSemantics', example='null'),
      oracleSid?: string(name='OracleSid', example='null'),
      owner?: string(name='Owner', example='admin'),
      partnerId?: string(name='PartnerId', example='null'),
      port?: int32(name='Port', example='2883'),
      region?: string(name='Region', example='cn-beijing'),
      resourceOwner?: string(name='ResourceOwner', example='178641****05809'),
      role?: string(name='Role', example='MASTER'),
      schema?: string(name='Schema', example='schema_name'),
      tenant?: string(name='Tenant', example='tenant_name'),
      timezone?: string(name='Timezone', example='+08:00'),
      type?: string(name='Type', example='MYSQL_PUBLIC'),
      userName?: string(name='UserName', example='user_name'),
      version?: string(name='Version', example='4.1.0'),
      vpcId?: string(name='VpcId', example='vpc_t4***'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='132'),
}

model ListDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceResponseBody(name='body'),
}

async function listDataSource(request: ListDataSourceRequest): ListDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSource', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectFullVerifyResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  destSchemas?: [ string ](name='DestSchemas', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=150, position='Body'),
  projectId: string(name='ProjectId', example='np_4w5abs****', position='Body'),
  sourceSchemas?: [ string ](name='SourceSchemas', shrink='json', position='Body'),
  status?: string(name='Status', example='FINISHED', position='Body'),
}

model ListProjectFullVerifyResultResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: {
    differentNumber?: long(name='DifferentNumber', example='11'),
    fullVerifyTableStatistics?: [ 
      {
        consistentCount?: long(name='ConsistentCount', example='200'),
        destOnlyCount?: long(name='DestOnlyCount', example='0'),
        destSchemaName?: string(name='DestSchemaName', example='dest_db'),
        errorDetails?: [ 
          {
            code?: string(name='Code', example='CM-RESOAT1111'),
            extraContext?: map[string]any(name='ExtraContext'),
            level?: string(name='Level', example='ERROR'),
            message?: string(name='Message', example='null'),
            messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
            messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
            proposal?: string(name='Proposal', example='null'),
            proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
            proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
            reason?: string(name='Reason', example='null'),
            reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
            reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
            upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
          }
        ](name='ErrorDetails'),
        message?: string(name='Message', example='null'),
        mismatchedCount?: long(name='MismatchedCount', example='0'),
        progress?: string(name='Progress', example='80'),
        resultDesc?: string(name='ResultDesc', example='desc'),
        resultType?: string(name='ResultType', example='RUNNING'),
        sourceOnlyCount?: long(name='SourceOnlyCount', example='0'),
        sourceSchemaName?: string(name='SourceSchemaName', example='source_db'),
        sourceTableName?: string(name='SourceTableName', example='source_table'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='FullVerifyTableStatistics'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListProjectFullVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectFullVerifyResultResponseBody(name='body'),
}

async function listProjectFullVerifyResult(request: ListProjectFullVerifyResultRequest): ListProjectFullVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectFullVerifyResult', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectModifyRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_598jmu****', position='Body'),
}

model ListProjectModifyRecordsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='30'),
  data?: [ 
    {
      databases?: [ 
        {
          id?: string(name='Id', example='db_id'),
          mappedName?: string(name='MappedName', example='mapped_db'),
          name?: string(name='Name', example='db_name'),
          specificTables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: int32(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              columns?: [ 
                {
                  columnComment?: string(name='ColumnComment', example='comments'),
                  columnKey?: string(name='ColumnKey', example='PRI'),
                  columnName?: string(name='ColumnName', example='col_name'),
                  columnType?: string(name='ColumnType', example='FLOAT'),
                  dataLength?: long(name='DataLength', example='null'),
                  dataPrecision?: int32(name='DataPrecision', example='64'),
                  dataScale?: int32(name='DataScale', example='null'),
                  defaultValue?: string(name='DefaultValue', example='null'),
                  encoding?: string(name='Encoding', example='utf16'),
                  isGenerateField?: boolean(name='IsGenerateField', example='false'),
                  mappedName?: string(name='MappedName', example='mapped_name'),
                  nullable?: boolean(name='Nullable', example='false'),
                  position?: int32(name='Position', example='null'),
                  rawColumnType?: string(name='RawColumnType', example='null'),
                  recordFieldType?: string(name='RecordFieldType', example='INT8'),
                  type?: string(name='Type', example='DATABASE'),
                }
              ](name='Columns'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_name'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id<3'),
            }
          ](name='SpecificTables'),
          specificViews?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: int32(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              columns?: [ 
                {
                  columnComment?: string(name='ColumnComment', example='comments'),
                  columnKey?: string(name='ColumnKey', example='PRI'),
                  columnName?: string(name='ColumnName', example='col_name'),
                  columnType?: string(name='ColumnType', example='FLOAT'),
                  dataLength?: long(name='DataLength', example='null'),
                  dataPrecision?: int32(name='DataPrecision', example='64'),
                  dataScale?: int32(name='DataScale', example='null'),
                  defaultValue?: string(name='DefaultValue', example='null'),
                  encoding?: string(name='Encoding', example='utf16'),
                  isGenerateField?: boolean(name='IsGenerateField', example='false'),
                  mappedName?: string(name='MappedName', example='mapped_name'),
                  nullable?: boolean(name='Nullable', example='true'),
                  position?: int32(name='Position', example='null'),
                  rawColumnType?: string(name='RawColumnType', example='null'),
                  recordFieldType?: string(name='RecordFieldType', example='INT8'),
                  type?: string(name='Type', example='DATABASE'),
                }
              ](name='Columns'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_name'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id < 1'),
            }
          ](name='SpecificViews'),
          tables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: int32(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              columns?: [ 
                {
                  columnComment?: string(name='ColumnComment', example='comments'),
                  columnKey?: string(name='ColumnKey', example='PRI'),
                  columnName?: string(name='ColumnName', example='col_name'),
                  columnType?: string(name='ColumnType', example='FLOAT'),
                  dataLength?: long(name='DataLength', example='null'),
                  dataPrecision?: int32(name='DataPrecision', example='64'),
                  dataScale?: int32(name='DataScale', example='null'),
                  defaultValue?: string(name='DefaultValue', example='null'),
                  encoding?: string(name='Encoding', example='utf8'),
                  isGenerateField?: boolean(name='IsGenerateField', example='false'),
                  mappedName?: string(name='MappedName', example='mapped_col'),
                  nullable?: boolean(name='Nullable', example='true'),
                  position?: int32(name='Position', example='null'),
                  rawColumnType?: string(name='RawColumnType', example='null'),
                  recordFieldType?: string(name='RecordFieldType', example='INT8'),
                  type?: string(name='Type', example='DATABASE'),
                }
              ](name='Columns'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_name'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id < 1'),
            }
          ](name='Tables'),
          views?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys'),
                partitionLifeCycle?: int32(name='PartitionLifeCycle', example='30'),
                partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys'),
              }(name='AdbTableSchema'),
              columns?: [ 
                {
                  columnComment?: string(name='ColumnComment', example='comments'),
                  columnKey?: string(name='ColumnKey', example='PRI'),
                  columnName?: string(name='ColumnName', example='col_name'),
                  columnType?: string(name='ColumnType', example='FLOAT'),
                  dataLength?: long(name='DataLength', example='null'),
                  dataPrecision?: int32(name='DataPrecision', example='64'),
                  dataScale?: int32(name='DataScale', example='null'),
                  defaultValue?: string(name='DefaultValue', example='null'),
                  encoding?: string(name='Encoding', example='utf16'),
                  isGenerateField?: boolean(name='IsGenerateField', example='false'),
                  mappedName?: string(name='MappedName', example='mapped_name'),
                  nullable?: boolean(name='Nullable', example='false'),
                  position?: int32(name='Position', example='null'),
                  rawColumnType?: string(name='RawColumnType', example='null'),
                  recordFieldType?: string(name='RecordFieldType', example='INT8'),
                  type?: string(name='Type', example='DATABASE'),
                }
              ](name='Columns'),
              filterColumns?: [ string ](name='FilterColumns'),
              id?: string(name='Id', example='table_id'),
              mappedName?: string(name='MappedName', example='mapped_view'),
              name?: string(name='Name', example='table_name'),
              shardColumns?: [ string ](name='ShardColumns'),
              whereClause?: string(name='WhereClause', example='id<1'),
            }
          ](name='Views'),
        }
      ](name='Databases'),
      errorDetail?: {
        code?: string(name='Code', example='INNER_ERROR'),
        extraContext?: map[string]any(name='ExtraContext'),
        level?: string(name='Level', example='ERROR'),
        message?: string(name='Message', example='A system error occurred.'),
        messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
        messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
        proposal?: string(name='Proposal', example='null'),
        proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
        proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
        reason?: string(name='Reason', example='null'),
        reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
        reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
        upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
      }(name='ErrorDetail'),
      gmtModified?: string(name='GmtModified', example='2023-07-13T06:26:15'),
      id?: long(name='Id', example='344000005'),
      mergeRequestId?: long(name='MergeRequestId', example='id'),
      migrationObjectsInfo?: {
        tables?: [ 
          {
            name?: string(name='Name', example='table_name'),
            schema?: string(name='Schema', example='schema_name'),
          }
        ](name='Tables'),
        tablesBlack?: [ 
          {
            name?: string(name='Name', example='table_name'),
            schema?: string(name='Schema', example='schema_name'),
          }
        ](name='TablesBlack'),
        views?: [ 
          {
            name?: string(name='Name', example='view_name'),
            schema?: string(name='Schema', example='schema_name'),
          }
        ](name='Views'),
        viewsBlack?: [ 
          {
            name?: string(name='Name', example='view_name'),
            schema?: string(name='Schema', example='schema_name'),
          }
        ](name='ViewsBlack'),
        wildcardMode?: boolean(name='WildcardMode', example='true'),
      }(name='MigrationObjectsInfo'),
      omsProjectMappingInfo?: {
        columnMappings?: [ 
          {
            destName?: string(name='DestName', example='dest_name'),
            sourceName?: string(name='SourceName', example='source_name'),
            sourceSchema?: string(name='SourceSchema', example='source_schema'),
            sourceTable?: string(name='SourceTable', example='source_table'),
          }
        ](name='ColumnMappings'),
        schemaMappings?: [ 
          {
            destName?: string(name='DestName', example='mapped_schema'),
            sourceName?: string(name='SourceName', example='source_name'),
          }
        ](name='SchemaMappings'),
        tableMappings?: [ 
          {
            destName?: string(name='DestName', example='dest_name'),
            sourceName?: string(name='SourceName', example='source_name'),
            sourceSchema?: string(name='SourceSchema', example='source_schema'),
          }
        ](name='TableMappings'),
        viewMappings?: [ 
          {
            destName?: string(name='DestName', example='dest_name'),
            sourceName?: string(name='SourceName', example='source_name'),
            sourceSchema?: string(name='SourceSchema', example='schema_name'),
          }
        ](name='ViewMappings'),
      }(name='OmsProjectMappingInfo'),
      status?: string(name='Status', example='PENDING'),
      subProjectId?: string(name='SubProjectId', example='np_598qm***'),
      tableEtlList?: [ 
        {
          database?: string(name='Database', example='db_name'),
          destDatabase?: string(name='DestDatabase', example='dest_db'),
          destName?: string(name='DestName', example='dest_name'),
          filterColumns?: [ string ](name='FilterColumns'),
          logicTableId?: string(name='LogicTableId', example='null'),
          shardColumns?: [ string ](name='ShardColumns'),
          sourceEndpointId?: string(name='SourceEndpointId', example='null'),
          tableName?: string(name='TableName', example='table_name'),
          tenantName?: string(name='TenantName', example='tenant_name'),
          whereClause?: string(name='WhereClause', example='id>1'),
        }
      ](name='TableEtlList'),
      type?: string(name='Type', example='INCREASE_OBJECT'),
      updateRequestId?: long(name='UpdateRequestId', example='id'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='INNER_ERROR'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListProjectModifyRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectModifyRecordsResponseBody(name='body'),
}

async function listProjectModifyRecords(request: ListProjectModifyRecordsRequest): ListProjectModifyRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectModifyRecords', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectsRequest {
  regionId?: string(name='RegionId', position='Host'),
  labelIds?: [ string ](name='LabelIds', shrink='json', position='Body'),
  needRelatedInfo?: boolean(name='NeedRelatedInfo', position='Body'),
  order?: string(name='Order', example='descend', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=150, position='Body'),
  searchKey?: string(name='SearchKey', example='np_4w****', position='Body'),
  sinkEndpointTypes?: [ string ](name='SinkEndpointTypes', shrink='json', position='Body'),
  sortField?: string(name='SortField', example='gmtCreate', position='Body'),
  sourceEndpointTypes?: [ string ](name='SourceEndpointTypes', shrink='json', position='Body'),
  status?: [ string ](name='Status', shrink='json', position='Body'),
  type?: string(name='Type', example='MIGRATION', position='Body'),
  visibleSubProject?: boolean(name='VisibleSubProject', example='false', position='Body'),
}

model ListProjectsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: [ 
    {
      alarmStats?: {
        alarmContent?: string(name='AlarmContent', example='null'),
        alarming?: boolean(name='Alarming', example='false'),
        openMonitor?: boolean(name='OpenMonitor', example='true'),
        recentlyTriggerCount?: int32(name='RecentlyTriggerCount', example='0'),
        ruleToRecentlyTriggerCount?: map[string]int32(name='RuleToRecentlyTriggerCount'),
        target?: string(name='Target', example='null'),
      }(name='AlarmStats'),
      commonTransferConfig?: {
        activeActive?: boolean(name='ActiveActive', example='false'),
        dataWorksBusinessName?: string(name='DataWorksBusinessName', example='null'),
        datahubTopicType?: string(name='DatahubTopicType', example='TUPLE'),
        mqPartition?: int32(name='MqPartition', example='0'),
        mqPartitionMode?: string(name='MqPartitionMode', example='ONE'),
        mqSerializerType?: string(name='MqSerializerType', example='DEFAULT'),
        rocketMqEnableMsgTrace?: boolean(name='RocketMqEnableMsgTrace', example='false'),
        rocketMqMsgTags?: string(name='RocketMqMsgTags', example='default_tag'),
        rocketMqProducerGroup?: string(name='RocketMqProducerGroup', example='OMS'),
        rocketMqSendMsgTimeout?: long(name='RocketMqSendMsgTimeout', example='null'),
        tableCategory?: string(name='TableCategory', example='ALL'),
      }(name='CommonTransferConfig'),
      destConnId?: string(name='DestConnId', example='null'),
      enableFullTransfer?: boolean(name='EnableFullTransfer', example='true'),
      enableFullVerify?: boolean(name='EnableFullVerify', example='true'),
      enableIncrTransfer?: boolean(name='EnableIncrTransfer', example='true'),
      enableIncrVerify?: boolean(name='EnableIncrVerify', example='true'),
      enableReverseIncrTransfer?: boolean(name='EnableReverseIncrTransfer', example='true'),
      enableStructTransfer?: boolean(name='EnableStructTransfer', example='true'),
      extraInfo?: {
        accessObSource?: boolean(name='AccessObSource', example='true'),
        ignoreUnsupportDdl?: boolean(name='IgnoreUnsupportDdl', example='true'),
        incrSyncTimestamp?: long(name='IncrSyncTimestamp', example='1689244596'),
        logServiceStartCheckpoint?: long(name='LogServiceStartCheckpoint', example='1689214358'),
        maxConnectorCount?: int32(name='MaxConnectorCount', example='-1'),
        monitoringIncr?: boolean(name='MonitoringIncr', example='true'),
        overwriteConfig?: boolean(name='OverwriteConfig', example='true'),
        reverseSubtopics?: [ string ](name='ReverseSubtopics'),
        runningProgress?: int32(name='RunningProgress', example='90'),
        runningStep?: string(name='RunningStep', example='TRANSFER_PRECHECK'),
        sourceStoreKeptHour?: int32(name='SourceStoreKeptHour', example='24'),
        storeIncr?: boolean(name='StoreIncr', example='true'),
        subConds?: map[string][ DataExtraInfoSubCondsValue         ](name='SubConds'),
        subDbs?: map[string][ DataExtraInfoSubDbsValue         ](name='SubDbs'),
        subIds?: map[string]string(name='SubIds'),
        subtopics?: [ string ](name='Subtopics'),
        syncDelay?: long(name='SyncDelay', example='null'),
        syncDelaySampleTimestamp?: long(name='SyncDelaySampleTimestamp', example='1689214358'),
      }(name='ExtraInfo'),
      fullTransferConfig?: {
        allowDestTableNotEmpty?: boolean(name='AllowDestTableNotEmpty', example='false'),
        fullTransferSpeedMode?: string(name='FullTransferSpeedMode', example='NORMAL'),
        fullVerifySpeedMode?: string(name='FullVerifySpeedMode', example='NORMAL'),
        nonePkUkTruncateDstTable?: boolean(name='NonePkUkTruncateDstTable', example='false'),
      }(name='FullTransferConfig'),
      gmtCreate?: string(name='GmtCreate', example='2023-07-13T06:26:15'),
      gmtFinish?: string(name='GmtFinish', example='2023-07-13T08:01:27'),
      gmtModified?: string(name='GmtModified', example='2023-07-13T07:01:27'),
      gmtStart?: string(name='GmtStart', example='2023-07-13T07:02:27'),
      id?: string(name='Id', example='np_4w****'),
      importance?: string(name='Importance', example='MEDIUM'),
      incrTransferConfig?: {
        enableIncrSyncStatistics?: boolean(name='EnableIncrSyncStatistics', example='true'),
        enableSequencingWithinTxn?: boolean(name='EnableSequencingWithinTxn', example='true'),
        incrSyncConcurrency?: int32(name='IncrSyncConcurrency', example='64'),
        recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
        startTimestamp?: long(name='StartTimestamp', example='1681004708'),
        storeLogKeptHour?: int32(name='StoreLogKeptHour', example='24'),
      }(name='IncrTransferConfig'),
      isMerging?: boolean(name='IsMerging', example='false'),
      isModifying?: boolean(name='IsModifying', example='false'),
      isSubProject?: boolean(name='IsSubProject', example='false'),
      labels?: [ 
        {
          count?: int32(name='Count', example='2'),
          creator?: string(name='Creator', example='admin'),
          id?: string(name='Id', example='l_dfe****'),
          name?: string(name='Name', example='label_name'),
          type?: int32(name='Type', example='1'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='project_name'),
      owner?: string(name='Owner', example='admin'),
      sinkConnectInfo?: {
        charset?: string(name='Charset', example='utf8mb4'),
        connExtraAttributes?: any(name='ConnExtraAttributes', example='null'),
        connectionInfo?: string(name='ConnectionInfo', example='null'),
        dbEngine?: string(name='DbEngine', example='MYSQL_PUBLIC'),
        endpointId?: string(name='EndpointId', example='e_4w3aic***'),
        endpointName?: string(name='EndpointName', example='ation129***9apimysql5616****'),
        endpointSide?: string(name='EndpointSide', example='sink'),
        host?: string(name='Host', example='xxx.xxx.xxx.1'),
        id?: string(name='Id', example='c_4w3akx***'),
        nlsLengthSemantics?: string(name='NlsLengthSemantics', example='null'),
        ocpName?: string(name='OcpName', example='null'),
        operatingSystem?: string(name='OperatingSystem', example='Linux'),
        owner?: string(name='Owner', description='Owner。', example='admin'),
        port?: int32(name='Port', example='2883'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceOwner?: string(name='ResourceOwner', example='1325847***'),
        timezone?: string(name='Timezone', example='+08:00'),
        username?: string(name='Username', example='oms**obmys**'),
        version?: string(name='Version', example='2.2.77'),
      }(name='SinkConnectInfo'),
      sinkEndpointType?: string(name='SinkEndpointType', example='OB_MYSQL'),
      sourceConnectInfo?: {
        charset?: string(name='Charset', example='utf8mb4'),
        connExtraAttributes?: any(name='ConnExtraAttributes', example='null'),
        connectionInfo?: string(name='ConnectionInfo', example='null'),
        dbEngine?: string(name='DbEngine', example='OB_MYSQL_PUBLIC'),
        endpointId?: string(name='EndpointId', example='e_4w3al***'),
        endpointName?: string(name='EndpointName', example='ration12****0obmysql4116892***'),
        endpointSide?: string(name='EndpointSide', example='source'),
        host?: string(name='Host', example='xxx.xxx.xxx.1'),
        id?: string(name='Id', example='c_4w3aq****'),
        nlsLengthSemantics?: string(name='NlsLengthSemantics', example='null'),
        ocpName?: string(name='OcpName', example='null'),
        operatingSystem?: string(name='OperatingSystem', example='Linux'),
        owner?: string(name='Owner', description='Owner。', example='admin'),
        port?: int32(name='Port', example='2883'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceOwner?: string(name='ResourceOwner', example='1325847***'),
        timezone?: string(name='Timezone', example='UTC'),
        username?: string(name='Username', example='oms931mys**'),
        version?: string(name='Version', example='5.7.27'),
      }(name='SourceConnectInfo'),
      sourceEndpointType?: string(name='SourceEndpointType', example='MYSQL'),
      status?: string(name='Status', example='RUNNING'),
      steps?: [ 
        {
          description?: string(name='Description'),
          extraInfo?: {
            errorCode?: string(name='ErrorCode', example='INNER_ERROR'),
            errorDetails?: [ 
              {
                code?: string(name='Code', example='CM-RESOAT1111'),
                extraContext?: map[string]any(name='ExtraContext'),
                level?: string(name='Level', example='ERROR'),
                message?: string(name='Message', example='A system error occurred.'),
                messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
                messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
                proposal?: string(name='Proposal', example='Contact the administrator.'),
                proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
                proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
                reason?: string(name='Reason', example='null'),
                reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
                reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
                upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
              }
            ](name='ErrorDetails'),
            errorMsg?: string(name='ErrorMsg', example='A system error occurred.'),
            errorParam?: map[string]string(name='ErrorParam'),
            failedTime?: string(name='FailedTime', example='null'),
          }(name='ExtraInfo'),
          finishTime?: string(name='FinishTime', example='2020-05-22T17:05:18'),
          name?: string(name='Name', example='TRANSFER_PRECHECK'),
          order?: int32(name='Order', example='1'),
          progress?: int32(name='Progress', example='100'),
          startTime?: string(name='StartTime', example='2020-05-22T17:04:18'),
          status?: string(name='Status', example='RUNNING'),
          stepInfo?: map[string]any(name='StepInfo', example='null'),
        }
      ](name='Steps'),
      structTransferConfig?: {
        byteCharConvertStrategy?: string(name='ByteCharConvertStrategy', example='DO_NOTHING_IF_BYTE_USED'),
        deferIndexCreation?: boolean(name='DeferIndexCreation', example='false'),
      }(name='StructTransferConfig'),
      transferMapping?: {
        mode?: string(name='Mode', example='SPECIFIC'),
      }(name='TransferMapping'),
      type?: string(name='Type', example='MIGRATION'),
      workerGradeId?: string(name='WorkerGradeId', example='g_i4wa7XXX'),
      workerGradeInfo?: {
        autoRenewal?: boolean(name='AutoRenewal'),
        chargeType?: string(name='ChargeType'),
        destRegion?: string(name='DestRegion'),
        destType?: string(name='DestType'),
        endTime?: string(name='EndTime'),
        expired?: boolean(name='Expired'),
        gmtCreate?: string(name='GmtCreate'),
        grade?: string(name='Grade'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        sourceRegion?: string(name='SourceRegion'),
        sourceType?: string(name='SourceType'),
        spec?: string(name='Spec'),
        specName?: string(name='SpecName'),
      }(name='WorkerGradeInfo'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='4'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjects', 'POST', '/', 'json', true, 'form', request);
}

model ListWorkerInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  destType?: string(name='DestType', example='KAFKA', position='Body'),
  instanceName?: string(name='InstanceName', example='i4katz****', position='Body'),
  onlyBindable?: boolean(name='OnlyBindable', example='true', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  sourceType?: string(name='SourceType', example='OCEANBASE', position='Body'),
  specs?: [ string ](name='Specs', shrink='json', position='Body'),
}

model ListWorkerInstancesResponseBody = {
  advice?: string(name='Advice', example='null'),
  code?: string(name='Code', example='200'),
  cost?: string(name='Cost', example='71'),
  data?: [ 
    {
      gmtCreate?: string(name='GmtCreate', example='2023-07-14T20:49:53'),
      id?: string(name='Id', example='g_i4katzv***'),
      name?: string(name='Name', example='i4wa71k****'),
      projectId?: string(name='ProjectId', example='np_4kb18w****'),
      projectName?: string(name='ProjectName', example='j_migration_cloud-kafkavpc-ob'),
      projectType?: string(name='ProjectType', example='MIGRATION'),
      region?: string(name='Region', example='null'),
      spec?: string(name='Spec', example='oms.g2m.small'),
      status?: string(name='Status', example='ONLINE'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='200'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='FATAL'),
    message?: string(name='Message', example='successful'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='successful'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='237'),
}

model ListWorkerInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkerInstancesResponseBody(name='body'),
}

async function listWorkerInstances(request: ListWorkerInstancesRequest): ListWorkerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkerInstances', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDatabaseDescriptionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  databaseName: string(name='DatabaseName', description='Example 1', example='sms_pre', position='Body'),
  description: string(name='Description', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', description='The description of the database.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The operation that you want to perform.   
Set the value to **ModifyDatabaseDescription**.', example='ob2mr3oae0****', position='Body'),
}

model ModifyDatabaseDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyDatabaseDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseDescription', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDatabaseUserRolesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  databaseName: string(name='DatabaseName', description='The ID of the tenant.', example='sms_pre', position='Body'),
  instanceId?: string(name='InstanceId', description='The account information.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='A list of usernames and their respective roles.', example='ob2mr3oae0****', position='Body'),
  users: string(name='Users', description='The ID of the OceanBase cluster.', example='[{"UserName":"omstest","Role":"readwrite"}]', position='Body'),
}

model ModifyDatabaseUserRolesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    databaseName?: string(name='DatabaseName', description='Example 1', example='sms_pre'),
    tenantId?: string(name='TenantId', example='t33h8y08k****'),
    users?: [ 
      {
        role?: string(name='Role', example='ReadOnly'),
        userName?: string(name='UserName', example='user_pay_ro'),
      }
    ](name='Users'),
  }(name='TenantUser', description='The name of the database.'),
}

model ModifyDatabaseUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatabaseUserRolesResponseBody(name='body'),
}

async function modifyDatabaseUserRoles(request: ModifyDatabaseUserRolesRequest): ModifyDatabaseUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseUserRoles', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceNameRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='ob317v4uif****', position='Body'),
  instanceName: string(name='InstanceName', description='The ID of the OceanBase cluster.', example='ob4prod', position='Body'),
}

model ModifyInstanceNameResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **ModifyInstanceName**.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceNameResponseBody(name='body'),
}

async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceNodeNumRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
- true: Only a dry-run request is sent and the number of nodes in the instance is not modified. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
- false: The actual request is sent and no dry run is performed. The number of nodes is changed if the requirements are met. By default, the DryRunResult parameter returns false if you set DryRun to false.', example='true', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  nodeNum: string(name='NodeNum', description='The number of nodes in the cluster. If the cluster is deployed in n-n-n mode, the number of nodes in the cluster equals n × 3.', example='6', position='Body'),
}

model ModifyInstanceNodeNumResponseBody = {
  data?: {
    dryRunResult?: boolean(name='DryRunResult', description='The result of the dry-run request.
- If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
- If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.', example='false'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='2132903*********'),
  }(name='Data', description='The return result of the request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model ModifyInstanceNodeNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceNodeNumResponseBody(name='body'),
}

async function modifyInstanceNodeNum(request: ModifyInstanceNodeNumRequest): ModifyInstanceNodeNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceNodeNum', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceSSLRequest {
  regionId?: string(name='RegionId', position='Host'),
  enableSSL: string(name='EnableSSL', description='The operation to modify the SSL status. Valid values:

- open: Enable SSL encryption.

- update: Update the CA certificate.

- close: Disable SSL encryption.', example='open', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
}

model ModifyInstanceSSLResponseBody = {
  instanceSSL?: {
    enableSSL?: string(name='EnableSSL', description='The operation to modify the SSL status. Valid values:

- open: Enable SSL encryption.

- update: Update the CA certificate.

- close: Disable SSL encryption.', example='open'),
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
  }(name='InstanceSSL', description='The SSL setting of the OceanBase cluster instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model ModifyInstanceSSLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceSSLResponseBody(name='body'),
}

/**
  * There is currently no authorization information disclosed in the API.
  *
 */
async function modifyInstanceSSL(request: ModifyInstanceSSLRequest): ModifyInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSSL', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceSpecRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  diskSize?: long(name='DiskSize', description='The size of the storage space, in GB. The required storage space varies based on the cluster specifications:
- 8C32G: 100 GB to 10 TB.
- 14C70G: 200 GB to 10 TB.
- 30C180G: 400 GB to 10 TB.
- 62C400G: 800 GB to 10 TB. The preceding minimum storage space sizes are the default storage space sizes of the corresponding cluster specification plans.', example='200', position='Body'),
  diskType?: string(name='DiskType', description='Disk type.', example='cloud_essd_pl1', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
- true: Only a dry-run request is sent and the instance settings are not modified. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
- false: If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.', example='false', position='Body'),
  instanceClass?: string(name='InstanceClass', description='The specifications of the cluster. You can specify one of the following four plans:
- 8C32GB: indicates 8 CPU cores and 32 GB of memory.
- 14C70GB: indicates 14 CPU cores and 70 GB of memory. This is the default value.
- 30C180GB: indicates 30 CPU cores and 180 GB of memory.
- 62C400GB: indicates 62 CPU cores and 400 GB of memory.', example='14C70GB', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob3h8ytroxxxxx', position='Body'),
  upgradeSpecNative?: boolean(name='UpgradeSpecNative', position='Body'),
}

model ModifyInstanceSpecResponseBody = {
  data?: {
    dryRunResult?: boolean(name='DryRunResult', description='The result of the dry-run request.
- If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
- If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.', example='false'),
    orderId?: string(name='OrderId', description='The ID of the order that you have placed.', example='213290*********'),
  }(name='Data', description='The return data of the request.', example='1234567890'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
}

model ModifyInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSpec', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceTagsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tags: string(name='Tags', description='The tags.', example='[{"Key": "xxx", "Value", "xxx"},{}]', position='Body'),
}

model ModifyInstanceTagsResponseBody = {
  message?: string(name='Message', description='The tag modification result.', example='done'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceTagsResponseBody(name='body'),
}

async function modifyInstanceTags(request: ModifyInstanceTagsRequest): ModifyInstanceTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceTags', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceTemporaryCapacityRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  diskSize?: string(name='DiskSize', description='The disk size. Unit: GB.', example='400', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  spec: string(name='Spec', description='Specification.', example='oceanbase.cluster.i2.small', position='Body'),
}

model ModifyInstanceTemporaryCapacityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceTemporaryCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceTemporaryCapacityResponseBody(name='body'),
}

async function modifyInstanceTemporaryCapacity(request: ModifyInstanceTemporaryCapacityRequest): ModifyInstanceTemporaryCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceTemporaryCapacity', 'POST', '/', 'json', true, 'form', request);
}

model ModifyParametersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  dimension: string(name='Dimension', description='The ID of the OceanBase cluster.', example='TENANT', position='Body'),
  dimensionValue?: string(name='DimensionValue', description='The cause of the modification failure.', example='ob2mr3oae0****', position='Body'),
  instanceId: string(name='InstanceId', description='Alibaba Cloud CLI', example='ob317v4uif****', position='Body'),
  parameters: string(name='Parameters', description='The resource ID of the parameter type.    
You can leave this parameter unspecified when you call this operation to modify cluster parameters. In the case of tenant parameters, pass the tenant ID.', example='[{"Name":"connect_timeout","Value":"20"}]', position='Body'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **ModifyParameters**.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  results?: {
    message?: string(name='Message', example='schedule timeout.'),
    success?: boolean(name='Success', example='false'),
  }(name='Results', description='Example 1'),
}

model ModifyParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyParametersResponseBody(name='body'),
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameters', 'POST', '/', 'json', true, 'form', request);
}

model ModifySecurityIpsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName?: string(name='SecurityIpGroupName', description='The information of the IP address whitelist group.', example='paytest', position='Body'),
  securityIps?: string(name='SecurityIps', description='The list of IP addresses and CIDR blocks in the whitelist.   
It is a JSON array. Each object in the array is an IP address or CIDR block. You can specify at most 40 IP addresses or CIDR blocks.', example='["192.168.0.0/20","192.169.1.1"]', position='Body'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='online_paycore'),
    securityIps?: string(name='SecurityIps', example='121.41.106.33,100.104.7.0/26'),
  }(name='SecurityIpGroup', description='Example 1'),
}

model ModifySecurityIpsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTagNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  key: string(name='Key', description='The name of the tag group.', example='Tag group 1', position='Body'),
  newKey: string(name='NewKey', description='The new name of the tag group.', example='Tag group 2', position='Body'),
}

model ModifyTagNameResponseBody = {
  message?: string(name='Message', description='The tag group renaming result.', example='update tag name success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model ModifyTagNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTagNameResponseBody(name='body'),
}

async function modifyTagName(request: ModifyTagNameRequest): ModifyTagNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTagName', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTagValueNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  key: string(name='Key', description='The name of the tag group.', example='Tag group 1', position='Body'),
  newValue: string(name='NewValue', description='The new name of the tag.', example='Tag 2', position='Body'),
  value: string(name='Value', description='The name of the tag.', example='Tag 1', position='Body'),
}

model ModifyTagValueNameResponseBody = {
  message?: string(name='Message', description='The tag renaming result.', example='update tag-value name success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C91F7BA-xxxx-xxxx-xxxx-846ECA1A9908'),
}

model ModifyTagValueNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTagValueNameResponseBody(name='body'),
}

async function modifyTagValueName(request: ModifyTagValueNameRequest): ModifyTagValueNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTagValueName', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantEncryptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  encryptionKeyId?: string(name='EncryptionKeyId', example='key-shh322****470h8v0-g2ll85****', position='Body'),
  encryptionType: string(name='EncryptionType', example='EncryptionKey', position='Body'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', example='ob2mr3oae0****', position='Body'),
}

model ModifyTenantEncryptionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  tenantEncryption?: {
    encryptionType?: string(name='EncryptionType', example='EncryptionKey'),
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    tenantId?: string(name='TenantId', example='ob2mr3oae0****'),
  }(name='TenantEncryption', description='job'),
}

model ModifyTenantEncryptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantEncryptionResponseBody(name='body'),
}

async function modifyTenantEncryption(request: ModifyTenantEncryptionRequest): ModifyTenantEncryptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantEncryption', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantPrimaryZoneRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The primary zone of the tenant.    
It is one of the zones in which the cluster is deployed.', example='ob317v4uif****', position='Body'),
  masterIntranetAddressZone?: string(name='MasterIntranetAddressZone', description='```
http(s)://[Endpoint]/?Action=ModifyTenantPrimaryZone
&TenantId=ob2mr3oae0****
&InstanceId=ob317v4uif****
&PrimaryZone=cn-hangzhou-h
&Common request parameters
```', example='cn-hangzhou-h', position='Body'),
  primaryZone?: string(name='PrimaryZone', description='The ID of the vSwitch.', example='cn-hangzhou-h', position='Body'),
  tenantEndpointDirectId?: string(name='TenantEndpointDirectId', position='Body'),
  tenantEndpointId?: string(name='TenantEndpointId', example='obe-4tw51gp7****', position='Body'),
  tenantId: string(name='TenantId', description='The return result of the request.', example='ob2mr3oae0****', position='Body'),
  userDirectVSwitchId?: string(name='UserDirectVSwitchId', position='Body'),
  userVSwitchId?: string(name='UserVSwitchId', description='The request ID.', example='vsw-xxx', position='Body'),
  userVpcOwnerId?: string(name='UserVpcOwnerId', position='Body'),
  vpcId?: string(name='VpcId', position='Body'),
}

model ModifyTenantPrimaryZoneResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantPrimaryZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantPrimaryZoneResponseBody(name='body'),
}

async function modifyTenantPrimaryZone(request: ModifyTenantPrimaryZoneRequest): ModifyTenantPrimaryZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantPrimaryZone', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantResourceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  cpu: int32(name='Cpu', description='The information about the CPU resources of the tenant.', example='2', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  logDisk?: long(name='LogDisk', description='The size of the log disk allocated to the tenant, in GB.', example='128', position='Body'),
  memory: int32(name='Memory', description='The memory size of the tenant, in GB.', example='2', position='Body'),
  readOnlyZoneList?: string(name='ReadOnlyZoneList', description='Specifies to create a read-only zone. Separate the names of multiple zones with commas (,).', example='cn-shanghai-g-ro,cn-shanghai-h-ro', deprecated='true', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
}

model ModifyTenantResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****'),
}

model ModifyTenantResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantResourceResponseBody(name='body'),
}

async function modifyTenantResource(request: ModifyTenantResourceRequest): ModifyTenantResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantResource', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantSecurityIpGroupRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  securityIpGroupName: string(name='SecurityIpGroupName', description='The group name of the whitelist group of IP addresses.

It starts with lowercase letters and ends with lowercase letters or numbers. It can only contain lowercase letters, numbers, and underscores, and should be 2~32 characters in length.', example='paytest', position='Body'),
  securityIps: string(name='SecurityIps', description='The list of IP addresses in the whitelist group.

It is a JSON array. Each object in the array is an IP address or a CIDR block. You can have up to 40 whitelists.', example='192.***.*.*"', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****', position='Body'),
}

model ModifyTenantSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='paytest'),
    securityIps?: string(name='SecurityIps', description='The list of IP addresses in the IP address whitelist group.

It is a string separated by commas, and each object is an IP address or a CIDR block.', example='192.***.*.*'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****'),
  }(name='SecurityIpGroup', description='The information of the IP address whitelist group.'),
}

model ModifyTenantSecurityIpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantSecurityIpGroupResponseBody(name='body'),
}

async function modifyTenantSecurityIpGroup(request: ModifyTenantSecurityIpGroupRequest): ModifyTenantSecurityIpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantSecurityIpGroup', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantTagsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tags: string(name='Tags', description='The tags.', example='[{"Key": "xxx", "Value", "xxx"}]', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='t33h8y08k****', position='Body'),
}

model ModifyTenantTagsResponseBody = {
  message?: string(name='Message', description='The tag modification result.', example='done'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantTagsResponseBody(name='body'),
}

async function modifyTenantTags(request: ModifyTenantTagsRequest): ModifyTenantTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantTags', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserDescriptionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  description: string(name='Description', description='The operation that you want to perform.   
Set the value to **ModifyTenantUserDescription**.', example='this is a test database', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The description of the database.', example='pay_test', position='Body'),
}

model ModifyTenantUserDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='You can call this operation to modify the description of a specified account in a tenant.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantUserDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantUserDescriptionResponseBody(name='body'),
}

async function modifyTenantUserDescription(request: ModifyTenantUserDescriptionRequest): ModifyTenantUserDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserDescription', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserPasswordRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  encryptionType?: string(name='EncryptionType', description='加密方式。', example='RSA', position='Body'),
  instanceId: string(name='InstanceId', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='```
http(s)://[Endpoint]/?Action=ModifyTenantUserPassword
&UserName=pay_test
&TenantId=ob2mr3oae0****
&UserPassword=!Aliyun4Oceanbase
&InstanceId=ob317v4uif****
&Common request parameters
```', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The ID of the OceanBase cluster.', example='pay_test', position='Body'),
  userPassword: string(name='UserPassword', description='You can call this operation to change the logon password of a specified account in a tenant.', example='!Aliyun4Oceanbase', position='Body'),
}

model ModifyTenantUserPasswordResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantUserPasswordResponseBody(name='body'),
}

async function modifyTenantUserPassword(request: ModifyTenantUserPasswordRequest): ModifyTenantUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserRolesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The type of the privilege modification operation.   
Valid values:  
update: updates all privileges. This is the default value.  
add: adds a privilege.  
delete: deletes a privilege.', example='ob317v4uif****', position='Body'),
  modifyType?: string(name='ModifyType', description='The name of the table.', example='update', position='Body'),
  tenantId: string(name='TenantId', description='The operation that you want to perform.   
Set the value to **ModifyTenantUserRoles**.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The role of the database account.', example='pay_test', position='Body'),
  userRole: string(name='UserRole', description='The type of the account. Valid values:   
- Admin: the super administrator account.   
- Normal: a general account.', example='[{"Database":"20210824160559","Role":"readwrite"}]', position='Body'),
}

model ModifyTenantUserRolesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    tenantId?: string(name='TenantId', example='t33h8y08k****'),
    userName?: string(name='UserName', example='pay_test'),
    userRole?: [ 
      {
        database?: string(name='Database', description='```
http(s)://[Endpoint]/?Action=ModifyTenantUserRoles
&UserName=pay_test
&TenantId=ob2mr3oae0****
&UserRole=[{"Database":"20210824160559","Role":"readwrite"}]
&InstanceId=ob317v4uif****
&ModifyType=update
&Common request parameters
```', example='db_pay1'),
        isSuccess?: boolean(name='IsSuccess', example='true'),
        role?: string(name='Role', description='You can call this operation to modify the database privileges of a specified account in a tenant.', example='ReadOnly'),
        table?: string(name='Table', example='tbl_pay1'),
      }
    ](name='UserRole', description='The name of the database (MySQL mode) or schema (Oracle mode).', example='账号具备的数据库权限信息列表。'),
  }(name='TenantUser', description='The ID of the tenant.'),
}

model ModifyTenantUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantUserRolesResponseBody(name='body'),
}

async function modifyTenantUserRoles(request: ModifyTenantUserRolesRequest): ModifyTenantUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserRoles', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantUserStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', description='The operation that you want to perform.   
Set the value to **ModifyTenantUserStatus**.', example='ob317v4uif****', position='Body'),
  tenantId: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****', position='Body'),
  userName: string(name='UserName', description='The list of database accounts in the tenant.', example='pay_test', position='Body'),
  userStatus: string(name='UserStatus', description='The status of the database account. Valid values:   
- Locked: The account is locked. 
- Online: The account is unlocked.', example='The ID of the tenant.', position='Body'),
}

model ModifyTenantUserStatusResponseBody = {
  requestId?: string(name='RequestId', description='Example 1', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: [ 
    {
      tenantId?: string(name='TenantId', example='t33h8y08k****'),
      userName?: string(name='UserName', example='pay_test'),
      userStatus?: string(name='UserStatus', example='LOCKED'),
    }
  ](name='TenantUser'),
}

model ModifyTenantUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantUserStatusResponseBody(name='body'),
}

async function modifyTenantUserStatus(request: ModifyTenantUserStatusRequest): ModifyTenantUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantUserStatus', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model ReleaseProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='50'),
}

model ReleaseProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseProjectResponseBody(name='body'),
}

async function releaseProject(request: ReleaseProjectRequest): ReleaseProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseProject', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseWorkerInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='g_abcdefj***', position='Body'),
}

model ReleaseWorkerInstanceResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='30'),
  data?: string(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ReleaseWorkerInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseWorkerInstanceResponseBody(name='body'),
}

async function releaseWorkerInstance(request: ReleaseWorkerInstanceRequest): ReleaseWorkerInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseWorkerInstance', 'POST', '/', 'json', true, 'form', request);
}

model ResumeProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model ResumeProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='50'),
}

model ResumeProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeProjectResponseBody(name='body'),
}

async function resumeProject(request: ResumeProjectRequest): ResumeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeProject', 'POST', '/', 'json', true, 'form', request);
}

model RetryProjectModifyRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='344000005', position='Body'),
}

model RetryProjectModifyRecordsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='30'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='200'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model RetryProjectModifyRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryProjectModifyRecordsResponseBody(name='body'),
}

async function retryProjectModifyRecords(request: RetryProjectModifyRecordsRequest): RetryProjectModifyRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryProjectModifyRecords', 'POST', '/', 'json', true, 'form', request);
}

model StartProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model StartProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: string(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='INNER_ERROR'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='XCVSADG****DSGDS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model StartProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartProjectResponseBody(name='body'),
}

async function startProject(request: StartProjectRequest): StartProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartProject', 'POST', '/', 'json', true, 'form', request);
}

model StartProjectsByLabelRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='l_****', position='Body'),
}

model StartProjectsByLabelResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: {
    failedProjectIds?: [ string ](name='FailedProjectIds'),
    succeedProjectIds?: [ string ](name='SucceedProjectIds'),
    total?: int32(name='Total', example='20'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='null'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='79'),
}

model StartProjectsByLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartProjectsByLabelResponseBody(name='body'),
}

async function startProjectsByLabel(request: StartProjectsByLabelRequest): StartProjectsByLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartProjectsByLabel', 'POST', '/', 'json', true, 'form', request);
}

model StopProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='np_4w3a****', position='Body'),
}

model StopProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='27 ms'),
  data?: string(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='INNER_ERROR'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469**-AA6F-4D**-B3DB-A***********'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model StopProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopProjectResponseBody(name='body'),
}

async function stopProject(request: StopProjectRequest): StopProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopProject', 'POST', '/', 'json', true, 'form', request);
}

model StopProjectModifyRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='344000005', position='Body'),
}

model StopProjectModifyRecordsResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='30'),
  data?: any(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='INNER_ERROR'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model StopProjectModifyRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopProjectModifyRecordsResponseBody(name='body'),
}

async function stopProjectModifyRecords(request: StopProjectModifyRecordsRequest): StopProjectModifyRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopProjectModifyRecords', 'POST', '/', 'json', true, 'form', request);
}

model StopProjectsByLabelRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='l_****', position='Body'),
}

model StopProjectsByLabelResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: {
    failedProjectIds?: [ string ](name='FailedProjectIds'),
    succeedProjectIds?: [ string ](name='SucceedProjectIds'),
    total?: int32(name='Total', example='16'),
  }(name='Data'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='ERROR'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A595F34C-XXXX-5D0C-8DA8-B3ED76'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='140'),
}

model StopProjectsByLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopProjectsByLabelResponseBody(name='body'),
}

async function stopProjectsByLabel(request: StopProjectsByLabelRequest): StopProjectsByLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopProjectsByLabel', 'POST', '/', 'json', true, 'form', request);
}

model SwitchoverInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  forced?: boolean(name='Forced', description='Whether to force the switchover.
- true: Force the switchover.
- false: Do not force the switchover.', example='true', position='Body'),
  instanceId: string(name='InstanceId', description='The instance ID of the primary/standby instance. You can set the default value to the instance ID of the instance to be switched to the primary instance.', example='ob317v4uif****', position='Body'),
  targetInstanceId: string(name='TargetInstanceId', description='The instance ID of the instance to be switched to the primary instance.', example='ob4bv8o7sp****', position='Body'),
}

model SwitchoverInstanceResponseBody = {
  data?: {
    message?: string(name='Message', description='The message of the switchover.', example='delete tag-value success'),
    success?: boolean(name='Success', description='Whether the switchover is successful.
- true: the switchover succeeded.
- false: the switchover failed.', example='true'),
  }(name='Data', description='The list of data for the switchover.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469**-AA6F-4D**-B3DB-A***********'),
}

model SwitchoverInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchoverInstanceResponseBody(name='body'),
}

async function switchoverInstance(request: SwitchoverInstanceRequest): SwitchoverInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchoverInstance', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProjectConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  commonTransferConfig?: {
    sinkStoreFormat?: string(name='SinkStoreFormat'),
    sourceStoreFormat?: string(name='SourceStoreFormat'),
  }(name='CommonTransferConfig', shrink='json', position='Body'),
  fullTransferConfig?: {
    readWorkerNum?: int32(name='ReadWorkerNum', example='64'),
    throttleIOPS?: int32(name='ThrottleIOPS', example='null'),
    throttleRps?: int32(name='ThrottleRps', example='null'),
    writeWorkerNum?: int32(name='WriteWorkerNum', example='64'),
  }(name='FullTransferConfig', shrink='json', position='Body'),
  id: string(name='Id', example='np_fe****', position='Body'),
  incrTransferConfig?: {
    incrSyncThreadCount?: int32(name='IncrSyncThreadCount', example='64'),
    recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
    supportDDLTypes?: [ string ](name='SupportDDLTypes'),
    throttleIOPS?: int32(name='ThrottleIOPS', example='null'),
    throttleRps?: int32(name='ThrottleRps', example='null'),
  }(name='IncrTransferConfig', shrink='json', position='Body'),
  reverseIncrTransferConfig?: {
    incrSyncThreadCount?: int32(name='IncrSyncThreadCount', example='64'),
    recordTypeWhiteList?: [ string ](name='RecordTypeWhiteList'),
    supportDDLTypes?: [ string ](name='SupportDDLTypes'),
    throttleIOPS?: int32(name='ThrottleIOPS', example='null'),
    throttleRps?: int32(name='ThrottleRps', example='null'),
  }(name='ReverseIncrTransferConfig', shrink='json', position='Body'),
}

model UpdateProjectConfigResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: string(name='Data', example='null'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT1111'),
    extraContext?: map[string]any(name='ExtraContext'),
    level?: string(name='Level', example='WARN'),
    message?: string(name='Message', example='A system error occurred.'),
    messageMcmsContext?: map[string]string(name='MessageMcmsContext'),
    messageMcmsKey?: string(name='MessageMcmsKey', example='null'),
    proposal?: string(name='Proposal'),
    proposalMcmsContext?: map[string]string(name='ProposalMcmsContext'),
    proposalMcmsKey?: string(name='ProposalMcmsKey', example='null'),
    reason?: string(name='Reason', example='null'),
    reasonMcmsContext?: map[string]string(name='ReasonMcmsContext'),
    reasonMcmsKey?: string(name='ReasonMcmsKey', example='null'),
    upstreamErrorDetail?: any(name='UpstreamErrorDetail', example='null'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model UpdateProjectConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectConfigResponseBody(name='body'),
}

async function updateProjectConfig(request: UpdateProjectConfigRequest): UpdateProjectConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProjectConfig', 'POST', '/', 'json', true, 'form', request);
}

model DataExtraInfoSubCondsValue = {
  tenantName?: string(name='TenantName', example='tenant_name'),
  database?: string(name='Database', example='db_name'),
  destDatabase?: string(name='DestDatabase', example='dest_db'),
  tableName?: string(name='TableName', example='table_name'),
  destName?: string(name='DestName', example='dest_name'),
  whereClause?: string(name='WhereClause', example='id>1'),
  filterColumns?: [ string ](name='FilterColumns'),
  shardColumns?: [ string ](name='ShardColumns'),
  logicTableId?: string(name='LogicTableId', example='null'),
  sourceEndpointId?: string(name='SourceEndpointId', example='null'),
  sourceClientId?: string(name='SourceClientId', example='null'),
}

model DataExtraInfoSubDbsValue = {
  clusterName?: string(name='ClusterName', example='cluster_name'),
  tenantName?: string(name='TenantName', example='tenant_name'),
  databaseId?: string(name='DatabaseId', example='null'),
  databaseName?: string(name='DatabaseName', example='db_name'),
  mappingDatabaseName?: string(name='MappingDatabaseName', example='mapped_db'),
  sourceClientId?: string(name='SourceClientId', example='null'),
  tables?: [ 
    {
      tableId?: string(name='TableId', example='fexg***'),
      database?: string(name='Database', example='db_name'),
      tableName?: string(name='TableName', example='table_name'),
      mappingTableName?: string(name='MappingTableName', example='mapped_table'),
      instance?: string(name='Instance', example='g_i4kat***'),
      columns?: [ 
        {
          columnName?: string(name='ColumnName', example='null'),
          position?: int32(name='Position', example='null'),
          columnType?: string(name='ColumnType', example='null'),
          recordFieldType?: string(name='RecordFieldType', example='null'),
          rawColumnType?: string(name='RawColumnType', example='null'),
          columnKey?: string(name='ColumnKey', example='null'),
          nullable?: boolean(name='Nullable', example='true'),
          defaultValue?: string(name='DefaultValue', example='null'),
          dataLength?: long(name='DataLength', example='null'),
          dataPrecision?: int32(name='DataPrecision', example='64'),
          dataScale?: int32(name='DataScale', example='null'),
          encoding?: string(name='Encoding', example='utf8'),
          columnComment?: string(name='ColumnComment', example='comments'),
          isGenerateField?: boolean(name='IsGenerateField', example='false'),
        }
      ](name='Columns'),
    }
  ](name='Tables'),
}

