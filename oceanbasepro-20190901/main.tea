/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('oceanbasepro', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateDatabaseRequest {
  clientToken?: string(name='ClientToken', description='The name of the database.', example='123e4567-e89b-12d3-a456-426655440000'),
  collation?: string(name='Collation', description='The encoding standard of the database.
For more information, see the Charset field returned by the DescribeCharset operation.', example='utf8mb4_general_ci'),
  databaseName?: string(name='DatabaseName', description='Alibaba Cloud CLI', example='sms_pre'),
  description?: string(name='Description', description='The operation that you want to perform.   
Set the value to **CreateDatabase**.', example='this is a test database'),
  encoding?: string(name='Encoding', description='The ID of the tenant.', example='utf8mb4'),
  instanceId?: string(name='InstanceId', description='The collation.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='The name of the database.   
You cannot use reserved keywords, such as test and mysql.', example='ob2mr3oae0****'),
}

model CreateDatabaseResponseBody = {
  databaseName?: string(name='DatabaseName', description='CreateDatabase', example='sms_pre'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDatabaseResponseBody(name='body'),
}

async function createDatabaseWithOptions(request: CreateDatabaseRequest, runtime: Util.RuntimeOptions): CreateDatabaseResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.collation)) {
    body['Collation'] = request.collation;
  }
  if (!Util.isUnset(request.databaseName)) {
    body['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.encoding)) {
    body['Encoding'] = request.encoding;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatabase',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatabaseWithOptions(request, runtime);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable automatic renewal.   
This parameter is valid only when the ChargeType parameter is set to PrePaid. Valid values: 
- true: enables automatic renewal for the instance.   
- false: disables automatic renewal for the instance. This is the default value.', example='true'),
  autoRenewPeriod?: long(name='AutoRenewPeriod', description='The automatic renewal period of the instance. This parameter is required when the AutoRenew parameter is set to true. Valid values:  
- If the PeriodUnit parameter is set to Year: "1", "2", and "3".   
- If the PeriodUnit parameter is set to Month: "1", "2", "3", "6", and "12".', example='2'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:  
- PrePay: the subscription billing method. You must ensure that the remaining balance or credit balance of your account can cover the cost of the subscription. Otherwise, you will receive an InvalidPayMethod error. 
- PostPay: the pay-as-you-go billing method. This is the default value. By default, fees are charged on an hourly basis.', example='PrePay'),
  diskSize?: long(name='DiskSize', description='The size of the storage space,in GB.    
The limits on the storage space vary with the cluster specifications:   
- 8C32GB: 100 GB to 10000 GB   
- 14C70GB: 200 GB to 10000 GB   
- 30C180GB: 400 GB to 10000 GB   
- 62C400GB: 800 GB to 10000 GB    
The preceding minimum storage space sizes are the default storage space sizes of the corresponding cluster specification plans.', example='200'),
  diskType?: string(name='DiskType', description='The return result of the request.', example='cloud_essd_pl1'),
  instanceClass?: string(name='InstanceClass', description='The specifications of the cluster.     
You can specify one of the following four plans:   
 - 8C32GB: indicates 8 CPU cores and 32 GB of memory.    
 - 14C70GB: indicates 14 CPU cores and 70 GB of memory. This is the default value.
- 30C180GB: indicates 30 CPU cores and 180 GB of memory.     
- 62C400GB: indicates 62 CPU cores and 400 GB of memory.', example='14C70GB'),
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.    
It must be 1 to 20 characters in length.   
If this parameter is not specified, the value is the instance ID of the cluster by default.', example='amap_aos_tx_ob'),
  obVersion?: string(name='ObVersion', description='OceanBase Server version number.', example='2.2.77'),
  period?: long(name='Period', description='The valid duration of the purchased resources. The unit is specified by the PeriodUnit parameter.   
This parameter is valid and required only when the InstanceChargeType parameter is set to PrePaid.      
Valid values:     
- When the PeriodUnit parameter is set to Month: "1", "2", "3", "4", "5", "6", "7", "8", "9". 
- When the PeriodUnit parameter is set to Year: "1", "2", "3".', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the valid duration of the purchased resources.     
Valid value for subscription: Month or Year.
Default value: Month for subscription, and Hour for pay-as-you-go.', example='Month'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
  series?: string(name='Series', description='The series of the OceanBase cluster. Valid values:    
- normal: Standard Cluster Edition (Cloud Disk). This is the default value.
- normal_ssd: Standard Cluster Edition (Local Disk).
- history: History Database Cluster Edition.', example='Normal'),
  zones?: string(name='Zones', description='The ID of the zone to which the instance belongs.   
For more information about how to obtain the list of zones, see [DescribeZones](~~25610~~).', example='cn-hangzhou-h,cn-hangzhou-i,cn-hangzhou-j'),
}

model CreateInstanceResponseBody = {
  data?: {
    instanceId?: string(name='InstanceId', description='订单ID。该参数只有创建包年包月ECS实例（请求参数InstanceChargeType=PrePaid）时有返回值。', example='i-bp67acfmxazb4p****'),
    orderId?: string(name='OrderId', description='资源组ID', example='1234567890'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-***************'),
  }(name='Data', description='实例ID'),
  requestId?: string(name='RequestId', description='Response parameters', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    body['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.diskSize)) {
    body['DiskSize'] = request.diskSize;
  }
  if (!Util.isUnset(request.diskType)) {
    body['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.instanceClass)) {
    body['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.obVersion)) {
    body['ObVersion'] = request.obVersion;
  }
  if (!Util.isUnset(request.period)) {
    body['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.series)) {
    body['Series'] = request.series;
  }
  if (!Util.isUnset(request.zones)) {
    body['Zones'] = request.zones;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateOmsMysqlDataSourceRequest {
  description?: string(name='Description', example='oms测试mysql数据源'),
  dgDatabaseId?: string(name='DgDatabaseId', example='dg-yhss6sdlaff****'),
  instanceId?: string(name='InstanceId', example='pc-12ab34cd56******'),
  ip?: string(name='Ip', example='10.0.****'),
  name?: string(name='Name', description='```
http(s)://[Endpoint]/?Action=CreateOmsMysqlDataSource
&Name=oms-mysql
&Type=INTERNET
&VpcId=vpc-12345abcde*******
&InstanceId=pc-12ab34cd56******
&DgDatabaseId=dg-yhss6sdlaff****
&Ip=10.0.****
&Port=3306
&Schema=test
&Username=omsTestUser
&Password=YWJjZDEyM0Ah
&Description=MySQL data source for OMS testing
&Common request parameters
```', example='oms-mysql'),
  password?: string(name='Password', example='YWJjZDEyM0Ah'),
  port?: string(name='Port', example='3306'),
  schema?: string(name='Schema', example='test'),
  type?: string(name='Type', example='INTERNET'),
  username?: string(name='Username', example='omsTestUser'),
  vpcId?: string(name='VpcId', example='vpc-12345abcde*******'),
}

model CreateOmsMysqlDataSourceResponseBody = {
  data?: {
    endpointId?: string(name='EndpointId', example='e_1234abcd*****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateOmsMysqlDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOmsMysqlDataSourceResponseBody(name='body'),
}

/**
  * The description of the data source.   
  * It must be 2 to 256 characters in length. The default value is null.
  *
  * @param request CreateOmsMysqlDataSourceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOmsMysqlDataSourceResponse
 */
async function createOmsMysqlDataSourceWithOptions(request: CreateOmsMysqlDataSourceRequest, runtime: Util.RuntimeOptions): CreateOmsMysqlDataSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dgDatabaseId)) {
    body['DgDatabaseId'] = request.dgDatabaseId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.port)) {
    body['Port'] = request.port;
  }
  if (!Util.isUnset(request.schema)) {
    body['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.username)) {
    body['Username'] = request.username;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOmsMysqlDataSource',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The description of the data source.   
  * It must be 2 to 256 characters in length. The default value is null.
  *
  * @param request CreateOmsMysqlDataSourceRequest
  * @return CreateOmsMysqlDataSourceResponse
 */
async function createOmsMysqlDataSource(request: CreateOmsMysqlDataSourceRequest): CreateOmsMysqlDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOmsMysqlDataSourceWithOptions(request, runtime);
}

model CreateOmsOpenAPIProjectRequest {
  businessName?: string(name='BusinessName', example='OMS_TEST'),
  destConfig?: {
    enableMsgTrace?: boolean(name='EnableMsgTrace', example='false'),
    endpointId?: string(name='EndpointId', example='e_abcdefj'),
    endpointType?: string(name='EndpointType', example='OB_MYSQL'),
    msgTags?: string(name='MsgTags', example='tag1'),
    partition?: int32(name='Partition', example='0'),
    partitionMode?: string(name='PartitionMode', example='HASH'),
    producerGroup?: string(name='ProducerGroup', example='producer-group-1'),
    sendMsgTimeout?: long(name='SendMsgTimeout', example='10'),
    sequenceEnable?: boolean(name='SequenceEnable', example='false'),
    sequenceStartTimestamp?: long(name='SequenceStartTimestamp', example='1656510473'),
    serializerType?: string(name='SerializerType', example='DEFAULT'),
    topicType?: string(name='TopicType', example='TUPLE'),
  }(name='DestConfig'),
  labelIds?: [ string ](name='LabelIds'),
  pageNumber?: int32(name='PageNumber', description='页序号，分页查询时生效', example='1'),
  pageSize?: int32(name='PageSize', description='页大小，分页查询时生效', example='10'),
  projectName?: string(name='ProjectName', example='test-l'),
  sourceConfig?: {
    enableMsgTrace?: boolean(name='EnableMsgTrace', example='false'),
    endpointId?: string(name='EndpointId', example='e_abcdefj'),
    endpointType?: string(name='EndpointType', example='OB_MYSQL'),
    msgTags?: string(name='MsgTags', example='tag1'),
    partition?: int32(name='Partition', example='0'),
    partitionMode?: string(name='PartitionMode', example='HASH'),
    producerGroup?: string(name='ProducerGroup', example='producer-group-1'),
    sendMsgTimeout?: long(name='SendMsgTimeout', example='10'),
    sequenceEnable?: boolean(name='SequenceEnable', example='false'),
    sequenceStartTimestamp?: long(name='SequenceStartTimestamp', example='1656510473'),
    serializerType?: string(name='SerializerType', example='DEFAULT'),
    topicType?: string(name='TopicType', example='TUPLE'),
  }(name='SourceConfig'),
  transferMapping?: {
    databases?: [ 
      {
        databaseId?: string(name='DatabaseId', example='db_id1'),
        databaseName?: string(name='DatabaseName', example='db1'),
        mappedName?: string(name='MappedName', example='mapped_db'),
        tables?: [ 
          {
            adbTableSchema?: {
              distributedKeys?: [ string ](name='DistributedKeys'),
              partitionLifeCycle?: int32(name='PartitionLifeCycle', example='30'),
              partitionStatement?: string(name='PartitionStatement', example='PARTITION BY VALUE(\\"id\\")'),
              primaryKeys?: [ string ](name='PrimaryKeys'),
            }(name='AdbTableSchema'),
            filterColumns?: [ string ](name='FilterColumns'),
            mappedName?: string(name='MappedName', example='mapped_table'),
            shardColumns?: [ string ](name='ShardColumns'),
            tableId?: string(name='TableId', example='table_id'),
            tableName?: string(name='TableName', example='table'),
            type?: string(name='Type', example='DATABASE'),
            whereClause?: string(name='WhereClause', example='id > 1'),
          }
        ](name='Tables'),
        tenantName?: string(name='TenantName', example='tenant'),
        type?: string(name='Type', example='DATABASE'),
      }
    ](name='Databases'),
    mode?: string(name='Mode', example='NORMAL'),
  }(name='TransferMapping'),
  transferStepConfig?: {
    enableFullSync?: boolean(name='EnableFullSync', example='false'),
    enableIncrSync?: boolean(name='EnableIncrSync', example='false'),
    enableStructSync?: boolean(name='EnableStructSync', example='false'),
    incrSyncStepTransferConfig?: {
      recordTypeList?: [ string ](name='RecordTypeList'),
      startTimestamp?: long(name='StartTimestamp', example='1637568354'),
      storeLogKeptHour?: long(name='StoreLogKeptHour', example='1'),
      storeTransactionEnabled?: boolean(name='StoreTransactionEnabled', example='false'),
      transferStepType?: string(name='TransferStepType', example='STRUCT'),
    }(name='IncrSyncStepTransferConfig'),
  }(name='TransferStepConfig', example='OMS_TEST'),
  workerGradeId?: string(name='WorkerGradeId', description='实例规格 ID，创建项目时生效', example='g_abcd'),
}

model CreateOmsOpenAPIProjectShrinkRequest {
  businessName?: string(name='BusinessName', example='OMS_TEST'),
  destConfigShrink?: string(name='DestConfig'),
  labelIdsShrink?: string(name='LabelIds'),
  pageNumber?: int32(name='PageNumber', description='页序号，分页查询时生效', example='1'),
  pageSize?: int32(name='PageSize', description='页大小，分页查询时生效', example='10'),
  projectName?: string(name='ProjectName', example='test-l'),
  sourceConfigShrink?: string(name='SourceConfig'),
  transferMappingShrink?: string(name='TransferMapping'),
  transferStepConfigShrink?: string(name='TransferStepConfig', example='OMS_TEST'),
  workerGradeId?: string(name='WorkerGradeId', description='实例规格 ID，创建项目时生效', example='g_abcd'),
}

model CreateOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', example='Contact the administrator.'),
  code?: string(name='Code', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: string(name='Data', example='abcdg'),
  errorDetail?: {
    code?: string(name='Code', example='CM-RESOAT111111'),
    level?: string(name='Level', example='WARN'),
    message?: string(name='Message', example='A system error occurred.'),
    proposal?: string(name='Proposal', example='Contact the administrator.'),
  }(name='ErrorDetail'),
  message?: string(name='Message', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CreateOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOmsOpenAPIProjectResponseBody(name='body'),
}

async function createOmsOpenAPIProjectWithOptions(tmpReq: CreateOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): CreateOmsOpenAPIProjectResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOmsOpenAPIProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destConfig)) {
    request.destConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destConfig, 'DestConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.labelIds)) {
    request.labelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelIds, 'LabelIds', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceConfig)) {
    request.sourceConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceConfig, 'SourceConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.transferMapping)) {
    request.transferMappingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transferMapping, 'TransferMapping', 'json');
  }
  if (!Util.isUnset(tmpReq.transferStepConfig)) {
    request.transferStepConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transferStepConfig, 'TransferStepConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.destConfigShrink)) {
    body['DestConfig'] = request.destConfigShrink;
  }
  if (!Util.isUnset(request.labelIdsShrink)) {
    body['LabelIds'] = request.labelIdsShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceConfigShrink)) {
    body['SourceConfig'] = request.sourceConfigShrink;
  }
  if (!Util.isUnset(request.transferMappingShrink)) {
    body['TransferMapping'] = request.transferMappingShrink;
  }
  if (!Util.isUnset(request.transferStepConfigShrink)) {
    body['TransferStepConfig'] = request.transferStepConfigShrink;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOmsOpenAPIProject(request: CreateOmsOpenAPIProjectRequest): CreateOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOmsOpenAPIProjectWithOptions(request, runtime);
}

model CreateSecurityIpGroupRequest {
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
  securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the whitelist group.', example='pay_online'),
  securityIps?: string(name='SecurityIps', description='The return result of the request.', example='{"192.168.1.1","192.168.0.0.1/8"}'),
}

model CreateSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The IP addresses or CIDR blocks in the IP address whitelist group.   
The return values of SecurityIps are strings that are separated with commas (,).', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', description='```
http(s)://[Endpoint]/?Action=CreateSecurityIpGroup
&InstanceId=ob317v4uif****
&SecurityIps=192.168.1.1,192.168.0.0.1/8
&SecurityIpGroupName=pay_online
&Common request parameters
```', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', description='You can call this operation to create an IP address whitelist group.', example='pay_online'),
    securityIps?: string(name='SecurityIps', example='192.168.1.1,192.168.0.0.1/8'),
  }(name='SecurityIpGroup', description='The operation that you want to perform.   
Set the value to **CreateSecurityIpGroup**.'),
}

model CreateSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSecurityIpGroupResponseBody(name='body'),
}

async function createSecurityIpGroupWithOptions(request: CreateSecurityIpGroupRequest, runtime: Util.RuntimeOptions): CreateSecurityIpGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    body['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  if (!Util.isUnset(request.securityIps)) {
    body['SecurityIps'] = request.securityIps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecurityIpGroup',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSecurityIpGroup(request: CreateSecurityIpGroupRequest): CreateSecurityIpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityIpGroupWithOptions(request, runtime);
}

model CreateTenantRequest {
  charset?: string(name='Charset', description='The description of the database.', example='utf8mb4'),
  cpu?: int32(name='Cpu', description='The number of resource distribution nodes in the tenant.    
The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.', example='2'),
  description?: string(name='Description', description='$.parameters[13].schema.example', example='this is a test database'),
  instanceId?: string(name='InstanceId', description='The ID of the vSwitch.    
If no suitable vSwitch is available, create a vSwitch as prompted.   
For more information, see Use a vSwitch.', example='ob317v4uif****'),
  memory?: int32(name='Memory', description='The return result of the request.', example='10'),
  primaryZone?: string(name='PrimaryZone', description='$.parameters[12].schema.enumValueTitles', example='cn-hangzhou-h'),
  tenantMode?: string(name='TenantMode', description='The ID of the tenant.', example='Oracle'),
  tenantName?: string(name='TenantName', description='Alibaba Cloud CLI', example='pay_online'),
  timeZone?: string(name='TimeZone', description='The memory size of the tenant, in GB.   

> <br>The memory size of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the memory size of the tenant cannot exceed 70 GB.', example='Asia/Shanghai'),
  unitNum?: int32(name='UnitNum', description='$.parameters[11].schema.description', example='2'),
  userVSwitchId?: string(name='UserVSwitchId', description='$.parameters[12].schema.description', example='vsw-bp11k1aypnzu1l3whi****'),
  userVpcId?: string(name='UserVpcId', description='The time zone of the tenant.  For more information, see [DescribeTimeZones](https://help.aliyun.com/document_detail/410361.html).', example='vpc-bp1d2q3mhg9i23ofi****'),
}

model CreateTenantResponseBody = {
  requestId?: string(name='RequestId', description='WB01144930', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantId?: string(name='TenantId', description='You can call this operation to create a tenant.', example='t33h8y08k****'),
}

model CreateTenantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTenantResponseBody(name='body'),
}

async function createTenantWithOptions(request: CreateTenantRequest, runtime: Util.RuntimeOptions): CreateTenantResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.charset)) {
    body['Charset'] = request.charset;
  }
  if (!Util.isUnset(request.cpu)) {
    body['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.memory)) {
    body['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.primaryZone)) {
    body['PrimaryZone'] = request.primaryZone;
  }
  if (!Util.isUnset(request.tenantMode)) {
    body['TenantMode'] = request.tenantMode;
  }
  if (!Util.isUnset(request.tenantName)) {
    body['TenantName'] = request.tenantName;
  }
  if (!Util.isUnset(request.timeZone)) {
    body['TimeZone'] = request.timeZone;
  }
  if (!Util.isUnset(request.unitNum)) {
    body['UnitNum'] = request.unitNum;
  }
  if (!Util.isUnset(request.userVSwitchId)) {
    body['UserVSwitchId'] = request.userVSwitchId;
  }
  if (!Util.isUnset(request.userVpcId)) {
    body['UserVpcId'] = request.userVpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTenant',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTenant(request: CreateTenantRequest): CreateTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTenantWithOptions(request, runtime);
}

model CreateTenantReadOnlyConnectionRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', example='ob2mr3oae0****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CreateTenantReadOnlyConnectionResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model CreateTenantReadOnlyConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTenantReadOnlyConnectionResponseBody(name='body'),
}

async function createTenantReadOnlyConnectionWithOptions(request: CreateTenantReadOnlyConnectionRequest, runtime: Util.RuntimeOptions): CreateTenantReadOnlyConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTenantReadOnlyConnection',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTenantReadOnlyConnection(request: CreateTenantReadOnlyConnectionRequest): CreateTenantReadOnlyConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTenantReadOnlyConnectionWithOptions(request, runtime);
}

model CreateTenantSecurityIpGroupRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
  securityIps?: string(name='SecurityIps', example='192.***.*.*"'),
  tenantId?: string(name='TenantId', example='t4louaeei****'),
}

model CreateTenantSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
    securityIps?: string(name='SecurityIps', example='192.***.*.*'),
    tenantId?: string(name='TenantId', example='t4louaeei****'),
  }(name='SecurityIpGroup'),
}

model CreateTenantSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTenantSecurityIpGroupResponseBody(name='body'),
}

async function createTenantSecurityIpGroupWithOptions(request: CreateTenantSecurityIpGroupRequest, runtime: Util.RuntimeOptions): CreateTenantSecurityIpGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    body['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  if (!Util.isUnset(request.securityIps)) {
    body['SecurityIps'] = request.securityIps;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTenantSecurityIpGroup',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTenantSecurityIpGroup(request: CreateTenantSecurityIpGroupRequest): CreateTenantSecurityIpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTenantSecurityIpGroupWithOptions(request, runtime);
}

model CreateTenantUserRequest {
  description?: string(name='Description', description='The description of the database.', example='this is a test database'),
  encryptionType?: string(name='EncryptionType', description='加密方式。', example='RAS'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
  roles?: string(name='Roles', description='The role of the user account.  In Oracle mode, this parameter unspecified is left unspecified.  In MySQL mode, the super administrator account has ALL PRIVILEGES, and you can leave this parameter unspecified.  You need to specify the account information for a general user account. By default, the account information is a JSON array that contains the information of the role and the schema (Oracle mode) or database (MySQL mode).  Valid values: ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES. ReadOnly: a role that has only the read-only privilege SELECT. DDL: a role that has DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW. DML: a role that has DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='[{"Database":"oceanbase1","Role":"readwrite"},{"Database":"oceanbase2","Role":"readonly"}]'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****'),
  userName?: string(name='UserName', description='The name of the database account.  You cannot use reserved keywords, such as SYS and root.', example='pay_test'),
  userPassword?: string(name='UserPassword', description='The password of the database account.  It must be 10 to 32 characters in length and contain three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. The special characters are ! @ # $ % \\ ^ \\ & \\ * ( ) _ + - =', example='!Aliyun4Oceanbase'),
  userType?: string(name='UserType', description='The type of the database account. Valid values: Admin: the super administrator account. Normal: a general account.', example='Normal'),
}

model CreateTenantUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: [ 
    {
      roles?: [ 
        {
          database?: string(name='Database', description='The name of the database.', example='db_pay1'),
          role?: string(name='Role', description='The role of the account.  In Oracle mode, a role is a schema-level role. Valid values: - ReadWrite: a role that has the read and write privileges, including CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SYNONYM, CREATE SEQUENCE, CREATE TRIGGER, CREATE TYPE, CREATE SESSION, EXECUTE ANY PROCEDURE, CREATE ANY OUTLINE, ALTER ANY OUTLINE, DROP ANY OUTLINE, CREATE ANY PROCEDURE, ALTER ANY PROCEDURE, DROP ANY PROCEDURE, CREATE ANY SEQUENCE, ALTER ANY SEQUENCE, DROP ANY SEQUENCE, CREATE ANY TYPE, ALTER ANY TYPE, DROP ANY TYPE, SYSKM, CREATE ANY TRIGGER, ALTER ANY TRIGGER, DROP ANY TRIGGER, CREATE PROFILE, ALTER PROFILE, and DROP PROFILE. - ReadOnly: a role that has only the read-only privilege SELECT.
In MySQL mode, a role is a database-level role. Valid values: - ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES. - ReadOnly: a role that has only the read-only privilege SELECT. - DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW. - DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW. 
* By default, an Oracle account has the read and write privileges on its own schema, which are not listed here.', example='ReadOnly'),
        }
      ](name='Roles', description='The roles of the accounts.'),
      userName?: string(name='UserName', description='The name of the database account.', example='pay_test'),
      userStatus?: string(name='UserStatus', description='The status of the database account. Valid values:  - Locked: The account is locked. - ONLINE: The account is unlocked. The default status of a new account is ONLINE after it is created.', example='ONLINE'),
      userType?: string(name='UserType', description='The type of the database account. Valid values:  - Admin: the super administrator account. - Normal: a general account.', example='Normal'),
    }
  ](name='TenantUser', description='The list of database accounts in the tenant.'),
}

model CreateTenantUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTenantUserResponseBody(name='body'),
}

async function createTenantUserWithOptions(request: CreateTenantUserRequest, runtime: Util.RuntimeOptions): CreateTenantUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.encryptionType)) {
    body['EncryptionType'] = request.encryptionType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.roles)) {
    body['Roles'] = request.roles;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.userPassword)) {
    body['UserPassword'] = request.userPassword;
  }
  if (!Util.isUnset(request.userType)) {
    body['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTenantUser',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTenantUser(request: CreateTenantUserRequest): CreateTenantUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTenantUserWithOptions(request, runtime);
}

model DeleteDatabasesRequest {
  databaseNames?: string(name='DatabaseNames', example='["sms_pre", "pay_pre"]'),
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', example='ob2mr3oae0****'),
}

model DeleteDatabasesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DeleteDatabasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatabasesResponseBody(name='body'),
}

async function deleteDatabasesWithOptions(request: DeleteDatabasesRequest, runtime: Util.RuntimeOptions): DeleteDatabasesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.databaseNames)) {
    body['DatabaseNames'] = request.databaseNames;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDatabases',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDatabases(request: DeleteDatabasesRequest): DeleteDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabasesWithOptions(request, runtime);
}

model DeleteInstancesRequest {
  backupRetainMode?: string(name='BackupRetainMode', example='delete_all'),
  instanceIds?: string(name='InstanceIds', example='[”ob ob3f6yhv9uxxxx“]'),
}

model DeleteInstancesResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstancesResponseBody(name='body'),
}

/**
  * Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.
  *
  * @param request DeleteInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteInstancesResponse
 */
async function deleteInstancesWithOptions(request: DeleteInstancesRequest, runtime: Util.RuntimeOptions): DeleteInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.backupRetainMode)) {
    body['BackupRetainMode'] = request.backupRetainMode;
  }
  if (!Util.isUnset(request.instanceIds)) {
    body['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstances',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.
  *
  * @param request DeleteInstancesRequest
  * @return DeleteInstancesResponse
 */
async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstancesWithOptions(request, runtime);
}

model DeleteOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='The total count, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='Contact the administrator.', example='1'),
  projectId?: string(name='ProjectId', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='Indicates whether the call is successful.', example='g_abcdefj***'),
}

model DeleteOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='You can call this operation to delete a data synchronization project.'),
  code?: string(name='Code', description='Indicates whether the project has been deleted.', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: boolean(name='Data', example='true'),
  errorDetail?: {
    code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteOmsOpenAPIProject**.', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error description (old).', example='ERROR'),
    message?: string(name='Message', description='The error code (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The page number, which takes effect in a pagination query.', example='The page size, which takes effect in a pagination query.'),
  }(name='ErrorDetail', description='The suggestions (new).'),
  message?: string(name='Message', description='A system error occurred.', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The page number, which takes effect in a pagination query.', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DeleteOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOmsOpenAPIProjectResponseBody(name='body'),
}

async function deleteOmsOpenAPIProjectWithOptions(request: DeleteOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): DeleteOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteOmsOpenAPIProject(request: DeleteOmsOpenAPIProjectRequest): DeleteOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOmsOpenAPIProjectWithOptions(request, runtime);
}

model DeleteSecurityIpGroupRequest {
  instanceId?: string(name='InstanceId', description='The name of the IP address whitelist group.    
It must be 2 to 32 characters in length, start with a lowercase letter, end with a lowercase letter or digit, and contain only lowercase letters, digits, and underscores (_).', example='ob317v4uif****'),
  securityIpGroupName?: string(name='SecurityIpGroupName', description='The information of the deleted IP whitelist group.', example='paytest'),
}

model DeleteSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', description='Example 1', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
  }(name='SecurityIpGroup'),
}

model DeleteSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityIpGroupResponseBody(name='body'),
}

async function deleteSecurityIpGroupWithOptions(request: DeleteSecurityIpGroupRequest, runtime: Util.RuntimeOptions): DeleteSecurityIpGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    body['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityIpGroup',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecurityIpGroup(request: DeleteSecurityIpGroupRequest): DeleteSecurityIpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityIpGroupWithOptions(request, runtime);
}

model DeleteTenantSecurityIpGroupRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
  tenantId?: string(name='TenantId', example='t4louaeei****'),
}

model DeleteTenantSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
    tenantId?: string(name='TenantId', example='t4louaeei****'),
  }(name='SecurityIpGroup'),
}

model DeleteTenantSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTenantSecurityIpGroupResponseBody(name='body'),
}

async function deleteTenantSecurityIpGroupWithOptions(request: DeleteTenantSecurityIpGroupRequest, runtime: Util.RuntimeOptions): DeleteTenantSecurityIpGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    body['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTenantSecurityIpGroup',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTenantSecurityIpGroup(request: DeleteTenantSecurityIpGroupRequest): DeleteTenantSecurityIpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTenantSecurityIpGroupWithOptions(request, runtime);
}

model DeleteTenantUsersRequest {
  instanceId?: string(name='InstanceId', description='Example 1', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='$.parameters[4].schema.enumValueTitles', example='ob2mr3oae0****'),
  users?: string(name='Users', description='$.parameters[2].schema.example', example='["testUser"]'),
}

model DeleteTenantUsersResponseBody = {
  requestId?: string(name='RequestId', description='DeleteTenantUsers', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DeleteTenantUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTenantUsersResponseBody(name='body'),
}

async function deleteTenantUsersWithOptions(request: DeleteTenantUsersRequest, runtime: Util.RuntimeOptions): DeleteTenantUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTenantUsers',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTenantUsers(request: DeleteTenantUsersRequest): DeleteTenantUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTenantUsersWithOptions(request, runtime);
}

model DeleteTenantsRequest {
  instanceId?: string(name='InstanceId', description='You can call this operation to delete one or more tenants from an OceanBase cluster.', example='ob317v4uif****'),
  tenantIds?: string(name='TenantIds', description='```
http(s)://[Endpoint]/?Action=DeleteTenants
&TenantIds=["ob2mr3oae0****", "ob2mr3oae1****"]
&InstanceId=ob317v4uif****
&Common request parameters
```', example='["ob2mr3oae0****", "ob2mr3oae1****"]'),
}

model DeleteTenantsResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantIds?: [ string ](name='TenantIds'),
}

model DeleteTenantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTenantsResponseBody(name='body'),
}

async function deleteTenantsWithOptions(request: DeleteTenantsRequest, runtime: Util.RuntimeOptions): DeleteTenantsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantIds)) {
    body['TenantIds'] = request.tenantIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTenants',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTenants(request: DeleteTenantsRequest): DeleteTenantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTenantsWithOptions(request, runtime);
}

model DescribeAnomalySQLListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The search value.', example='zh-CN'),
  dbName?: string(name='DbName', description='{
  "UserName":testUser
}', example='testdb'),
  endTime?: string(name='EndTime', description='zh-CN', example='2021-09-13T15:40:43Z'),
  filterCondition?: map[string]any(name='FilterCondition', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='{
  "UserName":testUser
}'),
  nodeIp?: string(name='NodeIp', description='The number of rows to return on each page.    
- Maximum value: 100   
- Default value: 10', example='i-bp19y05uq6xpacyqnlrc'),
  pageNumber?: int32(name='PageNumber', description='desc', example='1'),
  pageSize?: int32(name='PageSize', description='The start time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='10'),
  SQLId?: string(name='SQLId', description='1', example='8D6E84****0B8FB1823D199E2CA1****'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update'),
  searchParameter?: string(name='SearchParameter', description='The ID of the tenant.', example='cputime'),
  searchRule?: string(name='SearchRule', description='Utilization above threshold', example='>'),
  searchValue?: string(name='SearchValue', description='10', example='0.01'),
  sortColumn?: string(name='SortColumn', description='The end time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='cputime'),
  sortOrder?: string(name='SortOrder', description='The request time, in ms.', example='desc'),
  startTime?: string(name='StartTime', description='The total count.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='Alibaba Cloud CLI', example='t2mr3oae0****'),
}

model DescribeAnomalySQLListShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The search value.', example='zh-CN'),
  dbName?: string(name='DbName', description='{
  "UserName":testUser
}', example='testdb'),
  endTime?: string(name='EndTime', description='zh-CN', example='2021-09-13T15:40:43Z'),
  filterConditionShrink?: string(name='FilterCondition', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='{
  "UserName":testUser
}'),
  nodeIp?: string(name='NodeIp', description='The number of rows to return on each page.    
- Maximum value: 100   
- Default value: 10', example='i-bp19y05uq6xpacyqnlrc'),
  pageNumber?: int32(name='PageNumber', description='desc', example='1'),
  pageSize?: int32(name='PageSize', description='The start time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='10'),
  SQLId?: string(name='SQLId', description='1', example='8D6E84****0B8FB1823D199E2CA1****'),
  searchKeyWord?: string(name='SearchKeyWord', description='The search keyword.', example='update'),
  searchParameter?: string(name='SearchParameter', description='The ID of the tenant.', example='cputime'),
  searchRule?: string(name='SearchRule', description='Utilization above threshold', example='>'),
  searchValue?: string(name='SearchValue', description='10', example='0.01'),
  sortColumn?: string(name='SortColumn', description='The end time of the time range for querying suspicious SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='cputime'),
  sortOrder?: string(name='SortOrder', description='The request time, in ms.', example='desc'),
  startTime?: string(name='StartTime', description='The total count.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='Alibaba Cloud CLI', example='t2mr3oae0****'),
}

model DescribeAnomalySQLListResponseBody = {
  anomalySQLList?: [ 
    {
      cpuTime?: float(name='CpuTime', example='50.13'),
      dbName?: string(name='DbName', description='{"name":"DescribeAnomalySQLList","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":60000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeAnomalySQLList\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"t2mr3oae0****\\"},{\\"name\\":\\"StartTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:40:43Z\\"},{\\"name\\":\\"EndTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-09-13T15:40:43Z\\"},{\\"name\\":\\"DbName\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"SearchKeyWord\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"update\\"},{\\"name\\":\\"SearchParameter\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"cputime\\"},{\\"name\\":\\"SearchRule\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\">\\"},{\\"name\\":\\"SearchValue\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.01\\"},{\\"name\\":\\"SQLId\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"SQLID\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"},{\\"name\\":\\"NodeIp\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"i-bp19y05uq6xpacyqnlrc\\"},{\\"name\\":\\"AcceptLanguage\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"zh-CN\\"},{\\"name\\":\\"PageSize\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"10\\"},{\\"name\\":\\"PageNumber\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"FilterCondition\\",\\"position\\":\\"Body\\",\\"style\\":\\"json\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"enumValueTitles\\":{\\"UserName\\":\\"UserName\\",\\"Event\\":\\"Event\\",\\"SQLType\\":\\"SQLType\\",\\"ClientIp\\":\\"ClientIp\\"},\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"{\\\\n  \\\\\\"UserName\\\\\\":testUser\\\\n}\\"},{\\"name\\":\\"SortColumn\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"cputime\\"},{\\"name\\":\\"SortOrder\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"enumValueTitles\\":{\\"{     \\\\\\"dbname\\\\\\":test,     \\\\\\"SQLType\\\\\\":null\\\\t\\\\t }\\":\\"{     \\\\\\"dbname\\\\\\":test,     \\\\\\"SQLType\\\\\\":null\\\\t\\\\t }\\"},\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"desc\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"TotalCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2\\"},{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\\"},{\\"name\\":\\"AnomalySQLList\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Array\\",\\"subType\\":\\"Object\\",\\"description\\":\\" \\",\\"children\\":[{\\"name\\":\\"Key\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"DiagnosisRule\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"\\"},{\\"name\\":\\"SQLText\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC\\"},{\\"name\\":\\"Suggestion\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"\\"},{\\"name\\":\\"DbName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"database1\\"},{\\"name\\":\\"RequestTimeUTCString\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2022-01-11T07:08:00Z\\"},{\\"name\\":\\"CpuTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"50.13\\"},{\\"name\\":\\"SQLId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"SQLID\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"99E9D3BF****B486239E6C7BC79B****\\"},{\\"name\\":\\"Diagnosis\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"\\"},{\\"name\\":\\"RequestTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"50.00\\"},{\\"name\\":\\"Executions\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"89043\\"},{\\"name\\":\\"UserName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tester\\"}],\\"title\\":\\"\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{\\"2014\\":[{\\"code\\":\\"2014\\",\\"defaultError\\":false,\\"errorCode\\":\\"InternalError\\",\\"errorMessage\\":\\"The request processing has failed due to some unknown error.\\",\\"errorMessageCn\\":\\"\\",\\"type\\":\\"user\\"}]}"}', example='database1'),
      diagnosis?: string(name='Diagnosis', example='总执行次数=80199,平均CPU耗时=6.8毫秒,整体CPU消耗占比87%'),
      diagnosisRule?: string(name='DiagnosisRule', description='The list of suspicious SQL statements.', example='The request ID.'),
      executions?: long(name='Executions', example='89043'),
      key?: long(name='Key', description='The average CPU time, in ms.', example='1'),
      requestTime?: float(name='RequestTime', example='50.00'),
      requestTimeUTCString?: string(name='RequestTimeUTCString', example='2022-01-11T07:08:00Z'),
      SQLId?: string(name='SQLId', example='99E9D3BF****B486239E6C7BC79B****'),
      SQLText?: string(name='SQLText', description='```
http(s)://[Endpoint]/?Action=DescribeAnomalySQLList
&TenantId=t2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-06-13 15:40:43
&DbName=testdb
&SearchKeyWord=update
&SearchParameter=cputime
&SearchRule=>
&SearchValue=0.01
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&NodeIp=i-bp19y05uq6xpacyqnlrc
&AcceptLanguage=zh-CN
&PageSize=10
&PageNumber=1
&SortColumn=cputime
&SortOrder=desc
&Common request parameters
```', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      suggestion?: string(name='Suggestion', description='{
    "TotalCount": 2,
    "RequestId": "473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E",
    "AnomalySQLList": [
        {
            "Key": 1,
            "DiagnosisRule": "Utilization above threshold",
            "SQLText": "SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC",
            "Suggestion": "Check your business scenarios, data distribution changes, request surges, and execution plan changes.",
            "DbName": "database1",
            "RequestTimeUTCString": "2022-01-11T07:08:00Z",
            "SQLId": "99E9D3BF****B486239E6C7BC79B****",
            "Diagnosis": "Total number of executions = 80199, Average CPU time = 6.8 ms, Overall CPU utilization = 87%",
            "RequestTime": 1641884880000,
            "Executions": 89043,
            "UserName": "tester"
        }
    ]
}', example='<DescribeAnomalySQLListResponse>
    <TotalCount>2</TotalCount>
    <RequestId>473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E</RequestId>
    <AnomalySQLList>
        <Key>1</Key>
        <DiagnosisRule>Utilization above threshold</DiagnosisRule>
        <SQLText>SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC</SQLText>
        <Suggestion>Check your business scenarios, data distribution changes, request surges, and execution plan changes.</Suggestion>
        <DbName>database1</DbName>
        <RequestTimeUTCString>2022-01-11T07:08:00Z</RequestTimeUTCString>
        <SQLId>99E9D3BF****B486239E6C7BC79B****</SQLId>
        <Diagnosis>Total number of executions = 80199, Average CPU time = 6.8 ms, Overall CPU utilization = 87%</Diagnosis>
        <RequestTime>1641884880000</RequestTime>
        <Executions>89043</Executions>
        <UserName>tester</UserName>
    </AnomalySQLList>
</DescribeAnomalySQLListResponse>'),
      userName?: string(name='UserName', example='tester'),
    }
  ](name='AnomalySQLList', description='The diagnostic rule.'),
  requestId?: string(name='RequestId', description='The sorting rule.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The SQL text.', example='2'),
}

model DescribeAnomalySQLListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAnomalySQLListResponseBody(name='body'),
}

async function describeAnomalySQLListWithOptions(tmpReq: DescribeAnomalySQLListRequest, runtime: Util.RuntimeOptions): DescribeAnomalySQLListResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeAnomalySQLListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterCondition)) {
    request.filterConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterCondition, 'FilterCondition', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.filterConditionShrink)) {
    body['FilterCondition'] = request.filterConditionShrink;
  }
  if (!Util.isUnset(request.nodeIp)) {
    body['NodeIp'] = request.nodeIp;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.searchKeyWord)) {
    body['SearchKeyWord'] = request.searchKeyWord;
  }
  if (!Util.isUnset(request.searchParameter)) {
    body['SearchParameter'] = request.searchParameter;
  }
  if (!Util.isUnset(request.searchRule)) {
    body['SearchRule'] = request.searchRule;
  }
  if (!Util.isUnset(request.searchValue)) {
    body['SearchValue'] = request.searchValue;
  }
  if (!Util.isUnset(request.sortColumn)) {
    body['SortColumn'] = request.sortColumn;
  }
  if (!Util.isUnset(request.sortOrder)) {
    body['SortOrder'] = request.sortOrder;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnomalySQLList',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnomalySQLList(request: DescribeAnomalySQLListRequest): DescribeAnomalySQLListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnomalySQLListWithOptions(request, runtime);
}

model DescribeAvailableCpuResourceRequest {
  instanceId?: string(name='InstanceId', description='The CPU resources available.', example='ob317v4uif****'),
  modifyType?: string(name='ModifyType', description='```
http(s)://[Endpoint]/?Action=DescribeAvailableCpuResource
&InstanceId=ob317v4uif****
&TenantId=ob2mr3oae0****
&ModifyType=update
&Common request parameters
```', example='update'),
  tenantId?: string(name='TenantId', description='The operation that you want to perform.   
Set the value to **DescribeAvailableCpuResource**.', example='ob2mr3oae0****'),
}

model DescribeAvailableCpuResourceResponseBody = {
  data?: [ 
    {
      maxCpu?: long(name='MaxCpu', example='10'),
      minCpu?: long(name='MinCpu', example='2'),
      unitNum?: long(name='UnitNum', example='2'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableCpuResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableCpuResourceResponseBody(name='body'),
}

async function describeAvailableCpuResourceWithOptions(request: DescribeAvailableCpuResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableCpuResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.modifyType)) {
    body['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableCpuResource',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableCpuResource(request: DescribeAvailableCpuResourceRequest): DescribeAvailableCpuResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableCpuResourceWithOptions(request, runtime);
}

model DescribeAvailableMemResourceRequest {
  cpuNum?: long(name='CpuNum', description='The available memory size.', example='14'),
  instanceId?: string(name='InstanceId', description='The ID of the region.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****'),
  unitNum?: long(name='UnitNum', description='The number of resource units in the tenant.', example='2'),
}

model DescribeAvailableMemResourceResponseBody = {
  data?: {
    maxMem?: long(name='MaxMem', example='10'),
    minMem?: long(name='MinMem', description='You can call this operation to query the available memory resource of an OceanBase Database tenant.', example='5'),
    usedMem?: long(name='UsedMem', example='2'),
  }(name='Data', description='```
http(s)://[Endpoint]/?Action=DescribeAvailableMemResource
&InstanceId=ob317v4uif****
&TenantId=ob2mr3oae0****
&UnitNum=2
&CpuNum=14
&Common request parameters
```'),
  requestId?: string(name='RequestId', description='The number of CPU cores.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeAvailableMemResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableMemResourceResponseBody(name='body'),
}

async function describeAvailableMemResourceWithOptions(request: DescribeAvailableMemResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableMemResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cpuNum)) {
    body['CpuNum'] = request.cpuNum;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.unitNum)) {
    body['UnitNum'] = request.unitNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableMemResource',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableMemResource(request: DescribeAvailableMemResourceRequest): DescribeAvailableMemResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableMemResourceWithOptions(request, runtime);
}

model DescribeCharsetRequest {
  series?: string(name='Series', description='实例的系列  - normal（默认）：标准集群版（云盘）  - normal_ssd：标准集群版（本地盘） - history：历史库集群版。', example='normal'),
  tenantMode?: string(name='TenantMode', description='The return result of the request.', example='Oracle'),
}

model DescribeCharsetResponseBody = {
  charset?: [ 
    {
      charset?: string(name='Charset', description='DescribeCharset', example='utf8'),
      collations?: [ string ](name='Collations'),
    }
  ](name='Charset', description='```
http(s)://[Endpoint]/?Action=DescribeCharset
&TenantMode=Oracle
&Common request parameters
```'),
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **DescribeCharset**.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeCharsetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCharsetResponseBody(name='body'),
}

async function describeCharsetWithOptions(request: DescribeCharsetRequest, runtime: Util.RuntimeOptions): DescribeCharsetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.series)) {
    body['Series'] = request.series;
  }
  if (!Util.isUnset(request.tenantMode)) {
    body['TenantMode'] = request.tenantMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCharset',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCharset(request: DescribeCharsetRequest): DescribeCharsetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCharsetWithOptions(request, runtime);
}

model DescribeDatabasesRequest {
  databaseName?: string(name='DatabaseName', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='sms_pre'),
  pageNumber?: int32(name='PageNumber', description='The return result of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.', example='10'),
  searchKey?: string(name='SearchKey', description='The information about the database tables.', example='pay'),
  tenantId?: string(name='TenantId', description='The request ID.', example='ob2mr3oae0****'),
  withTables?: boolean(name='WithTables', description='The role of the account.    
In MySQL mode, a role is a database-level role. Valid values:  
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.  
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.', example='true'),
}

model DescribeDatabasesResponseBody = {
  databases?: [ 
    {
      collation?: string(name='Collation', example='utf8mb4_general_ci'),
      createTime?: string(name='CreateTime', description='Specifies whether to return the information of tables in the database.   
Default value: false.', example='2022-02-21 15:41:06'),
      dataSize?: double(name='DataSize', example='5.67 GB'),
      databaseName?: string(name='DatabaseName', description='The number of the page to return.   
- Start value: 1   
- Default value: 1', example='sms_pre'),
      dbType?: string(name='DbType', description='The return result of the request.', example='mysql'),
      description?: string(name='Description', description='The name of the database.', example='test db'),
      encoding?: string(name='Encoding', description='The status of the database. Valid values:    
- ONLINE: The database is running.  
- DELETING: The database is being deleted.', example='utf8mb4'),
      instanceId?: string(name='InstanceId', example='obsdh2f****'),
      requiredSize?: double(name='RequiredSize', example='0.00 GB'),
      status?: string(name='Status', description='The list of databases in the tenant.', example='ONLINE'),
      tables?: [ 
        {
          tableName?: string(name='TableName', example='testTables'),
        }
      ](name='Tables'),
      tenantId?: string(name='TenantId', example='t33h8y08k****'),
      users?: [ 
        {
          role?: string(name='Role', description='The request ID.', example='ReadOnly'),
          userName?: string(name='UserName', description='Example 1', example='user_pay_ro'),
          userType?: string(name='UserType', description='The type of the account. Valid values:  - Admin: the super administrator account. - Normal: a general account.', example='Normal'),
        }
      ](name='Users', description='The name of the database table.'),
    }
  ](name='Databases', description='The ID of the tenant.'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='The search keyword.', example='1'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabasesWithOptions(request: DescribeDatabasesRequest, runtime: Util.RuntimeOptions): DescribeDatabasesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.databaseName)) {
    body['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    body['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.withTables)) {
    body['WithTables'] = request.withTables;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabases',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabasesWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  instanceId?: string(name='InstanceId', description='The size of the data disk, in GB.', example='ob317v4uif****'),
  pageNumber?: int32(name='PageNumber', description='The information about the storage resources of the cluster.', example='1'),
  pageSize?: int32(name='PageSize', description='The server with the highest disk usage.', example='10'),
}

model DescribeInstanceResponseBody = {
  instance?: {
    autoRenewal?: boolean(name='AutoRenewal', description='The operation that you want to perform. <br>Set the value to **DescribeInstance**.', example='true'),
    autoUpgradeObVersion?: boolean(name='AutoUpgradeObVersion', description='Example 1', example='true'),
    availableZones?: [ string ](name='AvailableZones'),
    createTime?: string(name='CreateTime', description='Indicates whether the log disk specifications can be upgraded.', example='2021-10-19T07:13:41Z'),
    dataMergeTime?: string(name='DataMergeTime', description='The total number of CPU cores of the cluster.', example='02:00'),
    deployMode?: string(name='DeployMode', description='Alibaba Cloud CLI', example='1-1-1'),
    deployType?: string(name='DeployType', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='multiple'),
    diskType?: string(name='DiskType', description='The total storage space of the cluster, in GB.', example='cloud_essd_pl1'),
    enableIsolationOptimization?: boolean(name='EnableIsolationOptimization'),
    enableUpgradeLogDisk?: boolean(name='EnableUpgradeLogDisk', example='false'),
    expireTime?: string(name='ExpireTime', description='The information of the OceanBase cluster.', example='2021-10-17T16:00:00Z'),
    instanceClass?: string(name='InstanceClass', description='The detailed information of the OBServer version.', example='14C70G'),
    instanceId?: string(name='InstanceId', description='The information about the log disk space of the cluster.', example='ob317v4uif****'),
    instanceName?: string(name='InstanceName', description='Indicates whether automatic upgrade of the OBServer version is enabled.', example='ob4test'),
    instanceRole?: string(name='InstanceRole', example='NORMAL'),
    isLatestObVersion?: boolean(name='IsLatestObVersion', example='true'),
    isTrustEcs?: boolean(name='IsTrustEcs', description='The information about the CPU resources of the cluster.', example='true'),
    isolationOptimization?: boolean(name='IsolationOptimization'),
    maintainTime?: string(name='MaintainTime', description='The time when the major compaction of cluster data is performed.', example='19:00Z-20:00Z'),
    nodeNum?: string(name='NodeNum', example='6'),
    obRpmVersion?: string(name='ObRpmVersion', example='2.2.77-20210526202046'),
    payType?: string(name='PayType', description='The list of zones.', example='PREPAY'),
    resource?: {
      cpu?: {
        totalCpu?: long(name='TotalCpu', description='The series of the OceanBase cluster. Valid values:   
- NORMAL: the high availability edition.   
- BASIC: the basic edition.', example='14'),
        unitCpu?: long(name='UnitCpu', description='The type of the storage disk where the cluster is deployed. 

The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.', example='10'),
        usedCpu?: long(name='UsedCpu', description='Indicates whether automatic upgrade of the OBServer version is enabled.', example='10'),
      }(name='Cpu', description='The information of the OceanBase cluster.'),
      diskSize?: {
        dataUsedSize?: double(name='DataUsedSize', description='The ID of the OceanBase cluster.', example='200'),
        maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer', description='The time in UTC when the cluster expires.'),
        maxDiskUsedPercent?: double(name='MaxDiskUsedPercent', description='The maximum disk usage, in percentage.', example='0.14'),
        totalDiskSize?: long(name='TotalDiskSize', description='The data replica distribution mode of the cluster. Valid values: 
- n: indicates the single-IDC mode. 
- n-n: indicates the dual-IDC mode. 
- n-n-n: indicates the multi-IDC mode. 

> <br>The integer n represents the number of OBServer nodes in each IDC.', example='200'),
        unitDiskSize?: long(name='UnitDiskSize', description='The list of zones.', example='200'),
        usedDiskSize?: long(name='UsedDiskSize', description='The specifications of the cluster.  You can specify one of the following four plans:    
- 8C32G: indicates 8 CPU cores and 32 GB of memory. 
- 14C70G: indicates 14 CPU cores and 70 GB of memory. 
- 30C180G: indicates 30 CPU cores and 180 GB of memory. 
- 62C400G: indicates 62 CPU cores and 400 GB of memory.', example='100'),
      }(name='DiskSize', description='The number of the page to return. 
- Start value: 1  
- Default value: 1'),
      logDiskSize?: {
        totalDiskSize?: long(name='TotalDiskSize', description='The ID of the region.', example='400'),
        unitDiskSize?: long(name='UnitDiskSize', description='The request ID.', example='200'),
      }(name='LogDiskSize', description='The server with the highest disk usage.'),
      memory?: {
        totalMemory?: long(name='TotalMemory', description='Indicates whether trusted ECS instances are used.', example='70'),
        unitMemory?: long(name='UnitMemory', description='The log disk space of each replica node in the cluster. Unit: GB.', example='10'),
        usedMemory?: long(name='UsedMemory', description='The time in UTC when the cluster was created.', example='10'),
      }(name='Memory', description='The name of the OceanBase cluster.'),
      unitCount?: long(name='UnitCount', description='The number of CPU cores used in the cluster.', example='1'),
    }(name='Resource', description='The size of used memory in the cluster, in GB.'),
    series?: string(name='Series', description='Indicates whether the OBServer version is the latest.', example='Indicates whether the OBServer version is the latest.'),
    status?: string(name='Status', description='The information about cluster resources.', example='ONLINE'),
    version?: string(name='Version', description='You can call this operation to query the detailed information of an OceanBase cluster.', example='2.2.77'),
    zones?: [ string ](name='Zones'),
  }(name='Instance', description='The log disk space of each replica node in the cluster. Unit: GB.'),
  requestId?: string(name='RequestId', description='The total log disk space of the cluster, in GB.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeInstanceCreatableZoneRequest {
  instanceId?: string(name='InstanceId', description='The ID of the zone.', example='ob317v4uif****'),
}

model DescribeInstanceCreatableZoneResponseBody = {
  requestId?: string(name='RequestId', description='Indicates whether the cluster is deployed in the zone.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  zoneList?: [ 
    {
      isInCluster?: boolean(name='IsInCluster', example='true'),
      zone?: string(name='Zone', description='DescribeInstanceCreatableZone', example='cn-hangzhou-i'),
    }
  ](name='ZoneList', description='The operation that you want to perform.   
Set the value to **DescribeInstanceCreatableZone**.'),
}

model DescribeInstanceCreatableZoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceCreatableZoneResponseBody(name='body'),
}

async function describeInstanceCreatableZoneWithOptions(request: DescribeInstanceCreatableZoneRequest, runtime: Util.RuntimeOptions): DescribeInstanceCreatableZoneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceCreatableZone',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceCreatableZone(request: DescribeInstanceCreatableZoneRequest): DescribeInstanceCreatableZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceCreatableZoneWithOptions(request, runtime);
}

model DescribeInstanceSecurityConfigsRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
}

model DescribeInstanceSecurityConfigsResponseBody = {
  instanceSecurityConfigs?: {
    securityConfigs?: [ 
      {
        configDescription?: string(name='ConfigDescription', example='校验集群白名单范围是否过大'),
        configGroup?: string(name='ConfigGroup', example='WHITELIST'),
        configName?: string(name='ConfigName', example='aaa'),
        risk?: boolean(name='Risk', example='true'),
        riskDescription?: string(name='RiskDescription', example='aaa'),
      }
    ](name='SecurityConfigs'),
    totalCheckCount?: int32(name='TotalCheckCount', example='5'),
    totalRiskCount?: int32(name='TotalRiskCount', example='0'),
  }(name='InstanceSecurityConfigs'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceSecurityConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceSecurityConfigsResponseBody(name='body'),
}

async function describeInstanceSecurityConfigsWithOptions(request: DescribeInstanceSecurityConfigsRequest, runtime: Util.RuntimeOptions): DescribeInstanceSecurityConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSecurityConfigs',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceSecurityConfigs(request: DescribeInstanceSecurityConfigsRequest): DescribeInstanceSecurityConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSecurityConfigsWithOptions(request, runtime);
}

model DescribeInstanceTagsRequest {
  instanceIds?: string(name='InstanceIds', description='The list of tags.', example='["ob3za5w73as8rk"]'),
  tags?: string(name='Tags', description='The returned response.', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
}

model DescribeInstanceTagsResponseBody = {
  requestId?: string(name='RequestId', description='The resource ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='You can call this operation to view the tag value of a cluster.', example='ob317v4uif****'),
      resourceType?: string(name='ResourceType', example='instance'),
      tag?: string(name='Tag', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
    }
  ](name='TagResources', description='The request ID.'),
}

model DescribeInstanceTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTagsResponseBody(name='body'),
}

async function describeInstanceTagsWithOptions(request: DescribeInstanceTagsRequest, runtime: Util.RuntimeOptions): DescribeInstanceTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceIds)) {
    body['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTags',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceTags(request: DescribeInstanceTagsRequest): DescribeInstanceTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTagsWithOptions(request, runtime);
}

model DescribeInstanceTenantModesRequest {
  instanceId?: string(name='InstanceId', description='The operation that you want to perform.   
Set the value to **DescribeInstanceTenantModes**.', example='ob317v4uif****'),
}

model DescribeInstanceTenantModesResponseBody = {
  instanceModes?: [ string ](name='InstanceModes'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceTenantModesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTenantModesResponseBody(name='body'),
}

async function describeInstanceTenantModesWithOptions(request: DescribeInstanceTenantModesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTenantModesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTenantModes',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceTenantModes(request: DescribeInstanceTenantModesRequest): DescribeInstanceTenantModesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTenantModesWithOptions(request, runtime);
}

model DescribeInstanceTopologyRequest {
  instanceId?: string(name='InstanceId', description='The status of the node.', example='ob317v4uif****'),
}

model DescribeInstanceTopologyResponseBody = {
  instanceTopology?: {
    tenants?: [ 
      {
        primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='The server with the highest disk usage.', example='RANDOM'),
        tenantCpu?: float(name='TenantCpu', description='The information about the memory resources of the node.', example='2'),
        tenantDeployType?: string(name='TenantDeployType', description='The name of the tenant.', example='multiple'),
        tenantId?: string(name='TenantId', description='The size of used memory of the node, in GB.', example='t33h8y08k****'),
        tenantMemory?: float(name='TenantMemory', description='The total storage space of the node, in GB.', example='10'),
        tenantMode?: string(name='TenantMode', description='The size of used storage space of the node, in GB.', example='Oracle'),
        tenantName?: string(name='TenantName', description='The total memory size of the node, in GB.', example='pay_online'),
        tenantStatus?: string(name='TenantStatus', description='The size of used memory of the node, in GB.', example='ONLINE'),
        tenantUnitNum?: int32(name='TenantUnitNum', description='The number of CPU cores of the tenant.', example='1'),
        tenantZones?: [ 
          {
            isPrimaryTenantZone?: string(name='IsPrimaryTenantZone', description='The maximum disk usage, in percentage.', example='true'),
            tenantZoneId?: string(name='TenantZoneId', description='The server with the highest disk usage.', example='cn-hangzhou-h'),
            tenantZoneRole?: string(name='TenantZoneRole', description='The information of zones.', example='ReadWrite'),
            units?: [ 
              {
                enableCancelMigrateUnit?: boolean(name='EnableCancelMigrateUnit', description='Indicates whether the migration can be canceled.   
This field is valid only for units that are being manually immigrated or emigrated.', example='true'),
                enableMigrateUnit?: boolean(name='EnableMigrateUnit', description='The return result of the request.', example='true'),
                manualMigrate?: boolean(name='ManualMigrate', description='The return result of the request.', example='true'),
                nodeId?: string(name='NodeId', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='i-bp16niirq4zdmgvm****'),
                unitCpu?: float(name='UnitCpu', description='Alibaba Cloud CLI', example='2'),
                unitDataSize?: long(name='UnitDataSize', description='The operation that you want to perform.   
Set the value to **DescribeInstanceTopology**.', example='10'),
                unitId?: string(name='UnitId', description='The topology of the cluster.', example='1002'),
                unitMemory?: float(name='UnitMemory', description='The ID of the tenant.', example='10'),
                unitStatus?: string(name='UnitStatus', description='You can call this operation to query the topology of an OceanBase cluster.', example='ONLINE'),
              }
            ](name='Units', description='The information about the storage resources.'),
          }
        ](name='TenantZones', description='The information about the storage resources of the node.'),
      }
    ](name='Tenants', description='The total number of CPU cores for the node.'),
    zones?: [ 
      {
        nodes?: [ 
          {
            nodeCopyId?: long(name='NodeCopyId', description='The information of zones.', example='1'),
            nodeId?: string(name='NodeId', description='The ID of the resource unit.', example='i-bp16niirq4zdmgvm****'),
            nodeResource?: [ 
              {
                cpu?: {
                  totalCpu?: int32(name='TotalCpu', description='The size of used storage space of the node, in GB.', example='14'),
                  usedCpu?: float(name='UsedCpu', description='Indicates whether migration can be performed.', example='4'),
                }(name='Cpu', description='The memory size of the tenant, in GB.'),
                diskSize?: {
                  totalDiskSize?: double(name='TotalDiskSize', description='The deployment type of the primary zone.', example='400'),
                  usedDiskSize?: double(name='UsedDiskSize', description='The status of the tenant.   
- PENDING_CREATE: The tenant is being created.   
- RESTORE: The tenant is being recovered.   
- ONLINE: The tenant is running.   
- SPEC_MODIFYING: The specification of the tenant is being modified.   
- ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.   
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.   
- PARAMETER_MODIFYING: Parameters are being modified.   
- WHITE_LIST_MODIFYING: The whitelist is being modified.', example='200'),
                }(name='DiskSize', description='The information about the CPU resources of the node.'),
                memory?: {
                  totalMemory?: long(name='TotalMemory', description='The ID of the replica node.', example='70'),
                  usedMemory?: float(name='UsedMemory', description='The information of node resources.', example='10'),
                }(name='Memory', description='The role to access the zone. Valid values:   
 - ReadWrite: a role that has the read and write privileges.
 - ReadOnly: a role that has only the read-only privilege.'),
              }
            ](name='NodeResource', description='The ID of the node.'),
            nodeStatus?: string(name='NodeStatus', description='The ID of the OBServer where the resource unit resides.', example='ONLINE'),
          }
        ](name='Nodes', description='The ID of the region.'),
        region?: string(name='Region', description='The zone information of the cluster.', example='cn-hangzhou'),
        zoneDisk?: string(name='ZoneDisk', description='The information about the memory resources of the node.', example='200 GB'),
        zoneId?: string(name='ZoneId', description='The information of the tenant.', example='cn-hangzhou-i'),
        zoneResource?: {
          diskSize?: {
            maxDiskUsedObServer?: [ string ](name='MaxDiskUsedObServer'),
            maxDiskUsedPercent?: double(name='MaxDiskUsedPercent', description='DescribeInstanceTopology', example='0.14'),
          }(name='DiskSize'),
        }(name='ZoneResource', description='Example 1'),
      }
    ](name='Zones', description='The information about resource units.'),
  }(name='InstanceTopology', description='The number of CPU cores used by the node.'),
  requestId?: string(name='RequestId', description='The information about the CPU resources of the node.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTopologyResponseBody(name='body'),
}

async function describeInstanceTopologyWithOptions(request: DescribeInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeInstanceTopologyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTopology',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTopologyWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  instanceId?: string(name='InstanceId', description='The number of CPU cores used in the cluster.', example='ob317v4uif****'),
  instanceName?: string(name='InstanceName', description='The size of used memory in the cluster, in GB.', example='ob4prod'),
  pageNumber?: int32(name='PageNumber', description='The total memory size of the cluster, in GB.', example='1'),
  pageSize?: int32(name='PageSize', description='The information about the memory resources of the cluster.', example='10'),
  resourceGroupId?: string(name='ResourceGroupId', description='The number of CPU cores of each replica node in the cluster.', example='group1'),
  searchKey?: string(name='SearchKey', description='The memory size of each replica node in the cluster, in GB.', example='pay'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      availableZones?: [ string ](name='AvailableZones', description='The time in UTC when the cluster expires.'),
      commodityCode?: string(name='CommodityCode', description='The storage space of each replica node in the cluster, in GB.', example='oceanbase_oceanbasepost_public_cn'),
      cpu?: int32(name='Cpu', description='The product code of the OceanBase cluster.   
- oceanbase_oceanbasepre_public_cn: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in a China site.  
- oceanbase_oceanbasepost_public_cn: indicates an OceanBase cluster that is billed based on the pay-as-you-go plan and that is deployed in a China site.  
- oceanbase_obpre_public_intl: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in an international site.', example='14'),
      createTime?: string(name='CreateTime', description='The number of OceanBase clusters queried.', example='2021-10-19T07:13:41Z'),
      deployMode?: string(name='DeployMode', description='The request ID.', example='1-1-1'),
      deployType?: string(name='DeployType', description='Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.', example='multiple'),
      diskSize?: string(name='DiskSize', description='The information about the memory resources of the cluster.', example='200'),
      diskType?: string(name='DiskType', description='The number of CPU cores used in the cluster.', example='cloud_essd_pl1'),
      enableUpgradeNodes?: boolean(name='EnableUpgradeNodes', description='The ID of the OceanBase cluster.', example='true'),
      expireSeconds?: int32(name='ExpireSeconds', description='The whitelist information of the cluster.', example='2606682'),
      expireTime?: string(name='ExpireTime', description='The information about the storage resources of the cluster.', example='2021-10-17T16:00:00Z'),
      instanceClass?: string(name='InstanceClass', description='The instance type.', example='14C70G'),
      instanceId?: string(name='InstanceId', description='The total storage space of the cluster, in GB.', example='ob317v4uif****'),
      instanceName?: string(name='InstanceName', description='The return result of the request.', example='ob4test'),
      instanceRole?: string(name='InstanceRole'),
      instanceType?: string(name='InstanceType', description='You can call this operation to obtain the list of OceanBase clusters.', example='KAFKA_PUBLIC'),
      maintainTime?: string(name='MaintainTime', description='The return result of the request.', example='2021-10-19T07:13:41Z'),
      mem?: long(name='Mem', description='The information about the CPU resources of the cluster.', example='70'),
      payType?: string(name='PayType', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='PREPAY'),
      resource?: {
        cpu?: {
          totalCpu?: long(name='TotalCpu', description='The name of the OceanBase cluster.    
It must be 1 to 20 characters in length.   
If this parameter is not specified, the value is the instance ID of the cluster by default.', example='14'),
          unitCpu?: long(name='UnitCpu', description='The data replica distribution mode of the cluster. Valid values:    

- n: indicates the single-IDC mode.  
- n-n: indicates the dual-IDC mode.  
- n-n-n: indicates the multi-IDC mode. The integer n represents the number of OBServer nodes in each IDC.', example='10'),
          usedCpu?: long(name='UsedCpu', description='The search keyword.', example='10'),
        }(name='Cpu', description='Indicates whether new nodes can be added.'),
        diskSize?: {
          totalDiskSize?: long(name='TotalDiskSize', description='The request ID.', example='200'),
          unitDiskSize?: long(name='UnitDiskSize', description='Example 1', example='200'),
          usedDiskSize?: long(name='UsedDiskSize', description='$.parameters[7].schema.example', example='100'),
        }(name='DiskSize', description='The time elapsed since the expiration of the cluster, in seconds.'),
        memory?: {
          totalMemory?: long(name='TotalMemory', description='The number of CPU cores of the cluster.', example='70'),
          unitMemory?: long(name='UnitMemory', description='The size of used storage space of the cluster, in GB.', example='10'),
          usedMemory?: long(name='UsedMemory', description='The size of used memory in the cluster, in GB.', example='10'),
        }(name='Memory', description='The status of the cluster. Valid values:   
- PENDING_CREATE: The cluster is being created.  
- ONLINE: The cluster is running.  
- TENANT_CREATING: The tenant is being created.  
- TENANT_SPEC_MODIFYING: The tenant specifications are being modified.  
- EXPANDING: Nodes are being added to the cluster to increase its capacity.  
- REDUCING: Nodes are being removed from the cluster to reduce its capacity.  
- SPEC_UPGRADING: The service plan is being upgraded.  
- DISK_UPGRADING: The storage space is being expanded.  
- WHITE_LIST_MODIFYING: The whitelist is being modified.  
- PARAMETER_MODIFYING: Parameters are being modified.  
- SSL_MODIFYING: The SSL certificate is being changed.  
- PREPAID_EXPIRE_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to PREPAY.  
- ARREARS_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to POSTPAY.  
- PENDING_DELETE: The cluster is being deleted.   
Generally, the cluster is in the ONLINE state.'),
        unitCount?: long(name='UnitCount', example='1'),
      }(name='Resource', description='The type of the storage disk where the cluster is deployed.   
The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The number of OceanBase clusters queried.', example='group1'),
      securityIps?: [ string ](name='SecurityIps', description='The number of the page to return.    

- Start value: 1 
- Default value: 1'),
      series?: string(name='Series', description='The billing method for the OceanBase cluster. Valid values:  
- PREPAY: the subscription billing method.  
- POSTPAY: the pay-as-you-go billing method.', example='NORMAL'),
      state?: string(name='State', description='The number of resource units in the cluster.', example='ONLINE'),
      usedDiskSize?: long(name='UsedDiskSize', description='The number of resource units in the cluster.', example='20'),
      version?: string(name='Version', description='The total number of CPU cores of the cluster.', example='2.2.77'),
      vpcId?: string(name='VpcId', description='vpcId', example='vpc-8vb8qjrixzovjpy******'),
    }
  ](name='Instances', description='The total storage space of the cluster, in GB.'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.searchKey)) {
    body['SearchKey'] = request.searchKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeNodeMetricsRequest {
  endTime?: string(name='EndTime', description='$.parameters[7].schema.description', example='2021-09-13T15:40:43Z'),
  instanceId?: string(name='InstanceId', description='The list of nodes.', example='ob317v4uif****'),
  metrics?: string(name='Metrics', description='$.parameters[7].schema.enumValueTitles', example='tps'),
  nodeIdList?: string(name='NodeIdList', description='$.parameters[10].schema.description', example='[i-bp16niirq4zdmgvm****,i-bp16n56hq4z4fgvm****]'),
  nodeName?: string(name='NodeName', description='$.parameters[8].schema.example', example='i-bp16niirq4zdmgvm****'),
  pageNumber?: int32(name='PageNumber', description='$.parameters[6].schema.description', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the tenant.', example='10'),
  startTime?: string(name='StartTime', description='$.parameters[9].schema.example', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='$.parameters[6].schema.enumValueTitles', example='tfafd34fs****'),
}

model DescribeNodeMetricsResponseBody = {
  nodeMetrics?: string(name='NodeMetrics', example='-'),
  requestId?: string(name='RequestId', description='You can call this operation to query the detailed metrics information of an OceanBase Database node.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  totalCount?: int32(name='TotalCount', description='```
http(s)://[Endpoint]/?Action=DescribeNodeMetrics
&InstanceId=ob317v4uif****
&PageSize=10
&PageNumber=1
&TenantId=ob2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-09-13 15:40:43
&Metrics=tps
&NodeName=i-bp16niirq4zdmgvm****
&NodeIdList=["i-bp19y05uq6xpacyqnlrc","i-bp1blcr3htr3g3u2vqvu","i-bp1392ikhayhr3hi4fli"]
&Common request parameters
```', example='9'),
}

model DescribeNodeMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNodeMetricsResponseBody(name='body'),
}

async function describeNodeMetricsWithOptions(request: DescribeNodeMetricsRequest, runtime: Util.RuntimeOptions): DescribeNodeMetricsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.metrics)) {
    body['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.nodeIdList)) {
    body['NodeIdList'] = request.nodeIdList;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNodeMetrics',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNodeMetrics(request: DescribeNodeMetricsRequest): DescribeNodeMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNodeMetricsWithOptions(request, runtime);
}

model DescribeOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  projectId?: string(name='ProjectId', description='The project ID.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***'),
}

model DescribeOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: {
    businessName?: string(name='BusinessName', description='The business system identifier, which is optional and is a specific field of the Post message.', example='OMS_TEST'),
    destConfig?: {
      enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
      endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
      endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
      msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
      partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
      partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
      producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
      sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
      sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
      sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
      serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
      topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
    }(name='DestConfig', description='The settings of the destination data source.'),
    labels?: [ 
      {
        count?: int32(name='Count', description='The number of projects that use this label.', example='3'),
        creator?: string(name='Creator', description='The creator. This parameter value is returned only when you log on as the administrator.', example='Zhang San'),
        id?: string(name='Id', description='The ID of a label.', example='abc'),
        name?: string(name='Name', description='The name of the label.', example='label_name'),
      }
    ](name='Labels', description='A collection of label IDs.'),
    projectId?: string(name='ProjectId', description='The project ID.', example='p_gasdfdsfg'),
    projectName?: string(name='ProjectName', description='The name of the project.', example='The name of the project.'),
    projectOwner?: string(name='ProjectOwner', description='The project owner.', example='Zhang San'),
    sourceConfig?: {
      enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
      endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
      endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
      msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
      partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
      partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
      producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
      sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
      sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
      sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
      serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
      topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
    }(name='SourceConfig', description='The settings of the source data source.'),
    steps?: [ 
      {
        estimatedRemainingSeconds?: long(name='EstimatedRemainingSeconds', description='The estimated time remained.', example='100'),
        extraInfo?: {
          errorCode?: string(name='ErrorCode', description='The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.', example='PARAMERROR'),
          errorDetails?: [ 
            {
              code?: string(name='Code', description='The error code.', example='200'),
              level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='CRITICAL'),
              message?: string(name='Message', description='The error message.', example='A system error occurred.'),
              proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
            }
          ](name='ErrorDetails', description='The error details.'),
          errorMsg?: string(name='ErrorMsg', description='The error message.', example='A system error occurred.'),
          errorParam?: map[string]string(name='ErrorParam', description='The error related parameters.'),
          failedTime?: string(name='FailedTime', description='The time when the error occurred.', example='2020-05-22T17:04:18'),
        }(name='ExtraInfo', description='The additional information. The value is a JSON string.'),
        finishTime?: string(name='FinishTime', description='The end time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
        interactive?: boolean(name='Interactive', description='Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.', example='true'),
        startTime?: string(name='StartTime', description='The start time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
        stepDescription?: string(name='StepDescription', description='The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.', example='Schema migration'),
        stepInfo?: {
          capacity?: long(name='Capacity', description='The estimated total number of rows.', example='10'),
          checkpoint?: string(name='Checkpoint', description='The checkpoint. The value is a unix timestamp in seconds.', example='1'),
          connectorFullProgressOverview?: {
            estimatedRemainingTimeOfSec?: long(name='EstimatedRemainingTimeOfSec', description='The estimated maximum time remained, in seconds.', example='100'),
            estimatedTotalCount?: long(name='EstimatedTotalCount', description='The estimated amount of data to migrate.', example='100'),
            finishedCount?: long(name='FinishedCount', description='The amount of data migrated.', example='50'),
            progress?: int32(name='Progress', description='finishedCount / estimatedTotalCount', example='1120'),
          }(name='ConnectorFullProgressOverview', description='The full synchronization progress.'),
          deployId?: string(name='DeployId', description='The resource deployment ID.', example='abcd'),
          dstIops?: long(name='DstIops', description='The read/write throughput of the destination data source, in bytes per second.', example='1'),
          dstRps?: long(name='DstRps', description='The read/write RPS of the destination data source.', example='1'),
          dstRpsRef?: long(name='DstRpsRef', description='The read/write RPS baseline of the destination data source.', example='1'),
          dstRt?: long(name='DstRt', description='The read/write RT per record of the destination data source, in ms.', example='1'),
          dstRtRef?: long(name='DstRtRef', description='The read/write RT baseline of the destination data source.', example='1'),
          gmt?: long(name='Gmt', description='The checkpoint collection time. The value is a unix timestamp in seconds.', example='1'),
          inconsistencies?: long(name='Inconsistencies', description='The amount of inconsistent data found during full verification.', example='1'),
          incrTimestampCheckpoint?: long(name='IncrTimestampCheckpoint', description='The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.', example='1'),
          jobId?: string(name='JobId', description='The job ID.', example='abcd'),
          processedRecords?: long(name='ProcessedRecords', description='The number of migrated rows.', example='6'),
          skipped?: boolean(name='Skipped', description='A sub-status that indicates whether this step is skipped.', example='true'),
          srcIops?: long(name='SrcIops', description='The read throughput of the source data source, in bytes per second.', example='1'),
          srcIopsRef?: long(name='SrcIopsRef', description='The read throughput baseline of the source data source.', example='1'),
          srcRps?: long(name='SrcRps', description='The read requests per second (RPS) of the source data source.', example='1'),
          srcRpsRef?: long(name='SrcRpsRef', description='The read RPS baseline of the source data source.', example='1'),
          srcRt?: long(name='SrcRt', description='The read response time (RT) per record of the source data source, in ms.', example='1'),
          srcRtRef?: long(name='SrcRtRef', description='The read RT baseline of the source data source.', example='1'),
          validated?: boolean(name='Validated', description='A sub-status that indicates whether the checker has completed full verification.', example='true'),
        }(name='StepInfo', description='The step details. The value is a JSON string.'),
        stepName?: string(name='StepName', description='The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.', example='structmigration'),
        stepOrder?: int32(name='StepOrder', description='The sequence of steps.', example='1'),
        stepProgress?: int32(name='StepProgress', description='The step progress.', example='10'),
        stepStatus?: string(name='StepStatus', description='The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.', example='INT'),
      }
    ](name='Steps', description='The detailed project steps.'),
    transferMapping?: {
      databases?: [ 
        {
          databaseId?: string(name='DatabaseId', description='The ID of the database. This parameter takes effect when the source data source is IDB.', example='db_id1'),
          databaseName?: string(name='DatabaseName', description='The name of the database.', example='db1'),
          mappedName?: string(name='MappedName', description='The mapped-to database. This parameter takes effect when the destination data source is a database.', example='mapped_db'),
          tables?: [ 
            {
              adbTableSchema?: {
                distributedKeys?: [ string ](name='DistributedKeys', description='The list of distribution key columns.'),
                partitionLifeCycle?: int32(name='PartitionLifeCycle', description='The lifecycle of the table.', example='30'),
                partitionStatement?: string(name='PartitionStatement', description='The partitioning expression.', example='PARTITION BY VALUE(\\"id\\")'),
                primaryKeys?: [ string ](name='PrimaryKeys', description='The list of primary key columns.'),
              }(name='AdbTableSchema', description='The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.'),
              filterColumns?: [ string ](name='FilterColumns', description='The list of filter columns, which are the columns to be synchronized.'),
              mappedName?: string(name='MappedName', description='The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.', example='mapped_table'),
              shardColumns?: [ string ](name='ShardColumns', description='The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.'),
              tableId?: string(name='TableId', description='The ID of the table. This parameter takes effect when the source data source is IDB.', example='table_id'),
              tableName?: string(name='TableName', description='The name of the table.', example='table'),
              type?: string(name='Type', description='Valid values: DATABASE and TABLE.', example='DATABASE'),
              whereClause?: string(name='WhereClause', description='The row filter conditions.', example='id > 1'),
            }
          ](name='Tables', description='The settings for the target table objects in the current database.'),
          tenantName?: string(name='TenantName', description='The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.', example='tenant'),
          type?: string(name='Type', description='Valid values: DATABASE and TABLE.', example='DATABASE'),
        }
      ](name='Databases', description='The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.'),
      mode?: string(name='Mode', description='The mapping type. Valid values: \\"NORMAL\\" and \\"WHITE_AND_BLACK_LIST\\".', example='NORMAL'),
    }(name='TransferMapping', description='The mappings for the synchronization objects.'),
    transferStepConfig?: {
      enableFullSync?: boolean(name='EnableFullSync', description='Indicates whether full migration is enabled.', example='false'),
      enableIncrSync?: boolean(name='EnableIncrSync', description='Indicates whether incremental synchronization is enabled.', example='false'),
      enableStructSync?: boolean(name='EnableStructSync', description='Indicates whether schema synchronization is enabled.', example='false'),
      incrSyncStepTransferConfig?: {
        recordTypeList?: [ string ](name='RecordTypeList', description='The list of data types of incremental data synchronized in incremental synchronization.'),
        startTimestamp?: long(name='StartTimestamp', description='The start time for incremental synchronization. The value is a timestamp in seconds.', example='1656644154'),
        storeLogKeptHour?: long(name='StoreLogKeptHour', description='The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.', example='1'),
        storeTransactionEnabled?: boolean(name='StoreTransactionEnabled', description='Indicates whether intra-transaction sequencing is enabled when incremental synchronization is enabled and the incremental log pull component is Store.', example='false'),
        transferStepType?: string(name='TransferStepType', description='Valid values: STRUCT, FULL, and INCR.', example='STRUCT'),
      }(name='IncrSyncStepTransferConfig', description='The settings of incremental synchronization steps.'),
    }(name='TransferStepConfig', description='The settings of synchronization steps'),
  }(name='Data', description='The business data returned.'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model DescribeOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOmsOpenAPIProjectResponseBody(name='body'),
}

async function describeOmsOpenAPIProjectWithOptions(request: DescribeOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): DescribeOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOmsOpenAPIProject(request: DescribeOmsOpenAPIProjectRequest): DescribeOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOmsOpenAPIProjectWithOptions(request, runtime);
}

model DescribeOmsOpenAPIProjectStepsRequest {
  pageNumber?: int32(name='PageNumber', description='The read RT baseline of the source data source.', example='1'),
  pageSize?: int32(name='PageSize', description='The read/write RPS baseline of the destination data source.', example='1'),
  projectId?: string(name='ProjectId', description='The read/write RT baseline of the destination data source.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='The read RT baseline of the source data source.', example='g_abcdefj***'),
}

model DescribeOmsOpenAPIProjectStepsResponseBody = {
  advice?: string(name='Advice', description='The error related parameters.', example='The error related parameters.'),
  code?: string(name='Code', description='The error code (old), such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The step end time, in the format of "yyyy-MM-ddTHH:mm:ss".', example='1'),
  data?: [ 
    {
      estimatedRemainingSeconds?: long(name='EstimatedRemainingSeconds', description='The request ID.', example='2020-05-22T17:04:18'),
      extraInfo?: {
        errorCode?: string(name='ErrorCode', description='The job ID.', example='INNER_ERROR'),
        errorDetails?: [ 
          {
            code?: string(name='Code', description='The suggestions (old).', example='200'),
            level?: string(name='Level', description='Contact the administrator.', example='CRITICAL'),
            message?: string(name='Message', description='A sub-status that indicates whether the checker has completed full verification.', example='A system error occurred.'),
            proposal?: string(name='Proposal', description='The amount of data migrated.', example='A system error occurred.'),
          }
        ](name='ErrorDetails', description='Schema migration'),
        errorMsg?: string(name='ErrorMsg', description='The resource deployment ID.', example='A system error occurred.'),
        errorParam?: map[string]string(name='ErrorParam', description='The error code (new).'),
        failedTime?: string(name='FailedTime', description='The additional information. The value is a JSON string.', example='2020-05-22T17:04:18'),
      }(name='ExtraInfo', description='A system error occurred.'),
      finishTime?: string(name='FinishTime', description='$.parameters[3].schema.example', example='2020-05-22T17:05:18'),
      interactive?: boolean(name='Interactive', description='$.parameters[5].schema.description', example='false'),
      startTime?: string(name='StartTime', description='The error details.', example='2020-05-22T17:04:18'),
      stepDescription?: string(name='StepDescription', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='Schema migration'),
      stepInfo?: {
        capacity?: long(name='Capacity', description='The total count, which takes effect in a pagination query.', example='10000'),
        checkpoint?: string(name='Checkpoint', description='The operation that you want to perform. Set the value to **DescribeOmsOpenAPIProjectSteps**.', example='1656669613'),
        connectorFullProgressOverview?: {
          estimatedRemainingTimeOfSec?: long(name='EstimatedRemainingTimeOfSec', description='A sub-status that indicates whether this step is skipped.', example='100'),
          estimatedTotalCount?: long(name='EstimatedTotalCount', description='The read RPS baseline of the source data source.', example='100'),
          finishedCount?: long(name='FinishedCount', description='The read/write RT per record of the destination data source, in ms.', example='50'),
          progress?: int32(name='Progress', description='The business data returned.', example='1120'),
        }(name='ConnectorFullProgressOverview', description='The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.'),
        deployId?: string(name='DeployId', description='The page size, which takes effect in a pagination query.', example='ewtfqwt'),
        dstIops?: long(name='DstIops', description='The error description (old).', example='1'),
        dstRps?: long(name='DstRps', description='The estimated amount of data to migrate.', example='1'),
        dstRpsRef?: long(name='DstRpsRef', description='The step progress.', example='1'),
        dstRt?: long(name='DstRt', description='The read requests per second (RPS) of the source data source.', example='1'),
        dstRtRef?: long(name='DstRtRef', description='A system error occurred.', example='1'),
        gmt?: long(name='Gmt', description='The full synchronization progress.', example='1656669613'),
        inconsistencies?: long(name='Inconsistencies', description='The read/write throughput of the destination data source, in bytes per second.', example='1'),
        incrTimestampCheckpoint?: long(name='IncrTimestampCheckpoint', description='The read throughput of the source data source, in bytes per second.', example='100'),
        jobId?: string(name='JobId', description='The error code (old).', example='abcd'),
        processedRecords?: long(name='ProcessedRecords', description='The error related parameters.', example='10'),
        skipped?: boolean(name='Skipped', description='The time spent in processing the request, in seconds.', example='false'),
        srcIops?: long(name='SrcIops', description='finishedCount / estimatedTotalCount', example='1'),
        srcIopsRef?: long(name='SrcIopsRef', description='The end time, in the format of "2020-05-22T17:04:18".', example='1'),
        srcRps?: long(name='SrcRps', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='1'),
        srcRpsRef?: long(name='SrcRpsRef', description='The checkpoint. The value is a unix timestamp in seconds.', example='1'),
        srcRt?: long(name='SrcRt', description='The error code.', example='1'),
        srcRtRef?: long(name='SrcRtRef', description='The checkpoint collection time. The value is a unix timestamp in seconds.', example='1'),
        validated?: boolean(name='Validated', description='The read/write RPS of the destination data source.', example='false'),
      }(name='StepInfo', description='The error related parameters.'),
      stepName?: string(name='StepName', description='Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.', example='structmigration'),
      stepOrder?: int32(name='StepOrder', description='DescribeOmsOpenAPIProjectSteps', example='1'),
      stepProgress?: int32(name='StepProgress', description='cn-hangzhou', example='10'),
      stepStatus?: string(name='StepStatus', description='Indicates whether the call is successful.', example='INIT'),
    }
  ](name='Data', description='Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.'),
  errorDetail?: {
    code?: string(name='Code', description='The error details.', example='CM-RESOAT111111'),
    level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='A system error occurred.', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='Contact the administrator.', example='The error details.'),
  }(name='ErrorDetail', description='The step details. The value is a JSON string.'),
  message?: string(name='Message', description='A system error occurred.', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The additional information. The value is a JSON string.', example='1'),
  pageSize?: int32(name='PageSize', description='The step start time, in the format of "yyyy-MM-ddTHH:mm:ss".', example='1'),
  requestId?: string(name='RequestId', description='The time when the error occurred.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The read throughput baseline of the source data source.', example='true'),
  totalCount?: long(name='TotalCount', description='The estimated remaining time. This parameter takes effect in full synchronization.', example='1'),
}

model DescribeOmsOpenAPIProjectStepsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOmsOpenAPIProjectStepsResponseBody(name='body'),
}

async function describeOmsOpenAPIProjectStepsWithOptions(request: DescribeOmsOpenAPIProjectStepsRequest, runtime: Util.RuntimeOptions): DescribeOmsOpenAPIProjectStepsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOmsOpenAPIProjectSteps',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOmsOpenAPIProjectSteps(request: DescribeOmsOpenAPIProjectStepsRequest): DescribeOmsOpenAPIProjectStepsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOmsOpenAPIProjectStepsWithOptions(request, runtime);
}

model DescribeOutlineBindingRequest {
  databaseName?: string(name='DatabaseName', description='- When the value is set to True, the throttling information in the database is queried based on the SQL ID.   
- When the value is set to False, the bound index or execution plan in the database is queried based on the SQL ID.', example='testdb'),
  instanceId?: string(name='InstanceId', description='SQLID.', example='ob317v4uif****'),
  isConcurrentLimit?: boolean(name='IsConcurrentLimit', description='The ID of the tenant.', example='false'),
  SQLId?: string(name='SQLId', description='false', example='8D6E84****0B8FB1823D199E2CA1****'),
  tableName?: string(name='TableName', description='The name of the database.', example='pay_online'),
  tenantId?: string(name='TenantId', description='The name of the tenant.    
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_). It cannot be set to SYS.', example='t2mr3oae0****'),
}

model DescribeOutlineBindingResponseBody = {
  outlineBinding?: {
    bindIndex?: string(name='BindIndex', example='PRIMARY'),
    bindPlan?: string(name='BindPlan', description='You can call this operation to query the outline binding information or throttling information of an SQL statement in the database based on an SQLID.', example='PHY_TABLE_SCAN | bmsql_order_line | 40 ******'),
    maxConcurrent?: int32(name='MaxConcurrent', example='2'),
    outlineId?: long(name='OutlineId', description='{"name":"DescribeOutlineBinding","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeOutlineBinding\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"t2mr3oae0****\\"},{\\"name\\":\\"TableName\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"pay_online\\"},{\\"name\\":\\"DatabaseName\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"SQLId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"SQLID\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"},{\\"name\\":\\"IsConcurrentLimit\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Boolean\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"false\\"},{\\"name\\":\\"InstanceId\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"ob317v4uif****\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"OutlineBinding\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"BindPlan\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"PHY_TABLE_SCAN | bmsql_order_line | 40 ******\\"},{\\"name\\":\\"OutlineId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"OutlineID\\",\\"description\\":\\"OutlineID。\\",\\"example\\":\\"-1\\"},{\\"name\\":\\"BindIndex\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"PRIMARY\\"},{\\"name\\":\\"MaxConcurrent\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"},{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{\\"2014\\":[{\\"code\\":\\"2014\\",\\"defaultError\\":false,\\"errorCode\\":\\"InternalError\\",\\"errorMessage\\":\\"The request processing has failed due to some unknown error.\\",\\"errorMessageCn\\":\\"\\",\\"type\\":\\"user\\"}]}"}', example='-1'),
    tableName?: string(name='TableName', description='表名称'),
  }(name='OutlineBinding', description='```
http(s)://[Endpoint]/?Action=DescribeOutlineBinding
&TenantId=t2mr3oae0****
&TableName=pay_online
&DatabaseName=testdb
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&IsConcurrentLimit=false
&InstanceId=ob317v4uif****
&Common request parameters
```'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeOutlineBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOutlineBindingResponseBody(name='body'),
}

async function describeOutlineBindingWithOptions(request: DescribeOutlineBindingRequest, runtime: Util.RuntimeOptions): DescribeOutlineBindingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.databaseName)) {
    body['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isConcurrentLimit)) {
    body['IsConcurrentLimit'] = request.isConcurrentLimit;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutlineBinding',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOutlineBinding(request: DescribeOutlineBindingRequest): DescribeOutlineBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutlineBindingWithOptions(request, runtime);
}

model DescribeParametersRequest {
  dimension?: string(name='Dimension', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='TENANT'),
  dimensionValue?: string(name='DimensionValue', description='Alibaba Cloud CLI', example='ob2mr3oae0****'),
  instanceId?: string(name='InstanceId', description='498529', example='ob317v4uif****'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      acceptableValue?: [ string ](name='AcceptableValue', description='DescribeParameters'),
      currentValue?: string(name='CurrentValue', description='The ID of the OceanBase cluster.', example='600'),
      defaultValue?: string(name='DefaultValue', description='```
http(s)://[Endpoint]/?Action=DescribeParameters
&InstanceId=ob317v4uif****
&Dimension=TENANT
&DimensionValue=ob2mr3oae0****
&Common request parameters
```', example='600s'),
      description?: string(name='Description', description='The description of the parameter.', example='The operation that you want to perform.   
Set the value to **DescribeParameters**.'),
      name?: string(name='Name', description='The request ID.', example='connect_timeout'),
      needReboot?: boolean(name='NeedReboot', description='The name of the parameter.', example='false'),
      readonly?: boolean(name='Readonly', description='参数是否只读'),
      rejectedValue?: [ string ](name='RejectedValue', description='{
    "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
    "Parameters": [
        {
            "Description": "The maximum delay allowed in weak-consistency reads.",
            "ValueType": "CAPACITY",
            "CurrentValue": "600",
            "NeedReboot": false,
            "Name": "connect_timeout",
            "DefaultValue": "600s",
            "RejectedValue": [
                "1s"
            ],
            "AcceptableValue": [
                "1s"
            ]
        }
    ]
}'),
      valueType?: string(name='ValueType', description='The invalid value range of the parameter.    
It is an array with two string elements, which represents a range. The first element represents the minimum value and the second element represents the maximum value.', example='CAPACITY'),
    }
  ](name='Parameters', description='Indicates whether a restart is required for changes to the parameter to take effect. Valid values:   
- true: A restart is required.   
- false: A restart is not required.'),
  requestId?: string(name='RequestId', description='The return result of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dimension)) {
    body['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.dimensionValue)) {
    body['DimensionValue'] = request.dimensionValue;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameters',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeParametersHistoryRequest {
  dimension?: string(name='Dimension', description='The value of the parameter after the modification.', example='TENANT'),
  dimensionValue?: string(name='DimensionValue', description='The list of parameter modification records.', example='ob2mr3oae0****'),
  endTime?: string(name='EndTime', description='Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.', example='2021-09-13 15:40:43'),
  instanceId?: string(name='InstanceId', description='The name of the parameter.', example='ob317v4uif****'),
  pageNumber?: int32(name='PageNumber', description='Default value: 10.', example='1'),
  pageSize?: int32(name='PageSize', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='10'),
  startTime?: string(name='StartTime', description='You can call this operation to query the modification history of cluster or tenant parameters.', example='2021-06-13 15:40:43'),
}

model DescribeParametersHistoryResponseBody = {
  requestId?: string(name='RequestId', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  respond?: [ 
    {
      pageNumber?: int32(name='PageNumber', description='The end time for the query of parameter modification history.', example='-'),
      parameters?: [ 
        {
          createTime?: string(name='CreateTime', description='The request ID.', example='2021-09-14 10:57:44'),
          dimensionValue?: string(name='DimensionValue', description='```
http(s)://[Endpoint]/?Action=DescribeParametersHistory
&InstanceId=ob317v4uif****
&Dimension=TENANT
&DimensionValue=ob2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-09-13 15:40:43
&PageSize=10
&PageNumber=1
&Common request parameters
```', example='DEFAULT_DIMENSION_VALUE'),
          name?: string(name='Name', description='You can call this operation to query the modification history of cluster or tenant parameters.', example='connect_timeout'),
          newValue?: string(name='NewValue', example='200'),
          oldValue?: string(name='OldValue', description='The start time of the time range for querying the parameter modification history.', example='300'),
          status?: string(name='Status', description='-', example='APPLIED'),
          updateTime?: string(name='UpdateTime', description='The name of the parameter.', example='2021-09-14 10:57:44'),
        }
      ](name='Parameters', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10'),
      totalCount?: int32(name='TotalCount', description='The list of parameter modification records.', example='2'),
    }
  ](name='Respond', description='The time when the parameter modification took effect.'),
}

model DescribeParametersHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersHistoryResponseBody(name='body'),
}

async function describeParametersHistoryWithOptions(request: DescribeParametersHistoryRequest, runtime: Util.RuntimeOptions): DescribeParametersHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dimension)) {
    body['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.dimensionValue)) {
    body['DimensionValue'] = request.dimensionValue;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParametersHistory',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParametersHistory(request: DescribeParametersHistoryRequest): DescribeParametersHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersHistoryWithOptions(request, runtime);
}

model DescribeRecommendIndexRequest {
  instanceId?: string(name='InstanceId', description='The return result of the request.', example='ob317v4uif****'),
  SQLId?: string(name='SQLId', description='The ID of the OceanBase cluster.', example='8D6E84****0B8FB1823D199E2CA1****'),
  tenantId?: string(name='TenantId', description='The index recommended for the SQL statement after calculation by the diagnostic system.   
- If the recommended index is the primary key, PRIMARY is returned.  
- If an index created by the user is recommended, the index name is returned.   
The system recommends only one index for an SQL statement. You can call the DescribeIndexes operation to view the indexes of a table.', example='t2mr3oae0****'),
}

model DescribeRecommendIndexResponseBody = {
  recommendIndex?: {
    suggestIndex?: string(name='SuggestIndex', description='Example 1', example='PRIMARY'),
    tableList?: string(name='TableList', example='testtable'),
    tenantMode?: string(name='TenantMode', example='mysql'),
  }(name='RecommendIndex', description='The information about the recommended index.'),
  requestId?: string(name='RequestId', description='The tenant mode.   Valid values:  
Oracle   
MySQL', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model DescribeRecommendIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecommendIndexResponseBody(name='body'),
}

async function describeRecommendIndexWithOptions(request: DescribeRecommendIndexRequest, runtime: Util.RuntimeOptions): DescribeRecommendIndexResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecommendIndex',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecommendIndex(request: DescribeRecommendIndexRequest): DescribeRecommendIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecommendIndexWithOptions(request, runtime);
}

model DescribeSQLDetailsRequest {
  SQLId?: string(name='SQLId', description='The SQL text.', example='8D6E84****0B8FB1823D199E2CA1****'),
  tenantId?: string(name='TenantId', description='SQLID.', example='t2mr3oae0****'),
}

model DescribeSQLDetailsResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **DescribeSQLDetails**.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SQLDetails?: [ 
    {
      dbName?: string(name='DbName', example='testdb'),
      SQLText?: string(name='SQLText', description='{"name":"DescribeSQLDetails","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeSQLDetails\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"t2mr3oae0****\\"},{\\"name\\":\\"SQLId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"SQLID\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\\"},{\\"name\\":\\"SQLDetails\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Array\\",\\"subType\\":\\"Object\\",\\"description\\":\\"  \\",\\"children\\":[{\\"name\\":\\"SQLText\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC\\"},{\\"name\\":\\"DbName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"UserName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tester\\"}],\\"title\\":\\"\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{}"}', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      userName?: string(name='UserName', example='tester'),
    }
  ](name='SQLDetails', description='```
http(s)://[Endpoint]/?Action=DescribeSQLDetails
&TenantId=t2mr3oae0****
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&Common request parameters
```'),
}

model DescribeSQLDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLDetailsResponseBody(name='body'),
}

async function describeSQLDetailsWithOptions(request: DescribeSQLDetailsRequest, runtime: Util.RuntimeOptions): DescribeSQLDetailsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLDetails',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLDetails(request: DescribeSQLDetailsRequest): DescribeSQLDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLDetailsWithOptions(request, runtime);
}

model DescribeSQLHistoryListRequest {
  endTime?: string(name='EndTime', description='The number of block index cache hits.', example='2021-09-13T15:40:43Z'),
  pageNumber?: int32(name='PageNumber', description='The end time in UTC +0.', example='1'),
  pageSize?: int32(name='PageSize', description='The end time.', example='10'),
  SQLId?: string(name='SQLId', description='The number of block index cache hits.', example='8D6E84****0B8FB1823D199E2CA1****'),
  startTime?: string(name='StartTime', description='The maximum response time.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='The average CPU time.', example='t2mr3oae0****'),
}

model DescribeSQLHistoryListResponseBody = {
  requestId?: string(name='RequestId', description='The IP address of the client.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SQLHistoryList?: {
    count?: long(name='Count', example='1'),
    list?: [ 
      {
        affectedRows?: long(name='AffectedRows', description='The wait time of the client.', example='0'),
        appWaitTime?: float(name='AppWaitTime', description='The IP address of the client.', example='0.0'),
        blockCacheHit?: long(name='BlockCacheHit', description='The number of logical reads.', example='14'),
        blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The number of block index cache hits.', example='4'),
        bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='The username.', example='0'),
        clientIp?: string(name='ClientIp', description='The number of remote plans.', example='1*2.***.1*3.***'),
        concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The number of block cache hits.', example='0.0'),
        cpuTime?: float(name='CpuTime', description='The page number.', example='50.13'),
        dbName?: string(name='DbName', description='The number of retries.', example='testdb'),
        decodeTime?: float(name='DecodeTime', description='The number of rows read from the disk.', example='0.0'),
        diskRead?: long(name='DiskRead', description='Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.', example='0'),
        elapsedTime?: float(name='ElapsedTime', description='The number of row cache hits.', example='76.382'),
        endTime?: long(name='EndTime', description='The maximum CPU time.', example='2021-12-28T02:08:18Z'),
        endTimeUTCString?: string(name='EndTimeUTCString', description='The number of rows read from the memory.', example='2021-12-28T02:08:18Z'),
        event?: string(name='Event', description='The number of rows returned.', example='mysql response wait client'),
        execPerSecond?: long(name='ExecPerSecond', description='The queuing time.', example='163.0'),
        executeTime?: float(name='ExecuteTime', description='The execution history of the SQL statement.', example='61.044'),
        executions?: long(name='Executions', description='The wait time in concurrent execution.', example='89403'),
        failTimes?: long(name='FailTimes', description='Example 1', example='0'),
        getPlanTime?: float(name='GetPlanTime', description='The number of RPCs.', example='0.052'),
        IOWaitTime?: float(name='IOWaitTime', description='The number of rows affected.', example='0.0'),
        logicalRead?: long(name='LogicalRead', example='19'),
        maxCpuTime?: float(name='MaxCpuTime', description='The number of row cache hits.', example='257.967'),
        maxElapsedTime?: float(name='MaxElapsedTime', description='The scheduling duration.', example='260.44'),
        memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The operation that you want to perform.   
Set the value to **DescribeSQLHistoryList**.', example='527'),
        missPlans?: long(name='MissPlans', description='The number of Bloom filter cache hits.', example='0'),
        netWaitTime?: float(name='NetWaitTime', description='The return result of the request.', example='0.0'),
        nodeIp?: string(name='NodeIp', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='i-bp18qljorblo8es*****'),
        queueTime?: float(name='QueueTime', example='15.275'),
        RPCCount?: long(name='RPCCount', description='The quantity.', example='0'),
        remotePlans?: long(name='RemotePlans', description='The list.', example='0'),
        retryCount?: long(name='RetryCount', description='The number of executions.', example='0'),
        returnRows?: long(name='ReturnRows', description='The I/O wait time.', example='1'),
        rowCacheHit?: long(name='RowCacheHit', description='{"name":"DescribeSQLHistoryList","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeSQLHistoryList\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"t2mr3oae0****\\"},{\\"name\\":\\"StartTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:40:43Z\\"},{\\"name\\":\\"EndTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-09-13T15:40:43Z\\"},{\\"name\\":\\"SQLId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"SQLID\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"},{\\"name\\":\\"PageNumber\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"PageSize\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"10\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\\"},{\\"name\\":\\"SQLHistoryList\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"List\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Array\\",\\"subType\\":\\"Object\\",\\"description\\":\\"  \\",\\"children\\":[{\\"name\\":\\"ExecPerSecond\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"163.0\\"},{\\"name\\":\\"MaxCpuTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"257.967\\"},{\\"name\\":\\"BlockCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"14\\"},{\\"name\\":\\"DecodeTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"RemotePlans\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"RPCCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"NetWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"DiskRead\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"NodeIp\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"i-bp18qljorblo8es*****\\"},{\\"name\\":\\"ConcurrencyWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"DbName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"MemstoreReadRowCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"527\\"},{\\"name\\":\\"AppWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"ElapsedTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"76.382\\"},{\\"name\\":\\"MissPlans\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"AffectedRows\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"ScheduleTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"Event\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"mysql response wait client\\"},{\\"name\\":\\"TotalWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"10.966\\"},{\\"name\\":\\"ReturnRows\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"ExecuteTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"61.044\\"},{\\"name\\":\\"UserName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tester\\"},{\\"name\\":\\"Executions\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"89403\\"},{\\"name\\":\\"GetPlanTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.052\\"},{\\"name\\":\\"CpuTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"50.13\\"},{\\"name\\":\\"MaxElapsedTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"260.44\\"},{\\"name\\":\\"BlockIndexCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"4\\"},{\\"name\\":\\"EndTimeUTCString\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-12-28T02:08:18Z\\"},{\\"name\\":\\"EndTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-12-28T02:08:18Z\\"},{\\"name\\":\\"RetryCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"ClientIp\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1*2.***.1*3.***\\"},{\\"name\\":\\"BloomFilterCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"IOWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"FailTimes\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"QueueTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"15.275\\"},{\\"name\\":\\"RowCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"LogicalRead\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"19\\"},{\\"name\\":\\"SsstoreReadRowCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"43086\\"}],\\"title\\":\\"\\"},{\\"name\\":\\"Count\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{\\"2014\\":[{\\"code\\":\\"2014\\",\\"defaultError\\":false,\\"errorCode\\":\\"InternalError\\",\\"errorMessage\\":\\"The request processing has failed due to some unknown error.\\",\\"errorMessageCn\\":\\"\\",\\"type\\":\\"user\\"}]}"}', example='0'),
        scheduleTime?: float(name='ScheduleTime', description='The end time of the time range for querying the SQL execution history.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='0.0'),
        ssstoreReadRowCount?: long(name='SsstoreReadRowCount', example='43086'),
        totalWaitTime?: float(name='TotalWaitTime', description='The average response time.', example='10.966'),
        userName?: string(name='UserName', description='The network latency.', example='tester'),
      }
    ](name='List', description='The I/O wait time.'),
  }(name='SQLHistoryList', description='The number of Bloom filter cache hits.'),
}

model DescribeSQLHistoryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLHistoryListResponseBody(name='body'),
}

async function describeSQLHistoryListWithOptions(request: DescribeSQLHistoryListRequest, runtime: Util.RuntimeOptions): DescribeSQLHistoryListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLHistoryList',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLHistoryList(request: DescribeSQLHistoryListRequest): DescribeSQLHistoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLHistoryListWithOptions(request, runtime);
}

model DescribeSQLPlansRequest {
  SQLId?: string(name='SQLId', description='The time when the plan was loaded for the first time, .', example='8D6E84****0B8FB1823D199E2CA1****'),
  tenantId?: string(name='TenantId', description='The time when the plan was loaded for the first time, .', example='t2mr3oae0****'),
}

model DescribeSQLPlansResponseBody = {
  requestId?: string(name='RequestId', description='The return result of the request.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  SQLPlans?: [ 
    {
      avgExecutionMS?: float(name='AvgExecutionMS', description='The time when the plan was bound.', example='1'),
      avgExecutionTimeMS?: long(name='AvgExecutionTimeMS', description='The time when the plan was loaded for the first time, in UTC +0.', example='288'),
      firstLoadTime?: long(name='FirstLoadTime', example='1641492303000'),
      firstLoadTimeUTCString?: string(name='FirstLoadTimeUTCString', description='Example 1', example='2022-01-06T18:05:03Z'),
      hitCount?: int32(name='HitCount', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='3'),
      mergedVersion?: int32(name='MergedVersion', description='The unique identifier of the SQL execution plan in the diagnostic system.', example='132'),
      nodeIp?: string(name='NodeIp', description='The complete execution plan of the SQL statement.', example='i-bp16niirq4zdmgvm****'),
      outlineData?: string(name='OutlineData', description='The information about the plan.', example='/*+ BEGIN_OUTLINE_DATA FULL(@\\"SEL$1\\" \\"testdb1.bmsql_order_line\\"@\\"SEL$1\\") END_OUTLINE_DATA*/'),
      outlineId?: long(name='OutlineId', description='SQLID.', example='-1'),
      outlineTime?: long(name='OutlineTime', description='The ID of the SQL execution plan in the database.', example='1641492303000'),
      outlineTimeUTCString?: string(name='OutlineTimeUTCString', description='The major compaction version.', example='2022-01-06T18:05:03Z'),
      planFull?: string(name='PlanFull', description='The information about the execution plan.', example='PHY_TABLE_SCAN | bmsql_order_line | 40 ******'),
      planId?: int32(name='PlanId', description='OutlineID.', example='9114'),
      planInfo?: string(name='PlanInfo', example='PHY_TABLE_SCAN'),
      planUnionHash?: string(name='PlanUnionHash', description='The return result of the request.', example='859ef7ee****b23ac98cdeb2476f****'),
      querySQL?: string(name='QuerySQL', description='The request ID.', example='SELECT ol_i_id, ***, *** FROM aaa'),
    }
  ](name='SQLPlans', description='master'),
}

model DescribeSQLPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLPlansResponseBody(name='body'),
}

async function describeSQLPlansWithOptions(request: DescribeSQLPlansRequest, runtime: Util.RuntimeOptions): DescribeSQLPlansResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLPlans',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLPlans(request: DescribeSQLPlansRequest): DescribeSQLPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPlansWithOptions(request, runtime);
}

model DescribeSecurityIpGroupsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='i-bp67acfmxazb4p****'),
}

model DescribeSecurityIpGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroups?: [ 
    {
      securityIpGroupName?: string(name='SecurityIpGroupName', example='online_paycore'),
      securityIps?: string(name='SecurityIps', example='121.41.106.33,100.104.7.0/26'),
    }
  ](name='SecurityIpGroups'),
  totalCount?: int32(name='TotalCount', description='Example 1', example='2'),
}

model DescribeSecurityIpGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityIpGroupsResponseBody(name='body'),
}

async function describeSecurityIpGroupsWithOptions(request: DescribeSecurityIpGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityIpGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityIpGroups',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityIpGroups(request: DescribeSecurityIpGroupsRequest): DescribeSecurityIpGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIpGroupsWithOptions(request, runtime);
}

model DescribeSlowSQLHistoryListRequest {
  endTime?: string(name='EndTime', description='The number of RPCs.', example='2021-12-14T08:34:49Z'),
  pageNumber?: int32(name='PageNumber', description='The maximum response time.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of plan misses.', example='10'),
  SQLId?: string(name='SQLId', description='The wait time for network.', example='8D6E84735C0****1823D199E2CA1****'),
  startTime?: string(name='StartTime', description='The I/O wait time.', example='2021-12-14T02:34:49Z'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t384tolsj****'),
}

model DescribeSlowSQLHistoryListResponseBody = {
  requestId?: string(name='RequestId', description='The end time of the time range for querying the execution history of the slow SQL statement.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  slowSQLHistoryList?: {
    count?: long(name='Count', example='1'),
    list?: [ 
      {
        affectedRows?: double(name='AffectedRows', description='The wait event.', example='0'),
        appWaitTime?: double(name='AppWaitTime', description='The number of row cache hits.', example='0.0'),
        blockCacheHit?: double(name='BlockCacheHit', description='The average CPU time.', example='14'),
        blockIndexCacheHit?: double(name='BlockIndexCacheHit', description='The number of rows to return on each page.  
- Maximum value: 100   
- Default value: 10', example='4'),
        bloomFilterCacheHit?: double(name='BloomFilterCacheHit', description='The number of executions.', example='0'),
        clientIp?: string(name='ClientIp', description='The number of retries.', example='1*2.***.1*3.***'),
        concurrencyWaitTime?: double(name='ConcurrencyWaitTime', description='$.parameters[6].schema.example', example='0.0'),
        cpuTime?: double(name='CpuTime', description='$.parameters[6].schema.enumValueTitles', example='50.13'),
        dbName?: string(name='DbName', description='The IP address of the node.', example='testdb'),
        decodeTime?: double(name='DecodeTime', description='$.parameters[7].schema.description', example='0.0'),
        diskRead?: double(name='DiskRead', description='SQLID.', example='0'),
        elapsedTime?: double(name='ElapsedTime', description='The queuing time.', example='76.382'),
        endTimeUTCString?: string(name='EndTimeUTCString', example='2021-12-28T02:08:18Z'),
        event?: string(name='Event', description='The internal wait time.', example='mysql response wait client'),
        execPerSecond?: double(name='ExecPerSecond', description='The number of failures.', example='163.0'),
        executeTime?: double(name='ExecuteTime', description='The request ID.', example='61.044'),
        executions?: double(name='Executions', description='The maximum CPU time.', example='89403'),
        failTimes?: double(name='FailTimes', description='The number of rows returned.', example='0'),
        getPlanTime?: double(name='GetPlanTime', description='Example 1', example='0.052'),
        IOWaitTime?: double(name='IOWaitTime', description='$.parameters[7].schema.enumValueTitles', example='0.0'),
        logicalRead?: double(name='LogicalRead', description='The quantity.', example='19'),
        maxCpuTime?: double(name='MaxCpuTime', description='DescribeSlowSQLHistoryList', example='257.967'),
        maxElapsedTime?: double(name='MaxElapsedTime', description='```
http(s)://[Endpoint]/?Action=DescribeSlowSQLHistoryList
&TenantId=t384tolsj****
&StartTime=2021-12-14T02:34:49Z
&EndTime=2021-12-14T08:34:49Z
&SQLId=8D6E84735C0****1823D199E2CA1****
&PageNumber=1
&PageSize=10
&Common request parameters
```', example='260.044'),
        memstoreReadRowCount?: double(name='MemstoreReadRowCount', description='The wait time of the client.', example='527'),
        missPlans?: double(name='MissPlans', description='The number of rows read from the disk.', example='0'),
        netWaitTime?: double(name='NetWaitTime', description='$.parameters[7].schema.example', example='0.0'),
        nodeIp?: string(name='NodeIp', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='i-bp18qljorblo8es*****'),
        queueTime?: double(name='QueueTime', description='$.parameters[6].schema.description', example='15.275'),
        RPCCount?: double(name='RPCCount', description='The end time.', example='0'),
        remotePlans?: double(name='RemotePlans', description='The time to wait for decoding.', example='0'),
        retryCount?: double(name='RetryCount', description='The number of block index cache hits.', example='0'),
        returnRows?: double(name='ReturnRows', description='The number of executions per second.', example='1'),
        rowCacheHit?: double(name='RowCacheHit', description='The execution history of the slow SQL statement.', example='0'),
        scheduleTime?: double(name='ScheduleTime', description='You can call this operation to query the execution history of an SQL statement by SQL ID that is determined as a slow SQL statement during a specified period of time.', example='0.0'),
        sqlId?: string(name='SqlId', description='The return result of the request.', example='8D6E84****0B8FB1823D199E2CA1****'),
        sqlType?: string(name='SqlType', description='The IP address of the client.', example='1'),
        ssstoreReadRowCount?: double(name='SsstoreReadRowCount', description='The scheduling duration.', example='43086'),
        tenantName?: string(name='TenantName', description='The return result of the request.', example='pay_online'),
        totalWaitTime?: double(name='TotalWaitTime', example='10.966'),
        userName?: string(name='UserName', description='The number of physical reads.', example='tester'),
      }
    ](name='List', description='The SQL ID, which uniquely identifies an SQL statement.'),
  }(name='SlowSQLHistoryList', description='Hard parsing time。'),
}

model DescribeSlowSQLHistoryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowSQLHistoryListResponseBody(name='body'),
}

async function describeSlowSQLHistoryListWithOptions(request: DescribeSlowSQLHistoryListRequest, runtime: Util.RuntimeOptions): DescribeSlowSQLHistoryListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowSQLHistoryList',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowSQLHistoryList(request: DescribeSlowSQLHistoryListRequest): DescribeSlowSQLHistoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowSQLHistoryListWithOptions(request, runtime);
}

model DescribeSlowSQLListRequest {
  dbName?: string(name='DbName', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='testdb'),
  endTime?: string(name='EndTime', example='2021-09-13T15:40:43Z'),
  filterCondition?: map[string]any(name='FilterCondition', description='The filter condition.', example='[dbName:sys]'),
  nodeIp?: string(name='NodeIp', description='The number of plan misses.', example='i-bp18qljorblo8es*****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='10'),
  pageSize?: int32(name='PageSize', description='The return result of the request.', example='1'),
  SQLId?: string(name='SQLId', description='The internal wait time.', example='8D6E84****0B8FB1823D199E2CA1****'),
  searchKeyWord?: string(name='SearchKeyWord', description='Alibaba Cloud CLI', example='update'),
  searchParameter?: string(name='SearchParameter', description='The IP address of the database node.', example='cputime'),
  searchRule?: string(name='SearchRule', description='The queuing time.', example='>'),
  searchValue?: string(name='SearchValue', description='The list of slow SQL statements.', example='0.01'),
  sortColumn?: string(name='SortColumn', description='The number of rows to return on each page.  
- Maximum value: 100  
- Default value: 10', example='cputime'),
  sortOrder?: string(name='SortOrder', description='The average CPU time.', example='desc'),
  startTime?: string(name='StartTime', description='The list of slow SQL statements.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='The number of logical reads.', example='t2mr3oae0****'),
}

model DescribeSlowSQLListShrinkRequest {
  dbName?: string(name='DbName', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='testdb'),
  endTime?: string(name='EndTime', example='2021-09-13T15:40:43Z'),
  filterConditionShrink?: string(name='FilterCondition', description='The filter condition.', example='[dbName:sys]'),
  nodeIp?: string(name='NodeIp', description='The number of plan misses.', example='i-bp18qljorblo8es*****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.    
- Start value: 1   
- Default value: 1', example='10'),
  pageSize?: int32(name='PageSize', description='The return result of the request.', example='1'),
  SQLId?: string(name='SQLId', description='The internal wait time.', example='8D6E84****0B8FB1823D199E2CA1****'),
  searchKeyWord?: string(name='SearchKeyWord', description='Alibaba Cloud CLI', example='update'),
  searchParameter?: string(name='SearchParameter', description='The IP address of the database node.', example='cputime'),
  searchRule?: string(name='SearchRule', description='The queuing time.', example='>'),
  searchValue?: string(name='SearchValue', description='The list of slow SQL statements.', example='0.01'),
  sortColumn?: string(name='SortColumn', description='The number of rows to return on each page.  
- Maximum value: 100  
- Default value: 10', example='cputime'),
  sortOrder?: string(name='SortOrder', description='The average CPU time.', example='desc'),
  startTime?: string(name='StartTime', description='The list of slow SQL statements.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='The number of logical reads.', example='t2mr3oae0****'),
}

model DescribeSlowSQLListResponseBody = {
  requestId?: string(name='RequestId', description='The SQL text.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  slowSQLList?: [ 
    {
      affectedRows?: long(name='AffectedRows', description='The username.', example='0'),
      appWaitTime?: float(name='AppWaitTime', description='The average response time.', example='0.0'),
      blockCacheHit?: long(name='BlockCacheHit', description='The wait time in concurrent execution.', example='14'),
      blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='The request ID.', example='4'),
      bloomFilterCacheHit?: long(name='BloomFilterCacheHit', example='0'),
      clientIp?: string(name='ClientIp', description='```
http(s)://[Endpoint]/?Action=DescribeSlowSQLList
&TenantId=t2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-09-13 15:40:43
&DbName=testdb
&SearchKeyWord=update
&SearchParameter=cputime
&SearchRule=>
&SearchValue=0.01
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&NodeIp=i-bp18qljorblo8es*****
&PageNumber=10
&PageSize=1
&SortColumn=cputime
&SortOrder=desc
&Common request parameters
```', example='1*2.***.1*3.***'),
      concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The sorted column.', example='0.0'),
      cpuTime?: float(name='CpuTime', description='The wait event.', example='50.13'),
      dbName?: string(name='DbName', description='The search value.', example='testdb'),
      decodeTime?: float(name='DecodeTime', description='The time spent in hard parsing.', example='0.0'),
      diskRead?: long(name='DiskRead', description='The IP address of the client.', example='0'),
      elapsedTime?: float(name='ElapsedTime', description='The search rule.', example='76.382'),
      event?: string(name='Event', description='The number of row cache hits.', example='mysql response wait client'),
      execPerSecond?: float(name='ExecPerSecond', description='The total count.', example='163.0'),
      executeTime?: float(name='ExecuteTime', description='The number of block cache hits.', example='61.044'),
      executions?: long(name='Executions', description='The IP address of the node.', example='89403'),
      failTimes?: long(name='FailTimes', description='{"name":"DescribeSlowSQLList","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"GET|POST","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeSlowSQLList\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"t2mr3oae0****\\"},{\\"name\\":\\"StartTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:40:43Z\\"},{\\"name\\":\\"EndTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-09-13T15:40:43Z\\"},{\\"name\\":\\"DbName\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"SearchKeyWord\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"update\\"},{\\"name\\":\\"SearchParameter\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"cputime\\"},{\\"name\\":\\"SearchRule\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\">\\"},{\\"name\\":\\"SearchValue\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"0.01\\"},{\\"name\\":\\"SQLId\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"},{\\"name\\":\\"NodeIp\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"i-bp18qljorblo8es*****\\"},{\\"name\\":\\"PageNumber\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"10\\"},{\\"name\\":\\"PageSize\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"FilterCondition\\",\\"position\\":\\"Body\\",\\"style\\":\\"json\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"[dbName:sys]\\"},{\\"name\\":\\"SortColumn\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"cputime\\"},{\\"name\\":\\"SortOrder\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"desc\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"TotalCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2\\"},{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\\"},{\\"name\\":\\"SlowSQLList\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Array\\",\\"subType\\":\\"Object\\",\\"description\\":\\"  \\",\\"children\\":[{\\"name\\":\\"Key\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"ExecPerSecond\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"163.0\\"},{\\"name\\":\\"SQLText\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC\\"},{\\"name\\":\\"MaxCpuTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"257.967\\"},{\\"name\\":\\"BlockCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"14\\"},{\\"name\\":\\"DecodeTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"RemotePlans\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"RPCCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"NetWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"DiskRead\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"NodeIp\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"i-bp18qljorblo8es*****\\"},{\\"name\\":\\"ConcurrencyWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"MemstoreReadRowCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"527\\"},{\\"name\\":\\"DbName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"testdb\\"},{\\"name\\":\\"AppWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"ElapsedTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"76.382\\"},{\\"name\\":\\"MissPlans\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"AffectedRows\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"ScheduleTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"Event\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"mysql response wait client\\"},{\\"name\\":\\"TotalWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"10.966\\"},{\\"name\\":\\"ReturnRows\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"ExecuteTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"61.044\\"},{\\"name\\":\\"UserName\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"tester\\"},{\\"name\\":\\"Executions\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"89403\\"},{\\"name\\":\\"GetPlanTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.052\\"},{\\"name\\":\\"CpuTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"50.13\\"},{\\"name\\":\\"MaxElapsedTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"260.044\\"},{\\"name\\":\\"SQLType\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"BlockIndexCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"4\\"},{\\"name\\":\\"RetryCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"SQLId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"SQLID。\\",\\"example\\":\\"8D6E84****0B8FB1823D199E2CA1****\\"},{\\"name\\":\\"ClientIp\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"1*2.***.1*3.***\\"},{\\"name\\":\\"BloomFilterCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"IOWaitTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"0.0\\"},{\\"name\\":\\"FailTimes\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"QueueTime\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Float\\",\\"description\\":\\"\\",\\"example\\":\\"15.275\\"},{\\"name\\":\\"RowCacheHit\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"0\\"},{\\"name\\":\\"LogicalRead\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"19\\"},{\\"name\\":\\"SsstoreReadRowCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"description\\":\\"\\",\\"example\\":\\"43086\\"}],\\"title\\":\\"\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{}"}', example='0'),
      getPlanTime?: float(name='GetPlanTime', description='The number of Bloom filter cache hits.', example='0.052'),
      IOWaitTime?: float(name='IOWaitTime', description='You can call this operation to query the list of slow SQL statements', example='0.0'),
      key?: long(name='Key', description='The scheduling duration.', example='1'),
      logicalRead?: long(name='LogicalRead', example='19'),
      maxCpuTime?: float(name='MaxCpuTime', description='The name of the database.', example='257.967'),
      maxElapsedTime?: float(name='MaxElapsedTime', description='The sequence number of the returned SQL statement.', example='260.044'),
      memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The number of logical reads.', example='527'),
      missPlans?: long(name='MissPlans', description='The number of RPCs.', example='0'),
      netWaitTime?: float(name='NetWaitTime', description='The search parameter.', example='0.0'),
      nodeIp?: string(name='NodeIp', description='The number of failures.', example='i-bp18qljorblo8es*****'),
      queueTime?: float(name='QueueTime', example='15.275'),
      RPCCount?: long(name='RPCCount', description='The maximum response time.', example='0'),
      remotePlans?: long(name='RemotePlans', description='The search keyword.', example='0'),
      retryCount?: long(name='RetryCount', description='The number of physical reads.', example='0'),
      returnRows?: long(name='ReturnRows', description='The wait time of the client.', example='1'),
      rowCacheHit?: long(name='RowCacheHit', example='0'),
      SQLId?: string(name='SQLId', description='Example 1', example='8D6E84****0B8FB1823D199E2CA1****'),
      SQLText?: string(name='SQLText', description='The network latency.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      SQLType?: long(name='SQLType', description='SQLID.', example='1'),
      scheduleTime?: float(name='ScheduleTime', description='The internal execution time.', example='0.0'),
      ssstoreReadRowCount?: long(name='SsstoreReadRowCount', example='43086'),
      totalWaitTime?: float(name='TotalWaitTime', description='The SQL ID, which uniquely identifies an SQL statement.', example='10.966'),
      userName?: string(name='UserName', description='The number of executions.', example='tester'),
    }
  ](name='SlowSQLList', description='The sorting rule.'),
  totalCount?: long(name='TotalCount', description='The name of the database.', example='2'),
}

model DescribeSlowSQLListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowSQLListResponseBody(name='body'),
}

async function describeSlowSQLListWithOptions(tmpReq: DescribeSlowSQLListRequest, runtime: Util.RuntimeOptions): DescribeSlowSQLListResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeSlowSQLListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterCondition)) {
    request.filterConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterCondition, 'FilterCondition', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.filterConditionShrink)) {
    body['FilterCondition'] = request.filterConditionShrink;
  }
  if (!Util.isUnset(request.nodeIp)) {
    body['NodeIp'] = request.nodeIp;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.searchKeyWord)) {
    body['SearchKeyWord'] = request.searchKeyWord;
  }
  if (!Util.isUnset(request.searchParameter)) {
    body['SearchParameter'] = request.searchParameter;
  }
  if (!Util.isUnset(request.searchRule)) {
    body['SearchRule'] = request.searchRule;
  }
  if (!Util.isUnset(request.searchValue)) {
    body['SearchValue'] = request.searchValue;
  }
  if (!Util.isUnset(request.sortColumn)) {
    body['SortColumn'] = request.sortColumn;
  }
  if (!Util.isUnset(request.sortOrder)) {
    body['SortOrder'] = request.sortOrder;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowSQLList',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowSQLList(request: DescribeSlowSQLListRequest): DescribeSlowSQLListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowSQLListWithOptions(request, runtime);
}

model DescribeTenantRequest {
  instanceId?: string(name='InstanceId', description='The status of the Internet address for accessing the tenant. Valid values:   
- CLOSED: The address is disabled.   
- ALLOCATING_INTERNET_ADDRESS: An address is being applied for.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.   
- ONLINE: The address is in service.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='Indicates whether to enable transaction splitting.', example='ob2mr3oae0****'),
}

model DescribeTenantResponseBody = {
  requestId?: string(name='RequestId', description='The zone information of the tenant.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenant?: {
    availableZones?: [ string ](name='AvailableZones', description='DescribeTenant'),
    charset?: string(name='Charset', description='The number of CPU cores in each resource unit of the tenant.', example='utf8mb4'),
    clogServiceStatus?: string(name='ClogServiceStatus', description='地址类型', example='CLOSED'),
    collation?: string(name='Collation', description='The request ID.', example='utf8mb4_general_ci'),
    createTime?: string(name='CreateTime', description='You can call this operation to create a single tenant in a specific cluster.', example='2021-09-17 15:52:17'),
    deployMode?: string(name='DeployMode', description='The list of zones.', example='1-1-1'),
    deployType?: string(name='DeployType', description='The series of the instance.', example='multiple'),
    description?: string(name='Description', description='Indicates whether to enable read/write splitting endpoint.', example='The information of the tenant.'),
    diskType?: string(name='DiskType', description='You can call this operation to query the information of a specific tenant in a specific cluster.', example='cloud_essd_pl1'),
    enableBinlogService?: boolean(name='EnableBinlogService', description='是否可以申请Binlog服务'),
    enableClogService?: boolean(name='EnableClogService', description='The intranet address for accessing the tenant.', example='false'),
    enableInternetAddressService?: boolean(name='EnableInternetAddressService', description='The deployment type of the primary zone.', example='true'),
    enableReadWriteSplit?: boolean(name='EnableReadWriteSplit', example='false'),
    instanceType?: string(name='InstanceType', description='{
    "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
    "Tenant": {
        "TenantId": "t33h8y08k****",
        "TenantName": "pay_online",
        "TenantMode": "Oracle",
        "VpcId": "vpc-bp1d2q3mhg9i23ofi****",
        "Status": "ONLINE",
        "PrimaryZone": "cn-hangzhou-i",
        "DeployType": "multiple",
        "DeployMode": "1-1-1",
        "Description": "PayCore business database",
        "CreateTime": "2021-09-17 15:52:17",
        "TenantResource": {
            "UnitNum": 1,
            "Cpu": {
                "UsedCpu": 8,
                "TotalCpu": 10,
                "UnitCpu": 8
            },
            "Memory": {
                "UsedMemory": 30,
                "TotalMemory": 64,
                "UnitMemory": 32
            },
            "DiskSize": {
                "UsedDiskSize": 86
            }
        },
        "TenantConnections": [
            {
                "ConnectionRole": "ReadWrite",
                "IntranetAddress": "t32a7ru5u****.oceanbase.aliyuncs.com",
                "IntranetPort": 3306,
                "InternetAddress": "t32a7ru5u****mo.oceanbase.aliyuncs.com",
                "InternetPort": 3306,
                "VpcId": "vpc-bp1qiail1asmfe23t****",
                "VSwitchId": "vsw-bp11k1aypnzu1l3whi****",
                "IntranetAddressMasterZoneId": "cn-hangzhou-i",
                "IntranetAddressSlaveZoneId": "cn-hangzhou-j",
                "IntranetAddressStatus": "ONLINE",
                "ConnectionZones": [
                    "cn-hangzhou-i"
                ],
                "InternetAddressStatus": "CLOSED"
            }
        ],
        "TenantZones": [
            {
                "TenantZoneId": "cn-hangzhou-i",
                "Region": "cn-hangzhou",
                "TenantZoneRole": "ReadOnly"
            }
        ],
        "ClogServiceStatus": "CLOSED"
    }
}', example='KAFKA_PUBLIC'),
    masterIntranetAddressZone?: string(name='MasterIntranetAddressZone', description='```
http(s)://[Endpoint]/?Action=DescribeTenant
&InstanceId=ob317v4uif****
&TenantId=ob2mr3oae0****
&Common request parameters
```', example='cn-hangzhou-h'),
    payType?: string(name='PayType', example='POSTPAY'),
    primaryZone?: string(name='PrimaryZone', description='The type of the payment.', example='cn-hangzhou-i'),
    primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='Example 1', example='RANDOM'),
    series?: string(name='Series', description='<DescribeTenantResponse>
    <RequestId>EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C</RequestId>
    <Tenant>
        <TenantId>t33h8y08k****</TenantId>
        <TenantName>pay_online</TenantName>
        <TenantMode>Oracle</TenantMode>
        <VpcId>vpc-bp1d2q3mhg9i23ofi****</VpcId>
        <Status>ONLINE</Status>
        <PrimaryZone>cn-hangzhou-i</PrimaryZone>
        <DeployType>multiple</DeployType>
        <DeployMode>1-1-1</DeployMode>
        <Description>PayCore business database</Description>
        <CreateTime>2021-09-17 15:52:17</CreateTime>
        <TenantResource>
            <UnitNum>1</UnitNum>
            <Cpu>
                <UsedCpu>8</UsedCpu>
                <TotalCpu>10</TotalCpu>
                <UnitCpu>8</UnitCpu>
            </Cpu>
            <Memory>
                <UsedMemory>30</UsedMemory>
                <TotalMemory>64</TotalMemory>
                <UnitMemory>32</UnitMemory>
            </Memory>
            <DiskSize>
                <UsedDiskSize>86</UsedDiskSize>
            </DiskSize>
        </TenantResource>
        <TenantConnections>
            <ConnectionRole>ReadWrite</ConnectionRole>
            <IntranetAddress>t32a7ru5u****.oceanbase.aliyuncs.com</IntranetAddress>
            <IntranetPort>3306</IntranetPort>
            <InternetAddress>t32a7ru5u****mo.oceanbase.aliyuncs.com</InternetAddress>
            <InternetPort>3306</InternetPort>
            <VpcId>vpc-bp1qiail1asmfe23t****</VpcId>
            <VSwitchId>vsw-bp11k1aypnzu1l3whi****</VSwitchId>
            <IntranetAddressMasterZoneId>cn-hangzhou-i</IntranetAddressMasterZoneId>
            <IntranetAddressSlaveZoneId>cn-hangzhou-j</IntranetAddressSlaveZoneId>
            <IntranetAddressStatus>ONLINE</IntranetAddressStatus>
            <ConnectionZones>cn-hangzhou-i</ConnectionZones>
            <InternetAddressStatus>CLOSED</InternetAddressStatus>
        </TenantConnections>
        <TenantZones>
            <TenantZoneId>cn-hangzhou-i</TenantZoneId>
            <Region>cn-hangzhou</Region>
            <TenantZoneRole>ReadOnly</TenantZoneRole>
        </TenantZones>
        <ClogServiceStatus>CLOSED</ClogServiceStatus>
    </Tenant>
</DescribeTenantResponse>', example='normal'),
    status?: string(name='Status', description='The character set.', example='ONLINE'),
    tenantConnections?: [ 
      {
        addressType?: string(name='AddressType', description='The primary zone of the tenant.', example='MASTER'),
        connectionRole?: string(name='ConnectionRole', description='是否开启事务拆分', example='ReadWrite'),
        connectionZones?: [ string ](name='ConnectionZones', description='The Internet address for accessing the tenant.', example='["cn-hangzhou-i", "cn-hangzhou-j"]'),
        internetAddress?: string(name='InternetAddress', description='The ID of the VPC.', example='t32a7ru5u****mo.oceanbase.aliyuncs.com'),
        internetAddressStatus?: string(name='InternetAddressStatus', description='实例系列', example='CLOSED'),
        internetPort?: int32(name='InternetPort', description='实例类型', example='3306'),
        intranetAddress?: string(name='IntranetAddress', description='The deployment type of the cluster. Valid values:  
- multiple: multi-IDC deployment   
- single: single-IDC deployment   
- dual: dual-IDC deployment', example='t32a7ru5u****.oceanbase.aliyuncs.com'),
        intranetAddressMasterZoneId?: string(name='IntranetAddressMasterZoneId', description='PayCore business database', example='cn-hangzhou-i'),
        intranetAddressSlaveZoneId?: string(name='IntranetAddressSlaveZoneId', description='The total number of CPU cores of the tenant.', example='cn-hangzhou-j'),
        intranetAddressStatus?: string(name='IntranetAddressStatus', description='付费类型', example='ONLINE'),
        intranetPort?: int32(name='IntranetPort', description='The ID of the tenant.', example='3306'),
        transactionSplit?: boolean(name='TransactionSplit', description='The primary zone corresponding to the address for accessing the tenant.', example='true'),
        vSwitchId?: string(name='VSwitchId', description='The connection access information of the tenant.', example='vsw-bp11k1aypnzu1l3whi****'),
        vpcId?: string(name='VpcId', description='The service mode of the connection address. Valid values:  
ReadWrite: provides strong-consistency read and write services.   
ReadOnly: provides the read-only service to ensure ultimate consistency of data.   
Clog: provides transaction log services.', example='vpc-bp1qiail1asmfe23t****'),
      }
    ](name='TenantConnections', description='The status of the tenant.   
- PENDING_CREATE: The tenant is being created.   
- RESTORE: The tenant is being recovered.   
- ONLINE: The tenant is running.   
- SPEC_MODIFYING: The specification of the tenant is being modified.   
- ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.  
- PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.  
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.  
- PARAMETER_MODIFYING: Parameters are being modified.   
- WHITE_LIST_MODIFYING: The whitelist is being modified.'),
    tenantId?: string(name='TenantId', description='The region where the zone of the tenant resides.', example='t33h8y08k****'),
    tenantMode?: string(name='TenantMode', description='The enabling status of the clog service.  
- CLOSED: The clog service is disabled.  
- ONLINE: The clog service is running.', example='Oracle'),
    tenantName?: string(name='TenantName', description='The request type of the zone of the tenant.  ReadWrite: The zone supports data reads and writes. ReadOnly: The zone supports only data reads. For a high availability cluster with multiple IDCs, the primary zone provides ReadWrite services, and the standby zone provides ReadOnly services. For a high availability cluster with a single IDC, all zones provide ReadWrite services.', example='pay_online'),
    tenantResource?: {
      cpu?: {
        totalCpu?: float(name='TotalCpu', description='The data replica distribution mode of the tenant.    

- For the high availability version, N-N-N indicates the three-zone mode, and N-N indicates the dual-zone or single-zone mode.
- For the basic version, N indicates the single-zone mode. 

> <br>N represents the number of nodes in a single zone.', example='10'),
        unitCpu?: float(name='UnitCpu', description='The zone corresponding to the tenant connection.', example='8'),
        usedCpu?: float(name='UsedCpu', description='The tenant mode.   
Valid values: 
Oracle   
MySQL', example='8'),
      }(name='Cpu', description='The enabling status of the Clog service.  
CLOSED: The Clog service is disabled.  
- ONLINE: The Clog service is running.'),
      diskSize?: {
        usedDiskSize?: float(name='UsedDiskSize', description='The total memory size of the tenant, in GB.', example='86'),
      }(name='DiskSize', description='The status of the intranet address for accessing the tenant.  
The value ONLINE indicates that the address is in service.'),
      memory?: {
        totalMemory?: float(name='TotalMemory', description='The information about the memory resources of the tenant.', example='64'),
        unitMemory?: float(name='UnitMemory', description='The time when the tenant was created.', example='32'),
        usedMemory?: float(name='UsedMemory', description='The status of the Internet address for accessing the tenant. Valid values:   
Closed: The address is disabled.   
- ALLOCATING_INTERNET_ADDRESS: An address is being applied for.   
- PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.   
- ONLINE: The address is in service.', example='30'),
      }(name='Memory', description='The description of the tenant.'),
      unitNum?: int32(name='UnitNum', description='Alibaba Cloud CLI', example='1'),
    }(name='TenantResource', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.'),
    tenantZones?: [ 
      {
        region?: string(name='Region', description='是否允许开启读写分离地址', example='cn-hangzhou'),
        tenantZoneId?: string(name='TenantZoneId', description='The intranet port for accessing the tenant.', example='cn-hangzhou-i'),
        tenantZoneRole?: string(name='TenantZoneRole', description='The character set.', example='ReadOnly'),
      }
    ](name='TenantZones', description='The standby zone corresponding to the address for accessing the tenant.'),
    vpcId?: string(name='VpcId', description='Indicates whether the clog service is available. To enable the clog service, submit a ticket.', example='vpc-bp1d2q3mhg9i23ofi****'),
  }(name='Tenant', description='The ID of the zone.'),
}

model DescribeTenantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantResponseBody(name='body'),
}

async function describeTenantWithOptions(request: DescribeTenantRequest, runtime: Util.RuntimeOptions): DescribeTenantResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenant',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenant(request: DescribeTenantRequest): DescribeTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantWithOptions(request, runtime);
}

model DescribeTenantMetricsRequest {
  endTime?: string(name='EndTime', example='2021-06-13T15:45:43Z'),
  instanceId?: string(name='InstanceId', description='2021-06-13T15:40:43Z', example='ob317v4uif****'),
  metrics?: string(name='Metrics', description='{"name":"DescribeTenantMetrics","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"Action\\",\\"position\\":\\"Query\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"\\",\\"example\\":\\"DescribeTenantMetrics\\"},{\\"name\\":\\"InstanceId\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"ob317v4uif****\\"},{\\"name\\":\\"PageSize\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"10\\"},{\\"name\\":\\"PageNumber\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"1\\"},{\\"name\\":\\"TenantName\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":true,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"pay_online\\"},{\\"name\\":\\"StartTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:40:43Z\\"},{\\"name\\":\\"EndTime\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"2021-06-13T15:45:43Z\\"},{\\"name\\":\\"Metrics\\",\\"position\\":\\"Body\\",\\"required\\":true,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tps\\"},{\\"name\\":\\"TenantId\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":true,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"tfafd34fs****\\"},{\\"name\\":\\"TenantIdList\\",\\"position\\":\\"Body\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"[tdak3nac****,tdakc42df****]\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"TotalCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"9\\"},{\\"name\\":\\"RequestId\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C\\"},{\\"name\\":\\"TenantMetrics\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"\\",\\"description\\":\\"\\",\\"example\\":\\"\\\\\\"Metrics\\\\\\":[ {\\\\\\"request_queue_rt\\\\\\":0.0,\\\\\\"TimeStamp\\\\\\":\\\\\\"2022-02-23T01:58:00Z\\\\\\"}]\\"}],\\"title\\":\\"\\",\\"description\\":\\"\\"}","errors":"{}"}', example='tps'),
  pageNumber?: int32(name='PageNumber', description='The ID of the OceanBase cluster.', example='1'),
  pageSize?: int32(name='PageSize', description='tfafd34fs****', example='10'),
  startTime?: string(name='StartTime', description='Example 1', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', example='tfafd34fs****', deprecated='true'),
  tenantIdList?: string(name='TenantIdList', example='[tdak3nac****,tdakc42df****]'),
  tenantName?: string(name='TenantName', description='2021-06-13T15:45:43Z', example='pay_online', deprecated='true'),
}

model DescribeTenantMetricsResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantMetrics?: string(name='TenantMetrics', example='"Metrics":[ {"request_queue_rt":0.0,"TimeStamp":"2022-02-23T01:58:00Z"}]'),
  totalCount?: int32(name='TotalCount', example='9'),
}

model DescribeTenantMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantMetricsResponseBody(name='body'),
}

async function describeTenantMetricsWithOptions(request: DescribeTenantMetricsRequest, runtime: Util.RuntimeOptions): DescribeTenantMetricsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.metrics)) {
    body['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.tenantIdList)) {
    body['TenantIdList'] = request.tenantIdList;
  }
  if (!Util.isUnset(request.tenantName)) {
    body['TenantName'] = request.tenantName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenantMetrics',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantMetrics(request: DescribeTenantMetricsRequest): DescribeTenantMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantMetricsWithOptions(request, runtime);
}

model DescribeTenantSecurityConfigsRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', example='xxx'),
}

model DescribeTenantSecurityConfigsResponseBody = {
  configs?: {
    tenantSecurityConfigs?: [ 
      {
        riskCount?: int32(name='RiskCount', example='0'),
        securityConfigs?: [ 
          {
            configDescription?: string(name='ConfigDescription', example='校验集群白名单范围是否过大'),
            configGroup?: string(name='ConfigGroup', example='WHITELIST'),
            configName?: string(name='ConfigName', example='WHITELIST_RANGE_LARGE'),
            risk?: boolean(name='Risk', example='true'),
            riskDescription?: string(name='RiskDescription', example='白名单开放过大，建议按需设置'),
          }
        ](name='SecurityConfigs'),
        tenantId?: string(name='TenantId', example='xxx'),
        tenantName?: string(name='TenantName', example='xxx'),
      }
    ](name='TenantSecurityConfigs'),
    totalCheckCount?: int32(name='TotalCheckCount', example='4'),
    totalRiskCount?: int32(name='TotalRiskCount', example='0'),
  }(name='Configs'),
  requestId?: string(name='RequestId', example='523E7183-1490-590D-BA03-12DFD316614B'),
}

model DescribeTenantSecurityConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantSecurityConfigsResponseBody(name='body'),
}

async function describeTenantSecurityConfigsWithOptions(request: DescribeTenantSecurityConfigsRequest, runtime: Util.RuntimeOptions): DescribeTenantSecurityConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenantSecurityConfigs',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantSecurityConfigs(request: DescribeTenantSecurityConfigsRequest): DescribeTenantSecurityConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantSecurityConfigsWithOptions(request, runtime);
}

model DescribeTenantSecurityIpGroupsRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', example='t4louaeei****'),
}

model DescribeTenantSecurityIpGroupsResponseBody = {
  requestId?: string(name='RequestId', example='473469**-AA6F-4D**-B3DB-A***********'),
  securityIpGroups?: [ 
    {
      securityIpGroupName?: string(name='SecurityIpGroupName', example='test1'),
      securityIpGroupType?: string(name='SecurityIpGroupType', example='tenant'),
      securityIps?: string(name='SecurityIps', example='192.***.*.*"'),
      tenantId?: string(name='TenantId', example='t4louaeei****'),
    }
  ](name='SecurityIpGroups'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeTenantSecurityIpGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantSecurityIpGroupsResponseBody(name='body'),
}

async function describeTenantSecurityIpGroupsWithOptions(request: DescribeTenantSecurityIpGroupsRequest, runtime: Util.RuntimeOptions): DescribeTenantSecurityIpGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenantSecurityIpGroups',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantSecurityIpGroups(request: DescribeTenantSecurityIpGroupsRequest): DescribeTenantSecurityIpGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantSecurityIpGroupsWithOptions(request, runtime);
}

model DescribeTenantTagsRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tags?: string(name='Tags', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
  tenantIds?: string(name='TenantIds', example='["xxx", "xxx"]'),
}

model DescribeTenantTagsResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='ob317v4uif****'),
      resourceType?: string(name='ResourceType', example='instance'),
      tag?: string(name='Tag', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
    }
  ](name='TagResources'),
}

model DescribeTenantTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantTagsResponseBody(name='body'),
}

async function describeTenantTagsWithOptions(request: DescribeTenantTagsRequest, runtime: Util.RuntimeOptions): DescribeTenantTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.tenantIds)) {
    body['TenantIds'] = request.tenantIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenantTags',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantTags(request: DescribeTenantTagsRequest): DescribeTenantTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantTagsWithOptions(request, runtime);
}

model DescribeTenantUserRolesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  role?: [ string ](name='Role'),
}

model DescribeTenantUserRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantUserRolesResponseBody(name='body'),
}

async function describeTenantUserRolesWithOptions(runtime: Util.RuntimeOptions): DescribeTenantUserRolesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeTenantUserRoles',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantUserRoles(): DescribeTenantUserRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantUserRolesWithOptions(runtime);
}

model DescribeTenantUsersRequest {
  pageNumber?: int32(name='PageNumber', description='The database privileges of the account.', example='1'),
  pageSize?: int32(name='PageSize', description='The return result of the request.', example='10'),
  searchKey?: string(name='SearchKey', description='The return result of the request.', example='pay'),
  tenantId?: string(name='TenantId', description='The return result of the request.', example='ob2mr3oae0****'),
  userName?: string(name='UserName', description='The operation that you want to perform.   
Set the value to **DescribeTenantUsers**.', example='pay_test'),
}

model DescribeTenantUsersResponseBody = {
  requestId?: string(name='RequestId', description='The name of the database account.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUsers?: [ 
    {
      databases?: [ 
        {
          database?: string(name='Database', example='db_pay1'),
          role?: string(name='Role', example='ReadOnly'),
          table?: string(name='Table', example='tbl_pay1'),
        }
      ](name='Databases'),
      description?: string(name='Description', example='use for test'),
      instanceId?: string(name='InstanceId', description='所属集群Id', example='obshc32****'),
      tenantId?: string(name='TenantId', description='所属租户Id', example='tshfs3****'),
      userName?: string(name='UserName', example='pay_test'),
      userStatus?: string(name='UserStatus', example='NORMAL'),
      userType?: string(name='UserType', example='NORMAL'),
    }
  ](name='TenantUsers', description='The type of the database account. Valid values:    
- Admin: the super administrator account.   
- NORMAL: a general account.'),
  totalCount?: int32(name='TotalCount', description='The role of the account.   
In Oracle mode, a role is a schema-level role. Valid values:  
- ReadWrite: a role that has the read and write privileges, including: CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SYNONYM, CREATE SEQUENCE, CREATE TRIGGER, CREATE TYPE, CREATE SESSION, EXECUTE ANY PROCEDURE, CREATE ANY OUTLINE, ALTER ANY OUTLINE, DROP ANY OUTLINE, CREATE ANY PROCEDURE, ALTER ANY PROCEDURE, DROP ANY PROCEDURE, CREATE ANY SEQUENCE, ALTER ANY SEQUENCE, DROP ANY SEQUENCE, CREATE ANY TYPE, ALTER ANY TYPE, DROP ANY TYPE, SYSKM, CREATE ANY TRIGGER, ALTER ANY TRIGGER, DROP ANY TRIGGER, CREATE PROFILE, ALTER PROFILE, and DROP PROFILE.  
- ReadOnly: a role that has only the read-only privilege SELECT.
In MySQL mode, a role is a database-level role. Valid values: 
- ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.   
- ReadOnly: a role that has only the read-only privilege SELECT.   
- DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.   
- DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.   

> <br>By default, an Oracle account has the read and write privileges on its own schema, which are not listed here.', example='1'),
}

model DescribeTenantUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantUsersResponseBody(name='body'),
}

async function describeTenantUsersWithOptions(request: DescribeTenantUsersRequest, runtime: Util.RuntimeOptions): DescribeTenantUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    body['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenantUsers',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantUsers(request: DescribeTenantUsersRequest): DescribeTenantUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantUsersWithOptions(request, runtime);
}

model DescribeTenantZonesReadRequest {
  instanceId?: string(name='InstanceId', description='The zone information of the tenant.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='The return result of the request.', example='ob2mr3oae0****'),
}

model DescribeTenantZonesReadResponseBody = {
  requestId?: string(name='RequestId', description='Indicates whether a read-only connection needs to be created for the zone.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantZones?: [ 
    {
      isElectable?: boolean(name='IsElectable', description='Example 1', example='true'),
      isPrimary?: boolean(name='IsPrimary', example='true'),
      isReadOnlyAddressMaster?: boolean(name='IsReadOnlyAddressMaster', example='true'),
      isReadable?: string(name='IsReadable', example='true'),
      zone?: string(name='Zone', example='cn-hangzhou-i'),
    }
  ](name='TenantZones', description='The request ID.'),
}

model DescribeTenantZonesReadResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantZonesReadResponseBody(name='body'),
}

async function describeTenantZonesReadWithOptions(request: DescribeTenantZonesReadRequest, runtime: Util.RuntimeOptions): DescribeTenantZonesReadResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenantZonesRead',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenantZonesRead(request: DescribeTenantZonesReadRequest): DescribeTenantZonesReadResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantZonesReadWithOptions(request, runtime);
}

model DescribeTenantsRequest {
  instanceId?: string(name='InstanceId', description='The number of used disks of the tenant.', example='ob317v4uif****'),
  pageNumber?: int32(name='PageNumber', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='1'),
  pageSize?: int32(name='PageSize', description='You can call this operation to query the tenants in an OceanBase cluster.', example='10'),
  searchKey?: string(name='SearchKey', description='The primary zone of the tenant.', example='pay'),
  tenantId?: string(name='TenantId', description='Alibaba Cloud CLI', example='ob2mr3oae0****'),
  tenantName?: string(name='TenantName', description='The information of tenants.', example='pay_online'),
}

model DescribeTenantsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the tenant.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenants?: [ 
    {
      charset?: string(name='Charset', example='utf8mb4'),
      collation?: string(name='Collation', example='utf8mb4_general_ci'),
      cpu?: int32(name='Cpu', description='The total number of CPU cores of the tenant.', example='10'),
      createTime?: string(name='CreateTime', description='The number of CPU cores in each resource unit of the tenant.', example='2021-09-17 15:52:17.0'),
      deployMode?: string(name='DeployMode', description='The search keyword.', example='1-1-1'),
      deployType?: string(name='DeployType', description='The name of the tenant.   
It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.', example='multiple'),
      description?: string(name='Description', description='Example 1', example='```
http(s)://[Endpoint]/?Action=DescribeTenants
&InstanceId=ob317v4uif****
&TenantName=pay_online
&PageSize=10
&PageNumber=1
&TenantId=ob2mr3oae0****
&SearchKey=pay
&Common request parameters
```'),
      mem?: int32(name='Mem', description='The number of the page to return.   
Start value: 1
- Default value: 1', example='20'),
      primaryZone?: string(name='PrimaryZone', description='The return result of the request.', example='cn-hangzhou-i'),
      status?: string(name='Status', description='The status of the tenant.  <br>
- PENDING_CREATE: The tenant is being created.
- RESTORE: The tenant is being recovered.
- ONLINE: The tenant is running.
- SPEC_MODIFYING: The specification of the tenant is being modified.
ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.
PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.
- PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.
- PARAMETER_MODIFYING: Parameters are being modified.
- WHITE_LIST_MODIFYING: The whitelist is being modified.', example='ONLINE'),
      tenantId?: string(name='TenantId', description='You can call this operation to query the tenants in an OceanBase cluster.', example='t33h8y08k****'),
      tenantMode?: string(name='TenantMode', description='{
    "TotalCount": 1,
    "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
    "Tenants": [
        {
            "VpcId": "vpc-bp1d2q3mhg9i23ofi****",
            "Status": "ONLINE",
            "PrimaryZone": "cn-hangzhou-i",
            "DeployType": "multiple",
            "DeployMode": "1-1-1",
            "CreateTime": "2021-09-17 15:52:17.0",
            "TenantName": "pay_online",
            "Mem": 20,
            "Cpu": 10,
            "Description": "PayCore business database",
            "TenantMode": "Oracle",
            "TenantId": "t33h8y08k****",
            "UnitCpu": 5,
            "UnitMem": 10,
            "UnitNum": 2,
            "UsedDiskSize": 10
        }
    ]
}', example='Oracle'),
      tenantName?: string(name='TenantName', description='The information of tenants.', example='pay_online'),
      unitCpu?: int32(name='UnitCpu', example='5'),
      unitMem?: int32(name='UnitMem', example='10'),
      unitNum?: int32(name='UnitNum', example='2'),
      usedDiskSize?: double(name='UsedDiskSize', example='10'),
      vpcId?: string(name='VpcId', description='The time when the tenant was created.', example='vpc-bp1d2q3mhg9i23ofi****'),
    }
  ](name='Tenants', description='The ID of the OceanBase cluster.'),
  totalCount?: int32(name='TotalCount', description='The total memory size of the tenant, in GB.', example='1'),
}

model DescribeTenantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTenantsResponseBody(name='body'),
}

async function describeTenantsWithOptions(request: DescribeTenantsRequest, runtime: Util.RuntimeOptions): DescribeTenantsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    body['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.tenantName)) {
    body['TenantName'] = request.tenantName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTenants',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTenants(request: DescribeTenantsRequest): DescribeTenantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTenantsWithOptions(request, runtime);
}

model DescribeTimeZonesResponseBody = {
  requestId?: string(name='RequestId', description='DescribeTimeZones', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  timeZones?: {
    default?: string(name='Default', example='Asia/Shanghai'),
    list?: [ 
      {
        description?: string(name='Description', description='Example 1', example='(GMT+8:00) Asia/Shanghai'),
        timeZone?: string(name='TimeZone', description='The operation that you want to perform.   
Set the value to **DescribeTimeZones**.', example='Asia/Shanghai'),
      }
    ](name='List', description='The list of time zones.'),
  }(name='TimeZones', description='The description of the time zone.'),
}

model DescribeTimeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTimeZonesResponseBody(name='body'),
}

async function describeTimeZonesWithOptions(runtime: Util.RuntimeOptions): DescribeTimeZonesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeTimeZones',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTimeZones(): DescribeTimeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTimeZonesWithOptions(runtime);
}

model DescribeTopSQLListRequest {
  dbName?: string(name='DbName', description='The number of block index cache hits.', example='testdb'),
  endTime?: string(name='EndTime', description='The SQL type.', example='2021-09-13T15:40:43Z'),
  filterCondition?: map[string]any(name='FilterCondition', description='The average number of logical reads of the SQL statement during the specified period of time.   
The value covers the numbers of reads of different caches and the number of disk I/Os. It is an important metric for measuring the SQL filtering performance.   

> <br> A higher ratio of the number of logical reads to the number of returned rows indicates poorer filtering performance. General causes include non-standard content written by SQL statements, non-standard table indexes created, and non-standard SQL execution plans.', example='[dbName:sys]'),
  nodeIp?: string(name='NodeIp', description='The number of failures.', example='i-bp19y05uq6xpacyqnlrc'),
  pageNumber?: int32(name='PageNumber', description='The queuing time, in ms.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of row cache hits.', example='10'),
  SQLId?: string(name='SQLId', description='The I/O wait time, in ms.', example='8D6E84****0B8FB1823D199E2CA1****'),
  searchKeyWord?: string(name='SearchKeyWord', description='The number of retries.', example='update'),
  searchParameter?: string(name='SearchParameter', description='SQLID.', example='cputime'),
  searchRule?: string(name='SearchRule', description='The IP address of the client.', example='>'),
  searchValue?: string(name='SearchValue', description='The number of Bloom filter cache hits.', example='0.01'),
  sortColumn?: string(name='SortColumn', description='The number of rows read from the disk.', example='cputime'),
  sortOrder?: string(name='SortOrder', description='The list of top SQL statements.', example='desc'),
  startTime?: string(name='StartTime', description='The maximum response time, in ms.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='The average CPU time, in ms.', example='t2mr3oae0****'),
}

model DescribeTopSQLListShrinkRequest {
  dbName?: string(name='DbName', description='The number of block index cache hits.', example='testdb'),
  endTime?: string(name='EndTime', description='The SQL type.', example='2021-09-13T15:40:43Z'),
  filterConditionShrink?: string(name='FilterCondition', description='The average number of logical reads of the SQL statement during the specified period of time.   
The value covers the numbers of reads of different caches and the number of disk I/Os. It is an important metric for measuring the SQL filtering performance.   

> <br> A higher ratio of the number of logical reads to the number of returned rows indicates poorer filtering performance. General causes include non-standard content written by SQL statements, non-standard table indexes created, and non-standard SQL execution plans.', example='[dbName:sys]'),
  nodeIp?: string(name='NodeIp', description='The number of failures.', example='i-bp19y05uq6xpacyqnlrc'),
  pageNumber?: int32(name='PageNumber', description='The queuing time, in ms.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of row cache hits.', example='10'),
  SQLId?: string(name='SQLId', description='The I/O wait time, in ms.', example='8D6E84****0B8FB1823D199E2CA1****'),
  searchKeyWord?: string(name='SearchKeyWord', description='The number of retries.', example='update'),
  searchParameter?: string(name='SearchParameter', description='SQLID.', example='cputime'),
  searchRule?: string(name='SearchRule', description='The IP address of the client.', example='>'),
  searchValue?: string(name='SearchValue', description='The number of Bloom filter cache hits.', example='0.01'),
  sortColumn?: string(name='SortColumn', description='The number of rows read from the disk.', example='cputime'),
  sortOrder?: string(name='SortOrder', description='The list of top SQL statements.', example='desc'),
  startTime?: string(name='StartTime', description='The maximum response time, in ms.', example='2021-06-13T15:40:43Z'),
  tenantId?: string(name='TenantId', description='The average CPU time, in ms.', example='t2mr3oae0****'),
}

model DescribeTopSQLListResponseBody = {
  requestId?: string(name='RequestId', description='Alibaba Cloud CLI', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  topSQLList?: [ 
    {
      affectedRows?: long(name='AffectedRows', description='The internal wait time, in ms.', example='0'),
      appWaitTime?: float(name='AppWaitTime', description='The wait time in concurrent execution, in ms.', example='0.0'),
      blockCacheHit?: long(name='BlockCacheHit', description='The average CPU time, in ms.', example='14'),
      blockIndexCacheHit?: long(name='BlockIndexCacheHit', description='$.parameters[16].schema.example', example='4'),
      bloomFilterCacheHit?: long(name='BloomFilterCacheHit', description='$.parameters[14].schema.enumValueTitles', example='0'),
      clientIp?: string(name='ClientIp', description='$.parameters[14].schema.description', example='1*2.***.1*3.***'),
      concurrencyWaitTime?: float(name='ConcurrencyWaitTime', description='The number of rows returned.', example='0.0'),
      cpuTime?: float(name='CpuTime', description='The maximum CPU time, in ms.', example='50.13'),
      dbName?: string(name='DbName', description='The number of remote plans.', example='testdb'),
      decodeTime?: float(name='DecodeTime', description='The number of rows to return on each page.   
- Maximum value: 100   
- Default value: 10', example='0.0'),
      diskRead?: long(name='DiskRead', description='The IP address of the client.', example='0'),
      elapsedTime?: float(name='ElapsedTime', description='The sorting rule.', example='76.382'),
      event?: string(name='Event', description='The number of rows read from the disk.', example='mysql response wait client'),
      execPerSecond?: float(name='ExecPerSecond', description='The operation that you want to perform.   
Set the value to **DescribeTopSQLList**.', example='163.0'),
      executeTime?: float(name='ExecuteTime', description='The number of rows read from the memory.', example='61.044'),
      executions?: long(name='Executions', description='The number of executions per second.', example='89403'),
      failTimes?: long(name='FailTimes', description='$.parameters[12].schema.description', example='0'),
      getPlanTime?: float(name='GetPlanTime', description='The queuing time, in ms.', example='0.052'),
      IOWaitTime?: float(name='IOWaitTime', description='$.parameters[15].schema.example', example='0.0'),
      key?: long(name='Key', description='The name of the database.', example='1'),
      logicalRead?: long(name='LogicalRead', description='You can call this operation to query SQL execution performance data collected by the diagnostic system.', example='19'),
      maxCpuTime?: float(name='MaxCpuTime', description='SQLID.', example='257.967'),
      maxElapsedTime?: float(name='MaxElapsedTime', description='The sequence number of the returned SQL statement.', example='260.044'),
      memstoreReadRowCount?: long(name='MemstoreReadRowCount', description='The name of the database.', example='527'),
      missPlans?: long(name='MissPlans', description='The total count.', example='0'),
      netWaitTime?: float(name='NetWaitTime', description='The end time of the time range for querying TOP SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='0.0'),
      nodeIp?: string(name='NodeIp', description='The username.', example='i-bp18qljorblo8es*****'),
      queueTime?: float(name='QueueTime', description='$.parameters[12].schema.enumValueTitles', example='15.275'),
      RPCCount?: long(name='RPCCount', description='The start time of the time range for querying TOP SQL statements.   
The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.', example='0'),
      remotePlans?: long(name='RemotePlans', description='The return result of the request.', example='0'),
      retryCount?: long(name='RetryCount', description='$.parameters[13].schema.description', example='0'),
      returnRows?: long(name='ReturnRows', description='The wait event.', example='1'),
      rowCacheHit?: long(name='RowCacheHit', description='```
http(s)://[Endpoint]/?Action=DescribeTopSQLList
&TenantId=t2mr3oae0****
&StartTime=2021-06-13 15:40:43
&EndTime=2021-09-13 15:40:43
&DbName=testdb
&SearchKeyWord=update
&SearchParameter=cputime
&SearchRule=>
&SearchValue=0.01
&SQLId=8D6E84****0B8FB1823D199E2CA1****
&NodeIp=i-bp19y05uq6xpacyqnlrc
&PageNumber=1
&PageSize=10
&SortColumn=cputime
&SortOrder=desc
&Common request parameters
```', example='0'),
      SQLId?: string(name='SQLId', description='$.parameters[13].schema.example', example='8D6E84****0B8FB1823D199E2CA1****'),
      SQLText?: string(name='SQLText', description='The list of top SQL statements.', example='SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC'),
      SQLType?: long(name='SQLType', description='The request ID.', example='1'),
      scheduleTime?: float(name='ScheduleTime', description='The search keyword.', example='0.0'),
      ssstoreReadRowCount?: long(name='SsstoreReadRowCount', example='43086'),
      totalWaitTime?: float(name='TotalWaitTime', description='-', example='10.966'),
      userName?: string(name='UserName', description='The number of Bloom filter cache hits.', example='tester'),
    }
  ](name='TopSQLList', description='The I/O wait time, in ms.'),
  totalCount?: long(name='TotalCount', description='It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.', example='9'),
}

model DescribeTopSQLListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTopSQLListResponseBody(name='body'),
}

async function describeTopSQLListWithOptions(tmpReq: DescribeTopSQLListRequest, runtime: Util.RuntimeOptions): DescribeTopSQLListResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeTopSQLListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterCondition)) {
    request.filterConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterCondition, 'FilterCondition', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.filterConditionShrink)) {
    body['FilterCondition'] = request.filterConditionShrink;
  }
  if (!Util.isUnset(request.nodeIp)) {
    body['NodeIp'] = request.nodeIp;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    body['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.searchKeyWord)) {
    body['SearchKeyWord'] = request.searchKeyWord;
  }
  if (!Util.isUnset(request.searchParameter)) {
    body['SearchParameter'] = request.searchParameter;
  }
  if (!Util.isUnset(request.searchRule)) {
    body['SearchRule'] = request.searchRule;
  }
  if (!Util.isUnset(request.searchValue)) {
    body['SearchValue'] = request.searchValue;
  }
  if (!Util.isUnset(request.sortColumn)) {
    body['SortColumn'] = request.sortColumn;
  }
  if (!Util.isUnset(request.sortOrder)) {
    body['SortOrder'] = request.sortOrder;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTopSQLList',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTopSQLList(request: DescribeTopSQLListRequest): DescribeTopSQLListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopSQLListWithOptions(request, runtime);
}

model DescribeZonesRequest {
  deployType?: string(name='DeployType', description='The operation that you want to perform.   
Set the value to **DescribeZones**.', example='single'),
  series?: string(name='Series', description='The deployment mode.', example='NORMAL'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='```
http(s)://[Endpoint]/?Action=DescribeZones
&Series=normal
&DeployType=single
&Common request parameters
```', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  zones?: [ 
    {
      deployType?: string(name='DeployType', example='1-1-1'),
      series?: string(name='Series', example='NORMAL'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i,cn-hangzhou-j,cn-hangzhou-h'),
      zoneName?: string(name='ZoneName', example='H/I/J'),
    }
  ](name='Zones', description='You can call this operation to learn of zones where a cluster can be created in an Alibaba Cloud region.'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deployType)) {
    body['DeployType'] = request.deployType;
  }
  if (!Util.isUnset(request.series)) {
    body['Series'] = request.series;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model KillProcessListRequest {
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
  sessionList?: string(name='SessionList', description='The list of the sessions that need to be closed.', example='[{"ServerIp":"192.168.13.119","SessionId":"3221614618"}]'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t4louaeei****'),
}

model KillProcessListResponseBody = {
  data?: [ 
    {
      clientIp?: string(name='ClientIp', description='The client IP address.', example='127.0.0.1'),
      command?: string(name='Command', description='The start command for the container of the application.', example='select 1'),
      database?: string(name='Database', description='The name of the database.', example='test'),
      errorMessage?: string(name='ErrorMessage', description='The error message.', example='Instance not found.'),
      executeTime?: string(name='ExecuteTime', description='Execution time (UTC+8). If it is left empty, it means to execute immediately.', example='142'),
      serverIp?: string(name='ServerIp', description='The IP address of the server.', example='127.0.0.1'),
      sessionId?: long(name='SessionId', description='The ID of the session.', example='1123'),
      sqlText?: string(name='SqlText', description='The SQL statement.', example=':'),
      status?: string(name='Status', description='The status of the task.', example='SLEEP'),
      tenantId?: string(name='TenantId', description='The ID of the tenant.', example='t3ogqv07a56n4'),
      user?: string(name='User', description='The database username.', example='oas'),
    }
  ](name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model KillProcessListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillProcessListResponseBody(name='body'),
}

async function killProcessListWithOptions(request: KillProcessListRequest, runtime: Util.RuntimeOptions): KillProcessListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sessionList)) {
    body['SessionList'] = request.sessionList;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KillProcessList',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killProcessList(request: KillProcessListRequest): KillProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return killProcessListWithOptions(request, runtime);
}

model ModifyDatabaseDescriptionRequest {
  databaseName?: string(name='DatabaseName', description='Example 1', example='sms_pre'),
  description?: string(name='Description', example='this is a test database'),
  instanceId?: string(name='InstanceId', description='The description of the database.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='The operation that you want to perform.   
Set the value to **ModifyDatabaseDescription**.', example='ob2mr3oae0****'),
}

model ModifyDatabaseDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyDatabaseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescriptionWithOptions(request: ModifyDatabaseDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDatabaseDescriptionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.databaseName)) {
    body['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseDescription',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseDescriptionWithOptions(request, runtime);
}

model ModifyDatabaseUserRolesRequest {
  databaseName?: string(name='DatabaseName', description='The ID of the tenant.', example='sms_pre'),
  instanceId?: string(name='InstanceId', description='The account information.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='A list of usernames and their respective roles.', example='ob2mr3oae0****'),
  users?: string(name='Users', description='The ID of the OceanBase cluster.', example='[{"UserName":"omstest","Role":"readwrite"}]'),
}

model ModifyDatabaseUserRolesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    databaseName?: string(name='DatabaseName', description='Example 1', example='sms_pre'),
    tenantId?: string(name='TenantId', example='t33h8y08k****'),
    users?: [ 
      {
        role?: string(name='Role', example='ReadOnly'),
        userName?: string(name='UserName', example='user_pay_ro'),
      }
    ](name='Users'),
  }(name='TenantUser', description='The name of the database.'),
}

model ModifyDatabaseUserRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseUserRolesResponseBody(name='body'),
}

async function modifyDatabaseUserRolesWithOptions(request: ModifyDatabaseUserRolesRequest, runtime: Util.RuntimeOptions): ModifyDatabaseUserRolesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.databaseName)) {
    body['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseUserRoles',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseUserRoles(request: ModifyDatabaseUserRolesRequest): ModifyDatabaseUserRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseUserRolesWithOptions(request, runtime);
}

model ModifyInstanceNameRequest {
  instanceId?: string(name='InstanceId', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='ob317v4uif****'),
  instanceName?: string(name='InstanceName', description='The ID of the OceanBase cluster.', example='ob4prod'),
}

model ModifyInstanceNameResponseBody = {
  instanceName?: string(name='InstanceName', description='The name of the OceanBase cluster.', example='ob4test'),
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **ModifyInstanceName**.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceNameResponseBody(name='body'),
}

async function modifyInstanceNameWithOptions(request: ModifyInstanceNameRequest, runtime: Util.RuntimeOptions): ModifyInstanceNameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceName',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNameWithOptions(request, runtime);
}

model ModifyInstanceNodeNumRequest {
  instanceId?: string(name='InstanceId', example='ob3h8ytroxxxxx'),
  nodeNum?: string(name='NodeNum', example='6'),
}

model ModifyInstanceNodeNumResponseBody = {
  data?: {
    orderId?: string(name='OrderId', example='21329031xxxxxxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceNodeNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceNodeNumResponseBody(name='body'),
}

async function modifyInstanceNodeNumWithOptions(request: ModifyInstanceNodeNumRequest, runtime: Util.RuntimeOptions): ModifyInstanceNodeNumResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeNum)) {
    body['NodeNum'] = request.nodeNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceNodeNum',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceNodeNum(request: ModifyInstanceNodeNumRequest): ModifyInstanceNodeNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNodeNumWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  diskSize?: long(name='DiskSize', example='200'),
  instanceClass?: string(name='InstanceClass', example='14C70GB'),
  instanceId?: string(name='InstanceId', example='ob3h8ytroxxxxx'),
}

model ModifyInstanceSpecResponseBody = {
  data?: {
    orderId?: string(name='OrderId', example='21329031xxxxxxx'),
  }(name='Data', example='1234567890'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.diskSize)) {
    body['DiskSize'] = request.diskSize;
  }
  if (!Util.isUnset(request.instanceClass)) {
    body['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceSpec',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceTagsRequest {
  instanceId?: string(name='InstanceId', description='The tags.', example='ob317v4uif****'),
  tags?: string(name='Tags', description='You can call this operation to modify the value of the cluster tags.', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
}

model ModifyInstanceTagsResponseBody = {
  message?: string(name='Message', example='done'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyInstanceTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceTagsResponseBody(name='body'),
}

async function modifyInstanceTagsWithOptions(request: ModifyInstanceTagsRequest, runtime: Util.RuntimeOptions): ModifyInstanceTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceTags',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceTags(request: ModifyInstanceTagsRequest): ModifyInstanceTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceTagsWithOptions(request, runtime);
}

model ModifyParametersRequest {
  dimension?: string(name='Dimension', description='The ID of the OceanBase cluster.', example='TENANT'),
  dimensionValue?: string(name='DimensionValue', description='The cause of the modification failure.', example='ob2mr3oae0****'),
  instanceId?: string(name='InstanceId', description='Alibaba Cloud CLI', example='ob317v4uif****'),
  parameters?: string(name='Parameters', description='The resource ID of the parameter type.    
You can leave this parameter unspecified when you call this operation to modify cluster parameters. In the case of tenant parameters, pass the tenant ID.', example='[{"Name":"connect_timeout","Value":"20"}]'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform.   
Set the value to **ModifyParameters**.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  results?: {
    message?: string(name='Message', example='schedule timeout.'),
    success?: boolean(name='Success', example='false'),
  }(name='Results', description='Example 1'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyParametersResponseBody(name='body'),
}

async function modifyParametersWithOptions(request: ModifyParametersRequest, runtime: Util.RuntimeOptions): ModifyParametersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dimension)) {
    body['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.dimensionValue)) {
    body['DimensionValue'] = request.dimensionValue;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyParameters',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParametersWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
  securityIpGroupName?: string(name='SecurityIpGroupName', description='The information of the IP address whitelist group.', example='paytest'),
  securityIps?: string(name='SecurityIps', description='The list of IP addresses and CIDR blocks in the whitelist.   
It is a JSON array. Each object in the array is an IP address or CIDR block. You can specify at most 40 IP addresses or CIDR blocks.', example='["192.168.0.0/20","192.169.1.1"]'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='online_paycore'),
    securityIps?: string(name='SecurityIps', example='121.41.106.33,100.104.7.0/26'),
  }(name='SecurityIpGroup', description='Example 1'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    body['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  if (!Util.isUnset(request.securityIps)) {
    body['SecurityIps'] = request.securityIps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIps',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ModifyTenantPrimaryZoneRequest {
  instanceId?: string(name='InstanceId', description='The primary zone of the tenant.    
It is one of the zones in which the cluster is deployed.', example='ob317v4uif****'),
  masterIntranetAddressZone?: string(name='MasterIntranetAddressZone', description='```
http(s)://[Endpoint]/?Action=ModifyTenantPrimaryZone
&TenantId=ob2mr3oae0****
&InstanceId=ob317v4uif****
&PrimaryZone=cn-hangzhou-h
&Common request parameters
```', example='cn-hangzhou-h'),
  modifyType?: string(name='ModifyType', description='The switching mode.', example='AllLink'),
  primaryZone?: string(name='PrimaryZone', description='The ID of the vSwitch.', example='cn-hangzhou-h'),
  primaryZoneDeployType?: string(name='PrimaryZoneDeployType', description='Example 1', example='RANDOM'),
  tenantId?: string(name='TenantId', description='The return result of the request.', example='ob2mr3oae0****'),
  userVSwitchId?: string(name='UserVSwitchId', description='The request ID.', example='vsw-xxx'),
}

model ModifyTenantPrimaryZoneResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantPrimaryZoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantPrimaryZoneResponseBody(name='body'),
}

async function modifyTenantPrimaryZoneWithOptions(request: ModifyTenantPrimaryZoneRequest, runtime: Util.RuntimeOptions): ModifyTenantPrimaryZoneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.masterIntranetAddressZone)) {
    body['MasterIntranetAddressZone'] = request.masterIntranetAddressZone;
  }
  if (!Util.isUnset(request.modifyType)) {
    body['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.primaryZone)) {
    body['PrimaryZone'] = request.primaryZone;
  }
  if (!Util.isUnset(request.primaryZoneDeployType)) {
    body['PrimaryZoneDeployType'] = request.primaryZoneDeployType;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userVSwitchId)) {
    body['UserVSwitchId'] = request.userVSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantPrimaryZone',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantPrimaryZone(request: ModifyTenantPrimaryZoneRequest): ModifyTenantPrimaryZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantPrimaryZoneWithOptions(request, runtime);
}

model ModifyTenantResourceRequest {
  cpu?: int32(name='Cpu', description='The memory size of the tenant, in GB.', example='2'),
  instanceId?: string(name='InstanceId', description='The operation that you want to perform.   
Set the value to **ModifyTenantResource**.', example='ob317v4uif****'),
  memory?: int32(name='Memory', description='The ID of the tenant.', example='2'),
  tenantId?: string(name='TenantId', description='The information about the CPU resources of the tenant.', example='ob2mr3oae0****'),
}

model ModifyTenantResourceResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantId?: string(name='TenantId', example='t33h8y08k****'),
}

model ModifyTenantResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantResourceResponseBody(name='body'),
}

async function modifyTenantResourceWithOptions(request: ModifyTenantResourceRequest, runtime: Util.RuntimeOptions): ModifyTenantResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cpu)) {
    body['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.memory)) {
    body['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantResource',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantResource(request: ModifyTenantResourceRequest): ModifyTenantResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantResourceWithOptions(request, runtime);
}

model ModifyTenantSecurityIpGroupRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
  securityIps?: string(name='SecurityIps', example='192.***.*.*"'),
  tenantId?: string(name='TenantId', example='t4louaeei****'),
}

model ModifyTenantSecurityIpGroupResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-****-****-87E3A8A2AA0C'),
  securityIpGroup?: {
    instanceId?: string(name='InstanceId', example='ob317v4uif****'),
    securityIpGroupName?: string(name='SecurityIpGroupName', example='paytest'),
    securityIps?: string(name='SecurityIps', example='192.***.*.*'),
    tenantId?: string(name='TenantId', example='t4louaeei****'),
  }(name='SecurityIpGroup'),
}

model ModifyTenantSecurityIpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantSecurityIpGroupResponseBody(name='body'),
}

async function modifyTenantSecurityIpGroupWithOptions(request: ModifyTenantSecurityIpGroupRequest, runtime: Util.RuntimeOptions): ModifyTenantSecurityIpGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    body['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  if (!Util.isUnset(request.securityIps)) {
    body['SecurityIps'] = request.securityIps;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantSecurityIpGroup',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantSecurityIpGroup(request: ModifyTenantSecurityIpGroupRequest): ModifyTenantSecurityIpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantSecurityIpGroupWithOptions(request, runtime);
}

model ModifyTenantTagsRequest {
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tags?: string(name='Tags', example='[{"Key": "xxx", "Value", "xxx"},{}]'),
  tenantId?: string(name='TenantId', example='xxx'),
}

model ModifyTenantTagsResponseBody = {
  message?: string(name='Message', example='done'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantTagsResponseBody(name='body'),
}

async function modifyTenantTagsWithOptions(request: ModifyTenantTagsRequest, runtime: Util.RuntimeOptions): ModifyTenantTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantTags',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantTags(request: ModifyTenantTagsRequest): ModifyTenantTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantTagsWithOptions(request, runtime);
}

model ModifyTenantUserDescriptionRequest {
  description?: string(name='Description', description='The operation that you want to perform.   
Set the value to **ModifyTenantUserDescription**.', example='this is a test database'),
  instanceId?: string(name='InstanceId', description='The ID of the OceanBase cluster.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****'),
  userName?: string(name='UserName', description='The description of the database.', example='pay_test'),
}

model ModifyTenantUserDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='You can call this operation to modify the description of a specified account in a tenant.', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantUserDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantUserDescriptionResponseBody(name='body'),
}

async function modifyTenantUserDescriptionWithOptions(request: ModifyTenantUserDescriptionRequest, runtime: Util.RuntimeOptions): ModifyTenantUserDescriptionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantUserDescription',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantUserDescription(request: ModifyTenantUserDescriptionRequest): ModifyTenantUserDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantUserDescriptionWithOptions(request, runtime);
}

model ModifyTenantUserPasswordRequest {
  encryptionType?: string(name='EncryptionType', description='加密方式。', example='RSA'),
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='```
http(s)://[Endpoint]/?Action=ModifyTenantUserPassword
&UserName=pay_test
&TenantId=ob2mr3oae0****
&UserPassword=!Aliyun4Oceanbase
&InstanceId=ob317v4uif****
&Common request parameters
```', example='ob2mr3oae0****'),
  userName?: string(name='UserName', description='The ID of the OceanBase cluster.', example='pay_test'),
  userPassword?: string(name='UserPassword', description='You can call this operation to change the logon password of a specified account in a tenant.', example='!Aliyun4Oceanbase'),
}

model ModifyTenantUserPasswordResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
}

model ModifyTenantUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantUserPasswordResponseBody(name='body'),
}

async function modifyTenantUserPasswordWithOptions(request: ModifyTenantUserPasswordRequest, runtime: Util.RuntimeOptions): ModifyTenantUserPasswordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.encryptionType)) {
    body['EncryptionType'] = request.encryptionType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.userPassword)) {
    body['UserPassword'] = request.userPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantUserPassword',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantUserPassword(request: ModifyTenantUserPasswordRequest): ModifyTenantUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantUserPasswordWithOptions(request, runtime);
}

model ModifyTenantUserRolesRequest {
  instanceId?: string(name='InstanceId', description='The type of the privilege modification operation.   
Valid values:  
update: updates all privileges. This is the default value.  
add: adds a privilege.  
delete: deletes a privilege.', example='ob317v4uif****'),
  modifyType?: string(name='ModifyType', description='The name of the table.', example='update'),
  tenantId?: string(name='TenantId', description='The operation that you want to perform.   
Set the value to **ModifyTenantUserRoles**.', example='ob2mr3oae0****'),
  userName?: string(name='UserName', description='The role of the database account.', example='pay_test'),
  userRole?: string(name='UserRole', description='The type of the account. Valid values:   
- Admin: the super administrator account.   
- Normal: a general account.', example='[{"Database":"20210824160559","Role":"readwrite"}]'),
}

model ModifyTenantUserRolesResponseBody = {
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: {
    tenantId?: string(name='TenantId', example='t33h8y08k****'),
    userName?: string(name='UserName', example='pay_test'),
    userRole?: [ 
      {
        database?: string(name='Database', description='```
http(s)://[Endpoint]/?Action=ModifyTenantUserRoles
&UserName=pay_test
&TenantId=ob2mr3oae0****
&UserRole=[{"Database":"20210824160559","Role":"readwrite"}]
&InstanceId=ob317v4uif****
&ModifyType=update
&Common request parameters
```', example='db_pay1'),
        isSuccess?: boolean(name='IsSuccess', example='true'),
        role?: string(name='Role', description='You can call this operation to modify the database privileges of a specified account in a tenant.', example='ReadOnly'),
        table?: string(name='Table', example='tbl_pay1'),
      }
    ](name='UserRole', description='The name of the database (MySQL mode) or schema (Oracle mode).', example='账号具备的数据库权限信息列表。'),
  }(name='TenantUser', description='The ID of the tenant.'),
}

model ModifyTenantUserRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantUserRolesResponseBody(name='body'),
}

async function modifyTenantUserRolesWithOptions(request: ModifyTenantUserRolesRequest, runtime: Util.RuntimeOptions): ModifyTenantUserRolesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.modifyType)) {
    body['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.userRole)) {
    body['UserRole'] = request.userRole;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantUserRoles',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantUserRoles(request: ModifyTenantUserRolesRequest): ModifyTenantUserRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantUserRolesWithOptions(request, runtime);
}

model ModifyTenantUserStatusRequest {
  instanceId?: string(name='InstanceId', description='The operation that you want to perform.   
Set the value to **ModifyTenantUserStatus**.', example='ob317v4uif****'),
  tenantId?: string(name='TenantId', description='The ID of the tenant.', example='ob2mr3oae0****'),
  userName?: string(name='UserName', description='The list of database accounts in the tenant.', example='pay_test'),
  userStatus?: string(name='UserStatus', description='The status of the database account. Valid values:   
- Locked: The account is locked. 
- Online: The account is unlocked.', example='The ID of the tenant.'),
}

model ModifyTenantUserStatusResponseBody = {
  requestId?: string(name='RequestId', description='Example 1', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  tenantUser?: [ 
    {
      tenantId?: string(name='TenantId', example='t33h8y08k****'),
      userName?: string(name='UserName', example='pay_test'),
      userStatus?: string(name='UserStatus', example='LOCKED'),
    }
  ](name='TenantUser'),
}

model ModifyTenantUserStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantUserStatusResponseBody(name='body'),
}

async function modifyTenantUserStatusWithOptions(request: ModifyTenantUserStatusRequest, runtime: Util.RuntimeOptions): ModifyTenantUserStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.userStatus)) {
    body['UserStatus'] = request.userStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantUserStatus',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantUserStatus(request: ModifyTenantUserStatusRequest): ModifyTenantUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantUserStatusWithOptions(request, runtime);
}

model ReleaseOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='The total count, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='Contact the administrator.', example='1'),
  projectId?: string(name='ProjectId', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='Indicates whether the call is successful.', example='g_abcdefj***'),
}

model ReleaseOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='You can call this operation to release a data synchronization project.'),
  code?: string(name='Code', description='Indicates whether the project is released.', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: boolean(name='Data', example='true'),
  errorDetail?: {
    code?: string(name='Code', description='The operation that you want to perform. Set the value to **ReleaseOmsOpenAPIProject**.', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error description (old).', example='ERROR'),
    message?: string(name='Message', description='The error code (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The page number, which takes effect in a pagination query.', example='The page size, which takes effect in a pagination query.'),
  }(name='ErrorDetail', description='The suggestions (new).'),
  message?: string(name='Message', description='A system error occurred.', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The page number, which takes effect in a pagination query.', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ReleaseOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseOmsOpenAPIProjectResponseBody(name='body'),
}

async function releaseOmsOpenAPIProjectWithOptions(request: ReleaseOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): ReleaseOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseOmsOpenAPIProject(request: ReleaseOmsOpenAPIProjectRequest): ReleaseOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseOmsOpenAPIProjectWithOptions(request, runtime);
}

model ResetOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='The total count, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='Contact the administrator.', example='1'),
  projectId?: string(name='ProjectId', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='Indicates whether the call is successful.', example='g_abcdefj***'),
}

model ResetOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='You can call this operation to reset a data synchronization project.'),
  code?: string(name='Code', description='Indicates whether the resetting is successful.', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: boolean(name='Data', example='true'),
  errorDetail?: {
    code?: string(name='Code', description='The operation that you want to perform. Set the value to **ResetOmsOpenAPIProject**.', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error description (old).', example='ERROR'),
    message?: string(name='Message', description='The error code (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The page number, which takes effect in a pagination query.', example='The page size, which takes effect in a pagination query.'),
  }(name='ErrorDetail', description='The suggestions (new).'),
  message?: string(name='Message', description='A system error occurred.', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The page number, which takes effect in a pagination query.', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ResetOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetOmsOpenAPIProjectResponseBody(name='body'),
}

async function resetOmsOpenAPIProjectWithOptions(request: ResetOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): ResetOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetOmsOpenAPIProject(request: ResetOmsOpenAPIProjectRequest): ResetOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetOmsOpenAPIProjectWithOptions(request, runtime);
}

model ResumeOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='Contact the administrator.', example='1'),
  pageSize?: int32(name='PageSize', description='Indicates whether the call is successful.', example='1'),
  projectId?: string(name='ProjectId', description='Contact the administrator.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='The suggestions (old).', example='g_abcdefj***'),
}

model ResumeOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='The request ID.', example='Contact the administrator.'),
  code?: string(name='Code', description='The page number, which takes effect in a pagination query.', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: boolean(name='Data', example='True'),
  errorDetail?: {
    code?: string(name='Code', description='The suggestions (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The operation that you want to perform. Set the value to **ResumeOmsOpenAPIProject**.', example='ERROR'),
    message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The error code (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The page number, which takes effect in a pagination query.'),
  message?: string(name='Message', description='The error details.', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', description='Example 1', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ResumeOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeOmsOpenAPIProjectResponseBody(name='body'),
}

async function resumeOmsOpenAPIProjectWithOptions(request: ResumeOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): ResumeOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumeOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeOmsOpenAPIProject(request: ResumeOmsOpenAPIProjectRequest): ResumeOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeOmsOpenAPIProjectWithOptions(request, runtime);
}

model SearchOmsOpenAPIMonitorMetricRequest {
  beginTime?: long(name='BeginTime', description='Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.', example='1656512800'),
  endTime?: long(name='EndTime', description='It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.', example='1656512860'),
  maxPointNum?: long(name='MaxPointNum', description='Contact the administrator.', example='5'),
  metric?: string(name='Metric', description='The business data returned.', example='CONNECTOR_TPS'),
  pageNumber?: int32(name='PageNumber', description='The information about the object.', example='1'),
  pageSize?: int32(name='PageSize', description='A millisecond-level timestamp.', example='1'),
  projectId?: string(name='ProjectId', description='The value corresponding to the time.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='The name of the metric.', example='g_abcdefj***'),
}

model SearchOmsOpenAPIMonitorMetricResponseBody = {
  advice?: string(name='Advice', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='The page number, which takes effect in a pagination query.'),
  code?: string(name='Code', description='The business data returned.', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The request ID.', example='1'),
  data?: [ 
    {
      dataPoints?: [ 
        {
          timestamp?: long(name='Timestamp', example='1656669613'),
          value?: double(name='Value', example='200'),
        }
      ](name='DataPoints', description='connector data point'),
      metric?: string(name='Metric', example='CONNECTOR_TPS'),
      tags?: map[string]string(name='Tags', description='metric tags'),
    }
  ](name='Data'),
  errorDetail?: {
    code?: string(name='Code', description='The information about the object.', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error code (old).', example='ERROR'),
    message?: string(name='Message', description='The ID of the project to query.', example='The information about the object to query.'),
    proposal?: string(name='Proposal', description='The error description (new).', example='The query metric. For example, if you want to query the incremental transactions per second (TPS), set the value to CONNECTOR_TPS. Valid values: CONNECTOR_TPS: the TPS of the Connector component; CONNECTOR_DELAY: the latency of the Connector component; CONNECTOR_SOURCE_QUEUE_SIZE: the queue size of the Connector source; CONNECTOR_IOPS: the Connector IOPS; CONNECTOR_WRITE_COST: the time spent in writing at the Connector destination; CONNECTOR_SOURCE_READ_COST: the time spent in reading at the Connector source; JDBCWRITER_DELAY: the latency of the JDBCWriter; JDBCWRITER_IOPS: the IOPS of the JDBCWriter; JDBCWRITER_RPS: the requests per second (RPS) of the JDBCWriter; STORE_DELAY: the latency of the Store component; STORE_CONN: the number of store connections; STORE_IOPS: the IOPS of the Store component; STORE_TPS: the TPS of the Store component; CHECKER_SOURCE_NONE_RPS: the instantaneous RPS of the Checker component at the source end during full migration; CHECKER_SOURCE_AVG_RPS: the average RPS of the Checker component at the source end during full migration; CHECKER_DEST_NONE_RPS: the instantaneous RPS of the Checker component at the destination end during full migration; CHECKER_DEST_AVG_RPS: the average RPS of the Checker component at the destination end during full migration; CHECKER_SOURCE_NONE_RT: the instantaneous response time (RT) of the Checker component at the source end during full migration; CHECKER_SOURCE_AVG_RT: the average RT of the Checker component at the source end during full migration; CHECKER_DEST_NONE_RT: the instantaneous RT of the Checker component at the destination end during full migration; CHECKER_DEST_AVG_RT: the average RT of the Checker component at the destination end during full migration; CHECKER_SOURCE_NONE_READ_IOPS: the instantaneous read IOPS of the Checker component at the source end during full migration; CHECKER_SOURCE_AVG_READ_IOPS: the average read IOPS of the Checker component at the source end during full migration; CHECKER_DEST_NONE_WRITE_IOPS: the instantaneous write IOPS of the Checker component at the destination end during full migration; CHECKER_DEST_AVG_WRITE_IOPS: the average write IOPS of the Checker component at the destination end during full migration; CHECKER_VERIFY_SOURCE_NONE_RPS: the instantaneous RPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_SOURCE_AVG_RPS: the average RPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_DEST_NONE_RPS: the instantaneous RPS of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_DEST_AVG_RPS: the average RPS of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_SOURCE_NONE_RT: the instantaneous RT of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_SOURCE_AVG_RT: the average RT of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_DEST_NONE_RT: the instantaneous RT of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_DEST_AVG_RT: the average RT of the Checker-Verify component at the destination end during full verification; CHECKER_VERIFY_SOURCE_NONE_READ_IOPS: the instantaneous read IOPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_SOURCE_AVG_READ_IOPS: the average read IOPS of the Checker-Verify component at the source end during full verification; CHECKER_VERIFY_DEST_NONE_READ_IOPS: the instantaneous read IOPS of the Checker-Verify component at the destination end during full verification; and CHECKER_VERIFY_DEST_AVG_READ_IOPS: the average read IOPS of the Checker-Verify component at the destination end during full verification.'),
  }(name='ErrorDetail', description='A system error occurred.'),
  message?: string(name='Message', description='The suggestions (old).', example='Contact the administrator.'),
  pageNumber?: int32(name='PageNumber', description='The error code (new).', example='1'),
  pageSize?: int32(name='PageSize', description='The page number, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The time spent in processing the request, in seconds.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The total count, which takes effect in a pagination query.', example='true'),
  totalCount?: long(name='TotalCount', description='The error details.', example='1'),
}

model SearchOmsOpenAPIMonitorMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchOmsOpenAPIMonitorMetricResponseBody(name='body'),
}

async function searchOmsOpenAPIMonitorMetricWithOptions(request: SearchOmsOpenAPIMonitorMetricRequest, runtime: Util.RuntimeOptions): SearchOmsOpenAPIMonitorMetricResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxPointNum)) {
    body['MaxPointNum'] = request.maxPointNum;
  }
  if (!Util.isUnset(request.metric)) {
    body['Metric'] = request.metric;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchOmsOpenAPIMonitorMetric',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchOmsOpenAPIMonitorMetric(request: SearchOmsOpenAPIMonitorMetricRequest): SearchOmsOpenAPIMonitorMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOmsOpenAPIMonitorMetricWithOptions(request, runtime);
}

model SearchOmsOpenAPIProjectsRequest {
  destDbTypes?: [ string ](name='DestDbTypes', description='The types of destination data sources.'),
  labelIds?: [ string ](name='LabelIds', description='The list of labels.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  searchKey?: string(name='SearchKey', description='The keyword for fuzzy search. A fuzzy search is performed based on the project ID and name.', example='projectName'),
  sourceDbTypes?: [ string ](name='SourceDbTypes', description='The types of source data sources.'),
  statusList?: [ string ](name='StatusList', description='The list of project statuses.'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***'),
}

model SearchOmsOpenAPIProjectsShrinkRequest {
  destDbTypesShrink?: string(name='DestDbTypes', description='The types of destination data sources.'),
  labelIdsShrink?: string(name='LabelIds', description='The list of labels.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  searchKey?: string(name='SearchKey', description='The keyword for fuzzy search. A fuzzy search is performed based on the project ID and name.', example='projectName'),
  sourceDbTypesShrink?: string(name='SourceDbTypes', description='The types of source data sources.'),
  statusListShrink?: string(name='StatusList', description='The list of project statuses.'),
  workerGradeId?: string(name='WorkerGradeId', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='g_abcdefj***'),
}

model SearchOmsOpenAPIProjectsResponseBody = {
  advice?: string(name='Advice', description='The suggestions (old).', example='Contact the administrator.'),
  code?: string(name='Code', description='The error code (old).', example='INNER_ERROR'),
  cost?: string(name='Cost', description='The time spent in processing the request, in seconds.', example='1'),
  data?: [ 
    {
      businessName?: string(name='BusinessName', description='The business system identifier, which is optional and is a specific field of the Post message.', example='OMS_TEST'),
      destConfig?: {
        enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
        endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
        endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: MYSQL, MARIADB, OB_MYSQL, OB_MYSQL_CE, OB_ORACLE, ORACLE, DB2_LUW, KAFKA, ROCKETMQ, DATAHUB, SYBASE, LOGPROXY, ADB, DBP_OP_ROUTE, DMS, IDB, and TIDB.', example='OB_MYSQL'),
        msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
        partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, and RocketMQ, and the partitioning mode is set to ONE.', example='0'),
        partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
        producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
        sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
        sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
        sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
        serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
        topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
      }(name='DestConfig', description='The settings of the destination data source.'),
      labels?: [ 
        {
          count?: int32(name='Count', description='The number of projects that use this label.', example='3'),
          creator?: string(name='Creator', description='The creator. This parameter value is returned only when you log on as the administrator.', example='admin'),
          id?: string(name='Id', description='The ID of a label.', example='abc'),
          name?: string(name='Name', description='The name of the label.', example='test'),
        }
      ](name='Labels', description='A collection of label IDs.'),
      projectId?: string(name='ProjectId', description='The project ID.', example='p_gasdfdsfg'),
      projectName?: string(name='ProjectName', description='The name of the project.', example='p_gasdfdsfg'),
      projectOwner?: string(name='ProjectOwner', description='The project owner.', example='Zhang San'),
      sourceConfig?: {
        enableMsgTrace?: boolean(name='EnableMsgTrace', description='Indicates whether message tracing is enabled when the destination data source is RocketMQ.', example='false'),
        endpointId?: string(name='EndpointId', description='The ID of the data source.', example='e_abcdefj'),
        endpointType?: string(name='EndpointType', description='The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.', example='OB_MYSQL'),
        msgTags?: string(name='MsgTags', description='The tag of the Post message when the destination data source is RocketMQ.', example='tag1'),
        partition?: int32(name='Partition', description='The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.', example='0'),
        partitionMode?: string(name='PartitionMode', description='The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.', example='HASH'),
        producerGroup?: string(name='ProducerGroup', description='The producer group of the Post message when the destination data source is RocketMQ.', example='producer-group-1'),
        sendMsgTimeout?: long(name='SendMsgTimeout', description='The timeout period in seconds for a single Post message when the destination data source is RocketMQ.', example='10'),
        sequenceEnable?: boolean(name='SequenceEnable', description='Indicates whether message sequencing is enabled when the destination data source is DataHub.', example='false'),
        sequenceStartTimestamp?: long(name='SequenceStartTimestamp', description='The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.', example='1656510473'),
        serializerType?: string(name='SerializerType', description='The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.', example='DEFAULT'),
        topicType?: string(name='TopicType', description='The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.', example='TUPLE'),
      }(name='SourceConfig', description='The settings of the source data source.'),
      steps?: [ 
        {
          estimatedRemainingSeconds?: long(name='EstimatedRemainingSeconds', description='The estimated time remained.', example='2020-05-22T17:04:18'),
          extraInfo?: {
            errorCode?: string(name='ErrorCode', description='The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.', example='INNER_ERROR'),
            errorDetails?: [ 
              {
                code?: string(name='Code', description='The error code.', example='200'),
                level?: string(name='Level', description='Valid values: CRITICAL, ERROR, and WARN.', example='CRITICAL'),
                message?: string(name='Message', description='The error message.', example='A system error occurred.'),
                proposal?: string(name='Proposal', description='The suggestions.', example='Contact the administrator.'),
              }
            ](name='ErrorDetails', description='The error details.'),
            errorMsg?: string(name='ErrorMsg', description='The error message.', example='A system error occurred.'),
            errorParam?: map[string]string(name='ErrorParam', description='The error related parameters.'),
            failedTime?: string(name='FailedTime', description='The time when the error occurred.', example='2020-05-22T17:04:18'),
          }(name='ExtraInfo', description='The additional information. The value is a JSON string.'),
          finishTime?: string(name='FinishTime', description='The end time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:05:18'),
          interactive?: boolean(name='Interactive', description='Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.', example='false'),
          startTime?: string(name='StartTime', description='The start time, in the format of "2020-05-22T17:04:18".', example='2020-05-22T17:04:18'),
          stepDescription?: string(name='StepDescription', description='The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.', example='Schema migration'),
          stepInfo?: {
            capacity?: long(name='Capacity', description='The estimated total number of rows.', example='10000'),
            checkpoint?: string(name='Checkpoint', description='The checkpoint. The value is a unix timestamp in seconds.', example='1'),
            connectorFullProgressOverview?: {
              estimatedRemainingTimeOfSec?: long(name='EstimatedRemainingTimeOfSec', description='The estimated maximum time remained, in seconds.', example='100'),
              estimatedTotalCount?: long(name='EstimatedTotalCount', description='The estimated amount of data to migrate.', example='100'),
              finishedCount?: long(name='FinishedCount', description='The amount of data migrated.', example='50'),
              progress?: int32(name='Progress', description='finishedCount / estimatedTotalCount', example='1120'),
            }(name='ConnectorFullProgressOverview', description='The full synchronization progress.'),
            deployId?: string(name='DeployId', description='The resource deployment ID.', example='ewtfqwt'),
            dstIops?: long(name='DstIops', description='The read/write throughput of the destination data source, in bytes per second.', example='1'),
            dstRps?: long(name='DstRps', description='The read/write RPS of the destination data source.', example='1'),
            dstRpsRef?: long(name='DstRpsRef', description='The read/write RPS baseline of the destination data source.', example='1'),
            dstRt?: long(name='DstRt', description='The read/write RT per record of the destination data source, in ms.', example='1'),
            dstRtRef?: long(name='DstRtRef', description='The read/write RT baseline of the destination data source.', example='1'),
            gmt?: long(name='Gmt', description='The checkpoint collection time. The value is a unix timestamp in seconds.', example='1'),
            inconsistencies?: long(name='Inconsistencies', description='The amount of inconsistent data found during full verification.', example='1'),
            incrTimestampCheckpoint?: long(name='IncrTimestampCheckpoint', description='The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.', example='1'),
            jobId?: string(name='JobId', description='The ID of the current job of the step.', example='j_dfasefsd'),
            processedRecords?: long(name='ProcessedRecords', description='The number of migrated rows.', example='10'),
            skipped?: boolean(name='Skipped', description='A sub-status that indicates whether this step is skipped.', example='false'),
            srcIops?: long(name='SrcIops', description='The read throughput of the source data source, in bytes per second.', example='1'),
            srcIopsRef?: long(name='SrcIopsRef', description='The read throughput baseline of the source data source.', example='1'),
            srcRps?: long(name='SrcRps', description='The read requests per second (RPS) of the source data source.', example='1'),
            srcRpsRef?: long(name='SrcRpsRef', description='The read RPS baseline of the source data source.', example='1'),
            srcRt?: long(name='SrcRt', description='The read response time (RT) per record of the source data source, in ms.', example='1'),
            srcRtRef?: long(name='SrcRtRef', description='The read RT baseline of the source data source.', example='1'),
            validated?: boolean(name='Validated', description='A sub-status that indicates whether the checker has completed full verification.', example='false'),
          }(name='StepInfo', description='The step details. The value is a JSON string.'),
          stepName?: string(name='StepName', description='The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.', example='structmigration'),
          stepOrder?: int32(name='StepOrder', description='The sequence of steps.', example='1'),
          stepProgress?: int32(name='StepProgress', description='The step progress.', example='10'),
          stepStatus?: string(name='StepStatus', description='The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.', example='INIT'),
        }
      ](name='Steps', description='The detailed project steps.'),
      transferMapping?: {
        databases?: [ 
          {
            databaseId?: string(name='DatabaseId', description='The ID of the database. This parameter takes effect when the source data source is IDB.', example='db_id1'),
            databaseName?: string(name='DatabaseName', description='The name of the database.', example='db1'),
            mappedName?: string(name='MappedName', description='The mapped-to database. This parameter takes effect when the destination data source is a database.', example='mapped_db'),
            tables?: [ 
              {
                adbTableSchema?: {
                  distributedKeys?: [ string ](name='DistributedKeys', description='The list of distribution key columns.'),
                  partitionLifeCycle?: int32(name='PartitionLifeCycle', description='The lifecycle of the table.', example='30'),
                  partitionStatement?: string(name='PartitionStatement', description='The partitioning expression.', example='PARTITION BY VALUE(\\"id\\")'),
                  primaryKeys?: [ string ](name='PrimaryKeys', description='The list of primary key columns.'),
                }(name='AdbTableSchema', description='The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.'),
                filterColumns?: [ string ](name='FilterColumns', description='The list of filter columns, which are the columns to be synchronized.'),
                mappedName?: string(name='MappedName', description='The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.', example='mapped_table'),
                shardColumns?: [ string ](name='ShardColumns', description='The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.'),
                tableId?: string(name='TableId', description='The ID of the table. This parameter takes effect when the source data source is IDB.', example='table_id'),
                tableName?: string(name='TableName', description='The name of the table.', example='table'),
                type?: string(name='Type', description='DATABASE, TABLE', example='DATABASE'),
                whereClause?: string(name='WhereClause', description='The row filter conditions.', example='id > 1'),
              }
            ](name='Tables', description='The settings for the target table objects in the current database.'),
            tenantName?: string(name='TenantName', description='The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.', example='tenant'),
            type?: string(name='Type', description='DATABASE, TABLE', example='DATABASE'),
          }
        ](name='Databases', description='The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.'),
        mode?: string(name='Mode', description='The mapping type. Valid values: \\"NORMAL\\" and \\"WHITE_AND_BLACK_LIST\\".', example='NORMAL'),
      }(name='TransferMapping', description='The mappings for the synchronization objects.'),
      transferStepConfig?: {
        enableFullSync?: boolean(name='EnableFullSync', description='Indicates whether full migration is enabled.', example='false'),
        enableIncrSync?: boolean(name='EnableIncrSync', description='Indicates whether incremental synchronization is enabled.', example='false'),
        enableStructSync?: boolean(name='EnableStructSync', description='Indicates whether schema synchronization is enabled.', example='false'),
        incrSyncStepTransferConfig?: {
          recordTypeList?: [ string ](name='RecordTypeList', description='The list of data types of incremental data synchronized in incremental synchronization.'),
          startTimestamp?: long(name='StartTimestamp', description='The start time for incremental synchronization. The value is a timestamp in seconds.', example='1656644154'),
          storeLogKeptHour?: long(name='StoreLogKeptHour', description='The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.', example='1'),
          storeTransactionEnabled?: boolean(name='StoreTransactionEnabled', description='Indicates whether intra-transaction sequencing is enabled when incremental synchronization is enabled and the incremental log pull component is Store.', example='false'),
          transferStepType?: string(name='TransferStepType', description='STRUCT, FULL, INCR', example='STRUCT'),
        }(name='IncrSyncStepTransferConfig', description='The settings of incremental synchronization steps.'),
      }(name='TransferStepConfig', description='The settings of synchronization steps'),
    }
  ](name='Data', description='The business data returned.'),
  errorDetail?: {
    code?: string(name='Code', description='The error code (new).', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error level. Valid values: CRITICAL, ERROR, and WARN.', example='ERROR'),
    message?: string(name='Message', description='The error description (new).', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The suggestions (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The error details.'),
  message?: string(name='Message', description='The error description (old).', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='The page number, which takes effect in a pagination query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page size, which takes effect in a pagination query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total count, which takes effect in a pagination query.', example='1'),
}

model SearchOmsOpenAPIProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchOmsOpenAPIProjectsResponseBody(name='body'),
}

async function searchOmsOpenAPIProjectsWithOptions(tmpReq: SearchOmsOpenAPIProjectsRequest, runtime: Util.RuntimeOptions): SearchOmsOpenAPIProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new SearchOmsOpenAPIProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destDbTypes)) {
    request.destDbTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destDbTypes, 'DestDbTypes', 'json');
  }
  if (!Util.isUnset(tmpReq.labelIds)) {
    request.labelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelIds, 'LabelIds', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceDbTypes)) {
    request.sourceDbTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceDbTypes, 'SourceDbTypes', 'json');
  }
  if (!Util.isUnset(tmpReq.statusList)) {
    request.statusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.statusList, 'StatusList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.destDbTypesShrink)) {
    body['DestDbTypes'] = request.destDbTypesShrink;
  }
  if (!Util.isUnset(request.labelIdsShrink)) {
    body['LabelIds'] = request.labelIdsShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    body['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.sourceDbTypesShrink)) {
    body['SourceDbTypes'] = request.sourceDbTypesShrink;
  }
  if (!Util.isUnset(request.statusListShrink)) {
    body['StatusList'] = request.statusListShrink;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchOmsOpenAPIProjects',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchOmsOpenAPIProjects(request: SearchOmsOpenAPIProjectsRequest): SearchOmsOpenAPIProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOmsOpenAPIProjectsWithOptions(request, runtime);
}

model StartOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='Contact the administrator.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='10'),
  projectId?: string(name='ProjectId', description='The page number, which takes effect in a pagination query.', example='p_12345'),
  workerGradeId?: string(name='WorkerGradeId', description='The total count, which takes effect in a pagination query.', example='g_abcd'),
}

model StartOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', example='cepmgjxp'),
  code?: string(name='Code', description='The request ID.', example='200'),
  cost?: string(name='Cost', example='1'),
  data?: boolean(name='Data', example='True'),
  errorDetail?: {
    code?: string(name='Code', description='The error description (old).', example='200'),
    level?: string(name='Level', description='The error code (new).', example='WARN'),
    message?: string(name='Message', description='The page number, which takes effect in a pagination query.', example='successful'),
    proposal?: string(name='Proposal', description='The error details.', example='Contact the administrator.'),
  }(name='ErrorDetail', description='The operation that you want to perform. Set the value to **StartOmsOpenAPIProject**.'),
  message?: string(name='Message', example='successful'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C'),
  success?: boolean(name='Success', description='The suggestions (new).', example='True'),
  totalCount?: long(name='TotalCount', example='168'),
}

model StartOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartOmsOpenAPIProjectResponseBody(name='body'),
}

async function startOmsOpenAPIProjectWithOptions(request: StartOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): StartOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startOmsOpenAPIProject(request: StartOmsOpenAPIProjectRequest): StartOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return startOmsOpenAPIProjectWithOptions(request, runtime);
}

model StopOmsOpenAPIProjectRequest {
  pageNumber?: int32(name='PageNumber', description='The suggestions (old).', example='1'),
  pageSize?: int32(name='PageSize', description='Contact the administrator.', example='1'),
  projectId?: string(name='ProjectId', description='The total count, which takes effect in a pagination query.', example='p_abcdefj'),
  workerGradeId?: string(name='WorkerGradeId', description='Alibaba Cloud CLI', example='g_abcdefj***'),
}

model StopOmsOpenAPIProjectResponseBody = {
  advice?: string(name='Advice', description='Indicates whether the project is paused.', example='Contact the administrator.'),
  code?: string(name='Code', description='The page size, which takes effect in a pagination query.', example='INNER_ERROR'),
  cost?: string(name='Cost', example='1'),
  data?: boolean(name='Data', example='True'),
  errorDetail?: {
    code?: string(name='Code', description='The time spent in processing the request, in seconds.', example='CM-RESOAT111111'),
    level?: string(name='Level', description='The error code (old).', example='ERROR'),
    message?: string(name='Message', description='The project ID.', example='A system error occurred.'),
    proposal?: string(name='Proposal', description='The error description (new).', example='Contact the administrator.'),
  }(name='ErrorDetail', description='A system error occurred.'),
  message?: string(name='Message', description='The page size, which takes effect in a pagination query.', example='A system error occurred.'),
  pageNumber?: int32(name='PageNumber', description='Pause a data synchronization project', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', description='A system error occurred.', example='XCVSADGDFSGDFGFDGFDGDFGDFGDFGDFGDSGDS'),
  success?: boolean(name='Success', description='The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model StopOmsOpenAPIProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopOmsOpenAPIProjectResponseBody(name='body'),
}

async function stopOmsOpenAPIProjectWithOptions(request: StopOmsOpenAPIProjectRequest, runtime: Util.RuntimeOptions): StopOmsOpenAPIProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.workerGradeId)) {
    body['WorkerGradeId'] = request.workerGradeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopOmsOpenAPIProject',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopOmsOpenAPIProject(request: StopOmsOpenAPIProjectRequest): StopOmsOpenAPIProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopOmsOpenAPIProjectWithOptions(request, runtime);
}

model SwitchoverInstanceRequest {
  forced?: boolean(name='Forced', example='true'),
  instanceId?: string(name='InstanceId', example='ob317v4uif****'),
  targetInstanceId?: string(name='TargetInstanceId', example='ob4bv8o7sp****'),
}

model SwitchoverInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='delete tag-value success'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='473469**-AA6F-4D**-B3DB-A***********'),
}

model SwitchoverInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchoverInstanceResponseBody(name='body'),
}

async function switchoverInstanceWithOptions(request: SwitchoverInstanceRequest, runtime: Util.RuntimeOptions): SwitchoverInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.forced)) {
    body['Forced'] = request.forced;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    body['TargetInstanceId'] = request.targetInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SwitchoverInstance',
    version = '2019-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchoverInstance(request: SwitchoverInstanceRequest): SwitchoverInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchoverInstanceWithOptions(request, runtime);
}

