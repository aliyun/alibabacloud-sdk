/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ga';
  @version = '2019-11-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddEntriesToAclRequest {
  aclEntries: [ 
    {
      entry?: string(name='Entry', description='The IP address (192.168.XX.XX) or CIDR block (10.0.XX.XX/24) that you want to add to the ACL. You can add at most 20 entries in each request.

> This parameter is required.', example='10.0.XX.XX/24'),
      entryDescription?: string(name='EntryDescription', description='The description of the entry.

You can add the descriptions of up to 20 entries in each request.

The description must be 1 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (\\_).', example='test-entry'),
    }
  ](name='AclEntries', description='The IP addresses or CIDR blocks that you want to add to the ACL. You can add at most 20 entries in each request.', position='Query'),
  aclId: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model AddEntriesToAclResponseBody = {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model AddEntriesToAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddEntriesToAclResponseBody(name='body'),
}

/**
  * *   **AddEntriesToAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetAcl](~~258292~~) or [ListAcls](~~258291~~) operation to query the status of the ACL to which you want to add IP entries.
  *     *   If the ACL is in the **configuring** state, it indicates that IP entries are added to the ACL. In this case, you can perform only query operations.
  *     *   If the ACL is in the **active** state, it indicates that IP entries are added to the ACL.
  * *   The **AddEntriesToAcl** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function addEntriesToAcl(request: AddEntriesToAclRequest): AddEntriesToAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEntriesToAcl', 'POST', '/', 'json', false, 'json', request);
}

model AssociateAclsWithListenerRequest {
  aclIds: [ string ](name='AclIds', description='The ID of the ACL. You can associate up to two ACL IDs.', position='Query'),
  aclType: string(name='AclType', description='The type of ACL. Valid values:

*   **white**: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. Whitelists apply to scenarios in which you want to allow only specific IP addresses to access an application. Your service may be adversely affected if the whitelist is not properly configured. After you configure a whitelist for a listener, only requests from the IP addresses that are added to the whitelist are forwarded by the listener. If the whitelist is enabled but no IP addresses are added to it, the listener does not forward requests.
*   **black**: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are denied. Blacklists apply to scenarios in which you want to deny access from specific IP addresses to an application. If the blacklist is enabled but no IP addresses are added to it, the listener forwards all requests.', example='White', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Default value: false. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model AssociateAclsWithListenerResponseBody = {
  aclIds?: [ string ](name='AclIds', description='The ID of the ACL.'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model AssociateAclsWithListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateAclsWithListenerResponseBody(name='body'),
}

/**
  * ## Description
  * *   **AssociateAclsWithListener** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeListener](~~153254~~) operation to query the state of the listener with which you attempt to associate an ACL.
  *     *   If the listener is in the **updating** state, it indicates that the ACL is being associated. In this case, you can perform only query operations.
  *     *   If the listener is in the **active** state, it indicates that the ACL is associated.
  * *   The **AssociateAclsWithListener** operation cannot be called repeatedly for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function associateAclsWithListener(request: AssociateAclsWithListenerRequest): AssociateAclsWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAclsWithListener', 'POST', '/', 'json', false, 'json', request);
}

model AssociateAdditionalCertificatesWithListenerRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  certificates: [ 
    {
      domain: string(name='Domain', description='The domain name specified by the certificate. You can associate each domain name with only one additional certificate.

You can specify up to 10 domain names in each request.', example='example.com'),
      id: string(name='Id', description='The certificate ID. Only server certificates are supported.

You can specify up to 10 certificate IDs in each request.', example='6092**-cn-hangzhou'),
    }
  ](name='Certificates', description='The additional certificates.

You can specify up to 10 certificate IDs in each request.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  listenerId: string(name='ListenerId', description='The listener ID. Only HTTPS listeners are supported.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model AssociateAdditionalCertificatesWithListenerResponseBody = {
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model AssociateAdditionalCertificatesWithListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateAdditionalCertificatesWithListenerResponseBody(name='body'),
}

/**
  * *   Only HTTPS listeners can be associated with additional certificates.
  * *   **AssociateAdditionalCertificatesWithListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeListener](~~153254~~) operation to query the status of the listener with which you want to associate an additional certificate.
  *     *   If the listener is in the **updating** state, it indicates that the additional certificate is being associated. In this case, you can perform only query operations.
  *     *   If the listener is in the **active** state, it indicates that the additional certificate is associated.
  * *   The **AssociateAdditionalCertificatesWithListener** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function associateAdditionalCertificatesWithListener(request: AssociateAdditionalCertificatesWithListenerRequest): AssociateAdditionalCertificatesWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAdditionalCertificatesWithListener', 'POST', '/', 'json', false, 'json', request);
}

model AttachDdosToAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance with which the Anti-DDoS Pro/Premium instance is associated.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  ddosId: string(name='DdosId', description='The ID of the Anti-DDoS Pro/Premium instance to be associated with the GA instance.', example='ddoscoo-cn-zz11vq7j****', position='Query'),
  ddosRegionId: string(name='DdosRegionId', description='The region where the Anti-DDoS Pro/Premium instance is deployed. Valid values:

*   **cn-hangzhou**: regions in the Chinese mainland
*   **ap-southeast-1**: regions outside the Chinese mainland', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model AttachDdosToAcceleratorResponseBody = {
  ddosId?: string(name='DdosId', description='The ID of the Anti-DDoS Pro/Premium instance that is associated with the GA instance.', example='ddoscoo-cn-zz11vq7j****'),
  gaId?: string(name='GaId', description='The ID of the GA instance that is associated with the Anti-DDoS Pro/Premium instance.', example='ga-bp1odcab8tmno0hdq****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
}

model AttachDdosToAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachDdosToAcceleratorResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   **AttachDdosToAccelerator** is an asynchronous operation. After you call the operation, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) or [ListAccelerators](~~153236~~) operation to query the status of the GA instance.
  *     *   If the GA instance is in the **configuring** state, the Anti-DDoS Pro/Premium instance is being associated with the GA instance. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state, the Anti-DDoS Pro/Premium instance is associated with the GA instance.
  * *   You cannot repeatedly call the **AttachDdosToAccelerator** operation for the same GA instance within a specific period of time.
  *
 */
async function attachDdosToAccelerator(request: AttachDdosToAcceleratorRequest): AttachDdosToAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDdosToAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model AttachLogStoreToEndpointGroupRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupIds: [ string ](name='EndpointGroupIds', description='The IDs of the endpoint groups.', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  slsLogStoreName: string(name='SlsLogStoreName', description='The name of the Logstore.', example='lsn-01', position='Query'),
  slsProjectName: string(name='SlsProjectName', description='The name of the Log Service project.', example='pn-01', position='Query'),
  slsRegionId: string(name='SlsRegionId', description='The region ID of the Log Service project.', example='cn-hangzhou', position='Query'),
}

model AttachLogStoreToEndpointGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model AttachLogStoreToEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachLogStoreToEndpointGroupResponseBody(name='body'),
}

/**
  * *   **AttachLogStoreToEndpointGroup** is an asynchronous operation. After you send a request, the system returns a request ID, but this operation is still being performed in the system background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the state of an endpoint group.
  *     *   If the endpoint group is in the **updating** state, it indicates that a Logstore is being associated with the group. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, it indicates that a Logstore is associated with the group.
  * *   The **AttachLogStoreToEndpointGroup** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function attachLogStoreToEndpointGroup(request: AttachLogStoreToEndpointGroupRequest): AttachLogStoreToEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachLogStoreToEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model BandwidthPackageAddAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1qe94o52ot4pkfn****', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='The bandwidth plan ID.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model BandwidthPackageAddAcceleratorResponseBody = {
  accelerators?: [ string ](name='Accelerators', description='The GA instance IDs.'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The bandwidth plan ID.', example='gbwp-bp1sgzldyj6b4q7cx****'),
  requestId?: string(name='RequestId', description='The request ID.', example='B7770CB9-9745-4FE5-9EDA-D14B01A12A50'),
}

model BandwidthPackageAddAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BandwidthPackageAddAcceleratorResponseBody(name='body'),
}

/**
  * *   **BandwidthPackageAddAccelerator** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeBandwidthPackage](~~153241~~) operation to query the status of the bandwidth plan that you want to associate.
  *     *   If the bandwidth plan is in the **binding** state, it indicates that the bandwidth plan is being associated. In this case, you can perform only query operations.
  *     *   If the bandwidth plan is in the **active** state, it indicates that the bandwidth plan is associated.
  * *   The **BandwidthPackageAddAccelerator** operation holds an exclusive lock on the GA instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function bandwidthPackageAddAccelerator(request: BandwidthPackageAddAcceleratorRequest): BandwidthPackageAddAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BandwidthPackageAddAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model BandwidthPackageRemoveAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1qe94o52ot4pkfn****', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model BandwidthPackageRemoveAcceleratorResponseBody = {
  accelerators?: [ string ](name='Accelerators', description='The ID of the GA instance.'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B7770CB9-9745-4FE5-9EDA-D14B01A12A50'),
}

model BandwidthPackageRemoveAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BandwidthPackageRemoveAcceleratorResponseBody(name='body'),
}

/**
  * *   **BandwidthPackageRemoveAccelerator** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeBandwidthPackage](~~153241~~) operation to query the status of the bandwidth plan that you attempt to disassociate.
  *     *   If the bandwidth plan is in the **unbinding** state, it indicates that the bandwidth plan is being disassociated. In this case, you can perform only query operations.
  *     *   If the bandwidth plan is in the **active** state, it indicates that the bandwidth plan is disassociated.
  * *   The **BandwidthPackageRemoveAccelerator** cannot be called repeatedly for the same GA instance.
  *
 */
async function bandwidthPackageRemoveAccelerator(request: BandwidthPackageRemoveAcceleratorRequest): BandwidthPackageRemoveAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BandwidthPackageRemoveAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The client token can contain only ASCII characters.**

>  If you do not set this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group that you want to use to replace the previous resource group.', example='rg-aekzrnd67gq****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the GA resource.

*   If you set the **ResourceType** parameter to **accelerator**, set the value of ResourceId to the ID of a standard GA instance.
*   If you set the **ResourceType** parameter to **basicaccelerator**, set the value of ResourceId to the ID of a basic GA instance.
*   If you set the **ResourceType** parameter to **bandwidthpackage**, set the value of ResourceId to the ID of a bandwidth plan.
*   If you set the **ResourceType** parameter to **acl**, set the value of ResourceId to the ID of an access control list (ACL).', example='ga-bp149u6o36qt1as9b****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the GA resource. Valid values:

*   **accelerator:** a standard GA instance.
*   **basicaccelerator:** a basic GA instance.
*   **bandwidthpackage:** a bandwidth plan.
*   **acl:** an ACL.', example='accelerator', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * You cannot call the **ChangeResourceGroup** operation again on the same GA instance before the previous operation is complete.
  *
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConfigEndpointProbeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enable: string(name='Enable', description='Specifies whether to enable latency monitoring. Valid values:

*   **true**
*   **false** (default)', example='true', position='Query'),
  endpoint: string(name='Endpoint', description='The endpoint.', example='127.0.XX.XX', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The endpoint group ID.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointType: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **Ip:** a custom IP address.
*   **Domain:** a custom domain name.
*   **EIP:** an Alibaba Cloud elastic IP address (EIP).
*   **PublicIp:** an Alibaba Cloud public IP address.', example='Ip', position='Query'),
  probePort?: string(name='ProbePort', description='The port that is used to monitor latency. Valid values: **0** to **65535**.', example='80', position='Query'),
  probeProtocol?: string(name='ProbeProtocol', description='The protocol that is used to monitor latency. Valid values:

*   **tcp:** TCP.
*   **icmp:** ICMP.', example='tcp', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ConfigEndpointProbeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model ConfigEndpointProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigEndpointProbeResponseBody(name='body'),
}

/**
  * *   **ConfigEndpointProbe** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the status of the endpoint group to which an endpoint belongs and determine whether latency monitoring is configured for the endpoint.
  *     *   If the endpoint group is in the **updating** state, it indicates that latency monitoring is being configured for the endpoint. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, it indicates that latency monitoring is configured for the endpoint.
  * *   The **ConfigEndpointProbe** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function configEndpointProbe(request: ConfigEndpointProbeRequest): ConfigEndpointProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigEndpointProbe', 'POST', '/', 'json', false, 'json', request);
}

model CreateAcceleratorRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Default value: false. Valid values:

*   **false:** disables automatic payment. If you select this option, you must go to the Order Center to complete the payment after an order is generated.
*   **true:** enables automatic payment. Payments are automatically completed.', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the GA instance. Default value: false. Valid values:

*   **true:** enables auto-renewal.
*   **false:** disables auto-renewal.', example='false', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal duration. Unit: months.

Valid values: **1** to **12**. Default value: **1**.

>  This parameter takes effect only when **AutoRenew** is set to **true**.', example='1', position='Query'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to automatically use coupons when making payments. Default value: false. Valid values:

*   **true:** automatically pays bill by using coupons.
*   **false:** does not automatically pay bills by using coupons.

>  This parameter takes effect only when **AutoPay** is set to **true**.', example='false', position='Query'),
  bandwidthBillingType?: string(name='BandwidthBillingType', description='The bandwidth billing method.

*   **BandwidthPackage:** billed based on bandwidth plans.
*   **CDT:** billed based on data transfer.
*   **CDT95:** billed based on the 95th percentile bandwidth. The billing is managed by Cloud Data Transfer (CDT). This bandwidth billing method is not available by default. Contact your Alibaba Cloud account manager for more information.', example='BandwidthPackage', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system sets **ClientToken** to the value of **RequestId**. The value of **RequestId** of each API request may be different.', example='123e4567****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Default value: false. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  duration?: int32(name='Duration', description='The subscription duration of the GA instance.

*   If the **PricingCycle** parameter is set to **Month**, the valid values for the **Duration** parameter are **1** to **9**.
*   If the **PricingCycle** parameter is set to **Year**, the valid values for the **Duration** parameter are **1** to **3**.', example='1', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the GA. Default value is PREPAY (subscription).

*   PREPAY : subscription.
*   POSTPAY : pay-as-you-go', example='PREPAY', position='Query'),
  ipSetConfig?: {
    accessMode?: string(name='AccessMode', description='The access mode of the acceleration area. Valid values:

*   **UserDefine:** custom nearby access mode. You can select acceleration areas and regions based on your business requirements. GA allocates a separate EIP to each acceleration region.
*   **Anycast:** automatic nearby access mode. You do not need to specify an acceleration area. GA allocates an Anycast EIP to multiple regions across the globe. Users can connect to the nearest access point of the Alibaba Cloud global transmission network by sending requests to the Anycast EIP.', example='UserDefine'),
  }(name='IpSetConfig', description='The configurations of the acceleration area.', position='Query'),
  name?: string(name='Name', description='The name of the GA instance.

The name must be 2 to 128 characters in length and can contain digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='test', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the GA instance. Valid values:

*   **Month:** billed on a monthly basis.
*   **Year:** billed on an annual basis.', example='Month', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', description='The coupon code.

>', example='50003298014****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the standard GA instance belongs.', example='rg-aekzrnd67gq****', position='Query'),
  spec?: string(name='Spec', description='The type of GA instance. Valid values:

*   **1:** Small Ⅰ
*   **2:** Small Ⅱ
*   **3:** Small Ⅲ
*   **5:** Medium Ⅰ
*   **8:** Medium Ⅱ
*   **10:** Medium Ⅲ
*   **20:** Large Ⅰ
*   **30:** Large Ⅱ
*   **40:** Large Ⅲ
*   **50:** Large Ⅳ
*   **60:** Large Ⅴ
*   **70:** Large Ⅵ
*   **80:** Large VⅡ
*   **90:** Large VⅢ
*   **100:** Super Large Ⅰ
*   **200:** Super Large Ⅱ

>  GA instances Large III and above are not available by default. To use these instances , contact your Alibaba Cloud account manager.

Each instance type provides different capabilities. For more information, see [Instance specifications](~~153127~~).', example='1', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the GA instance. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value of the GA instance. The tag value cannot be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='tag-value'),
    }
  ](name='Tag', description='The tags of the GA instance.', position='Query'),
}

model CreateAcceleratorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4qz****'),
  orderId?: string(name='OrderId', description='The ID of the order.

If you did not configure automatic payment, you must go to the [Order Center](https://usercenter2-intl.aliyun.com/order/list) to complete the payments.', example='208257****'),
  requestId?: string(name='RequestId', description='The request ID.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model CreateAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAcceleratorResponseBody(name='body'),
}

/**
  * ## Description
  * **CreateAccelerator** is an asynchronous operation. After you send a request, the system returns the ID of a GA instance, but the operation is still being performed in the system background. You can call the [DescribeAccelerator](~~153235~~) operation to query the state of a GA instance.
  * *   If the GA instance is in the **init** state, it indicates that the GA instance is being created. In this case, you can perform only query operations.
  * *   If the GA instance is in the **active** state, it indicates that the GA instance is created.
  *
 */
async function createAccelerator(request: CreateAcceleratorRequest): CreateAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model CreateAclRequest {
  aclEntries?: [ 
    {
      entry?: string(name='Entry', description='The IP addresses (192.168.XX.XX) or CIDR blocks (10.0.XX.XX/24) that you want to add to the ACL.

You can add up to 20 entries in each request.', example='10.0.XX.XX/24'),
      entryDescription?: string(name='EntryDescription', description='The description of the entry that you want to add to the ACL.

You can add the descriptions of up to 20 entries in each request.

The description must be 1 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (\\_).', example='test-entry'),
    }
  ](name='AclEntries', description='The entries of IP addresses or CIDR blocks to add to the ACL.

You can add up to 20 entries in each request.', position='Query'),
  aclName?: string(name='AclName', description='The name of the ACL. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test-acl', position='Query'),
  addressIPVersion: string(name='AddressIPVersion', description='The IP version of the ACL. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Default value: false. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmwj7wvng3jbi', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the ACL. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value of the ACL. The tag value cannot be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='tag-value'),
    }
  ](name='Tag', description='The tags of the ACL.', position='Query'),
}

model CreateAclResponseBody = {
  aclId?: string(name='AclId', description='The ID of the ACL.', example='nacl-hp34s2h0xx1ht4nwo****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAclResponseBody(name='body'),
}

/**
  * **CreateAcl** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [GetAcl](~~258292~~) or [ListAcls](~~258291~~) operation to query the state of an ACL.
  * *   If the ACL is in the **init** state, the ACL is being created. In this case, you can only perform only query operations.
  * *   If the ACL is in the **active** state, the ACL is created.
  *
 */
async function createAcl(request: CreateAclRequest): CreateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationMonitorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance on which to execute the origin probing task.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  address: string(name='Address', description='The URL or IP address that you want to probe.', example='https://www.aliyun.com', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  detectEnable?: boolean(name='DetectEnable', description='Specifies whether to enable the automatic diagnostics feature. Default value: false. Valid values:

*   **true**: yes
*   **false**: no', example='false', position='Query'),
  detectThreshold?: int32(name='DetectThreshold', description='The threshold that is used to trigger the automatic diagnostics feature. Unit: %.

Valid values: **0** to **100**.

The default value is **0**, which indicates that the automatic diagnostics feature is not triggered.', example='0', minimum=0, maximum=100, position='Query'),
  detectTimes?: int32(name='DetectTimes', description='The number of times that are required to reach the threshold before the automatic diagnostics feature can be triggered.

Valid values: **1** to **20**. Default value: **1**.', example='1', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener on which to execute the origin probing task.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  optionsJson?: string(name='OptionsJson', description='The extended options of the listener protocol that is used by the origin probing task. The options vary based on the listener protocol.', example='{ "http_method": "get","header": "key:asd","acceptable_response_code": "500","cert_verify": true }', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  silenceTime?: int32(name='SilenceTime', description='The silence period of the automatic diagnostics feature. This parameter specifies the interval at which the automatic diagnostics feature is triggered. If the availability rate does not return to normal after GA triggers an automatic diagnostic, GA must wait until the silence period ends before GA can trigger another automatic diagnostic.

If the number of consecutive times that the availability rate drops below the threshold of automatic diagnostics reaches the value of the **DetectTimes** parameter, the automatic diagnostics feature is triggered. The automatic diagnostics feature is not triggered again within the silence period even if the availability rate stays below the threshold. If the availability rate does not return to normal after the silence period ends, the automatic diagnostics feature is triggered again.

Unit: seconds. Valid values: **300** to **86400**. Default value: **300**.', example='300', position='Query'),
  taskName: string(name='TaskName', description='The name of the origin probing task.

The name must be 4 to 100 characters in length, and can contain digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='task1', position='Query'),
}

model CreateApplicationMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  taskId?: string(name='TaskId', description='The ID of the origin probing task.', example='sm-bp1fpdjfju9k8yr1y****'),
}

model CreateApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationMonitorResponseBody(name='body'),
}

/**
  * You can call the **CreateApplicationMonitor** operation to create an origin probing task. An origin probing task monitors the network quality between the client and origin server and checks the availability of the origin.
  * Before you call this operation, take note of the following items:
  * *   **CreateApplicationMonitor** is an asynchronous operation. After you send a request, the system returns the ID of an origin probing task, but the origin probing task is still being created in the system background. You can call the [DescribeApplicationMonitor](~~408463~~) or [ListApplicationMonitor](~~408462~~) operation to query the state of the origin probing task.
  *     *   If the origin probing task is in the **init** state, it indicates that the task is being created. In this case, you can only perform query operations.
  *     *   If the origin probing task is in the **active** state, it indicates that the task is created.
  * *   The **CreateApplicationMonitor** operation cannot be called repeatedly for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function createApplicationMonitor(request: CreateApplicationMonitorRequest): CreateApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CreateBandwidthPackageRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **false** (default): disables automatic payment. If you select this option, you must go to the Order Center to complete the payment after an order is generated.
*   **true**: enables automatic payment. Payments are automatically completed.', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the bandwidth plan. Valid values:

*   **true**: enables auto-renewal.
*   **false** (default): does not enable auto-renewal.', example='false', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal duration. Unit: months.

Valid values: **1** to **12**. Default value: **1**.

>  This parameter is required only if **AutoRenew** is set to **true**.', example='1', minimum=1, maximum=12, position='Query'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to automatically pay bills by using coupons. Valid values:

*   **true**: yes
*   **false** (default): no

>  This parameter is required only if **AutoPay** is set to **true**.', example='false', position='Query'),
  bandwidth: int32(name='Bandwidth', description='The bandwidth of the bandwidth plan. Unit: Mbit/s.

Valid values: **2** to **2000**.', example='2', position='Query'),
  bandwidthType?: string(name='BandwidthType', description='The type of the bandwidth. Valid values:

*   **Basic**: standard bandwidth
*   **Enhanced**: enhanced bandwidth
*   **Advanced**: premium bandwidth

If **Type** is set to **Basic**, this parameter is required.', example='Basic', position='Query'),
  billingType?: string(name='BillingType', description='The metering method that is used when you use the pay-as-you-go billing method. Valid values:

*   **PayByTraffic** (default): pay-by-data-transfer
*   **PayBY95**: pay-by-95th-percentile By default, the pay-by-95th-percentile metering method is unavailable. If you want to use the metering method, contact your account manager.', example='PayByTraffic', position='Query'),
  cbnGeographicRegionIdA?: string(name='CbnGeographicRegionIdA', description='Area A to be connected. Set the value to **China-mainland**.

You can set this parameter only if you call this operation on the international site (alibabacloud.com).', example='China-mainland', position='Query'),
  cbnGeographicRegionIdB?: string(name='CbnGeographicRegionIdB', description='Area B to be connected. Set the value to **Global**.

You can set this parameter only if you call this operation on the international site (alibabacloud.com).', example='Global', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method of the bandwidth plan. Valid values:

*   **PREPAY** (default): subscription.
*   **POSTPAY**: pay-as-you-go. By default, the pay-as-you-go billing method is unavailable. If you want to use the billing method, contact your account manager.', example='PREPAY', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The ClientToken value contain only ASCII characters.

>  If you do not set this parameter, the system sets **ClientToken** to the value of **RequestId**. The value of **RequestId** of each API request may be different.', example='123e4567****', position='Query'),
  duration?: string(name='Duration', description='The subscription duration.

*   If the **PricingCycle** parameter is set to **Month**, the valid values for the **Duration** parameter are **1** to **9**.
*   If the **PricingCycle** parameter is set to **Year**, the valid values for the **Duration** parameter are **1** to **3**.

If **ChargeType** is set to **PREPAY**, this parameter is required.', example='1', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle. Valid values:

*   **Month**: billed on a monthly basis.
*   **Year**: billed on an annual basis.

If **ChargeType** is set to **PREPAY**, this parameter is required.', example='Month', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', description='The coupon code.

>  This parameter is only available on the international site (alibabacloud.com).', example='50003298014****', position='Query'),
  ratio?: int32(name='Ratio', description='The percentage of the minimum bandwidth guaranteed if the pay-by-95th-percentile-bandwidth metering method is used. Valid values: **30** to **100**.

>  This parameter is required only if **BillingType** is set to **PayBY95**.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. **cn-hangzhou** is returned.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzrnd67gq****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag keys cannot be an empty string. The tag key can be up to 64 characters in length, and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value.

Each tag key corresponds to a tag value. Valid values of **N**: **1** to **20**.

The value cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='tag-value'),
    }
  ](name='Tag', description='The tags to add to the bandwidth plan.', position='Query'),
  type: string(name='Type', description='The type of the bandwidth plan. Valid values:

*   **Basic**: a basic bandwidth plan
*   **CrossDomain**: a cross-region acceleration bandwidth plan

If you call this operation on the Alibaba Cloud China site, only **Basic** is supported.', example='Basic', position='Query'),
}

model CreateBandwidthPackageResponseBody = {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****'),
  orderId?: string(name='OrderId', description='The ID of the order.

If bills are not automatically paid, you must go to the Order Center to complete the payments.', example='208257****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B6DBBB0-2D01-4C6A-A384-4129266E6B78'),
}

model CreateBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBandwidthPackageResponseBody(name='body'),
}

/**
  * To use Global Accelerator (GA) for acceleration, you must purchase a basic bandwidth plan. A basic bandwidth plan supports the following bandwidth types:
  * *   **Basic**: Both the default acceleration region and the default service region are in the Chinese mainland. The accelerated service is deployed on Alibaba Cloud.
  * *   **Enhanced**: Both the default acceleration region and the default service region are in the Chinese mainland. The accelerated service can be deployed on and off Alibaba Cloud.
  * *   **Premium**: Both the default acceleration region and the default service region are outside the Chinese mainland. The accelerated service can be deployed on and off Alibaba Cloud. If you want to accelerate data transfer for clients in the Chinese mainland, you must select China (Hong Kong) as the acceleration region.
  * When you call this operation, take note of the following items:
  * *   **CreateBandwidthPackage** is an asynchronous operation. After you send a request, the system returns the ID of a bandwidth plan, but the bandwidth plan is still being created in the system background. You can call the [DescribeBandwidthPackage](~~153241~~) operation to query the status of the bandwidth plan.
  *     *   If the bandwidth plan is in the **init** state, it indicates that the bandwidth plan is being created. In this case, you can perform only query operations.
  *     *   If the bandwidth plan is in the **active** state, it indicates that the bandwidth plan is created.
  * *   The **CreateBandwidthPackage** operation cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function createBandwidthPackage(request: CreateBandwidthPackageRequest): CreateBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicAccelerateIpRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicAccelerateIpResponseBody = {
  accelerateIpAddress?: string(name='AccelerateIpAddress', description='The accelerated IP address.', example='116.132.XX.XX'),
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address.', example='gaip-bp1****'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  ipSetId?: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11r5jb8ogp122xl****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The status of the accelerated IP address.

>  This parameter returns an empty string because the parameter is not in use.', example='null'),
}

model CreateBasicAccelerateIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicAccelerateIpResponseBody(name='body'),
}

/**
  * *   **CreateBasicAccelerateIp** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [GetBasicAccelerateIp](~~466794~~) operation to query the status of an accelerated IP address:
  *     *   If no status information is returned, the accelerated IP address is being created. In this case, you can perform only query operations.
  *     *   If the accelerated IP address is in the **active** state, the accelerated IP address is created.
  * *   The **CreateBasicAccelerateIp** operation cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function createBasicAccelerateIp(request: CreateBasicAccelerateIpRequest): CreateBasicAccelerateIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicAccelerateIp', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicAccelerateIpEndpointRelationRequest {
  accelerateIpId: string(name='AccelerateIpId', description='The ID of the accelerated IP address of the basic GA instance.', example='gaip-bp1****', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint that is associated with the basic GA instance.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicAccelerateIpEndpointRelationResponseBody = {
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address of the basic GA instance.', example='gaip-bp1****'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that is associated with the basic GA instance.', example='ep-bp14sz7ftcwwjgrdm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The association status between the accelerated IP address and endpoint.

>  This parameter is not in use and empty.', example='null'),
}

model CreateBasicAccelerateIpEndpointRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicAccelerateIpEndpointRelationResponseBody(name='body'),
}

/**
  * *   **CreateBasicAccelerateIpEndpointRelation** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [GetBasicAccelerateIp](~~466794~~) or [ListBasicEndpoints](~~466831~~) API operation to query the status of an accelerated IP address or an endpoint to determine the association status between the accelerated IP address and endpoint.
  *     *   If the status of the accelerated IP address and endpoint is **binding**, the accelerated IP address is being associated with the endpoint. In this case, you can query the accelerated IP address and endpoint but cannot perform other operations.
  *     *   If the status of the accelerated IP address and endpoint is **bound** and the status returned by the [ListBasicAccelerateIpEndpointRelations](~~466803~~) API operation is **active**, the accelerated IP address is associated with the endpoint.
  * *   The **CreateBasicAccelerateIpEndpointRelation** API operation cannot be repeatedly called for the same basic GA instance within a period of time.
  *
 */
async function createBasicAccelerateIpEndpointRelation(request: CreateBasicAccelerateIpEndpointRelationRequest): CreateBasicAccelerateIpEndpointRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicAccelerateIpEndpointRelation', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicAccelerateIpEndpointRelationsRequest {
  accelerateIpEndpointRelations: [ 
    {
      accelerateIpId?: string(name='AccelerateIpId', description='The IDs of the accelerated IP addresses.

You can specify at most 20 IP address IDs.', example='gaip-bp1****'),
      endpointId?: string(name='EndpointId', description='The IDs of the endpoints.

You can specify up to 20 endpoint IDs.', example='ep-bp14sz7ftcwwjgrdm****'),
    }
  ](name='AccelerateIpEndpointRelations', description='A list of accelerated IP addresses and the endpoints with which the accelerated IP addresses are associated.', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicAccelerateIpEndpointRelationsResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateBasicAccelerateIpEndpointRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicAccelerateIpEndpointRelationsResponseBody(name='body'),
}

/**
  * *   The **CreateBasicAccelerateIpEndpointRelations** is asynchronous. After you send a request, the system returns a request ID and runs the task in the system background. You can call the [GetBasicAccelerateIp](~~466794~~) or [ListBasicEndpoints](~~466831~~) API operation to query the status of an accelerated IP address or an endpoint to determine the association status.
  *     *   If an accelerated IP address and the endpoint are in the **binding** state, the accelerated IP address is being associated with the endpoint. In this case, you can only query the accelerated IP address and endpoint, but cannot perform other operations.
  *     *   If all the accelerated IP addresses and the endpoint are in the **bound** state, and the association status returned by the [ListBasicAccelerateIpEndpointRelations](~~466803~~) API operation is **active**, the accelerated IP addresses are associated with the endpoints.
  * *   The **CreateBasicAccelerateIpEndpointRelations** API operation cannot be repeatedly called for the same basic GA instance within a period of time.
  *
 */
async function createBasicAccelerateIpEndpointRelations(request: CreateBasicAccelerateIpEndpointRelationsRequest): CreateBasicAccelerateIpEndpointRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicAccelerateIpEndpointRelations', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicAcceleratorRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **false:** disables automatic payment. If you select this option, you must go to the Order Center to complete the payment after an order is generated. This is the default value.
*   **true:** enables automatic payment. Payments are automatically completed.', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the basic GA instance. Valid values:

*   **true:** enables auto-renewal for the basic GA instance.
*   **false:** disables auto-renewal for the basic GA instance. This is the default value.', example='false', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal duration. Unit: months.

Valid values: **1** to **12**. Default value: **1**.

>  This parameter takes effect only when the **AutoPay** parameter is set to **true**.', example='1', position='Query'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to automatically apply coupons to your bills. Valid values:

*   **true:** automatically applies coupons to your bills.
*   **false:** does not automatically apply coupons to your bills. This is the default value.

>  This parameter takes effect only when the **AutoPay** parameter is set to **true**.', example='false', position='Query'),
  bandwidthBillingType?: string(name='BandwidthBillingType', description='The bandwidth billing method. Valid values:

*   **BandwidthPackage:** billed based on bandwidth plans.
*   **CDT:** billed based on data transfer. The bills are managed by using Cloud Data Transfer (CDT).
*   **CDT95:** billed based on the 95th percentile bandwidth. The bills are managed by using Cloud Data Transfer (CDT). This bandwidth billing method is not available by default. Contact your Alibaba Cloud account manager for more information.', example='CDT', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   **PREPAY** (default)
*   **POSTPAY**', example='PREPAY', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** may be different for each API request.', example='123e4567****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true:** performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed. This is the default value.', example='false', position='Query'),
  duration?: int32(name='Duration', description='The subscription duration of the GA instance.

*   If you set **PricingCycle** to **Month**, the valid values for **Duration** are **1** to **9**.
*   If you set **PricingCycle** to **Year**, the valid values for **Duration** are **1** to **3**.', example='1', minimum=1, position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle. Valid values:

*   **Month**
*   **Year**', example='Month', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', description='The code of the coupon.

>  This parameter takes effect only for accounts registered on the international site (alibabacloud.com).', example='50003298014****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the basic GA instance belongs.', example='rg-acfmxshhcsn****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value. The tag value cannot be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.

You can specify up to 20 tag values.', example='tag-value'),
    }
  ](name='Tag', description='The tags of the basic GA instance.', position='Query'),
}

model CreateBasicAcceleratorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='2082574365'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model CreateBasicAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicAcceleratorResponseBody(name='body'),
}

/**
  * Basic GA instances leverage the immense bandwidth of Alibaba Cloud\\"s high-quality global network to provide end-to-end acceleration services. You can use basic GA instances to accelerate content delivery at Layer 3 (IP). For more information, see [Overview of GA instances](~~153127~~).
  * **CreateBasicAccelerator** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [GetBasicAccelerator](~~353188~~) or [ListBasicAccelerators](~~353189~~) operation to query the status of a basic GA instance:
  * *   If the basic GA instance is in the **init** state, it indicates that the basic GA instance is being created. In this case, you can continue to perform query operations on the GA instance.
  * *   If the basic GA instance is in the **active** state, it indicates that the basic GA instance is created.
  *
 */
async function createBasicAccelerator(request: CreateBasicAcceleratorRequest): CreateBasicAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicEndpointRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointAddress: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is required if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, you can set **EndpointSubAddress** to the secondary private IP address of the primary ENI. If the parameter is left empty, the primary private IP address of the primary ENI is used.
*   If the endpoint type is **ENI**, you can set **EndpointSubAddress** to the secondary private IP address of the secondary ENI. If the parameter is left empty, the primary private IP address of the secondary ENI is used.
*   This parameter is required if the endpoint type is **NLB**. **EndpointSubAddress** is the primary private IP address of the NLB backend server.', example='172.16.XX.XX', position='Query'),
  endpointSubAddressType?: string(name='EndpointSubAddressType', description='The type of the secondary address of the endpoint. Valid values:

*   **primary**: a primary private IP address.
*   **secondary**: a secondary private IP address.

This parameter is required if the endpoint type is **ECS**, **ENI**, or **NLB**. If the endpoint type is **NLB**, only **primary** is supported.', example='primary', position='Query'),
  endpointType: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: elastic network interface (ENI)
*   **SLB**: Classic Load Balancer (CLB)
*   **ECS**: Elastic Compute Service (ECS)
*   **NLB**: Network Load Balancer (NLB)', example='ENI', position='Query'),
  endpointZoneId?: string(name='EndpointZoneId', description='The zone ID of the endpoint.

This parameter is required only if the endpoint type is **NLB**.', example='cn-hangzhou-g', position='Query'),
  name?: string(name='Name', description='The name of the endpoint.

The name must be 2 to 64 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='ep01', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicEndpointResponseBody = {
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateBasicEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicEndpointResponseBody(name='body'),
}

/**
  * *   **CreateBasicEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [ListBasicEndpoints](~~466831~~) API operation to query the status of an endpoint.
  *     *   If the endpoint is in the **init** state, the endpoint is being created. In this case, you can perform only query operations.
  *     *   If the endpoint is in the **active** state, the endpoint is created.
  * *   The **CreateBasicEndpoint** API operation cannot be repeatedly called for the same basic GA instance within a specific period of time.
  *
 */
async function createBasicEndpoint(request: CreateBasicEndpointRequest): CreateBasicEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicEndpointGroupRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the endpoint group.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.', example='BasicEndpointGroup', position='Query'),
  endpointAddress?: string(name='EndpointAddress', description='The endpoint address.', example='eni-bp1a05txelswuj8g****', position='Query'),
  endpointGroupRegion: string(name='EndpointGroupRegion', description='The ID of the region where you want to create the endpoint group.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-shanghai', position='Query'),
  endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

You must specify this parameter when the accelerated IP address is associated with the secondary private IP address of an Elastic Compute Service (ECS) instance or an elastic network interface (ENI).

*   When the endpoint type is **ECS**, you can set **EndpointSubAddress** to the secondary private IP address of the primary ENI. If the parameter is left empty, the primary private IP address of the primary ENI is used.
*   If the endpoint type is **ENI**, you can set **EndpointSubAddress** to the secondary private IP address of the secondary ENI. If the parameter is left empty, the primary private IP address of the secondary ENI is used.', example='172.16.XX.XX', position='Query'),
  endpointType?: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **ENI**
*   **SLB**
*   **ECS**', example='ENI', position='Query'),
  name?: string(name='Name', description='The name of the endpoint group.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='group1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicEndpointGroupResponseBody = {
  endpointGroupId?: string(name='EndpointGroupId', description='The endpoint group ID.', example='epg-bp1dmlohjjz4kqaun****'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateBasicEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicEndpointGroupResponseBody(name='body'),
}

/**
  * *   **CreateBasicEndpointGroup** is an asynchronous operation. After a request is sent, the system returns an endpoint group ID and runs the task in the background. You can call the [GetBasicEndpointGroup](~~362984~~) operation to query the status of the task.
  *     *   If the endpoint group is in the **init** state, the endpoint is being created. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, the endpoint group is created.
  * *   You cannot call the **CreateBasicEndpointGroup** operation again on the same GA instance before the previous request is completed.
  *
 */
async function createBasicEndpointGroup(request: CreateBasicEndpointGroupRequest): CreateBasicEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicEndpointsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpoints: [ 
    {
      endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
      endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is required if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, you can set the **EndpointSubAddress** parameter to the secondary private IP address of the primary ENI. If the parameter is left empty, the primary private IP address of the primary ENI is used.
*   If the endpoint type is **ENI**, you can set the **EndpointSubAddress** parameter to the secondary private IP address of the secondary ENI. If the parameter is left empty, the primary private IP address of the secondary ENI is used.
*   This parameter is required if the endpoint type is **NLB**. **EndpointSubAddress** is the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
      endpointSubAddressType?: string(name='EndpointSubAddressType', description='The secondary address type of the endpoint. Valid values:

*   **primary:** a primary private IP address.
*   **secondary:** a secondary private IP address.

This parameter is required if the endpoint type is **ECS**, **ENI**, or **NLB**. If the endpoint type is **NLB**, only **primary** is supported.', example='primary'),
      endpointType?: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **ENI:** elastic network interface (ENI).
*   **SLB:** Classic Load Balancer (CLB) instance.
*   **ECS:** Elastic Compute Service (ECS) instance.
*   **NLB:** Network Load Balancer (NLB) instance.

>  This parameter is required.', example='ENI'),
      endpointZoneId?: string(name='EndpointZoneId', description='The ID of the zone where the endpoint resides.

This parameter is required only if the endpoint type is **NLB**.', example='cn-hangzhou-g'),
      name?: string(name='Name', description='The name of the endpoint.

The name must be 2 to 64 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='ep01'),
    }
  ](name='Endpoints', description='The endpoints in the endpoint group.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicEndpointsResponseBody = {
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****'),
  endpoints?: [ 
    {
      endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
      endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, **EndpointSubAddress** returns the primary or secondary private IP address of the primary ENI.
*   If the endpoint type is **ENI**, **EndpointSubAddress** returns the primary or secondary private IP address of the secondary ENI.
*   If the endpoint type is **NLB**, **EndpointSubAddress** returns the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
      endpointType?: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **ENI:** ENI.
*   **SLB:** CLB instance.
*   **ECS:** ECS instance.
*   **NLB:** NLB instance.', example='ENI'),
    }
  ](name='Endpoints', description='The endpoints in the endpoint group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateBasicEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicEndpointsResponseBody(name='body'),
}

/**
  * *   **CreateBasicEndpoints** is an asynchronous operation. After you call this operation, the system returns a request ID and runs the task in the background. You can call the [ListBasicEndpoints](~~466831~~) operation to query the status of endpoints. - If one or more endpoints are in the **init** state, it indicates that the endpoints are being created. In this case, you can continue to perform query operations on the endpoints. If all endpoints are in the **active** state, it indicates that the endpoints are created.
  * *   You cannot call the **CreateBasicEndpoints** operation again on the same GA instance before the previous operation is complete.
  *
 */
async function createBasicEndpoints(request: CreateBasicEndpointsRequest): CreateBasicEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model CreateBasicIpSetRequest {
  accelerateRegionId: string(name='AccelerateRegionId', description='The ID of the acceleration region.

You can call the [ListAvailableBusiRegions](~~261190~~) operation to query the most recent acceleration region list.', example='cn-shanghai', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  bandwidth?: long(name='Bandwidth', description='The bandwidth to be allocated to the acceleration region. Unit: **Mbit/s**.', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ispType?: string(name='IspType', description='The line type of the elastic IP address (EIP) in the acceleration region. Valid values:

*   **BGP** (default)
*   **BGP_PRO** If the acceleration region is China (Hong Kong) and a basic bandwidth plan whose bandwidth type is Premium is associated with the GA instance, the default value of IspType is BGP_PRO.

If you are allowed to use single-ISP bandwidth, you can also specify one of the following values:

*   **ChinaTelecom**: China Telecom (single ISP)
*   **ChinaUnicom**: China Unicom (single ISP)
*   **ChinaMobile**: China Mobile (single ISP)
*   **ChinaTelecom_L2**: China Telecom \\_L2 (single ISP)
*   **ChinaUnicom_L2**: China Unicom \\_L2 (single ISP)
*   **ChinaMobile_L2**: China Mobile \\_L2 (single ISP)

> Different acceleration regions support different single-ISP BGP lines.', example='BGP', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the basic GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateBasicIpSetResponseBody = {
  ipSetId?: string(name='IpSetId', description='The region ID of the GA instance.', example='ips-bp11r5jb8ogp122xl****'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateBasicIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBasicIpSetResponseBody(name='body'),
}

/**
  * Take note of the following limits:
  * *   You can specify only one acceleration region for each basic GA instance, and only IPv4 clients can connect to basic GA instances.
  * *   **CreateBasicIpSet** is an asynchronous operation. After you send a request, the system returns an acceleration region ID and runs the task in the background. You can call the [GetBasicIpSet](~~362987~~) operation to query the status of the task.
  *     *   If the acceleration region is in the **init** state, the acceleration region is being created. In this case, you can perform only query operations.
  *     *   If the acceleration region is in the **active** state, the acceleration region is created.
  * *   You cannot call the **CreateBasicIpSet** operation again on the same GA instance before the previous task is completed.
  *
 */
async function createBasicIpSet(request: CreateBasicIpSetRequest): CreateBasicIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBasicIpSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomRoutingEndpointGroupDestinationsRequest {
  clientToken?: string(name='ClientToken', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationConfigurations: [ 
    {
      fromPort: int32(name='FromPort', description='The last port of the backend service port range.

Valid values: **1** to **65499**. The value of **FromPort** must be equal to or smaller than the value of **ToPort**.

You can specify up to 20 last ports in each call.', example='80'),
      protocols: [ string ](name='Protocols', description='The backend service protocol of the endpoint group. Valid values:

*   **TCP**
*   **UDP**
*   **TCP+UDP: the TCP and UDP protocols.**

You can specify up to four backend service protocols for each endpoint group mapping.'),
      toPort: int32(name='ToPort', description='The response parameters.', example='80'),
    }
  ](name='DestinationConfigurations', description='The mapping configuration of the endpoint group.

You need to specify the backend service ports and protocols for the endpoint group. The ports are mapped to listener ports.

You can specify up to 20 mappings in each call.', position='Query'),
  dryRun?: boolean(name='DryRun', description='The endpoint group ID.', example='false', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The mappings of the endpoint group.

You need to specify the backend service ports and protocols for the endpoint group. The ports are mapped to listener ports.

You can specify up to 20 mappings in each call.', example='epg-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='cn-hangzhou', position='Query'),
}

model CreateCustomRoutingEndpointGroupDestinationsResponseBody = {
  destinationIds?: [ string ](name='DestinationIds', description='The IDs of the endpoint group mappings.'),
  requestId?: string(name='RequestId', description='The IDs of the endpoint group mappings.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCustomRoutingEndpointGroupDestinationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomRoutingEndpointGroupDestinationsResponseBody(name='body'),
}

/**
  * readAndWrite
  *
 */
async function createCustomRoutingEndpointGroupDestinations(request: CreateCustomRoutingEndpointGroupDestinationsRequest): CreateCustomRoutingEndpointGroupDestinationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomRoutingEndpointGroupDestinations', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomRoutingEndpointGroupsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointGroupConfigurations: [ 
    {
      description?: string(name='Description', description='The description of the endpoint group.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.

You can specify at most five endpoint group descriptions.', example='test'),
      destinationConfigurations?: [ 
        {
          fromPort?: int32(name='FromPort', description='The first backend service port for the endpoint group.

Valid values: **1** to **65499**. The value of **FromPort** must be smaller than or equal to the value of **ToPort**.

You can specify at most 20 first backend service ports for each endpoint group.', example='80'),
          protocols?: [ string ](name='Protocols', description='The backend service protocol.

You can specify up to four backend service protocols in each mapping configuration.'),
          toPort?: int32(name='ToPort', description='The last backend service port for the endpoint group.

Valid values: **1** to **65499**. The value of **FromPort** must be smaller than or equal to the value of **ToPort**.

You can specify at most 20 last backend service ports for each endpoint group.', example='80'),
        }
      ](name='DestinationConfigurations', description='The mapping configuration of the endpoint group.

You need to specify the backend service ports and protocols for the endpoint group. The ports are mapped to listener ports.

You can specify at most 20 mapping configurations for each endpoint group.'),
      endpointConfigurations?: [ 
        {
          endpoint?: string(name='Endpoint', description='The name of the vSwitch that is specified as an endpoint.', example='vsw-test01'),
          policyConfigurations?: [ 
            {
              address?: string(name='Address', description='The IP address of the destination to which traffic is forwarded.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify at most 20 destination IP addresses for each endpoint.', example='10.0.XX.XX'),
              portRanges?: [ 
                {
                  fromPort?: int32(name='FromPort', description='The first port of the destination port range. The value of this parameter must fall within the port range of the endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for at most 20 destinations in each endpoint and specify at most five first ports for each destination.', example='80'),
                  toPort?: int32(name='ToPort', description='The last port of the destination port range. The value of this parameter must fall within the port range of the endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for at most 20 destinations in each endpoint and specify at most five last ports for each destination.', example='80'),
                }
              ](name='PortRanges', description='The port range of the destination to which traffic is forwarded. The value of this parameter must fall within the port range of the endpoint group.

If you leave this parameter empty, traffic is forwarded to all destination ports.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for at most 20 destinations in each endpoint and specify at most five port ranges for each destination.'),
            }
          ](name='PolicyConfigurations', description='The destination to which traffic is forwarded.

You can specify at most 20 destinations for each endpoint.'),
          trafficToEndpointPolicy?: string(name='TrafficToEndpointPolicy', description='The traffic policy that is used to process traffic to the endpoint. Valid values:

*   **AllowAll**: allows all traffic to the endpoint.
*   **DenyAll** (default): denies all traffic to the endpoint.
*   **AllowCustom**: allows traffic only to specified destinations in the endpoint.

If you set this parameter to AllowCustom, you must specify IP addresses and port ranges as the destinations to which traffic is distributed. If you specify only IP addresses and do not specify port ranges, GA can forward traffic to the specified IP addresses over all destination ports.', example='DenyAll'),
          type?: string(name='Type', description='The type of endpoint.

Set the value to **PrivateSubNet**, which specifies a private CIDR block. This is the default value.', example='PrivateSubNet'),
        }
      ](name='EndpointConfigurations', description='The information about the endpoints.

You can specify at most 10 endpoints for each endpoint group.'),
      endpointGroupRegion: string(name='EndpointGroupRegion', description='The ID of the region in which the endpoint group resides.

You can specify at most five region IDs.', example='cn-hangzhou'),
      name?: string(name='Name', description='The name of the endpoint group.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

You can specify at most five endpoint group names.', example='test'),
    }
  ](name='EndpointGroupConfigurations', description='The information about the endpoint groups.

You can specify at most five endpoint groups.', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the custom routing listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateCustomRoutingEndpointGroupsResponseBody = {
  endpointGroupIds?: [ string ](name='EndpointGroupIds', description='The IDs of the endpoint groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCustomRoutingEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomRoutingEndpointGroupsResponseBody(name='body'),
}

/**
  * Global Accelerator (GA) forwards client requests to endpoints in an endpoint group based on the routing type of the listener that is associated with the endpoint group.
  * *   After you configure an intelligent routing listener for a GA instance, the GA instance selects a nearby and healthy endpoint group and forwards client requests to a healthy endpoint in the endpoint group.
  * *   After you configure a custom routing listener for a GA instance, the instance generates a port mapping table based on the listener port range, protocols and port ranges of the associated endpoint groups, and IP addresses of endpoints (vSwitches), and forwards client requests to specified IP addresses and ports in the vSwitches.
  * You can call this operation to create endpoint groups for custom routing listeners. For information about how to create endpoint groups for intelligent routing listeners, see [CreateEndpointGroup](~~153259~~).
  * When you call this operation, take note of the following items:
  * *   **CreateCustomRoutingEndpointGroups** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) or [ListCustomRoutingEndpointGroups](~~449374~~) operation to query the status of the endpoint groups that are associated with custom routing listeners.
  *     *   If one or more endpoint groups are in the **init** state, it indicates that the endpoint groups are being created. In this case, you can perform only query operations.
  *     *   If all endpoint groups are in the **active** state, it indicates that the endpoint groups are created.
  * *   The **CreateCustomRoutingEndpointGroups** operation cannot be called repeatedly for the same GA instance within a specific period of time.
  * ### Prerequisites
  * Make sure that the following requirements are met before you call this operation:
  * *   A standard GA instance is created. For more information, see [CreateAccelerator](~~206786~~).
  * *   A bandwidth plan is associated with the standard GA instance. For more information, see [BandwidthPackageAddAccelerator](~~153239~~).
  * *   An application is deployed to receive requests that are forwarded from GA. You can specify only vSwitches as endpoints for custom routing listeners.
  * *   The permissions to use custom routing listeners are acquired and a custom routing listener is created for the GA instance. Custom routing listeners are in invitational preview. To use custom routing listeners, contact your account manager. For more information about how to create a custom routing listener, see [CreateListener](~~153253~~).
  *
 */
async function createCustomRoutingEndpointGroups(request: CreateCustomRoutingEndpointGroupsRequest): CreateCustomRoutingEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomRoutingEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomRoutingEndpointTrafficPoliciesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint for which you want to create the traffic destinations.

> This parameter is required.', example='ep-2zewuzypq5e6r3pfh****', position='Query'),
  policyConfigurations: [ 
    {
      address?: string(name='Address', description='The IP address of the destination to which traffic is forwarded.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify up to 500 destination IP addresses for each endpoint.

> This parameter is required.', example='10.0.XX.XX'),
      portRanges?: [ 
        {
          fromPort?: int32(name='FromPort', description='The first port of the destination port range. The value of this parameter must fall within the port range of the endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

If the first port and the last port are not specified, traffic on all ports of the destination is allowed.

You can specify port ranges for up to 500 destinations in each endpoint and specify up to 10 first ports for each destination.', example='80'),
          toPort?: int32(name='ToPort', description='The last port of the destination port range. The value of this parameter must fall within the port range of the endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

If the first port and the last port are not specified, traffic on all ports of the destination is allowed.

You can specify port ranges for up to 500 destinations in each endpoint and specify up to 10 last ports for each destination.', example='80'),
        }
      ](name='PortRanges', description='The port range of the destination to which traffic is forwarded. The value of this parameter must fall within the port range of the endpoint group.

If you leave this parameter empty, traffic is forwarded to all destination ports.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 500 traffic destinations in each endpoint and specify up to 10 port ranges for each traffic destination.'),
    }
  ](name='PolicyConfigurations', description='The configurations of the traffic destinations.

You can specify up to 500 traffic destinations for each endpoint.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateCustomRoutingEndpointTrafficPoliciesResponseBody = {
  policyIds?: [ string ](name='PolicyIds', description='The IDs of the traffic destinations.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCustomRoutingEndpointTrafficPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomRoutingEndpointTrafficPoliciesResponseBody(name='body'),
}

/**
  * This operation takes effect only when the traffic access policy of an endpoint allows traffic to specified destinations. You can call the [DescribeCustomRoutingEndpoint](~~449386~~) operation to query the traffic access policy of an endpoint. The CreateCustomRoutingEndpointTrafficPolicies operation takes effect only when **TrafficToEndpointPolicy** of an endpoint is set to **AllowCustom**.
  * When you call this operation, take note of the following items:
  * *   **CreateCustomRoutingEndpointTrafficPolicies** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) operation to query the status of an endpoint group to check whether traffic destinations are created for an endpoint in the endpoint group.
  *     *   If the endpoint group is in the **updating** state, traffic destinations are being created. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, traffic destinations are created.
  * *   You cannot repeatedly call the **CreateCustomRoutingEndpointTrafficPolicies** operation for the same Global Accelerator (GA) instance within a specific period of time.
  * ### Prerequisites
  * Before you call this operation, make sure that the following requirements are met:
  * *   A standard GA instance is created. For more information, see [CreateAccelerator](~~206786~~).
  * *   A bandwidth plan is associated with the standard GA instance. For more information, see [BandwidthPackageAddAccelerator](~~153239~~).
  * *   An application is deployed to receive requests that are forwarded from GA. You can specify only vSwitches as endpoints for custom routing listeners.
  * *   The permissions to use custom routing listeners are acquired and a custom routing listener is created for the GA instance. Custom routing listeners are in invitational preview. To use custom routing listeners, contact your account manager. For more information about how to create a custom routing listener, see [CreateListener](~~153253~~).
  * *   An endpoint group is created for the custom routing listener. For more information, see [CreateCustomRoutingEndpointGroups](~~449363~~).
  * *   An endpoint is created for the custom routing listener. For more information, see [CreateCustomRoutingEndpoints](~~449382~~).
  *
 */
async function createCustomRoutingEndpointTrafficPolicies(request: CreateCustomRoutingEndpointTrafficPoliciesRequest): CreateCustomRoutingEndpointTrafficPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomRoutingEndpointTrafficPolicies', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomRoutingEndpointsRequest {
  clientToken?: string(name='ClientToken', description='The ID of the endpoint group in which to create endpoints.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointConfigurations: [ 
    {
      endpoint?: string(name='Endpoint', description='The traffic policy that is used to process traffic to the endpoint. Valid values:

*   **DenyAll** (default): denies all traffic to the endpoint.
*   **AllowAll**: allows all traffic to the endpoint.
*   **AllowCustom**: allows traffic only to specified destinations in the endpoint.

If you set this parameter to AllowCustom, you must specify IP addresses and port ranges as the destinations to which traffic is distributed. If you specify only IP addresses and do not specify port ranges, GA can forward traffic to the specified IP addresses over all destination ports.', example='vsw-test01'),
      policyConfigurations?: [ 
        {
          address: string(name='Address', description='The port range of the destination to which traffic is forwarded. The value of this parameter must fall within the port range of the endpoint group.

If you leave this parameter empty, traffic is forwarded to all destination ports.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations for each endpoint and specify up to 20 port ranges for each destination.', example='10.0.XX.XX'),
          portRanges?: [ 
            {
              fromPort?: int32(name='FromPort', description='The last port of the destination port range. The value of this parameter must fall within the port range of the endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations for each endpoint and specify up to 20 last ports for each destination.', example='80'),
              toPort?: int32(name='ToPort', description='The returned information.', example='80'),
            }
          ](name='PortRanges', description='The port range of the destination to which traffic is forwarded. The value of this parameter must fall within the port range of the endpoint group.

If you leave this parameter empty, traffic is forwarded to all destination ports.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations for each endpoint and specify up to 20 port ranges for each destination.'),
        }
      ](name='PolicyConfigurations', description='The destination to which traffic is forwarded.

You can specify up to 20 destinations for each endpoint.'),
      trafficToEndpointPolicy?: string(name='TrafficToEndpointPolicy', description='The destination to which traffic is forwarded.

You can specify up to 20 destinations for each endpoint.', example='DenyAll'),
      type?: string(name='Type', description='The ID of the vSwitch that is specified as an endpoint.', example='PrivateSubNet'),
    }
  ](name='EndpointConfigurations', description='The information about the endpoints.

You can specify information for up to 20 endpoints.', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The information about the endpoints.

You can specify information for up to 20 endpoints.', example='epg-bp1bpn0kn908w4nb****', position='Query'),
  regionId: string(name='RegionId', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request is different.', example='cn-hangzhou', position='Query'),
}

model CreateCustomRoutingEndpointsResponseBody = {
  endpointIds?: [ string ](name='EndpointIds', description='The IDs of the endpoints.'),
  requestId?: string(name='RequestId', description='The IDs of the endpoints.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCustomRoutingEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomRoutingEndpointsResponseBody(name='body'),
}

/**
  * readAndWrite
  *
 */
async function createCustomRoutingEndpoints(request: CreateCustomRoutingEndpointsRequest): CreateCustomRoutingEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomRoutingEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  acceleratorIds: [ string ](name='AcceleratorIds', description='The ID of the GA instance.

You can enter up to 50 IDs.', position='Query'),
  domain: string(name='Domain', description='The accelerated domain name to be added.

Wildcard domain names are supported. A wildcard domain name must start with `*.`, such as `*.example.com`.', example='www.example.com', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainResponseBody(name='body'),
}

/**
  * After you associate an accelerated domain name that has obtained an ICP number with a Global Accelerator (GA) instance, you do not need to complete filing for the accelerated domain name or its subdomains on Alibaba Cloud.
  * You can call this operation to add an accelerated domain name and associate the accelerated domain name with GA instances. When you call this operation, take note of the following items:
  * *   If your accelerated domain name is hosted in the Chinese mainland, you must obtain an ICP number for the domain name.
  * *   The same accelerated domain name cannot be repeatedly associated with the same GA instance.
  * *   You cannot repeatedly call the **CreateDomain** operation by using the same Alibaba Cloud account within a specific period of time.
  *
 */
async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateEndpointGroupRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the endpoint group.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.', example='EndpointGroup', position='Query'),
  endpointConfigurations?: [ 
    {
      enableClientIPPreservation?: boolean(name='EnableClientIPPreservation', description='Specifies whether to preserve client IP addresses by using the TCP Option Address (TOA) module. Valid values:

*   **true**
*   **false** (default)', example='false'),
      enableProxyProtocol?: boolean(name='EnableProxyProtocol', description='Specifies whether to use the proxy protocol to preserve client IP addresses. Valid values:

*   **true**
*   **false** (default)', example='false'),
      endpoint: string(name='Endpoint', description='The IP address, domain name, or instance ID based on the value of Type.', example='120.1.XX.XX'),
      subAddress?: string(name='SubAddress', description='The private IP address of the ENI.
> - When the Endpoint type is **ENI**, this parameter can be configured. If not configured, it defaults to the primary private IP address of ENI.', example='172.168.XX.XX'),
      type: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain**: a custom domain name
*   **Ip**: a custom IP address
*   **PublicIp**: a public IP address provided by Alibaba Cloud
*   **ECS**: an Elastic Compute Service (ECS) instance
*   **SLB**: a Server Load Balancer (SLB) instance
*   **ALB**: an Application Load Balancer (ALB) instance
*   **OSS**: an Object Storage Service (OSS) bucket

> 

*   If you set this parameter to **ECS** or **SLB** and the service-linked role AliyunServiceRoleForGaVpcEndpoint does not exist, the system automatically creates the service-linked role.

*   If you set this parameter to **ALB** and the service-linked role AliyunServiceRoleForGaAlb does not exist, the system automatically creates the service-linked role.

*   If you set this parameter to **OSS** and the service-linked role AliyunServiceRoleForGaOss does not exist, the system automatically creates the service-linked role.

For more information, see [Service-linked roles](~~178360~~).', example='Ip'),
      weight: int32(name='Weight', description='The weight of the endpoint.

Valid values: **0** to **255**.

>  If you set the weight of an endpoint to 0, the GA instance stops distributing traffic to the endpoint.', example='20'),
    }
  ](name='EndpointConfigurations', description='The configurations of the endpoints in the endpoint group.', position='Query'),
  endpointGroupRegion: string(name='EndpointGroupRegion', description='The ID of the region in which to create the endpoint group.', example='cn-hangzhou', position='Query'),
  endpointGroupType?: string(name='EndpointGroupType', description='The type of the endpoint group. Default value: default. Valid values:

*   **default**: a default endpoint group.
*   **virtual**: a virtual endpoint group.

>  Only HTTP and HTTPS listeners support virtual endpoint groups.', example='default', position='Query'),
  endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol that is used by the backend service. Default value: HTTP. Valid values:

*   **HTTP**
*   **HTTPS**

> *   You can set this parameter only when the listener that is associated with the endpoint group uses **HTTP** or **HTTPS**.
>*   For an **HTTP** listener, the backend service protocol must be **HTTP**.', example='HTTP', position='Query'),
  healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable the health check feature. Default value: true. Valid values:

*   **true**: enables the health check feature.
*   **false**: disables the health check feature.', example='true', position='Query'),
  healthCheckIntervalSeconds?: int32(name='HealthCheckIntervalSeconds', description='The interval at which health checks are performed. Unit: seconds.', example='3', position='Query'),
  healthCheckPath?: string(name='HealthCheckPath', description='The path to which to send health check requests.', example='/healthcheck', position='Query'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The port that is used for health checks.', example='20', position='Query'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which to send health check requests. Valid values:

*   **tcp**: TCP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  name?: string(name='Name', description='The name of the endpoint group.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='group1', position='Query'),
  portOverrides?: [ 
    {
      endpointPort?: int32(name='EndpointPort', description='The endpoint port that is mapped to the listener port.', example='80'),
      listenerPort?: int32(name='ListenerPort', description='The listener port that is mapped to the endpoint port.

> *   Only HTTP and HTTPS listeners support port mappings.
>*   The listener port must be the one used by the current listener.', example='443'),
    }
  ](name='PortOverrides', description='The mappings between ports.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the GA instance. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='test-key'),
      value?: string(name='Value', description='The tag value of the GA instance. The tag value cannot be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='test-value'),
    }
  ](name='Tag', description='Tags of GA instances.', position='Query'),
  thresholdCount?: int32(name='ThresholdCount', description='The number of consecutive health check failures that must occur before a healthy endpoint group is considered unhealthy, or the number of consecutive health check successes that must occur before an unhealthy endpoint group is considered healthy.

Valid values: **2** to **10**. Default value: **3**.', example='3', position='Query'),
  trafficPercentage?: int32(name='TrafficPercentage', description='The traffic ratio for the endpoint group when the specified listener is associated with multiple endpoint groups.

Valid values: **1** to **100**.', example='20', position='Query'),
}

model CreateEndpointGroupResponseBody = {
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEndpointGroupResponseBody(name='body'),
}

/**
  * *   **CreateEndpointGroup** is an asynchronous operation. After you send a request, the system returns the ID of an endpoint group, but the endpoint group is still being created in the system background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the state of the endpoint group.
  *     *   If the endpoint group is in the **init** state, it indicates that the endpoint group is being created. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, it indicates that the endpoint group is created.
  * *   The **CreateEndpointGroup** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function createEndpointGroup(request: CreateEndpointGroupRequest): CreateEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateEndpointGroupsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Default value: false. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  endpointGroupConfigurations: [ 
    {
      enableClientIPPreservationProxyProtocol?: boolean(name='EnableClientIPPreservationProxyProtocol', description='Specifies whether to use the proxy protocol to preserve client IP addresses. Default value: false. Valid values:

*   **true**: uses the proxy protocol to preserve client IP addresses.
*   **false**: does not use the proxy protocol to preserve client IP addresses.

You can specify this parameter for up to 10 endpoint groups.', example='false'),
      enableClientIPPreservationToa?: boolean(name='EnableClientIPPreservationToa', description='Specifies whether to preserve client IP addresses by using the TCP Option Address (TOA) module. Default value: false. Valid values:

*   **true**: preserves client IP addresses by using the TOA module.
*   **false**: does not preserve client IP addresses by using the TOA module.

You can specify this parameter for up to 10 endpoint groups.', example='false'),
      endpointConfigurations?: [ 
        {
          endpoint?: string(name='Endpoint', description='The IP address, domain name or instance id according to the type of the endpoint.

You can specify up to 100 endpoint IP addresses or domain names in an endpoint group.

>  This parameter is required.', example='47.0.XX.XX'),
          subAddress?: string(name='SubAddress', description='The private IP address of the ENI.

> - When the Endpoint type is ENI, this parameter can be configured. If not configured, it defaults to the primary private IP address of ENI.', example='172.168.XX.XX'),
          type?: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain:** a custom domain name.
*   **Ip:** a custom IP address.
*   **PublicIp:** a public IP address provided by Alibaba Cloud.
*   **ECS:** Elastic Compute Service (ECS) instance.
*   **SLB:** Server Load Balancer (SLB) instance.
*   **ALB:** Application Load Balancer (ALB) instance.
*   **OSS:** Object Storage Service (OSS) bucket.
*   **ENI:** Elastic Network interface (ENI).
*   **NLB:** Network Load Balancer (NLB) instance.

> *   If you set this parameter to **ECS** or **SLB** and the service-linked role AliyunServiceRoleForGaVpcEndpoint does not exist, the system automatically creates the service-linked role.
>*   If you set this parameter to **ALB** and the service-linked role AliyunServiceRoleForGaAlb does not exist, the system automatically creates the service-linked role.
>*   If you set this parameter to **OSS** and the service-linked role AliyunServiceRoleForGaOss does not exist, the system automatically creates the service-linked role.

For more information, see [Service linked roles](~~178360~~).', example='Ip'),
          weight?: long(name='Weight', description='The weight of the endpoint.

Valid values: **0** to **255**.

You can set the weights of up to 100 endpoints in an endpoint group.

> 
*   This parameter is required.
*   If the weight of an endpoint is set to 0, GA stops distributing network traffic to the endpoint. Proceed with caution.', example='20'),
        }
      ](name='EndpointConfigurations', description='Terminal node configuration information.'),
      endpointGroupDescription?: string(name='EndpointGroupDescription', description='The description of the endpoint group.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.

You can enter the descriptions of up to 10 endpoint groups.', example='group1'),
      endpointGroupName?: string(name='EndpointGroupName', description='The name of the endpoint group.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

You can enter the names of up to 10 endpoint groups.', example='group1'),
      endpointGroupRegion: string(name='EndpointGroupRegion', description='The ID of the region where you want to create the endpoint group.

You can enter the IDs of up to 10 regions.', example='cn-hangzhou'),
      endpointGroupType?: string(name='EndpointGroupType', description='The type of the endpoint group. Default value: default. Valid values:

*   **default**: a default endpoint group.
*   **virtual**: a virtual endpoint group.

You can specify the types of up to 10 endpoint groups.

>  Only HTTP and HTTPS listeners support virtual endpoint groups.', example='default'),
      endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol that is used by the backend service. Default value: HTTP. Valid values:

*   **HTTP**: HTTP
*   **HTTPS**: HTTPS

You can specify up to 10 backend service protocols.

> 
*   You can set this parameter only if the listener that is associated with the endpoint group uses **HTTP** or **HTTPS**.
*   For an **HTTP** listener, the backend service protocol must be **HTTP**.', example='HTTP'),
      healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable the health check feature. Default value: false. Valid values:

*   **true**: enables the health check feature.
*   **false**: disables the health check feature.

You can enable the health check feature for up to 10 endpoint groups.', example='false'),
      healthCheckIntervalSeconds?: long(name='HealthCheckIntervalSeconds', description='The interval at which health checks are performed. Unit: seconds.

You can specify up to 10 health check intervals.', example='3'),
      healthCheckPath?: string(name='HealthCheckPath', description='The path to which health check requests are sent.

You can specify up to 10 health check paths.', example='/healthcheck'),
      healthCheckPort?: long(name='HealthCheckPort', description='The port that is used for health checks. Valid values: **1** to **65535**.

You can specify up to 10 ports for health checks.', example='20'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which health check requests are sent. Valid values:

*   **tcp**: TCP
*   **http**: HTTP
*   **https**: HTTPS

You can specify up to 10 health check protocols.', example='tcp'),
      portOverrides?: [ 
        {
          endpointPort?: long(name='EndpointPort', description='The endpoint port that is mapped to the listener port.

You can specify endpoint ports in up to five port mappings.', example='80'),
          listenerPort?: long(name='ListenerPort', description='The listener port that is mapped to the endpoint port.

You can specify listener ports in up to five port mappings.

> 
*   Only HTTP and HTTPS listeners support port mappings.
*   The listener port in a port mapping must be the one used by the current listener.', example='443'),
        }
      ](name='PortOverrides', description='The mappings between ports.'),
      systemTag?: [ 
        {
          key?: string(name='Key'),
          scope?: string(name='Scope'),
          value?: string(name='Value'),
        }
      ](name='SystemTag'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
      thresholdCount?: long(name='ThresholdCount', description='The number of consecutive health check failures that must occur before a healthy endpoint group is considered unhealthy, or the number of consecutive health check successes that must occur before an unhealthy endpoint group is considered healthy.

Valid values: **2** to **10**. Default value: **3**.

You can specify the number of consecutive health check successes or failures for up to 10 endpoint groups.', example='3'),
      trafficPercentage?: long(name='TrafficPercentage', description='The value of the traffic distribution ratio. If a listener is associated with multiple endpoint groups, you can set this parameter to distribute different percentages of traffic to the endpoint groups.

Valid values: **1** to **100**. Default value: **100**.

You can specify the traffic distribution ratios for up to 10 endpoint groups.', example='20'),
    }
  ](name='EndpointGroupConfigurations', description='Terminal node group configuration information.', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.

>  If the protocol of the listener is **HTTP** or **HTTPS**, only one endpoint group is created after you call the **CreateEndpointGroups** operation.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateEndpointGroupsResponseBody = {
  endpointGroupIds?: [ string ](name='EndpointGroupIds', description='The IDs of the endpoint groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model CreateEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEndpointGroupsResponseBody(name='body'),
}

/**
  * *   **CreateEndpointGroups** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeEndpointGroup](~~153260~~) or [ListEndpointGroups](~~153261~~) to query the state of an endpoint group.
  *     *   If an endpoint group is in the **init** state, the endpoint group is being created. In this case, you can perform only query operations.
  *     *   If all endpoint groups are in the **active**, endpoint groups are created.
  * *   The **CreateEndpointGroups** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function createEndpointGroups(request: CreateEndpointGroupsRequest): CreateEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model CreateForwardingRulesRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4q****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4****', position='Query'),
  forwardingRules: [ 
    {
      forwardingRuleName?: string(name='ForwardingRuleName', description='The name of the forwarding rule.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test'),
      priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1** to **10000**. A lower value indicates a higher priority.', example='1000'),
      ruleActions: [ 
        {
          forwardGroupConfig?: {
            serverGroupTuples: [ 
              {
                endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.

>  For GA instances created after July 12, 2022, all forwarding condition types and forwarding action types are supported. We recommend that you call **RuleActionType** and **RuleActionValue** to query forwarding actions.', example='epg-bp1ieei9664r5nv****'),
              }
            ](name='ServerGroupTuples', description='The information about the endpoint group.

>  For GA instances created after July 12, 2022, all forwarding condition types and forwarding action types are supported. We recommend that you call **RuleActionType** and **RuleActionValue** to query forwarding actions.'),
          }(name='ForwardGroupConfig', description='The forwarding configurations.

>  We recommend that you do not use this parameter. We recommend that you use the **RuleActionType** and **RuleActionValue** parameters to configure forwarding actions.'),
          order: int32(name='Order', description='The forwarding priority.

>  This parameter does not take effect. Ignore this parameter.', example='20'),
          ruleActionType: string(name='RuleActionType', description='The type of the forwarding action. Valid values:

*   **ForwardGroup**: forwards a request.
*   **Redirect**: redirects a request.
*   **FixResponse**: returns a fixed response.
*   **Rewrite**: rewrites a request.
*   **AddHeader**: adds a header to a request.
*   **RemoveHeaderConfig**: deletes the header from a request.', example='ForwardGroup'),
          ruleActionValue?: string(name='RuleActionValue', description='The value of the forwarding action type.

You must specify different JSON strings based on the **RuleActionType** parameter.

A forwarding rule can contain only one forwarding action whose type is **ForwardGroup**, **Redirect**, or **FixResponse**. You must specify a forwarding action whose type is **Rewrite**, **AddHeader**, or **RemoveHeader** before a forwarding action whose type is **ForwardGroup**.

*   If **RuleActionType** is set to **ForwardGroup**, this parameter specifies the information of a virtual endpoint group. You can forward requests to only one virtual endpoint group. Example: `{"type":"endpointgroup", "value":"epg-bp1enpdcrqhl78g6r****"}`.

    *   `type`: set this parameter to `endpointgroup`.
    *   `value`: set this parameter to the ID of a virtual endpoint group.

*   If **RuleActionType** is set to **Redirect**, this parameter specifies redirecting configurations. You cannot leave all of the following parameters empty or configure all of these parameters to use the default values for a forwarding action whose type is **Redirect**: `protocol`, `domain`, `port`, `path`, and `query`. Example: `{"protocol":"HTTP", "domain":"www.example.com", "port":"80", "path":"/a","query":"value1", "code":"301" }`.

    *   `protocol`: the protocol of requests after the requests are redirected. Valid values: `${protocol}` (default), `HTTP`, and `HTTPS`.
    *   `domain`: the domain name to which requests are redirected. Default value: `${host}`. You can also enter a domain name. The domain name must be 3 to 128 characters in length, and can contain only letters, digits, and the following special characters: `. - ? = ~ _ - + / ^ * ! $ & | ( ) [ ]`.
    *   `port`: the port to which requests are redirected. Default value: `${port}`. You can enter a port number that ranges from 1 to 63335.
    *   `path`: the path to which requests are redirected. Default value: `${path}`. The path must be 1 to 128 characters in length. To use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? ~ ^ * $ : ( ) [ ] + |`. The path must start with a tilde (~). If you do not want to use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? :`. The path must start with a forward slash (/).
    *   `query`: the query string of the requests to be redirected. Default value: `${query}`. You can also specify a query string. The query string must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The query string cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > # | &`.
    *   `code`: the redirecting code. Valid values: `301`, `302`, `303`, `307`, and `308`.

*   If **RuleActionType** is set to **FixResponse**, this parameter specifies a fixed response. Example: `{"code":"200", "type":"text/plain", "content":"dssacav" }`.

    *   `code`: the HTTP status code to return. The response status code must be one of the following numeric strings: `2xx`, `4xx`, and `5xx`. The letter `x` indicates a number from 0 to 9.
    *   `type`: the type of the response content. Valid values: **text/plain**, **text/css**, **text/html**, **application/javascript**, and **application/json**.
    *   `content`: the response content. The response content cannot exceed 1,000 characters in length and does not support Chinese characters.

*   If **RuleActionType** is set to **AddHeader**, this parameter specifies an HTTP header to be added. If a forwarding rule contains a forwarding action whose type is **AddHeader**, you must specify another forwarding action whose type is **ForwardGroup**. Example: `[{"name":"header1","type":"userdefined", "value":"value"}]`.

    *   `name`: the name of the HTTP header. The name must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). The name of the HTTP header specified by **AddHeader** must be unique and cannot be the same as the name of the HTTP header specified by **RemoveHeader**.
    *   `type`: the content type of the HTTP header. Valid values: `user-defined`, `ref`, and `system-defined`.
    *   `value`: the content of the HTTP header. You cannot leave this parameter empty. If you set `type` to `user-defined`, the content must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The content can contain letters, digits, hyphens (-), and underscores (\\_). The content cannot start or end with a space character. If you set `type` to `ref`, the content must be 1 to 128 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). The content cannot start or end with a space character. If you set `type` to `system-defined`, only `ClientSrcIp` is supported.

*   If **RuleActionType** is set to **RemoveHeader**, this parameter specifies an HTTP header to be removed. If a forwarding rule contains a forwarding action whose type is **RemoveHeader**, you must specify another forwarding action whose type is **ForwardGroup**. The header must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). Example: `["header1"]`.

*   If **RuleActionType** is set to **Rewrite**, this parameter specifies the rewriting configuration. If a forwarding rule contains a forwarding action whose type is **Rewrite**, you must specify another forwarding action whose type is **ForwardGroup**. Example: `{"domain":"value1", "path":"value2", "query":"value3"}`.

    *   `domain`: the domain name to which requests are redirected. Default value: `${host}`. You can also enter a domain name. The domain name must be 3 to 128 characters in length, and can contain only lowercase letters, digits, and the following special characters: `. - ? = ~ _ - + / ^ * ! $ & | ( ) [ ]`.
    *   `path`: the path to which requests are redirected. Default value: `${path}`. The path must be 1 to 128 characters in length. To use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? ~ ^ * $ : ( ) [ ] + |`. The path must start with a tilde (~). If you do not want to use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? :`. The path must start with a forward slash (/).
    *   `query`: the query string of the requests to be redirected. Default value: `${query}`. You can also specify a query string. The query string must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The query string cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > # | &`.', example='[{"type":"endpointgroup", "value":"epg-bp1enpdcrqhl78g6r****"}]'),
        }
      ](name='RuleActions', description='The forwarding action.'),
      ruleConditions: [ 
        {
          hostConfig?: {
            values?: [ string ](name='Values', description='The domain name.

The domain name must be 3 to 128 characters in length, and can contain letters, digits, hyphens (-), and periods (.). Supported wildcard characters are asterisks (\\*) and question marks (?).

>  For GA instances created after July 12, 2022, all forwarding condition types and forwarding action types are supported. We recommend that you use **RuleConditionType** and **RuleConditionValue** to query forwarding conditions.'),
          }(name='HostConfig', description='The configuration of the domain name.

>  We recommend that you do not use this parameter. We recommend that you use the **RuleConditionType** and **RuleConditionValue** parameters to configure forwarding conditions.'),
          pathConfig?: {
            values?: [ string ](name='Values', description='The path.

The path must be 1 to 128 characters in length and must start with a forward slash (/). The path can contain only letters, digits, and the following special characters: $ - \\_ . + / & ~ @ : \\". Supported wildcard characters are asterisks (\\*) and question marks (?).

>  For GA instances created after July 12, 2022, all forwarding condition types and forwarding action types are supported. We recommend that you use **RuleConditionType** and **RuleConditionValue** to query forwarding conditions.'),
          }(name='PathConfig', description='The configuration of the path.

>  We recommend that you do not use this parameter. We recommend that you use the **RuleConditionType** and **RuleConditionValue** parameters to configure forwarding conditions.'),
          ruleConditionType?: string(name='RuleConditionType', description='The type of the forwarding conditions. Valid values:

*   **Host**: domain name
*   **Path**: path
*   **RequestHeader**: HTTP header
*   **Query**: query string
*   **Method**: HTTP method
*   **Cookie**: cookie
*   **SourceIP**: source IP address', example='Host'),
          ruleConditionValue?: string(name='RuleConditionValue', description='The value of the forwarding condition type.

You must specify different JSON strings based on the **RuleConditionType** parameter.

*   If **RuleConditionType** is set to **Host**, this parameter specifies a domain name condition. A forwarding rule can contain only one forwarding condition whose type is host. You can specify multiple domain names in a forwarding condition. The relationship between multiple domain names is OR. The domain name must be 3 to 128 characters in length, and can contain letters, digits, hyphens (-), and periods (.). Supported wildcard characters are asterisks (\\*) and question marks (?). Example: `["www.example.com", "www.aliyun.com"]`.

*   If **RuleConditionType** is set to **Path**, this parameter specifies a path condition. A forwarding rule can contain multiple forwarding conditions whose types are path. The relationship between multiple path conditions is OR. You can specify multiple paths in a forwarding condition. The relationship between multiple paths is OR. The path must be 1 to 128 characters in length and must start with a forward slash (/). The path can contain letters, digits, and the following special characters: $ - \\_ . + / & ~ @ : \\". Supported wildcard characters are asterisks (\\*) and question marks (?). Example: `["/a", "/b/"]`.

*   If **RuleConditionType** is set to **RequestHeader**, this parameter specifies an HTTP header condition that consists of key-value pairs. The header values in a forwarding condition must be unique. Example: `[{"header1":["value1","value2"]}]`.

    *   Key: The key of an HTTP header must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_).
    *   Value: The value of an HTTP header must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The value cannot start or end with a space character.

*   If **RuleConditionType** is set to **Query**, this parameter specifies a query string condition that consists of key-value pairs. Example: `[{"query1":["value1"]}, {"query2":["value2"]}]`.

    *   Key: The key of an HTTP header must be 1 to 100 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The key cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > \\ ; / ? : @ & = + , $ % | " ^ ~`.
    *   Value: The value of an HTTP header must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The value cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > \\ ; / ? : @ & = + , $ % | " ^ ~`.

*   If **RuleConditionType** is set to **Method**, this parameter specifies an HTTP method condition. Valid values: **HEAD**, **GET**, **POST**, **OPTIONS**, **PUT**, **PATCH**, and **DELETE**. Example: `["GET", "OPTIONS", "POST"]`.

*   If **RuleConditionType** is set to **Cookie**, this parameter specifies a cookie condition that consists of key-value pairs. Example: `[{"cookie1":["value1"]}, {"cookie2":["value2"]}]`.

    *   Key: The key of a cookie must be 1 to 100 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.
    *   Value: The value of a cookie must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and lower than 127`. The value cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.

*   If **RuleConditionType** is set to **SourceIP**, this parameter specifies a source IP address condition. You can specify IP addresses, such as 1.1.XX.XX/32. You can also specify CIDR blocks, such as 2.2.XX.XX/24. A forwarding rule can contain only one forwarding condition whose type is source IP address. You can specify multiple source IP addresses in a forwarding condition. The relationship between multiple source IP addresses is OR. Example: `["1.1.XX.XX/32", "2.2.XX.XX/24"]`.', example='["www.example.com", "www.aliyun.com"]'),
        }
      ](name='RuleConditions', description='The forwarding conditions.'),
      ruleDirection?: string(name='RuleDirection', description='The direction in which the rule takes effect. You do not need to set this parameter.

By default, this parameter is set to **request**, which indicates that the rule takes effect on requests.', example='request'),
    }
  ](name='ForwardingRules', description='Details about the forwarding rules.', example='test', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1s0vzbi5bxlx5****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateForwardingRulesResponseBody = {
  forwardingRules?: [ 
    {
      forwardingRuleId?: string(name='ForwardingRuleId', description='The ID of the forwarding rule.', example='frule-bp1dii16gu9qdvb34****'),
    }
  ](name='ForwardingRules', description='Details about the forwarding rules.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model CreateForwardingRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateForwardingRulesResponseBody(name='body'),
}

/**
  * HTTP and HTTPS listeners of Global Accelerator (GA) support domain name-based and path-based forwarding rules. After an HTTP or HTTPS listener receives a request, the system matches the request against the forwarding conditions in a forwarding rule and then performs the corresponding forwarding action. For example, if you set **Host** to `www.example.com` as the forwarding condition and **Forward** to `epg-bp1enpdcrqhl78g6r****` as the forwarding action in a forwarding rule, requests to the `www.example.com` domain name match this forwarding rule and are forwarded to the `epg-bp1enpdcrqhl78g6r****` endpoint group. Before you call this API operation to create a forwarding rule, we recommend that you understand forwarding rules. For more information, see [Forwarding rules](~~204224~~).
  * When you call this operation, take note of the following items:
  * *   **CreateForwardingRules** is an asynchronous operation. After you send a request, the system returns the ID of a forwarding rule, but the forwarding rule is still being created in the system background. You can call the [ListForwardingRules](~~205817~~) operation to query the state of the forwarding rule.
  *     *   If the forwarding rule is in the **configuring** state, it indicates that the rule is being created. In this case, you can only perform query operations.
  *     *   If the forwarding rule is in the **active** state, it indicates that the rule is created.
  * *   The **CreateForwardingRules** operation cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function createForwardingRules(request: CreateForwardingRulesRequest): CreateForwardingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateForwardingRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpSetsRequest {
  accelerateRegion: [ 
    {
      accelerateRegionId: string(name='AccelerateRegionId', description='The acceleration region IDs.

The number of regions that can be added varies based on the specification of the GA instance. For more information, see [Overview](~~153127~~).', example='cn-huhehaote'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth to be allocated to the acceleration region. Unit: **Mbit/s**.

> 

*   Each acceleration region must be allocated a minimum of 2 Mbit/s of bandwidth.

*   The total bandwidth for all acceleration regions cannot exceed the maximum bandwidth of the basic bandwidth plan.', example='2'),
      ipVersion?: string(name='IpVersion', description='The IP version used to connect to the GA instance. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv6'),
      ispType?: string(name='IspType', description='The line type of the elastic IP address (EIP) in the acceleration region. Valid values:

*   **BGP**
*   **BGP_PRO** If the acceleration region is China (Hong Kong) and a basic bandwidth plan whose bandwidth type is Premium is associated with the GA instance, the default value of IspType is BGP_PRO.

If you are allowed to use single-ISP bandwidth, you can also specify one of the following values:

*   **ChinaTelecom**: China Telecom (single ISP)
*   **ChinaUnicom**: China Unicom (single ISP)
*   **ChinaMobile**: China Mobile (single ISP)
*   **ChinaTelecom_L2**: China Telecom \\_L2 (single ISP)
*   **ChinaUnicom_L2**: China Unicom \\_L2 (single ISP)
*   **ChinaMobile_L2**: China Mobile \\_L2 (single ISP)

> Different acceleration regions support different single-ISP BGP lines.', example='BGP'),
    }
  ](name='AccelerateRegion', description='The information about the acceleration regions.', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1yeeq8yfoyszmqy****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model CreateIpSetsResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1yeeq8yfoyszmq****'),
  ipSets?: [ 
    {
      accelerateRegionId?: string(name='AccelerateRegionId', description='The acceleration region ID.', example='cn-qingdao'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth allocated to the acceleration region. Unit: **Mbit/s**.', example='2'),
      ipSetId?: string(name='IpSetId', description='The acceleration region ID.', example='ips-bp11r5jb8ogp122xl****'),
      ispType?: string(name='IspType', description='The line type of the EIP in the acceleration region.', example='BGP'),
    }
  ](name='IpSets', description='The details about the acceleration regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF'),
}

model CreateIpSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpSetsResponseBody(name='body'),
}

/**
  * *   **CreateIpSets** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeIpSet](~~153246~~) operation to query the status of the task.
  *     *   If acceleration regions are in the **init** state, it indicates that the acceleration regions are being created. In this case, you can perform only query operations.
  *     *   If acceleration regions are in the **active** state, it indicates that the acceleration regions are created.
  * *   You cannot call the **CreateIpSets** operation again on the same GA instance before the previous operation is completed.
  *
 */
async function createIpSets(request: CreateIpSetsRequest): CreateIpSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpSets', 'POST', '/', 'json', false, 'json', request);
}

model CreateListenerRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  certificates?: [ 
    {
      id?: string(name='Id', description='The ID of the SSL certificate.

> This parameter is required only when you create an HTTPS listener.', example='449****-cn-hangzhou'),
    }
  ](name='Certificates', description='The SSL certificates.', position='Query'),
  clientAffinity?: string(name='ClientAffinity', description='Specifies whether to enable client affinity for the listener.

*   If this parameter is left empty, client affinity is disabled. After client affinity is disabled, requests from a specific client IP address may be forwarded to different endpoints.
*   To enable client affinity, set this parameter to **SOURCE_IP**. In this case, when a client accesses stateful applications, requests from the same client are forwarded to the same endpoint regardless of the source port or protocol.', example='SOURCE_IP', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** is different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  customRoutingEndpointGroupConfigurations?: [ 
    {
      description?: string(name='Description', description='The description of the endpoint group that is associated with the custom routing listener.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.

You can specify at most five endpoint group descriptions.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='test'),
      destinationConfigurations?: [ 
        {
          fromPort?: int32(name='FromPort', description='The first port used by the endpoint group that is associated with the custom routing listener.

Valid values: **1** to **65499**. The value of **FromPort** must be equal to or smaller than the value of **ToPort**.

You can specify up to 20 first ports for an endpoint group of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='80'),
          protocols?: [ string ](name='Protocols', description='The protocol used by the endpoint group that is associated with the custom routing listener.

You can specify up to four protocols in each mapping configuration for an endpoint group of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.'),
          toPort?: int32(name='ToPort', description='The last port used by the endpoint group that is associated with the custom routing listener.

Valid values: **1** to **65499**. The value of **FromPort** must be equal to or smaller than the value of **ToPort**.

You can specify up to 20 last ports for an endpoint group of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='80'),
        }
      ](name='DestinationConfigurations', description='The mapping configurations of the endpoint group that is associated with the custom routing listener.

You need to specify the port ranges and protocols used by the endpoint group. The ports are mapped to listener ports.

You can specify at most 20 mapping configurations for an endpoint group of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.'),
      endpointConfigurations?: [ 
        {
          endpoint?: string(name='Endpoint', description='The name of the vSwitch that is specified as an endpoint.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='vsw-test01'),
          policyConfigurations?: [ 
            {
              address?: string(name='Address', description='The IP address of the destination to which traffic is forwarded.

This parameter takes effect only if **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify up to 20 destination IP addresses for each endpoint of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='10.0.XX.XX'),
              portRanges?: [ 
                {
                  fromPort?: int32(name='FromPort', description='The first port of the destination port range. The value of this parameter must be in the port range of the endpoint group.

This parameter takes effect only if **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations in each endpoint of a custom routing listener. You can specify up to five first ports for each destination.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='80'),
                  toPort?: int32(name='ToPort', description='The last port of the destination port range. The value of this parameter must be in the port range of the endpoint group.

This parameter takes effect only if **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations in each endpoint of a custom routing listener. You can specify up to five end ports for each destination.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='80'),
                }
              ](name='PortRanges', description='The port range of the destination to which traffic is forwarded. The value of this parameter must fall within the port range of the endpoint group.

If you leave this parameter empty, traffic is distributed to all destination ports.

This parameter takes effect only if **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations in each endpoint of a custom routing listener. You can specify up to five port ranges for each destination.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.'),
            }
          ](name='PolicyConfigurations', description='The destination in the endpoint that is associated with the custom routing listener.

You can specify at most 20 destinations in each endpoint of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.'),
          trafficToEndpointPolicy?: string(name='TrafficToEndpointPolicy', description='The traffic policy for the endpoint that is associated with the custom routing listener. Valid values:

*   **DenyAll** (default): denies all traffic to the endpoint.
*   **AllowAll**: allows all traffic to the endpoint.
*   **AllowCustom**: allows traffic only to specified destinations in the endpoint.

If you set this parameter to AllowCustom, you must specify IP addresses and port ranges as the destinations to which traffic is distributed. If you specify only IP addresses and do not specify port ranges, GA can forward traffic to the specified IP addresses over all destination ports.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='DenyAll'),
          type?: string(name='Type', description='The service type of the endpoint that is associated with the custom routing listener.

Set the value to **PrivateSubNet**, which specifies a private CIDR block.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='PrivateSubNet'),
        }
      ](name='EndpointConfigurations', description='The endpoint that is associated with the custom routing listener.

You can configure at most 10 endpoints for an endpoint group of a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.'),
      endpointGroupRegion?: string(name='EndpointGroupRegion', description='The region ID of the endpoint group that is associated with the custom routing listener.

You can enter the region IDs of up to five endpoint groups.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='cn-hangzhou'),
      name?: string(name='Name', description='The name of the endpoint group that is associated with the custom routing listener.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

You can specify at most five endpoint group names.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', example='test'),
    }
  ](name='CustomRoutingEndpointGroupConfigurations', description='The endpoint group that is associated with the custom routing listener.

You can configure at most five endpoint groups for a custom routing listener.

> You can configure endpoint groups and endpoints for a custom routing listener only if the **Type** parameter is set to **CustomRouting**.', position='Query'),
  description?: string(name='Description', description='The description of the listener. The description can be at most 200 characters in length.', example='Listener', position='Query'),
  endpointGroupConfigurations?: [ 
    {
      enableClientIPPreservationProxyProtocol?: boolean(name='EnableClientIPPreservationProxyProtocol', description='Specifies whether to use the proxy protocol to preserve client IP addresses. Valid values:

*   **true**: uses the proxy protocol to preserve client IP addresses.
*   **false** (default): does not use the proxy protocol to preserve client IP addresses.

You can set this parameter for up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='false'),
      enableClientIPPreservationToa?: boolean(name='EnableClientIPPreservationToa', description='Specifies whether to obtain and preserve the IP addresses of clients that access the endpoint by using the TCP Option Address (TOA) module. Valid values:

*   **true**: preserves client IP addresses by using the TOA module.
*   **false** (default): does not preserve client IP addresses by using the TOA module.

You can set this parameter for up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='false'),
      endpointConfigurations?: [ 
        {
          endpoint?: string(name='Endpoint', description='The IP address or domain name of the endpoint that is associated with the intelligent routing listener.

You can specify up to 100 endpoint IP addresses or domain names for an endpoint group of an intelligent routing listener.

> If the **Type** parameter is set to **Standard**, you can configure endpoint groups and endpoints for an intelligent routing listener, and this parameter is required.', example='47.0.XX.XX'),
          subAddress?: string(name='SubAddress'),
          type?: string(name='Type', description='The endpoint type of the intelligent routing listener. Valid values:

*   **Domain**: a custom domain name
*   **Ip**: a custom IP address
*   **PublicIp**: a public IP address provided by Alibaba Cloud
*   **ECS**: an Elastic Compute Service (ECS) instance
*   **SLB**: a Server Load Balancer (SLB) instance
*   **ALB**: an Application Load Balancer (ALB) instance
*   **OSS**: an Object Storage Service (OSS) bucket

You can specify up to 100 endpoint types for an endpoint group of an intelligent routing listener.

> 

*   If the **Type** parameter is set to **Standard**, you can configure endpoint groups and endpoints for an intelligent routing listener, and this parameter is required.

*   If you set this parameter to **ECS** or **SLB** and the service-linked role AliyunServiceRoleForGaVpcEndpoint does not exist, the system creates the service-linked role.
*   If you set this parameter to **ALB** and the service-linked role AliyunServiceRoleForGaAlb does not exist, the system automatically creates the service-linked role.
*   If you set this parameter to **OSS** and the service-linked role AliyunServiceRoleForGaOss does not exist, the system automatically creates the service-linked role.

For more information, see [Service-linked roles](~~178360~~).', example='Ip'),
          weight?: long(name='Weight', description='The weight of the endpoint that is associated with the intelligent routing listener.

Valid values: **0** to **255**.

You can set the weights of up to 100 endpoints for an endpoint group of an intelligent routing listener.

> 

*   If the **Type** parameter is set to **Standard**, you can configure endpoint groups and endpoints for an intelligent routing listener, and this parameter is required.

*   If the weight of an endpoint is set to 0, GA stops distributing network traffic to the endpoint. Proceed with caution.', example='20'),
        }
      ](name='EndpointConfigurations', description='The endpoint that is associated with the intelligent routing listener.'),
      endpointGroupDescription?: string(name='EndpointGroupDescription', description='The description of the endpoint group that is associated with the intelligent routing listener.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.

You can enter the descriptions of up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='test'),
      endpointGroupName?: string(name='EndpointGroupName', description='The name of the endpoint group that is associated with the intelligent routing listener.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

You can enter the names of up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='test'),
      endpointGroupRegion?: string(name='EndpointGroupRegion', description='The region ID of the endpoint group that is associated with the intelligent routing listener.

You can enter the region IDs of up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='cn-hangzhou'),
      endpointGroupType?: string(name='EndpointGroupType', description='The endpoint group type of the intelligent routing listener. Valid values:

*   **default** (default): a default endpoint group.
*   **virtual**: a virtual endpoint group.

You can specify the types of up to 10 endpoint groups.

> 

*   You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.

*   Only HTTP intelligent routing listeners and HTTPS intelligent routing listeners support virtual endpoint groups.', example='default'),
      endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol used by the endpoint that is associated with the intelligent routing listener. Valid values:

*   **HTTP** (default): HTTP
*   **HTTPS**: HTTPS

You can specify at most 10 protocols.

> 

*   You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.

*   You can set this parameter only for HTTP intelligent routing listeners and HTTPS intelligent routing listeners.
*   For an HTTP listener, the protocol must be **HTTP**.', example='HTTP'),
      healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable health checks for the endpoint group that is associated with the intelligent routing listener. Valid values:

*   **true**: enables the health check feature.
*   **false** (default): disables the health check feature.

You can enable the health check feature for up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='false'),
      healthCheckIntervalSeconds?: long(name='HealthCheckIntervalSeconds', description='The interval at which you want to perform health checks. Unit: seconds.

You can specify up to 10 health check intervals.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='3'),
      healthCheckPath?: string(name='HealthCheckPath', description='The path to which health check requests are sent.

You can specify up to 10 health check paths.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='/healthcheck'),
      healthCheckPort?: long(name='HealthCheckPort', description='The port that is used for health checks. Valid values: **1** to **65535**.

You can specify up to 10 ports for health checks.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='20'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which health check requests are sent. Valid values:

*   **tcp**: TCP
*   **http**: HTTP
*   **https**: HTTPS

You can specify up to 10 health check protocols.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='tcp'),
      portOverrides?: [ 
        {
          endpointPort?: long(name='EndpointPort', description='The endpoint port that is mapped to the listener port.

You can specify up to five endpoint ports.

> 

*   You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.

*   Only HTTP intelligent routing listeners and HTTPS intelligent routing listeners support port mappings.', example='80'),
          listenerPort?: long(name='ListenerPort', description='The listener port that is mapped to the endpoint port.

You can specify up to five listener ports.

> 

*   You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.

*   Only HTTP intelligent routing listeners and HTTPS intelligent routing listeners support port mappings.
*   The listener port in a port mapping must be the port that is used by the current listener.', example='443'),
        }
      ](name='PortOverrides', description='The mappings between ports.'),
      thresholdCount?: long(name='ThresholdCount', description='The number of consecutive health check failures that must occur before a healthy endpoint group is considered unhealthy, or the number of consecutive health check successes that must occur before an unhealthy endpoint group is considered healthy. Valid values: **2** to **10**. Default value: **3**.

You can specify the number of consecutive health check successes or failures for at most 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='3'),
      trafficPercentage?: long(name='TrafficPercentage', description='The traffic distribution ratio. If an intelligent routing listener is associated with multiple endpoint groups, you can use this parameter to specify the ratio of traffic that you want to distribute to each endpoint group.

Valid values: **1** to **100**. Default value: **100**.

You can specify the traffic distribution ratios for up to 10 endpoint groups.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', example='100'),
    }
  ](name='EndpointGroupConfigurations', description='The endpoint group that is associated with the intelligent routing listener.

You can configure at most 10 endpoint groups for an intelligent routing listener.

> You can configure endpoint groups and endpoints for an intelligent routing listener only if the **Type** parameter is set to **Standard**.', position='Query'),
  idleTimeout?: int32(name='IdleTimeout', position='Query'),
  name?: string(name='Name', description='The name of the listener.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='Listener', position='Query'),
  portRanges: [ 
    {
      fromPort: int32(name='FromPort', description='The first port of the listener port range that you want to use to receive and forward requests to endpoints.

Valid values: **1** to **65499**. The value of **FromPort** must be smaller than or equal to the value of **ToPort**.

The maximum number of ports that can be configured varies based on the routing type and protocol of the listener. For more information, see [Listener overview](~~153216~~).

> You can configure only one listener port for an HTTP or HTTPS listener. In this case, the first port is the same as the last port.', example='20'),
      toPort: int32(name='ToPort', description='The last port of the listener port range that you want to use to receive and forward requests to endpoints.

Valid values: **1** to **65499**. The value of **FromPort** must be smaller than or equal to the value of **ToPort**.

The maximum number of ports that can be configured varies based on the routing type and protocol of the listener. For more information, see [Listener overview](~~153216~~).

> You can configure only one listener port for an HTTP or HTTPS listener. In this case, the first port is the same as the last port.', example='20'),
    }
  ](name='PortRanges', description='The listener ports. Valid values: **1** to **65499**. The maximum number of ports that can be configured depends on the routing type and protocol of the listener. For more information, see [Listener overview](~~153216~~).', position='Query'),
  protocol?: string(name='Protocol', description='The network transmission protocol that you want to use for the listener. Valid values:

*   **tcp**: TCP
*   **udp**: UDP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp', position='Query'),
  proxyProtocol?: boolean(name='ProxyProtocol', description='Specifies whether to preserve client IP addresses. Valid values:

*   **true**: enables the feature. After client IP addresses are preserved, you can view client IP addresses on the endpoints.
*   **false** (default): disables the feature.

> This parameter will be deprecated in the API operations that are used to configure listeners. We recommend that you set this parameter when you call API operations to configure endpoint groups. For more information about the **ProxyProtocol** parameter, see [CreateEndpointGroup](~~153259~~) and [UpdateEndpointGroup](~~153262~~).', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', position='Query'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy. Valid values:

*   **tls_cipher_policy\\_1\\_0**

    *   Supported Transport Layer Security (TLS) versions: TLS 1.0, TLS 1.1, and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA.

*   **tls_cipher_policy\\_1\\_1**

    *   Supported TLS versions: TLS 1.1 and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA.

*   **tls_cipher_policy\\_1\\_2**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA.

*   **tls_cipher_policy\\_1\\_2\\_strict**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict_with\\_1\\_3**

    *   Supported TLS versions: TLS 1.2 and TLS 1.3
    *   Supported cipher suites: TLS_AES\\_128\\_GCM_SHA256, TLS_AES\\_256\\_GCM_SHA384, TLS_CHACHA20\\_POLY1305\\_SHA256, TLS_AES\\_128\\_CCM_SHA256, TLS_AES\\_128\\_CCM\\_8\\_SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES128-SHA256, ECDHE-ECDSA-AES256-SHA384, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-ECDSA-AES128-SHA, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

> This parameter is available only when you create an HTTPS listener.', example='tls_cipher_policy_1_0', position='Query'),
  type?: string(name='Type', description='The routing type of the listener. Valid values:

*   **Standard** (default): intelligent routing
*   **CustomRouting**: custom routing

> 

*   Custom routing listeners are in invitational preview. To use custom routing listeners, contact your account manager.

*   You can create only listeners of the same routing type for a standard GA instance. You cannot change the routing types of listeners. For more information, see [Listener overview](~~153216~~).', example='Standard', position='Query'),
  xForwardedForConfig?: {
    xForwardedForGaApEnabled?: boolean(name='XForwardedForGaApEnabled', description='Specifies whether to use the `GA-AP` header to retrieve the information about acceleration regions. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xForwardedForGaIdEnabled?: boolean(name='XForwardedForGaIdEnabled', description='Specifies whether to use the `GA-ID` header to retrieve the ID of the GA instance. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xForwardedForPortEnabled?: boolean(name='XForwardedForPortEnabled', description='Specifies whether to use the `GA-X-Forward-Port` header to retrieve the listener ports of the GA instance. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Specifies whether to use the `GA-X-Forward-Proto` header to retrieve the listener protocol of the GA instance. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xRealIpEnabled?: boolean(name='XRealIpEnabled', description='Specifies whether to use the `X-Real-IP` header to retrieve client IP addresses. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
  }(name='XForwardedForConfig', description='The `XForward` headers.', position='Query'),
}

model CreateListenerResponseBody = {
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateListenerResponseBody(name='body'),
}

/**
  * A listener listens for connection requests and then distributes the requests to endpoints based on the forwarding rules that are defined by a specified scheduling algorithm. You can call this operation to create a listener for a standard GA instance.
  * Before you call this operation, take note of the following limits:
  * *   **CreateListener** is an asynchronous operation. After you send a request, the system returns a listener ID and runs the task in the background. You can call the [DescribeListener](~~153254~~) operation to query the status of a listener:
  *     *   If a listener is in the **init** state, the listener is being created. In this case, you can perform only query operations.
  *     *   If a listener is in the **active** state, the listener is created.
  * *   The **CreateListener** operation cannot be repeatedly called to create listeners for the same GA instance in a specific period of time.
  *
 */
async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateListener', 'POST', '/', 'json', false, 'json', request);
}

model CreateSpareIpsRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true:** performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (defalut): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  spareIps: [ string ](name='SpareIps', description='The secondary IP addresses to be created for the CNAME. If an acceleration area of the GA instance become unavailable, GA redirects the access traffic to the secondary IP addresses.

You can specify up to 2 secondary IP addresses. Separate IP addresses with commas (,).', position='Query'),
}

model CreateSpareIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model CreateSpareIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSpareIpsResponseBody(name='body'),
}

/**
  * *   **CreateSpareIps** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) operation to query the status of a GA instance.
  *     *   If the GA instance is in the **configuring** state, it indicates that secondary IP addresses are being created for the CNAME that is assigned to the GA instance. In this case, you can only perform query operations.
  *     *   If the GA instance is in the **active** state, it indicates that secondary IP addresses are created for the CNAME that is assigned to the GA instance.
  * *   The **CreateSpareIps** operation holds an exclusive lock on the GA instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function createSpareIps(request: CreateSpareIpsRequest): CreateSpareIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSpareIps', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance that you want to delete.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where your GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteAcceleratorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DeleteAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAcceleratorResponseBody(name='body'),
}

/**
  * *   Subscription GA instances cannot be deleted.
  * *   GA instances that have bandwidth plans associated cannot be deleted. To delete such GA instances, disassociate the bandwidth plans first. For information about how to disassociate a bandwidth plan from a GA instance, see [BandwidthPackageRemoveAccelerator](~~153240~~).
  * *   **DeleteAccelerator** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can use the [DescribeAccelerator](~~153235~~) operation to query the state of a GA instance.
  *     *   If the GA instance is in the **deleting** state, the GA instance is being deleted. In this case, you can perform only query operations.
  *     *   If the GA instance cannot be queried, it indicates that the GA instance is deleted.
  *
 */
async function deleteAccelerator(request: DeleteAcceleratorRequest): DeleteAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAclRequest {
  aclId: string(name='AclId', description='The ID of the network ACL.', example='nacl-hp34s2h0xx1ht4nwo****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Default value: false. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteAclResponseBody = {
  aclId?: string(name='AclId', description='The ID of the network ACL.', example='nacl-hp34s2h0xx1ht4nwo****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DeleteAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAclResponseBody(name='body'),
}

/**
  * **DeleteAcl** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [GetAcl](~~258292~~) operation to query the state of a network ACL.
  * *   If the network ACL is in the **deleting** state, it indicates that the network ACL is being deleted. In this case, you can perform only query operations.
  * *   If the network ACL cannot be queried, it indicates that the network ACL is deleted.
  *
 */
async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId?: string(name='RegionId', description='The region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskId: string(name='TaskId', description='The ID of the origin probing task that you want to delete.', example='sm-bp1fpdjfju9k8yr1y****', position='Query'),
}

model DeleteApplicationMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationMonitorResponseBody(name='body'),
}

/**
  * *   **DeleteApplicationMonitor** is an asynchronous operation. After you call this operation, the system returns a request ID, but the operation is still being performed in the system background. You can call the [ListApplicationMonitor](~~408462~~) operation to query the state of an origin probing task.
  *     *   If the origin probing task is in the **deleting** state, it indicates that the task is being deleted. In this case, you can perform only query operations.
  *     <!---->
  *     *   If the origin probing task cannot be queried, it indicates that the task is deleted.
  * *   The **DeleteApplicationMonitor** operation cannot be called repeatedly for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function deleteApplicationMonitor(request: DeleteApplicationMonitorRequest): DeleteApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The bandwidth plan ID.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteBandwidthPackageResponseBody = {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The bandwidth plan ID.', example='gbwp-bp1sgzldyj6b4q7cx****'),
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DeleteBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBandwidthPackageResponseBody(name='body'),
}

/**
  * *   By default, subscription bandwidth plans cannot be deleted. If you want to delete subscription bandwidth plans, contact your account manager.
  * *   Bandwidth plans that are associated with Global Accelerator (GA) instances cannot be deleted. Before you can delete a bandwidth plan that is associated with a GA instance, you must disassociate the bandwidth plan from the GA instance. For information about how to disassociate a bandwidth plan from a GA instance, see [BandwidthPackageRemoveAccelerator](~~153240~~).
  * *   **DeleteBandwidthPackage** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeBandwidthPackage](~~153241~~) operation to query the status of the task.
  *     *   If the bandwidth plan is in the **deleting** state, it indicates that the bandwidth plan is being deleted. In this case, you can perform only query operations.
  *     *   If the bandwidth plan cannot be found, it indicates that the bandwidth plan is deleted.
  * *   The **DeleteBandwidthPackage** operation cannot be called repeatedly for the same bandwidth plan within a specific period of time.
  *
 */
async function deleteBandwidthPackage(request: DeleteBandwidthPackageRequest): DeleteBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBasicAccelerateIpRequest {
  accelerateIpId: string(name='AccelerateIpId', description='The ID of the accelerated IP address that you want to delete.', example='gaip-bp1****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteBasicAccelerateIpResponseBody = {
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address that is deleted.', example='gaip-bp1****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteBasicAccelerateIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBasicAccelerateIpResponseBody(name='body'),
}

/**
  * *   **DeleteBasicAccelerator** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [GetBasicAccelerateIp](~~466794~~) API operation to query the status of an accelerated IP address:
  *     *   If the accelerated IP address is in the **deleting** state, the accelerated IP address is being deleted. In this case, you can perform only query operations.
  *     *   If the system fails to return information about the accelerated IP address, the accelerated IP address is deleted.
  * *   The **DeleteBasicAccelerateIp** API operation cannot be repeatedly called for the same basic GA instance within a period of time.
  *
 */
async function deleteBasicAccelerateIp(request: DeleteBasicAccelerateIpRequest): DeleteBasicAccelerateIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBasicAccelerateIp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBasicAccelerateIpEndpointRelationRequest {
  accelerateIpId: string(name='AccelerateIpId', description='The ID of the accelerated IP address of the basic GA instance.', example='gaip-bp1****', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint that is associated with the basic GA instance.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteBasicAccelerateIpEndpointRelationResponseBody = {
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address of the basic GA instance.', example='gaip-bp1****'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that is associated with the basic GA instance.', example='ep-bp14sz7ftcwwjgrdm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The status of the mapping between the accelerated IP address and endpoint.

>  This parameter is not in use and empty.', example='null'),
}

model DeleteBasicAccelerateIpEndpointRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBasicAccelerateIpEndpointRelationResponseBody(name='body'),
}

/**
  * *   **DeleteBasicAccelerateIpEndpointRelation** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the following operations to check whether an accelerated IP address is disassociated from an endpoint:
  *     *   You can call the [GetBasicAccelerateIp](~~466794~~) and [ListBasicEndpoints](~~466831~~) operations to query the status of an accelerated IP address and an endpoint. If the accelerated IP address and the endpoint are in the **unbinding** state, the accelerated IP address is being disassociated from the endpoint. In this case, you can query the IP address and endpoint but cannot perform other operations.
  *     *   If the association status between the accelerated IP address and the endpoint cannot be queried by calling the [ListBasicAccelerateIpEndpointRelations](~~466803~~) operation, the accelerated IP address is disassociated from the endpoint.
  * *   The **DeleteBasicAccelerateIpEndpointRelation** API operation cannot be repeatedly called for the same basic GA instance within a period of time.
  *
 */
async function deleteBasicAccelerateIpEndpointRelation(request: DeleteBasicAccelerateIpEndpointRelationRequest): DeleteBasicAccelerateIpEndpointRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBasicAccelerateIpEndpointRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBasicAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the basic GA instance belongs. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteBasicAcceleratorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBasicAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBasicAcceleratorResponseBody(name='body'),
}

/**
  * **DeleteBasicAccelerator** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [GetBasicAccelerator](~~353188~~) operation to query the state of a basic GA instance.
  * *   If the basic GA instance is in the **deleting** state, it indicates that the instance is being deleted. In this case, you can perform only query operations.
  * *   If the information of the basic GA instance is not displayed in the response, it indicates that the instance is deleted.
  *
 */
async function deleteBasicAccelerator(request: DeleteBasicAcceleratorRequest): DeleteBasicAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBasicAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBasicEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint to be deleted belongs.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint that you want to delete.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteBasicEndpointResponseBody = {
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteBasicEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBasicEndpointResponseBody(name='body'),
}

/**
  * *   **DeleteBasicEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [ListBasicEndpoints](~~466831~~) operation to query the status of endpoints.
  *     *   If the endpoint is in the **deleting** state, it indicates that the endpoint is being deleted. In this case, you can perform only query operations.
  *     *   If the endpoint cannot be found, it indicates that the endpoint is deleted.
  * *   The **DeleteBasicEndpoint** API operation cannot be repeatedly called for the same basic GA instance within a period of time.
  *
 */
async function deleteBasicEndpoint(request: DeleteBasicEndpointRequest): DeleteBasicEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBasicEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBasicEndpointGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group that is associated with the basic GA instance.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
}

model DeleteBasicEndpointGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteBasicEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBasicEndpointGroupResponseBody(name='body'),
}

/**
  * *   **DeleteBasicEndpointGroup** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [GetBasicEndpointGroup](~~362984~~) operation to query the state of an endpoint group.
  *     *   If the endpoint group is in the **deleting** state, it indicates that the endpoint group is being deleted. In this case, you can perform only query operations.
  *     *   If the endpoint group cannot be queried, it indicates that the endpoint group is deleted.
  * *   The **DeleteBasicEndpointGroup** operation cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function deleteBasicEndpointGroup(request: DeleteBasicEndpointGroupRequest): DeleteBasicEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBasicEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBasicIpSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region of the basic GA instance.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteBasicIpSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6D2BFF54-6AF2-4679-88C4-2F2E187F16CB'),
}

model DeleteBasicIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBasicIpSetResponseBody(name='body'),
}

/**
  * *   \\*\\*DeleteBasicIpSet\\*\\* is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [GetBasicIpSet](~~362987~~) operation to query the status of an acceleration region:
  *     *   If the acceleration region is in the **deleting** state, it indicates that the acceleration region is being deleted. In this case, you can perform only query operations.
  *     *   If the information of the acceleration region is not displayed in the response, it indicates that the acceleration region is deleted.
  * *   The \\*\\*DeleteBasicIpSet\\*\\* operation cannot be called repeatedly for the same basic GA instance within a specific period of time.
  *
 */
async function deleteBasicIpSet(request: DeleteBasicIpSetRequest): DeleteBasicIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBasicIpSet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomRoutingEndpointGroupDestinationsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationIds?: [ string ](name='DestinationIds', description='The IDs of the endpoint group mappings.', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The endpoint group ID.

**

****', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteCustomRoutingEndpointGroupDestinationsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCustomRoutingEndpointGroupDestinationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomRoutingEndpointGroupDestinationsResponseBody(name='body'),
}

/**
  * *   **DeleteCustomRoutingEndpointGroupDestinations** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) to query the status of the task.
  *     *   If the endpoint group is in the **updating** state, it indicates that mappings are being deleted from the endpoint group. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state and no information about the mappings that you want to delete is found in the response when you call the [DescribeCustomRoutingEndpointGroupDestinations](~~449378~~) operation, it indicates the mappings are deleted from the endpoint group.
  * *   You cannot call the **DeleteCustomRoutingEndpointGroupDestinations** operation again on the same Global Accelerator (GA) instance before the previous request is completed.
  *
 */
async function deleteCustomRoutingEndpointGroupDestinations(request: DeleteCustomRoutingEndpointGroupDestinationsRequest): DeleteCustomRoutingEndpointGroupDestinationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomRoutingEndpointGroupDestinations', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomRoutingEndpointGroupsRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance that you want to query.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true:** performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false:** performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointGroupIds: [ string ](name='EndpointGroupIds', description='The IDs of the endpoint groups that you want to delete.

You can specify up to 10 endpoint group IDs.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteCustomRoutingEndpointGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCustomRoutingEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomRoutingEndpointGroupsResponseBody(name='body'),
}

/**
  * *   **DeleteCustomRoutingEndpointGroups** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) operation to query the state of the endpoint groups associated with a custom routing listener that you attempt to delete.
  *     *   If the endpoint groups are in the **deleting** state, the endpoint groups are being deleted. In this case, you can perform only query operations.
  *     *   If the endpoint groups cannot be queried, the endpoint groups are deleted.
  * *   You cannot use the **DeleteCustomRoutingEndpointGroups** operation on the same Global Accelerator (GA) instance before the previous operation is complete.
  *
 */
async function deleteCustomRoutingEndpointGroups(request: DeleteCustomRoutingEndpointGroupsRequest): DeleteCustomRoutingEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomRoutingEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomRoutingEndpointTrafficPoliciesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint for which you want to delete traffic destinations.

>  This parameter is required.', example='ep-2zewuzypq5e6r3pfh****', position='Query'),
  policyIds: [ string ](name='PolicyIds', description='The IDs of the traffic destinations.

You can specify the IDs of up to 9,000 traffic destinations.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteCustomRoutingEndpointTrafficPoliciesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCustomRoutingEndpointTrafficPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomRoutingEndpointTrafficPoliciesResponseBody(name='body'),
}

/**
  * *   **DeleteCustomRoutingEndpointTrafficPolicies** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) operation to query the status of an endpoint group to check whether the traffic destinations are deleted.
  *     *   If the endpoint group is in the **updating** state, the traffic destinations are being deleted. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state and the traffic destinations that you want to delete cannot be queried by calling the [DescribeCustomRoutingEndPointTrafficPolicy](~~449392~~) operation, the traffic destinations are deleted.
  * *   The **DeleteCustomRoutingEndpointTrafficPolicies** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function deleteCustomRoutingEndpointTrafficPolicies(request: DeleteCustomRoutingEndpointTrafficPoliciesRequest): DeleteCustomRoutingEndpointTrafficPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomRoutingEndpointTrafficPolicies', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomRoutingEndpointsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint that you want to delete belongs.', example='epg-bp1bpn0kn908w4nb****', position='Query'),
  endpointIds: [ string ](name='EndpointIds', description='The IDs of endpoints to be deleted.

If you do not set this parameter, all the endpoints in the specified endpoint group are deleted.

You can specify at most 10 endpoint IDs.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteCustomRoutingEndpointsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCustomRoutingEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomRoutingEndpointsResponseBody(name='body'),
}

/**
  * *   **DeleteCustomRoutingEndpoints** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) to query the status of the task.
  *     *   If an endpoint group is in the **updating** state, the endpoint is being deleted. In this case, you can perform only query operations.
  *     *   If an endpoint group is in the **active** state and the endpoint cannot be found after you call the [DescribeCustomRoutingEndpoint](~~449386~~) operation, the endpoint is deleted.
  * *   You cannot call the **DeleteCustomRoutingEndpoints** operation again on the same Global Accelerator (GA) instance before the previous task is completed.
  *
 */
async function deleteCustomRoutingEndpoints(request: DeleteCustomRoutingEndpointsRequest): DeleteCustomRoutingEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomRoutingEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainAcceleratorRelationRequest {
  acceleratorIds?: [ string ](name='AcceleratorIds', description='The ID of the GA instance to be disassociated. You can specify up to 50 IDs.

If you leave this parameter empty, all GA instances associated with the specified domain name are disassociated.', position='Query'),
  domain: string(name='Domain', description='The accelerated domain name to be disassociated.', example='www.example.com', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteDomainAcceleratorRelationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteDomainAcceleratorRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainAcceleratorRelationResponseBody(name='body'),
}

/**
  * You cannot call the **DeleteDomainAcceleratorRelation** operation again by using the same Alibaba Cloud account before the previous operation is complete.
  *
 */
async function deleteDomainAcceleratorRelation(request: DeleteDomainAcceleratorRelationRequest): DeleteDomainAcceleratorRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainAcceleratorRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEndpointGroupRequest {
  acceleratorId?: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group that you want to delete.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
}

model DeleteEndpointGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DeleteEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEndpointGroupResponseBody(name='body'),
}

/**
  * *   **DeleteEndpointGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the status of the endpoint group.
  *     *   If the endpoint group is in the **deleting** state, it indicates that the endpoint group is being deleted. In this case, you can perform only query operations.
  *     *   If the endpoint group cannot be queried, it indicates that the endpoint group is deleted.
  * *   The **DeleteEndpointGroup** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function deleteEndpointGroup(request: DeleteEndpointGroupRequest): DeleteEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEndpointGroupsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  endpointGroupIds: [ string ](name='EndpointGroupIds', description='The IDs of the endpoint groups.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteEndpointGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DeleteEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEndpointGroupsResponseBody(name='body'),
}

/**
  * *   **DeleteEndpointGroups** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the status of the task.
  *     *   If an endpoint group is in the **deleting** state, the endpoint group is being deleted. In this case, you can perform only query operations.
  *     *   If an endpoint group cannot be queried, the endpoint group is deleted.
  * *   The **DeleteEndpointGroups** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function deleteEndpointGroups(request: DeleteEndpointGroupsRequest): DeleteEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model DeleteForwardingRulesRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp17frjjh0udz4q****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  forwardingRuleIds: [ string ](name='ForwardingRuleIds', description='The forwarding rules.', example='frule-bp19a3t3yzr21q3****', position='Query'),
  listenerId: string(name='ListenerId', description='The listener ID.', example='lsr-bp1s0vzbi5bxlx5****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteForwardingRulesResponseBody = {
  forwardingRules?: [ 
    {
      forwardingRuleId?: string(name='ForwardingRuleId', description='The forwarding rule ID.', example='frule-bp19a3t3yzr21q3****'),
    }
  ](name='ForwardingRules', description='The forwarding rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CFC67ED9-4AB1-431F-B6E3-A752B7B8CCD4'),
}

model DeleteForwardingRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteForwardingRulesResponseBody(name='body'),
}

/**
  * *   **DeleteForwardingRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListForwardingRules](~~205817~~) operation to query the status of the task.
  *     *   If a forwarding rule is in the **deleting** state, the forwarding rule is being deleted. In this case, you can perform only query operations.
  *     *   If a forwarding rule cannot be queried, the forwarding rule is deleted.
  * *   The **DeleteForwardingRules** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function deleteForwardingRules(request: DeleteForwardingRulesRequest): DeleteForwardingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteForwardingRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpSetRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance for which you want to delete an acceleration region.', example='ga-bp1yeeq8yfoyszmqy****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='DD61839A-5CC5-404B-8C6E-56066F0C432D', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region that you want to delete.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteIpSetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD61839A-5CC5-404B-8C6E-56066F0C432D'),
}

model DeleteIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpSetResponseBody(name='body'),
}

/**
  * *   **DeleteIpSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeIpSet](~~153246~~) operation to query the status of an acceleration region.
  *     *   If the acceleration region is in the **deleting** state, it indicates that the acceleration region is being deleted. In this case, you can perform only query operations.
  *     *   If the acceleration region cannot be queried, it indicates that the acceleration region is deleted.
  * *   The **DeleteIpSet** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function deleteIpSet(request: DeleteIpSetRequest): DeleteIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpSet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpSetsRequest {
  ipSetIds: [ string ](name='IpSetIds', description='The ID of the acceleration region that you want to delete.', example='ips-bp11c9mpphtb1xkds****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DeleteIpSetsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B49B60F6-F6C8-49E5-B06B-E33E3A469A92'),
}

model DeleteIpSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpSetsResponseBody(name='body'),
}

/**
  * *   **DeleteIpSets** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeIpSet](~~153246~~) operation to query the state of an acceleration region.
  *     *   If the acceleration region is in the **deleting** state, the acceleration region is being deleted. In this case, you can perform only query operations.
  *     *   If the acceleration region cannot be queried, the acceleration region is deleted.
  * *   The **DeleteIpSets** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function deleteIpSets(request: DeleteIpSetsRequest): DeleteIpSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpSets', 'POST', '/', 'json', false, 'json', request);
}

model DeleteListenerRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance for which you want to delete a listener.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener that you want to delete.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
}

model DeleteListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DeleteListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteListenerResponseBody(name='body'),
}

/**
  * *   **DeleteListener** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeListener](~~153254~~) operation to query the state of the listener.
  *     *   If the listener is in the **deleting** state, it indicates that the listener is being deleted. In this case, you can continue to perform query operations on the listener.
  *     *   If the listener cannot be queried, it indicates that the listener is deleted.
  * *   The **DeleteListener** operation cannot be repeatedly called to delete listeners for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteListener', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSpareIpsRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true:** performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (defalut): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  spareIps: [ string ](name='SpareIps', description='The secondary IP addresses to be deleted for the CNAME. If an acceleration area of the GA instance becomes unavailable, GA redirects the access traffic to the secondary IP addresses.

Separate the IP addresses with commas (,). You can specify up to two secondary IP addresses.', position='Query'),
}

model DeleteSpareIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DeleteSpareIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpareIpsResponseBody(name='body'),
}

/**
  * *   **DeleteSpareIps** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) operation to query the status of a GA instance.
  *     *   If the GA instance is in the **configuring** state, it indicates that the secondary IP addresses for the CNAME are being deleted. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state and the secondary IP addresses for the CNAME cannot be queried by calling the [ListSpareIps](~~262121~~) operation, it indicates that the IP addresses are deleted.
  * *   The **DeleteSpareIps** operation holds an exclusive lock on the GA instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function deleteSpareIps(request: DeleteSpareIpsRequest): DeleteSpareIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpareIps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance that you want to query.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', description='The region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeAcceleratorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
  bandwidthBillingType?: string(name='BandwidthBillingType', description='The bandwidth metering method. Valid values:

*   **BandwidthPackage:** billed based on bandwidth plans.
*   **CDT**: billed based on data transfer.', example='CDT'),
  basicBandwidthPackage?: {
    bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the basic bandwidth plan. Unit: Mbit/s.', example='2'),
    bandwidthType?: string(name='BandwidthType', description='The type of the bandwidth that is provided by the basic bandwidth plan. Valid values:

*   **Basic**: basic
*   **Enhanced**: enhanced
*   **Advanced**: premium', example='Basic'),
    instanceId?: string(name='InstanceId', description='The ID of the basic bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
  }(name='BasicBandwidthPackage', description='The details about the basic bandwidth plan that is associated with the GA instance.'),
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance with which the GA instance is associated.', example='cen-hjkduu767hc****'),
  createTime?: long(name='CreateTime', description='The timestamp that indicates when the GA instance is created.', example='1650643200'),
  crossBorderMode?: string(name='CrossBorderMode', description='The type of cross-border acceleration. This parameter is returned for GA instances whose bandwidth metering method is pay-by-data-transfer (CDT).

Only **bpgPro** may be returned, which indicates BGP (Multi-ISP) Pro lines.', example='bpgPro'),
  crossBorderStatus?: boolean(name='CrossBorderStatus', description='Indicates whether cross-border acceleration is enabled.
- **true**: yes
- **false**: no', example='false'),
  crossDomainBandwidthPackage?: {
    bandwidth?: int32(name='Bandwidth', description='The bandwidth that is provided by the cross-border acceleration bandwidth plan. Unit: Mbit/s.', example='2'),
    instanceId?: string(name='InstanceId', description='The ID of the cross-border acceleration bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
  }(name='CrossDomainBandwidthPackage', description='The details about the cross-border acceleration bandwidth plan that is associated with the GA instance.

This array is returned only for GA instances that are created on the international site (alibabacloud.com).'),
  crossPrivateState?: string(name='CrossPrivateState', description='Indicates whether cross-border acceleration is enabled.

*   **true**: yes
*   **false**: no', example='false'),
  ddosId?: string(name='DdosId', description='The ID of the Anti-DDoS Pro/Premium instance that is associated with the GA instance.', example='ddoscoo-cn-zz11vq7j****'),
  description?: string(name='Description', description='The description of the GA instance.', example='Accelerator'),
  dnsName?: string(name='DnsName', description='The canonical name (CNAME) that is assigned to the GA instance.', example='ga-bp15u1i2hmtbk8c3i****.aliyunga0019.com'),
  expiredTime?: long(name='ExpiredTime', description='The timestamp that indicates when the GA instance expires.', example='1653235200'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the GA instance.', example='PREPAY'),
  ipSetConfig?: {
    accessMode?: string(name='AccessMode', description='The access mode of the acceleration area. Valid values:

*   **UserDefine**: custom nearby access mode. You can select acceleration areas and regions based on your business requirements. GA allocates a separate elastic IP address (EIP) to each acceleration region.
*   **Anycast**: automatic nearby access mode. You do not need to specify an acceleration area. GA allocates an Anycast EIP to multiple regions across the globe. Users can connect to the nearest access point of the Alibaba Cloud global transmission network by sending requests to the Anycast EIP.', example='UserDefine'),
  }(name='IpSetConfig', description='The configurations of the acceleration area.'),
  name?: string(name='Name', description='The name of the GA instance.', example='Accelerator'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmw2vwdbujqbq'),
  secondDnsName?: string(name='SecondDnsName', description='The CNAME that is used to integrate the GA instance with the Anti-DDoS service.', example='ga-bp1f609c76zg6zuna****-1.aliyunga0047.com'),
  serviceId?: string(name='ServiceId', description='托管实例所属的服务方ID。
> 仅在**ServiceManaged**参数为**True**时有效。', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='是否为托管实例。取值：

- **true**：是托管实例。

- **false**：不是托管实例。', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='托管策略动作名称，取值：
- **Create**：创建实例。
- **Update**：更新当前实例。
- **Delete**：删除当前实例。
- **Associate**：引用/被引用当前实例。
- **UserUnmanaged**：用户解托管实例。
- **CreateChild**：在当前实例下创建子资源。', example='Update'),
      childType?: string(name='ChildType', description='子资源类型，取值：

- **Listener**：监听资源。

- **IpSet**：加速地域资源。

- **EndpointGroup**：终端节点组资源。

- **ForwardingRule**：转发策略资源。

- **Endpoint**：终端节点资源。

- **EndpointGroupDestination**：自定义路由监听下的终端节点组协议映射资源。

- **EndpointPolicy**：自定义路由监听下的终端节点通行策略资源。

> 仅在**Action**参数为**CreateChild**时有效。', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='托管策略动作是否被托管，取值：

- **true**：托管策略动作被托管，用户无权在托管实例下执行Action指定的操作。

- **false**：托管策略动作未被托管，用户可在托管实例下执行Action指定的操作。', example='false'),
    }
  ](name='ServiceManagedInfos', description='用户在此托管实例下可执行的动作策略列表。
> 仅在**ServiceManaged**参数为**True**时有效。
> - 当实例处于托管状态时，用户对实例的操作会受到限制，某些操作行为会被禁止。'),
  spec?: string(name='Spec', description='The specification of the GA instance. Valid values:

*   **1**: Small Ⅰ
*   **2**: Small Ⅱ
*   **3**: Small Ⅲ
*   **5**: Medium Ⅰ
*   **8**: Medium Ⅱ
*   **10**: Medium Ⅲ
*   **20**: Large Ⅰ
*   **30**: Large Ⅱ
*   **40**: Large Ⅲ
*   **50**: Large Ⅳ
*   **60**: Large Ⅴ
*   **70**: Large Ⅵ
*   **80**: Large VⅡ
*   **90**: Large VⅢ
*   **100**: Super Large Ⅰ
*   **200**: Super Large Ⅱ

>  The Large Ⅲ specification and higher specifications are available only to users that are added to the whitelist. To use these specifications, contact your Alibaba Cloud account manager.

Different specifications provide different capabilities. For more information, see [Instance specifications](~~153127~~).', example='1'),
  state?: string(name='State', description='The status of the GA instance. Valid values:

*   **init**: The GA instance is being initialized.
*   **active**: The GA instance is available.
*   **configuring**: The GA instance is being configured.
*   **binding**: The GA instance is being associated.
*   **unbinding**: The GA instance is being disassociated.
*   **deleting**: The GA instance is being deleted.
*   **finacialLocked**: The GA instance is locked due to overdue payments.', example='active'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N that is added to the GA instance.', example='tag-key'),
      value?: string(name='Value', description='The value of tag N that is added to the GA instance.', example='tag-value'),
    }
  ](name='Tags', description='The tags of the GA instance.'),
  upgradableStatus?: string(name='UpgradableStatus', description='Indicates whether the GA instance can be upgraded. Valid values:

*   **notUpgradable:** The GA instance does not need to be upgraded.
*   **upgradable:** The GA instance can be upgraded to the latest version.
*   **upgradeFailed:** The GA instance failed to be upgraded.', example='notUpgradable'),
}

model DescribeAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAcceleratorResponseBody(name='body'),
}

async function describeAccelerator(request: DescribeAcceleratorRequest): DescribeAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAcceleratorAutoRenewAttributeRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeAcceleratorAutoRenewAttributeResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4qz****'),
  autoRenew?: boolean(name='AutoRenew', description='Indicates whether auto-renewal is enabled. Valid values:

*   **true**: enabled
*   **false** (default): disabled', example='false'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal duration. Unit: months.

This parameter is returned only if **AutoRenew** is set to **true**.', example='1'),
  renewalStatus?: string(name='RenewalStatus', description='Indicates how the GA instance is renewed. Valid values:

*   **AutoRenewal**: The GA instance is automatically renewed.
*   **Normal**: You must manually renew the GA instance.
*   **NotRenewal**: The GA instance is not renewed after it expires. The system sends only a non-renewal reminder three days before the expiration date. The system no longer sends notifications to remind you to renew the GA instance.', example='Normal'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model DescribeAcceleratorAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAcceleratorAutoRenewAttributeResponseBody(name='body'),
}

async function describeAcceleratorAutoRenewAttribute(request: DescribeAcceleratorAutoRenewAttributeRequest): DescribeAcceleratorAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAcceleratorAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAcceleratorServiceStatusRequest {
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model DescribeAcceleratorServiceStatusResponseBody = {
  code?: string(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  status?: string(name='Status', description='The status of the GA instance.

Valid values:

*   Released

    <!-- -->

    :

    <!-- -->

    The instance was released due to overdue payments

    <!-- -->

    .

*   Expired

    <!-- -->

    :

    <!-- -->

    The instance expired due to overdue payments

    <!-- -->

    .

*   NotOpened

    <!-- -->

    :

    <!-- -->

    The instance is not activated

    <!-- -->

    .

*   Normal

    <!-- -->

    :

    <!-- -->

    The instance is activated

    <!-- -->

    .', example='Normal'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values: true false', example='True'),
}

model DescribeAcceleratorServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAcceleratorServiceStatusResponseBody(name='body'),
}

async function describeAcceleratorServiceStatus(request: DescribeAcceleratorServiceStatusRequest): DescribeAcceleratorServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAcceleratorServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApplicationMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskId: string(name='TaskId', description='The ID of the origin probing task.', example='sm-bp1fpdjfju9k8yr1y****', position='Query'),
}

model DescribeApplicationMonitorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance on which the origin probing task ran.', example='ga-bp1odcab8tmno0hdq****'),
  address?: string(name='Address', description='The URL or IP address that was probed.', example='https://www.aliyun.com'),
  detectEnable?: boolean(name='DetectEnable', description='Indicates whether the automatic diagnostics feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  detectThreshold?: int32(name='DetectThreshold', description='The threshold that is used to trigger automatic diagnostics.

If the availability of the origin server drops below the specified threshold, the automatic diagnostics feature is triggered.', example='0'),
  detectTimes?: int32(name='DetectTimes', description='The number of times that are required to reach the threshold before the automatic diagnostics feature is triggered.', example='1'),
  ispCityList?: [ 
    {
      city?: string(name='City', description='The ID of the city where the probe point of the ISP is deployed.', example='375'),
      cityName?: string(name='CityName', description='The name of the city where the probe point of the ISP is deployed.', example='Singapore'),
      isp?: string(name='Isp', description='The probe point ID of the ISP.', example='465'),
      ispName?: string(name='IspName', description='The probe point name of the ISP.', example='Alibaba'),
    }
  ](name='IspCityList', description='The probe points of the Internet service provider (ISP).'),
  listenerId?: string(name='ListenerId', description='The ID of the listener on which the origin probing task ran.', example='lsr-bp1bpn0kn908w4nbw****'),
  optionsJson?: string(name='OptionsJson', description='The extended options of the listener protocol that is used by the origin probing task. The options vary based on the listener protocol.', example='{ "http_method": "get","header": "key:asd","acceptable_response_code": "500","cert_verify": true }'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  silenceTime?: int32(name='SilenceTime', description='The silence period of the automatic diagnostics feature. This parameter indicates the interval at which the automatic diagnostics feature is triggered. If the availability rate does not return to normal after GA triggers automatic diagnostics, GA must wait until the silence period ends before GA can trigger another automatic diagnostic.

If the number of consecutive times that the availability rate drops below the automatic diagnostics threshold reaches the value of **DetectTimes**, the automatic diagnostics feature is triggered. The automatic diagnostics feature is not triggered again within the silence period regardless of whether the availability rate remains below the threshold. If the availability rate does not return to normal after the silence period ends, the automatic diagnostics feature is triggered again.

Unit: seconds.', example='300'),
  state?: string(name='State', description='The state of the application monitor task. Valid values:

- **init**

- **active**

- **updating**

- **inactive**

- **deleting**', example='active'),
  taskId?: string(name='TaskId', description='The ID of the origin probing task.', example='sm-bp1fpdjfju9k8yr1y****'),
  taskName?: string(name='TaskName', description='The name of the origin probing task.', example='task1'),
}

model DescribeApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApplicationMonitorResponseBody(name='body'),
}

async function describeApplicationMonitor(request: DescribeApplicationMonitorRequest): DescribeApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the bandwidth plan that you want to query.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeBandwidthPackageResponseBody = {
  accelerators?: [ string ](name='Accelerators', description='The ID of the GA instance that is associated with the bandwidth plan.'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the bandwidth plan. Unit: Mbit/s.', example='2'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****'),
  bandwidthType?: string(name='BandwidthType', description='The type of the bandwidth. Valid values:

*   **Basic**: basic bandwidth
*   **Enhanced**: enhanced bandwidth
*   **Advanced**: premium bandwidth', example='Basic'),
  billingType?: string(name='BillingType', description='The metering method that is used when you use the pay-as-you-go billing method. Valid values:

*   **PayByTraffic**: pay-by-data-transfer
*   **PayBY95**: pay-by-95th-percentile', example='PayByTraffic'),
  cbnGeographicRegionIdA?: string(name='CbnGeographicRegionIdA', description='Area A specified in the cross-region acceleration bandwidth plan. Only **China-mainland** (the Chinese mainland) is returned.

This parameter is returned only if you call this operation on the International site (alibabacloud.com).', example='China-mainland'),
  cbnGeographicRegionIdB?: string(name='CbnGeographicRegionIdB', description='Area B specified in the cross-region acceleration bandwidth plan. Only **Global** (global) is returned.

This parameter is returned only if you call this operation on the International site (alibabacloud.com).', example='Global'),
  chargeType?: string(name='ChargeType', description='The billing method of the bandwidth plan. Only **PREPAY** is returned, which indicates the subscription billing method.', example='PREPAY'),
  createTime?: string(name='CreateTime', description='The timestamp that indicates when the bandwidth plan was created.', example='1578966918000'),
  description?: string(name='Description', description='The description of the bandwidth plan.', example='testDescription'),
  expiredTime?: string(name='ExpiredTime', description='The timestamp that indicates when the bandwidth plan expires.', example='1578966918000'),
  name?: string(name='Name', description='The name of the bandwidth plan.', example='testName'),
  ratio?: int32(name='Ratio', description='The percentage of the minimum bandwidth guaranteed if the pay-by-95th-percentile-bandwidth metering method is used. Valid values: **30** to **100**.', example='30'),
  regionId?: string(name='RegionId', description='The ID of the region where GA instance is deployed. **cn-hangzhou** is returned.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B6DBBB0-2D01-4C6A-A384-4129266E6B78'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfnvueepcihjiq'),
  state?: string(name='State', description='The state of the bandwidth plan. Valid values:

*   **init**: The bandwidth plan is being initialized.
*   **active**: The bandwidth plan is available.
*   **binded**: The bandwidth plan is associated with a GA instance.
*   **binding**: The bandwidth plan is being associated.
*   **unbinding**: The bandwidth plan is being disassociated.
*   **updating**: The bandwidth plan is being updated.
*   **finacialLocked**: The bandwidth plan is locked due to overdue payments.
*   **Locked**: The bandwidth plan is locked.', example='active'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key', example='tag-key'),
      value?: string(name='Value', description='The tag value.', example='tag-value'),
    }
  ](name='Tags', description='Tag objects.'),
  type?: string(name='Type', description='The type of the bandwidth plan. Valid values:

*   **Basic**: a basic bandwidth plan
*   **CrossDomain**: a cross-region acceleration bandwidth plan

If you call this operation on the Alibaba Cloud China Site (aliyun.com), only **Basic** is returned.', example='Basic'),
}

model DescribeBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBandwidthPackageResponseBody(name='body'),
}

async function describeBandwidthPackage(request: DescribeBandwidthPackageRequest): DescribeBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBandwidthPackageAutoRenewAttributeRequest {
  instanceId: string(name='InstanceId', description='The ID of the bandwidth plan.', example='gbwp-bp1iquvlp8khla5emb3ia', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model DescribeBandwidthPackageAutoRenewAttributeResponseBody = {
  autoRenew?: boolean(name='AutoRenew', description='Indicates whether auto-renewal is enabled. Valid values:

*   **true**: enabled
*   **false** (default): disabled', example='false'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal period. Unit: months. Valid values: **1** to **12**.

> : This parameter takes effect only if **AutoRenew** is set to **true**.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the bandwidth plan.', example='gbwp-bp1iquvlp8khla5emb3ia'),
  renewalStatus?: string(name='RenewalStatus', description='The auto-renewal status of the bandwidth plan. Valid values:

*   **AutoRenewal**: The bandwidth plan is automatically renewed.
*   **Normal**: You must manually renew the bandwidth plan.
*   **NotRenewal**: Choose this option if you do not want to renew the bandwidth plan after it expires. The system sends only a non-renewal reminder three days before the expiration date. The system no longer sends notifications to remind you to renew the bandwidth plan. You can change the value of this parameter from NotRenewal to Normal for a bandwidth plan, and then manually renew the bandwidth plan. You can also set the RenewalStatus parameter to **AutoRenewal**.

> The **RenewalStatus** parameter takes precedence over the **AutoRenew** parameter. If you do not set **RenewalStatus**, the **AutoRenew** parameter is used by default.', example='Normal'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B820E9F9-D459-5AE7-8F08-A368B53C1AC3'),
}

model DescribeBandwidthPackageAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBandwidthPackageAutoRenewAttributeResponseBody(name='body'),
}

async function describeBandwidthPackageAutoRenewAttribute(request: DescribeBandwidthPackageAutoRenewAttributeRequest): DescribeBandwidthPackageAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBandwidthPackageAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommodityRequest {
  commodityCode: string(name='CommodityCode', description='The commodity code.

Examples for the China site (aliyun.com):

*   **ga_gapluspre_public_cn**: GA instance.
*   **ga_plusbwppre_public_cn**: basic bandwidth plan.

Examples for the international site (alibabacloud.com):

*   **ga_pluspre_public_intl**: GA instance.
*   **ga_bwppreintl_public_intl**: basic bandwidth plan.', example='ga_gapluspre_public_cn', position='Query'),
  orderType: string(name='OrderType', description='The type of the order. Valid values:

*   **BUY**: purchase
*   **RENEW**: renewal
*   **UPGRADE**: upgrade', example='BUY', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeCommodityResponseBody = {
  commodityCode?: string(name='CommodityCode', description='The commodity code.

Examples for the China site (aliyun.com):

*   **ga_gapluspre_public_cn**: GA instance.
*   **ga_plusbwppre_public_cn**: basic bandwidth plan.

Examples for the international site (alibabacloud.com):

*   **ga_pluspre_public_intl**: GA instance.
*   **ga_bwppreintl_public_intl**: basic bandwidth plan.', example='ga_gapluspre_public_cn'),
  commodityName?: string(name='CommodityName', description='The name of the commodity.', example='Global Accelerator_Instance Type (Subscription)'),
  components?: [ 
    {
      componentCode?: string(name='ComponentCode', description='The code of the commodity module.

The returned information varies based on the commodity module.', example='Duration'),
      componentName?: string(name='ComponentName', description='The name of the commodity module.

The returned information varies based on the commodity module.', example='Duration'),
      properties?: [ 
        {
          code?: string(name='Code', description='The code of the attribute.

The returned information varies based on the commodity module.', example='ord_time'),
          name?: string(name='Name', description='The name of the attribute.

The returned information varies based on the commodity module.', example='Duration'),
          propertyValueList?: [ 
            {
              orderIndex?: long(name='OrderIndex', description='The sequence number of the attribute.

The returned information varies based on the commodity module.', example='1'),
              text?: string(name='Text', description='The content of the attribute.

The returned information varies based on the commodity module.', example='1 Month'),
              tips?: string(name='Tips', description='The message of the attribute.

The returned information varies based on the commodity module.', example='1 Month'),
              value?: string(name='Value', description='The value of the attribute.

The returned information varies based on the commodity module.', example='1:Month'),
            }
          ](name='PropertyValueList', description='The list of attribute values of the commodity module.

The returned information varies based on the commodity module.'),
        }
      ](name='Properties', description='The attributes of the commodity module.

The returned information varies based on the commodity module.'),
    }
  ](name='Components', description='The information about the commodity modules.

The returned information varies based on the commodity.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeCommodityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommodityResponseBody(name='body'),
}

async function describeCommodity(request: DescribeCommodityRequest): DescribeCommodityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommodity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommodityPriceRequest {
  orders: [ 
    {
      chargeType?: string(name='ChargeType', description='The billing method. Set the value to **PREPAY**, which specifies the subscription billing method.', example='PREPAY'),
      commodityCode?: string(name='CommodityCode', description='The commodity code.

Examples for the China site (aliyun.com):

*   **ga_gapluspre_public_cn**: GA instance.
*   **ga_plusbwppre_public_cn**: basic bandwidth plan.

Examples for the international site (alibabacloud.com):

*   **ga_pluspre_public_intl**: GA instance.
*   **ga_bwppreintl_public_intl**: basic bandwidth plan.', example='ga_gapluspre_public_cn'),
      components?: [ 
        {
          componentCode?: string(name='ComponentCode', description='The code of the commodity module.

The information varies based on the commodity module. Examples: **instance** (GA instance) and **ord_time** (subscription duration).', example='instance'),
          properties?: [ 
            {
              code?: string(name='Code', description='The code of the attribute.

The information varies based on the commodity module. Examples: **instance** (GA instance) and **ord_time** (subscription duration).', example='instance'),
              value?: string(name='Value', description='The value of the attribute.

The information varies based on the commodity module. Examples: **1:Month** (one-month subscription) and **instance_fee** (GA instance fee).', example='instance_fee'),
            }
          ](name='Properties', description='The attributes of the commodity module.

The information varies based on the commodity module.'),
        }
      ](name='Components', description='The information about the commodity module.

The information varies based on the commodity module.'),
      duration?: long(name='Duration', description='The subscription duration of the instance.

*   If the **PricingCycle** parameter is set to **Month**, the valid values of the Duration parameter are **1** to **9**.
*   If the **PricingCycle** parameter is set to **Year**, the valid values of the Duration parameter are **1** to **3**.', example='1'),
      orderType?: string(name='OrderType', description='The type of order. Valid values:

*   **BUY**: purchase order
*   **RENEW**: renewal order
*   **UPGRADE**: upgrade order', example='BUY'),
      pricingCycle?: string(name='PricingCycle', description='The billing cycle of the GA instance. Valid values:

*   **Month**: billed on a monthly basis.
*   **Year**: billed on an annual basis.', example='Month'),
      quantity?: long(name='Quantity', description='The number of instances that you want to purchase.', example='1'),
    }
  ](name='Orders', description='The commodity orders.', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', description='The coupon code.

>  This parameter is unavailable on the China site (aliyun.com).', example='50003298014****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeCommodityPriceResponseBody = {
  currency?: string(name='Currency', description='The currency unit.

*   China site: **CNY**.
*   International site: **USD**.', example='CNY'),
  discountPrice?: double(name='DiscountPrice', description='The discount.', example='419.8'),
  orderDetails?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The code of the commodity.', example='ga_gapluspre_public_cn'),
      commodityName?: string(name='CommodityName', description='The name of the commodity.', example='Global Accelerator_Instance Type (Subscription)'),
      discountPrice?: double(name='DiscountPrice', description='The discount.', example='419.8'),
      moduleDetails?: [ 
        {
          discountPrice?: double(name='DiscountPrice', description='The discount.', example='40000.0'),
          moduleCode?: string(name='ModuleCode', description='The code of the commodity module.', example='spec'),
          moduleName?: string(name='ModuleName', description='The name of the commodity module.', example='Specification'),
          originalPrice?: double(name='OriginalPrice', description='The original price.', example='200000.0'),
          tradePrice?: double(name='TradePrice', description='The discounted price.', example='160000.0'),
        }
      ](name='ModuleDetails', description='The information about the commodity module.'),
      originalPrice?: double(name='OriginalPrice', description='The original price.', example='2099'),
      promDetails?: [ 
        {
          finalPromFee?: double(name='FinalPromFee', description='The discounted price.

>  This parameter is unavailable on the China site (aliyun.com).', example='0.01'),
          optionCode?: string(name='OptionCode', description='The code of the discount option.

>  This parameter is unavailable on the China site (aliyun.com).', example='youhui_quan'),
          promType?: string(name='PromType', description='The sub-type of the discount.

>  This parameter is unavailable on the China site (aliyun.com).', example='deduct'),
          promotionId?: string(name='PromotionId', description='The ID of the discount item.

>  This parameter is unavailable on the China site (aliyun.com).', example='50003298014****'),
          promotionName?: string(name='PromotionName', description='The name of the discount item.

>  This parameter is unavailable on the China site (aliyun.com).', example='coupon'),
        }
      ](name='PromDetails', description='The details about the discount.

>  This parameter is unavailable on the China site (aliyun.com).'),
      quantity?: long(name='Quantity', description='The number of instances that are purchased.', example='1'),
      ruleIds?: [ long ](name='RuleIds', description='The IDs of the discount rules.'),
      tradePrice?: double(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='1679.2'),
    }
  ](name='OrderDetails', description='The details of the commodity module.'),
  originalPrice?: double(name='OriginalPrice', description='The original price.', example='2099'),
  promotions?: [ 
    {
      canPromFee?: double(name='CanPromFee', description='The discounted amount.

>  This parameter is unavailable on the China site (aliyun.com).', example='0'),
      optionCode?: string(name='OptionCode', description='The code of the commodity to which the coupon applies.

>  This parameter is unavailable on the China site (aliyun.com).', example='youhui_quan'),
      promotionName?: string(name='PromotionName', description='The name of the coupon.

>  This parameter is unavailable on the China site (aliyun.com).', example='youhuiquan_promotion_option_id_for_blank'),
      promotionOptionNo?: string(name='PromotionOptionNo', description='The coupon code.

> 

*   `youhuiquan_promotion_option_id_for_blank` indicates coupons that do not apply.

*   This parameter is unavailable on the China site (aliyun.com).', example='50003298014****'),
      selected?: boolean(name='Selected', description='Indicates whether an item is selected. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is unavailable on the China site (aliyun.com).', example='false'),
    }
  ](name='Promotions', description='The list of coupons.

>  This parameter is unavailable on the China site (aliyun.com).'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  ruleDetails?: [ 
    {
      ruleId?: string(name='RuleId', description='The ID of the discount rule.', example='102104100786****'),
      ruleName?: string(name='RuleName', description='The name of the discount rule.', example='GA New Customers Small II Specification Monthly Subscription - 20% Discount'),
    }
  ](name='RuleDetails', description='The details about the discount rules.'),
  tradePrice?: double(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='1679.2'),
}

model DescribeCommodityPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommodityPriceResponseBody(name='body'),
}

async function describeCommodityPrice(request: DescribeCommodityPriceRequest): DescribeCommodityPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommodityPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomRoutingEndPointTrafficPolicyRequest {
  endpointId?: string(name='EndpointId', description='The ID of the traffic policy to be queried.', example='ep-bp1d2utp8qqe2a44t****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='ply-bptest2****', position='Query'),
  regionId: string(name='RegionId', description='The operation that you want to perform. Set the value to **DescribeCustomRoutingEndPointTrafficPolicy**.', example='cn-hangzhou', position='Query'),
}

model DescribeCustomRoutingEndPointTrafficPolicyResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the request.', example='ga-bp1odcab8tmno0hdq****'),
  address?: string(name='Address', description='The ID of the traffic policy.', example='10.0.XX.XX'),
  endpoint?: string(name='Endpoint', description='The ID of the endpoint to which the traffic policy belongs.', example='vsw-test01'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the listener to which the endpoint belongs.', example='epg-bp1bpn0kn908w4nb****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint group to which the endpoint belongs.', example='ep-2zewuzypq5e6r3pfh****'),
  listenerId?: string(name='ListenerId', description='The ID of the GA instance to which the endpoint belongs.', example='lsr-bp1bpn0kn908w4nbw****'),
  policyId?: string(name='PolicyId', description='The name of the vSwitch to which the traffic policy belongs.', example='ply-bptest2****'),
  portRanges?: [ 
    {
      fromPort?: int32(name='FromPort', description='The port range of the traffic destination.', example='80'),
      toPort?: int32(name='ToPort', description='The first port of the port range.', example='80'),
    }
  ](name='PortRanges', description='The IP address of the traffic policy.'),
  requestId?: string(name='RequestId', description='The ID of the endpoint to which the traffic destination belongs.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='Managed policy action name, Valid values:
- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
      childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
  state?: string(name='State', description='The status of the traffic destination.

- init: being initialized.
- active: running as expected.
- updating: being updated.
- deleting: being deleted.', example='active'),
}

model DescribeCustomRoutingEndPointTrafficPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomRoutingEndPointTrafficPolicyResponseBody(name='body'),
}

async function describeCustomRoutingEndPointTrafficPolicy(request: DescribeCustomRoutingEndPointTrafficPolicyRequest): DescribeCustomRoutingEndPointTrafficPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomRoutingEndPointTrafficPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomRoutingEndpointRequest {
  endpointGroup?: string(name='EndpointGroup', description='The ID of the endpoint group.', example='epg-bp1j184jhb9i9ubwf****', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp1dmlohjjz4kqaun****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeCustomRoutingEndpointResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance with which the endpoint is associated.', example='ga-bp1odcab8tmno0hdq****'),
  endpoint?: string(name='Endpoint', description='The name of the endpoint (vSwitch).', example='vsw-test01'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint belongs.', example='epg-bp14sz7ftcwwjgrdm****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp1dmlohjjz4kqaun****'),
  listenerId?: string(name='ListenerId', description='The ID of the listener with which the endpoint is associated.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='String	04F0F334-1335-436C-A1D7-6C044FE73368'),
  serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='Managed policy action name, Valid values:

- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
      childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
  state?: string(name='State', description='The status of the endpoint.', example='active'),
  trafficToEndpointPolicy?: string(name='TrafficToEndpointPolicy', description='The access policy of traffic for the specified endpoint. Valid values:

*   **AllowAll**: allows all traffic to the endpoint.
*   **DenyAll**: denies all traffic to the endpoint.
*   **AllowCustom**: allows traffic only to specified destinations.', example='DenyAll'),
  type?: string(name='Type', description='The backend service type of the endpoint.

Set the value to **PrivateSubNet**, which indicates private CIDR blocks.', example='PrivateSubNet'),
}

model DescribeCustomRoutingEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomRoutingEndpointResponseBody(name='body'),
}

async function describeCustomRoutingEndpoint(request: DescribeCustomRoutingEndpointRequest): DescribeCustomRoutingEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomRoutingEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomRoutingEndpointGroupRequest {
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaua****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeCustomRoutingEndpointGroupResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****'),
  accessLogSwitch?: string(name='AccessLogSwitch', description='Indicates the status of the binding between the Log Service project and the endpoint group. Valid values:

*   **on:** The endpoint group is bound to the Log Service project.
*   **off:** The endpoint group is not bound to the Log Service project.
*   **binding:** The endpoint group is being bound to the Log Service project.
*   **unbinding:** The endpoint group is being unbound from the Log Service project.', example='on'),
  description?: string(name='Description', description='The description of the endpoint group.', example='EndpointGroup'),
  enableAccessLog?: boolean(name='EnableAccessLog', description='Indicates whether the access log feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  endpointGroupId?: string(name='EndpointGroupId', description='The endpoint group ID.', example='epg-bp1dmlohjjz4kqaua****'),
  endpointGroupIpList?: [ string ](name='EndpointGroupIpList', description='The endpoint group IP addresses.'),
  endpointGroupRegion?: string(name='EndpointGroupRegion', description='The region ID of the endpoint group.', example='cn-hangzhou'),
  endpointGroupUnconfirmedIpList?: [ string ](name='EndpointGroupUnconfirmedIpList', description='The endpoint group IP addresses that need to be confirmed after the GA instance is upgraded.'),
  listenerId?: string(name='ListenerId', description='The custom routing listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
  name?: string(name='Name', description='The name of the endpoint group.', example='group1'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  serviceId?: string(name='ServiceId', description='The ID of the service that manages the GA instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**
*   **false**', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='The name of the action on the managed instance. Valid values:

*   **Create**
*   **Update**
*   **Delete**
*   **Associate**
*   **UserUnmanaged**
*   **CreateChild**', example='Update'),
      childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener
*   **IpSet**: acceleration region
*   **EndpointGroup**: endpoint group
*   **ForwardingRule**: forwarding rule
*   **Endpoint**: endpoint
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener

>  This parameter takes effect only if **Action** is set to **CreateChild**.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and users cannot perform the specified actions on the managed instance.
*   **false**: The specified actions are not managed, and users can perform the specified actions on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='The actions that users can perform on the managed instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.

*   Users can perform only specific actions on a managed instance.'),
  slsLogStoreName?: string(name='SlsLogStoreName', description='The name of the Logstore.', example='lsn-01'),
  slsProjectName?: string(name='SlsProjectName', description='The name of the Log Service project.', example='pn-01'),
  slsRegion?: string(name='SlsRegion', description='The region of the logs that are created in Log Service.', example='cn-hangzhou'),
  state?: string(name='State', description='The status of the endpoint group. Valid values:

*   **init:** The endpoint group is being initialized.
*   **active:** The endpoint group is running normally.
*   **updating:** The endpoint group is being updated.
*   **deleting:** The ACL is being deleted.', example='active'),
}

model DescribeCustomRoutingEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomRoutingEndpointGroupResponseBody(name='body'),
}

async function describeCustomRoutingEndpointGroup(request: DescribeCustomRoutingEndpointGroupRequest): DescribeCustomRoutingEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomRoutingEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomRoutingEndpointGroupDestinationsRequest {
  destinationId: string(name='DestinationId', description='The ID of the endpoint group mapping configuration.', example='dst-123abc****', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1j184jhb9i9ubwf****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeCustomRoutingEndpointGroupDestinationsResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the Global Accelerator (GA) instance.', example='ga-bp1odcab8tmno0hdq****'),
  destinationId?: string(name='DestinationId', description='The ID of the endpoint group mapping configuration.', example='dst-123abc****'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
  fromPort?: int32(name='FromPort', description='The start port of the backend service port range of the endpoint group.', example='80'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  protocols?: [ string ](name='Protocols', description='The backend service protocol of the endpoint group.

*   **TCP**: TCP
*   **UDP**: UDP
*   **TCP,UDP**: TCP and UDP'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='Managed policy action name, Valid values:

- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
      childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
  state?: string(name='State', description='The status of the endpoint group mapping configuration.

*   **init**: being initialized.
*   **active**: normal.
*   **updating**: being updated.
*   **deleting**: being deleted.', example='active'),
  toPort?: int32(name='ToPort', description='The end port of the backend service port range of the endpoint group.', example='80'),
}

model DescribeCustomRoutingEndpointGroupDestinationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomRoutingEndpointGroupDestinationsResponseBody(name='body'),
}

async function describeCustomRoutingEndpointGroupDestinations(request: DescribeCustomRoutingEndpointGroupDestinationsRequest): DescribeCustomRoutingEndpointGroupDestinationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomRoutingEndpointGroupDestinations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndpointGroupRequest {
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group that you want to query.', example='epg-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where your Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeEndpointGroupResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
  accessLogSwitch?: string(name='AccessLogSwitch', description='Indicates the status of the binding between the Log Service project and the endpoint group. Valid values:

*   **on**: The Log Service project is bound to the endpoint group.
*   **off**: No Log Service projects are bound to the endpoint group.
*   **binding**: The Log Service project is being bound to the endpoint group.
*   **unbinding**: The Log Service project is being unbound from the endpoint group.', example='on'),
  description?: string(name='Description', description='The description of the endpoint group.', example='group1'),
  enableAccessLog?: boolean(name='EnableAccessLog', description='Indicates whether the access log feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  endpointConfigurations?: [ 
    {
      enableClientIPPreservation?: boolean(name='EnableClientIPPreservation', description='Indicates whether the client IP address preservation feature is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      enableProxyProtocol?: boolean(name='EnableProxyProtocol', description='Indicates whether the proxy protocol is used to preserve client IP addresses.', example='false'),
      endpoint?: string(name='Endpoint', description='The IP address or domain name of the endpoint.', example='120.XX.XX.21'),
      probePort?: int32(name='ProbePort', description='The port that is used to monitor latency.', example='80'),
      probeProtocol?: string(name='ProbeProtocol', description='The protocol that is used to monitor latency. Valid values:

*   **tcp**
*   **icmp**', example='tcp'),
      subAddress?: string(name='SubAddress', description='The private IP address of the ENI.', example='172.168.XX.XX'),
      type?: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain**: a custom domain name
*   **Ip**: a custom IP address
*   **PublicIp**: a public IP address provided by Alibaba Cloud
*   **ECS**: an Elastic Compute Service (ECS) instance
*   **SLB**: a Server Load Balancer (SLB) instance
*   **ALB**: an Application Load Balancer (ALB) instance
*   **OSS**: an Object Storage Service (OSS) bucket', example='Ip'),
      weight?: int32(name='Weight', description='The weight of the endpoint.', example='20'),
    }
  ](name='EndpointConfigurations', description='The configurations of the endpoints in the endpoint group.'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
  endpointGroupIpList?: [ string ](name='EndpointGroupIpList', description='The active endpoint IP addresses of the endpoint group.'),
  endpointGroupRegion?: string(name='EndpointGroupRegion', description='The ID of the region where the endpoint group is deployed.', example='cn-hangzhou'),
  endpointGroupType?: string(name='EndpointGroupType', description='The type of endpoint group. Valid values:

*   **default**: a default endpoint group
*   **virtual**: a virtual endpoint group', example='default'),
  endpointGroupUnconfirmedIpList?: [ string ](name='EndpointGroupUnconfirmedIpList', description='The endpoint group IP addresses to be confirmed. After the GA instance is upgraded, the IP addresses that are added to the endpoint group need to be confirmed.'),
  endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol that is used by the backend service.

*   **HTTP**
*   **HTTPS**', example='HTTP'),
  forwardingRuleIds?: [ string ](name='ForwardingRuleIds', description='The ID of the forwarding rule that is associated with the endpoint group.'),
  healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Indicates whether the health check feature is enabled. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
  healthCheckIntervalSeconds?: int32(name='HealthCheckIntervalSeconds', description='The interval between two consecutive health checks. Unit: seconds.', example='3'),
  healthCheckPath?: string(name='HealthCheckPath', description='The path to which health check probes are sent.', example='/healthcheck'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The port that is used for health checks.', example='20'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which health check requests are sent. Valid values:

*   **tcp**: TCP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  name?: string(name='Name', description='The name of the endpoint group.', example='group1'),
  portOverrides?: [ 
    {
      endpointPort?: int32(name='EndpointPort', description='The endpoint port.', example='80'),
      listenerPort?: int32(name='ListenerPort', description='The listener port.', example='443'),
    }
  ](name='PortOverrides', description='The mappings between ports.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  serviceId?: string(name='ServiceId', description='The ID of the service that manages the GA instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**
*   **false**', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='The name of the action on the managed instance. Valid values:

*   **Create**
*   **Update**
*   **Delete**
*   **Associate**
*   **UserUnmanaged**
*   **CreateChild**', example='Update'),
      childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener
*   **IpSet**: acceleration region
*   **EndpointGroup**: endpoint group
*   **ForwardingRule**: forwarding rule
*   **Endpoint**: endpoint
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener

>  This parameter takes effect only if **Action** is set to **CreateChild**.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and users cannot perform the specified actions on the managed instance.
*   **false**: The specified actions are not managed, and users can perform the specified actions on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='The actions that users can perform on the managed instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.

*   Users can perform only specific actions on a managed instance.'),
  slsLogStoreName?: string(name='SlsLogStoreName', description='The name of the Logstore.', example='lsn-01'),
  slsProjectName?: string(name='SlsProjectName', description='The name of the Log Service project.', example='pn-01'),
  slsRegion?: string(name='SlsRegion', description='The region of the Log Service project.', example='cn-hangzhou'),
  state?: string(name='State', description='The status of the endpoint group. Valid values:

*   **init**: The endpoint group is being initialized.
*   **active**: The endpoint group is running as expected.
*   **updating**: The endpoint group is being updated.
*   **deleting**: The endpoint group is being deleted.', example='active'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='test-key'),
      value?: string(name='Value', description='The tag value.', example='test-value'),
    }
  ](name='Tags', description='Tags.'),
  thresholdCount?: int32(name='ThresholdCount', description='The number of consecutive failed health checks that must occur before an endpoint is considered unhealthy.', example='3'),
  trafficPercentage?: int32(name='TrafficPercentage', description='The weight of the endpoint group. If the listener is associated with multiple endpoint groups, this parameter indicates the weight of the current endpoint group.', example='20'),
}

model DescribeEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEndpointGroupResponseBody(name='body'),
}

async function describeEndpointGroup(request: DescribeEndpointGroupRequest): DescribeEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpSetRequest {
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region.

You can call the [ListIpSets](~~153247~~) operation to query IDs of acceleration regions of a specified GA instance.', example='ips-bp11ilwqjdkjeg9r7****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeIpSetResponseBody = {
  accelerateRegionId?: string(name='AccelerateRegionId', description='The ID of the acceleration region.', example='cn-hangzhou'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1yeeq8yfoyszmqy****'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth that is allocated to the acceleration region. Unit: Mbit/s.', example='3'),
  ipAddressList?: [ string ](name='IpAddressList', description='The list of accelerated IP addresses in the acceleration region.'),
  ipSetId?: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11ilwqjdkjeg9r7****'),
  ipVersion?: string(name='IpVersion', description='The version of the IP protocol. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4'),
  ispType?: string(name='IspType', description='The line type of the elastic IP address (EIP) in the acceleration region. Valid values:

*   **BGP**: BGP (Multi-ISP) lines.
*   **BGP_PRO**: BGP (Multi-ISP) Pro lines.

If you are allowed to use single-ISP bandwidth, one of the following values is returned:

*   **ChinaTelecom**: China Telecom (single ISP).
*   **ChinaUnicom**: China Unicom (single ISP).
*   **ChinaMobile**: China Mobile (single ISP).
*   **ChinaTelecom_L2**: China Telecom (single ISP)\\_L2.
*   **ChinaUnicom_L2**: China Unicom (single ISP)\\_L2.
*   **ChinaMobile_L2**: China Mobile (single ISP)\\_L2.

>  The supported single-ISP type varies with the acceleration region.', example='BGP'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6D2BFF54-6AF2-4679-88C4-2F2E187F16CB'),
  serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='Managed policy action name, Valid values:

- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
      childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
  state?: string(name='State', description='The status of the acceleration region. Valid values:

*   **init**: The acceleration region is being initialized.
*   **active**: The acceleration region is in the running state.
*   **updating**: The acceleration region is being configured.
*   **deleting**: The GA instance is being deleted.', example='active'),
}

model DescribeIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpSetResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ga\\&api=DescribeIpSet\\&type=RPC\\&version=2019-11-20)
  *
 */
async function describeIpSet(request: DescribeIpSetRequest): DescribeIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeListenerRequest {
  listenerId: string(name='ListenerId', description='The ID of the listener that you want to query.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeListenerResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
  aclType?: string(name='AclType', description='The type of the ACL. Valid values:

*   **white**: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. Whitelists apply to scenarios in which you want to allow only specified IP addresses to access an application. Your service may be adversely affected if the whitelist is not properly configured. After you configure a whitelist for a listener, only requests from the IP addresses that are added to the whitelist are forwarded by the listener. If the whitelist is enabled but no IP addresses are added to the ACL, the listener does not forward requests.
*   **black**: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are blocked. Blacklists apply to scenarios in which you want to deny access from specific IP addresses to an application. If the blacklist is enabled but no IP addresses are added to the ACL, the listener forwards all requests.

If the value of **Status** is **on**, this parameter is returned.', example='white'),
  backendPorts?: [ 
    {
      fromPort?: string(name='FromPort', description='The start port in the range of ports used by the backend server to receive requests.

This parameter is returned only when you configure an HTTPS listener and the listening port is the same port used by the backend server to provide services.', example='80'),
      toPort?: string(name='ToPort', description='The end port in the range of ports used by the backend server to receive requests.', example='80'),
    }
  ](name='BackendPorts', description='Details about the backend ports.'),
  certificates?: [ 
    {
      id?: string(name='Id', description='The ID of the SSL certificate.', example='449****-cn-hangzhou'),
      type?: string(name='Type', description='The type of the certificate.

Only **Server** can be returned. This value Server indicates a server certificate.', example='Server'),
    }
  ](name='Certificates', description='The SSL certificates.'),
  clientAffinity?: string(name='ClientAffinity', description='Indicates whether client affinity is enabled for the listener.

*   If **NONE** is returned, client affinity is disabled. In this case, requests from the same client may be forwarded to different endpoints.
*   If **SOURCE_IP** is returned, client affinity is enabled. In this case, when a client accesses stateful applications, requests from the same client are always forwarded to the same endpoint regardless of the source port or protocol.', example='SOURCE_IP'),
  createTime?: string(name='CreateTime', description='The timestamp when the listener was created. Unit: milliseconds.', example='1577786252000'),
  description?: string(name='Description', description='The description of the listener.', example='Listener'),
  idleTimeout?: int32(name='IdleTimeout'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  name?: string(name='Name', description='The name of the listener.', example='Listener'),
  portRanges?: [ 
    {
      fromPort?: int32(name='FromPort', description='The start port in the range of listening ports used to receive and forward requests to endpoints.', example='20'),
      toPort?: int32(name='ToPort', description='The end port in the range of listening ports used to receive and forward requests to endpoints.', example='20'),
    }
  ](name='PortRanges', description='Details about the listener ports.'),
  protocol?: string(name='Protocol', description='The network transmission protocol that is used by the listener. Valid values:

*   **tcp**: TCP
*   **udp**: UDP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp'),
  proxyProtocol?: boolean(name='ProxyProtocol', description='Indicates whether the client IP address preservation feature is enabled. Valid values:

*   **true**: The client IP address preservation feature is enabled. After client IP addresses are reserved, you can view the source IP addresses of clients over the backend service.
*   **false**: The client IP address preservation feature is disabled.', example='false'),
  relatedAcls?: [ 
    {
      aclId?: string(name='AclId', description='The ID of the ACL that is associated with the listener.', example='123'),
      status?: string(name='Status', description='Indicates whether the access control feature is enabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='off'),
    }
  ](name='RelatedAcls', description='The information about the access control list (ACL) that is associated with the listener.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  requestTimeout?: int32(name='RequestTimeout'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy.

*   **tls_cipher_policy\\_1\\_0**

    *   Supported Transport Layer Security (TLS) versions: TLS 1.0, TLS 1.1, and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_1**

    *   Supported TLS versions: TLS 1.1 and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_2**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict_with\\_1\\_3**

    *   Supported TLS versions: TLS 1.2 and TLS 1.3
    *   Supported cipher suites: TLS_AES\\_128\\_GCM_SHA256, TLS_AES\\_256\\_GCM_SHA384, TLS_CHACHA20\\_POLY1305\\_SHA256, TLS_AES\\_128\\_CCM_SHA256, TLS_AES\\_128\\_CCM\\_8\\_SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES128-SHA256, ECDHE-ECDSA-AES256-SHA384, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-ECDSA-AES128-SHA, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

>  This parameter is returned only for HTTPS listeners.', example='tls_cipher_policy_1_0'),
  serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
  serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
  serviceManagedInfos?: [ 
    {
      action?: string(name='Action', description='Managed policy action name, Valid values:

- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
      childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
      isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:
- **true**: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.
- **false**: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
    }
  ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
  state?: string(name='State', description='The state of the listener. Valid values:

*   **configuring**: The listener is being configured.
*   **init**: The listener is being initialized.
*   **updating**: The listener is being updated.
*   **deleting**: The listener is being deleted.', example='active'),
  type?: string(name='Type', description='The routing type of the listener. Valid values:

*   **Standard**: intelligent routing
*   **CustomRouting**: custom routing', example='Standard'),
  xForwardedForConfig?: {
    xForwardedForGaApEnabled?: boolean(name='XForwardedForGaApEnabled', description='Indicates whether the `GA-AP` header is used to retrieve the information about acceleration regions. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
    xForwardedForGaIdEnabled?: boolean(name='XForwardedForGaIdEnabled', description='Indicates whether the `GA-ID` header is used to retrieve the ID of the GA instance. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
    xForwardedForPortEnabled?: boolean(name='XForwardedForPortEnabled', description='Indicates whether the `GA-X-Forward-Port` header is used to retrieve the listener ports of the GA instance. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
    xForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Indicates whether the `GA-X-Forward-Proto` header is used to retrieve the listener protocol of the GA instance. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
    xRealIpEnabled?: boolean(name='XRealIpEnabled', description='Indicates whether the `X-Real-IP` header is used to retrieve client IP addresses. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
  }(name='XForwardedForConfig', description='The configurations of the `XForward` headers.'),
}

model DescribeListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeListenerResponseBody(name='body'),
}

/**
  * This operation is used to query configuration information about a specified listener of a GA instance. The information includes the routing type of the listener, the state of the listener, the timestamp that indicates when the listener was created, and the listener ports.
  *
 */
async function describeListener(request: DescribeListenerRequest): DescribeListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeListener', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogStoreOfEndpointGroupRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-xxxxxxxxxxxxx', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-xxxxxxxxxxxxxxx', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-xxxxxxxxxxxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DescribeLogStoreOfEndpointGroupResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-xxxxxxxxxxxxx'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-xxxxxxxxxxxxxxx'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-xxxxxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='1777E713-8456-55F1-9A69-9AD9EAE2B3B6'),
  slsLogStoreName?: string(name='SlsLogStoreName', description='The name of the Logstore.', example='ga_log'),
  slsProjectName?: string(name='SlsProjectName', description='The name of the Log Service project.', example='ga_project_name'),
  slsRegionId?: string(name='SlsRegionId', description='The region ID of the Log Service project.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the log.', example='on - binding
off - unbinding'),
}

model DescribeLogStoreOfEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogStoreOfEndpointGroupResponseBody(name='body'),
}

async function describeLogStoreOfEndpointGroup(request: DescribeLogStoreOfEndpointGroupRequest): DescribeLogStoreOfEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogStoreOfEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId: string(name='RegionId', description='The ID of the region to query.', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The region name.', example='杭州'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The available regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DetachDdosFromAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DetachDdosFromAcceleratorResponseBody = {
  ddosId?: string(name='DdosId', description='The ID of the Anti-DDoS Pro/Premium instance that was disassociated from the GA instance.', example='ddoscoo-cn-zz11vq7j****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DetachDdosFromAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachDdosFromAcceleratorResponseBody(name='body'),
}

/**
  * *   The **DetachDdosFromAccelerator** operation is asynchronous. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) or [ListAccelerators](~~153236~~) operation to query the status of the GA instance.
  *     *   If the GA instance is in the **configuring** state, the Anti-DDoS Pro/Premium instance is being disassociated from the GA instance. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state, the Anti-DDoS Pro/Premium instance is disassociated from the GA instance.
  * *   **DetachDdosFromAccelerator** cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function detachDdosFromAccelerator(request: DetachDdosFromAcceleratorRequest): DetachDdosFromAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDdosFromAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model DetachLogStoreFromEndpointGroupRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4****', position='Query'),
  endpointGroupIds: [ string ](name='EndpointGroupIds', description='The IDs of endpoint groups.', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DetachLogStoreFromEndpointGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model DetachLogStoreFromEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachLogStoreFromEndpointGroupResponseBody(name='body'),
}

/**
  * ## Description
  * *   **DetachLogStoreFromEndpointGroup** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the state of an endpoint group.
  *     *   If the endpoint group is in the **updating** state, the Log Service Logstore is being disassociated from the endpoint group. In this case, you can perform only query operations.
  *     <!---->
  *     *   If the endpoint group is in the **active** state, the Log Service Logstore is disassociated from the endpoint group.
  * *   The **DetachLogStoreFromEndpointGroup** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function detachLogStoreFromEndpointGroup(request: DetachLogStoreFromEndpointGroupRequest): DetachLogStoreFromEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachLogStoreFromEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model DetectApplicationMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId?: string(name='RegionId', description='The region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskId: string(name='TaskId', description='The ID of the origin probing task for which you want to enable the diagnostic feature.', example='2c8dbdf9-a3ab-46a1-85a4-f094965e****', position='Query'),
}

model DetectApplicationMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DetectApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectApplicationMonitorResponseBody(name='body'),
}

async function detectApplicationMonitor(request: DetectApplicationMonitorRequest): DetectApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId?: string(name='RegionId', description='The region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskId: string(name='TaskId', description='The ID of the origin probing task that you want to disable.', example='sm-bp1fpdjfju9k8yr1y****', position='Query'),
}

model DisableApplicationMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DisableApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationMonitorResponseBody(name='body'),
}

async function disableApplicationMonitor(request: DisableApplicationMonitorRequest): DisableApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DissociateAclsFromListenerRequest {
  aclIds: [ string ](name='AclIds', description='The ID of the ACL. You can disassociate up to two ACLs from a listener.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Default value: false. Valid values:

*   **true**: prechecks the request without performing the operation. The system prechecks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DissociateAclsFromListenerResponseBody = {
  aclIds?: [ string ](name='AclIds', description='The IDs of the ACL.'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DissociateAclsFromListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateAclsFromListenerResponseBody(name='body'),
}

/**
  * ## Description
  * *   **DissociateAclsFromListener** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeListener](~~153254~~) operation to query the state of a listener:
  *     *   If the listener is in the **updating** state, ACLs are being disassociated from the listener. In this case, you can perform only query operations.
  *     *   If the listener is in the **active** state, ACLs are disassociated from the listener.
  * *   The **DissociateAclsFromListener** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function dissociateAclsFromListener(request: DissociateAclsFromListenerRequest): DissociateAclsFromListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateAclsFromListener', 'POST', '/', 'json', false, 'json', request);
}

model DissociateAdditionalCertificatesFromListenerRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  domains: [ string ](name='Domains', description='The domain name associated with the additional certificate.

You can specify up to 10 domain names in each request.', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model DissociateAdditionalCertificatesFromListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model DissociateAdditionalCertificatesFromListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateAdditionalCertificatesFromListenerResponseBody(name='body'),
}

/**
  * ## Description
  * *   **DissociateAdditionalCertificatesFromListener** is an asynchronous operation. After you send a request, the system returns a request ID, but this operation is still being performed in the system background. You can call the [DescribeListener](~~153254~~) operation to query the state of an HTTPS listener.
  *     *   If the listener is in the **updating** state, it indicates that the additional certificate is being dissociated from the listener. In this case, you can perform only query operations.
  *     *   If the listener is in the **active** state, it indicates that the additional certificate is dissociated from the listener.
  * *   The **DissociateAdditionalCertificatesFromListener** operation cannot be repeatedly called for the same Global Accelerator (GA) instance with a specific period of time.
  *
 */
async function dissociateAdditionalCertificatesFromListener(request: DissociateAdditionalCertificatesFromListenerRequest): DissociateAdditionalCertificatesFromListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateAdditionalCertificatesFromListener', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId?: string(name='RegionId', description='The region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskId: string(name='TaskId', description='The ID of the origin probing task that you want to enable.', example='sm-bp1fpdjfju9k8yr1y****', position='Query'),
}

model EnableApplicationMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model EnableApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationMonitorResponseBody(name='body'),
}

async function enableApplicationMonitor(request: EnableApplicationMonitorRequest): EnableApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model GetAclRequest {
  aclId: string(name='AclId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='nacl-hp34s2h0xx1ht4nwo****', position='Query'),
  regionId: string(name='RegionId', description='The operation that you want to perform. Set the value to **GetAcl**.', example='cn-hangzhou', position='Query'),
}

model GetAclResponseBody = {
  aclEntries?: [ 
    {
      entry?: string(name='Entry', description='The list of network ACL entries that are returned. A maximum of 20 network ACL entries can be returned.', example='10.0.XX.XX/24'),
      entryDescription?: string(name='EntryDescription', description='The network ACL entry.', example='test-entry'),
    }
  ](name='AclEntries', description='The state of the network ACL. Valid values:

*   **init**: The network ACL is being initialized.
*   **active**: The network ACL is available.
*   **configuring**: The network ACL is being configured.
*   **updating**: The network ACL is being updated.
*   **deleting**: The network ACL is being deleted.'),
  aclId?: string(name='AclId', description='The ID of the request.', example='nacl-hp34s2h0xx1ht4nwo****'),
  aclName?: string(name='AclName', description='The ID of the GA instance.', example='test-acl'),
  aclStatus?: string(name='AclStatus', description='The IP version of the network ACL. Valid values:

*   **IPv4**
*   **IPv6**', example='active'),
  addressIPVersion?: string(name='AddressIPVersion', description='The ID of the network ACL.', example='IPv4'),
  relatedListeners?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The type of the network ACL.

*   **White**: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. Whitelists apply to scenarios in which you want to allow only specified IP addresses to access an application. Your service may be adversely affected if the whitelist is not properly configured. After you configure a whitelist for a listener, only requests from the IP addresses that are added to the whitelist are forwarded by the listener. If the whitelist is enabled but no IP addresses are added to the network ACL, the listener does not forward requests.
*   **Black**: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are blocked. Blacklists apply to scenarios in which you want to deny access from specific IP addresses to an application. If the blacklist is enabled but no IP addresses are added to the network ACL, the listener forwards all requests.', example='ga-bp1odcab8tmno0hdq****'),
      aclType?: string(name='AclType', description='The ID of the listener.', example='White'),
      listenerId?: string(name='ListenerId', description='The listeners that are associated with the network ACL.', example='lsr-bp1bpn0kn908w4nbw****'),
    }
  ](name='RelatedListeners', description='The description of the network ACL entry.'),
  requestId?: string(name='RequestId', description='The ID of the network ACL.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  resourceGroupId?: string(name='ResourceGroupId', description='The name of the network ACL.', example='rg-acfmx7itmygzsza'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tags of the ACL.', example='tag-key'),
      value?: string(name='Value', description='The tag key', example='tag-value'),
    }
  ](name='Tags', description='The ID of the resource group.'),
}

model GetAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAclResponseBody(name='body'),
}

async function getAcl(request: GetAclRequest): GetAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAcl', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicAccelerateIpRequest {
  accelerateIpId: string(name='AccelerateIpId', description='The ID of the accelerated IP address that you want to query.', example='gaip-bp1****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicAccelerateIpResponseBody = {
  accelerateIpAddress?: string(name='AccelerateIpAddress', description='The accelerated IP address.', example='116.132.XX.XX'),
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address.', example='gaip-bp1****'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance to which the queried accelerated IP address belongs.', example='ga-bp17frjjh0udz4qz****'),
  ipSetId?: string(name='IpSetId', description='The ID of the acceleration region of the basic GA instance.', example='ips-bp11r5jb8ogp122xl****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The status of the accelerated IP address. Valid values:

*   **active**: The accelerated IP address is available.
*   **binding**: The accelerated IP address is being associated.
*   **bound**: The accelerated IP address is associated.
*   **unbinding**: The basic GA instance is being disassociated.
*   **deleting**: The accelerated IP address is being deleted.

>  This parameter is not returned when the queried accelerated IP address is being created.', example='active'),
}

model GetBasicAccelerateIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicAccelerateIpResponseBody(name='body'),
}

async function getBasicAccelerateIp(request: GetBasicAccelerateIpRequest): GetBasicAccelerateIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicAccelerateIp', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicAccelerateIpEndpointRelationRequest {
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address.', example='gaip-bp1****', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicAccelerateIpEndpointRelationResponseBody = {
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address.', example='gaip-bp1****'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp11v53zfftax68b0daws'),
  endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
  endpointName?: string(name='EndpointName', description='The name of the endpoint.', example='ep01'),
  endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, **EndpointSubAddress** returns the primary or secondary private IP address of the primary ENI.
*   If the endpoint type is **ENI**, **EndpointSubAddress** returns the primary or secondary private IP address of the secondary ENI.
*   If the endpoint type is **NLB**, **EndpointSubAddress** returns the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
  endpointSubAddressType?: string(name='EndpointSubAddressType', description='The type of the secondary address of the endpoint.

*   **primary**: a primary private IP address.
*   **secondary**: a secondary private IP address.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**. If the endpoint type is set to **NLB**, **primary** is returned.', example='primary'),
  endpointType?: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: elastic network interface (ENI).
*   **SLB**: Classic Load Balancer (CLB) instance.
*   **ECS**: Elastic Compute Service (ECS) instance.
*   **NLB**: Network Load Balancer (NLB) instance.', example='ENI'),
  endpointZoneId?: string(name='EndpointZoneId', description='The ID of the zone where the endpoint is created.

This parameter is returned only when the endpoint type is **NLB**.', example='cn-hangzhou-g'),
  ipAddress?: string(name='IpAddress', description='The accelerated IP address of the basic GA instance.', example='116.132.XX.XX'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The association status between the accelerated IP address and endpoint.

A value of **active** indicates that the accelerated IP address is associated with the endpoint.', example='active'),
}

model GetBasicAccelerateIpEndpointRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicAccelerateIpEndpointRelationResponseBody(name='body'),
}

async function getBasicAccelerateIpEndpointRelation(request: GetBasicAccelerateIpEndpointRelationRequest): GetBasicAccelerateIpEndpointRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicAccelerateIpEndpointRelation', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicAccelerateIpIdleCountRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicAccelerateIpIdleCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: long(name='TotalCount', description='The number of entries returned, which indicates the number of idle accelerated IP addresses.', example='1'),
}

model GetBasicAccelerateIpIdleCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicAccelerateIpIdleCountResponseBody(name='body'),
}

async function getBasicAccelerateIpIdleCount(request: GetBasicAccelerateIpIdleCountRequest): GetBasicAccelerateIpIdleCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicAccelerateIpIdleCount', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance that you want to query.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the basic GA instance belongs. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicAcceleratorResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  bandwidthBillingType?: string(name='BandwidthBillingType', description='The bandwidth metering method.

*   **BandwidthPackage**: billed based on bandwidth plans.
*   **CDT**: billed by Cloud Data Transfer (CDT) and based on data transfer.
*   **CDT95**: billed by CDT and based on the 95th percentile bandwidth. This bandwidth metering method is available only to users that are included in the whitelist.', example='CDT'),
  basicBandwidthPackage?: {
    bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the basic bandwidth plan. Unit: Mbit/s.', example='2'),
    bandwidthType?: string(name='BandwidthType', description='The type of the bandwidth that is provided by the basic bandwidth plan.

*   **Basic**: basic
*   **Enhanced**: enhanced
*   **Advanced**: premium', example='Basic'),
    instanceId?: string(name='InstanceId', description='The ID of the basic bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
  }(name='BasicBandwidthPackage', description='The details about the basic bandwidth plan that is associated with the basic GA instance.'),
  basicEndpointGroupId?: string(name='BasicEndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****'),
  basicIpSetId?: string(name='BasicIpSetId', description='The ID of the acceleration region.', example='ips-bp11ilwqjdkjeg9r7****'),
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance to which the basic GA instance is attached.', example='cen-hjkduu767hc****'),
  createTime?: long(name='CreateTime', description='The timestamp that indicates when the basic GA instance is created.', example='1637734547'),
  crossBorderStatus?: boolean(name='CrossBorderStatus', description='基础型全球加速实例是否开启跨境线路功能。取值：

- **true**：开启跨境线路功能，可以加速跨境线路。

- **false**：关闭跨境线路功能，不可以加速跨境线路。', example='false'),
  crossDomainBandwidthPackage?: {
    bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the cross-border acceleration bandwidth plan. Unit: Mbit/s.', example='2'),
    instanceId?: string(name='InstanceId', description='The ID of the cross-border acceleration bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
  }(name='CrossDomainBandwidthPackage', description='The details about the cross-border acceleration bandwidth plan that is associated with the GA instance.

This array is returned only for GA instances that are created on the international site (alibabacloud.com).'),
  crossPrivateState?: string(name='CrossPrivateState', description='Indicates whether cross-border acceleration is enabled.

*   **true**: yes
*   **false**: no', example='false'),
  description?: string(name='Description', description='The description of the basic GA instance.', example='BasicAccelerator'),
  expiredTime?: long(name='ExpiredTime', description='The timestamp that indicates when the basic GA instance expires.

The time follows the UNIX time format. It is the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1640326547'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the basic GA instance. Only **PREPAY** is returned, which indicates the subscription billing method.', example='PREPAY'),
  name?: string(name='Name', description='The name of the basic GA instance.', example='BasicAccelerator'),
  regionId?: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the basic GA instance belongs.', example='rg-aekzrnd67gq****'),
  state?: string(name='State', description='The status of the basic GA instance.

*   **init**: The GA instance is being initialized.
*   **active**: The GA instance is available.
*   **configuring**: The GA instance is being configured.
*   **binding**: The GA instance is being associated.
*   **unbinding**: The GA instance is being disassociated.
*   **deleting**: The GA instance is being deleted.
*   **finacialLocked**: The GA instance is locked due to overdue payments.', example='active'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key of the basic GA instance.', example='tag-key'),
      value?: string(name='Value', description='The tag value of the basic GA instance.', example='tag-value'),
    }
  ](name='Tags', description='The tags of the basic GA instance.'),
}

model GetBasicAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicAcceleratorResponseBody(name='body'),
}

async function getBasicAccelerator(request: GetBasicAcceleratorRequest): GetBasicAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint that you want to query.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicEndpointResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  endPointId?: string(name='EndPointId', description='The ID of the endpoint that is associated with the basic GA instance.', example='ep-bp14sz7ftcwwjgrdm****'),
  endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint belongs.', example='epg-bp1dmlohjjz4kqaun****'),
  endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, **EndpointSubAddress** returns the primary or secondary private IP address of the primary ENI.
*   If the endpoint type is **ENI**, **EndpointSubAddress** returns the primary or secondary private IP address of the secondary ENI.
*   If the endpoint type is **NLB**, **EndpointSubAddress** returns the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
  endpointSubAddressType?: string(name='EndpointSubAddressType', description='The type of the secondary address of the endpoint.

*   **primary**: a primary private IP address.
*   **secondary**: a secondary private IP address.

This parameter is returned if the type of the endpoint is set to **ECS**, **ENI**, or **NLB**. If the endpoint type is set to **NLB**, **primary** is returned.', example='primary'),
  endpointType?: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: elastic network interface (ENI).
*   **SLB**: Classic Load Balancer (CLB) instance.
*   **ECS**: Elastic Compute Service (ECS) instance.
*   **NLB**: Network Load Balancer (NLB) instance.', example='ENI'),
  endpointZoneId?: string(name='EndpointZoneId', description='The ID of the zone where the endpoint is deployed.

This parameter is returned only when the endpoint type is set to **NLB**.', example='cn-hangzhou-g'),
  name?: string(name='Name', description='The name of the endpoint.', example='ep01'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The status of the endpoint. Valid values:

*   **init**: The endpoint is being initialized.
*   **active**: The endpoint is available.
*   **updating**: The endpoint is being configured.
*   **binding**: The endpoint is being associated.
*   **unbinding**: The endpoint is being disassociated.
*   **deleting**: The endpoint is being deleted.
*   **bound**: The endpoint is associated.', example='active'),
}

model GetBasicEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicEndpointResponseBody(name='body'),
}

async function getBasicEndpoint(request: GetBasicEndpointRequest): GetBasicEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicEndpointGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicEndpointGroupResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  description?: string(name='Description', description='The description of the endpoint group.', example='BasicEndpointGroup'),
  endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****'),
  endpointGroupRegion?: string(name='EndpointGroupRegion', description='The ID of the region where the endpoint group resides.', example='cn-shanghai'),
  endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, **EndpointSubAddress** returns the primary or secondary private IP address of the primary ENI.
*   If the endpoint type is **ENI**, **EndpointSubAddress** returns the primary or secondary private IP address of the secondary ENI.
*   If the endpoint type is **NLB**, **EndpointSubAddress** returns the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
  endpointType?: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: elastic network interface (ENI).
*   **SLB**: Classic Load Balancer (CLB) instance.
*   **ECS**: Elastic Compute Service (ECS) instance.
*   **NLB**: Network Load Balancer (NLB) instance', example='ENI'),
  name?: string(name='Name', description='The name of the endpoint group.', example='group1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The status of the endpoint group. Valid values:

*   **init**: being initialized.
*   **active**: running as expected.
*   **updating**: being updated.
*   **deleting**: being deleted.', example='active'),
}

model GetBasicEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicEndpointGroupResponseBody(name='body'),
}

async function getBasicEndpointGroup(request: GetBasicEndpointGroupRequest): GetBasicEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetBasicIpSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region of the basic GA instance.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetBasicIpSetResponseBody = {
  accelerateRegionId?: string(name='AccelerateRegionId', description='The ID of the region where the basic GA instance is deployed.', example='cn-hangzhou'),
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
  bandwidth?: long(name='Bandwidth', description='The bandwidth of the acceleration region of the basic GA instance. Unit: Mbit/s.', example='2'),
  ipAddress?: string(name='IpAddress', description='The accelerated IP address.', example='118.31.XX.XX'),
  ipSetId?: string(name='IpSetId', description='The ID of the acceleration region of the basic GA instance.', example='ips-bp11ilwqjdkjeg9r7****'),
  ipVersion?: string(name='IpVersion', description='The version of the accelerated IP address. Only **IPv4** is returned. This indicates that an IPv4 address is used.', example='IPv4'),
  ispType?: string(name='IspType', description='The line type of the elastic IP address (EIP) in the acceleration region. Valid values:

*   **BGP** (default)
*   **BGP_PRO** If the acceleration region is China (Hong Kong) and a basic bandwidth plan whose bandwidth type is Premium is associated with the GA instance, the default value of IspType is BGP_PRO.

If you are allowed to use single-ISP bandwidth, you can also specify one of the following values:

*   **ChinaTelecom**: China Telecom (single ISP)
*   **ChinaUnicom**: China Unicom (single ISP)
*   **ChinaMobile**: China Mobile (single ISP)
*   **ChinaTelecom_L2**: China Telecom \\_L2 (single ISP)
*   **ChinaUnicom_L2**: China Unicom \\_L2 (single ISP)
*   **ChinaMobile_L2**: China Mobile \\_L2 (single ISP)

> Different acceleration regions support different single-ISP BGP lines.', example='BGP'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6D2BFF54-6AF2-4679-88C4-2F2E187F16CB'),
  state?: string(name='State', description='The status of the acceleration region of the basic GA instance. Valid values:

*   **init**: The acceleration region is being initialized.
*   **active**: The acceleration region is in the running state.
*   **updating**: The acceleration region is being configured.
*   **Deleting**: The acceleration region is being deleted.', example='active'),
}

model GetBasicIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicIpSetResponseBody(name='body'),
}

async function getBasicIpSet(request: GetBasicIpSetRequest): GetBasicIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBasicIpSet', 'POST', '/', 'json', false, 'json', request);
}

model GetHealthStatusRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance that you want to query.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** of each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request only. The health status of the listener is not queried. The system prechecks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends a normal request. If the request passes the precheck, a 2xx HTTP status code is returned and the health status of the listener is obtained.', example='true', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetHealthStatusResponseBody = {
  endpointGroups?: [ 
    {
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
      endpointGroupType?: string(name='EndpointGroupType', description='The type of the endpoint group. Valid values:

*   **default**: a default endpoint group
*   **virtual**: a virtual endpoint group', example='default'),
      endpoints?: [ 
        {
          address?: string(name='Address', description='The IP address of the endpoint.', example='47.0.XX.XX'),
          endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
          healthDetail?: string(name='HealthDetail', description='The health check details of the endpoint.

>  This parameter is unavailable.', example='null'),
          healthStatus?: string(name='HealthStatus', description='The health status of the endpoint. Valid values:

*   **init**: The endpoint is being initialized.
*   **normal**: The endpoint is normal.
*   **Abnormal**: The endpoint is abnormal.', example='normal'),
          port?: long(name='Port', description='The port that is used to connect to the endpoint.', example='80'),
          type?: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain**: a custom domain name
*   **Ip**: a custom IP address
*   **PublicIp**: a public IP address provided by Alibaba Cloud
*   **ECS**: an Elastic Compute Service (ECS) instance
*   **SLB**: a Server Load Balancer (SLB) instance
*   **ALB**: an Application Load Balancer (ALB) instance
*   **OSS**: an Object Storage Service (OSS) bucket', example='Ip'),
        }
      ](name='Endpoints', description='The information about the endpoints.'),
      forwardingRuleIds?: [ string ](name='ForwardingRuleIds', description='The IDs of the forwarding rules.'),
      healthStatus?: string(name='HealthStatus', description='The health status of the endpoint group. Valid values:

*   **init**: The endpoint group is being initialized.
*   **normal**: The endpoint group is normal.
*   **Abnormal**: The endpoint group is abnormal.
*   **partiallyAbnormal**: Some endpoint groups that are associated with the listener are abnormal.', example='normal'),
    }
  ](name='EndpointGroups', description='The information about the endpoint group.'),
  healthStatus?: string(name='HealthStatus', description='The health status of the listener. Valid values:

*   **normal**: The listener is normal.
*   **Abnormal**: The listener is abnormal.
*   **partiallyAbnormal**: Some exceptions occur to the listener.', example='normal'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model GetHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHealthStatusResponseBody(name='body'),
}

async function getHealthStatus(request: GetHealthStatusRequest): GetHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHealthStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetInvalidDomainCountRequest {
  regionId?: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetInvalidDomainCountResponseBody = {
  invalidDomainCount?: string(name='InvalidDomainCount', description='The number of invalid domain names.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model GetInvalidDomainCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInvalidDomainCountResponseBody(name='body'),
}

async function getInvalidDomainCount(request: GetInvalidDomainCountRequest): GetInvalidDomainCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInvalidDomainCount', 'POST', '/', 'json', false, 'json', request);
}

model GetIpsetsBandwidthLimitRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance to be queried.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model GetIpsetsBandwidthLimitResponseBody = {
  bandwidthAllocationType?: string(name='BandwidthAllocationType', description='The type of the bandwidth that is allocated.

*   **ShareBandwidth:** shared bandwidth.
*   **ExclusiveBandwidth:** dedicated bandwidth.', example='ShareBandwidth'),
  bandwidthLimit?: long(name='BandwidthLimit', description='The maximum bandwidth of the acceleration area. Unit: Mbit/s.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model GetIpsetsBandwidthLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIpsetsBandwidthLimitResponseBody(name='body'),
}

async function getIpsetsBandwidthLimit(request: GetIpsetsBandwidthLimitRequest): GetIpsetsBandwidthLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpsetsBandwidthLimit', 'POST', '/', 'json', false, 'json', request);
}

model GetSpareIpRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='1F4B6A4A-C89E-489E-BAF1-52777EE148EF', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  spareIp: string(name='SpareIp', description='The secondary IP address that is associated with the CNAME. If the acceleration area becomes unavailable, GA redirects traffic to the secondary IP address.', example='47.100.XX.XX', position='Query'),
}

model GetSpareIpResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  state?: string(name='State', description='The status of the secondary IP address. Valid values:

*   **active:** The secondary IP address is available.
*   **inuse:** The secondary IP address is in use.', example='active'),
}

model GetSpareIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpareIpResponseBody(name='body'),
}

async function getSpareIp(request: GetSpareIpRequest): GetSpareIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpareIp', 'POST', '/', 'json', false, 'json', request);
}

model ListAccelerateAreasRequest {
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListAccelerateAreasResponseBody = {
  areas?: [ 
    {
      areaId?: string(name='AreaId', description='The area ID.', example='cn-huabei'),
      localName?: string(name='LocalName', description='The area name.', example='华北'),
      regionList?: [ 
        {
          localName?: string(name='LocalName', description='The region name.', example='青岛'),
          regionId?: string(name='RegionId', description='The region ID.', example='cn-qingdao'),
        }
      ](name='RegionList', description='The regions in the acceleration area.'),
    }
  ](name='Areas', description='The information about the areas.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model ListAccelerateAreasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccelerateAreasResponseBody(name='body'),
}

async function listAccelerateAreas(request: ListAccelerateAreasRequest): ListAccelerateAreasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccelerateAreas', 'POST', '/', 'json', false, 'json', request);
}

model ListAcceleratorsRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekztkx4zwc****', position='Query'),
  state?: string(name='State', description='The status of the GA instance. Valid values:

*   **init**: The GA instance is being initialized.
*   **active**: The GA instance is available.
*   **configuring**: The GA instance is being configured.
*   **binding**: The GA instance is being associated.
*   **unbinding**: The GA instance is being disassociated.
*   **deleting**: The GA instance is being deleted.
*   **finacialLocked**: The GA instance is locked due to overdue payments.', example='active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the GA resource. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value of the GA resource. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='tag-value'),
    }
  ](name='Tag', description='The tags of the GA instance.', position='Query'),
}

model ListAcceleratorsResponseBody = {
  accelerators?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the GA instance. Unit: Mbit/s.', example='5'),
      bandwidthBillingType?: string(name='BandwidthBillingType', description='The bandwidth metering method. Valid values:

*   **BandwidthPackage:** metered based on bandwidth plans.
*   **CDT:** metered based on data transfers.', example='CDT'),
      basicBandwidthPackage?: {
        bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the basic bandwidth plan. Unit: Mbit/s.', example='2'),
        bandwidthType?: string(name='BandwidthType', description='The bandwidth type that is provided by the basic bandwidth plan. Valid values:

*   **Basic:** standard.
*   **Enhanced:** enhanced.
*   **Advanced:**: premium.', example='Basic'),
        instanceId?: string(name='InstanceId', description='The ID of the basic bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
      }(name='BasicBandwidthPackage', description='Details about the basic bandwidth plan that is associated with the GA instance.'),
      cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance that is associated with the GA instance.', example='cen-hjfufhjfuwff****'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates when the GA instance is created.', example='1650643200'),
      crossBorderMode?: string(name='CrossBorderMode', description='The type of cross-border acceleration. This parameter is returned for GA instances whose bandwidth metering method is pay-by-data-transfer (CDT).

Only **bpgPro** is returned, which indicates BGP (Multi-ISP) Pro lines.', example='bpgPro'),
      crossBorderStatus?: boolean(name='CrossBorderStatus', description='Indicates whether cross-border acceleration is enabled for the GA instance. Valid values:

*   **true**
*   **false**', example='false'),
      crossDomainBandwidthPackage?: {
        bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the cross-border acceleration bandwidth plan. Unit: Mbit/s.', example='2'),
        instanceId?: string(name='InstanceId', description='The ID of the cross-border acceleration bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
      }(name='CrossDomainBandwidthPackage', description='Details about the cross-border acceleration bandwidth plan that is associated with the GA instance.

This array is returned only for GA instances that are created on the International site (alibabacloud.com).'),
      ddosId?: string(name='DdosId', description='The ID of the Anti-DDoS Pro/Premium instance that is associated with the GA instance.', example='ddoscoo-cn-zz11vq7j****'),
      description?: string(name='Description', description='The description of the GA instance.', example='Accelerator'),
      dnsName?: string(name='DnsName', description='The canonical name (CNAME) that is assigned to the GA instance.', example='ga-bp15u1i2hmtbk8c3i****.aliyunga0019.com'),
      expiredTime?: long(name='ExpiredTime', description='The timestamp that indicates when the GA instance expires.', example='1653235200'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the GA instance. Only **PREPAY** is returned. This value indicates the subscription billing method.', example='PREPAY'),
      ipSetConfig?: {
        accessMode?: string(name='AccessMode', description='The access mode of the acceleration area. Valid values:

*   **UserDefine:** custom nearby access mode. You can select acceleration areas and regions based on your business requirements. GA allocates a separate EIP to each acceleration region.
*   **Anycast:** automatic nearby access mode. You do not need to specify an acceleration area. GA allocates an Anycast EIP to multiple regions across the globe. Users can connect to the nearest access point of the Alibaba Cloud global transmission network by sending requests to the Anycast EIP.', example='UserDefine'),
      }(name='IpSetConfig', description='The configurations of the acceleration area.'),
      name?: string(name='Name', description='The name of the GA instance.', example='Accelerator'),
      regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID to which the GA instance belongs.', example='rg-aekztkx4zwc****'),
      secondDnsName?: string(name='SecondDnsName', description='The CNAME that is used to associate the GA instance with an Anti-DDoS Pro/Premium instance.', example='ga-bp1f609c76zg6zuna****-1.aliyunga0047.com'),
      serviceId?: string(name='ServiceId', description='托管实例所属的服务方ID。
> 仅在**ServiceManaged**参数为**True**时有效。', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='是否为托管实例。取值：
- **true**：是托管资实例。
- **false**：不是托管实例。', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='托管策略动作名称，取值：

- **Create**：创建实例。

- **Update**：更新当前实例。

- **Delete**：删除当前实例。

- **Associate**：引用/被引用当前实例。

- **UserUnmanaged**：用户解托管实例

- **CreateChild**：在当前实例下创建子资源', example='Update'),
          childType?: string(name='ChildType', description='子资源类型，取值：

- **Listener**：监听资源。

- **IpSet**：加速地域资源。

- **EndpointGroup**：终端节点组资源。

- **ForwardingRule**：转发策略资源。

- **Endpoint**：终端节点资源。

- **EndpointGroupDestination**：自定义路由监听下的终端节点组协议映射资源。

- **EndpointPolicy**：自定义路由监听下的终端节点通行策略资源。

> 仅在**Action**参数为**CreateChild**时有效', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='托管策略动作是否被托管，取值：

- **true**：托管策略动作被托管，用户无权在托管实例下执行Action指定的操作。

- **false**：托管策略动作未被托管，用户可在托管实例下执行Action指定的操作。', example='false'),
        }
      ](name='ServiceManagedInfos', description='用户在此托管实例下可执行的动作策略列表。
> 仅在**ServiceManaged**参数为**True**时有效。
> - 当实例处于托管状态时，用户对实例的操作会受到限制，某些操作行为会被禁止。'),
      spec?: string(name='Spec', description='The specification of the GA instance. Valid values:

*   **1:** Small Ⅰ.
*   **2:** Small Ⅱ.
*   **3:** Small Ⅲ.
*   **5:** Medium Ⅰ.
*   **8:** Medium Ⅱ.
*   **10:** Medium Ⅲ.
*   **20:** Large Ⅰ.
*   **30:** Large Ⅱ.
*   **40:** Large Ⅲ.
*   **50:** Large Ⅳ.
*   **60:** Large Ⅴ.
*   **70:** Large Ⅵ.
*   **80:** Large VⅡ.
*   **90:** Large VⅢ.
*   **100:** Super Large Ⅰ.
*   **200:** Super Large Ⅱ.

>  GA instances Large III and above are not available by default. To use these specifications, contact your Alibaba Cloud account manager.

Each instance specification provides different capabilities. For more information, see [Instance specifications](~~153127~~).', example='1'),
      state?: string(name='State', description='The status of the GA instance. Valid values:

*   **init:** The GA instance is being initialized.
*   **active:** The GA instance is available.
*   **configuring**: The GA instance is being configured.
*   **binding:** The GA instance is being associated.
*   **unbinding:** The GA instance is being disassociated.
*   **deleting:** The GA instance is being deleted.
*   **finacialLocked:** The GA instance is locked due to overdue payments.', example='active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag N that is added to the resource.', example='test-key'),
          value?: string(name='Value', description='The value of tag N that is added to the resource.', example='tast-value'),
        }
      ](name='Tags', description='The tags that are added to the resource.'),
      type?: string(name='Type', description='An invalid parameter.', example='Invalid parameter'),
      upgradableStatus?: string(name='UpgradableStatus', description='Indicates whether the GA instance can be upgraded. Valid values:

*   **notUpgradable:** The GA instance does not need to be upgraded.
*   **upgradable:** The GA instance can be upgraded to the latest version.
*   **upgradeFailed:** The GA instance failed to be upgraded.', example='notUpgradable'),
    }
  ](name='Accelerators', description='Details about the GA instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListAcceleratorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAcceleratorsResponseBody(name='body'),
}

async function listAccelerators(request: ListAcceleratorsRequest): ListAcceleratorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccelerators', 'POST', '/', 'json', false, 'json', request);
}

model ListAclsRequest {
  aclIds?: [ string ](name='AclIds', description='The ID of the network ACL. You can specify up to 20 network ACL IDs in each request.', position='Query'),
  aclName?: string(name='AclName', description='The name of the network ACL. You can specify up to 10 network ACL names in each request.

The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test-acl', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first and only query, ignore this parameter.
*   If a subsequent query is to be performed, set the parameter to the value of NextToken that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2lgw4evw****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the network ACL. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value of the network ACL. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='tag-value'),
    }
  ](name='Tag', description='The tags of the resource.', position='Query'),
}

model ListAclsResponseBody = {
  acls?: [ 
    {
      aclId?: string(name='AclId', description='The ID of the network ACL.', example='nacl-hp34s2h0xx1ht4nwo****'),
      aclName?: string(name='AclName', description='The name of the network ACL.', example='test-acl'),
      aclStatus?: string(name='AclStatus', description='The status of the network ACL. Valid values:

*   **init**: The network ACL is being initialized.
*   **active**: The network ACL is available.
*   **configuring**: The network ACL is being configured.
*   **updating**: The network ACL is being updated.
*   **deleting:** The network ACL is being deleted.', example='active'),
      addressIPVersion?: string(name='AddressIPVersion', description='The IP version of the network ACL. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2lgw4evw****'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the network ACL.', example='tag-key'),
          value?: string(name='Value', description='The tag value of the network ACL.', example='tag-value'),
        }
      ](name='Tags', description='The tags of the network ACL.'),
    }
  ](name='Acls', description='The network ACLs.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is not returned, it indicates that no additional results exist.
*   If **NextToken** is returned, the value is the token that is used for the next query.', example='FFmyTO70t****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListAclsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAclsResponseBody(name='body'),
}

async function listAcls(request: ListAclsRequest): ListAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAcls', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationMonitorRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='１', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  searchValue?: string(name='SearchValue', description='The keyword that is used to search for origin probing tasks. You can enter a URL, an IP address, a GA instance ID, or a listener ID to perform a fuzzy match.', example='aliyun', position='Query'),
}

model ListApplicationMonitorResponseBody = {
  applicationMonitors?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance on which the origin probing task runs.', example='ga-bp1odcab8tmno0hdq****'),
      address?: string(name='Address', description='The URL or IP address that was probed.', example='https://www.aliyun.com'),
      detectEnable?: boolean(name='DetectEnable', description='Indicates whether the automatic diagnostics feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      detectThreshold?: int32(name='DetectThreshold', description='The threshold that is used to trigger the automatic diagnostics feature.', example='１'),
      detectTimes?: int32(name='DetectTimes', description='The number of times that are required to reach the threshold before the automatic diagnostics feature can be triggered.', example='１'),
      listenerId?: string(name='ListenerId', description='The ID of the listener on which the origin probing task runs.', example='lsr-bp1bpn0kn908w4nbw****'),
      optionsJson?: string(name='OptionsJson', description='The extended options of the listener protocol that is used by the origin probing task. The options vary based on the listener protocol.', example='{ "http_method": "get","header": "key:asd","acceptable_response_code": "500","cert_verify": true }'),
      silenceTime?: int32(name='SilenceTime', description='The silence period of the automatic diagnostics feature. This parameter indicates the interval at which the automatic diagnostics feature is triggered. If the availability rate does not return to normal after GA triggers an automatic diagnostic task, GA must wait until the silence period ends before GA can trigger another automatic diagnostic task.

If the number of consecutive times that the availability rate drops below the threshold of automatic diagnostics reaches the value of **DetectTimes** , the automatic diagnostics feature is triggered. The automatic diagnostics feature is not triggered again within the silence period even if the availability rate stays below the threshold. If the availability rate does not return to normal after the silence period ends, the automatic diagnostics feature is triggered again.

Unit: seconds.', example='300'),
      state?: string(name='State', description='The status of the origin probing task. Valid values:

*   **active:** The origin probing task is running.
*   **inactive:** The origin probing task is stopped.
*   **init:** The origin probing task is being initialized.
*   **deleting:** The origin probing task is being deleted.', example='active'),
      taskId?: string(name='TaskId', description='The origin probing task ID.', example='sm-bp1fpdjfju9k8yr1y****'),
      taskName?: string(name='TaskName', description='The origin probing task name.', example='task1'),
    }
  ](name='ApplicationMonitors', description='The list of origin probing tasks.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationMonitorResponseBody(name='body'),
}

async function listApplicationMonitor(request: ListApplicationMonitorRequest): ListApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationMonitorDetectResultRequest {
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1638288000', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1640164683', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskId?: string(name='TaskId', description='The origin probing task ID.', example='sm-bp1fpdjfju9k8yr1y****', position='Query'),
}

model ListApplicationMonitorDetectResultResponseBody = {
  applicationMonitorDetectResultList?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance on which the origin probing task runs.', example='ga-bp1odcab8tmno0hdq****'),
      content?: string(name='Content', description='The response content returned by the origin probing task.', example='502 BadGateway'),
      detail?: string(name='Detail', description='The description of the diagnostic result. Valid values:

*   **All forward nodes work well.**: The origin server is normal.
*   **Endpoint network error.**: The origin server is abnormal. You must check whether the origin server is running as expected.
*   **Public network error.**: An Internet error occurred. This refers to a network error that occurred when the client connects to the acceleration region.
*   **Ga internal error.**: An internal error occurred. For example, an exception occurred when a request is processed by GA.
*   **Ga has been deleted.**: The current GA instance is deleted.
*   **Ga state is not stable**: The current GA instance is in an unstable state, such as the Configuring state.
*   **Ga has no listener configuration.**: No listener is configured for the current GA instance.
*   **Missing endpoint configuration.**: No endpoint is configured.
*   **Missing acceleration region configuration.**: No acceleration region is configured.
*   **Missing endpointgroup configuration.**: No endpoint group is configured.', example='All forward nodes work well'),
      detectTime?: string(name='DetectTime', description='The time when the diagnosis of the origin probing task ends.', example='1663205460'),
      diagStatus?: string(name='DiagStatus', description='The diagnostic result of the origin probing task. Valid values:

*   **success:** The origin probing task succeeded.
*   **failed:** The origin probing task failed.', example='success'),
      listenerId?: string(name='ListenerId', description='The ID of the listener on which the origin probing task runs.', example='lsr-bp1bpn0kn908w4nbw****'),
      port?: string(name='Port', description='The listening port.', example='80'),
      protocol?: string(name='Protocol', description='The network transmission protocol that is used by the listener. Valid values:

*   **tcp:** TCP.
*   **udp:** UDP.
*   **http:** HTTP.
*   **https:** HTTPS.

>  UDP listeners do not support probing.', example='http'),
      statusCode?: string(name='StatusCode', description='The error code returned by the origin probing task.', example='502'),
      taskId?: string(name='TaskId', description='The origin probing task ID.', example='sm-bp1fpdjfju9k8yr1y****'),
    }
  ](name='ApplicationMonitorDetectResultList', description='Details about the diagnostic result of the origin probing task.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListApplicationMonitorDetectResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationMonitorDetectResultResponseBody(name='body'),
}

async function listApplicationMonitorDetectResult(request: ListApplicationMonitorDetectResultRequest): ListApplicationMonitorDetectResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationMonitorDetectResult', 'POST', '/', 'json', false, 'json', request);
}

model ListAvailableAccelerateAreasRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1yeeq8yfoyszmqy****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListAvailableAccelerateAreasResponseBody = {
  areas?: [ 
    {
      areaId?: string(name='AreaId', description='The ID of the acceleration area.', example='cn-huabei'),
      localName?: string(name='LocalName', description='The name of the acceleration area.', example='华北'),
      regionList?: [ 
        {
          chinaMainland?: boolean(name='ChinaMainland', description='Whether China Mainland.', example='false'),
          ispTypeList?: [ string ](name='IspTypeList', description='The line types of EIPs in the acceleration region.

*   **BGP**: BGP (Multi-ISP) lines
*   **BGP_PRO**: BGP (Multi-ISP) Pro lines

If you have the permissions to use single-ISP bandwidth, one of the following values may be returned:

*   **ChinaTelecom**: China Telecom (single ISP)
*   **ChinaUnicom**: China Unicom (single ISP)
*   **ChinaMobile**: China Mobile (single ISP)
*   **ChinaTelecom_L2**: China Telecom_L2 (single ISP)
*   **ChinaUnicom_L2**: China Unicom_L2 (single ISP)
*   **ChinaMobile_L2**: China Mobile_L2 (single ISP)

> Different acceleration regions support different single-ISP BGP lines.'),
          localName?: string(name='LocalName', description='The name of the acceleration region.', example='青岛'),
          regionId?: string(name='RegionId', description='The ID of the acceleration region.', example='cn-qingdao'),
          supportIpv6?: boolean(name='SupportIpv6', description='Ipv6 supported, Valid values:

- true
- false', example='true'),
        }
      ](name='RegionList', description='The information about acceleration regions.'),
    }
  ](name='Areas', description='The information about acceleration areas.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A9B4E54C-9CCD-4002-91A9-D38C6C209192'),
}

model ListAvailableAccelerateAreasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAvailableAccelerateAreasResponseBody(name='body'),
}

async function listAvailableAccelerateAreas(request: ListAvailableAccelerateAreasRequest): ListAvailableAccelerateAreasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableAccelerateAreas', 'POST', '/', 'json', false, 'json', request);
}

model ListAvailableBusiRegionsRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListAvailableBusiRegionsResponseBody = {
  regions?: [ 
    {
      chinaMainland?: boolean(name='ChinaMainland', description='Indicates whether the region is in the Chinese mainland. Valid values:

*   **true**
*   **false**', example='false'),
      localName?: string(name='LocalName', description='The region name.', example='China (Qingdao)'),
      pop?: boolean(name='Pop', description='Indicates whether the region is a point of presence (PoP) of Alibaba Cloud. Valid values:

*   **true**
*   **false**', example='false'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-qingdao'),
    }
  ](name='Regions', description='The information about the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
}

model ListAvailableBusiRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAvailableBusiRegionsResponseBody(name='body'),
}

async function listAvailableBusiRegions(request: ListAvailableBusiRegionsRequest): ListAvailableBusiRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableBusiRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListBandwidthPackagesRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2ry6mp2c****', position='Query'),
  state?: string(name='State', description='The status of the bandwidth plan. Valid values:

*   **init**: The bandwidth plan is being initialized.
*   **active**: The bandwidth plan is available.
*   **binded**: The bandwidth plan is associated.
*   **binding**: The bandwidth plan is being associated.
*   **unbinding**: The bandwidth plan is being disassociated.
*   **updating**: The bandwidth plan is being updated.
*   **finacialLocked**: The bandwidth plan is locked due to overdue payments.
*   **locked**: The bandwidth plan is locked.', example='active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the bandwidth plan. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='tag-key'),
      value?: string(name='Value', description='The tag value of the bandwidth plan. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='tag-value'),
    }
  ](name='Tag', description='The tag of the bandwidth plan.', position='Query'),
  type?: string(name='Type', description='The type of the bandwidth plan. Valid values:

*   **Basic**: a basic bandwidth plan
*   **CrossDomain**: a cross-border acceleration bandwidth plan

If you call this operation on the China site (aliyun.com), you can set Type only to **Basic**.', example='Basic', position='Query'),
}

model ListBandwidthPackagesResponseBody = {
  bandwidthPackages?: [ 
    {
      accelerators?: [ string ](name='Accelerators', description='The ID of the GA instance that is associated with the bandwidth plan.'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the bandwidth plan. Unit: Mbit/s.', example='2'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****'),
      bandwidthType?: string(name='BandwidthType', description='The type of the bandwidth. Valid values:

*   **Basic**: standard
*   **Enhanced**: enhanced
*   **Advanced**: premium', example='Basic'),
      billingType?: string(name='BillingType', description='The metering method that is used when you use the pay-as-you-go billing method.

*   **PayByTraffic**: pay-by-data-transfer
*   **PayBY95**: pay-by-95th-percentile', example='PayByTraffic'),
      cbnGeographicRegionIdA?: string(name='CbnGeographicRegionIdA', description='Area A of the cross-border acceleration bandwidth plan. Only **China-mainland** (the Chinese mainland) is returned.

This parameter is returned only if you call this operation on the international site (alibabacloud.com).', example='China-mainland'),
      cbnGeographicRegionIdB?: string(name='CbnGeographicRegionIdB', description='Area B of the cross-border acceleration bandwidth plan. Only **Global** (global) is returned.

This parameter is returned only if you call this operation on the international site (alibabacloud.com).', example='Global'),
      chargeType?: string(name='ChargeType', description='The billing method of the bandwidth plan. Only **PREPAY** is returned, which indicates the subscription billing method.', example='PREPAY'),
      createTime?: string(name='CreateTime', description='The time when the bandwidth plan was created.', example='1578966918000'),
      description?: string(name='Description', description='The description of the bandwidth plan.', example='testDescription'),
      expiredTime?: string(name='ExpiredTime', description='The timestamp when the bandwidth plan expires.', example='1578966918000'),
      name?: string(name='Name', description='The name of the bandwidth plan.', example='testName'),
      ratio?: int32(name='Ratio', description='The percentage of the minimum bandwidth guaranteed if the pay-by-95th-percentile metering method is used.', example='30'),
      regionId?: string(name='RegionId', description='The ID of the region where the GA instance is deployed. **cn-hangzhou** is returned.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2ry6mp2c****'),
      state?: string(name='State', description='The status of the bandwidth plan. Valid values:

*   **init**: The bandwidth plan is being initialized.
*   **active**: The bandwidth plan is available.
*   **binded**: The bandwidth plan is associated.
*   **binding**: The bandwidth plan is being associated.
*   **unbinding**: The bandwidth plan is being disassociated.
*   **updating**: The bandwidth plan is being updated.
*   **finacialLocked**: The bandwidth plan is locked due to overdue payments.
*   **locked**: The bandwidth plan is locked.', example='active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the bandwidth plan.', example='tag-key'),
          value?: string(name='Value', description='The tag value of the bandwidth plan.', example='tag-value'),
        }
      ](name='Tags', description='The tag of the bandwidth plan.'),
      type?: string(name='Type', description='The type of the bandwidth plan. Valid values:

*   **Basic**: a basic bandwidth plan
*   **CrossDomain**: a cross-border acceleration bandwidth plan

If you call this operation on the China site (aliyun.com), only **Basic** is returned.', example='Basic'),
    }
  ](name='BandwidthPackages', description='Details about the bandwidth plans.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B6DBBB0-2D01-4C6A-A384-4129266E6B78'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBandwidthPackagesResponseBody(name='body'),
}

async function listBandwidthPackages(request: ListBandwidthPackagesRequest): ListBandwidthPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBandwidthPackages', 'POST', '/', 'json', false, 'json', request);
}

model ListBandwidthackagesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListBandwidthackagesResponseBody = {
  bandwidthPackages?: [ 
    {
      accelerators?: [ string ](name='Accelerators', description='The ID of the GA instance that is associated with the bandwidth plan.'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the bandwidth plan. Unit: Mbit/s.', example='2'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****'),
      chargeType?: string(name='ChargeType', description='The billing method of the bandwidth plan. Only **PREPAY** is returned, which indicates the subscription billing method.', example='PREPAY'),
      createTime?: string(name='CreateTime', description='The timestamp when the bandwidth plan was created.', example='1578966918000'),
      description?: string(name='Description', description='The description of the bandwidth plan.', example='testDescription'),
      expiredTime?: string(name='ExpiredTime', description='The timestamp when the bandwidth plan expires.', example='1578966918000'),
      name?: string(name='Name', description='The name of the GA instance.', example='Accelerator'),
      regionId?: string(name='RegionId', description='The ID of the request.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzzwgr7vz2liy'),
      state?: string(name='State', description='The state of the bandwidth plan. Valid values:

*   **init**: The bandwidth plan is being initialized.
*   **active**: The bandwidth plan is available.
*   **binded**: The bandwidth plan is associated with a GA instance.
*   **binding**: The bandwidth plan is being associated.
*   **unbinding**: The bandwidth plan is being disassociated.
*   **updating**: The bandwidth plan is being updated.
*   **finacialLocked**: The bandwidth plan is locked due to overdue payments.
*   **Locked**: The bandwidth plan is locked.', example='active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the bandwidth plan.', example='tag-key'),
          value?: string(name='Value', description='The tag value of the bandwidth plan.', example='tag-value'),
        }
      ](name='Tags', description='The tags of the bandwidth plans.'),
    }
  ](name='BandwidthPackages', description='Details about the bandwidth plans.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B6DBBB0-2D01-4C6A-A384-4129266E6B78'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListBandwidthackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBandwidthackagesResponseBody(name='body'),
}

async function listBandwidthackages(request: ListBandwidthackagesRequest): ListBandwidthackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBandwidthackages', 'POST', '/', 'json', false, 'json', request);
}

model ListBasicAccelerateIpEndpointRelationsRequest {
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address.', example='gaip-bp1****', position='Query'),
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListBasicAccelerateIpEndpointRelationsResponseBody = {
  accelerateIpEndpointRelations?: [ 
    {
      accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address.', example='gaip-bp1****'),
      acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp1miyl2kn2racucvegr5'),
      endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
      endpointName?: string(name='EndpointName', description='The name of the endpoint.', example='ep01'),
      endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, **EndpointSubAddress** returns the primary or secondary private IP address of the primary ENI.
*   If the endpoint type is **ENI**, **EndpointSubAddress** returns the primary or secondary private IP address of the secondary ENI.
*   If the endpoint type is **NLB**, **EndpointSubAddress** returns the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
      endpointSubAddressType?: string(name='EndpointSubAddressType', description='The type of the secondary address of the endpoint.

*   **primary**: a primary private IP address.
*   **secondary**: a secondary private IP address.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**. If the endpoint type is set to **NLB**, **primary** is returned.', example='primary'),
      endpointType?: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: elastic network interface (ENI).
*   **SLB**: Classic Load Balancer (CLB) instance.
*   **ECS**: Elastic Compute Service (ECS) instance.
*   **NLB**: Network Load Balancer (NLB) instance.', example='NLB'),
      endpointZoneId?: string(name='EndpointZoneId', description='The ID of the zone where the endpoint is created.

This parameter is returned only when the endpoint type is **NLB**.', example='cn-hangzhou-g'),
      ipAddress?: string(name='IpAddress', description='The accelerated IP address of the basic GA instance.', example='116.132.XX.XX'),
      state?: string(name='State', description='The association status between the accelerated IP address and endpoint.

A value of **active** indicates that the accelerated IP address is associated with the endpoint.', example='active'),
    }
  ](name='AccelerateIpEndpointRelations', description='A list of accelerated IP addresses and the endpoints with which the accelerated IP addresses are associated.'),
  maxResults?: string(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** is not returned, it indicates that no additional results exist.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListBasicAccelerateIpEndpointRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBasicAccelerateIpEndpointRelationsResponseBody(name='body'),
}

async function listBasicAccelerateIpEndpointRelations(request: ListBasicAccelerateIpEndpointRelationsRequest): ListBasicAccelerateIpEndpointRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBasicAccelerateIpEndpointRelations', 'POST', '/', 'json', false, 'json', request);
}

model ListBasicAccelerateIpsRequest {
  accelerateIpAddress?: string(name='AccelerateIpAddress', description='The accelerated IP address of the basic GA instance.', example='116.132.XX.XX', position='Query'),
  accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address of the basic GA instance.', example='gaip-bp1****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListBasicAccelerateIpsResponseBody = {
  accelerateIps?: [ 
    {
      accelerateIpAddress?: string(name='AccelerateIpAddress', description='The accelerated IP address of the basic GA instance.', example='116.132.XX.XX'),
      accelerateIpId?: string(name='AccelerateIpId', description='The ID of the accelerated IP address of the basic GA instance.', example='gaip-bp1****'),
      acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
      ipSetId?: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11r5jb8ogp122xl****'),
      state?: string(name='State', description='The status of the accelerated IP address. Valid values:

*   **active**: The accelerated IP address is available.
*   **binding**: The accelerated IP address is being associated.
*   **bound**: The accelerated IP address is associated.
*   **unbinding**: The accelerated IP address is being disassociated.
*   **deleting**: The accelerated IP address is being deleted.

>  This parameter is unavailable when the accelerated IP address is being created.', example='active'),
    }
  ](name='AccelerateIps', description='The accelerated IP addresses of the basic GA instance.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListBasicAccelerateIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBasicAccelerateIpsResponseBody(name='body'),
}

async function listBasicAccelerateIps(request: ListBasicAccelerateIpsRequest): ListBasicAccelerateIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBasicAccelerateIps', 'POST', '/', 'json', false, 'json', request);
}

model ListBasicAcceleratorsRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the basic GA instance belongs. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the basic GA instance belongs.', example='rg-aekzrnd67gq****', position='Query'),
  state?: string(name='State', description='The state of the basic GA instance. Valid values:

*   **init**: The basic GA instance is being initialized.
*   **active**: The basic GA instance is available.
*   **configuring**: The basic GA instance is being configured.
*   **binding**: The basic GA instance is being associated.
*   **unbinding**: The basic GA instance is being disassociated.
*   **deleting**: The basic GA instance is being deleted.
*   **finacialLocked**: The basic GA instance is locked due to overdue payments.', example='active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the basic GA instance. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='Keytest'),
      value?: string(name='Value', description='The value of tag N of the basic GA instance. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='Valuetest'),
    }
  ](name='Tag', description='The tags of the GA instance.', position='Query'),
}

model ListBasicAcceleratorsResponseBody = {
  accelerators?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
      bandwidthBillingType?: string(name='BandwidthBillingType', description='The bandwidth billing method.

*   **BandwidthPackage**: billed based on bandwidth plans.
*   **CDT**: billed through Cloud Data Transfer (CDT) and based on data transfer.
*   **CDT95**: billed through CDT and based on the 95th percentile bandwidth. This bandwidth billing method is available only for users that are included in the whitelist.', example='BandwidthPackage'),
      basicBandwidthPackage?: {
        bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the basic bandwidth plan. Unit: Mbit/s.', example='2'),
        bandwidthType?: string(name='BandwidthType', description='The type of the bandwidth that is provided by the basic bandwidth plan.

*   **Basic**: basic
*   **Enhanced**: enhanced
*   **Advanced**: premium', example='Basic'),
        instanceId?: string(name='InstanceId', description='The ID of the basic bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
      }(name='BasicBandwidthPackage', description='Details about the basic bandwidth plan that is associated with the basic GA instance.'),
      basicEndpointGroupId?: string(name='BasicEndpointGroupId', description='The ID of the endpoint group that is associated with the basic GA instance.', example='epg-bp1dmlohjjz4kqaun****'),
      basicIpSetId?: string(name='BasicIpSetId', description='The ID of the acceleration region where the basic GA instance is deployed.', example='ips-bp11ilwqjdkjeg9r7****'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates when the basic GA instance was created.

The time follows the UNIX time format. It is the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1637734547'),
      crossBorderStatus?: boolean(name='CrossBorderStatus', description='Indicates whether cross-border acceleration is enabled for the GA instance. Valid values:

*   **true**
*   **false**', example='false'),
      crossDomainBandwidthPackage?: {
        bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the cross-region acceleration bandwidth plan. Unit: Mbit/s.', example='2'),
        instanceId?: string(name='InstanceId', description='The ID of the cross-region acceleration bandwidth plan.', example='gbwp-bp1d8xk8bg139j0fw****'),
      }(name='CrossDomainBandwidthPackage', description='Details about the cross-region acceleration bandwidth plan that is associated with the GA instance.

This parameter is returned only when you call this operation on the International site (alibabacloud.com).'),
      description?: string(name='Description', description='The description of the basic GA instance.', example='BasicAccelerator'),
      expiredTime?: long(name='ExpiredTime', description='The timestamp that indicates when the basic GA instance expires.

The time follows the UNIX time format. It is the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1640326547'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the basic GA instance. Only **PREPAY** is returned, which indicates the subscription billing method.', example='PREPAY'),
      name?: string(name='Name', description='The name of the basic GA instance.', example='BasicAccelerator'),
      regionId?: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the basic GA instance belongs.', example='rg-aekzrnd67gq****'),
      state?: string(name='State', description='The state of the basic GA instance.

*   **init**: The basic GA instance is being initialized.
*   **active**: The basic GA instance is available.
*   **configuring**: The basic GA instance is being configured.
*   **binding**: The basic GA instance is being associated.
*   **unbinding**: The GA instance is being disassociated.
*   **deleting**: The basic GA instance is being deleted.
*   **finacialLocked**: The basic GA instance is locked due to overdue payments.', example='active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the basic GA instance.', example='Keytest'),
          value?: string(name='Value', description='The tag value of the basic GA instance.', example='Valuetest'),
        }
      ](name='Tags', description='The tags of the basic GA instance.'),
      type?: string(name='Type', description='This parameter is invalid.', example='None'),
    }
  ](name='Accelerators', description='The information about basic GA instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', description='The total number of basic GA instances returned.', example='1'),
}

model ListBasicAcceleratorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBasicAcceleratorsResponseBody(name='body'),
}

async function listBasicAccelerators(request: ListBasicAcceleratorsRequest): ListBasicAcceleratorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBasicAccelerators', 'POST', '/', 'json', false, 'json', request);
}

model ListBasicEndpointsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint that you want to query belongs.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that you want to query.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  endpointType?: string(name='EndpointType', description='The type of endpoint that you want to query. Valid values:

*   **ENI**: elastic network interface (ENI).
*   **SLB**: Classic Load Balancer (CLB) instance.
*   **ECS**: Elastic Compute Service (ECS) instance.
*   **NLB**: Network Load Balancer (NLB) instance.', example='ENI', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  name?: string(name='Name', description='The name of the endpoint that you want to query.

The name must be 2 to 64 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='ep01', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListBasicEndpointsResponseBody = {
  endpoints?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****'),
      endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint belongs.', example='epg-bp1dmlohjjz4kqaun****'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint that is associated with the basic GA instance.', example='ep-bp14sz7ftcwwjgrdm****'),
      endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is returned if the endpoint type is **ECS**, **ENI**, or **NLB**.

*   If the endpoint type is **ECS**, **EndpointSubAddress** returns the primary or secondary private IP address of the primary ENI.
*   If the endpoint type is **ENI**, **EndpointSubAddress** returns the primary or secondary private IP address of the secondary ENI.
*   If the endpoint type is **NLB**, **EndpointSubAddress** returns the primary private IP address of the NLB backend server.', example='172.16.XX.XX'),
      endpointSubAddressType?: string(name='EndpointSubAddressType', description='The secondary address type of the endpoint.

*   **primary**: a primary private IP address.
*   **secondary**: a secondary private IP address.

This parameter is returned if the type of the endpoint is set to **ECS**, **ENI**, or **NLB**. If the endpoint type is set to **NLB**, **primary** is returned.', example='primary'),
      endpointType?: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: ENI.
*   **SLB**: CLB instance.
*   **ECS**: ECS instance.
*   **NLB**: NLB instance.', example='ENI'),
      endpointZoneId?: string(name='EndpointZoneId', description='The zone ID of the endpoint.

This parameter is returned only when the endpoint type is set to **NLB**.', example='cn-hangzhou-g'),
      name?: string(name='Name', description='The name of the endpoint.', example='ep01'),
      state?: string(name='State', description='The status of the endpoint. Valid values:

*   **init**: The endpoint is being initialized.
*   **active**: The endpoint is available.
*   **updating**: The endpoint is being configured.
*   **binding**: The endpoint is being associated.
*   **unbinding**: The endpoint is being disassociated.
*   **deleting**: The endpoint is being deleted.
*   **bound**: The endpoint is associated.', example='active'),
    }
  ](name='Endpoints', description='The endpoints that are associated with the basic GA instance.'),
  maxResults?: string(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** is not returned, it indicates that no additional results exist.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListBasicEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBasicEndpointsResponseBody(name='body'),
}

async function listBasicEndpoints(request: ListBasicEndpointsRequest): ListBasicEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBasicEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model ListBusiRegionsRequest {
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListBusiRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionId?: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Only **cn-hangzhou** is returned.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The information of the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model ListBusiRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBusiRegionsResponseBody(name='body'),
}

async function listBusiRegions(request: ListBusiRegionsRequest): ListBusiRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBusiRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListCommonAreasRequest {
  ipVersion?: string(name='IpVersion', description='The IP version used to connect to the GA instance. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4', position='Query'),
  isEpg?: boolean(name='IsEpg', description='Specifies whether to query regions where endpoint groups of GA can be deployed. Valid values:

*   **true**: yes
*   **false** (default): no', example='true', position='Query'),
  isIpSet?: boolean(name='IsIpSet', description='Specifies whether to query regions supported by GA. Valid values:

*   **true**
*   **false** (default)', example='true', position='Query'),
}

model ListCommonAreasResponseBody = {
  areas?: [ 
    {
      areaId?: string(name='AreaId', description='The area ID.', example='cn-huabei'),
      localName?: string(name='LocalName', description='The area name.', example='North China'),
      regionList?: [ 
        {
          localName?: string(name='LocalName', description='The region name.', example='China (Qingdao)'),
          regionId?: string(name='RegionId', description='The region ID.', example='cn-qingdao'),
        }
      ](name='RegionList', description='The information about the regions.'),
    }
  ](name='Areas', description='The information about the areas.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
}

model ListCommonAreasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCommonAreasResponseBody(name='body'),
}

/**
  * You can call this operation to query the acceleration areas and regions that you can specify on the wizard page of Global Accelerator (GA) and for free-trial GA instances. You can filter acceleration areas and regions based on specified conditions.
  *
 */
async function listCommonAreas(request: ListCommonAreasRequest): ListCommonAreasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommonAreas', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomRoutingEndpointGroupDestinationsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp16jdc00bhe97sr5****', position='Query'),
  fromPort?: int32(name='FromPort', description='The start port of the backend service port range of the endpoint group.

Valid values: **1** to **65499**. The **FromPort** value must be smaller than or equal to the **ToPort** value.', example='80', position='Query'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  protocols?: [ string ](name='Protocols', description='The backend service protocols of the endpoint group. Valid values:

- **TCP**: TCP.
- **UDP**: UDP.
- **TCP,UDP**: TCP and UDP.

If this parameter is empty, all types of protocols are queried.

You can specify up to 10 protocols.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  toPort?: int32(name='ToPort', description='The end port of the backend service port range of the endpoint group.

Valid values: **1** to **65499**. The **FromPort** value must be smaller than or equal to the **ToPort** value.', example='80', position='Query'),
}

model ListCustomRoutingEndpointGroupDestinationsResponseBody = {
  destinations?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
      destinationId?: string(name='DestinationId', description='The ID of the endpoint group mapping configuration.', example='dst-123abc****'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
      fromPort?: int32(name='FromPort', description='The start port of the backend service port range of the endpoint group.', example='80'),
      listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
      protocols?: [ string ](name='Protocols', description='The backend service protocol of the endpoint group.

*   **TCP**: TCP
*   **UDP**: UDP
*   **TCP,UDP**: TCP and UDP'),
      serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- **true**

- **false**', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='Managed policy action name, Valid values:

Create
Update
Delete
Associate
UserUnmanaged
CreateChild', example='Update'),
          childType?: string(name='ChildType', description='Sub resource type, Valid values:

Listener
IpSet
EndpointGroup
ForwardingRule
Endpoint
EndpointGroupDestination
EndpointPolicy

> Only valid when the Action parameter is CreateChild.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- **true**: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- **false**: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
      toPort?: int32(name='ToPort', description='The end port of the backend service port range of the endpoint group.', example='80'),
    }
  ](name='Destinations', description='The details about the endpoint group mapping configurations.'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListCustomRoutingEndpointGroupDestinationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomRoutingEndpointGroupDestinationsResponseBody(name='body'),
}

async function listCustomRoutingEndpointGroupDestinations(request: ListCustomRoutingEndpointGroupDestinationsRequest): ListCustomRoutingEndpointGroupDestinationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomRoutingEndpointGroupDestinations', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomRoutingEndpointGroupsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****', position='Query'),
  listenerId?: string(name='ListenerId', description='The ID of the custom routing listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListCustomRoutingEndpointGroupsResponseBody = {
  endpointGroups?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
      description?: string(name='Description', description='The description of the endpoint group.', example='EndpointGroup'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
      endpointGroupIpList?: [ string ](name='EndpointGroupIpList', description='The list of endpoint group IP addresses.'),
      endpointGroupRegion?: string(name='EndpointGroupRegion', description='The ID of the region where the endpoint group is created.', example='cn-hangzhou'),
      endpointGroupUnconfirmedIpList?: [ string ](name='EndpointGroupUnconfirmedIpList', description='The endpoint group IP addresses to be confirmed after the GA instance is upgraded.'),
      listenerId?: string(name='ListenerId', description='The ID of the custom routing listener.', example='lsr-bp1bpn0kn908w4nbw****'),
      name?: string(name='Name', description='The name of the endpoint group.', example='group1'),
      serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='Managed policy action name, Valid values:
- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
          childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
      state?: string(name='State', description='The status of the endpoint group.

*   **init**: being initialized
*   **active**: running as expected
*   **updating**: being updated
*   **deleting**: being deleted', example='active'),
    }
  ](name='EndpointGroups', description='The configuration information about the endpoint groups.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListCustomRoutingEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomRoutingEndpointGroupsResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code for different SDKs.](https://api.aliyun.com/#product=Ga\\&api=ListCustomRoutingEndpointGroups\\&type=RPC\\&version=2019-11-20)
  *
 */
async function listCustomRoutingEndpointGroups(request: ListCustomRoutingEndpointGroupsRequest): ListCustomRoutingEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomRoutingEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomRoutingEndpointTrafficPoliciesRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance to which the traffic policies belong.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  address?: string(name='Address', description='The IP address of the traffic destination.', example='10.0.XX.XX', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the traffic policies belong.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint to which the traffic policies belong.', example='ep-bp16jdc00bhe97sr5****', position='Query'),
  listenerId?: string(name='ListenerId', description='The ID of the listener to which the traffic policies belong.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListCustomRoutingEndpointTrafficPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  policies?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance with which the endpoint is associated.', example='ga-bp1odcab8tmno0hdq****'),
      address?: string(name='Address', description='The IP address of the traffic destination.', example='10.0.XX.XX'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint belongs.', example='lsr-bp1bpn0kn908w4nbw****'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint to which the traffic destination belongs.', example='ep-bp14sz7ftcwwjgrdm****'),
      listenerId?: string(name='ListenerId', description='The ID of the custom routing listener with which the endpoint is associated.', example='lsr-bp1bpn0kn908w4nbw****'),
      policyId?: string(name='PolicyId', description='The traffic policy ID.', example='ply-bp1dmlohjjz4kqaun****'),
      portRanges?: [ 
        {
          fromPort?: int32(name='FromPort', description='The first port of the port range used by the traffic destination to process requests.', example='80'),
          toPort?: int32(name='ToPort', description='The last port of the port range used by the traffic destination to process requests.', example='80'),
        }
      ](name='PortRanges', description='The port range of the traffic policy.'),
      serviceId?: string(name='ServiceId', description='The ID of the service that manages the GA instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**: The GA instance is managed.
*   **false**: The GA instance is not managed.', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='The name of the action on the managed instance. Valid values:

*   **Create**: Create an instance.
*   **Update**: Update the current instance.
*   **Delete**: Delete the current instance.
*   **Associate**: Reference the current instance.
*   **UserUnmanaged**: Unmanage the instance.
*   **CreateChild**: Create a child resource in the current instance.', example='Update'),
          childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener.
*   **IpSet**: acceleration region.
*   **EndpointGroup**: endpoint group.
*   **ForwardingRule**: forwarding rule.
*   **Endpoint**: endpoint.
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener.
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener.

>  This parameter takes effect only if **Action** is set to **CreateChild**.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and you cannot perform the specified actions on the managed instance.
*   **false**: The specified actions are not managed, and you can perform the specified actions on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='The actions that you can perform on the managed instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.

*   You can perform only specific actions on a managed instance.'),
    }
  ](name='Policies', description='A list of traffic policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListCustomRoutingEndpointTrafficPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomRoutingEndpointTrafficPoliciesResponseBody(name='body'),
}

async function listCustomRoutingEndpointTrafficPolicies(request: ListCustomRoutingEndpointTrafficPoliciesRequest): ListCustomRoutingEndpointTrafficPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomRoutingEndpointTrafficPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomRoutingEndpointsRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The endpoint group ID.', example='epg-bp16jdc00bhe97sr5****', position='Query'),
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListCustomRoutingEndpointsResponseBody = {
  endpoints?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance with which the endpoint is associated.', example='ga-bp1odcab8tmno0hdq****'),
      endpoint?: string(name='Endpoint', description='The name of the vSwitch that is specified as an endpoint.', example='vsw-test01'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint belongs.', example='epg-bp16jdc00bhe97sr5****'),
      endpointId?: string(name='EndpointId', description='The endpoint ID.', example='ep-bp14sz7ftcwwjgrdm****'),
      listenerId?: string(name='ListenerId', description='The ID of the listener to which the endpoint belongs.', example='lsr-bp1bpn0kn908w4nbw****'),
      serviceId?: string(name='ServiceId', description='The ID of the service that manages the GA instance.

>  This parameter is valid only if **ServiceManaged** is set to **True**.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**
*   **false**', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='The name of the action performed on the managed instance. Valid values:

*   **Create**
*   **Update**
*   **Delete**
*   **Associate**
*   **UserUnmanaged**
*   **CreateChild**', example='Update'),
          childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener
*   **IpSet**: acceleration region
*   **EndpointGroup**: endpoint group
*   **ForwardingRule**: forwarding rule
*   **Endpoint**: endpoint
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener

>  This parameter is valid only if **Action** is set to **CreateChild**.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and users cannot perform the specified actions on the managed resource.
*   **false**: The specified actions are not managed, and users can perform the specified actions on the managed resource.', example='false'),
        }
      ](name='ServiceManagedInfos', description='The actions that users can perform on the managed instance.

>  This parameter is valid only if **ServiceManaged** is set to **True**.

*   Users can perform only specific actions on a managed instance.'),
      trafficToEndpointPolicy?: string(name='TrafficToEndpointPolicy', description='The access policy of traffic that is destined for the endpoint. Valid values:

*   **AllowAll**: allows all traffic to the endpoint.
*   **DenyAll**: denies all traffic to the endpoint.
*   **AllowCustom**: allows traffic only to specified destinations.', example='DenyAll'),
      type?: string(name='Type', description='The backend service type of the endpoint.

Only **PrivateSubNet** may be returned, which indicates a private CIDR block.', example='PrivateSubNet'),
    }
  ](name='Endpoints', description='The information about the endpoints.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListCustomRoutingEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomRoutingEndpointsResponseBody(name='body'),
}

async function listCustomRoutingEndpoints(request: ListCustomRoutingEndpointsRequest): ListCustomRoutingEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomRoutingEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomRoutingPortMappingsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp16jdc00bhe97sr5****', position='Query'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListCustomRoutingPortMappingsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  portMappings?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
      acceleratorPort?: int32(name='AcceleratorPort', description='The acceleration port.', example='3000'),
      destinationSocketAddress?: {
        ipAddress?: string(name='IpAddress', description='The service IP address of the backend instance.', example='10.0.XX.XX'),
        port?: int32(name='Port', description='The service port of the backend instance.', example='443'),
      }(name='DestinationSocketAddress', description='The service IP address and port of the backend instance.'),
      destinationTrafficState?: string(name='DestinationTrafficState', description='The access policy of traffic for the backend instance. Valid values:

*   **allow**: allows traffic to the backend instance.
*   **deny**: denies traffic to the backend instance.', example='allow'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
      endpointGroupRegion?: string(name='EndpointGroupRegion', description='The ID of the region in which the endpoint group resides.', example='us-west-1'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
      listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
      protocols?: [ string ](name='Protocols', description='The protocol of the backend service.

*   **tcp**: TCP
*   **udp**: UDP'),
      vswitch?: string(name='Vswitch', description='The name of the endpoint (vSwitch).', example='vsw-test01'),
    }
  ](name='PortMappings', description='Details about the port mapping table.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListCustomRoutingPortMappingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomRoutingPortMappingsResponseBody(name='body'),
}

/**
  * After you configure a custom routing listener for a Global Accelerator (GA) instance, the instance generates a port mapping table based on the listener port range, backend service protocols and port ranges of the associated endpoint groups, and IP addresses of endpoints (vSwitches). The custom routing listener forwards client requests to specified IP addresses and ports in the vSwitches based on the port mapping table. This operation is used to query the generated port mapping table.
  *
 */
async function listCustomRoutingPortMappings(request: ListCustomRoutingPortMappingsRequest): ListCustomRoutingPortMappingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomRoutingPortMappings', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomRoutingPortMappingsByDestinationRequest {
  destinationAddress: string(name='DestinationAddress', description='The service IP address of the backend instance.', example='10.0.XX.XX', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint to which the backend instance belongs.', example='ep-bp16jdc00bhe97sr5****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListCustomRoutingPortMappingsByDestinationResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  portMappings?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
      acceleratorPort?: int32(name='AcceleratorPort', description='The acceleration port.', example='3000'),
      destinationSocketAddress?: {
        ipAddress?: string(name='IpAddress', description='The service IP address of the backend instance.', example='10.0.XX.XX'),
        port?: int32(name='Port', description='The service port of the backend instance.', example='443'),
      }(name='DestinationSocketAddress', description='The service IP address and port of the backend instance.'),
      destinationTrafficState?: string(name='DestinationTrafficState', description='The access policy of traffic for the backend instance.

*   **allow**: allows traffic to the backend instance.
*   **deny**: denies all traffic to the backend instance.', example='allow'),
      endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp14sz7ftcwwjgrdm****'),
      endpointGroupRegion?: string(name='EndpointGroupRegion', description='The ID of the region in which the endpoint group resides.', example='us-west-1'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
      listenerId?: string(name='ListenerId', description='The ID of the listener.', example='ga-bp1odcab8tmno0hdq****'),
      protocols?: [ string ](name='Protocols', description='The protocol of the backend service.

*   **tcp**: TCP
*   **udp**: UDP'),
      vswitch?: string(name='Vswitch', description='The name of the endpoint (vSwitch).', example='vsw-test01'),
    }
  ](name='PortMappings', description='Details about the port mapping table.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='String	04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListCustomRoutingPortMappingsByDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomRoutingPortMappingsByDestinationResponseBody(name='body'),
}

async function listCustomRoutingPortMappingsByDestination(request: ListCustomRoutingPortMappingsByDestinationRequest): ListCustomRoutingPortMappingsByDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomRoutingPortMappingsByDestination', 'POST', '/', 'json', false, 'json', request);
}

model ListDomainsRequest {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance that you want to query.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  domain?: string(name='Domain', description='The accelerated domain name that you want to query.', example='www.example.com', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  state?: string(name='State', description='The ICP filing status of the accelerated domain name that you want to query. Valid values:

*   **illegal:** The domain name is illegal.
*   **inactive:** The domain name has not completed ICP filing.
*   **active:** The domain name has a valid ICP filing.
*   **unknown:** The ICP filing status is unknown.', example='active', position='Query'),
}

model ListDomainsResponseBody = {
  domains?: [ 
    {
      accelerators?: [ 
        {
          acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
          name?: string(name='Name', description='The name of the GA instance.', example='Accelerator'),
          serviceId?: string(name='ServiceId', description='The ID of the service that manages the GA instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.', example='ALB'),
          serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**: The GA instance is managed.
*   **false**: The GA instance is not managed.', example='true'),
          serviceManagedInfos?: [ 
            {
              action?: string(name='Action', description='The name of the action on the managed instance. Valid values:

*   **Create**: Create an instance.
*   **Update**: Update the current instance.
*   **Delete**: Delete the current instance.
*   **Associate**: Reference the current instance.
*   **UserUnmanaged**: Unmanage the instance.
*   **CreateChild**: Create a child resource in the current instance.', example='Update'),
              childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener.
*   **IpSet**: acceleration region.
*   **EndpointGroup**: endpoint group.
*   **ForwardingRule**: forwarding rule.
*   **Endpoint**: endpoint.
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener.
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener.

>  This parameter takes effect only if **Action** is set to **CreateChild**.', example='Listener'),
              isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and you cannot perform the specified actions on the managed instance.
*   **false**: The specified actions are not managed, and you can perform the specified actions on the managed instance.', example='false'),
            }
          ](name='ServiceManagedInfos', description='The actions that you can perform on the managed instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.

*   You can perform only specific actions on a managed instance.'),
        }
      ](name='Accelerators', description='A list of GA instances.'),
      domain?: string(name='Domain', description='The accelerated domain name.', example='www.example.com'),
      state?: string(name='State', description='The ICP filing status of the accelerated domain name. Valid values:

*   **illegal:** The domain name is illegal.
*   **inactive:** The domain name has not completed ICP filing.
*   **active:** The domain name has a valid ICP number.
*   **unknown:** The ICP filing status is unknown.', example='active'),
    }
  ](name='Domains', description='A list of accelerated domain names.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomains', 'POST', '/', 'json', false, 'json', request);
}

model ListEndpointGroupIpAddressCidrBlocksRequest {
  endpointGroupRegion: string(name='EndpointGroupRegion', description='The region ID of the endpoint group.', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListEndpointGroupIpAddressCidrBlocksResponseBody = {
  endpointGroupRegion?: string(name='EndpointGroupRegion', description='The region ID of the endpoint group.', example='cn-hangzhou'),
  ipAddressCidrBlocks?: [ string ](name='IpAddressCidrBlocks', description='The CIDR blocks.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B6DBBB0-2D01-4C6A-A384-4129266E6B78'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the endpoint group belongs.', example='rg-aekztkx4zwc****'),
  state?: string(name='State', description='The status of the endpoint group.', example='active'),
}

model ListEndpointGroupIpAddressCidrBlocksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEndpointGroupIpAddressCidrBlocksResponseBody(name='body'),
}

async function listEndpointGroupIpAddressCidrBlocks(request: ListEndpointGroupIpAddressCidrBlocksRequest): ListEndpointGroupIpAddressCidrBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEndpointGroupIpAddressCidrBlocks', 'POST', '/', 'json', false, 'json', request);
}

model ListEndpointGroupsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  accessLogSwitch?: string(name='AccessLogSwitch', description='Specifies whether the access logging feature is enabled. Default value: off. Valid values:

*   **on**: The access logging feature is enabled.
*   **off**: The access logging feature is disabled.', example='on', position='Query'),
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp16jdc00bhe97sr5****', position='Query'),
  endpointGroupType?: string(name='EndpointGroupType', description='The type of the endpoint group. Valid values:

*   **default**: a default endpoint group
*   **virtual**: a virtual endpoint group
*   If you leave this parameter empty, all default and virtual endpoint groups are queried.', example='virtual', position='Query'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the Endpoint Group. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='test-key'),
      value?: string(name='Value', description='The tag value of the Endpoint Group. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='test-value'),
    }
  ](name='Tag', description='The name of the endpoint group.', position='Query'),
}

model ListEndpointGroupsResponseBody = {
  endpointGroups?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****'),
      description?: string(name='Description', description='The description of the endpoint group.', example='group1'),
      endpointConfigurations?: [ 
        {
          enableClientIPPreservation?: boolean(name='EnableClientIPPreservation', description='Indicates whether the client IP address preservation feature is enabled. Valid values:

*   **true**
*   **false**', example='false'),
          endpoint?: string(name='Endpoint', description='The IP address or domain name of the endpoint.', example='47.1.XX.XX'),
          endpointId?: string(name='EndpointId', description='The endpoint ID.', example='ep-bp1d2utp8qqe2a44t****'),
          probePort?: int32(name='ProbePort', description='The port that is used to monitor latency.', example='80'),
          probeProtocol?: string(name='ProbeProtocol', description='The protocol that is used to monitor latency. Valid values:

*   **icmp**
*   **tcp**', example='tcp'),
          subAddress?: string(name='SubAddress', description='弹性网卡的私网IP地址。', example='172.168.XX.XX'),
          type?: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain**: a custom domain name
*   **Ip**: a custom IP address
*   **PublicIp**: a public IP address provided by Alibaba Cloud
*   **ECS**: an Elastic Compute Service (ECS) instance
*   **SLB**: a Server Load Balancer (SLB) instance
*   **ALB**: an Application Load Balancer (ALB) instance
*   **OSS**: an Object Storage Service (OSS) bucket', example='Ip'),
          weight?: int32(name='Weight', description='The weight of the endpoint.', example='20'),
        }
      ](name='EndpointConfigurations', description='The configurations of the endpoints in the endpoint group.'),
      endpointGroupId?: string(name='EndpointGroupId', description='The endpoint group ID.', example='epg-bp16jdc00bhe97sr5****'),
      endpointGroupIpList?: [ string ](name='EndpointGroupIpList', description='The endpoint group IP addresses.'),
      endpointGroupRegion?: string(name='EndpointGroupRegion', description='The region ID of the endpoint group.', example='cn-hangzhou'),
      endpointGroupType?: string(name='EndpointGroupType', description='The type of the endpoint group. Valid values:

*   **default**
*   **virtual**', example='default'),
      endpointGroupUnconfirmedIpList?: [ string ](name='EndpointGroupUnconfirmedIpList', description='The endpoint group IP addresses to be confirmed. After the GA instance is upgraded, the IP addresses that are added to the endpoint group need to be confirmed.'),
      endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol that is used by the backend service. Valid values:

*   **HTTP**
*   **HTTPS**', example='HTTP'),
      forwardingRuleIds?: [ string ](name='ForwardingRuleIds', description='The IDs of the forwarding rules that are associated with the endpoint group.'),
      healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Indicates whether the health check feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      healthCheckIntervalSeconds?: int32(name='HealthCheckIntervalSeconds', description='The interval at which health checks are performed. Unit: seconds.', example='3'),
      healthCheckPath?: string(name='HealthCheckPath', description='The path based on which the system performs health checks.', example='/healthcheck'),
      healthCheckPort?: int32(name='HealthCheckPort', description='The port that is used for health checks.', example='10'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which health check requests are sent. Valid values:

*   **tcp**
*   **http**
*   **https**', example='tcp'),
      listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
      name?: string(name='Name', description='The name of the endpoint group.', example='group1'),
      portOverrides?: [ 
        {
          endpointPort?: int32(name='EndpointPort', description='The endpoint port.', example='80'),
          listenerPort?: int32(name='ListenerPort', description='The listener port.', example='443'),
        }
      ](name='PortOverrides', description='The port mapping.'),
      serviceId?: string(name='ServiceId', description='The service that manages the instance.

>  This parameter is valid only if **ServiceManaged** is set to **True**.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**
*   **false**', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='The name of the action on the managed instance. Valid values:

*   **Create**
*   **Update**
*   **Delete**
*   **Associate**
*   **UserUnmanaged**
*   **CreateChild**', example='Update'),
          childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener
*   **IpSet**: acceleration region
*   **EndpointGroup**: endpoint group
*   **ForwardingRule**: forwarding rule
*   **Endpoint**: endpoint
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener

>  This parameter is valid only if **Action** is set to **CreateChild**.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and users cannot perform the specified actions on the managed instance.
*   **false**: The specified actions are not managed, and users can perform the specified actions on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='The actions that users can perform on the managed instance.

>  This parameter is valid only if **ServiceManaged** is set to **True**.

*   Users can perform only specific actions on a managed instance.'),
      state?: string(name='State', description='The status of the endpoint group. Valid values:

*   **init**
*   **active**
*   **updating**
*   **deleteing**', example='active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test-key'),
          value?: string(name='Value', description='The tag value.', example='test-value'),
        }
      ](name='Tags', description='The tags.'),
      thresholdCount?: int32(name='ThresholdCount', description='The number of consecutive failed health checks that must occur before an endpoint is considered unhealthy.', example='3'),
      trafficPercentage?: int32(name='TrafficPercentage', description='The weight of the endpoint group when the listener is associated with multiple endpoint groups.', example='20'),
    }
  ](name='EndpointGroups', description='The configurations of the endpoint groups.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A052D49E-CCC2-41DB-816C-DC3381503194'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEndpointGroupsResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ga\\&api=ListEndpointGroups\\&type=RPC\\&version=2019-11-20)
  *
 */
async function listEndpointGroups(request: ListEndpointGroupsRequest): ListEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListForwardingRulesRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4qzk****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The ClientToken value contain only ASCII characters.

>  If you do not set this parameter, the system sets **ClientToken** to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4****', position='Query'),
  forwardingRuleId?: string(name='ForwardingRuleId', description='The ID of the forwarding rule.', example='frule-bp19a3t3yzr21q3****', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1s0vzbi5bxlx5pw****', position='Query'),
  maxResults: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListForwardingRulesResponseBody = {
  forwardingRules?: [ 
    {
      forwardingRuleDirection?: string(name='ForwardingRuleDirection', description='The direction in which the forwarding rule takes effect.

By default, **request** is returned, which indicates that the forwarding rule takes effect on requests.', example='request'),
      forwardingRuleId?: string(name='ForwardingRuleId', description='The forwarding rule ID.', example='frule-bp19a3t3yzr21q3****'),
      forwardingRuleName?: string(name='ForwardingRuleName', description='The forwarding rule name.', example='auto_named_rule'),
      forwardingRuleStatus?: string(name='ForwardingRuleStatus', description='The state of the forwarding rule. Valid values:

*   **active:** The forwarding rule is normal.
*   **configuring:** The forwarding rule is being modified.
*   **deleting:** The forwarding rule is being deleted.', example='active'),
      listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1s0vzbi5bxlx5****'),
      priority?: int32(name='Priority', description='The priority of the forwarding rule.

A value between **1** and **10000** is returned. A smaller value indicates a higher priority.', example='1000'),
      ruleActions?: [ 
        {
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                endpointGroupId?: string(name='EndpointGroupId', description='The endpoint group ID.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.', example='epg-bp1enpdcrqhl78g6r****'),
              }
            ](name='ServerGroupTuples', description='The information about the endpoint groups.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.'),
          }(name='ForwardGroupConfig', description='The forwarding action configuration.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.'),
          order?: int32(name='Order', description='The forwarding priority.

>  This parameter does not take effect.', example='1'),
          ruleActionType?: string(name='RuleActionType', description='The type of the forwarding action. Valid values:

*   **ForwardGroup:** forwards a request.
*   **Redirect:** redirects a request.
*   **FixResponse:** returns a fixed response.
*   **Rewrite:** rewrites a request.
*   **AddHeader:** adds a header to a request.
*   **RemoveHeaderConfig:** deletes the header of a request.', example='ForwardGroup'),
          ruleActionValue?: string(name='RuleActionValue', description='The value of the forwarding action type.

Different JSON strings are returned based on the value of the **RuleActionType** parameter.

*   If you set **RuleActionType** to **ForwardGroup**, the information about a virtual endpoint group is returned. Parameter configuration:

    *   `type:` the type of the resource that is returned. The value is `endpointgroup`.
    *   `value:` the ID of the virtual endpoint group that is returned.

*   If you set **RuleActionType** to **Redirect**, the redirecting configuration is returned. Parameter configuration:

    *   `protocol:` the protocol of requests after the requests are redirected.
    *   `domain:` the domain name to which requests are redirected.
    *   `port:` the port to which requests are redirected.
    *   `path:` the path to which requests are redirected.
    *   `query:` the query string of the requests that are redirected.
    *   `code:` the redirecting code.

*   If you set **RuleActionType** to **FixResponse**, the information about the fixed response that you configured is returned. Parameter configuration:

    *   `code:` the HTTP status code that is returned.
    *   `type:` the type of the response content that is returned.
    *   `content:` the response content that is returned.

*   If **RuleActionType** is set to **AddHeader**, the information about the HTTP header that is added is returned. Parameter configuration:

    *   `name:` the name of the HTTP header that is returned.
    *   `type:` the content type of the HTTP header that is returned.
    *   `value:` the content of the HTTP header that is returned.

*   If you set **RuleActionType** to **RemoveHeader**, the information about the HTTP header that is deleted is returned.

*   If you set **RuleActionType** to **Rewrite**, the rewriting configuration is returned. Parameter configuration:

    *   `domain:` the domain name to which requests are redirected.
    *   `path:` the path to which requests are redirected.
    *   `query:` the query string of the requests that are redirected.', example='[{"type":"endpointgroup", "value":"epg-bp1enpdcrqhl78g6r****"}]'),
        }
      ](name='RuleActions', description='The forwarding actions.'),
      ruleConditions?: [ 
        {
          hostConfig?: {
            values?: [ string ](name='Values', description='The domain name configuration.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.'),
          }(name='HostConfig', description='The domain name configuration.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.'),
          pathConfig?: {
            values?: [ string ](name='Values', description='The path configuration.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.'),
          }(name='PathConfig', description='The path configuration.

>  GA instances created after July 12, 2022 support all forwarding condition types and action types. We recommend that you query forwarding conditions and actions by calling the **RuleActionType** and **RuleActionValue** operations.'),
          ruleConditionType?: string(name='RuleConditionType', description='The type of the forwarding condition. Valid values:

*   **Host:** domain name.
*   **Path:** path.
*   **RequestHeader:** HTTP header.
*   **Query:** query string.
*   **Method:** HTTP method.
*   **Cookie:** cookie.
*   **SourceIP:** source IP address.', example='Host'),
          ruleConditionValue?: string(name='RuleConditionValue', description='The value of the forwarding condition type.

Different JSON strings are returned based on the value of the **RuleConditionType** parameter.

*   If you set **RuleConditionType** to **Host**, a domain name condition is returned. If multiple domain names are returned in a forwarding condition, the relationship between the domain names is OR.
*   If you set **RuleConditionType** to **Path**, a path condition is returned. If multiple forwarding conditions of the path type are returned in a forwarding rule, the relationship between the forwarding conditions is OR. If multiple paths are returned in a forwarding condition, the relationship between the paths is OR.
*   If you set **RuleConditionType** to **RequestHeader**, an HTTP header condition that consists of key-value pairs is returned.
*   If you set **RuleConditionType** to **Query**, a query string condition that consists of key-value pairs is returned.
*   If you set **RuleConditionType** to **Method**, an HTTP method condition is returned.
*   If you set **RuleConditionType** to **Cookie**, a cookie condition that consists of key-value pairs is returned.
*   If you set **RuleConditionType** to **SourceIP**, a source IP address condition is returned. If multiple source IP addresses are returned in a forwarding condition, the relationship between the source IP addresses is OR.', example='["www.example.com", "www.aliyun.com"]'),
        }
      ](name='RuleConditions', description='The conditions that trigger the forwarding rule.'),
      serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='Managed policy action name, Valid values:
- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
          childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
    }
  ](name='ForwardingRules', description='The forwarding rules.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is not returned, it indicates that no additional results exist.
*   If **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CFC67ED9-4AB1-431F-B6E3-A752B7B8CCD4'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListForwardingRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListForwardingRulesResponseBody(name='body'),
}

/**
  * >  This operation is used to query only custom forwarding rules, not the default forwarding rule.
  *
 */
async function listForwardingRules(request: ListForwardingRulesRequest): ListForwardingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListForwardingRules', 'POST', '/', 'json', false, 'json', request);
}

model ListIpSetsRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1yeeq8yfoyszmqy****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListIpSetsResponseBody = {
  ipSets?: [ 
    {
      accelerateRegionId?: string(name='AccelerateRegionId', description='The ID of the acceleration region.', example='cn-hangzhou'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth that is allocated to the acceleration region. Unit: **Mbit/s**.', example='2'),
      ipAddressList?: [ string ](name='IpAddressList', description='The accelerated IP addresses.'),
      ipSetId?: string(name='IpSetId', description='The ID of the acceleration region.', example='ips-bp11r5jb8ogp122xl****'),
      ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4'),
      ispType?: string(name='IspType', description='The line type of the elastic IP address (EIP) in the acceleration region. Valid values:

*   **BGP** (default)
*   **BGP_PRO** If the acceleration region is China (Hong Kong) and a basic bandwidth plan whose bandwidth type is Premium is associated with the GA instance, the default value of IspType is BGP_PRO.

If you are allowed to use single-ISP bandwidth, one of the following values is supported:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

>  The supported line types vary based on the acceleration region.', example='BGP'),
      serviceId?: string(name='ServiceId', description='The service that manages the instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the GA instance is managed. Valid values:

*   **true**
*   **false**', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='The name of the action on the managed instance. Valid values:

*   **Create**
*   **Update**
*   **Delete**
*   **Associate**
*   **UserUnmanaged**
*   **CreateChild**', example='Update'),
          childType?: string(name='ChildType', description='The type of the child resource. Valid values:

*   **Listener**: listener
*   **IpSet**: acceleration region
*   **EndpointGroup**: endpoint group
*   **ForwardingRule**: forwarding rule
*   **Endpoint**: endpoint
*   **EndpointGroupDestination**: protocol mapping of an endpoint group associated with a custom routing listener
*   **EndpointPolicy**: traffic policy of an endpoint associated with a custom routing listener

>  This parameter takes effect only if **Action** is set to **CreateChild**.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Indicates whether the specified actions are managed. Valid values:

*   **true**: The specified actions are managed, and users cannot perform the specified actions on the managed instance.
*   **false**: The specified actions are not managed, and users can perform the specified actions on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='The actions that users can perform on the managed instance.

>  This parameter takes effect only if **ServiceManaged** is set to **True**.

*   Users can perform only specific actions on a managed instance.'),
      state?: string(name='State', description='The status of the acceleration region. Valid values:

*   **init**
*   **active**
*   **updating**
*   **deleting**', example='active'),
    }
  ](name='IpSets', description='The acceleration regions.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A9B4E54C-9CCD-4002-91A9-D38C6C209192'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListIpSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIpSetsResponseBody(name='body'),
}

async function listIpSets(request: ListIpSetsRequest): ListIpSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpSets', 'POST', '/', 'json', false, 'json', request);
}

model ListIspTypesRequest {
  acceleratorId?: string(name='AcceleratorId', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  acceleratorType?: string(name='AcceleratorType', description='The type of the Global Accelerator (GA) instance to be queried. Valid values:

*   **basic**: basic GA instance
*   **standard**: standard GA instance', example='basic', position='Query'),
  businessRegionId: string(name='BusinessRegionId', description='The ID of the acceleration region to be queried.', example='cn-hangzhou', position='Query'),
}

model ListIspTypesResponseBody = {
  ispTypeList?: [ string ](name='IspTypeList', description='The line types of EIPs in the acceleration region.

*   **BGP** (default): BGP (Multi-ISP) lines
*   **BGP_PRO**: BGP (Multi-ISP) Pro lines

If you have the permissions to use single-ISP bandwidth, one of the following values may be returned:

*   **ChinaTelecom**: China Telecom (single ISP)
*   **ChinaUnicom**: China Unicom (single ISP)
*   **ChinaMobile**: China Mobile (single ISP)
*   **ChinaTelecom_L2**: China Telecom_L2 (single ISP)
*   **ChinaUnicom_L2**: China Unicom_L2 (single ISP)
*   **ChinaMobile_L2**: China Mobile_L2 (single ISP)

> Different acceleration regions support different single-ISP BGP lines.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model ListIspTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIspTypesResponseBody(name='body'),
}

async function listIspTypes(request: ListIspTypesRequest): ListIspTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIspTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListListenerCertificatesRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return.

Valid values: **1** to **50**. Default value: **20**.', example='50', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If this is your first and only query, ignore this parameter.
*   If a next query is to be performed, set the value to the NextToken value returned in the last call to the ListListenerCertificates operation.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  role?: string(name='Role', description='The type of the certificate. Valid values:

*   **default**: a default certificate
*   **additional**: an additional certificate

If you do not set this parameter, default and additional certificates are returned by default.', example='default', position='Query'),
}

model ListListenerCertificatesResponseBody = {
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The ID of the certificate.', example='6092**-cn-hangzhou'),
      domain?: string(name='Domain', description='The domain name associated with the additional certificate.

This parameter is not returned if the certificate is a default one.', example='example.com'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the certificate is a default one:

*   **true**: a default certificate
*   **false**: an additional certificate', example='true'),
      state?: string(name='State', description='The state of the certificate.

*   **active**: The certificate is associated with a listener and takes effect.
*   **updating**: The additional certificate is being replaced.', example='active'),
    }
  ](name='Certificates', description='Details about the certificates.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If **NextToken** is not returned, it indicates that no additional results exist.
*   If **NextToken** is returned, the value is the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListListenerCertificatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenerCertificatesResponseBody(name='body'),
}

async function listListenerCertificates(request: ListListenerCertificatesRequest): ListListenerCertificatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenerCertificates', 'POST', '/', 'json', false, 'json', request);
}

model ListListenersRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****'),
      backendPorts?: [ 
        {
          fromPort?: string(name='FromPort', description='The start port in the range of ports used by the backend server.', example='80'),
          toPort?: string(name='ToPort', description='The end port in the range of ports used by the backend server.', example='80'),
        }
      ](name='BackendPorts', description='Details about the ports that can be used by the backend server.'),
      certificates?: [ 
        {
          id?: string(name='Id', description='The ID of the SSL certificate.', example='44983xxxx-cn-hangzhou'),
          type?: string(name='Type', description='The type of the certificate.

Only **Server** can be returned, which indicates a server certificate.', example='Server'),
        }
      ](name='Certificates', description='Details about the SSL certificates.'),
      clientAffinity?: string(name='ClientAffinity', description='Indicates whether client affinity is enabled for the listener.

*   If **NONE** is returned, client affinity is disabled. In this case, requests from the same client may be forwarded to different endpoints.
*   If **SOURCE_IP** is returned, client affinity is enabled. In this case, when a client accesses stateful applications, requests from the same client are always forwarded to the same endpoint regardless of the source port or protocol.', example='SOURCE_IP'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates that the listener was created. Unit: milliseconds.', example='1577786252000'),
      description?: string(name='Description', description='The description of the listener.', example='Listener'),
      idleTimeout?: int32(name='IdleTimeout'),
      listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
      name?: string(name='Name', description='The name of the listener.', example='Listener'),
      portRanges?: [ 
        {
          fromPort?: int32(name='FromPort', description='The start port in the range of listener ports used to receive and forward requests to endpoints.', example='20'),
          toPort?: int32(name='ToPort', description='The start port in the range of listener ports used to receive and forward requests to endpoints.', example='20'),
        }
      ](name='PortRanges', description='Details about the listener ports.'),
      protocol?: string(name='Protocol', description='The network transmission protocol that is used by the listener. Valid values:

*   **tcp**: TCP
*   **udp**: UDP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp'),
      proxyProtocol?: boolean(name='ProxyProtocol', description='Indicates whether the client IP address preservation feature is enabled. Valid values:

*   **true**: The client IP address preservation feature is enabled. After client IP addresses are reserved, you can view the source IP addresses of clients over the backend service.
*   **false**: The client IP address preservation feature is disabled.', example='true'),
      requestTimeout?: int32(name='RequestTimeout'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy.

*   **tls_cipher_policy\\_1\\_0**

    *   Supported Transport Layer Security (TLS) versions: TLS 1.0, TLS 1.1, and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_1**

    *   Supported TLS versions: TLS 1.1 and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_2**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict_with\\_1\\_3**

    *   Supported TLS versions: TLS 1.2 and TLS 1.3
    *   Supported cipher suites: TLS_AES\\_128\\_GCM_SHA256, TLS_AES\\_256\\_GCM_SHA384, TLS_CHACHA20\\_POLY1305\\_SHA256, TLS_AES\\_128\\_CCM_SHA256, TLS_AES\\_128\\_CCM\\_8\\_SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES128-SHA256, ECDHE-ECDSA-AES256-SHA384, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-ECDSA-AES128-SHA, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

>  This parameter is returned only for HTTPS listeners.', example='tls_cipher_policy_1_0'),
      serviceId?: string(name='ServiceId', description='The service ID to which the managed instance belongs.

>  Valid only when the ServiceManaged parameter is True.', example='ALB'),
      serviceManaged?: boolean(name='ServiceManaged', description='Is it a managed instance. Valid values:

- true
- false', example='true'),
      serviceManagedInfos?: [ 
        {
          action?: string(name='Action', description='Managed policy action name, Valid values:
- Create
- Update
- Delete
- Associate
- UserUnmanaged
- CreateChild', example='Update'),
          childType?: string(name='ChildType', description='Sub resource type, Valid values:

- Listener
- IpSet
- EndpointGroup
- ForwardingRule
- Endpoint
- EndpointGroupDestination
- EndpointPolicy

>Only valid when the Action parameter is CreateChild.', example='Listener'),
          isManaged?: boolean(name='IsManaged', description='Is the managed policy action managed, Valid values:

- true: The managed policy action is managed, and users do not have permission to perform the operation specified in the Action on the managed instance.

- false: The managed policy action is not managed, and users have permission to perform the operation specified in the Action on the managed instance.', example='false'),
        }
      ](name='ServiceManagedInfos', description='A list of action policies that users can execute on this managed instance.'),
      state?: string(name='State', description='The state of the listener. Valid values:

*   **active**: The listener is normal.
*   **init**: The listener is being initialized.
*   **updating**: The listener is being configured.
*   **deleting**: The listener is being deleted.', example='active'),
      type?: string(name='Type', description='The routing type of the listener. Valid values:

*   **Standard**: intelligent routing
*   **CustomRouting**: custom routing', example='Standard'),
      xForwardedForConfig?: {
        xForwardedForGaApEnabled?: boolean(name='XForwardedForGaApEnabled', description='Indicates whether the `GA-AP` header is used to retrieve the information about acceleration regions. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
        xForwardedForGaIdEnabled?: boolean(name='XForwardedForGaIdEnabled', description='Indicates whether the `GA-ID` header is used to retrieve the ID of the GA instance. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
        xForwardedForPortEnabled?: boolean(name='XForwardedForPortEnabled', description='Indicates whether the `GA-X-Forward-Port` header is used to retrieve the listener ports of the GA instance. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
        xForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Indicates whether the `GA-X-Forward-Proto` header is used to retrieve the listener protocol of the GA instance. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
        xRealIpEnabled?: boolean(name='XRealIpEnabled', description='Indicates whether the `X-Real-IP` header is used to retrieve client IP addresses. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is returned only for HTTP and HTTPS listeners.', example='false'),
      }(name='XForwardedForConfig', description='The configurations of the `XForward` headers.'),
    }
  ](name='Listeners', description='The information about the listeners.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListListenersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenersResponseBody(name='body'),
}

/**
  * This operation is used to query information about the listeners of a GA instance, including the state of each listener, the timestamp that indicates when each listener was created, and the listener ports.
  *
 */
async function listListeners(request: ListListenersRequest): ListListenersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListeners', 'POST', '/', 'json', false, 'json', request);
}

model ListSpareIpsRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListSpareIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  spareIps?: [ 
    {
      spareIp?: string(name='SpareIp', description='The secondary IP address that is associated with the CNAME. If the acceleration area becomes unavailable, GA redirects traffic to the secondary IP address.', example='47.100.XX.XX'),
      state?: string(name='State', description='The status of the secondary IP address. Valid values:

*   **active:** The secondary IP address is available.
*   **inuse:** The secondary IP address is in use.', example='active'),
    }
  ](name='SpareIps', description='The secondary IP addresses that are associated with the CNAME.'),
}

model ListSpareIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSpareIpsResponseBody(name='body'),
}

async function listSpareIps(request: ListSpareIpsRequest): ListSpareIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSpareIps', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemSecurityPoliciesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model ListSystemSecurityPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='A9B4E54C-9CCD-4002-91A9-D38C6C209192'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='The supported cipher suites. The value of this parameter is determined by the value of **TLSVersions**.

The specified cipher suites must be supported by at least one value of **TLSVersions**. For example, if you set TLSVersions to **TLSv1.3**, you must specify cipher suites that are supported by **TLSv1.3**.

*   Valid values when TLSVersions is set to **TLSv1.0** or **TLSv1.1**:

    *   ECDHE-ECDSA-AES128-SHA
    *   ECDHE-ECDSA-AES256-SHA
    *   ECDHE-RSA-AES128-SHA
    *   ECDHE-RSA-AES256-SHA
    *   AES128-SHA
    *   AES256-SHA
    *   DES-CBC3-SHA

*   Valid values when TLSVersions is set to **TLSv1.2**:

ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA ECDHE-RSA-AES128-SHA ECDHE-RSA-AES256-SHA AES128-SHA AES256-SHA DES-CBC3-SHA ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-ECDSA-AES256-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-SHA256 ECDHE-RSA-AES256-SHA384 AES128-GCM-SHA256 AES256-GCM-SHA384 AES128-SHA256 AES256-SHA256

*   Valid values when TLSVersions is set to **TLSv1.3**:

TLS_AES\\_128\\_GCM_SHA256 TLS_AES\\_256\\_GCM_SHA384 TLS_CHACHA20\\_POLY1305\\_SHA256 TLS_AES\\_128\\_CCM_SHA256 TLS_AES\\_128\\_CCM\\_8\\_SHA256'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The TLS security policy ID.', example='tls_cipher_policy_1_1'),
      tlsVersions?: [ string ](name='TlsVersions', description='The supported TLS protocol versions. Valid values: **TLSv1.0**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.'),
    }
  ](name='SecurityPolicies', description='The list of TLS security policies.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListSystemSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemSecurityPoliciesResponseBody(name='body'),
}

/**
  * You can select a TLS security policy when you create an HTTPS listener. This API operation is used to query the TLS security policies that are supported by HTTPS listeners.
  *
 */
async function listSystemSecurityPolicies(request: ListSystemSecurityPoliciesRequest): ListSystemSecurityPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemSecurityPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that the value is unique among all requests. The ClientToken value contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='An array of IDs of resources whose tag information you want to query.

*   If you set the **ResourceType** parameter to **accelerator**, set the value of ResourceId to the ID of a standard GA instance.
*   If you set the **ResourceType** parameter to **basicaccelerator**, set the value of ResourceId to the ID of a basic GA instance.
*   If you set the **ResourceType** parameter to **bandwidthpackage**, set the value of ResourceId to the ID of a bandwidth plan.
*   If you set the **ResourceType** parameter to **acl**, set the value of ResourceId to the ID of an ACL.
*   If **ResourceType** is set to **endpointgroup**, set the value of ResourceId to the ID of an EndpointGroup.

You can specify up to 50 GA resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource whose tag information you want to query. Valid values:

*   **accelerator:** a standard GA instance.
*   **basicaccelerator:** a basic GA instance.
*   **bandwidthpackage:** a bandwidth plan.
*   **acl:** an access control list (ACL).
*   **endpointgroup:** an endpoint group (EndpointGroup).', example='accelerator', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the GA resource. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='KeyTest'),
      value?: string(name='Value', description='The tag value of the GA resource. The tag value can be an empty string.

The tag value can be up to 128 characters in length and and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='valueTest'),
    }
  ](name='Tag', description='An array of tags of GA resources.

You can specify up to 20 tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If **NextToken** is empty, it indicates that no subsequent query is to be sent.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='ga-bp149u6o36qt1as9b****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.

*   **accelerator:** a standard GA instance.
*   **basicaccelerator:** a basic GA instance.
*   **bandwidthpackage:** a bandwidth plan.
*   **acl:** an ACL.
*   **endpointgroup:** an EndpointGroup.', example='accelerator'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='valueTest'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='KeyTest'),
    }
  ](name='TagResource')
  }(name='TagResources', description='An array of information about the resources to which tags are added.'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * *   You must specify **ResourceId.N** or **Tag.N** in the request to specify the object that you want to query.********
  * *   **Tag.N** is a resource tag that consists of a key-value pair (Tag.N.Key and Tag.N.Value). If you specify only **Tag.N.Key**, all tag values that are associated with the specified tag key are returned. If you specify only **Tag.N.Value**, an error message is returned.
  * *   If you specify **Tag.N** and **ResourceId.N** to filter tags, **ResourceId.N** must match all specified key-value pairs.
  * *   If you specify multiple key-value pairs, resources that contain these key-value pairs are returned.
  *
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model OpenAcceleratorServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model OpenAcceleratorServiceResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='208257****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B49B60F6-F6C8-49E5-B06B-E33E3A469A92'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true:** The call was successful.
*   **false:** The call failed.', example='True'),
}

model OpenAcceleratorServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenAcceleratorServiceResponseBody(name='body'),
}

async function openAcceleratorService(request: OpenAcceleratorServiceRequest): OpenAcceleratorServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenAcceleratorService', 'POST', '/', 'json', false, 'json', request);
}

model QueryCrossBorderApprovalStatusRequest {
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model QueryCrossBorderApprovalStatusResponseBody = {
  approvalStatus?: string(name='ApprovalStatus', description='Cross border permissions of Alibaba Cloud account (main account).

-  UNAPPLIED : No cross-border permission application has been submitted or application records cannot be found.
-  APPLIED : Cross-border permission review in progress.
-  REJECTED : Cross-border permission review failed.
-  PASSED : Cross-border permission review passed.', example='UNAPPLIED'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F96E634B-A523-587F-9A09-AE8B2FD04B9C'),
}

model QueryCrossBorderApprovalStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCrossBorderApprovalStatusResponseBody(name='body'),
}

async function queryCrossBorderApprovalStatus(request: QueryCrossBorderApprovalStatusRequest): QueryCrossBorderApprovalStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCrossBorderApprovalStatus', 'POST', '/', 'json', false, 'json', request);
}

model RemoveEntriesFromAclRequest {
  aclEntries: [ 
    {
      entry?: string(name='Entry', description='The IP address (192.168.XX.XX) or CIDR block (10.0.XX.XX/24) that you want to delete from the ACL. You can delete up to 20 entries in each request.

> This parameter is required.', example='10.0.XX.XX/24'),
    }
  ](name='AclEntries', description='The IP addresses or CIDR blocks that you want to delete from the ACL. You can delete up to 20 entries in each request.', position='Query'),
  aclId: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model RemoveEntriesFromAclResponseBody = {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  requestId?: string(name='RequestId', description='The request ID.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model RemoveEntriesFromAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveEntriesFromAclResponseBody(name='body'),
}

/**
  * *   **RemoveEntriesFromAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetAcl](~~258292~~) or [ListAcls](~~258291~~) operation to query the status of the ACL from which you want to delete IP entries.
  *     *   If the ACL is in the **configuring** state, it indicates that the IP entries are being deleted. In this case, you can perform only query operations.
  *     *   If the ACL is in the **active** state, it indicates that the IP entries are deleted.
  * *   The **RemoveEntriesFromAcl** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function removeEntriesFromAcl(request: RemoveEntriesFromAclRequest): RemoveEntriesFromAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveEntriesFromAcl', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceBandwidthPackageRequest {
  acceleratorId?: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the required bandwidth plan. When you specify a replacement bandwidth plan, take note of the following items:

*   Only a bandwidth plan that is not associated with a GA instance can be specified.
*   If you want to replace a basic bandwidth plan, make sure that the bandwidth provided by the replacement bandwidth plan is not less than the total bandwidth allocated to the acceleration area.', example='gbwp-bp176neb61yhcymow****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  targetBandwidthPackageId: string(name='TargetBandwidthPackageId', description='The ID of the bandwidth plan that you want to replace.', example='gbwp-o978hgeb61yhcymow****', position='Query'),
}

model ReplaceBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A0EA8CCA-F081-4338-9790-A1C791CCA779'),
}

model ReplaceBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceBandwidthPackageResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The GA instance continues to forward network traffic.
  * *   **ReplaceBandwidthPackage** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) or [ListAccelerators](~~153236~~) operation to query the status of the GA instance.
  *     *   If the GA instance is in the **configuring** state, it indicates that the associated bandwidth plan is being replaced. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state, it indicates that the associated bandwidth plan is replaced.
  * *   The **ReplaceBandwidthPackage** operation holds an exclusive lock on the GA instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function replaceBandwidthPackage(request: ReplaceBandwidthPackageRequest): ReplaceBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of the resource to which you want to add tags.

*   If you set **ResourceType** to **accelerator**, set the value of ResourceId to the ID of a standard GA instance.
*   If you set **ResourceType** to **basicaccelerator**, set the value of ResourceId to the ID of a basic GA instance.
*   If you set **ResourceType** to **bandwidthpackage**, set the value of ResourceId to the ID of a bandwidth plan.
*   If you set **ResourceType** to **acl**, set the value of ResourceId to the ID of an ACL.
*   If you set **ResourceType** to **endpointgroup**, set the value of ResourceId to the ID of an endpoint group.

The parameter is required. You can enter up to 50 GA resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource to which you want to add tags. Valid values:

*   **accelerator**: a standard GA instance
*   **basicaccelerator**: a basic GA instance
*   **bandwidthpackage**: a bandwidth plan
*   **acl**: an ACL
*   **endpointgroup**: an endpoint group', example='accelerator', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The tag key of the GA resource. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag keys.', example='KeyTest'),
      value?: string(name='Value', description='The tag value of the GA resource. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify up to 20 tag values.', example='valueTest'),
    }
  ](name='Tag', description='The tags of GA resources.

You can specify up to 20 tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * ### Description
  * You can add up to 20 tags to each GA resource. When you call this operation, Alibaba Cloud first checks the number of existing tags attached to the resource. If the quota is reached, an error message is returned.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags of the specified resource. Valid values:

*   **true**: yes
*   **false** (default): no', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of the resource whose tags you want to remove.

*   If **ResourceType** is set to **accelerator**, set the value of ResourceId to the ID of a standard GA instance.
*   If **ResourceType** is set to **basicaccelerator**, set the value of ResourceId to the ID of a basic GA instance.
*   If **ResourceType** is set to **bandwidthpackage**, set the value of ResourceId to the ID of a bandwidth plan.
*   If **ResourceType** is set to **acl**, set the value of ResourceId to the ID of an ACL.
*   If **ResourceType** is set to **endpointgroup**, set the value of ResourceId to the ID of an EndpointGroup.

You can enter up to 50 resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource whose tags you want to remove. Valid values:

*   **accelerator**: a standard GA instance.
*   **basicaccelerator**: a basic GA instance.
*   **bandwidthpackage**: a bandwidth plan.
*   **acl**: an access control list (ACL).
*   **endpointgroup**: an endpoint group (EndpointGroup).', example='accelerator', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The key of the tag to be removed.

The system removes all tags with this tag key.

You can specify up to 20 tag keys.

>  If the **All** parameter is set to **true**, this parameter does not take effect.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **false** (default): disables automatic payment. If you select this option, you must go to the Order Center to complete the payment after an order is generated.
*   **true**: enables automatic payment. Payments are automatically completed.', example='false', position='Query'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', description='Specifies whether to automatically pay bills by using coupons. Default value: false. Valid values:

*   **true**: automatically pays bills by using coupons.
*   **false**: does not automatically pay bills by using coupons.

>  This parameter takes effect only if the **AutoPay** parameter is set to **true**.', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567****', position='Query'),
  description?: string(name='Description', description='The description of the GA instance. The description can be up to 200 characters in length.', example='Accelerator', position='Query'),
  name?: string(name='Name', description='The name of the GA instance.

The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter.', example='Accelerator', position='Query'),
  regionId?: string(name='RegionId', description='The region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  spec?: string(name='Spec', description='The specification of the GA instance. Valid values:

*   **1**: Small Ⅰ
*   **2**: Small Ⅱ
*   **3**: Small Ⅲ
*   **5**: Medium Ⅰ
*   **8**: Medium Ⅱ
*   **10**: Medium Ⅲ
*   **20**: Large Ⅰ
*   **30**: Large Ⅱ
*   **40**: Large Ⅲ
*   **50**: Large Ⅳ
*   **60**: Large Ⅴ
*   **70**: Large Ⅵ
*   **80**: Large VⅡ
*   **90**: Large VⅢ
*   **100**: Super Large Ⅰ
*   **200**: Super Large Ⅱ

>  The Large Ⅲ specification and higher specifications are available only for accounts that are added to the whitelist. To use these specifications, contact your Alibaba Cloud account manager.

Different specifications provide different capabilities. For more information, see [Instance specifications](~~153127~~).', example='1', position='Query'),
}

model UpdateAcceleratorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAcceleratorResponseBody(name='body'),
}

/**
  * *   **UpdateAccelerator** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) operation to query the status of a GA instance.
  *     *   If the GA instance is in the **configuring** state, the GA instance is being modified. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state, the GA instance is modified.
  * *   The **UpdateAccelerator** operation cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function updateAccelerator(request: UpdateAcceleratorRequest): UpdateAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAcceleratorAutoRenewAttributeRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the GA instance. Default value: false. Valid values:

*   **true**: enables auto-renewal for the GA instance.
*   **false**: does not enable auto-renewal for the GA instance.', example='false', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal period. Unit: months.

Valid values: **1** to **12**.

>  This parameter is required only if **AutoRenew** is set to **true**.', example='1', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  name?: string(name='Name', description='The name of the GA instance.

The name must be 2 to 128 characters in length and can contain digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='test', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  renewalStatus?: string(name='RenewalStatus', description='Specifies how to renew the GA instance. Valid values:

*   **AutoRenewal**: The GA instance is automatically renewed.
*   **Normal**: You must manually renew the GA instance.
*   **NotRenewal**: Choose this option if you do not want to renew the GA instance after the instance expires. The system sends only a non-renewal reminder three days before the expiration date. The system no longer sends notifications to remind you to renew the GA instance. You can change the value of this parameter from NotRenewal to **Normal** for a GA instance, and then manually renew the instance. You can also set the RenewalStatus parameter to **AutoRenewal**.

>  **RenewalStatus** takes precedence over **AutoRenew**. If you do not specify **RenewalStatus**, the **AutoRenew** parameter is used by default.', example='Normal', position='Query'),
}

model UpdateAcceleratorAutoRenewAttributeResponseBody = {
  acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp17frjjh0udz4qz****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model UpdateAcceleratorAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAcceleratorAutoRenewAttributeResponseBody(name='body'),
}

/**
  * The **UpdateAcceleratorAutoRenewAttribute** operation cannot be repeatedly called for the same GA instance within a specific period of time.
  *
 */
async function updateAcceleratorAutoRenewAttribute(request: UpdateAcceleratorAutoRenewAttributeRequest): UpdateAcceleratorAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAcceleratorAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAcceleratorConfirmRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  regionId: string(name='RegionId', description='The region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateAcceleratorConfirmResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateAcceleratorConfirmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAcceleratorConfirmResponseBody(name='body'),
}

/**
  * After you modify the specification of a GA instance, you must confirm the modification. The **UpdateAcceleratorConfirm** operation is used to confirm the specification of a GA instance that is modified. When you call this operation to confirm the specification of a GA instance, take note of the following items:
  * *   **UpdateAcceleratorConfirm** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) operation to query the status of a GA instance.
  *     *   If the GA instance is in the **configuring** state, it indicates that the specification of the instance is being modified. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state, it indicates that the specification of the instance is modified.
  * *   The **UpdateAcceleratorConfirm** operation cannot be called repeatedly for the same GA instance within a specific period of time.
  *
 */
async function updateAcceleratorConfirm(request: UpdateAcceleratorConfirmRequest): UpdateAcceleratorConfirmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAcceleratorConfirm', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAcceleratorCrossBorderModeRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.

> The bandwidth metering method of the GA instance must be pay-by-data-transfer.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  crossBorderMode: string(name='CrossBorderMode', description='The type of transmission network of the GA instance. Valid values:

*   **bgpPro**: BGP (Multi-ISP) Pro. BGP (Multi-ISP) Pro lines are used for cross-border acceleration. You do not need to perform real-name verification.
*   **private**: cross-border Express Connect circuit. Cross-border Express Connect circuits provide better acceleration performance but require real-name verification.', example='bgpPro', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateAcceleratorCrossBorderModeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateAcceleratorCrossBorderModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAcceleratorCrossBorderModeResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * You can call this operation to change the type of transmission network for a **standard** GA instance whose bandwidth metering method is **pay-by-data-transfer**. Before you call this operation, make sure that the following requirements are met:
  * *   Cloud Data Transfer (CDT) is activated. When you call the [CreateAccelerator](~~206786~~) operation and set **BandwidthBillingType** to **CDT** to create a **standard** GA instance whose bandwidth metering method is **pay-by-data-transfer**, CDT is automatically activated. The data transfer fees are managed by CDT.
  * *   If you want to set **CrossBorderMode** to **private**, which specifies cross-border Express Connect circuit as the type of transmission network, make sure that your enterprise account completed real-name verification. For more information, see [Real-name verification](~~52595~~).
  *
 */
async function updateAcceleratorCrossBorderMode(request: UpdateAcceleratorCrossBorderModeRequest): UpdateAcceleratorCrossBorderModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAcceleratorCrossBorderMode', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAcceleratorCrossBorderStatusRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  crossBorderStatus: boolean(name='CrossBorderStatus', description='Specifies whether to enable the cross-border acceleration feature for the GA instance. Valid values:

- **true**
- **false**', example='true', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model UpdateAcceleratorCrossBorderStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateAcceleratorCrossBorderStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAcceleratorCrossBorderStatusResponseBody(name='body'),
}

/**
  * You can use this operation to enable or disable the cross-border data transmission feature for a GA instance. Before you enable the cross-border data transmission feature, make sure that the following requirements are met:
  * - **Basic GA instances**:
  * Cloud Data Transfer (CDT) is activated. When you call the CreateBasicAccelerator operation to create a basic GA instance, set BandwidthBillingType to CDT. Then, the system automatically activates CDT. The data transfer fees are managed by CDT.
  * If you want to enable the cross-border data transmission feature, make sure that the current account has completed enterprise real-name registration. For more information, see Real-name registration FAQs.
  * - **Standard GA instances**:
  * CDT is activated. When you call the CreateAccelerator operation to create a standard GA instance, set BandwidthBillingType to CDT. Then, the system automatically activates CDT. The data transfer fees are managed by CDT.
  *
 */
async function updateAcceleratorCrossBorderStatus(request: UpdateAcceleratorCrossBorderStatusRequest): UpdateAcceleratorCrossBorderStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAcceleratorCrossBorderStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAclAttributeRequest {
  aclId: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****', position='Query'),
  aclName: string(name='AclName', description='The ACL name.', example='test-acl', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true:** performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateAclAttributeResponseBody = {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  requestId?: string(name='RequestId', description='The request ID.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model UpdateAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAclAttributeResponseBody(name='body'),
}

async function updateAclAttribute(request: UpdateAclAttributeRequest): UpdateAclAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAclAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAdditionalCertificateWithListenerRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1odcab8tmno0hdq****', position='Query'),
  certificateId: string(name='CertificateId', description='The ID of the replacement certificate.', example='6092**-cn-hangzhou', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  domain: string(name='Domain', description='The domain name associated with the additional certificate that you want to replace.', example='example.com', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false:** performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed. This is the default value.', example='false', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener. Only HTTPS listeners are supported.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateAdditionalCertificateWithListenerResponseBody = {
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateAdditionalCertificateWithListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAdditionalCertificateWithListenerResponseBody(name='body'),
}

/**
  * The UpdateAdditionalCertificateWithListener operation is used to replace an additional certificate. You can use this operation when you want to replace an expired additional certificate with a new additional certificate without changing the associated domain name.
  * *   **UpdateAdditionalCertificateWithListener** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can use the [ListListenerCertificates](~~307743~~) operation to query the state of the additional certificate that is associated with an HTTP listener:
  *     *   If the certificate that you want to replace is in the **updating** state, it is being replaced for the HTTP listener. In this case, you can perform only query operations.
  *     *   If the replacement certificate is in the **active** state, it indicates that the replacement operation is complete and the replacement certificate is associated with the HTTP listener.
  * *   You cannot perform the **UpdateAdditionalCertificateWithListener** operation again on the same Global Accelerator (GA) instance before the previous operation is complete.
  *
 */
async function updateAdditionalCertificateWithListener(request: UpdateAdditionalCertificateWithListenerRequest): UpdateAdditionalCertificateWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAdditionalCertificateWithListener', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationMonitorRequest {
  address?: string(name='Address', description='The URL or IP address that you want to probe.', example='https://www.aliyun.com', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  detectEnable?: boolean(name='DetectEnable', description='Specifies whether to enable the automatic diagnostics feature. Default value: false. Valid values:

*   **true**: yes
*   **false**: no', example='false', position='Query'),
  detectThreshold?: int32(name='DetectThreshold', description='Set the threshold that is used to trigger the automatic diagnostics feature. If the liveness of the origin in percentile drops below the specified threshold, the automatic diagnostics feature is triggered.

Valid values: **0** to **100**.', example='0', position='Query'),
  detectTimes?: int32(name='DetectTimes', description='The number of times that are required to reach the threshold before the automatic diagnostics feature can be triggered.

Valid values: **1** to **20**.', example='1', position='Query'),
  listenerId?: string(name='ListenerId', description='The ID of the listener that you want to modify. The listener runs the origin probing task.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  optionsJson?: string(name='OptionsJson', description='The extended options of the listener protocol that is used by the origin probing task. The options vary based on the listener protocol.', example='{ "http_method": "get","header": "key:asd","acceptable_response_code": "500","cert_verify": true }', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  silenceTime?: int32(name='SilenceTime', description='The silence period of the automatic diagnostics feature. This parameter specifies the interval at which the automatic diagnostics feature is triggered. If the availability rate does not return to normal after GA triggers an automatic diagnostic, GA must wait until the silence period ends before GA can trigger another automatic diagnostic.

If the number of consecutive times that the availability rate drops below the threshold of automatic diagnostics reaches the value of the **DetectTimes** parameter, the automatic diagnostics feature is triggered. The automatic diagnostics feature is not triggered again within the silence period even if the availability rate stays below the threshold. If the availability rate does not return to normal after the silence period ends, the automatic diagnostics feature is triggered again.

Unit: seconds. Valid values: **300** to **86400**.', example='300', position='Query'),
  taskId: string(name='TaskId', description='The ID of the origin probing task that you want to modify.', example='sm-bp1fpdjfju9k8yr1y****', position='Query'),
  taskName?: string(name='TaskName', description='The name of the origin probing task.

The name must be 4 to 100 characters in length, and can contain digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='task1', position='Query'),
}

model UpdateApplicationMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateApplicationMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationMonitorResponseBody(name='body'),
}

/**
  * **UpdateApplicationMonitor** is an asynchronous operation. After you send a request, the system returns a request ID, but this operation is still being performed in the system background. You can call the [DescribeApplicationMonitor](~~408463~~) or [ListApplicationMonitor](~~408462~~) operation to check whether the configurations of an origin probing task are modified.
  * *   If the values of modified parameters remain unchanged, it indicates that the origin probing task is being modified. In this case, you can perform only query operations.
  * *   If the values of modified parameters change, it indicates that the origin probing task is modified.
  *
 */
async function updateApplicationMonitor(request: UpdateApplicationMonitorRequest): UpdateApplicationMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationMonitor', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBandwidthPackagaAutoRenewAttributeRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the bandwidth plan. Valid values:

*   **true**: enables auto-renewal.
*   **false** (default): disables auto-renewal.', example='false', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='The auto-renewal duration. Unit: months. Valid values: **1** to **12**.

> : This parameter takes effect only if **AutoRenew** is set to **true**.', example='1', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  name?: string(name='Name', description='The name of the bandwidth plan.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  renewalStatus?: string(name='RenewalStatus', description='The auto-renewal status of the bandwidth plan. Valid values:

*   **AutoRenewal**: The bandwidth plan is automatically renewed.
*   **Normal**: You must manually renew the bandwidth plan.
*   **NotRenewal**: Choose this option if you do not want to renew the bandwidth plan after it expires. The system sends only a non-renewal reminder three days before the expiration date. The system no longer sends notifications to remind you to renew the bandwidth plan. You can change the value of this parameter from NotRenewal to Normal for a bandwidth plan, and then manually renew the bandwidth plan. You can also set the RenewalStatus parameter to **AutoRenewal**.

> The **RenewalStatus** parameter takes precedence over the **AutoRenew** parameter. If you do not set **RenewalStatus**, the **AutoRenew** parameter is used by default.', example='Normal', position='Query'),
}

model UpdateBandwidthPackagaAutoRenewAttributeResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the bandwidth plan.', example='gbwp-bp1sgzldyj6b4q7cx****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model UpdateBandwidthPackagaAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBandwidthPackagaAutoRenewAttributeResponseBody(name='body'),
}

/**
  * You cannot repeatedly call the **UpdateBandwidthPackagaAutoRenewAttribute** operation to modify the auto-renewal settings of a bandwidth plan.
  *
 */
async function updateBandwidthPackagaAutoRenewAttribute(request: UpdateBandwidthPackagaAutoRenewAttributeRequest): UpdateBandwidthPackagaAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBandwidthPackagaAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBandwidthPackageRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **false** (default): disables automatic payment. If you select this option, you must go to Order Center to complete the payment after an order is generated.
*   **true**: enables automatic payment. Payments are automatically completed.', example='false', position='Query'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', description='Specifies whether to use coupons. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the bandwidth plan. Unit: Mbit/s.

Valid values: **2** to **2000**.', example='2', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the bandwidth plan that you want to modify.', example='gbwp-bp1sgzldyj6b4q7cx****', position='Query'),
  bandwidthType?: string(name='BandwidthType', description='The type of bandwidth. Valid values:

*   **Basic**
*   **Enhanced**
*   **Advanced**

>  You can upgrade **Basic** bandwidth to **Enhanced** bandwidth. You cannot change **Enhanced** or **Advanced** bandwidth to another type of bandwidth.', example='Basic', position='Query'),
  description?: string(name='Description', description='The description of the bandwidth plan.

The description can be up to 256 characters in length.', example='testDescription', position='Query'),
  name?: string(name='Name', description='The name of the bandwidth plan. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='testName', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateBandwidthPackageResponseBody = {
  bandwidthPackage?: string(name='BandwidthPackage', description='The bandwidth plan ID.', example='gbwp-bp1eo4f57z1kbbcmn****'),
  description?: string(name='Description', description='The description of the bandwidth plan.', example='testDescription'),
  name?: string(name='Name', description='The name of the bandwidth plan.', example='testName'),
  requestId?: string(name='RequestId', description='The request ID.', example='1DF3A3CB-B621-44F8-9870-C20D034D7AB'),
}

model UpdateBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBandwidthPackageResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   **UpdateBandwidthPackage** is a synchronous operation when you call the operation to modify the configuration excluding the bandwidth value of a bandwidth plan. The new configuration immediately takes effect after the operation is performed.
  * *   **UpdateBandwidthPackage** is an asynchronous operation when you call the operation to modify the configuration including the bandwidth value of a bandwidth plan that is not associated with a Global Accelerator (GA) instance. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeBandwidthPackage](~~153241~~) operation to query the status of the task.
  *     *   If the parameter values of the bandwidth plan remain unchanged, the bandwidth plan is being modified. In this case, you can perform only query operations.
  *     *   If the parameter values of the bandwidth plan are changed, the bandwidth plan is modified.
  * *   **UpdateBandwidthPackage** is an asynchronous operation when you call the operation to modify the configuration including the bandwidth value of a bandwidth plan that is associated with a GA instance. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeAccelerator](~~153235~~) operation to query the status of the task.
  *     *   If the GA instance is in the **configuring** state, the bandwidth plan is being modified. In this case, you can perform only query operations.
  *     *   If the GA instance is in the **active** state, the bandwidth plan is modified.
  * *   You cannot repeatedly call the **UpdateBandwidthPackage** operation for the same bandwidth plan within a specific period of time.
  *
 */
async function updateBandwidthPackage(request: UpdateBandwidthPackageRequest): UpdateBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBasicAcceleratorRequest {
  acceleratorId: string(name='AcceleratorId', description='The ID of the basic GA instance.', example='ga-bp17frjjh0udz4qz****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567****', position='Query'),
  description?: string(name='Description', description='The description of the basic GA instance.', example='BasicAccelerator', position='Query'),
  name?: string(name='Name', description='The name of the basic GA instance.

The name must be 2 to 128 characters in length and can contain digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='BasicAccelerator', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the basic GA instance belongs. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateBasicAcceleratorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F591955F-5CB5-4CCE-A75D-17CF2085CE22'),
}

model UpdateBasicAcceleratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBasicAcceleratorResponseBody(name='body'),
}

async function updateBasicAccelerator(request: UpdateBasicAcceleratorRequest): UpdateBasicAcceleratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBasicAccelerator', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBasicEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system sets **ClientToken** to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoint that you want to modify belongs.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint that you want to modify.', example='ep-bp14sz7ftcwwjgrdm****', position='Query'),
  name: string(name='Name', description='The name of the endpoint.

The name must be 2 to 64 characters in length and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='ep01', maxLength=128, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateBasicEndpointResponseBody = {
  endpointGroupId?: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoints belong.', example='epg-bp1dmlohjjz4kqaun****'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-bp14sz7ftcwwjgrdm****'),
  name?: string(name='Name', description='The name of the endpoint.', example='ep01'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateBasicEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBasicEndpointResponseBody(name='body'),
}

async function updateBasicEndpoint(request: UpdateBasicEndpointRequest): UpdateBasicEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBasicEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBasicEndpointGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the endpoint group that is associated with the basic GA instance.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.', example='BasicEndpointGroup', position='Query'),
  endpointAddress?: string(name='EndpointAddress', description='The address of the endpoint.', example='eni-bp1a05txelswuj8g****', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group that is associated with the basic GA instance.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointSubAddress?: string(name='EndpointSubAddress', description='The secondary address of the endpoint.

This parameter is required when the accelerated IP address is associated with the secondary private IP address of an ECS instance or an ENI.

*   If the endpoint type is **ECS**, you can set the **EndpointSubAddress** parameter to the secondary private IP address of the primary ENI. If the parameter is left empty, the primary private IP address of the primary ENI is used.
*   If the endpoint type is **ENI**, you can set the **EndpointSubAddress** parameter to the secondary private IP address of the secondary ENI. If the parameter is left empty, the primary private IP address of the secondary ENI is used.', example='172.16.XX.XX', position='Query'),
  endpointType?: string(name='EndpointType', description='The type of endpoint. Valid values:

*   **ENI**: elastic network interface (ENI)
*   **SLB**: Server Load Balancer (SLB) instance', example='ENI', position='Query'),
  name?: string(name='Name', description='The name of the endpoint group that is associated with the basic GA instance.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='group1', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the basic GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateBasicEndpointGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateBasicEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBasicEndpointGroupResponseBody(name='body'),
}

/**
  * *   **UpdateBasicEndpointGroup** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. After you call this operation to modify an endpoint group that is associated with a basic GA instance, the system deletes the endpoint group and creates another endpoint group in the background for the basic GA instance. You can call the [GetBasicAccelerator](~~353188~~) operation to query the state of the basic GA instance.
  *     *   If the basic GA instance is in the **configuring** state, it indicates that the configurations of the endpoint group are being modified. In this case, you can perform only query operations.
  *     *   If the basic GA instance is in the **active** state, it indicates that the configurations of the endpoint group are modified.
  * *   The **UpdateBasicEndpointGroup** operation cannot be called repeatedly for the same basic GA instance within a specific period of time.
  *
 */
async function updateBasicEndpointGroup(request: UpdateBasicEndpointGroupRequest): UpdateBasicEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBasicEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBasicIpSetRequest {
  bandwidth: int32(name='Bandwidth', description='The bandwidth of the acceleration region. Unit: Mbit/s.', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region of the basic GA instance.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the basic GA instance belongs. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateBasicIpSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6D2BFF54-6AF2-4679-88C4-2F2E187F16CB'),
}

model UpdateBasicIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBasicIpSetResponseBody(name='body'),
}

/**
  * Before you call this operation, take note of the following limits:
  * *   You can call this operation for only basic GA instances whose bandwidth is billed by Cloud Data Transfer (CDT).
  * *   The **UpdateBasicIpSet** operation is asynchronous. After you send a request, the system returns a request ID, but the operation is still being performed in the background. You can call the [GetBasicIpSet](~~362987~~) operation to query the status of an acceleration region:
  *     *   If an acceleration region is in the **updating** state, the bandwidth of the acceleration region is being modified. In this state, you can perform only query operations.
  *     *   If an acceleration region is in the **active** state, the bandwidth of the acceleration region is modified.
  * *   You cannot repeatedly call the **UpdateBasicIpSet** operation for the same basic GA instance within the specified period of time.
  *
 */
async function updateBasicIpSet(request: UpdateBasicIpSetRequest): UpdateBasicIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBasicIpSet', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomRoutingEndpointGroupAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The endpoint group description.

The description can be up to 256 characters in length and cannot contain `http://` or `https://`.', example='EndpointGroup', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The endpoint group ID.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  name?: string(name='Name', description='The endpoint group name.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='group1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateCustomRoutingEndpointGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCustomRoutingEndpointGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCustomRoutingEndpointGroupAttributeResponseBody(name='body'),
}

async function updateCustomRoutingEndpointGroupAttribute(request: UpdateCustomRoutingEndpointGroupAttributeRequest): UpdateCustomRoutingEndpointGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomRoutingEndpointGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomRoutingEndpointGroupDestinationsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  destinationConfigurations: [ 
    {
      destinationId: string(name='DestinationId', description='The ID of the mapping configuration of the endpoint group.', example='dst-abc123****'),
      fromPort?: int32(name='FromPort', description='The start port of the backend service port range of the endpoint group.

Valid values: **1** to **65499**. The **FromPort** value must be smaller than or equal to the **ToPort** value.

You can specify up to 20 start ports in each request.', example='80'),
      protocols?: [ string ](name='Protocols', description='The backend service protocol of the endpoint group. Valid values:

*   **tcp**: TCP
*   **udp**: UDP
*   **tcp,udp**: TCP and UDP

You can specify up to four backend service protocols in each configuration.'),
      toPort?: int32(name='ToPort', description='The end port of the backend service port range of the endpoint group.

Valid values: **1** to **65499**. The **FromPort** value must be smaller than or equal to the **ToPort** value.

You can specify up to 20 end ports in each request.', example='80'),
    }
  ](name='DestinationConfigurations', description='The mapping configurations of endpoint group.

You must specify the backend service port range and protocol of the endpoint group. The specified information is used to map the port range of the associated listener.

You can specify at most 20 mapping configurations, which include port ranges and protocol types.', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateCustomRoutingEndpointGroupDestinationsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCustomRoutingEndpointGroupDestinationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCustomRoutingEndpointGroupDestinationsResponseBody(name='body'),
}

/**
  * *   **UpdateCustomRoutingEndpointGroupDestinations** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) operation to query the status of an endpoint group associated with a custom routing listener to check whether the mapping configurations of the endpoint group are modified.
  *     *   If the endpoint group is in the **updating** state, the mapping configurations of the endpoint group are being modified. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, the mapping configurations of the endpoint group are modified.
  * *   The **UpdateCustomRoutingEndpointGroupDestinations** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function updateCustomRoutingEndpointGroupDestinations(request: UpdateCustomRoutingEndpointGroupDestinationsRequest): UpdateCustomRoutingEndpointGroupDestinationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomRoutingEndpointGroupDestinations', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomRoutingEndpointTrafficPoliciesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the endpoint for which you want to modify the traffic policies.', example='ep-2zewuzypq5e6r3pfh****', position='Query'),
  policyConfigurations: [ 
    {
      address?: string(name='Address', description='The IP address of the destination to which traffic is allowed.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**. You can call the [DescribeCustomRoutingEndpoint](~~449386~~) operation to query the traffic policy for the specified endpoint.

You can specify up to 500 destination IP addresses for each endpoint.', example='10.0.XX.XX'),
      policyId?: string(name='PolicyId', description='The ID of the traffic policy to modify.', example='ply-bptest2****'),
      portRanges?: [ 
        {
          fromPort?: int32(name='FromPort', description='The first port of the destination port range. The specified port must fall within the port range of the specified endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**. You can call the [DescribeCustomRoutingEndpoint](~~449386~~) operation to query the access policy of traffic for the specified endpoint.

If you do not specify FromPort and ToPort, traffic is forwarded to all ports of the destination.

You can specify port ranges for up to 500 destinations for each endpoint and specify up to 10 start ports for each destination.', example='80'),
          toPort?: int32(name='ToPort', description='The last port of the destination port range. The specified port must fall within the port range of the specified endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**. You can call the [DescribeCustomRoutingEndpoint](~~449386~~) operation to query the traffic policy for the specified endpoint.

If you do not specify FromPort and ToPort, traffic is forwarded to all ports of the destination.

You can specify port ranges for up to 500 destinations in each endpoint and specify up to 10 last ports for each destination.', example='80'),
        }
      ](name='PortRanges', description='The port range of the destination to which traffic is allowed. The value of this parameter must fall within the port range of the backend service.

If you do not specify array, traffic is forwarded to all ports.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**. You can call the [DescribeCustomRoutingEndpoint](~~449386~~) operation to query the traffic policy for the specified endpoint.

You can specify port ranges for up to 500 traffic destinations in each endpoint and specify up to 10 port ranges for each traffic destination.'),
    }
  ](name='PolicyConfigurations', description='The traffic policies.

You can specify up to 500 destination IP addresses for each endpoint.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateCustomRoutingEndpointTrafficPoliciesResponseBody = {
  policyIds?: [ string ](name='PolicyIds', description='The IDs of the traffic destinations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCustomRoutingEndpointTrafficPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCustomRoutingEndpointTrafficPoliciesResponseBody(name='body'),
}

/**
  * *   **UpdateCustomRoutingEndpointTrafficPolicies** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) operation to query the status of the task.
  *     *   If the endpoint group is in the **updating** state, traffic policies are being modified for endpoints in the endpoint group. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, traffic policies are modified for endpoints in the endpoint group.
  * *   The **UpdateCustomRoutingEndpointTrafficPolicies** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function updateCustomRoutingEndpointTrafficPolicies(request: UpdateCustomRoutingEndpointTrafficPoliciesRequest): UpdateCustomRoutingEndpointTrafficPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomRoutingEndpointTrafficPolicies', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomRoutingEndpointsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endpointConfigurations: [ 
    {
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.

You can specify up to 20 endpoint IDs.', example='ep-bp1dmlohjjz4kqaun****'),
      policyConfigurations?: [ 
        {
          address?: string(name='Address', description='The IP address of the destination to which to allow traffic.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify up to 20 destination IP addresses for each endpoint.', example='10.0.XX.XX'),
          portRanges?: [ 
            {
              fromPort?: string(name='FromPort', description='The start port of the port range in the destination to which to allow traffic. The specified port must fall within the port range of the specified endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations for each endpoint and specify up to 20 start ports for each destination.', example='80'),
              toPort?: string(name='ToPort', description='The end port of the port range in the destination to which to allow traffic. The specified port must fall within the port range of the specified endpoint group.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations for each endpoint and specify up to 20 end ports for each destination.', example='80'),
            }
          ](name='PortRanges', description='The port range of the destination to which traffic is forwarded. The value of this parameter must fall within the port range of the endpoint group.

If you leave this parameter empty, traffic is forwarded to all destination ports.

This parameter takes effect only when **TrafficToEndpointPolicy** is set to **AllowCustom**.

You can specify port ranges for up to 20 destinations for each endpoint and specify up to 20 port ranges for each destination.'),
        }
      ](name='PolicyConfigurations', description='The configurations of the policy.'),
      trafficToEndpointPolicy?: string(name='TrafficToEndpointPolicy', description='The access policy of traffic for the specified endpoint. Default value: DenyAll. Valid values:

*   **DenyAll**: denies all traffic to the endpoint.

*   **AllowAll**: allows all traffic to the endpoint.

*   **AllowCustom**: allows traffic only to specified destinations.

    If you set this parameter to AllowCustom, you must specify IP addresses and port ranges of destinations to which to allow traffic. If you specify only IP addresses and do not specify port ranges, GA can forward traffic to all ports and the specified IP addresses in the destinations.

You can specify up to 20 access policies of traffic for the specified endpoint.', example='DenyAll'),
    }
  ](name='EndpointConfigurations', description='The configurations of the endpoint.', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group to which the endpoints that you want to modify belong.', example='epg-bp1bpn0kn908w4nb****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateCustomRoutingEndpointsResponseBody = {
  endpointIds?: [ string ](name='EndpointIds', description='The IDs of the endpoints.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCustomRoutingEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCustomRoutingEndpointsResponseBody(name='body'),
}

/**
  * ## Description
  * *   **UpdateCustomRoutingEndpoints** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeCustomRoutingEndpointGroup](~~449373~~) operation to query the state of the endpoint groups associated with a custom routing listener to check whether the endpoints in the endpoint groups are modified.
  *     *   If an endpoint group is in the **updating** state, the endpoints in the endpoint group are being modified. In this case, you can perform only query operations.
  *     *   If an endpoint group is in the **active** state, the endpoints in the endpoint group are modified.
  * *   The **UpdateCustomRoutingEndpoints** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function updateCustomRoutingEndpoints(request: UpdateCustomRoutingEndpointsRequest): UpdateCustomRoutingEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomRoutingEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDomainRequest {
  domain: string(name='Domain', description='The new accelerated domain name.

Only primary domain names are supported, such as `example.net`.', example='example.net', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  targetDomain: string(name='TargetDomain', description='The accelerated domain name to be modified.', example='example.com', position='Query'),
}

model UpdateDomainResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDomainResponseBody(name='body'),
}

/**
  * You can call this operation to modify an accelerated domain name. If the new accelerated domain name is hosted in the Chinese mainland, you must obtain an Internet content provider (ICP) number for the domain name.
  * You cannot call the **UpdateDomain** operation again by using the same Alibaba Cloud account before the previous request is completed.
  *
 */
async function updateDomain(request: UpdateDomainRequest): UpdateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDomainStateRequest {
  domain: string(name='Domain', description='The accelerated domain name whose ICP filing status you want to update.', example='www.example.com', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateDomainStateResponseBody = {
  domain?: string(name='Domain', description='The accelerated domain name.', example='www.example.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='The ICP filing status of the accelerated domain name. Valid values:

*   **illegal:** The domain name is illegal.
*   **inactive:** The domain name has not completed ICP filing.
*   **active:** The domain name has a valid ICP number.
*   **unknown:** The ICP filing status is unknown.', example='active'),
}

model UpdateDomainStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDomainStateResponseBody(name='body'),
}

/**
  * You can call this operation to query and update the ICP filing status of an accelerated domain name.
  * The **UpdateDomainState** operation holds an exclusive lock on the GA instance. While the operation is in progress, you cannot call the same operation with the same Alibaba Cloud account.
  *
 */
async function updateDomainState(request: UpdateDomainStateRequest): UpdateDomainStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDomainState', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEndpointGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the endpoint group.

The description cannot exceed 256 characters in length and cannot contain `http://` or `https://`.', example='EndpointGroup', position='Query'),
  endpointConfigurations?: [ 
    {
      enableClientIPPreservation?: boolean(name='EnableClientIPPreservation', description='Specifies whether to reserve client IP addresses. Default value: false. Valid values:

*   **true**: reserves client IP addresses.
*   **false**: does not reserve client IP addresses.', example='false'),
      enableProxyProtocol?: boolean(name='EnableProxyProtocol', description='Specifies whether to preserve client IP addresses by using the ProxyProtocol module. Default value: false. Valid values:

*   **true**: preserves client IP addresses by using the ProxyProtocol module.
*   **false**: does not preserve client IP addresses by using the ProxyProtocol module.', example='false'),
      endpoint: string(name='Endpoint', description='The IP address or domain name of the endpoint.', example='120.XX.XX.21'),
      subAddress?: string(name='SubAddress', description='The private IP address of the ENI.

> - When the Endpoint type is ENI, this parameter can be configured. If not configured, it defaults to the primary private IP address of ENI.', example='172.168.XX.XX'),
      type: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain:** a custom domain name.
*   **Ip:** a custom IP address.
*   **PublicIp:** a public IP address provided by Alibaba Cloud.
*   **ECS:** Elastic Compute Service (ECS) instance.
*   **SLB:** Server Load Balancer (SLB) instance.
*   **ALB:** Application Load Balancer (ALB) instance.
*   **OSS:** Object Storage Service (OSS) bucket.
*   **ENI:** Elastic Network interface (ENI).
*   **NLB:** Network Load Balancer (NLB) instance.

> *   If you set this parameter to **ECS** or **SLB** and the service-linked role AliyunServiceRoleForGaVpcEndpoint does not exist, the system automatically creates the service-linked role.
> *   If you set this parameter to **ALB** and the service-linked role AliyunServiceRoleForGaAlb does not exist, the system automatically creates the service-linked role.
> *   If you set this parameter to **OSS** and the service-linked role AliyunServiceRoleForGaOss does not exist, the system automatically creates the service-linked role.

For more information, see [Service-linked roles](~~178360~~).', example='Ip'),
      weight: int32(name='Weight', description='The weight of the endpoint.

Valid values: **0** to **255**.

>  If the weight of an endpoint is set to 0, GA stops distributing network traffic to the endpoint. Proceed with caution.', example='20'),
    }
  ](name='EndpointConfigurations', description='The information about the endpoints.

You can specify information for up to 20 endpoints.', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1dmlohjjz4kqaun****', position='Query'),
  endpointGroupRegion: string(name='EndpointGroupRegion', description='The ID of the region where the endpoint group is created.', example='cn-hangzhou', position='Query'),
  endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol that is used by the backend service. Valid values:

*   **HTTP**
*   **HTTPS**

> *   You can set this parameter only when the listener that is associated with the endpoint group uses the HTTP or HTTPS protocol.
> *   For an HTTP listener, the backend service protocol must be HTTP.', example='HTTP', position='Query'),
  healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable the health check feature. Default value: true. Valid values:

*   **true**: enables the health check feature.
*   **false**: disables the health check feature.', example='true', position='Query'),
  healthCheckIntervalSeconds?: int32(name='HealthCheckIntervalSeconds', description='The interval between two consecutive health checks. Unit: seconds. Valid values: **1** to **50**.', example='3', position='Query'),
  healthCheckPath?: string(name='HealthCheckPath', description='The path to which health check requests are sent.', example='/healthcheck', position='Query'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The port that is used for health checks. Valid values: **1** to **65535**.', example='20', position='Query'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which health check requests are sent. Valid values:

*   **tcp**: TCP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp', position='Query'),
  name?: string(name='Name', description='The name of the endpoint group.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='group1', position='Query'),
  portOverrides?: [ 
    {
      endpointPort?: int32(name='EndpointPort', description='The endpoint port that is mapped to the listener port.', example='80'),
      listenerPort?: int32(name='ListenerPort', description='The listener port that is mapped to the endpoint port.

> *   Only HTTP and HTTPS listeners support port mappings.
> *   The listener port in a port mapping must be the one used by the current listener.', example='443'),
    }
  ](name='PortOverrides', description='The mappings between ports.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  thresholdCount?: int32(name='ThresholdCount', description='The number of consecutive health check failures that must occur before a healthy endpoint group is considered unhealthy, or the number of consecutive health check successes that must occur before an unhealthy endpoint group is considered healthy.

Valid values: **2** to **10**.', example='3', position='Query'),
  trafficPercentage?: int32(name='TrafficPercentage', description='The weight of the endpoint group when the listener is associated with multiple endpoint groups.', example='20', position='Query'),
}

model UpdateEndpointGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateEndpointGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEndpointGroupResponseBody(name='body'),
}

/**
  * *   **UpdateEndpointGroup** is an asynchronous operation. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call the [DescribeEndpointGroup](~~153260~~) operation to query the state of an endpoint group.
  *     *   If the endpoint group is in the **updating** state, it indicates that the configurations of the endpoint group are being modified. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, it indicates that the configurations of the endpoint group are modified.
  * *   The **UpdateEndpointGroup** operation cannot be repeatedly called for the same Global Accelerator (GA) instance within a specific period of time.
  *
 */
async function updateEndpointGroup(request: UpdateEndpointGroupRequest): UpdateEndpointGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEndpointGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEndpointGroupAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but make sure that the value is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the endpoint group that you want to modify.', example='testEndpointGroup', position='Query'),
  endpointGroupId: string(name='EndpointGroupId', description='The ID of the endpoint group.', example='epg-bp1ple63864a5hyj5****', position='Query'),
  name?: string(name='Name', description='The name of the endpoint group that you want to modify.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Global Accelerator (GA) instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateEndpointGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateEndpointGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEndpointGroupAttributeResponseBody(name='body'),
}

async function updateEndpointGroupAttribute(request: UpdateEndpointGroupAttributeRequest): UpdateEndpointGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEndpointGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEndpointGroupsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true:** performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  endpointGroupConfigurations: [ 
    {
      enableClientIPPreservationProxyProtocol?: boolean(name='EnableClientIPPreservationProxyProtocol', description='Specifies whether to use the proxy protocol to preserve client IP addresses. Valid values:

*   **true**
*   **false**', example='false'),
      enableClientIPPreservationToa?: boolean(name='EnableClientIPPreservationToa', description='Specifies whether to preserve client IP addresses by using the TCP Option Address (TOA) module. Valid values:

*   **true**
*   **false**', example='false'),
      endpointConfigurations?: [ 
        {
          endpoint: string(name='Endpoint', description='The IP address, domain name, or instance ID based on the value of Type.', example='47.0.XX.XX'),
          subAddress?: string(name='SubAddress', description='The private IP address of the ENI.

> When the Endpoint type is ENI, this parameter can be configured. If not configured, it defaults to the primary private IP address of ENI.', example='172.168.XX.XX'),
          type: string(name='Type', description='The type of the endpoint. Valid values:

*   **Domain**: a custom domain name
*   **Ip**: a custom IP address
*   **PublicIp**: a public IP address provided by Alibaba Cloud
*   **ECS**: an Elastic Compute Service (ECS) instance
*   **SLB**: a Server Load Balancer (SLB) instance
*   **ALB**: an Application Load Balancer (ALB) instance
*   **OSS**: an Object Storage Service (OSS) bucket

>- If you set this parameter to **ECS** or **SLB** and the service-linked role AliyunServiceRoleForGaVpcEndpoint does not exist, the system automatically creates the service-linked role. 
>- If you set this parameter to **ALB** and the service-linked role AliyunServiceRoleForGaAlb does not exist, the system automatically creates the service-linked role.
>- If you set this parameter to **OSS** and the service-linked role AliyunServiceRoleForGaOss does not exist, the system automatically creates the service-linked role.

For more information, see [Service-linked roles](~~178360~~).', example='Ip'),
          weight: long(name='Weight', description='The weight of the endpoint.

Valid values: **0** to **255**.

>  If you set the weight of an endpoint to 0, the GA instance stops distributing traffic to the endpoint.', example='20'),
        }
      ](name='EndpointConfigurations', description='The configurations of the endpoints in the endpoint group.'),
      endpointGroupDescription?: string(name='EndpointGroupDescription', description='The description of the endpoint group.

The description can be up to 256 characters in length and cannot contain `http://` or `https://`.', example='group1'),
      endpointGroupId: string(name='EndpointGroupId', description='The endpoint ID.', example='ep-bp1d2utp8qqe2a44t****'),
      endpointGroupName?: string(name='EndpointGroupName', description='The name of the endpoint group.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='group1'),
      endpointRequestProtocol?: string(name='EndpointRequestProtocol', description='The protocol that is used by the backend service. Valid values:

*   **HTTP**
*   **HTTPS**

> * You can specify this parameter only if the listener that is associated with the endpoint group uses HTTP or HTTPS.
> * For an HTTP listener, the backend service protocol must be HTTP.', example='HTTP'),
      healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable the health check feature. Valid values:

*   **true**
*   **false** (default)', example='true'),
      healthCheckIntervalSeconds?: long(name='HealthCheckIntervalSeconds', description='The interval at which health checks are performed. Unit: seconds. Valid values: **1** to **50**.', example='3'),
      healthCheckPath?: string(name='HealthCheckPath', description='The path to which health check requests are sent.', example='/healthcheck'),
      healthCheckPort?: long(name='HealthCheckPort', description='The port that is used for health checks.

Valid values: **1** to **65535**.', example='20'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol over which health check requests are sent. Valid values:

*   **tcp**
*   **http**
*   **https**', example='tcp'),
      portOverrides?: [ 
        {
          endpointPort?: long(name='EndpointPort', description='The endpoint port.

Valid values: **1** to **65499**.', example='80'),
          listenerPort?: long(name='ListenerPort', description='The listener port.

Valid values: **1** to **65499**.

> * Only HTTP and HTTPS listeners support port mappings.
> * The listener port in a port mapping must be the one used by the current listener.', example='443'),
        }
      ](name='PortOverrides', description='The port mapping.'),
      thresholdCount?: long(name='ThresholdCount', description='The number of consecutive health check failures that must occur before a healthy endpoint group is considered unhealthy, or the number of consecutive health check successes that must occur before an unhealthy endpoint group is considered healthy.

Valid values: **2** to **10**.', example='3'),
      trafficPercentage?: long(name='TrafficPercentage', description='The traffic ratio of the endpoint group when the specified listener is associated with multiple endpoint groups.

Valid values: **1** to **100**.', example='20'),
    }
  ](name='EndpointGroupConfigurations', description='The configuration of the endpoint group.', position='Query'),
  listenerId: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateEndpointGroupsResponseBody = {
  endpointGroupIds?: [ string ](name='EndpointGroupIds', description='The IDs of the endpoint groups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateEndpointGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEndpointGroupsResponseBody(name='body'),
}

/**
  * ### Description
  * *   **UpdateEndpointGroups** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEndpointGroup](~~153260~~) or [ListEndpointGroups](~~153261~~) operation to query the status of an endpoint group.
  *     *   If the endpoint group is in the **updating** state, it indicates that the configuration of the endpoint group is being modified. In this case, you can perform only query operations.
  *     *   If the endpoint group is in the **active** state, it indicates that the configuration of the endpoint group is modified.
  * *   The **UpdateEndpointGroups** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function updateEndpointGroups(request: UpdateEndpointGroupsRequest): UpdateEndpointGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEndpointGroups', 'POST', '/', 'json', false, 'json', request);
}

model UpdateForwardingRulesRequest {
  acceleratorId: string(name='AcceleratorId', description='The GA instance ID.', example='ga-bp17frjjh0udz4q****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4****', position='Query'),
  forwardingRules: [ 
    {
      forwardingRuleId: string(name='ForwardingRuleId', description='The forwarding rule ID.', example='frule-bp1dii16gu9qdvb34****'),
      forwardingRuleName?: string(name='ForwardingRuleName', description='The forwarding rule name.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test'),
      priority: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1** to **10000**. A smaller value specifies a higher priority.', example='1000'),
      ruleActions: [ 
        {
          forwardGroupConfig?: {
            serverGroupTuples: [ 
              {
                endpointGroupId: string(name='EndpointGroupId', description='The ID of an endpoint group.

>  We recommend that you use **RuleActionType** and **RuleActionValue** rather than this parameter to configure forwarding actions.', example='epg-bp1ieei9664r5nv****'),
              }
            ](name='ServerGroupTuples', description='The configuration of an endpoint group.

>  We recommend that you use **RuleActionType** and **RuleActionValue** rather than this parameter to configure forwarding actions.'),
          }(name='ForwardGroupConfig', description='The forwarding configuration.

>  We recommend that you use **RuleActionType** and **RuleActionValue** rather than this parameter to configure forwarding actions.'),
          order: int32(name='Order', description='The forwarding priority.

>  This parameter does not take effect. Ignore this parameter.', example='20'),
          ruleActionType: string(name='RuleActionType', description='The type of the forwarding action. Valid values:

*   **ForwardGroup**: forwards a request.
*   **Redirect**: redirects a request.
*   **FixResponse**: returns a fixed response.
*   **Rewrite**: rewrites a request.
*   **AddHeader**: adds a header to a request.
*   **RemoveHeader**: deletes the header of a request.', example='ForwardGroup'),
          ruleActionValue?: string(name='RuleActionValue', description='The value of the forwarding action.

You must specify different JSON strings based on the value of **RuleActionType**.

A forwarding rule can contain only one forwarding action whose type is **ForwardGroup**, **Redirect**, or **FixResponse**. You must specify a forwarding action whose type is **Rewrite**, **AddHeader**, or **RemoveHeader** before a forwarding action whose type is **ForwardGroup**.

*   If you set **RuleActionType** to **ForwardGroup**, this parameter specifies the information of a virtual endpoint group. You can forward requests to only one virtual endpoint group. Example: `{"type":"endpointgroup", "value":"epg-bp1enpdcrqhl78g6r****"}`.

    *   `type`: Set this parameter to `endpointgroup`.
    *   `value`: Set this parameter to the ID of a virtual endpoint group.

*   If you set **RuleActionType** to **Redirect**, this parameter specifies the redirect configuration. You cannot leave all the following parameters empty or use the default values for all the following parameters for a forwarding action whose type is **Redirect**: `protocol`, `domain`, `port`, `path`, and `query`. Example: `{"protocol":"HTTP", "domain":"www.example.com", "port":"80", "path":"/a","query":"value1", "code":"301" }`.

    *   `protocol`: the protocol of requests after the requests are redirected. Valid values: `${protocol}` (default), `HTTP`, and `HTTPS`.
    *   `domain`: the domain name to which requests are redirected. Default value: `${host}`. You can also enter a domain name. The domain name must be 3 to 128 characters in length, and can contain only letters, digits, and the following special characters: `. - ? = ~ _ - + / ^ * ! $ & | ( ) [ ]`.
    *   `port`: the port to which requests are redirected. Default value: `${port}`. You can enter a port number that ranges from 1 to 63335.
    *   `path`: the path to which requests are redirected. Default value: `${path}`. The path must be 1 to 128 characters in length. To use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? ~ ^ * $ : ( ) [ ] + |`. The path must start with a tilde (~). If you do not want to use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? :`. The path must start with a forward slash (/).
    *   `query`: the query string to which requests are redirected. Default value: `${query}`. You can also specify a query string. The query string must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The query string cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > # | &`.
    *   `code`: the redirect code. Valid values: `301`, `302`, `303`, `307`, and `308`.

*   If you set **RuleActionType** to **FixResponse**, this parameter specifies a fixed response. Example: `{"code":"200", "type":"text/plain", "content":"dssacav" }`.

    *   `code`: the HTTP response status code. The response status code must be one of the following numeric strings: `2xx`, `4xx`, and `5xx`. The letter `x` is a digit.
    *   `type`: the type of the response content. Valid values: **text/plain**, **text/css**, **text/html**, **application/javascript**, and **application/json**.
    *   `content`: the response content. The response content cannot exceed 1,000 characters in length and does not support Chinese characters.

*   If you set **RuleActionType** to **AddHeader**, this parameter specifies an HTTP header to be added. If a forwarding rule contains a forwarding action whose type is **AddHeader**, you must specify another forwarding action whose type is **ForwardGroup**. Example: `[{"name":"header1","type":"userdefined", "value":"value"}]`.

    *   `name`: the name of the HTTP header. The name must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). The name of the HTTP header specified by **AddHeader** must be unique and cannot be the same as the name of the HTTP header specified by **RemoveHeader**.
    *   `type`: the content type of the HTTP header. Valid values: `user-defined`, `ref`, and `system-defined`.
    *   `value`: the content of the HTTP header. You cannot leave this parameter empty. If you set `type` to `user-defined`, the content must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The content can contain letters, digits, hyphens (-), and underscores (\\_). The content cannot start or end with a space character. If you set `type` to `ref`, the content must be 1 to 128 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). The content cannot start or end with a space character. If you set `type` to `system-defined`, only `ClientSrcIp` is supported.**

*   If you set **RuleActionType** to **RemoveHeader**, this parameter specifies an HTTP header to be removed. If a forwarding rule contains a forwarding action whose type is **RemoveHeader**, you must specify another forwarding action whose type is **ForwardGroup**. The header must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). Example: `["header1"]`.

*   If you set **RuleActionType** to **Rewrite**, this parameter specifies the rewriting configuration. If a forwarding rule contains a forwarding action whose type is **Rewrite**, you must specify another forwarding action whose type is **ForwardGroup**. Example: `{"domain":"value1", "path":"value2", "query":"value3"}`.

    *   `domain`: the domain name to which requests are redirected. Default value: `${host}`. You can also enter a domain name. The domain name must be 3 to 128 characters in length, and can contain only lowercase letters, digits, and the following special characters: `. - ? = ~ _ - + / ^ * ! $ & | ( ) [ ]`.
    *   `path`: the path to which requests are redirected. Default value: `${path}`. The path must be 1 to 128 characters in length. To use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? ~ ^ * $ : ( ) [ ] + |`. The path must start with a tilde (~). If you do not want to use a regular expression, the path can contain letters, digits, and the following special characters: `. - _ / = ? :`. The path must start with a forward slash (/).
    *   `query`: the query string to which requests are redirected. Default value: `${query}`. You can also specify a query string. The query string must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. The query string cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > # | &`.', example='[{"type":"endpointgroup", "value":"epg-bp1enpdcrqhl78g6r****"}]'),
        }
      ](name='RuleActions', description='The configurations of the forwarding actions.'),
      ruleConditions: [ 
        {
          hostConfig?: {
            values?: [ string ](name='Values', description='The domain name configuration.

>  We recommend that you use **RuleConditionType** and **RuleConditionValue** rather than this parameter to configure forwarding conditions.'),
          }(name='HostConfig', description='The domain name configuration.

>  We recommend that you use **RuleConditionType** and **RuleConditionValue** rather than this parameter to configure forwarding conditions.'),
          pathConfig?: {
            values?: [ string ](name='Values', description='The path configuration.

>  We recommend that you use **RuleConditionType** and **RuleConditionValue** rather than this parameter to configure forwarding conditions.'),
          }(name='PathConfig', description='The path configuration.

>  We recommend that you use **RuleConditionType** and **RuleConditionValue** rather than this parameter to configure forwarding conditions.'),
          ruleConditionType: string(name='RuleConditionType', description='The type of the forwarding condition. Valid values:

*   **Host**: Requests are forwarded based on domain names.
*   **Path**: Requests are forwarded based on paths.
*   **RequestHeader**: Requests are forwarded based on HTTP headers.
*   **Query**: Requests are forwarded based on query strings.
*   **Method**: Requests are forwarded based on HTTP request methods.
*   **Cookie**: Requests are forwarded based on cookies.
*   **SourceIP**: Requests are forwarded based on source IP addresses.', example='Host'),
          ruleConditionValue?: string(name='RuleConditionValue', description='The value of the forwarding condition. You must specify different JSON strings based on the value of **RuleConditionType**.

*   If you set **RuleConditionType** to **Host**, this parameter specifies a domain name condition. A forwarding rule can contain only one forwarding condition of the Host type. You can specify multiple domain names in a forwarding condition. The relationship between multiple domain names is OR. The domain name must be 3 to 128 characters in length and can contain letters, digits, hyphens (-), and periods (.). Supported wildcard characters are asterisks (\\*) and question marks (?). Example: `["www.example.com", "www.aliyun.com"]`.

*   If **RuleConditionType** is set to **Path**, this parameter specifies a path condition. A forwarding rule can contain multiple forwarding conditions of the Path type. The relationship between multiple path conditions is OR. You can specify multiple paths in a forwarding condition. The relationship between multiple paths is OR. The path must be 1 to 128 characters in length, and must start with a forward slash (/). The path can contain letters, digits, and the following special characters: $ - \\_ . + / & ~ @ : \\". Supported wildcard characters are asterisks (\\*) and question marks (?). Example: `["/a", "/b/"]`.

*   If you set **RuleConditionType** to **RequestHeader**, this parameter specifies an HTTP header condition that consists of key-value pairs. The header values in a forwarding condition must be unique. Example: `[{"header1":["value1","value2"]}]`.

    *   Key: The key of an HTTP header must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_).
    *   Value: The value of an HTTP header must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and less than 127`. The value cannot start or end with a space character.

*   If you set **RuleConditionType** to **Query**, this parameter specifies a query string condition that consists of key-value pairs. Example: `[{"query1":["value1"]}, {"query2":["value2"]}]`.

    *   Key: The key of an HTTP header must be 1 to 100 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and less than 127`. The key cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > \\ ; / ? : @ & = + , $ % | " ^ ~`.
    *   Value: The value of an HTTP header must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and less than 127`. The value cannot contain uppercase letters, space characters, or the following special characters: `[ ] { } < > \\ ; / ? : @ & = + , $ % | " ^ ~`.

*   If you set **RuleConditionType** to **Method**, this parameter specifies an HTTP request method condition. Valid values: **HEAD**, **GET**, **POST**, **OPTIONS**, **PUT**, **PATCH**, and **DELETE**. Example: `["GET", "OPTIONS", "POST"]`.

*   If you set **RuleConditionType** to **Cookie**, this parameter specifies a cookie condition that consists of key-value pairs. Example: `[{"cookie1":["value1"]}, {"cookie2":["value2"]}]`.

    *   Key: The key of a cookie must be 1 to 100 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and less than 127`. The key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.
    *   Value: The value of a cookie must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and less than 127`. The value cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.

*   If you set **RuleConditionType** to **SourceIP**, this parameter specifies a source IP address condition. You can specify IP addresses, such as 1.1.XX.XX/32. You can also specify CIDR blocks, such as 2.2.XX.XX/24. A forwarding rule can contain only one forwarding condition whose type is SourceIP. You can specify multiple source IP addresses in a forwarding condition. The relationship between multiple source IP addresses is OR. Example: `["1.1.XX.XX/32", "2.2.XX.XX/24"]`.', example='["www.example.com", "www.aliyun.com"]'),
        }
      ](name='RuleConditions', description='The forwarding conditions.'),
      ruleDirection?: string(name='RuleDirection', description='The direction in which the rule takes effect. You do not need to configure this parameter.

By default, this parameter is set to **request**, which specifies that the rule takes effect on requests.', example='request'),
    }
  ](name='ForwardingRules', description='The configurations of the forwarding rules.', example='test', position='Query'),
  listenerId: string(name='ListenerId', description='The listener ID.', example='lsr-bp1s0vzbi5bxlx5****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateForwardingRulesResponseBody = {
  forwardingRules?: [ 
    {
      forwardingRuleId?: string(name='ForwardingRuleId', description='The forwarding rule ID.', example='frule-bp1dii16gu9qdvb34****'),
    }
  ](name='ForwardingRules', description='Details about the forwarding rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='64ADAB1E-0B7F-4FD8-A404-3BECC0E9CCFF'),
}

model UpdateForwardingRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateForwardingRulesResponseBody(name='body'),
}

/**
  * *   **UpdateForwardingRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListForwardingRules](~~205817~~) operation to query the status of a forwarding rule.
  *     *   If the forwarding rule is in the **configuring** state, it indicates that the forwarding rule is being modified. In this case, you can perform only query operations.
  *     *   If the forwarding rule is in the **active** state, it indicates that the forwarding rule is modified.
  * *   The **UpdateForwardingRules** operation holds an exclusive lock on the Global Accelerator (GA) instance. While the operation is in progress, you cannot call the same operation in the same Alibaba Cloud account.
  *
 */
async function updateForwardingRules(request: UpdateForwardingRulesRequest): UpdateForwardingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateForwardingRules', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpSetRequest {
  bandwidth: int32(name='Bandwidth', description='The new bandwidth to be allocated to the acceleration region. Unit: Mbit/s.', example='3', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** may be different for each API request.', example='7D2F7E4E-B958-439C-9821-56D6213A31EC', position='Query'),
  ipSetId: string(name='IpSetId', description='The ID of the acceleration region that you want to modify.', example='ips-bp11r5jb8ogp122xl****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the GA instance is deployed. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateIpSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7D2F7E4E-B958-439C-9821-56D6213A31EC'),
}

model UpdateIpSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIpSetResponseBody(name='body'),
}

/**
  * *   **UpdateIpSet** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeIpSet](~~153246~~) operation to query the status of an acceleration region.
  *     *   If the acceleration region is in the **updating** state, it indicates that the acceleration region is being modified. In this case, you can continue to perform query operations on the acceleration regions.
  *     *   If the acceleration region is in the **active** state, it indicates that the acceleration region is modified.
  * *   You cannot call the **UpdateIpSet** operation again on the same GA instance before the previous operation is complete.
  *
 */
async function updateIpSet(request: UpdateIpSetRequest): UpdateIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpSet', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpSetsRequest {
  ipSets: [ 
    {
      bandwidth: int32(name='Bandwidth', description='The new bandwidth of the acceleration region. Unit: Mbit/s.

You can specify the bandwidth for up to 100 acceleration regions.', example='4'),
      ipSetId: string(name='IpSetId', description='The ID of the acceleration region that you want to modify.

You can specify the IDs of up to 100 acceleration regions.', example='ips-bp11c9mpphtb1xkds****'),
    }
  ](name='IpSets', description='The acceleration regions.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Global Accelerator (GA) instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
}

model UpdateIpSetsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='685662FF-B1CE-4D5C-A4C8-2FF3C2146BFC'),
}

model UpdateIpSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIpSetsResponseBody(name='body'),
}

/**
  * *   **UpdateIpSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeIpSet](~~153246~~) operation to query the status of the task.
  *     *   If an acceleration region is in the **updating** state, the acceleration region is being modified. In this case, you can perform only query operations.
  *     *   If an acceleration region is in the **active** state, the acceleration region is modified.
  * *   You cannot repeatedly call the **UpdateIpSet** operation for the same GA instance within a specific period of time.
  *
 */
async function updateIpSets(request: UpdateIpSetsRequest): UpdateIpSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpSets', 'POST', '/', 'json', false, 'json', request);
}

model UpdateListenerRequest {
  backendPorts?: [ 
    {
      fromPort?: int32(name='FromPort', description='The first port in the range of ports that are used by backend servers to receive requests.

> This parameter is required only when you configure an HTTPS or HTTP listener and the listener port is different from the service port of the backend servers. In this case, the first port that is used by the backend servers to receive requests must be the same as the last port.', example='80'),
      toPort?: int32(name='ToPort', description='The last port in the range of ports that are used by backend servers to receive requests.

> This parameter is required only when you configure an HTTPS or HTTP listener and the listener port is different from the service port of the backend servers. In this case, the first port that is used by the backend servers to receive requests must be the same as the last port.', example='80'),
    }
  ](name='BackendPorts', description='The range of ports that are used by backend servers to receive requests.', position='Query'),
  certificates?: [ 
    {
      id?: string(name='Id', description='The ID of the SSL certificate.

> This parameter is required only when you configure an HTTPS listener.', example='449****-cn-hangzhou'),
    }
  ](name='Certificates', description='The SSL certificate.', position='Query'),
  clientAffinity?: string(name='ClientAffinity', description='Specifies whether to enable client affinity for the listener.

*   If this parameter is left empty, client affinity is disabled. After client affinity is disabled, requests from a specific client IP address may be forwarded to different endpoints.
*   To enable client affinity, set this parameter to **SOURCE_IP**. In this case, when a client accesses stateful applications, requests from the same client are always forwarded to the same endpoint regardless of the source port or protocol.', example='SOURCE_IP', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the listener. The description can be at most 200 characters in length.', example='Listener', position='Query'),
  idleTimeout?: int32(name='IdleTimeout', position='Query'),
  listenerId: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****', position='Query'),
  name?: string(name='Name', description='The name of the listener.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='Listener', position='Query'),
  portRanges?: [ 
    {
      fromPort: int32(name='FromPort', description='The first port of the listener port range that is used to receive and forward requests to endpoints.

Valid values: **1** to **65499**. The **FromPort** value must be smaller than or equal to the **ToPort** value.

The maximum number of ports that can be configured varies based on the routing type and protocol of the listener. For more information, see [Listener overview](~~153216~~).

> You can configure only one listener port for an HTTP or HTTPS listener. In this case, the first port is the same as the last port.', example='20'),
      toPort: int32(name='ToPort', description='The last port of the listener port range that is used to receive and forward requests to endpoints.

Valid values: **1** to **65499**. The **FromPort** value must be smaller than or equal to the **ToPort** value.

The maximum number of ports that can be configured varies based on the routing type and protocol of the listener. For more information, see [Listener overview](~~153216~~).

> You can configure only one listener port for an HTTP or HTTPS listener. In this case, the first port is the same as the last port.', example='21'),
    }
  ](name='PortRanges', description='The listener ports that are used to receive requests and forward the requests to endpoints.

Valid values: **1** to **65499**.

The maximum number of ports that can be configured varies based on the routing type and protocol of the listener. For more information, see [Listener overview](~~153216~~).', position='Query'),
  protocol?: string(name='Protocol', description='The network transmission protocol that is used by the listener. Valid values:

*   **tcp**: TCP
*   **udp**: UDP
*   **http**: HTTP
*   **https**: HTTPS', example='tcp', position='Query'),
  proxyProtocol?: string(name='ProxyProtocol', description='Specifies whether to reserve client IP addresses. Default value: false. Valid values:

*   **true**: enables client IP preservation. After client IP addresses are reserved, you can view client IP addresses on the endpoints.
*   **false** (default): disables client IP preservation.

> This parameter will be deprecated in the API operations that are used to configure listeners. We recommend that you set this parameter when you call API operations to configure endpoint groups. For more information about the **ProxyProtocol** parameter, see [CreateEndpointGroup](~~153259~~) and [UpdateEndpointGroup](~~153262~~).', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the GA instance. Set the value to **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', position='Query'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy. Valid values:

*   **tls_cipher_policy\\_1\\_0**

    *   Supported Transport Layer Security (TLS) versions: TLS 1.0, TLS 1.1, and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_1**

    *   Supported TLS versions: TLS 1.1 and TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_2**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict**

    *   Supported TLS version: TLS 1.2
    *   Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

*   **tls_cipher_policy\\_1\\_2\\_strict_with\\_1\\_3**

    *   Supported TLS versions: TLS 1.2 and TLS 1.3
    *   Supported cipher suites: TLS_AES\\_128\\_GCM_SHA256, TLS_AES\\_256\\_GCM_SHA384, TLS_CHACHA20\\_POLY1305\\_SHA256, TLS_AES\\_128\\_CCM_SHA256, TLS_AES\\_128\\_CCM\\_8\\_SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES128-SHA256, ECDHE-ECDSA-AES256-SHA384, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-ECDSA-AES128-SHA, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA

> This parameter is available only when you create an HTTPS listener.', example='tls_cipher_policy_1_0', position='Query'),
  xForwardedForConfig?: {
    xForwardedForGaApEnabled?: boolean(name='XForwardedForGaApEnabled', description='Specifies whether to use the `GA-AP` header to retrieve information about acceleration regions. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xForwardedForGaIdEnabled?: boolean(name='XForwardedForGaIdEnabled', description='Specifies whether to use the `GA-ID` header to retrieve the ID of the GA instance. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xForwardedForPortEnabled?: boolean(name='XForwardedForPortEnabled', description='Specifies whether to use the `GA-X-Forward-Port` header to retrieve the listener ports of the GA instance. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Specifies whether to use the `GA-X-Forward-Proto` header to retrieve the listener protocol of the GA instance. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
    xRealIpEnabled?: boolean(name='XRealIpEnabled', description='Specifies whether to use the `X-Real-IP` header to retrieve client IP addresses. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is available only when you create an HTTPS or HTTP listener.', example='false'),
  }(name='XForwardedForConfig', description='The `XForward` headers.', position='Query'),
}

model UpdateListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
}

model UpdateListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateListenerResponseBody(name='body'),
}

/**
  * This operation can be called to modify the configurations such as the protocol and ports of a listener to meet your business requirements.
  * When you call this operation, take note of the following items:
  * *   **UpdateListener** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeListener](~~153254~~) operation to query the status of a listener.
  *     *   If the listener is in the **updating** state, it indicates that its configurations are being modified. In this case, you can perform only query operations.
  *     *   If the listener is in the **active** state, it indicates that its configurations are modified.
  * *   The **UpdateListener** operation cannot be repeatedly called to modify listener configurations for the same GA instance within a specific period of time.
  *
 */
async function updateListener(request: UpdateListenerRequest): UpdateListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateListener', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceManagedControlRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource whose control mode you want to change.', example='ga-bp149u6o36qt1as9b****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource whose control mode you want to change.

*   Set the value to **Accelerator**, which specifies a standard GA instance.', example='Accelerator', position='Query'),
  serviceManaged?: boolean(name='ServiceManaged', description='The control mode of the resource.

*   Set the value to false, which changes the control mode of the resource from managed mode to unmanaged mode.

>  You can change the control mode only from managed mode to unmanaged mode.', example='false', position='Query'),
}

model UpdateServiceManagedControlResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B7770CB9-9745-4FE5-9EDA-D14B01A12A50'),
}

model UpdateServiceManagedControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceManagedControlResponseBody(name='body'),
}

/**
  * *   This operation is applicable only to **managed** Global Accelerator (GA) instances.
  * *   After you change the control mode of a GA instance from managed mode to unmanaged mode, you cannot change the mode of the instance to managed mode.
  * *   After you change the control mode of a GA instance from managed mode to unmanaged mode, you can obtain all operation permissions on the instance.
  *   <warning>If you change or delete a configuration of a GA instance whose control mode is changed from managed mode to unmanaged mode, the cloud services that depend on the instance may not work as expected. Proceed with caution.></warning>
  *
 */
async function updateServiceManagedControl(request: UpdateServiceManagedControlRequest): UpdateServiceManagedControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceManagedControl', 'POST', '/', 'json', false, 'json', request);
}

