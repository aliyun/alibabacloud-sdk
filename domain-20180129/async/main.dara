/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Domain';
  @version = '2018-01-29';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcknowledgeTaskResultRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  taskDetailNo: [ string ](name='TaskDetailNo', example='2659c29493e94416b297a7691340ccc4', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model AcknowledgeTaskResultResponseBody = {
  requestId?: string(name='RequestId', example='D6CB3623-4726-4947-AC2B-2C6E673B447C'),
  result?: int32(name='Result', example='1'),
}

model AcknowledgeTaskResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AcknowledgeTaskResultResponseBody(name='body'),
}

async function acknowledgeTaskResult(request: AcknowledgeTaskResultRequest): AcknowledgeTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcknowledgeTaskResult', 'POST', '/', 'json', false, 'json', request);
}

model BatchFuzzyMatchDomainSensitiveWordRequest {
  keyword: string(name='Keyword', example='example.com,aliyundoc.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model BatchFuzzyMatchDomainSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', example='C560A803-B975-481D-A66B-A4395EA863A1'),
  sensitiveWordMatchResultList?: {
    sensitiveWordMatchResult?: [ 
    {
      exist?: boolean(name='Exist', example='true'),
      keyword?: string(name='Keyword', example='example.com,aliyundoc.com'),
      matchedSentiveWords?: {
        matchedSensitiveWord?: [ 
        {
          word?: string(name='Word', example='xxx'),
        }
      ](name='MatchedSensitiveWord')
      }(name='MatchedSentiveWords'),
    }
  ](name='SensitiveWordMatchResult')
  }(name='SensitiveWordMatchResultList'),
}

model BatchFuzzyMatchDomainSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchFuzzyMatchDomainSensitiveWordResponseBody(name='body'),
}

async function batchFuzzyMatchDomainSensitiveWord(request: BatchFuzzyMatchDomainSensitiveWordRequest): BatchFuzzyMatchDomainSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchFuzzyMatchDomainSensitiveWord', 'POST', '/', 'json', false, 'json', request);
}

model CancelDomainVerificationRequest {
  actionType: string(name='ActionType', position='Query'),
  instanceId: string(name='InstanceId', example='S2019270W570xxxx', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CancelDomainVerificationResponseBody = {
  requestId?: string(name='RequestId', example='0AC0AF67-D303-4EB9-B20E-B4D4B2C3F97B'),
}

model CancelDomainVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelDomainVerificationResponseBody(name='body'),
}

async function cancelDomainVerification(request: CancelDomainVerificationRequest): CancelDomainVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelDomainVerification', 'POST', '/', 'json', false, 'json', request);
}

model CancelOperationAuditRequest {
  auditRecordId: long(name='AuditRecordId', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
}

model CancelOperationAuditResponseBody = {
  requestId?: string(name='RequestId', example='9KFCF6F8-243C-40EC-8035-4B12KKFD7D90'),
}

model CancelOperationAuditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOperationAuditResponseBody(name='body'),
}

async function cancelOperationAudit(request: CancelOperationAuditRequest): CancelOperationAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOperationAudit', 'POST', '/', 'json', false, 'json', request);
}

model CancelQualificationVerificationRequest {
  instanceId: string(name='InstanceId', example='S20181*****85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  qualificationType: string(name='QualificationType', example='knet', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CancelQualificationVerificationResponseBody = {
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
}

model CancelQualificationVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelQualificationVerificationResponseBody(name='body'),
}

async function cancelQualificationVerification(request: CancelQualificationVerificationRequest): CancelQualificationVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelQualificationVerification', 'POST', '/', 'json', false, 'json', request);
}

model CancelTaskRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  taskNo: string(name='TaskNo', example='7f217ae0-61f5-42e2-a1c3-42bad0124****', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='RequestId', example='010E55C9-C64C-4C85-9BB2-7C225ADA6C86'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelTask', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-aek2tcx7os7bkmq', position='Query'),
  resourceId: string(name='ResourceId', example='S20227H17A561968', position='Query'),
  resourceType?: string(name='ResourceType', example='Domain', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='4EA05A10-D4BC-47EA-AD9E-370A46BB4FB9'),
  result?: string(name='Result', example='true'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckDomainRequest {
  domainName: string(name='DomainName', example='test**.xin', position='Query'),
  feeCommand?: string(name='FeeCommand', example='create', position='Query'),
  feeCurrency?: string(name='FeeCurrency', example='USD', position='Query'),
  feePeriod?: int32(name='FeePeriod', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
}

model CheckDomainResponseBody = {
  avail?: string(name='Avail', example='1'),
  domainName?: string(name='DomainName', example='test**.xin'),
  dynamicCheck?: boolean(name='DynamicCheck', example='true'),
  premium?: string(name='Premium', example='true'),
  price?: long(name='Price', example='1286'),
  reason?: string(name='Reason', example='In use'),
  requestId?: string(name='RequestId', example='BA7A4FD4-EB9A-4A20-BB0C-9AEB15634DC1'),
}

model CheckDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckDomainResponseBody(name='body'),
}

async function checkDomain(request: CheckDomainRequest): CheckDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDomain', 'POST', '/', 'json', false, 'json', request);
}

model CheckDomainSunriseClaimRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CheckDomainSunriseClaimResponseBody = {
  claimKey?: string(name='ClaimKey', example='2017092100/8/2/1/kDfu9htHGEx_y-LJ3XSlKMZ70000020001'),
  requestId?: string(name='RequestId', example='BA7A4FD4-EB9A-4A20-BB0C-9AEB15634DC1'),
  result?: int32(name='Result', example='1'),
}

model CheckDomainSunriseClaimResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckDomainSunriseClaimResponseBody(name='body'),
}

async function checkDomainSunriseClaim(request: CheckDomainSunriseClaimRequest): CheckDomainSunriseClaimResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDomainSunriseClaim', 'POST', '/', 'json', false, 'json', request);
}

model CheckMaxYearOfServerLockRequest {
  checkAction: string(name='CheckAction', example='activate', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CheckMaxYearOfServerLockResponseBody = {
  maxYear?: int32(name='MaxYear', example='10'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
}

model CheckMaxYearOfServerLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMaxYearOfServerLockResponseBody(name='body'),
}

async function checkMaxYearOfServerLock(request: CheckMaxYearOfServerLockRequest): CheckMaxYearOfServerLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMaxYearOfServerLock', 'POST', '/', 'json', false, 'json', request);
}

model CheckProcessingServerLockApplyRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  feePeriod?: int32(name='FeePeriod', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CheckProcessingServerLockApplyResponseBody = {
  exists?: boolean(name='Exists', example='true'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
}

model CheckProcessingServerLockApplyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckProcessingServerLockApplyResponseBody(name='body'),
}

async function checkProcessingServerLockApply(request: CheckProcessingServerLockApplyRequest): CheckProcessingServerLockApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckProcessingServerLockApply', 'POST', '/', 'json', false, 'json', request);
}

model CheckTransferInFeasibilityRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  transferAuthorizationCode?: string(name='TransferAuthorizationCode', example='test', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model CheckTransferInFeasibilityResponseBody = {
  canTransfer?: boolean(name='CanTransfer', example='false'),
  code?: string(name='Code', example='CheckTransferResult.DomainTransferProhibited'),
  message?: string(name='Message', example='This domain name is in transfer prohibited status, so it cannot be transferred. You can contact your original registrar to change its status.'),
  productId?: string(name='ProductId', example='2a'),
  requestId?: string(name='RequestId', example='FC0D6B89-2353-4D64-BD80-6606A7DBD7C1'),
}

model CheckTransferInFeasibilityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckTransferInFeasibilityResponseBody(name='body'),
}

async function checkTransferInFeasibility(request: CheckTransferInFeasibilityRequest): CheckTransferInFeasibilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckTransferInFeasibility', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmTransferInEmailRequest {
  domainName: [ string ](name='DomainName', example='abc.com', position='Query'),
  email: string(name='Email', example='test@test.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model ConfirmTransferInEmailResponseBody = {
  failList?: {
    failDomain?: [ string ](name='FailDomain')
  }(name='FailList'),
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  successList?: {
    successDomain?: [ string ](name='SuccessDomain')
  }(name='SuccessList'),
}

model ConfirmTransferInEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmTransferInEmailResponseBody(name='body'),
}

async function confirmTransferInEmail(request: ConfirmTransferInEmailRequest): ConfirmTransferInEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmTransferInEmail', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactTemplatesRequest {
  registrantProfileIds: string(name='RegistrantProfileIds', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model DeleteContactTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='4D73432C-7600-4779-ACBB-C3B5CA145D32'),
}

model DeleteContactTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContactTemplatesResponseBody(name='body'),
}

async function deleteContactTemplates(request: DeleteContactTemplatesRequest): DeleteContactTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContactTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainGroupRequest {
  domainGroupId?: long(name='DomainGroupId', example='123456', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model DeleteDomainGroupResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
}

model DeleteDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainGroupResponseBody(name='body'),
}

async function deleteDomainGroup(request: DeleteDomainGroupRequest): DeleteDomainGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEmailVerificationRequest {
  email: string(name='Email', example='test1@aliyun.com,test2@aliyun.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model DeleteEmailVerificationResponseBody = {
  failList?: [ 
    {
      code?: string(name='Code', example='ParameterIllegall'),
      email?: string(name='Email', example='test1@aliyun.com'),
      message?: string(name='Message', example='Parameter error'),
    }
  ](name='FailList'),
  requestId?: string(name='RequestId', example='7A3D0E4A-0D4B-4BD0-90D7-A61DF8DD26AE'),
  successList?: [ 
    {
      code?: string(name='Code', example='Success'),
      email?: string(name='Email', example='test2@aliyun.com'),
      message?: string(name='Message', example='Success'),
    }
  ](name='SuccessList'),
}

model DeleteEmailVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEmailVerificationResponseBody(name='body'),
}

async function deleteEmailVerification(request: DeleteEmailVerificationRequest): DeleteEmailVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEmailVerification', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRegistrantProfileRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', example='3600000', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model DeleteRegistrantProfileResponseBody = {
  requestId?: string(name='RequestId', example='C50E41A0-09F1-4491-8DB8-AF55BD2D0CC8'),
}

model DeleteRegistrantProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRegistrantProfileResponseBody(name='body'),
}

async function deleteRegistrantProfile(request: DeleteRegistrantProfileRequest): DeleteRegistrantProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRegistrantProfile', 'POST', '/', 'json', false, 'json', request);
}

model DomainSpecialBizCancelRequest {
  bizId: long(name='BizId', position='Body'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model DomainSpecialBizCancelResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: any(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model DomainSpecialBizCancelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DomainSpecialBizCancelResponseBody(name='body'),
}

async function domainSpecialBizCancel(request: DomainSpecialBizCancelRequest): DomainSpecialBizCancelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DomainSpecialBizCancel', 'POST', '/', 'json', true, 'form', request);
}

model EmailVerifiedRequest {
  email: string(name='Email', example='abc@aliyun.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model EmailVerifiedResponseBody = {
  requestId?: string(name='RequestId', example='BF014B60-C708-4253-B5F2-3F9B493F398B'),
}

model EmailVerifiedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EmailVerifiedResponseBody(name='body'),
}

async function emailVerified(request: EmailVerifiedRequest): EmailVerifiedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EmailVerified', 'POST', '/', 'json', false, 'json', request);
}

model FuzzyMatchDomainSensitiveWordRequest {
  keyword: string(name='Keyword', example='xxx**.cn', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model FuzzyMatchDomainSensitiveWordResponseBody = {
  exist?: boolean(name='Exist', example='true'),
  keyword?: string(name='Keyword', example='xxx**.cn'),
  matchedSentiveWords?: {
    matchedSensitiveWord?: [ 
    {
      word?: string(name='Word', example='xxx'),
    }
  ](name='MatchedSensitiveWord')
  }(name='MatchedSentiveWords'),
  requestId?: string(name='RequestId', example='D15F91FD-0B34-4E48-8CBF-EFA5D2A31586'),
}

model FuzzyMatchDomainSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FuzzyMatchDomainSensitiveWordResponseBody(name='body'),
}

async function fuzzyMatchDomainSensitiveWord(request: FuzzyMatchDomainSensitiveWordRequest): FuzzyMatchDomainSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FuzzyMatchDomainSensitiveWord', 'POST', '/', 'json', false, 'json', request);
}

model GetOperationOssUploadPolicyRequest {
  auditType?: int32(name='AuditType', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
}

model GetOperationOssUploadPolicyResponseBody = {
  accessid?: string(name='Accessid', example='hObpgEXoca42****'),
  encodedPolicy?: string(name='EncodedPolicy', example='eyJleHBpcmF0aW9uIjoiMjAaMC0wNy0wMlQxKToyMDoxMS44ODRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsNTI0Mjg4MDBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwiMTIxOTU0MTE2MTIxMzA1Ny9PRkZMSU5FX1RSQU5TRkVSLzE1OTM2ODg1MTE4ODMi****'),
  expireTime?: string(name='ExpireTime', example='1593688811881'),
  fileDir?: string(name='FileDir', example='1219541161213157/OFFLINE_TRANSFER/159368851****'),
  host?: string(name='Host', description='OSS Endpoint。', example='//***-basic-cert.oss-cn-***.aliyuncs.com/'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-40EC-8035-4B12FEFD7D011'),
  signature?: string(name='Signature', example='pNVECGkyL0tl4bKXekV5ErZ****'),
}

model GetOperationOssUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOperationOssUploadPolicyResponseBody(name='body'),
}

async function getOperationOssUploadPolicy(request: GetOperationOssUploadPolicyRequest): GetOperationOssUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOperationOssUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetQualificationUploadPolicyRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model GetQualificationUploadPolicyResponseBody = {
  accessid?: string(name='Accessid', example='hObpgEXoca42****'),
  dir?: string(name='Dir', example='20211220/131953297274****_4de3db85-4f98-488d-845b-d75bf035b13d'),
  expire?: string(name='Expire', example='1593688811881'),
  host?: string(name='Host', example='https://********-review.oss-cn-********.aliyuncs.com'),
  policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAaMC0wNy0wMlQxKToyMDoxMS44ODRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsNTI0Mjg4MDBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwiMTIxOTU0MTE2MTIxMzA1Ny9PRkZMSU5FX1RSQU5TRkVSLzE1OTM2ODg1MTE4ODMi****'),
  prefix?: string(name='Prefix', example='20211220/131953297274****_4de3db85-4f98-488d-845b-d75bf035b13d_${filename}'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
  signature?: string(name='Signature', example='pNVECGkyL0tl4bKXekV5ErZ****'),
}

model GetQualificationUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualificationUploadPolicyResponseBody(name='body'),
}

async function getQualificationUploadPolicy(request: GetQualificationUploadPolicyRequest): GetQualificationUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualificationUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListEmailVerificationRequest {
  beginCreateTime?: long(name='BeginCreateTime', example='1522080000000', position='Query'),
  email?: string(name='Email', example='username@example.com', position='Query'),
  endCreateTime?: long(name='EndCreateTime', example='1522080000000', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='500', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  verificationStatus?: int32(name='VerificationStatus', example='1', position='Query'),
}

model ListEmailVerificationResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      confirmIp?: string(name='ConfirmIp', example='127.0.0.1'),
      email?: string(name='Email', example='username@example.com'),
      emailVerificationNo?: string(name='EmailVerificationNo', example='00000a21fd374da99d9c95b48500000'),
      gmtCreate?: string(name='GmtCreate', example='2017-12-25 03:38:46'),
      gmtModified?: string(name='GmtModified', example='2017-12-25 03:41:11'),
      sendIp?: string(name='SendIp', example='127.0.0.1'),
      tokenSendTime?: string(name='TokenSendTime', example='2017-12-25 03:38:46'),
      userId?: string(name='UserId', example='0000'),
      verificationStatus?: int32(name='VerificationStatus', example='1'),
      verificationTime?: string(name='VerificationTime', example='2017-12-25 03:41:11'),
    }
  ](name='Data'),
  nextPage?: boolean(name='NextPage', example='false'),
  pageSize?: int32(name='PageSize', example='500'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='78C60CC3-FF0A-44E2-989A-DDE0597791C3'),
  totalItemNum?: int32(name='TotalItemNum', example='2'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListEmailVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEmailVerificationResponseBody(name='body'),
}

async function listEmailVerification(request: ListEmailVerificationRequest): ListEmailVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEmailVerification', 'POST', '/', 'json', false, 'json', request);
}

model ListServerLockRequest {
  beginStartDate?: long(name='BeginStartDate', example='2021-07-10 17:37:36', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  endExpireDate?: long(name='EndExpireDate', example='2021-07-10 17:37:36', position='Query'),
  endStartDate?: long(name='EndStartDate', example='2020-07-10 17:37:36', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  lockProductId?: string(name='LockProductId', example='1807**', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  orderByType?: string(name='OrderByType', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  serverLockStatus?: int32(name='ServerLockStatus', example='1', position='Query'),
  startExpireDate?: long(name='StartExpireDate', example='2020-07-10 17:37:36', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model ListServerLockResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='0'),
  data?: [ 
    {
      domainInstanceId?: string(name='DomainInstanceId', example='S20190N1DAI4****'),
      domainName?: string(name='DomainName', example='example.com'),
      expireDate?: string(name='ExpireDate', example='2030-07-10 17:37:36'),
      gmtCreate?: string(name='GmtCreate', example='2020-02-19 16:38:07'),
      gmtModified?: string(name='GmtModified', example='2022-02-19 16:40:38'),
      lockInstanceId?: string(name='LockInstanceId', example='S2021591IQ28****'),
      lockProductId?: string(name='LockProductId', example='1807**'),
      serverLockStatus?: string(name='ServerLockStatus', example='2'),
      startDate?: string(name='StartDate', example='2021-07-10 17:37:36'),
      userId?: string(name='UserId', example='121000000****'),
    }
  ](name='Data'),
  nextPage?: boolean(name='NextPage', example='false'),
  pageSize?: int32(name='PageSize', example='5'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
  totalItemNum?: int32(name='TotalItemNum', example='2'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListServerLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServerLockResponseBody(name='body'),
}

async function listServerLock(request: ListServerLockRequest): ListServerLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerLock', 'POST', '/', 'json', false, 'json', request);
}

model LookupTmchNoticeRequest {
  claimKey: string(name='ClaimKey', example='2017092100/8/2/1/kDfu9htHGEx_y-LJ3XSlKMZ70000020001', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model LookupTmchNoticeResponseBody = {
  claims?: {
    claim?: [ 
    {
      classDescs?: {
        classDesc?: [ 
        {
          classNum?: int32(name='ClassNum', example='18'),
          desc?: string(name='Desc', example='New Zealand'),
        }
      ](name='ClassDesc')
      }(name='ClassDescs'),
      contacts?: {
        contact?: [ 
        {
          addr?: {
            cc?: string(name='Cc', example='NZ'),
            city?: string(name='City', example='Auckland'),
            pc?: string(name='Pc', example='1010'),
            sp?: string(name='Sp', example='Auckland'),
            street?: {
              street?: [ string ](name='Street')
            }(name='Street'),
          }(name='Addr'),
          email?: string(name='Email', example='username@example.com'),
          fax?: string(name='Fax', example='4472335**8'),
          name?: string(name='Name', example='Tom'),
          org?: string(name='Org', example='Tom'),
          type?: string(name='Type', example='agent'),
          voice?: string(name='Voice', example='1390000****'),
        }
      ](name='Contact')
      }(name='Contacts'),
      goodsAndServices?: string(name='GoodsAndServices', example='Class 9: Calculators; bags, coverings,containers, carriers and holders for mobile phones, personal handheld computers and notebooks; headphones; speakers; blank storage media;batteries. Class 16: Paper'),
      holders?: {
        holder?: [ 
        {
          addr?: {
            cc?: string(name='Cc', example='NZ'),
            city?: string(name='City', example='Wellington'),
            pc?: string(name='Pc', example='6011'),
            sp?: string(name='Sp', example='Wellington'),
            street?: {
              street?: [ string ](name='Street')
            }(name='Street'),
          }(name='Addr'),
          entitlement?: string(name='Entitlement', example='owner'),
          org?: string(name='Org', example='Whitcoulls 2011 Limited'),
        }
      ](name='Holder')
      }(name='Holders'),
      jurDesc?: {
        desc?: string(name='Desc', example='New Zealand'),
        jurCC?: string(name='JurCC', example='NZ'),
      }(name='JurDesc'),
      markName?: string(name='MarkName', example='POTED'),
    }
  ](name='Claim')
  }(name='Claims'),
  id?: long(name='Id', example='586608000000'),
  label?: string(name='Label', example='noted'),
  notAfter?: string(name='NotAfter', example='2018-10-15T00:00:00.0Z'),
  notBefore?: string(name='NotBefore', example='2018-10-13T00:00:00.0Z'),
  requestId?: string(name='RequestId', example='01C10C8E-0468-468C-BCD9-E709BDD0AE8F'),
}

model LookupTmchNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LookupTmchNoticeResponseBody(name='body'),
}

async function lookupTmchNotice(request: LookupTmchNoticeRequest): LookupTmchNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LookupTmchNotice', 'POST', '/', 'json', false, 'json', request);
}

model PollTaskResultRequest {
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  instanceId?: string(name='InstanceId', example='S20181T0WLI85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  taskNo?: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test', position='Query'),
  taskResultStatus?: int32(name='TaskResultStatus', example='2', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model PollTaskResultResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    taskDetail?: [ 
    {
      createTime?: string(name='CreateTime', example='2018-03-26 15:08:20'),
      domainName?: string(name='DomainName', example='example.com'),
      errorMsg?: string(name='ErrorMsg', example='The operation is successful.'),
      instanceId?: string(name='InstanceId', example='S201817141000000'),
      taskDetailNo?: string(name='TaskDetailNo', example='15fee9d10d514bada66bd08c5723c583'),
      taskNo?: string(name='TaskNo', example='b95bc334-f7d8-4f39-8a62-4c4302a243d8'),
      taskResult?: string(name='TaskResult', example='test'),
      taskStatus?: string(name='TaskStatus', example='EXECUTE_SUCCESS'),
      taskStatusCode?: int32(name='TaskStatusCode', example='2'),
      taskType?: string(name='TaskType', example='CHG_DNS'),
      taskTypeDescription?: string(name='TaskTypeDescription'),
      tryCount?: int32(name='TryCount', example='0'),
      updateTime?: string(name='UpdateTime', example='2018-03-26 15:22:18'),
    }
  ](name='TaskDetail')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='false'),
  pageSize?: int32(name='PageSize', example='1'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='E879DC07-38EE-4408-9F33-73B30CD965CD'),
  totalItemNum?: int32(name='TotalItemNum', example='10'),
  totalPageNum?: int32(name='TotalPageNum', example='10'),
}

model PollTaskResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PollTaskResultResponseBody(name='body'),
}

async function pollTaskResult(request: PollTaskResultRequest): PollTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PollTaskResult', 'POST', '/', 'json', false, 'json', request);
}

model QueryAdvancedDomainListRequest {
  domainGroupId?: long(name='DomainGroupId', example='-1', position='Query'),
  domainNameSort?: boolean(name='DomainNameSort', example='false', position='Query'),
  domainStatus?: int32(name='DomainStatus', example='1', position='Query'),
  endExpirationDate?: long(name='EndExpirationDate', example='1522080000000', position='Query'),
  endLength?: int32(name='EndLength', example='5', position='Query'),
  endRegistrationDate?: long(name='EndRegistrationDate', example='1522080000000', position='Query'),
  excluded?: string(name='Excluded', example='test', position='Query'),
  excludedPrefix?: boolean(name='ExcludedPrefix', example='false', position='Query'),
  excludedSuffix?: boolean(name='ExcludedSuffix', example='false', position='Query'),
  expirationDateSort?: boolean(name='ExpirationDateSort', example='false', position='Query'),
  form?: int32(name='Form', example='1', position='Query'),
  keyWord?: string(name='KeyWord', example='test', position='Query'),
  keyWordPrefix?: boolean(name='KeyWordPrefix', example='false', position='Query'),
  keyWordSuffix?: boolean(name='KeyWordSuffix', example='true', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum: int32(name='PageNum', example='1', minimum=0, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
  productDomainType?: string(name='ProductDomainType', example='gTLD', position='Query'),
  productDomainTypeSort?: boolean(name='ProductDomainTypeSort', example='false', position='Query'),
  registrationDateSort?: boolean(name='RegistrationDateSort', example='false', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmw6bpc6n7zai', position='Query'),
  startExpirationDate?: long(name='StartExpirationDate', example='1522080000000', position='Query'),
  startLength?: int32(name='StartLength', example='5', position='Query'),
  startRegistrationDate?: long(name='StartRegistrationDate', example='1522080000000', position='Query'),
  suffixs?: string(name='Suffixs', example='com.cn', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tradeType?: int32(name='TradeType', example='-1', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryAdvancedDomainListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    domain?: [ 
    {
      dnsList?: {
        dns?: [ string ](name='Dns')
      }(name='DnsList'),
      domainAuditStatus?: string(name='DomainAuditStatus', example='SUCCEED'),
      domainGroupId?: string(name='DomainGroupId', example='-1'),
      domainGroupName?: string(name='DomainGroupName'),
      domainName?: string(name='DomainName', example='example.com'),
      domainStatus?: string(name='DomainStatus', example='5'),
      domainType?: string(name='DomainType', example='gTLD'),
      email?: string(name='Email', example='username@example.com'),
      expirationCurrDateDiff?: int32(name='ExpirationCurrDateDiff', example='356'),
      expirationDate?: string(name='ExpirationDate', example='2019-04-09 17:07:03'),
      expirationDateLong?: long(name='ExpirationDateLong', example='1554800823000'),
      expirationDateStatus?: string(name='ExpirationDateStatus', example='1'),
      instanceId?: string(name='InstanceId', example='S20182000000000'),
      premium?: boolean(name='Premium', example='false'),
      productId?: string(name='ProductId', example='2a'),
      registrantOrganization?: string(name='RegistrantOrganization', example='Tom'),
      registrantType?: string(name='RegistrantType', example='1'),
      registrationDate?: string(name='RegistrationDate', example='2018-04-09 17:07:03'),
      registrationDateLong?: long(name='RegistrationDateLong', example='1523264823000'),
      remark?: string(name='Remark'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2yyciz557g3q'),
      tag?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tag'),
      zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', example='Tom'),
    }
  ](name='Domain')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='2'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='D200000-C0B9-4CD3-B92A-9B44A000000'),
  totalItemNum?: int32(name='TotalItemNum', example='549'),
  totalPageNum?: int32(name='TotalPageNum', example='275'),
}

model QueryAdvancedDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAdvancedDomainListResponseBody(name='body'),
}

async function queryAdvancedDomainList(request: QueryAdvancedDomainListRequest): QueryAdvancedDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAdvancedDomainList', 'POST', '/', 'json', false, 'json', request);
}

model QueryArtExtensionRequest {
  domainName: string(name='DomainName', example='test.art', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryArtExtensionResponseBody = {
  dateOrPeriod?: string(name='DateOrPeriod', example='2019-10-01'),
  dimensions?: string(name='Dimensions', example='20 cm'),
  features?: string(name='Features', example='iconicity'),
  inscriptionsAndMarkings?: string(name='InscriptionsAndMarkings', example='realism'),
  maker?: string(name='Maker', example='zhang san'),
  materialsAndTechniques?: string(name='MaterialsAndTechniques', example='silk'),
  objectType?: string(name='ObjectType', example='The embroidery'),
  reference?: string(name='Reference', example='drawings'),
  requestId?: string(name='RequestId', example='814B2AF0-ED6F-4C13-B41C-8AC0B1023583'),
  subject?: string(name='Subject', example='peace'),
  title?: string(name='Title', example='Peace and friendship'),
}

model QueryArtExtensionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryArtExtensionResponseBody(name='body'),
}

async function queryArtExtension(request: QueryArtExtensionRequest): QueryArtExtensionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryArtExtension', 'POST', '/', 'json', false, 'json', request);
}

model QueryChangeLogListRequest {
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  endDate?: long(name='EndDate', example='1522080000000', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', example='1', minimum=1, maximum=100, position='Query'),
  startDate?: long(name='StartDate', example='1522080000000', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryChangeLogListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    changeLog?: [ 
    {
      details?: string(name='Details', example='dns1;dns2 -> dns3;dns4'),
      domainName?: string(name='DomainName', example='example.com'),
      operation?: string(name='Operation', example='DNS modification'),
      operationIPAddress?: string(name='OperationIPAddress', example='127.0.0.1'),
      result?: string(name='Result', example='Failed'),
      time?: string(name='Time', example='2017-12-26 12:00:00'),
    }
  ](name='ChangeLog')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='1'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='2DEDFF32-7827-46B1-BE90-3DB8ABD91A58'),
  resultLimit?: boolean(name='ResultLimit', example='true'),
  totalItemNum?: int32(name='TotalItemNum', example='1000'),
  totalPageNum?: int32(name='TotalPageNum', example='1000'),
}

model QueryChangeLogListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChangeLogListResponseBody(name='body'),
}

async function queryChangeLogList(request: QueryChangeLogListRequest): QueryChangeLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChangeLogList', 'POST', '/', 'json', false, 'json', request);
}

model QueryContactInfoRequest {
  contactType: string(name='ContactType', example='admin', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryContactInfoResponseBody = {
  address?: string(name='Address', example='xi hu qu *** jiedao *** xiaoqu *** zhuang 101'),
  city?: string(name='City', example='hang zhou shi'),
  country?: string(name='Country', example='CN'),
  createDate?: string(name='CreateDate', example='2019-03-20 11:37:29'),
  email?: string(name='Email', example='username@example.com'),
  postalCode?: string(name='PostalCode', example='310024'),
  province?: string(name='Province', example='zhe jiang'),
  registrantName?: string(name='RegistrantName', example='zhang san'),
  registrantOrganization?: string(name='RegistrantOrganization', example='zhang san'),
  requestId?: string(name='RequestId', example='C39ECA8A-BB5E-4F92-B013-6A032FA06B04'),
  telArea?: string(name='TelArea', example='86'),
  telExt?: string(name='TelExt', example='1234'),
  telephone?: string(name='Telephone', example='1820000****'),
  zhAddress?: string(name='ZhAddress'),
  zhCity?: string(name='ZhCity'),
  zhProvince?: string(name='ZhProvince'),
  zhRegistrantName?: string(name='ZhRegistrantName'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization'),
}

model QueryContactInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryContactInfoResponseBody(name='body'),
}

async function queryContactInfo(request: QueryContactInfoRequest): QueryContactInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryContactInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDSRecordRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDSRecordResponseBody = {
  DSRecordList?: [ 
    {
      algorithm?: int32(name='Algorithm', example='1'),
      digest?: string(name='Digest', example='f58fa917424383934c7b0cf1a90f61d692745680fa06f5ecdbe0924e86de9598'),
      digestType?: int32(name='DigestType', example='2'),
      keyTag?: int32(name='KeyTag', example='1'),
    }
  ](name='DSRecordList'),
  requestId?: string(name='RequestId', example='814B2AF0-ED6F-4C13-B41C-8AC0B1023583'),
}

model QueryDSRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDSRecordResponseBody(name='body'),
}

async function queryDSRecord(request: QueryDSRecordRequest): QueryDSRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDSRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryDnsHostRequest {
  instanceId: string(name='InstanceId', example='ST2017120814571100001303', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDnsHostResponseBody = {
  dnsHostList?: [ 
    {
      dnsName?: string(name='DnsName', example='ns3'),
      ipList?: [ string ](name='IpList'),
    }
  ](name='DnsHostList'),
  requestId?: string(name='RequestId', example='18A313DD-3AF3-40AA-84F9-56BA45DC511F'),
}

model QueryDnsHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDnsHostResponseBody(name='body'),
}

async function queryDnsHost(request: QueryDnsHostRequest): QueryDnsHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDnsHost', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainAdminDivisionRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainAdminDivisionResponseBody = {
  adminDivisions?: {
    adminDivision?: [ 
    {
      children?: {
        children?: [ 
        {
          childDivisionName?: string(name='ChildDivisionName'),
        }
      ](name='Children')
      }(name='Children'),
      divisionName?: string(name='DivisionName'),
    }
  ](name='AdminDivision')
  }(name='AdminDivisions'),
  requestId?: string(name='RequestId', example='4EA05A10-D4BC-47EA-AD9E-370A46BB4FB9'),
}

model QueryDomainAdminDivisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainAdminDivisionResponseBody(name='body'),
}

async function queryDomainAdminDivision(request: QueryDomainAdminDivisionRequest): QueryDomainAdminDivisionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainAdminDivision', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainByDomainNameRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainByDomainNameResponseBody = {
  dnsList?: {
    dns?: [ string ](name='Dns')
  }(name='DnsList'),
  domainGroupId?: long(name='DomainGroupId', example='123456'),
  domainGroupName?: string(name='DomainGroupName'),
  domainName?: string(name='DomainName', example='example.com'),
  domainNameProxyService?: boolean(name='DomainNameProxyService', example='false'),
  domainNameVerificationStatus?: string(name='DomainNameVerificationStatus', example='SUCCEED'),
  domainStatus?: string(name='DomainStatus', example='3'),
  domainType?: string(name='DomainType', example='gTLD'),
  email?: string(name='Email', example='username@example.com'),
  emailVerificationClientHold?: boolean(name='EmailVerificationClientHold', example='false'),
  emailVerificationStatus?: int32(name='EmailVerificationStatus', example='1'),
  expirationCurrDateDiff?: int32(name='ExpirationCurrDateDiff', example='356'),
  expirationDate?: string(name='ExpirationDate', example='2019-12-07 17:02:13'),
  expirationDateLong?: long(name='ExpirationDateLong', example='1625111915000'),
  expirationDateStatus?: string(name='ExpirationDateStatus', example='1'),
  instanceId?: string(name='InstanceId', example='S20179H1BBI9****'),
  premium?: boolean(name='Premium', example='false'),
  realNameStatus?: string(name='RealNameStatus', example='NONAUDIT'),
  registrantName?: string(name='RegistrantName', example='Test litm'),
  registrantOrganization?: string(name='RegistrantOrganization', example='Test litm'),
  registrantType?: string(name='RegistrantType', example='1'),
  registrantUpdatingStatus?: string(name='RegistrantUpdatingStatus', example='NORMAL'),
  registrationDate?: string(name='RegistrationDate', example='2017-12-07 17:02:13'),
  registrationDateLong?: long(name='RegistrationDateLong', example='1584675448000'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId', example='44101664-3E70-4F0E-89E5-CCB74BF*****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmw6bpc6n7zai'),
  tag?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      vaue?: string(name='Vaue'),
    }
  ](name='Tag')
  }(name='Tag'),
  transferOutStatus?: string(name='TransferOutStatus', example='NORMAL'),
  transferProhibitionLock?: string(name='TransferProhibitionLock', example='CLOSE'),
  updateProhibitionLock?: string(name='UpdateProhibitionLock', example='CLOSE'),
  userId?: string(name='UserId', example='121000000****'),
  zhRegistrantName?: string(name='ZhRegistrantName'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization'),
}

model QueryDomainByDomainNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainByDomainNameResponseBody(name='body'),
}

async function queryDomainByDomainName(request: QueryDomainByDomainNameRequest): QueryDomainByDomainNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainByDomainName', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainByInstanceIdRequest {
  instanceId: string(name='InstanceId', example='S20131205001****', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainByInstanceIdResponseBody = {
  dnsList?: {
    dns?: [ string ](name='Dns')
  }(name='DnsList'),
  domainGroupId?: long(name='DomainGroupId', example='1234'),
  domainGroupName?: string(name='DomainGroupName'),
  domainName?: string(name='DomainName', example='example.com'),
  domainNameProxyService?: boolean(name='DomainNameProxyService', example='false'),
  domainNameVerificationStatus?: string(name='DomainNameVerificationStatus', example='NONAUDIT'),
  domainStatus?: string(name='DomainStatus', example='1'),
  domainType?: string(name='DomainType', example='gTLD'),
  email?: string(name='Email', example='username@example.com'),
  emailVerificationClientHold?: boolean(name='EmailVerificationClientHold', example='false'),
  emailVerificationStatus?: int32(name='EmailVerificationStatus', example='1'),
  expirationCurrDateDiff?: int32(name='ExpirationCurrDateDiff', example='356'),
  expirationDate?: string(name='ExpirationDate', example='2019-12-07 17:02:13'),
  expirationDateLong?: long(name='ExpirationDateLong', example='1625111915000'),
  expirationDateStatus?: string(name='ExpirationDateStatus', example='1'),
  instanceId?: string(name='InstanceId', example='S20179H1BBI9test'),
  premium?: boolean(name='Premium', example='false'),
  realNameStatus?: string(name='RealNameStatus', example='NONAUDIT'),
  registrantName?: string(name='RegistrantName', example='Test litm'),
  registrantOrganization?: string(name='RegistrantOrganization', example='Test litm'),
  registrantType?: string(name='RegistrantType', example='1'),
  registrantUpdatingStatus?: string(name='RegistrantUpdatingStatus', example='NORMAL'),
  registrationDate?: string(name='RegistrationDate', example='2017-12-07 17:02:13'),
  registrationDateLong?: long(name='RegistrationDateLong', example='1625111915000'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId', example='23C9B3C4-9E2C-4405-A88D-BD33E459D140'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmw6bpc6n7zai'),
  tag?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag')
  }(name='Tag'),
  transferOutStatus?: string(name='TransferOutStatus', example='NORMAL'),
  transferProhibitionLock?: string(name='TransferProhibitionLock', example='CLOSE'),
  updateProhibitionLock?: string(name='UpdateProhibitionLock', example='CLOSE'),
  userId?: string(name='UserId', example='121000000****'),
  zhRegistrantName?: string(name='ZhRegistrantName'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization'),
}

model QueryDomainByInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainByInstanceIdResponseBody(name='body'),
}

async function queryDomainByInstanceId(request: QueryDomainByInstanceIdRequest): QueryDomainByInstanceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainByInstanceId', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainGroupListRequest {
  domainGroupName?: string(name='DomainGroupName', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  showDeletingGroup?: boolean(name='ShowDeletingGroup', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainGroupListResponseBody = {
  data?: {
    domainGroup?: [ 
    {
      beingDeleted?: boolean(name='BeingDeleted', example='false'),
      creationDate?: string(name='CreationDate', example='2018-04-02 15:59:06'),
      domainGroupId?: string(name='DomainGroupId', example='-1'),
      domainGroupName?: string(name='DomainGroupName'),
      domainGroupStatus?: string(name='DomainGroupStatus', example='COMPLETE'),
      modificationDate?: string(name='ModificationDate', example='2018-04-02 15:59:06'),
      totalNumber?: int32(name='TotalNumber', example='20'),
    }
  ](name='DomainGroup')
  }(name='Data'),
  requestId?: string(name='RequestId', example='80011ABC-F573-4795-B0E8-377BFBBA3422'),
}

model QueryDomainGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainGroupListResponseBody(name='body'),
}

async function queryDomainGroupList(request: QueryDomainGroupListRequest): QueryDomainGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainGroupList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainListRequest {
  domainGroupId?: string(name='DomainGroupId', example='123456', position='Query'),
  domainName?: string(name='DomainName', example='test.com', position='Query'),
  endExpirationDate?: long(name='EndExpirationDate', example='1522080000000', position='Query'),
  endRegistrationDate?: long(name='EndRegistrationDate', example='1522080000000', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  orderByType?: string(name='OrderByType', example='ASC', position='Query'),
  orderKeyType?: string(name='OrderKeyType', example='RegistrationDate', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productDomainType?: string(name='ProductDomainType', example='New gTLD', position='Query'),
  queryType?: string(name='QueryType', example='1', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2indvyxgpfti', position='Query'),
  startExpirationDate?: long(name='StartExpirationDate', example='1522080000000', position='Query'),
  startRegistrationDate?: long(name='StartRegistrationDate', example='1522080000000', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='0'),
  data?: {
    domain?: [ 
    {
      domainAuditStatus?: string(name='DomainAuditStatus', example='FAILED'),
      domainGroupId?: string(name='DomainGroupId', example='123456'),
      domainGroupName?: string(name='DomainGroupName'),
      domainName?: string(name='DomainName', example='test.com'),
      domainStatus?: string(name='DomainStatus', example='3'),
      domainType?: string(name='DomainType', example='gTLD'),
      expirationCurrDateDiff?: int32(name='ExpirationCurrDateDiff', example='-30'),
      expirationDate?: string(name='ExpirationDate'),
      expirationDateLong?: long(name='ExpirationDateLong', example='1522080000000'),
      expirationDateStatus?: string(name='ExpirationDateStatus', example='1'),
      instanceId?: string(name='InstanceId', example='ST20151102120031118'),
      premium?: boolean(name='Premium', example='true'),
      productId?: string(name='ProductId', example='2a'),
      registrantType?: string(name='RegistrantType', example='1'),
      registrationDate?: string(name='RegistrationDate', example='2017-11-02 04:00:45'),
      registrationDateLong?: long(name='RegistrationDateLong', example='1522080000000'),
      remark?: string(name='Remark'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2yyciz557g3q'),
      tag?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tag'),
    }
  ](name='Domain')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='false'),
  pageSize?: int32(name='PageSize', example='5'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='B7AB5469-5E38-4AA9-A920-C65B7A9C8E6E'),
  totalItemNum?: int32(name='TotalItemNum', example='1'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainListResponseBody(name='body'),
}

async function queryDomainList(request: QueryDomainListRequest): QueryDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainRealNameVerificationInfoRequest {
  domainName: string(name='DomainName', example='aliyundoc.com', position='Query'),
  fetchImage?: boolean(name='FetchImage', example='false', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainRealNameVerificationInfoResponseBody = {
  domainName?: string(name='DomainName', example='aliyundoc.com'),
  identityCredential?: string(name='IdentityCredential', example='dGVzdA=='),
  identityCredentialNo?: string(name='IdentityCredentialNo', example='5****************9'),
  identityCredentialType?: string(name='IdentityCredentialType', example='SFZ'),
  identityCredentialUrl?: string(name='IdentityCredentialUrl', example='http://dbu-nap-p.oss-cn-hangzhou.aliyuncs.com/20190219/140692647406xxxx_5d6baea3e7314fd986afdd86e33exxxx.jpg'),
  instanceId?: string(name='InstanceId', example='S2019270W570****'),
  requestId?: string(name='RequestId', example='4DF9D693-0D5B-4EB7-8922-7ECA6BD59314'),
  submissionDate?: string(name='SubmissionDate', example='2018-03-28 00:41:42'),
}

model QueryDomainRealNameVerificationInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainRealNameVerificationInfoResponseBody(name='body'),
}

async function queryDomainRealNameVerificationInfo(request: QueryDomainRealNameVerificationInfoRequest): QueryDomainRealNameVerificationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainRealNameVerificationInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainSpecialBizDetailRequest {
  bizId?: long(name='BizId', position='Body'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model QueryDomainSpecialBizDetailResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: {
    auditMsg?: string(name='AuditMsg'),
    bizName?: string(name='BizName'),
    bizNo?: string(name='BizNo'),
    bizStatus?: string(name='BizStatus'),
    bizType?: string(name='BizType'),
    createTime?: long(name='CreateTime'),
    domainName?: string(name='DomainName'),
    domainSpecialBizContact?: {
      bizId?: long(name='BizId'),
      cCity?: string(name='CCity'),
      cCompany?: string(name='CCompany'),
      cCountry?: string(name='CCountry'),
      cName?: string(name='CName'),
      cProvince?: string(name='CProvince'),
      cVenu?: string(name='CVenu'),
      eCity?: string(name='ECity'),
      eCompany?: string(name='ECompany'),
      eName?: string(name='EName'),
      eProvince?: string(name='EProvince'),
      eVenu?: string(name='EVenu'),
      email?: string(name='Email'),
      extend?: string(name='Extend'),
      faxArea?: string(name='FaxArea'),
      faxExt?: string(name='FaxExt'),
      faxMain?: string(name='FaxMain'),
      mobile?: string(name='Mobile'),
      postalcode?: string(name='Postalcode'),
      regType?: int32(name='RegType'),
      registrantId?: string(name='RegistrantId'),
      telArea?: string(name='TelArea'),
      telExt?: string(name='TelExt'),
      telMain?: string(name='TelMain'),
      vspContactId?: string(name='VspContactId'),
    }(name='DomainSpecialBizContact'),
    domainSpecialBizCredentials?: [ 
      {
        bizId?: long(name='BizId'),
        credentialNo?: string(name='CredentialNo'),
        credentialType?: string(name='CredentialType'),
        credentialUrl?: string(name='CredentialUrl'),
        domainName?: string(name='DomainName'),
        holderCert?: int32(name='HolderCert'),
        saleId?: string(name='SaleId'),
      }
    ](name='DomainSpecialBizCredentials'),
    domainSpecialOrderResult?: {
      actionType?: string(name='ActionType'),
      orderAmount?: double(name='OrderAmount'),
      orderCurrency?: string(name='OrderCurrency'),
      orderId?: string(name='OrderId'),
      orderStatus?: string(name='OrderStatus'),
      orderTime?: string(name='OrderTime'),
      orderYear?: int32(name='OrderYear'),
      saleId?: string(name='SaleId'),
      subOrderId?: string(name='SubOrderId'),
    }(name='DomainSpecialOrderResult'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    id?: long(name='Id'),
    orderId?: string(name='OrderId'),
    productId?: string(name='ProductId'),
    saleId?: string(name='SaleId'),
    status?: int32(name='Status'),
    statusDesc?: string(name='StatusDesc'),
    updateTime?: long(name='UpdateTime'),
    userId?: string(name='UserId'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model QueryDomainSpecialBizDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainSpecialBizDetailResponseBody(name='body'),
}

async function queryDomainSpecialBizDetail(request: QueryDomainSpecialBizDetailRequest): QueryDomainSpecialBizDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainSpecialBizDetail', 'POST', '/', 'json', true, 'form', request);
}

model QueryDomainSpecialBizInfoByDomainRequest {
  bizType: string(name='BizType', position='Body'),
  domainName: string(name='DomainName', position='Body'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model QueryDomainSpecialBizInfoByDomainResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: {
    auditMsg?: string(name='AuditMsg'),
    bizName?: string(name='BizName'),
    bizNo?: string(name='BizNo'),
    bizStatus?: string(name='BizStatus'),
    bizType?: string(name='BizType'),
    createTime?: long(name='CreateTime'),
    domainName?: string(name='DomainName'),
    domainSpecialBizContact?: {
      bizId?: long(name='BizId'),
      cCity?: string(name='CCity'),
      cCompany?: string(name='CCompany'),
      cCountry?: string(name='CCountry'),
      cName?: string(name='CName'),
      cProvince?: string(name='CProvince'),
      cVenu?: string(name='CVenu'),
      eCity?: string(name='ECity'),
      eCompany?: string(name='ECompany'),
      eName?: string(name='EName'),
      eProvince?: string(name='EProvince'),
      eVenu?: string(name='EVenu'),
      email?: string(name='Email'),
      extend?: string(name='Extend'),
      faxArea?: string(name='FaxArea'),
      faxExt?: string(name='FaxExt'),
      faxMain?: string(name='FaxMain'),
      mobile?: string(name='Mobile'),
      postalcode?: string(name='Postalcode'),
      regType?: int32(name='RegType'),
      registrantId?: string(name='RegistrantId'),
      telArea?: string(name='TelArea'),
      telExt?: string(name='TelExt'),
      telMain?: string(name='TelMain'),
      vspContactId?: string(name='VspContactId'),
    }(name='DomainSpecialBizContact'),
    domainSpecialBizCredentials?: [ 
      {
        bizId?: long(name='BizId'),
        credentialNo?: string(name='CredentialNo'),
        credentialType?: string(name='CredentialType'),
        credentialUrl?: string(name='CredentialUrl'),
        domainName?: string(name='DomainName'),
        holderCert?: int32(name='HolderCert'),
        saleId?: string(name='SaleId'),
      }
    ](name='DomainSpecialBizCredentials'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    id?: long(name='Id'),
    orderId?: string(name='OrderId'),
    productId?: string(name='ProductId'),
    saleId?: string(name='SaleId'),
    status?: int32(name='Status'),
    statusDesc?: string(name='StatusDesc'),
    updateTime?: long(name='UpdateTime'),
    userId?: string(name='UserId'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model QueryDomainSpecialBizInfoByDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainSpecialBizInfoByDomainResponseBody(name='body'),
}

async function queryDomainSpecialBizInfoByDomain(request: QueryDomainSpecialBizInfoByDomainRequest): QueryDomainSpecialBizInfoByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainSpecialBizInfoByDomain', 'POST', '/', 'json', true, 'form', request);
}

model QueryDomainSuffixRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryDomainSuffixResponseBody = {
  requestId?: string(name='RequestId', example='D1C9DE44-1D7F-4F66-9653-00000'),
  suffixList?: {
    suffix?: [ string ](name='Suffix')
  }(name='SuffixList'),
}

model QueryDomainSuffixResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDomainSuffixResponseBody(name='body'),
}

async function queryDomainSuffix(request: QueryDomainSuffixRequest): QueryDomainSuffixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainSuffix', 'POST', '/', 'json', false, 'json', request);
}

model QueryEmailVerificationRequest {
  email?: string(name='Email', example='abc@aliyun.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryEmailVerificationResponseBody = {
  confirmIp?: string(name='ConfirmIp', example='42.*.*.31'),
  email?: string(name='Email', example='abc@aliyun.com'),
  emailVerificationNo?: string(name='EmailVerificationNo', example='72b36ba0572e423bbb3f19640896****'),
  gmtCreate?: string(name='GmtCreate', example='2019-02-19 16:38:07'),
  gmtModified?: string(name='GmtModified', example='2019-02-19 16:40:38'),
  requestId?: string(name='RequestId', example='FC4F7D02-8A83-4E37-B935-2D48A1B8423E'),
  sendIp?: string(name='SendIp', example='42.*.*.115'),
  tokenSendTime?: string(name='TokenSendTime', example='2019-02-19 16:38:07'),
  userId?: string(name='UserId', example='140692647406****'),
  verificationStatus?: int32(name='VerificationStatus', example='1'),
  verificationTime?: string(name='VerificationTime', example='2019-02-19 16:40:38'),
}

model QueryEmailVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEmailVerificationResponseBody(name='body'),
}

async function queryEmailVerification(request: QueryEmailVerificationRequest): QueryEmailVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEmailVerification', 'POST', '/', 'json', false, 'json', request);
}

model QueryEnsAssociationRequest {
  domainName: string(name='DomainName', example='test.luxe', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryEnsAssociationResponseBody = {
  address?: string(name='Address', example='0x123456789012345678901234567890123456****'),
  requestId?: string(name='RequestId', example='3ECD5439-39A2-477D-9A19-64FCA1F77EEB'),
}

model QueryEnsAssociationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEnsAssociationResponseBody(name='body'),
}

async function queryEnsAssociation(request: QueryEnsAssociationRequest): QueryEnsAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEnsAssociation', 'POST', '/', 'json', false, 'json', request);
}

model QueryFailReasonForDomainRealNameVerificationRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  realNameVerificationAction: string(name='RealNameVerificationAction', example='ACTIVATE', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryFailReasonForDomainRealNameVerificationResponseBody = {
  data?: [ 
    {
      date?: string(name='Date', example='2017-03-17 11:08:02'),
      domainNameVerificationStatus?: string(name='DomainNameVerificationStatus', example='SUCCEED'),
      failReason?: string(name='FailReason'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='1F1BA893-AD33-4248-8CB8-1657E3733052'),
}

model QueryFailReasonForDomainRealNameVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFailReasonForDomainRealNameVerificationResponseBody(name='body'),
}

async function queryFailReasonForDomainRealNameVerification(request: QueryFailReasonForDomainRealNameVerificationRequest): QueryFailReasonForDomainRealNameVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFailReasonForDomainRealNameVerification', 'POST', '/', 'json', false, 'json', request);
}

model QueryFailReasonForRegistrantProfileRealNameVerificationRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileID: long(name='RegistrantProfileID', example='1234567', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryFailReasonForRegistrantProfileRealNameVerificationResponseBody = {
  data?: [ 
    {
      date?: string(name='Date', example='2017-03-17 11:08:02'),
      failReason?: string(name='FailReason'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='548C407F-AEA2-4B5D-90DF-EC11EBB1D76F'),
}

model QueryFailReasonForRegistrantProfileRealNameVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFailReasonForRegistrantProfileRealNameVerificationResponseBody(name='body'),
}

async function queryFailReasonForRegistrantProfileRealNameVerification(request: QueryFailReasonForRegistrantProfileRealNameVerificationRequest): QueryFailReasonForRegistrantProfileRealNameVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFailReasonForRegistrantProfileRealNameVerification', 'POST', '/', 'json', false, 'json', request);
}

model QueryFailingReasonListForQualificationRequest {
  instanceId: string(name='InstanceId', example='S20181*****85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  limit: int32(name='Limit', example='10', position='Query'),
  qualificationType: string(name='QualificationType', example='knet', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryFailingReasonListForQualificationResponseBody = {
  data?: [ 
    {
      date?: string(name='Date', example='2017-03-17 11:08:02'),
      failReason?: string(name='FailReason'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
}

model QueryFailingReasonListForQualificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFailingReasonListForQualificationResponseBody(name='body'),
}

async function queryFailingReasonListForQualification(request: QueryFailingReasonListForQualificationRequest): QueryFailingReasonListForQualificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFailingReasonListForQualification', 'POST', '/', 'json', false, 'json', request);
}

model QueryLocalEnsAssociationRequest {
  domainName: string(name='DomainName', example='test.luxe', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryLocalEnsAssociationResponseBody = {
  address?: string(name='Address', example='3ECD5439-39A2-477D-9A19-64FCA1F77EEB'),
  requestId?: string(name='RequestId', example='0x1234567890123456789012345678901234567890'),
}

model QueryLocalEnsAssociationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLocalEnsAssociationResponseBody(name='body'),
}

async function queryLocalEnsAssociation(request: QueryLocalEnsAssociationRequest): QueryLocalEnsAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLocalEnsAssociation', 'POST', '/', 'json', false, 'json', request);
}

model QueryOperationAuditInfoDetailRequest {
  auditRecordId: long(name='AuditRecordId', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
}

model QueryOperationAuditInfoDetailResponseBody = {
  auditInfo?: string(name='AuditInfo'),
  auditStatus?: int32(name='AuditStatus', example='1'),
  auditType?: int32(name='AuditType', example='1'),
  businessName?: string(name='BusinessName'),
  createTime?: long(name='CreateTime', example='1581919010100'),
  domainName?: string(name='DomainName', example='example.com,aliyundoc.com'),
  id?: string(name='Id', example='1'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-40EC-8035-4B12FEFD7D1L'),
  updateTime?: long(name='UpdateTime', example='1581919010101'),
}

model QueryOperationAuditInfoDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOperationAuditInfoDetailResponseBody(name='body'),
}

async function queryOperationAuditInfoDetail(request: QueryOperationAuditInfoDetailRequest): QueryOperationAuditInfoDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOperationAuditInfoDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryOperationAuditInfoListRequest {
  auditStatus?: int32(name='AuditStatus', example='1', position='Query'),
  auditType?: int32(name='AuditType', example='1', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model QueryOperationAuditInfoListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='2'),
  data?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditStatus?: int32(name='AuditStatus', example='1'),
      auditType?: int32(name='AuditType', example='1'),
      businessName?: string(name='BusinessName'),
      createTime?: long(name='CreateTime', example='1581919010101'),
      domainName?: string(name='DomainName', example='example.com,aliyundoc.com'),
      id?: long(name='Id', example='1'),
      remark?: string(name='Remark'),
      updateTime?: long(name='UpdateTime', example='1581919010101'),
    }
  ](name='Data'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='20'),
  prePage?: boolean(name='PrePage', example='true'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-40EC-8035-4B12FEFD7D48'),
  totalItemNum?: int32(name='TotalItemNum', example='199'),
  totalPageNum?: int32(name='TotalPageNum', example='10'),
}

model QueryOperationAuditInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOperationAuditInfoListResponseBody(name='body'),
}

async function queryOperationAuditInfoList(request: QueryOperationAuditInfoListRequest): QueryOperationAuditInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOperationAuditInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryQualificationDetailRequest {
  instanceId: string(name='InstanceId', example='S20181*****85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  qualificationType: string(name='QualificationType', example='knet', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryQualificationDetailResponseBody = {
  auditStatus?: int32(name='AuditStatus', example='1'),
  credentials?: {
    qualificationCredential?: [ 
    {
      credentialNo?: string(name='CredentialNo', example='92610725MA7G2E****'),
      credentialType?: string(name='CredentialType', example='SHSQB'),
      credentialUrl?: string(name='CredentialUrl', example='11212121/1212d**/sqb.jpg'),
    }
  ](name='QualificationCredential')
  }(name='Credentials'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
  trackId?: string(name='TrackId', example='943a1662898a****0acbdbeca91'),
}

model QueryQualificationDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryQualificationDetailResponseBody(name='body'),
}

async function queryQualificationDetail(request: QueryQualificationDetailRequest): QueryQualificationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryQualificationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRegistrantProfileRealNameVerificationInfoRequest {
  fetchImage?: boolean(name='FetchImage', example='false', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', example='1234567', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryRegistrantProfileRealNameVerificationInfoResponseBody = {
  identityCredential?: string(name='IdentityCredential', example='dGVzdA=='),
  identityCredentialNo?: string(name='IdentityCredentialNo', example='4111111111111110**'),
  identityCredentialType?: string(name='IdentityCredentialType', example='SFZ'),
  identityCredentialUrl?: string(name='IdentityCredentialUrl', example='http://test.oss-cn-hangzhou.aliyuncs.com/20170522/1219541161213057_070445190.jpg'),
  modificationDate?: string(name='ModificationDate', example='2017-05-22 19:04:49'),
  registrantProfileId?: long(name='RegistrantProfileId', example='1234567'),
  requestId?: string(name='RequestId', example='4D73432C-7600-4779-ACBB-C3B5CA145D32'),
  submissionDate?: string(name='SubmissionDate', example='2017-05-22 19:04:49'),
}

model QueryRegistrantProfileRealNameVerificationInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRegistrantProfileRealNameVerificationInfoResponseBody(name='body'),
}

async function queryRegistrantProfileRealNameVerificationInfo(request: QueryRegistrantProfileRealNameVerificationInfoRequest): QueryRegistrantProfileRealNameVerificationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRegistrantProfileRealNameVerificationInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryRegistrantProfilesRequest {
  defaultRegistrantProfile?: boolean(name='DefaultRegistrantProfile', example='false', position='Query'),
  email?: string(name='Email', example='username@example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='500', position='Query'),
  realNameStatus?: string(name='RealNameStatus', example='SUCCEED', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='li si', position='Query'),
  registrantProfileId?: long(name='RegistrantProfileId', example='1234567', position='Query'),
  registrantProfileType?: string(name='RegistrantProfileType', example='common', position='Query'),
  registrantType?: string(name='RegistrantType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model QueryRegistrantProfilesResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='2'),
  prePage?: boolean(name='PrePage', example='false'),
  registrantProfiles?: {
    registrantProfile?: [ 
    {
      address?: string(name='Address', example='zhe jiang sheng hang zhou shi shi li qu shi li zhen shi li da sha 1001 hao'),
      city?: string(name='City', example='hang zhou shi'),
      country?: string(name='Country', example='CN'),
      createTime?: string(name='CreateTime', example='2019-02-18 10:46:47'),
      credentialNo?: string(name='CredentialNo'),
      credentialType?: string(name='CredentialType'),
      defaultRegistrantProfile?: boolean(name='DefaultRegistrantProfile', example='false'),
      email?: string(name='Email', example='82106****@qq.com'),
      emailVerificationStatus?: int32(name='EmailVerificationStatus', example='1'),
      postalCode?: string(name='PostalCode', example='310024'),
      province?: string(name='Province', example='zhe jiang'),
      realNameStatus?: string(name='RealNameStatus', example='SUCCEED'),
      registrantName?: string(name='RegistrantName', example='li si'),
      registrantOrganization?: string(name='RegistrantOrganization', example='li si'),
      registrantProfileId?: long(name='RegistrantProfileId', example='1000001'),
      registrantProfileType?: string(name='RegistrantProfileType', example='common'),
      registrantType?: string(name='RegistrantType', example='1'),
      telArea?: string(name='TelArea', example='86'),
      telExt?: string(name='TelExt', example='1234'),
      telephone?: string(name='Telephone', example='1829756****'),
      updateTime?: string(name='UpdateTime', example='2019-03-15 15:32:45'),
      zhAddress?: string(name='ZhAddress'),
      zhCity?: string(name='ZhCity'),
      zhProvince?: string(name='ZhProvince'),
      zhRegistrantName?: string(name='ZhRegistrantName'),
      zhRegistrantOrganization?: string(name='ZhRegistrantOrganization'),
    }
  ](name='RegistrantProfile')
  }(name='RegistrantProfiles'),
  requestId?: string(name='RequestId', example='94053D79-7455-4F71-BF06-20EB2DEDE6BD'),
  totalItemNum?: int32(name='TotalItemNum', example='9'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryRegistrantProfilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRegistrantProfilesResponseBody(name='body'),
}

async function queryRegistrantProfiles(request: QueryRegistrantProfilesRequest): QueryRegistrantProfilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRegistrantProfiles', 'POST', '/', 'json', false, 'json', request);
}

model QueryServerLockRequest {
  instanceId?: string(name='InstanceId', example='S20181*****85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryServerLockResponseBody = {
  domainInstanceId?: string(name='DomainInstanceId', example='S20190N1DAI4****'),
  domainName?: string(name='DomainName', example='example.com'),
  expireDate?: string(name='ExpireDate', example='2030-07-10 17:37:36'),
  gmtCreate?: string(name='GmtCreate', example='2021-07-10 17:37:36'),
  gmtModified?: string(name='GmtModified', example='2021-07-10 17:37:36'),
  lockInstanceId?: string(name='LockInstanceId', example='S2021591IQ28****'),
  lockProductId?: string(name='LockProductId', example='1807**'),
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-****-8035-4B12FEFD7D48'),
  serverLockStatus?: int32(name='ServerLockStatus', example='2'),
  startDate?: string(name='StartDate', example='2021-07-10 17:37:36'),
  userId?: string(name='UserId', example='121000000****'),
}

model QueryServerLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryServerLockResponseBody(name='body'),
}

async function queryServerLock(request: QueryServerLockRequest): QueryServerLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryServerLock', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskDetailHistoryRequest {
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  domainNameCursor?: string(name='DomainNameCursor', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageSize: int32(name='PageSize', example='1', position='Query'),
  taskDetailNoCursor?: string(name='TaskDetailNoCursor', example='75addb07-28a3-450e-b5ec', position='Query'),
  taskNo: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test', position='Query'),
  taskStatus?: int32(name='TaskStatus', example='0', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryTaskDetailHistoryResponseBody = {
  currentPageCursor?: {
    createTime?: string(name='CreateTime', example='2019-07-30 00:00:00'),
    domainName?: string(name='DomainName', example='example.com'),
    errorMsg?: string(name='ErrorMsg'),
    instanceId?: string(name='InstanceId', example='S1234456789'),
    taskDetailNo?: string(name='TaskDetailNo', example='75addb07-28a3-450e-b5ec-2342'),
    taskNo?: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test'),
    taskStatus?: string(name='TaskStatus', example='EXECUTE_SUCCESS'),
    taskStatusCode?: int32(name='TaskStatusCode', example='2'),
    taskType?: string(name='TaskType', example='CHG_DNS'),
    taskTypeDescription?: string(name='TaskTypeDescription'),
    tryCount?: int32(name='TryCount', example='0'),
    updateTime?: string(name='UpdateTime', example='2019-07-30 00:00:00'),
  }(name='CurrentPageCursor'),
  nextPageCursor?: {
    createTime?: string(name='CreateTime', example='2019-07-30 00:00:00'),
    domainName?: string(name='DomainName', example='example.com'),
    errorMsg?: string(name='ErrorMsg'),
    instanceId?: string(name='InstanceId', example='S1234567890'),
    taskDetailNo?: string(name='TaskDetailNo', example='75addb07-28a3-450e-b5ec-2424'),
    taskNo?: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test'),
    taskStatus?: string(name='TaskStatus', example='EXECUTE_FAILURE'),
    taskStatusCode?: int32(name='TaskStatusCode', example='3'),
    taskType?: string(name='TaskType', example='CHG_DNS'),
    taskTypeDescription?: string(name='TaskTypeDescription'),
    tryCount?: int32(name='TryCount', example='5'),
    updateTime?: string(name='UpdateTime', example='2019-07-30 00:00:00'),
  }(name='NextPageCursor'),
  objects?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-07-30 00:00:00'),
      domainName?: string(name='DomainName', example='example.com'),
      errorMsg?: string(name='ErrorMsg'),
      instanceId?: string(name='InstanceId', example='S123456789'),
      taskDetailNo?: string(name='TaskDetailNo', example='75addb07-28a3-450e-b5ec-4234'),
      taskNo?: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test'),
      taskStatus?: string(name='TaskStatus', example='EXECUTE_FAILURE'),
      taskStatusCode?: int32(name='TaskStatusCode', example='3'),
      taskType?: string(name='TaskType', example='CHG_DNS'),
      taskTypeDescription?: string(name='TaskTypeDescription'),
      tryCount?: int32(name='TryCount', example='5'),
      updateTime?: string(name='UpdateTime', example='2019-07-30 00:00:00'),
    }
  ](name='Objects'),
  pageSize?: int32(name='PageSize', example='2'),
  prePageCursor?: {
    createTime?: string(name='CreateTime', example='2019-07-30 00:00:00'),
    domainName?: string(name='DomainName', example='example.com'),
    errorMsg?: string(name='ErrorMsg'),
    instanceId?: string(name='InstanceId', example='S123456789'),
    taskDetailNo?: string(name='TaskDetailNo', example='75addb07-28a3-450e-b5ec-123'),
    taskNo?: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test'),
    taskStatus?: string(name='TaskStatus', example='EXECUTE_FAILURE'),
    taskStatusCode?: int32(name='TaskStatusCode', example='3'),
    taskType?: string(name='TaskType', example='CHG_DNS'),
    taskTypeDescription?: string(name='TaskTypeDescription'),
    tryCount?: int32(name='TryCount', example='5'),
    updateTime?: string(name='UpdateTime', example='2019-07-30 00:00:00'),
  }(name='PrePageCursor'),
  requestId?: string(name='RequestId', example='548CAE74-88F8-402F-8C12-97E747389C51'),
}

model QueryTaskDetailHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskDetailHistoryResponseBody(name='body'),
}

async function queryTaskDetailHistory(request: QueryTaskDetailHistoryRequest): QueryTaskDetailHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskDetailHistory', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskDetailListRequest {
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  instanceId?: string(name='InstanceId', example='S20179H1BBI9test', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='1', position='Query'),
  taskNo: string(name='TaskNo', example='75addb07-28a3-450e-b5ec-test', position='Query'),
  taskStatus?: int32(name='TaskStatus', example='2', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.0', position='Query'),
}

model QueryTaskDetailListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    taskDetail?: [ 
    {
      createTime?: string(name='CreateTime', example='2018-01-25 20:46:57'),
      domainName?: string(name='DomainName', example='example.com'),
      errorMsg?: string(name='ErrorMsg', example='The operation is successful.'),
      instanceId?: string(name='InstanceId', example='S20179H1BBI9test'),
      taskDetailNo?: string(name='TaskDetailNo', example='75addb07-28a3-450e-b5ec-test'),
      taskNo?: string(name='TaskNo', example='60d6e201-8ee5-47ab-8fdc-test'),
      taskResult?: string(name='TaskResult', example='12345'),
      taskStatus?: string(name='TaskStatus', example='EXECUTE_SUCCESS'),
      taskStatusCode?: int32(name='TaskStatusCode', example='2'),
      taskType?: string(name='TaskType', example='ORDER_RENEW'),
      taskTypeDescription?: string(name='TaskTypeDescription'),
      tryCount?: int32(name='TryCount', example='0'),
      updateTime?: string(name='UpdateTime', example='2018-01-25 20:47:01'),
    }
  ](name='TaskDetail')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='2'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='6A2320E4-D870-49C9-A6DC-test'),
  totalItemNum?: int32(name='TotalItemNum', example='1'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryTaskDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskDetailListResponseBody(name='body'),
}

async function queryTaskDetailList(request: QueryTaskDetailListRequest): QueryTaskDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskDetailList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskInfoHistoryRequest {
  beginCreateTime?: long(name='BeginCreateTime', example='1522080000000', position='Query'),
  createTimeCursor?: long(name='CreateTimeCursor', example='1522080000000', position='Query'),
  endCreateTime?: long(name='EndCreateTime', example='1522080000000', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageSize: int32(name='PageSize', example='2', position='Query'),
  taskNoCursor?: string(name='TaskNoCursor', example='aa634d3f-927e-4d17-9d2c-test', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryTaskInfoHistoryResponseBody = {
  currentPageCursor?: {
    clientip?: string(name='Clientip', example='127.0.0.1'),
    createTime?: string(name='CreateTime', example='2017-11-01 17:22:51'),
    createTimeLong?: long(name='CreateTimeLong', example='1509528171000'),
    taskNo?: string(name='TaskNo', example='aa634d3f-927e-4d17-9d2c-test'),
    taskNum?: int32(name='TaskNum', example='1'),
    taskStatus?: string(name='TaskStatus', example='COMPLETE'),
    taskStatusCode?: int32(name='TaskStatusCode', example='3'),
    taskType?: string(name='TaskType', example='CHG_DNS'),
    taskTypeDescription?: string(name='TaskTypeDescription'),
  }(name='CurrentPageCursor'),
  nextPageCursor?: {
    clientip?: string(name='Clientip', example='127.0.0.1'),
    createTime?: string(name='CreateTime', example='2017-10-27 13:07:07'),
    createTimeLong?: long(name='CreateTimeLong', example='1509080827000'),
    taskNo?: string(name='TaskNo', example='8f112aa1-98be-48c3-82f8-test'),
    taskNum?: int32(name='TaskNum', example='15'),
    taskStatus?: string(name='TaskStatus', example='COMPLETE'),
    taskStatusCode?: int32(name='TaskStatusCode', example='3'),
    taskType?: string(name='TaskType', example='CHG_DNS'),
    taskTypeDescription?: string(name='TaskTypeDescription'),
  }(name='NextPageCursor'),
  objects?: [ 
    {
      clientip?: string(name='Clientip', example='127.0.0.1'),
      createTime?: string(name='CreateTime', example='2017-11-01 17:22:51'),
      createTimeLong?: long(name='CreateTimeLong', example='1509528171000'),
      taskNo?: string(name='TaskNo', example='aa634d3f-927e-4d17-9d2c-test'),
      taskNum?: int32(name='TaskNum', example='1'),
      taskStatus?: string(name='TaskStatus', example='COMPLETE'),
      taskStatusCode?: int32(name='TaskStatusCode', example='3'),
      taskType?: string(name='TaskType', example='CHG_DNS'),
      taskTypeDescription?: string(name='TaskTypeDescription'),
    }
  ](name='Objects'),
  pageSize?: int32(name='PageSize', example='2'),
  prePageCursor?: {
    clientip?: string(name='Clientip', example='127.0.0.1'),
    createTime?: string(name='CreateTime', example='2017-11-01 17:19:47'),
    createTimeLong?: long(name='CreateTimeLong', example='1509527987000'),
    taskNo?: string(name='TaskNo', example='f9baa3d5-33b9-4c81-8847-test'),
    taskNum?: int32(name='TaskNum', example='15'),
    taskStatus?: string(name='TaskStatus', example='COMPLETE'),
    taskStatusCode?: int32(name='TaskStatusCode', example='3'),
    taskType?: string(name='TaskType', example='CHG_DNS'),
    taskTypeDescription?: string(name='TaskTypeDescription'),
  }(name='PrePageCursor'),
  requestId?: string(name='RequestId', example='EB3FCCBA-CA1F-4D31-9F34-test'),
}

model QueryTaskInfoHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskInfoHistoryResponseBody(name='body'),
}

async function queryTaskInfoHistory(request: QueryTaskInfoHistoryRequest): QueryTaskInfoHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskInfoHistory', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskListRequest {
  beginCreateTime?: long(name='BeginCreateTime', example='1522080000000', position='Query'),
  endCreateTime?: long(name='EndCreateTime', example='1522080000000', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='2', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryTaskListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    taskInfo?: [ 
    {
      clientip?: string(name='Clientip', example='127.0.0.1'),
      createTime?: string(name='CreateTime', example='Dec 26,2017 11:00:54'),
      taskCancelStatus?: string(name='TaskCancelStatus', example='INIT'),
      taskCancelStatusCode?: int32(name='TaskCancelStatusCode', example='0'),
      taskNo?: string(name='TaskNo', example='8b1cd755-4928-4b02-adee-e5d41d7b1939'),
      taskNum?: int32(name='TaskNum', example='1'),
      taskStatus?: string(name='TaskStatus', example='COMPLETE'),
      taskStatusCode?: int32(name='TaskStatusCode', example='1'),
      taskType?: string(name='TaskType', example='CREATE_DNSHOST'),
      taskTypeDescription?: string(name='TaskTypeDescription'),
    }
  ](name='TaskInfo')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='2'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='8D7D294A-8E99-481F-B64C-017EFC793059'),
  totalItemNum?: int32(name='TotalItemNum', example='43'),
  totalPageNum?: int32(name='TotalPageNum', example='22'),
}

model QueryTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskListResponseBody(name='body'),
}

async function queryTaskList(request: QueryTaskListRequest): QueryTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTransferInByInstanceIdRequest {
  instanceId: string(name='InstanceId', example='S20181T0WLI85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryTransferInByInstanceIdResponseBody = {
  domainName?: string(name='DomainName', example='example.com'),
  email?: string(name='Email', example='username@example.com'),
  expirationDate?: string(name='ExpirationDate', example='2018-03-28 00:41:42'),
  expirationDateLong?: long(name='ExpirationDateLong', example='1514428524669'),
  instanceId?: string(name='InstanceId', example='S20181T0WLI85212'),
  modificationDate?: string(name='ModificationDate', example='2018-03-28 00:41:42'),
  modificationDateLong?: long(name='ModificationDateLong', example='1514428524669'),
  needMailCheck?: boolean(name='NeedMailCheck', example='true'),
  progressBarType?: int32(name='ProgressBarType', example='0'),
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
  resultCode?: string(name='ResultCode', example='clientCancelled'),
  resultDate?: string(name='ResultDate', example='2018-03-28 00:41:42'),
  resultDateLong?: long(name='ResultDateLong', example='1514428524669'),
  resultMsg?: string(name='ResultMsg'),
  simpleTransferInStatus?: string(name='SimpleTransferInStatus', example='SUCCESS'),
  status?: int32(name='Status', example='11'),
  submissionDate?: string(name='SubmissionDate', example='2018-03-28 00:41:42'),
  submissionDateLong?: long(name='SubmissionDateLong', example='1514428524669'),
  transferAuthorizationCodeSubmissionDate?: string(name='TransferAuthorizationCodeSubmissionDate', example='2018-03-28 00:41:42'),
  transferAuthorizationCodeSubmissionDateLong?: long(name='TransferAuthorizationCodeSubmissionDateLong', example='1514428524669'),
  userId?: string(name='UserId', example='123456'),
  whoisMailStatus?: boolean(name='WhoisMailStatus', example='true'),
}

model QueryTransferInByInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTransferInByInstanceIdResponseBody(name='body'),
}

async function queryTransferInByInstanceId(request: QueryTransferInByInstanceIdRequest): QueryTransferInByInstanceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransferInByInstanceId', 'POST', '/', 'json', false, 'json', request);
}

model QueryTransferInListRequest {
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  simpleTransferInStatus?: string(name='SimpleTransferInStatus', example='INIT', position='Query'),
  submissionEndDate?: long(name='SubmissionEndDate', example='1514428524669', position='Query'),
  submissionStartDate?: long(name='SubmissionStartDate', example='1514428524669', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryTransferInListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    transferInInfo?: [ 
    {
      domainName?: string(name='DomainName', example='example.com'),
      email?: string(name='Email', example='username@example.com'),
      expirationDate?: string(name='ExpirationDate', example='2018-03-28 00:41:42'),
      expirationDateLong?: long(name='ExpirationDateLong', example='1514428524669'),
      instanceId?: string(name='InstanceId', example='S20181T0WLI85212'),
      modificationDate?: string(name='ModificationDate', example='2018-03-28 00:41:42'),
      modificationDateLong?: long(name='ModificationDateLong', example='1514428524669'),
      needMailCheck?: boolean(name='NeedMailCheck', example='true'),
      progressBarType?: int32(name='ProgressBarType', example='0'),
      resultCode?: string(name='ResultCode', example='clientCancelled'),
      resultDate?: string(name='ResultDate', example='2018-03-28 00:41:42'),
      resultDateLong?: long(name='ResultDateLong', example='1514428524669'),
      resultMsg?: string(name='ResultMsg'),
      simpleTransferInStatus?: string(name='SimpleTransferInStatus', example='FAIL'),
      status?: int32(name='Status', example='11'),
      submissionDate?: string(name='SubmissionDate', example='2018-03-28 00:41:42'),
      submissionDateLong?: long(name='SubmissionDateLong', example='1514428524669'),
      transferAuthorizationCodeSubmissionDate?: string(name='TransferAuthorizationCodeSubmissionDate', example='2018-03-28 00:41:42'),
      transferAuthorizationCodeSubmissionDateLong?: long(name='TransferAuthorizationCodeSubmissionDateLong', example='1514428524669'),
      userId?: string(name='UserId', example='123456'),
      whoisMailStatus?: boolean(name='WhoisMailStatus', example='true'),
    }
  ](name='TransferInInfo')
  }(name='Data'),
  nextPage?: boolean(name='NextPage', example='true'),
  pageSize?: int32(name='PageSize', example='20'),
  prePage?: boolean(name='PrePage', example='false'),
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
  totalItemNum?: int32(name='TotalItemNum', example='40'),
  totalPageNum?: int32(name='TotalPageNum', example='2'),
}

model QueryTransferInListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTransferInListResponseBody(name='body'),
}

async function queryTransferInList(request: QueryTransferInListRequest): QueryTransferInListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransferInList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTransferOutInfoRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model QueryTransferOutInfoResponseBody = {
  email?: string(name='Email', example='username@example.com'),
  expirationDate?: string(name='ExpirationDate', example='2018-04-13 19:57:56'),
  pendingRequestDate?: string(name='PendingRequestDate', example='2018-04-13 19:57:56'),
  requestId?: string(name='RequestId', example='BBEC5A50-DFDF-482E-8343-B4EB0105E055'),
  resultCode?: string(name='ResultCode', example='clientRejected'),
  resultMsg?: string(name='ResultMsg', example='Transfer out rejected'),
  status?: int32(name='Status', example='8'),
  transferAuthorizationCodeSendDate?: string(name='TransferAuthorizationCodeSendDate', example='2018-04-13 19:57:56'),
}

model QueryTransferOutInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTransferOutInfoResponseBody(name='body'),
}

async function queryTransferOutInfo(request: QueryTransferOutInfoRequest): QueryTransferOutInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransferOutInfo', 'POST', '/', 'json', false, 'json', request);
}

model RegistrantProfileRealNameVerificationRequest {
  identityCredential: string(name='IdentityCredential', example='dGVzdA==', position='Body'),
  identityCredentialNo: string(name='IdentityCredentialNo', example='43012512345678****', position='Query'),
  identityCredentialType: string(name='IdentityCredentialType', example='SFZ', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileID: long(name='RegistrantProfileID', example='1234567', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model RegistrantProfileRealNameVerificationResponseBody = {
  requestId?: string(name='RequestId', example='51D584A2-0CCD-4336-AD7D-1AD4C67B5545'),
}

model RegistrantProfileRealNameVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegistrantProfileRealNameVerificationResponseBody(name='body'),
}

async function registrantProfileRealNameVerification(request: RegistrantProfileRealNameVerificationRequest): RegistrantProfileRealNameVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegistrantProfileRealNameVerification', 'POST', '/', 'json', true, 'form', request);
}

model ResendEmailVerificationRequest {
  email: string(name='Email', example='test1@aliyun.com,test2@aliyun.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model ResendEmailVerificationResponseBody = {
  failList?: [ 
    {
      code?: string(name='Code', example='SendTokenQuotaExceeded'),
      email?: string(name='Email', example='test1@aliyun.com'),
      message?: string(name='Message', example='The maximum number of attempts allowed to send the email verification link is exceeded.'),
    }
  ](name='FailList'),
  requestId?: string(name='RequestId', example='0EA54E99-DB48-4CE3-A099-6ED8E451B8AC'),
  successList?: [ 
    {
      code?: string(name='Code', example='Success'),
      email?: string(name='Email', example='test2@aliyun.com'),
      message?: string(name='Message', example='Success'),
    }
  ](name='SuccessList'),
}

model ResendEmailVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResendEmailVerificationResponseBody(name='body'),
}

async function resendEmailVerification(request: ResendEmailVerificationRequest): ResendEmailVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendEmailVerification', 'POST', '/', 'json', false, 'json', request);
}

model ResetQualificationVerificationRequest {
  instanceId: string(name='InstanceId', example='S20181*****85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model ResetQualificationVerificationResponseBody = {
  requestId?: string(name='RequestId', example='D6CB3623-4726-4947-AC2B-2C6E673B447C'),
}

model ResetQualificationVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetQualificationVerificationResponseBody(name='body'),
}

async function resetQualificationVerification(request: ResetQualificationVerificationRequest): ResetQualificationVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetQualificationVerification', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchDomainRemarkRequest {
  instanceIds?: string(name='InstanceIds', example='S12344567', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  remark?: string(name='Remark', example='MyRemarkInfo', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchDomainRemarkResponseBody = {
  requestId?: string(name='RequestId', example='4189E320-961E-4786-8E15-0000'),
}

model SaveBatchDomainRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchDomainRemarkResponseBody(name='body'),
}

async function saveBatchDomainRemark(request: SaveBatchDomainRemarkRequest): SaveBatchDomainRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchDomainRemark', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForApplyQuickTransferOutOpenlyRequest {
  domainNames?: [ string ](name='DomainNames', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForApplyQuickTransferOutOpenlyResponseBody = {
  requestId?: string(name='RequestId', example='D6CB3623-4726-4947-AC2B-2C6E673B447C'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveBatchTaskForApplyQuickTransferOutOpenlyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForApplyQuickTransferOutOpenlyResponseBody(name='body'),
}

async function saveBatchTaskForApplyQuickTransferOutOpenly(request: SaveBatchTaskForApplyQuickTransferOutOpenlyRequest): SaveBatchTaskForApplyQuickTransferOutOpenlyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForApplyQuickTransferOutOpenly', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForCreatingOrderActivateRequest {
  couponNo?: string(name='CouponNo', example='123456', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  orderActivateParam: [ 
    {
      address?: string(name='Address', example='chao yan qu *** dasha *** hao'),
      aliyunDns?: boolean(name='AliyunDns', example='true'),
      city?: string(name='City', example='bei jing shi'),
      country?: string(name='Country', example='CN'),
      dns1?: string(name='Dns1', example='ns2.aliyun.com'),
      dns2?: string(name='Dns2', example='ns1.aliyun.com'),
      domainName?: string(name='DomainName', example='example.com'),
      email?: string(name='Email', example='username@example.com'),
      enableDomainProxy?: boolean(name='EnableDomainProxy', example='true'),
      permitPremiumActivation?: boolean(name='PermitPremiumActivation', example='true'),
      postalCode?: string(name='PostalCode', example='102629'),
      province?: string(name='Province', example='bei jing'),
      registrantName?: string(name='RegistrantName', example='zhang san'),
      registrantOrganization?: string(name='RegistrantOrganization', example='zhang san'),
      registrantProfileId?: long(name='RegistrantProfileId', example='000000'),
      registrantType?: string(name='RegistrantType', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-XX'),
      subscriptionDuration?: int32(name='SubscriptionDuration', example='1'),
      telArea?: string(name='TelArea', example='86'),
      telExt?: string(name='TelExt', example='1234'),
      telephone?: string(name='Telephone', example='1820000****'),
      trademarkDomainActivation?: boolean(name='TrademarkDomainActivation', example='false'),
      zhAddress?: string(name='ZhAddress'),
      zhCity?: string(name='ZhCity'),
      zhProvince?: string(name='ZhProvince'),
      zhRegistrantName?: string(name='ZhRegistrantName'),
      zhRegistrantOrganization?: string(name='ZhRegistrantOrganization'),
    }
  ](name='OrderActivateParam', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123124', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForCreatingOrderActivateResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveBatchTaskForCreatingOrderActivateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForCreatingOrderActivateResponseBody(name='body'),
}

async function saveBatchTaskForCreatingOrderActivate(request: SaveBatchTaskForCreatingOrderActivateRequest): SaveBatchTaskForCreatingOrderActivateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForCreatingOrderActivate', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForCreatingOrderRedeemRequest {
  couponNo?: string(name='CouponNo', example='123123', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  orderRedeemParam: [ 
    {
      currentExpirationDate?: long(name='CurrentExpirationDate', example='000000'),
      domainName?: string(name='DomainName', example='Aliyun.com'),
    }
  ](name='OrderRedeemParam', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123213123', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForCreatingOrderRedeemResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveBatchTaskForCreatingOrderRedeemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForCreatingOrderRedeemResponseBody(name='body'),
}

async function saveBatchTaskForCreatingOrderRedeem(request: SaveBatchTaskForCreatingOrderRedeemRequest): SaveBatchTaskForCreatingOrderRedeemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForCreatingOrderRedeem', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForCreatingOrderRenewRequest {
  couponNo?: string(name='CouponNo', example='12312412', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  orderRenewParam: [ 
    {
      currentExpirationDate?: long(name='CurrentExpirationDate', example='1522080000000'),
      domainName?: string(name='DomainName', example='Aliyun.com'),
      subscriptionDuration?: int32(name='SubscriptionDuration', example='1'),
    }
  ](name='OrderRenewParam', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123123123', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForCreatingOrderRenewResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveBatchTaskForCreatingOrderRenewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForCreatingOrderRenewResponseBody(name='body'),
}

async function saveBatchTaskForCreatingOrderRenew(request: SaveBatchTaskForCreatingOrderRenewRequest): SaveBatchTaskForCreatingOrderRenewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForCreatingOrderRenew', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForCreatingOrderTransferRequest {
  couponNo?: string(name='CouponNo', example='123123', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  orderTransferParam: [ 
    {
      authorizationCode?: string(name='AuthorizationCode', example='testCode'),
      domainName?: string(name='DomainName', example='example.com'),
      permitPremiumTransfer?: boolean(name='PermitPremiumTransfer', example='false'),
      registrantProfileId?: long(name='RegistrantProfileId', example='123456'),
    }
  ](name='OrderTransferParam', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123123', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForCreatingOrderTransferResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveBatchTaskForCreatingOrderTransferResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForCreatingOrderTransferResponseBody(name='body'),
}

async function saveBatchTaskForCreatingOrderTransfer(request: SaveBatchTaskForCreatingOrderTransferRequest): SaveBatchTaskForCreatingOrderTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForCreatingOrderTransfer', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForDomainNameProxyServiceRequest {
  domainName: [ string ](name='DomainName', example='test1.com,test2.com,test3.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  status: boolean(name='Status', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForDomainNameProxyServiceResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f54923'),
}

model SaveBatchTaskForDomainNameProxyServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForDomainNameProxyServiceResponseBody(name='body'),
}

async function saveBatchTaskForDomainNameProxyService(request: SaveBatchTaskForDomainNameProxyServiceRequest): SaveBatchTaskForDomainNameProxyServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForDomainNameProxyService', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForGenerateDomainCertificateRequest {
  domainNames: [ string ](name='DomainNames', shrink='json', position='Query'),
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model SaveBatchTaskForGenerateDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  taskNo?: string(name='TaskNo'),
}

model SaveBatchTaskForGenerateDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForGenerateDomainCertificateResponseBody(name='body'),
}

async function saveBatchTaskForGenerateDomainCertificate(request: SaveBatchTaskForGenerateDomainCertificateRequest): SaveBatchTaskForGenerateDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForGenerateDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForModifyingDomainDnsRequest {
  aliyunDns: boolean(name='AliyunDns', example='false', position='Query'),
  domainName: [ string ](name='DomainName', example='example.com', position='Query'),
  domainNameServer?: [ string ](name='DomainNameServer', example='ns1.test.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForModifyingDomainDnsResponseBody = {
  requestId?: string(name='RequestId', example='6A862A8A-E7AB-4C4E-8946-A74122D9CC4B'),
  taskNo?: string(name='TaskNo', example='35fb2fb7-d4d6-4478-9408-22cb63696b86'),
}

model SaveBatchTaskForModifyingDomainDnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForModifyingDomainDnsResponseBody(name='body'),
}

async function saveBatchTaskForModifyingDomainDns(request: SaveBatchTaskForModifyingDomainDnsRequest): SaveBatchTaskForModifyingDomainDnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForModifyingDomainDns', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForReserveDropListDomainRequest {
  contactTemplateId: string(name='ContactTemplateId', example='123123', position='Query'),
  domains: [ 
    {
      domainName: string(name='DomainName', example='example.com'),
    }
  ](name='Domains', position='Query'),
}

model SaveBatchTaskForReserveDropListDomainResponseBody = {
  requestId?: string(name='RequestId', example='B7AB5469-5E38-4AA9-A920-C65B7A9C8E6E'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveBatchTaskForReserveDropListDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForReserveDropListDomainResponseBody(name='body'),
}

async function saveBatchTaskForReserveDropListDomain(request: SaveBatchTaskForReserveDropListDomainRequest): SaveBatchTaskForReserveDropListDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForReserveDropListDomain', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForTransferProhibitionLockRequest {
  domainName: [ string ](name='DomainName', example='test1.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  status: boolean(name='Status', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForTransferProhibitionLockResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveBatchTaskForTransferProhibitionLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForTransferProhibitionLockResponseBody(name='body'),
}

async function saveBatchTaskForTransferProhibitionLock(request: SaveBatchTaskForTransferProhibitionLockRequest): SaveBatchTaskForTransferProhibitionLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForTransferProhibitionLock', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForUpdateProhibitionLockRequest {
  domainName: [ string ](name='DomainName', example='aliyundoc.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  status: boolean(name='Status', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForUpdateProhibitionLockResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveBatchTaskForUpdateProhibitionLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForUpdateProhibitionLockResponseBody(name='body'),
}

async function saveBatchTaskForUpdateProhibitionLock(request: SaveBatchTaskForUpdateProhibitionLockRequest): SaveBatchTaskForUpdateProhibitionLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForUpdateProhibitionLock', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForUpdatingContactInfoByNewContactRequest {
  address?: string(name='Address', example='chao yang qu', position='Query'),
  city?: string(name='City', example='bei jing shi', position='Query'),
  contactType: string(name='ContactType', example='registrant', position='Query'),
  country?: string(name='Country', example='CN', position='Query'),
  domainName: [ string ](name='DomainName', example='alibabacloud.com', position='Query'),
  email?: string(name='Email', example='test@aliyun.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  postalCode?: string(name='PostalCode', example='123456', position='Query'),
  province?: string(name='Province', example='bei jing', position='Query'),
  registrantName?: string(name='RegistrantName', example='ce shi', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='ce shi', position='Query'),
  registrantType: string(name='RegistrantType', example='1', position='Query'),
  telArea?: string(name='TelArea', example='86', position='Query'),
  telExt?: string(name='TelExt', example='1235', position='Query'),
  telephone?: string(name='Telephone', example='1234567890', position='Query'),
  transferOutProhibited?: boolean(name='TransferOutProhibited', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhAddress?: string(name='ZhAddress', position='Query'),
  zhCity?: string(name='ZhCity', position='Query'),
  zhProvince?: string(name='ZhProvince', position='Query'),
  zhRegistrantName?: string(name='ZhRegistrantName', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model SaveBatchTaskForUpdatingContactInfoByNewContactResponseBody = {
  requestId?: string(name='RequestId', example='464AF466-CA8E-43A8-B61D-test'),
  taskNo?: string(name='TaskNo', example='65de2165-ca09-491f-9fe0-test'),
}

model SaveBatchTaskForUpdatingContactInfoByNewContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForUpdatingContactInfoByNewContactResponseBody(name='body'),
}

async function saveBatchTaskForUpdatingContactInfoByNewContact(request: SaveBatchTaskForUpdatingContactInfoByNewContactRequest): SaveBatchTaskForUpdatingContactInfoByNewContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForUpdatingContactInfoByNewContact', 'POST', '/', 'json', false, 'json', request);
}

model SaveBatchTaskForUpdatingContactInfoByRegistrantProfileIdRequest {
  contactType: string(name='ContactType', example='registrant', position='Query'),
  domainName: [ string ](name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', example='1', position='Query'),
  transferOutProhibited?: boolean(name='TransferOutProhibited', example='true', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveBatchTaskForUpdatingContactInfoByRegistrantProfileIdResponseBody = {
  requestId?: string(name='RequestId', example='EDC28FEC-6BE0-4583-95BC'),
  taskNo?: string(name='TaskNo', example='880f1579-be51-4dd3-a69d'),
}

model SaveBatchTaskForUpdatingContactInfoByRegistrantProfileIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveBatchTaskForUpdatingContactInfoByRegistrantProfileIdResponseBody(name='body'),
}

async function saveBatchTaskForUpdatingContactInfoByRegistrantProfileId(request: SaveBatchTaskForUpdatingContactInfoByRegistrantProfileIdRequest): SaveBatchTaskForUpdatingContactInfoByRegistrantProfileIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveBatchTaskForUpdatingContactInfoByRegistrantProfileId', 'POST', '/', 'json', false, 'json', request);
}

model SaveDomainGroupRequest {
  domainGroupId?: long(name='DomainGroupId', example='123456', position='Query'),
  domainGroupName?: string(name='DomainGroupName', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveDomainGroupResponseBody = {
  beingDeleted?: boolean(name='BeingDeleted', example='false'),
  creationDate?: string(name='CreationDate', example='2018-04-02 15:59:06'),
  domainGroupId?: long(name='DomainGroupId', example='123456'),
  domainGroupName?: string(name='DomainGroupName'),
  domainGroupStatus?: string(name='DomainGroupStatus', example='COMPLETE'),
  modificationDate?: string(name='ModificationDate', example='2018-04-02 15:59:06'),
  requestId?: string(name='RequestId', example='80011ABC-F573-4795-B0E8-377BFBBA3422'),
  totalNumber?: int32(name='TotalNumber', example='20'),
}

model SaveDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveDomainGroupResponseBody(name='body'),
}

async function saveDomainGroup(request: SaveDomainGroupRequest): SaveDomainGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveDomainGroup', 'POST', '/', 'json', false, 'json', request);
}

model SaveRegistrantProfileRequest {
  address?: string(name='Address', example='zhe jiang sheng hang zhou shi shi li qu shi li zhen shi li da sha 1001 hao', position='Query'),
  city?: string(name='City', example='hang zhou shi', position='Query'),
  country?: string(name='Country', example='CN', position='Query'),
  defaultRegistrantProfile?: boolean(name='DefaultRegistrantProfile', example='false', position='Query'),
  email?: string(name='Email', example='username@example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  postalCode?: string(name='PostalCode', example='310024', position='Query'),
  province?: string(name='Province', example='zhe jiang', position='Query'),
  registrantName?: string(name='RegistrantName', example='li si', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='li si', position='Query'),
  registrantProfileId?: long(name='RegistrantProfileId', example='3600000', position='Query'),
  registrantProfileType?: string(name='RegistrantProfileType', example='common', position='Query'),
  registrantType?: string(name='RegistrantType', example='1', position='Query'),
  telArea?: string(name='TelArea', example='86', position='Query'),
  telExt?: string(name='TelExt', example='1234', position='Query'),
  telephone?: string(name='Telephone', example='1829756****', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhAddress?: string(name='ZhAddress', position='Query'),
  zhCity?: string(name='ZhCity', position='Query'),
  zhProvince?: string(name='ZhProvince', position='Query'),
  zhRegistrantName?: string(name='ZhRegistrantName', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model SaveRegistrantProfileResponseBody = {
  registrantProfileId?: long(name='RegistrantProfileId', example='3600000'),
  requestId?: string(name='RequestId', example='D09B153B-294D-42F1-BB61-F1C72136DFD3'),
}

model SaveRegistrantProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveRegistrantProfileResponseBody(name='body'),
}

async function saveRegistrantProfile(request: SaveRegistrantProfileRequest): SaveRegistrantProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveRegistrantProfile', 'POST', '/', 'json', false, 'json', request);
}

model SaveRegistrantProfileRealNameVerificationRequest {
  address?: string(name='Address', example='chao yang qu', position='Query'),
  city?: string(name='City', example='bei jing shi', position='Query'),
  country?: string(name='Country', example='CN', position='Query'),
  email?: string(name='Email', example='username@example.com', position='Query'),
  identityCredential?: string(name='IdentityCredential', example='dGVzdA==', position='Query'),
  identityCredentialNo?: string(name='IdentityCredentialNo', example='4111111111111110**', position='Query'),
  identityCredentialType?: string(name='IdentityCredentialType', example='SFZ', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  postalCode?: string(name='PostalCode', example='1234567', position='Query'),
  province?: string(name='Province', example='bei jing', position='Query'),
  registrantName?: string(name='RegistrantName', example='ce shi', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='ce shi', position='Query'),
  registrantProfileId?: long(name='RegistrantProfileId', example='1234567', position='Query'),
  registrantProfileType?: string(name='RegistrantProfileType', example='common', position='Query'),
  registrantType?: string(name='RegistrantType', example='1', position='Query'),
  telArea?: string(name='TelArea', example='86', position='Query'),
  telExt?: string(name='TelExt', example='1234', position='Query'),
  telephone?: string(name='Telephone', example='12345678', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhAddress?: string(name='ZhAddress', position='Query'),
  zhCity?: string(name='ZhCity', position='Query'),
  zhProvince?: string(name='ZhProvince', position='Query'),
  zhRegistrantName?: string(name='ZhRegistrantName', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model SaveRegistrantProfileRealNameVerificationResponseBody = {
  registrantProfileId?: long(name='RegistrantProfileId', example='1234567'),
  requestId?: string(name='RequestId', example='4D73432C-7600-****-ACBB-C3B5CA145D32'),
}

model SaveRegistrantProfileRealNameVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveRegistrantProfileRealNameVerificationResponseBody(name='body'),
}

async function saveRegistrantProfileRealNameVerification(request: SaveRegistrantProfileRealNameVerificationRequest): SaveRegistrantProfileRealNameVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveRegistrantProfileRealNameVerification', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForAddingDSRecordRequest {
  algorithm: int32(name='Algorithm', example='1', position='Query'),
  digest: string(name='Digest', example='f58fa917424383934c7b0cf1a90f61d692745680fa06f5ecdbe0924e86de9598', position='Query'),
  digestType: int32(name='DigestType', example='2', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  keyTag: int32(name='KeyTag', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForAddingDSRecordResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e142'),
}

model SaveSingleTaskForAddingDSRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForAddingDSRecordResponseBody(name='body'),
}

async function saveSingleTaskForAddingDSRecord(request: SaveSingleTaskForAddingDSRecordRequest): SaveSingleTaskForAddingDSRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForAddingDSRecord', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForApplyQuickTransferOutOpenlyRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForApplyQuickTransferOutOpenlyResponseBody = {
  requestId?: string(name='RequestId', example='D200000-C0B9-4CD3-B92A-9B44A000000'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForApplyQuickTransferOutOpenlyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForApplyQuickTransferOutOpenlyResponseBody(name='body'),
}

async function saveSingleTaskForApplyQuickTransferOutOpenly(request: SaveSingleTaskForApplyQuickTransferOutOpenlyRequest): SaveSingleTaskForApplyQuickTransferOutOpenlyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForApplyQuickTransferOutOpenly', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForApprovingTransferOutRequest {
  domainName: string(name='DomainName', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForApprovingTransferOutResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForApprovingTransferOutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForApprovingTransferOutResponseBody(name='body'),
}

async function saveSingleTaskForApprovingTransferOut(request: SaveSingleTaskForApprovingTransferOutRequest): SaveSingleTaskForApprovingTransferOutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForApprovingTransferOut', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForAssociatingEnsRequest {
  address: string(name='Address', example='0x1234567890123456789012345678901234567890', position='Query'),
  domainName: string(name='DomainName', example='test.luxe', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForAssociatingEnsResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e142'),
}

model SaveSingleTaskForAssociatingEnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForAssociatingEnsResponseBody(name='body'),
}

async function saveSingleTaskForAssociatingEns(request: SaveSingleTaskForAssociatingEnsRequest): SaveSingleTaskForAssociatingEnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForAssociatingEns', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCancelingTransferInRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForCancelingTransferInResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForCancelingTransferInResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCancelingTransferInResponseBody(name='body'),
}

async function saveSingleTaskForCancelingTransferIn(request: SaveSingleTaskForCancelingTransferInRequest): SaveSingleTaskForCancelingTransferInResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCancelingTransferIn', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCancelingTransferOutRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForCancelingTransferOutResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForCancelingTransferOutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCancelingTransferOutResponseBody(name='body'),
}

async function saveSingleTaskForCancelingTransferOut(request: SaveSingleTaskForCancelingTransferOutRequest): SaveSingleTaskForCancelingTransferOutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCancelingTransferOut', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCreatingDnsHostRequest {
  dnsName: string(name='DnsName', example='dns1', position='Query'),
  instanceId: string(name='InstanceId', example='S1234567890', position='Query'),
  ip: [ string ](name='Ip', example='218.xx.xx.236', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForCreatingDnsHostResponseBody = {
  requestId?: string(name='RequestId', example='0F1B3547-BE50-4206-8F78-9540FFB85BC1'),
  taskNo?: string(name='TaskNo', example='e9b8e8b4-7334-4548-9cec-c30b6891f292'),
}

model SaveSingleTaskForCreatingDnsHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCreatingDnsHostResponseBody(name='body'),
}

async function saveSingleTaskForCreatingDnsHost(request: SaveSingleTaskForCreatingDnsHostRequest): SaveSingleTaskForCreatingDnsHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCreatingDnsHost', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCreatingOrderActivateRequest {
  address?: string(name='Address', example='chao yang qu', position='Query'),
  aliyunDns?: boolean(name='AliyunDns', example='true', position='Query'),
  city?: string(name='City', example='bei jing shi', position='Query'),
  country?: string(name='Country', example='CN', position='Query'),
  couponNo?: string(name='CouponNo', example='123456', position='Query'),
  dns1?: string(name='Dns1', example='ns1.aliyun.com', position='Query'),
  dns2?: string(name='Dns2', example='ns2.aliyun.com', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  email?: string(name='Email', example='username@example.com', position='Query'),
  enableDomainProxy?: boolean(name='EnableDomainProxy', example='false', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  permitPremiumActivation?: boolean(name='PermitPremiumActivation', example='false', position='Query'),
  postalCode?: string(name='PostalCode', example='1234567', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123123', position='Query'),
  province?: string(name='Province', example='bei jing', position='Query'),
  registrantName?: string(name='RegistrantName', example='ce shi', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='ce shi', position='Query'),
  registrantProfileId?: long(name='RegistrantProfileId', example='123', position='Query'),
  registrantType?: string(name='RegistrantType', example='1', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-XX', position='Query'),
  subscriptionDuration?: int32(name='SubscriptionDuration', example='1', position='Query'),
  telArea?: string(name='TelArea', example='86', position='Query'),
  telExt?: string(name='TelExt', example='1234', position='Query'),
  telephone?: string(name='Telephone', example='12345678', position='Query'),
  trademarkDomainActivation?: boolean(name='TrademarkDomainActivation', example='false', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhAddress?: string(name='ZhAddress', position='Query'),
  zhCity?: string(name='ZhCity', position='Query'),
  zhProvince?: string(name='ZhProvince', position='Query'),
  zhRegistrantName?: string(name='ZhRegistrantName', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model SaveSingleTaskForCreatingOrderActivateResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForCreatingOrderActivateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCreatingOrderActivateResponseBody(name='body'),
}

async function saveSingleTaskForCreatingOrderActivate(request: SaveSingleTaskForCreatingOrderActivateRequest): SaveSingleTaskForCreatingOrderActivateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCreatingOrderActivate', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCreatingOrderRedeemRequest {
  couponNo?: string(name='CouponNo', example='123123', position='Query'),
  currentExpirationDate: long(name='CurrentExpirationDate', example='0000', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123123', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForCreatingOrderRedeemResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForCreatingOrderRedeemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCreatingOrderRedeemResponseBody(name='body'),
}

async function saveSingleTaskForCreatingOrderRedeem(request: SaveSingleTaskForCreatingOrderRedeemRequest): SaveSingleTaskForCreatingOrderRedeemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCreatingOrderRedeem', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCreatingOrderRenewRequest {
  couponNo?: string(name='CouponNo', example='123123', position='Query'),
  currentExpirationDate: long(name='CurrentExpirationDate', example='0000', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123132', position='Query'),
  subscriptionDuration: int32(name='SubscriptionDuration', example='1', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForCreatingOrderRenewResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForCreatingOrderRenewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCreatingOrderRenewResponseBody(name='body'),
}

async function saveSingleTaskForCreatingOrderRenew(request: SaveSingleTaskForCreatingOrderRenewRequest): SaveSingleTaskForCreatingOrderRenewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCreatingOrderRenew', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForCreatingOrderTransferRequest {
  authorizationCode: string(name='AuthorizationCode', example='testCode', position='Query'),
  couponNo?: string(name='CouponNo', example='123456', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  permitPremiumTransfer?: boolean(name='PermitPremiumTransfer', example='false', position='Query'),
  promotionNo?: string(name='PromotionNo', example='123456', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', example='123456', position='Query'),
  useCoupon?: boolean(name='UseCoupon', example='false', position='Query'),
  usePromotion?: boolean(name='UsePromotion', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForCreatingOrderTransferResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForCreatingOrderTransferResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForCreatingOrderTransferResponseBody(name='body'),
}

async function saveSingleTaskForCreatingOrderTransfer(request: SaveSingleTaskForCreatingOrderTransferRequest): SaveSingleTaskForCreatingOrderTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForCreatingOrderTransfer', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForDeletingDSRecordRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  keyTag: int32(name='KeyTag', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForDeletingDSRecordResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e142'),
}

model SaveSingleTaskForDeletingDSRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForDeletingDSRecordResponseBody(name='body'),
}

async function saveSingleTaskForDeletingDSRecord(request: SaveSingleTaskForDeletingDSRecordRequest): SaveSingleTaskForDeletingDSRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForDeletingDSRecord', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForDeletingDnsHostRequest {
  dnsName: string(name='DnsName', example='dns1', position='Query'),
  instanceId: string(name='InstanceId', example='S2019270W570xxxx', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForDeletingDnsHostResponseBody = {
  requestId?: string(name='RequestId', example='8fc97e44-837a-447d-ac61-ea28d2fe8a38'),
  taskNo?: string(name='TaskNo', example='8fc97e44-837a-447d-ac61-ea28d2fexxxx'),
}

model SaveSingleTaskForDeletingDnsHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForDeletingDnsHostResponseBody(name='body'),
}

async function saveSingleTaskForDeletingDnsHost(request: SaveSingleTaskForDeletingDnsHostRequest): SaveSingleTaskForDeletingDnsHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForDeletingDnsHost', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForDisassociatingEnsRequest {
  domainName: string(name='DomainName', example='test.luxe', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForDisassociatingEnsResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e142'),
}

model SaveSingleTaskForDisassociatingEnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForDisassociatingEnsResponseBody(name='body'),
}

async function saveSingleTaskForDisassociatingEns(request: SaveSingleTaskForDisassociatingEnsRequest): SaveSingleTaskForDisassociatingEnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForDisassociatingEns', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForDomainNameProxyServiceRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  status: boolean(name='Status', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForDomainNameProxyServiceResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForDomainNameProxyServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForDomainNameProxyServiceResponseBody(name='body'),
}

async function saveSingleTaskForDomainNameProxyService(request: SaveSingleTaskForDomainNameProxyServiceRequest): SaveSingleTaskForDomainNameProxyServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForDomainNameProxyService', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForGenerateDomainCertificateRequest {
  domainName: string(name='DomainName', position='Query'),
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model SaveSingleTaskForGenerateDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  taskNo?: string(name='TaskNo'),
}

model SaveSingleTaskForGenerateDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForGenerateDomainCertificateResponseBody(name='body'),
}

async function saveSingleTaskForGenerateDomainCertificate(request: SaveSingleTaskForGenerateDomainCertificateRequest): SaveSingleTaskForGenerateDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForGenerateDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForModifyingDSRecordRequest {
  algorithm: int32(name='Algorithm', example='1', position='Query'),
  digest: string(name='Digest', example='f58fa917424383934c7b0cf1a90f61d692745680fa06f5ecdbe0924e86de9598', position='Query'),
  digestType: int32(name='DigestType', example='2', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  keyTag: int32(name='KeyTag', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForModifyingDSRecordResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e142'),
}

model SaveSingleTaskForModifyingDSRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForModifyingDSRecordResponseBody(name='body'),
}

async function saveSingleTaskForModifyingDSRecord(request: SaveSingleTaskForModifyingDSRecordRequest): SaveSingleTaskForModifyingDSRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForModifyingDSRecord', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForModifyingDnsHostRequest {
  dnsName: string(name='DnsName', example='dns1', position='Query'),
  instanceId: string(name='InstanceId', example='S123456789', position='Query'),
  ip: [ string ](name='Ip', example='218.xx.xx.236', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForModifyingDnsHostResponseBody = {
  requestId?: string(name='RequestId', example='0F1B3547-BE50-4206-8F78-9540FFB85BC1'),
  taskNo?: string(name='TaskNo', example='e9b8e8b4-7334-4548-9cec-c30b6891f292'),
}

model SaveSingleTaskForModifyingDnsHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForModifyingDnsHostResponseBody(name='body'),
}

async function saveSingleTaskForModifyingDnsHost(request: SaveSingleTaskForModifyingDnsHostRequest): SaveSingleTaskForModifyingDnsHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForModifyingDnsHost', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForQueryingTransferAuthorizationCodeRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForQueryingTransferAuthorizationCodeResponseBody = {
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForQueryingTransferAuthorizationCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForQueryingTransferAuthorizationCodeResponseBody(name='body'),
}

async function saveSingleTaskForQueryingTransferAuthorizationCode(request: SaveSingleTaskForQueryingTransferAuthorizationCodeRequest): SaveSingleTaskForQueryingTransferAuthorizationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForQueryingTransferAuthorizationCode', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForSaveArtExtensionRequest {
  dateOrPeriod?: string(name='DateOrPeriod', example='2019-10-01', position='Query'),
  dimensions?: string(name='Dimensions', example='20 cm', position='Query'),
  domainName: string(name='DomainName', example='test.art', position='Query'),
  features?: string(name='Features', example='iconicity', position='Query'),
  inscriptionsAndMarkings?: string(name='InscriptionsAndMarkings', example='realism', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  maker?: string(name='Maker', example='zhang san', position='Query'),
  materialsAndTechniques?: string(name='MaterialsAndTechniques', example='silk', position='Query'),
  objectType?: string(name='ObjectType', example='The embroidery', position='Query'),
  reference?: string(name='Reference', example='drawings', position='Query'),
  subject?: string(name='Subject', example='peace', position='Query'),
  title?: string(name='Title', example='Peace and friendship', position='Query'),
}

model SaveSingleTaskForSaveArtExtensionResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AB'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e141'),
}

model SaveSingleTaskForSaveArtExtensionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForSaveArtExtensionResponseBody(name='body'),
}

async function saveSingleTaskForSaveArtExtension(request: SaveSingleTaskForSaveArtExtensionRequest): SaveSingleTaskForSaveArtExtensionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForSaveArtExtension', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForSynchronizingDSRecordRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForSynchronizingDSRecordResponseBody = {
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  taskNo?: string(name='TaskNo', example='e893148f-6343-4ae1-9eba-6e2a4116e142'),
}

model SaveSingleTaskForSynchronizingDSRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForSynchronizingDSRecordResponseBody(name='body'),
}

async function saveSingleTaskForSynchronizingDSRecord(request: SaveSingleTaskForSynchronizingDSRecordRequest): SaveSingleTaskForSynchronizingDSRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForSynchronizingDSRecord', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForSynchronizingDnsHostRequest {
  instanceId: string(name='InstanceId', example='ST2017120814571100001303', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForSynchronizingDnsHostResponseBody = {
  requestId?: string(name='RequestId', example='0F1B3547-BE50-4206-8F78-9540FFB85BC1'),
  taskNo?: string(name='TaskNo', example='e9b8e8b4-7334-4548-9cec-c30b6891f292'),
}

model SaveSingleTaskForSynchronizingDnsHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForSynchronizingDnsHostResponseBody(name='body'),
}

async function saveSingleTaskForSynchronizingDnsHost(request: SaveSingleTaskForSynchronizingDnsHostRequest): SaveSingleTaskForSynchronizingDnsHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForSynchronizingDnsHost', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForTransferProhibitionLockRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  status: boolean(name='Status', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForTransferProhibitionLockResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveSingleTaskForTransferProhibitionLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForTransferProhibitionLockResponseBody(name='body'),
}

async function saveSingleTaskForTransferProhibitionLock(request: SaveSingleTaskForTransferProhibitionLockRequest): SaveSingleTaskForTransferProhibitionLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForTransferProhibitionLock', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForUpdateProhibitionLockRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  status: boolean(name='Status', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForUpdateProhibitionLockResponseBody = {
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
  taskNo?: string(name='TaskNo', example='d3babb0a-c939-4c25-8c65-c47b65f5492a'),
}

model SaveSingleTaskForUpdateProhibitionLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForUpdateProhibitionLockResponseBody(name='body'),
}

async function saveSingleTaskForUpdateProhibitionLock(request: SaveSingleTaskForUpdateProhibitionLockRequest): SaveSingleTaskForUpdateProhibitionLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForUpdateProhibitionLock', 'POST', '/', 'json', false, 'json', request);
}

model SaveSingleTaskForUpdatingContactInfoRequest {
  addTransferLock?: boolean(name='AddTransferLock', example='false', position='Query'),
  contactType: string(name='ContactType', example='registrant', position='Query'),
  domainName: string(name='DomainName', example='example.com', position='Query'),
  instanceId?: string(name='InstanceId', example='S123456789', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveSingleTaskForUpdatingContactInfoResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveSingleTaskForUpdatingContactInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSingleTaskForUpdatingContactInfoResponseBody(name='body'),
}

async function saveSingleTaskForUpdatingContactInfo(request: SaveSingleTaskForUpdatingContactInfoRequest): SaveSingleTaskForUpdatingContactInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSingleTaskForUpdatingContactInfo', 'POST', '/', 'json', false, 'json', request);
}

model SaveTaskForSubmittingDomainDeleteRequest {
  instanceId: string(name='InstanceId', example='S20181*****85212', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveTaskForSubmittingDomainDeleteResponseBody = {
  requestId?: string(name='RequestId', example='23C9B3C4-9E2C-4405-A88D-BD33E459D140'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveTaskForSubmittingDomainDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskForSubmittingDomainDeleteResponseBody(name='body'),
}

async function saveTaskForSubmittingDomainDelete(request: SaveTaskForSubmittingDomainDeleteRequest): SaveTaskForSubmittingDomainDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTaskForSubmittingDomainDelete', 'POST', '/', 'json', false, 'json', request);
}

model SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest {
  domainName: [ string ](name='DomainName', position='Query'),
  identityCredential: string(name='IdentityCredential', position='Body'),
  identityCredentialNo: string(name='IdentityCredentialNo', position='Query'),
  identityCredentialType: string(name='IdentityCredentialType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialResponseBody = {
  requestId?: string(name='RequestId'),
  taskNo?: string(name='TaskNo'),
}

model SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialResponseBody(name='body'),
}

async function saveTaskForSubmittingDomainRealNameVerificationByIdentityCredential(request: SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest): SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential', 'POST', '/', 'json', true, 'form', request);
}

model SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDRequest {
  domainName: string(name='DomainName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDResponseBody = {
  requestId?: string(name='RequestId'),
  taskNo?: string(name='TaskNo'),
}

model SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDResponseBody(name='body'),
}

async function saveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileID(request: SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDRequest): SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileID', 'POST', '/', 'json', false, 'json', request);
}

model SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest {
  address?: string(name='Address', example='chao yang qu', position='Query'),
  city?: string(name='City', example='bei jing shi', position='Query'),
  country?: string(name='Country', example='CN', position='Query'),
  domainName: [ string ](name='DomainName', example='alibabacloud.com', position='Query'),
  email?: string(name='Email', example='test@aliyun.com', position='Query'),
  identityCredential: string(name='IdentityCredential', example='h6UPhXz/ADP/2Q==', position='Body'),
  identityCredentialNo: string(name='IdentityCredentialNo', example='5****************9', position='Query'),
  identityCredentialType: string(name='IdentityCredentialType', example='SFZ', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  postalCode?: string(name='PostalCode', example='123456', position='Query'),
  province?: string(name='Province', example='bei jing', position='Query'),
  registrantName?: string(name='RegistrantName', example='ce shi', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='ce shi', position='Query'),
  registrantType: string(name='RegistrantType', example='1', position='Query'),
  telArea: string(name='TelArea', example='86', position='Query'),
  telExt?: string(name='TelExt', example='12345', position='Query'),
  telephone: string(name='Telephone', example='12345678', position='Query'),
  transferOutProhibited: boolean(name='TransferOutProhibited', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhAddress?: string(name='ZhAddress', position='Query'),
  zhCity?: string(name='ZhCity', position='Query'),
  zhProvince?: string(name='ZhProvince', position='Query'),
  zhRegistrantName?: string(name='ZhRegistrantName', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model SaveTaskForUpdatingRegistrantInfoByIdentityCredentialResponseBody = {
  requestId?: string(name='RequestId', example='EDC28FEC-6BE0-4583-95BC-test'),
  taskNo?: string(name='TaskNo', example='880f1579-be51-4dd3-a69d-test'),
}

model SaveTaskForUpdatingRegistrantInfoByIdentityCredentialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskForUpdatingRegistrantInfoByIdentityCredentialResponseBody(name='body'),
}

async function saveTaskForUpdatingRegistrantInfoByIdentityCredential(request: SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest): SaveTaskForUpdatingRegistrantInfoByIdentityCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTaskForUpdatingRegistrantInfoByIdentityCredential', 'POST', '/', 'json', true, 'form', request);
}

model SaveTaskForUpdatingRegistrantInfoByRegistrantProfileIDRequest {
  domainName: [ string ](name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  registrantProfileId: long(name='RegistrantProfileId', example='1', position='Query'),
  transferOutProhibited: boolean(name='TransferOutProhibited', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SaveTaskForUpdatingRegistrantInfoByRegistrantProfileIDResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
  taskNo?: string(name='TaskNo', example='3cb1adc3-20e8-44ae-9e76-e812fa6fc9d8'),
}

model SaveTaskForUpdatingRegistrantInfoByRegistrantProfileIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskForUpdatingRegistrantInfoByRegistrantProfileIDResponseBody(name='body'),
}

async function saveTaskForUpdatingRegistrantInfoByRegistrantProfileID(request: SaveTaskForUpdatingRegistrantInfoByRegistrantProfileIDRequest): SaveTaskForUpdatingRegistrantInfoByRegistrantProfileIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTaskForUpdatingRegistrantInfoByRegistrantProfileID', 'POST', '/', 'json', false, 'json', request);
}

model ScrollDomainListRequest {
  domainGroupId?: long(name='DomainGroupId', example='123456', position='Query'),
  domainStatus?: int32(name='DomainStatus', example='0', position='Query'),
  endExpirationDate?: long(name='EndExpirationDate', example='1541520000000', position='Query'),
  endLength?: int32(name='EndLength', example='3', position='Query'),
  endRegistrationDate?: long(name='EndRegistrationDate', example='1541520000000', position='Query'),
  excluded?: string(name='Excluded', example='test', position='Query'),
  excludedPrefix?: boolean(name='ExcludedPrefix', example='false', position='Query'),
  excludedSuffix?: boolean(name='ExcludedSuffix', example='true', position='Query'),
  form?: int32(name='Form', example='1', position='Query'),
  keyWord?: string(name='KeyWord', example='test', position='Query'),
  keyWordPrefix?: boolean(name='KeyWordPrefix', example='true', position='Query'),
  keyWordSuffix?: boolean(name='KeyWordSuffix', example='false', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  pageSize?: int32(name='PageSize', example='50', minimum=1, maximum=500, position='Query'),
  productDomainType?: string(name='ProductDomainType', example='gTLD', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmw6bpc6n7zai', position='Query'),
  scrollId?: string(name='ScrollId', example='test', position='Query'),
  startExpirationDate?: long(name='StartExpirationDate', example='1541520000000', position='Query'),
  startLength?: int32(name='StartLength', example='0', position='Query'),
  startRegistrationDate?: long(name='StartRegistrationDate', example='1541520000000', position='Query'),
  suffixs?: string(name='Suffixs', example='com', position='Query'),
  tradeType?: int32(name='TradeType', example='-1', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model ScrollDomainListResponseBody = {
  data?: {
    domain?: [ 
    {
      dnsList?: {
        dns?: [ string ](name='Dns')
      }(name='DnsList'),
      domainAuditStatus?: string(name='DomainAuditStatus', example='NONAUDIT'),
      domainGroupId?: string(name='DomainGroupId', example='1234'),
      domainGroupName?: string(name='DomainGroupName'),
      domainName?: string(name='DomainName', example='example.com'),
      domainStatus?: string(name='DomainStatus', example='3'),
      domainType?: string(name='DomainType', example='gTLD'),
      email?: string(name='Email', example='username@example.com'),
      expirationCurrDateDiff?: int32(name='ExpirationCurrDateDiff', example='10'),
      expirationDate?: string(name='ExpirationDate', example='2019-02-15 17:30:35'),
      expirationDateLong?: long(name='ExpirationDateLong', example='1550223035000'),
      expirationDateStatus?: string(name='ExpirationDateStatus', example='1'),
      instanceId?: string(name='InstanceId', example='S1234'),
      premium?: boolean(name='Premium', example='false'),
      productId?: string(name='ProductId', example='2a'),
      registrantOrganization?: string(name='RegistrantOrganization', example='alibaba cloud'),
      registrantType?: string(name='RegistrantType', example='1'),
      registrationDate?: string(name='RegistrationDate', example='2017-02-15 00:00:00'),
      registrationDateLong?: long(name='RegistrationDateLong', example='1487088000000'),
      remark?: string(name='Remark'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2yyciz557g3q'),
      tag?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tag'),
      zhRegistrantOrganization?: string(name='ZhRegistrantOrganization'),
    }
  ](name='Domain')
  }(name='Data'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='722AB7F5-61F0-408C-A012-4784AFD34083'),
  scrollId?: string(name='ScrollId', example='test'),
  totalItemNum?: int32(name='TotalItemNum', example='200'),
}

model ScrollDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScrollDomainListResponseBody(name='body'),
}

async function scrollDomainList(request: ScrollDomainListRequest): ScrollDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScrollDomainList', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultRegistrantProfileRequest {
  registrantProfileId: long(name='RegistrantProfileId', example='1234567', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SetDefaultRegistrantProfileResponseBody = {
  requestId?: string(name='RequestId', example='4D73432C-7600-4779-ACBB-C3B5CA145D32'),
}

model SetDefaultRegistrantProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDefaultRegistrantProfileResponseBody(name='body'),
}

async function setDefaultRegistrantProfile(request: SetDefaultRegistrantProfileRequest): SetDefaultRegistrantProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultRegistrantProfile', 'POST', '/', 'json', false, 'json', request);
}

model SetupDomainAutoRenewRequest {
  instanceId: string(name='InstanceId', example='S2019270W570xxxx', position='Query'),
  operation: string(name='Operation', example='SET', position='Query'),
}

model SetupDomainAutoRenewResponseBody = {
  requestId?: string(name='RequestId', example='8fc97e44-837a-447d-ac61-ea28d2fe8a38'),
  result?: boolean(name='Result', example='true'),
}

model SetupDomainAutoRenewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetupDomainAutoRenewResponseBody(name='body'),
}

async function setupDomainAutoRenew(request: SetupDomainAutoRenewRequest): SetupDomainAutoRenewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupDomainAutoRenew', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDomainSpecialBizCredentialsRequest {
  bizId?: long(name='BizId', position='Body'),
  credentials?: string(name='Credentials', position='Body'),
  extend?: string(name='Extend', position='Body'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model SubmitDomainSpecialBizCredentialsResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: any(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model SubmitDomainSpecialBizCredentialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitDomainSpecialBizCredentialsResponseBody(name='body'),
}

async function submitDomainSpecialBizCredentials(request: SubmitDomainSpecialBizCredentialsRequest): SubmitDomainSpecialBizCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDomainSpecialBizCredentials', 'POST', '/', 'json', true, 'form', request);
}

model SubmitEmailVerificationRequest {
  email: string(name='Email', example='username@example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  sendIfExist?: boolean(name='SendIfExist', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model SubmitEmailVerificationResponseBody = {
  existList?: [ 
    {
      code?: string(name='Code', example='SendTokenQuotaExceeded'),
      email?: string(name='Email', example='username@example.com'),
      message?: string(name='Message', example='The maximum number of attempts allowed to send the email verification link is exceeded.'),
    }
  ](name='ExistList'),
  failList?: [ 
    {
      code?: string(name='Code', example='SendTokenQuotaExceeded'),
      email?: string(name='Email', example='username@example.com'),
      message?: string(name='Message', example='The maximum number of attempts allowed to send the email verification link is exceeded'),
    }
  ](name='FailList'),
  requestId?: string(name='RequestId', example='E2A8A5EF-DF8A-4C48-8FD4-9F6BD71AB26D'),
  successList?: [ 
    {
      code?: string(name='Code', example='Success'),
      email?: string(name='Email', example='username@example.com'),
      message?: string(name='Message', example='Success'),
    }
  ](name='SuccessList'),
}

model SubmitEmailVerificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitEmailVerificationResponseBody(name='body'),
}

async function submitEmailVerification(request: SubmitEmailVerificationRequest): SubmitEmailVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitEmailVerification', 'POST', '/', 'json', false, 'json', request);
}

model SubmitOperationAuditInfoRequest {
  auditInfo?: string(name='AuditInfo', position='Query'),
  auditType: int32(name='AuditType', example='1', position='Query'),
  domainName: string(name='DomainName', example='example.com,example.org', position='Query'),
  id?: long(name='Id', example='1', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
}

model SubmitOperationAuditInfoResponseBody = {
  id?: long(name='Id', example='1'),
  requestId?: string(name='RequestId', example='9DKCF6F8-243C-40EC-8035-4B12FEFD7C22'),
}

model SubmitOperationAuditInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitOperationAuditInfoResponseBody(name='body'),
}

async function submitOperationAuditInfo(request: SubmitOperationAuditInfoRequest): SubmitOperationAuditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitOperationAuditInfo', 'POST', '/', 'json', false, 'json', request);
}

model SubmitOperationCredentialsRequest {
  auditRecordId?: long(name='AuditRecordId', example='1', position='Query'),
  auditType?: int32(name='AuditType', example='1', position='Query'),
  credentials?: string(name='Credentials', example='[{"credentialType":"SHSQB",""credentialUrl":"11212121/1212d**/sqb.jpg"},{"credentialType":"SFZZM",""credentialUrl":"11212121/1212d**/sfzzm.jpg"}]', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  regType?: int32(name='RegType', example='1', position='Query'),
}

model SubmitOperationCredentialsResponseBody = {
  requestId?: string(name='RequestId', example='9DFCF6F8-243C-40EC-8035-4B12FEFX7D98'),
}

model SubmitOperationCredentialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitOperationCredentialsResponseBody(name='body'),
}

async function submitOperationCredentials(request: SubmitOperationCredentialsRequest): SubmitOperationCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitOperationCredentials', 'POST', '/', 'json', false, 'json', request);
}

model TransferInCheckMailTokenRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  token: string(name='Token', example='3bdbaa0e-faa2-4ad2-98f4-bcfeb0237054', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model TransferInCheckMailTokenResponseBody = {
  failList?: {
    failDomain?: [ string ](name='FailDomain')
  }(name='FailList'),
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
  successList?: {
    successDomain?: [ string ](name='SuccessDomain')
  }(name='SuccessList'),
}

model TransferInCheckMailTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransferInCheckMailTokenResponseBody(name='body'),
}

async function transferInCheckMailToken(request: TransferInCheckMailTokenRequest): TransferInCheckMailTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInCheckMailToken', 'POST', '/', 'json', false, 'json', request);
}

model TransferInReenterTransferAuthorizationCodeRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  transferAuthorizationCode: string(name='TransferAuthorizationCode', example='testCode', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model TransferInReenterTransferAuthorizationCodeResponseBody = {
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
}

model TransferInReenterTransferAuthorizationCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransferInReenterTransferAuthorizationCodeResponseBody(name='body'),
}

async function transferInReenterTransferAuthorizationCode(request: TransferInReenterTransferAuthorizationCodeRequest): TransferInReenterTransferAuthorizationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInReenterTransferAuthorizationCode', 'POST', '/', 'json', false, 'json', request);
}

model TransferInRefetchWhoisEmailRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model TransferInRefetchWhoisEmailResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
}

model TransferInRefetchWhoisEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransferInRefetchWhoisEmailResponseBody(name='body'),
}

async function transferInRefetchWhoisEmail(request: TransferInRefetchWhoisEmailRequest): TransferInRefetchWhoisEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInRefetchWhoisEmail', 'POST', '/', 'json', false, 'json', request);
}

model TransferInResendMailTokenRequest {
  domainName: string(name='DomainName', example='example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model TransferInResendMailTokenResponseBody = {
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
}

model TransferInResendMailTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransferInResendMailTokenResponseBody(name='body'),
}

async function transferInResendMailToken(request: TransferInResendMailTokenRequest): TransferInResendMailTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInResendMailToken', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDomainToDomainGroupRequest {
  dataSource: int32(name='DataSource', example='1', position='Query'),
  domainGroupId: long(name='DomainGroupId', example='1234', position='Query'),
  domainName?: [ string ](name='DomainName', example='example.com', position='Query'),
  fileToUpload?: string(name='FileToUpload', example='dGVzdA==', position='Body'),
  lang?: string(name='Lang', example='en', position='Query'),
  replace: boolean(name='Replace', example='false', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model UpdateDomainToDomainGroupResponseBody = {
  requestId?: string(name='RequestId', example='40F46D3D-F4F3-4CCB-AC30-2DD20E32E528'),
}

model UpdateDomainToDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDomainToDomainGroupResponseBody(name='body'),
}

async function updateDomainToDomainGroup(request: UpdateDomainToDomainGroupRequest): UpdateDomainToDomainGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDomainToDomainGroup', 'POST', '/', 'json', true, 'form', request);
}

model VerifyContactFieldRequest {
  address?: string(name='Address', example='Rd. xitucheng', position='Query'),
  city?: string(name='City', example='Bei jing', position='Query'),
  country?: string(name='Country', example='CN', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  email?: string(name='Email', example='username@example.com', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  postalCode?: string(name='PostalCode', position='Query'),
  province?: string(name='Province', example='Bei jing', position='Query'),
  registrantName?: string(name='RegistrantName', example='wang xian sheng', position='Query'),
  registrantOrganization?: string(name='RegistrantOrganization', example='wang xian sheng', position='Query'),
  registrantType?: string(name='RegistrantType', example='1', position='Query'),
  telArea?: string(name='TelArea', example='86', position='Query'),
  telExt?: string(name='TelExt', example='01', position='Query'),
  telephone?: string(name='Telephone', example='1390000****', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
  zhAddress?: string(name='ZhAddress', position='Query'),
  zhCity?: string(name='ZhCity', position='Query'),
  zhProvince?: string(name='ZhProvince', position='Query'),
  zhRegistrantName?: string(name='ZhRegistrantName', position='Query'),
  zhRegistrantOrganization?: string(name='ZhRegistrantOrganization', position='Query'),
}

model VerifyContactFieldResponseBody = {
  requestId?: string(name='RequestId', example='ABAC3BAC-FCFA-4DAE-B47C-FA4105CB07C6'),
}

model VerifyContactFieldResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyContactFieldResponseBody(name='body'),
}

async function verifyContactField(request: VerifyContactFieldRequest): VerifyContactFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyContactField', 'POST', '/', 'json', false, 'json', request);
}

model VerifyEmailRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  token: string(name='Token', example='0b32247496409441e9e179ea7c2e0****', position='Query'),
  userClientIp?: string(name='UserClientIp', example='127.0.0.1', position='Query'),
}

model VerifyEmailResponseBody = {
  requestId?: string(name='RequestId', example='FD3AD289-83EE-4E32-803A-CF1B3A8EEE64'),
}

model VerifyEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyEmailResponseBody(name='body'),
}

async function verifyEmail(request: VerifyEmailRequest): VerifyEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyEmail', 'POST', '/', 'json', false, 'json', request);
}

