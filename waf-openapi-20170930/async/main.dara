/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'waf-openapi';
  @version = '2017-09-30';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AppOpenAckRequest {
  ack: string(name='Ack', position='Query'),
  appName: string(name='AppName', position='Query'),
  asyncMethod: string(name='AsyncMethod', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model AppOpenAckResponseBody = {
  requestId?: string(name='RequestId'),
}

model AppOpenAckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AppOpenAckResponseBody(name='body'),
}

async function appOpenAck(request: AppOpenAckRequest): AppOpenAckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppOpenAck', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainConfigRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  httpPort?: string(name='HttpPort', position='Query'),
  httpToUserIp?: int32(name='HttpToUserIp', position='Query'),
  httpsPort?: string(name='HttpsPort', position='Query'),
  httpsRedirect?: int32(name='HttpsRedirect', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  isAccessProduct?: int32(name='IsAccessProduct', position='Query'),
  isNonStandardPort?: int32(name='IsNonStandardPort', position='Query'),
  loadBalancing?: int32(name='LoadBalancing', position='Query'),
  protocols: string(name='Protocols', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  rsType?: int32(name='RsType', position='Query'),
  sourceIps: string(name='SourceIps', position='Query'),
}

model CreateDomainConfigResponseBody = {
  cname?: string(name='Cname'),
  requestId?: string(name='RequestId'),
}

model CreateDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainConfigResponseBody(name='body'),
}

async function createDomainConfig(request: CreateDomainConfigRequest): CreateDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomainConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainConfigRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainConfigResponseBody(name='body'),
}

async function deleteDomainConfig(request: DeleteDomainConfigRequest): DeleteDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainNamesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDomainNamesResponseBody = {
  domainNames?: {
    domainName?: [ string ](name='DomainName')
  }(name='DomainNames'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainNamesResponseBody(name='body'),
}

async function describeDomainNames(request: DescribeDomainNamesRequest): DescribeDomainNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainNames', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainTransferConfigRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDomainTransferConfigResponseBody = {
  cname?: string(name='Cname'),
  httpPort?: string(name='HttpPort'),
  httpsPort?: string(name='HttpsPort'),
  isOwned?: int32(name='IsOwned'),
  isWafActive?: int32(name='IsWafActive'),
  protocolType?: int32(name='ProtocolType'),
  protocols?: string(name='Protocols'),
  requestId?: string(name='RequestId'),
  sourceIps?: string(name='SourceIps'),
  wafAffectMode?: int32(name='WafAffectMode'),
}

model DescribeDomainTransferConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTransferConfigResponseBody(name='body'),
}

async function describeDomainTransferConfig(request: DescribeDomainTransferConfigRequest): DescribeDomainTransferConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainTransferConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsRequest {
  domain?: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDomainsResponseBody = {
  domains?: {
    domain?: [ string ](name='Domain')
  }(name='Domains'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHttpsCertInUseRequest {
  domain: string(name='Domain', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHttpsCertInUseResponseBody = {
  certContent?: string(name='CertContent'),
  certId?: string(name='CertId'),
  certKey?: string(name='CertKey'),
  certName?: string(name='CertName'),
  requestId?: string(name='RequestId'),
}

model DescribeHttpsCertInUseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHttpsCertInUseResponseBody(name='body'),
}

async function describeHttpsCertInUse(request: DescribeHttpsCertInUseRequest): DescribeHttpsCertInUseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHttpsCertInUse', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNeedUpgradeDomainLimitRequest {
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeNeedUpgradeDomainLimitResponseBody = {
  needUpgrade?: boolean(name='NeedUpgrade'),
  requestId?: string(name='RequestId'),
}

model DescribeNeedUpgradeDomainLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNeedUpgradeDomainLimitResponseBody(name='body'),
}

async function describeNeedUpgradeDomainLimit(request: DescribeNeedUpgradeDomainLimitRequest): DescribeNeedUpgradeDomainLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNeedUpgradeDomainLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackageRequest {
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePackageResponseBody = {
  expireTime?: long(name='ExpireTime'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  rules?: {
    rule?: [ string ](name='Rule')
  }(name='Rules'),
  version?: string(name='Version'),
}

model DescribePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePackageResponseBody(name='body'),
}

async function describePackage(request: DescribePackageRequest): DescribePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQpsRequest {
  domain?: string(name='Domain', position='Query'),
  endMillisecond: long(name='EndMillisecond', position='Query'),
  field: [ string ](name='Field', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  interval: int32(name='Interval', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startMillisecond: long(name='StartMillisecond', position='Query'),
}

model DescribeQpsResponseBody = {
  items?: {
    qps?: [ string ](name='Qps')
  }(name='Items'),
  requestId?: string(name='RequestId'),
  timeScope?: {
    end?: long(name='End'),
    start?: long(name='Start'),
    step?: int32(name='Step'),
  }(name='TimeScope'),
}

model DescribeQpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQpsResponseBody(name='body'),
}

async function describeQps(request: DescribeQpsRequest): DescribeQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionStatusRequest {
  instanceSource?: string(name='InstanceSource', position='Query'),
  lang?: string(name='Lang', position='Query'),
  region?: string(name='Region', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeRegionStatusResponseBody = {
  inDebt?: int32(name='InDebt'),
  payType?: int32(name='PayType'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionStatusResponseBody(name='body'),
}

async function describeRegionStatus(request: DescribeRegionStatusRequest): DescribeRegionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegionStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ string ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTransferConfigInWorkRequest {
  checkRequestId?: string(name='CheckRequestId', position='Query'),
  domain?: string(name='Domain', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTransferConfigInWorkResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  wafRequestId?: string(name='WafRequestId'),
}

model DescribeTransferConfigInWorkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTransferConfigInWorkResponseBody(name='body'),
}

async function describeTransferConfigInWork(request: DescribeTransferConfigInWorkRequest): DescribeTransferConfigInWorkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransferConfigInWork', 'POST', '/', 'json', false, 'json', request);
}

model GetQpsRequest {
  instanceId: string(name='InstanceId', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  e: long(name='e', position='Query'),
  f: [ string ](name='f', position='Query'),
  n?: string(name='n', position='Query'),
  s: long(name='s', position='Query'),
  x: int32(name='x', position='Query'),
}

model GetQpsResponseBody = {
  code?: string(name='Code'),
  items?: {
    qps?: [ 
    {
      data?: {
        data?: [ string ](name='Data')
      }(name='Data'),
      name?: string(name='Name'),
    }
  ](name='Qps')
  }(name='Items'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  timeScope?: {
    end?: long(name='End'),
    start?: long(name='Start'),
    step?: int32(name='Step'),
  }(name='timeScope'),
}

model GetQpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQpsResponseBody(name='body'),
}

async function getQps(request: GetQpsRequest): GetQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQps', 'POST', '/', 'json', false, 'json', request);
}

model GetQpsTotalRequest {
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  e: long(name='e', position='Query'),
  f: [ string ](name='f', position='Query'),
  instanceId: string(name='instanceId', position='Query'),
  n?: string(name='n', position='Query'),
  s: long(name='s', position='Query'),
  x: int32(name='x', position='Query'),
}

model GetQpsTotalResponseBody = {
  code?: string(name='Code'),
  items?: {
    qps?: [ 
    {
      data?: {
        data?: [ string ](name='Data')
      }(name='Data'),
      name?: string(name='Name'),
    }
  ](name='Qps')
  }(name='Items'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  timeScope?: {
    end?: long(name='End'),
    start?: long(name='Start'),
    step?: int32(name='Step'),
  }(name='timeScope'),
}

model GetQpsTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQpsTotalResponseBody(name='body'),
}

async function getQpsTotal(request: GetQpsTotalRequest): GetQpsTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQpsTotal', 'POST', '/', 'json', false, 'json', request);
}

model GetRegionListRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetRegionListResponseBody = {
  code?: string(name='Code'),
  data?: {
    regionInfo?: [ 
    {
      display?: string(name='Display'),
      region?: string(name='Region'),
    }
  ](name='RegionInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRegionListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRegionListResponseBody(name='body'),
}

async function getRegionList(request: GetRegionListRequest): GetRegionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegionList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCertAndKeyRequest {
  caller: string(name='Caller', position='Query'),
  cert?: string(name='Cert', position='Query'),
  domain: string(name='Domain', position='Query'),
  httpsCertId: string(name='HttpsCertId', position='Query'),
  httpsCertName?: string(name='HttpsCertName', position='Query'),
  key?: string(name='Key', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCertAndKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCertAndKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCertAndKeyResponseBody(name='body'),
}

async function modifyCertAndKey(request: ModifyCertAndKeyRequest): ModifyCertAndKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCertAndKey', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainConfigRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  httpPort?: string(name='HttpPort', position='Query'),
  httpToUserIp?: int32(name='HttpToUserIp', position='Query'),
  httpsPort?: string(name='HttpsPort', position='Query'),
  httpsRedirect?: int32(name='HttpsRedirect', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  isAccessProduct?: int32(name='IsAccessProduct', position='Query'),
  isNonStandardPort?: int32(name='IsNonStandardPort', position='Query'),
  loadBalancing?: int32(name='LoadBalancing', position='Query'),
  protocols: string(name='Protocols', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  rsType?: int32(name='RsType', position='Query'),
  sourceIps: string(name='SourceIps', position='Query'),
}

model ModifyDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDomainConfigResponseBody(name='body'),
}

async function modifyDomainConfig(request: ModifyDomainConfigRequest): ModifyDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomainConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainPackageCountRequest {
  domainPackageCount: int32(name='DomainPackageCount', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDomainPackageCountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainPackageCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDomainPackageCountResponseBody(name='body'),
}

async function modifyDomainPackageCount(request: ModifyDomainPackageCountRequest): ModifyDomainPackageCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomainPackageCount', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWafSwitchRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceOn: int32(name='ServiceOn', position='Query'),
}

model ModifyWafSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWafSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWafSwitchResponseBody(name='body'),
}

async function modifyWafSwitch(request: ModifyWafSwitchRequest): ModifyWafSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWafSwitch', 'POST', '/', 'json', false, 'json', request);
}

