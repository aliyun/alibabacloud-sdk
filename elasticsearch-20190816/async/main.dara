/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'elasticsearch';
  @version = '2019-08-16';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateLogstashRequest {
  clientToken?: string(name='clientToken', position='Query'),
}

model CreateLogstashResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='Result'),
}

model CreateLogstashResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLogstashResponseBody(name='body'),
}

async function createLogstash(request: CreateLogstashRequest): CreateLogstashResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogstash', 'POST', '/openapi/logstashes', 'json', false, 'json', request);
}

model DeleteLogstashRequest {
  instanceId: string(name='InstanceId', position='Path'),
  clientToken?: string(name='clientToken', position='Query'),
  deleteType?: string(name='deleteType', position='Query'),
}

model DeleteLogstashResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLogstashResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLogstashResponseBody(name='body'),
}

async function deleteLogstash(request: DeleteLogstashRequest): DeleteLogstashResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogstash', 'DELETE', '/openapi/logstashes/{InstanceId}', 'json', false, 'json', request);
}

model ListLogstashRequest {
  description?: string(name='description', position='Query'),
  instanceId?: string(name='instanceId', position='Query'),
  ownerId?: string(name='ownerId', position='Query'),
  page?: int32(name='page', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', position='Query'),
  size?: int32(name='size', position='Query'),
  version?: string(name='version', position='Query'),
}

model ListLogstashResponseBody = {
  headers?: {
    xTotalCount?: int32(name='X-Total-Count'),
  }(name='Headers'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      tags?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
      createdAt?: string(name='createdAt'),
      description?: string(name='description'),
      instanceId?: string(name='instanceId'),
      networkConfig?: {
        type?: string(name='type'),
        vpcId?: string(name='vpcId'),
        vsArea?: string(name='vsArea'),
        vswitchId?: string(name='vswitchId'),
      }(name='networkConfig'),
      nodeAmount?: int32(name='nodeAmount'),
      nodeSpec?: {
        disk?: int32(name='disk'),
        diskEncryption?: boolean(name='diskEncryption'),
        diskType?: string(name='diskType'),
        spec?: string(name='spec'),
      }(name='nodeSpec'),
      paymentType?: string(name='paymentType'),
      status?: string(name='status'),
      updatedAt?: string(name='updatedAt'),
      version?: string(name='version'),
    }
  ](name='Result'),
}

model ListLogstashResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogstashResponseBody(name='body'),
}

async function listLogstash(request: ListLogstashRequest): ListLogstashResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogstash', 'GET', '/openapi/logstashes', 'json', false, 'json', request);
}

model TagResourcesRequest {
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/openapi/tags', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  resourceIds?: string(name='ResourceIds', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  tagKeys?: string(name='TagKeys', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'DELETE', '/openapi/tags', 'json', false, 'json', request);
}

model UpdateLogstashRequest {
  instanceId: string(name='InstanceId', position='Path'),
  clientToken?: string(name='clientToken', position='Query'),
}

model UpdateLogstashResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UpdateLogstashResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLogstashResponseBody(name='body'),
}

async function updateLogstash(request: UpdateLogstashRequest): UpdateLogstashResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogstash', 'PUT', '/openapi/logstashes/{InstanceId}', 'json', false, 'json', request);
}

model UpdateLogstashChargeTypeRequest {
  instanceId: string(name='InstanceId', position='Path'),
  clientToken?: string(name='clientToken', position='Query'),
}

model UpdateLogstashChargeTypeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UpdateLogstashChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLogstashChargeTypeResponseBody(name='body'),
}

async function updateLogstashChargeType(request: UpdateLogstashChargeTypeRequest): UpdateLogstashChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogstashChargeType', 'POST', '/openapi/logstashes/{InstanceId}/actions/convert-pay-type', 'json', false, 'json', request);
}

