/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth-intl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList'),
  isReturnImage?: string(name='IsReturnImage'),
  merchantBizId?: string(name='MerchantBizId'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult'),
  transactionId?: string(name='TransactionId'),
}

model CheckResultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    ekycResult?: string(name='EkycResult'),
    extBasicInfo?: string(name='ExtBasicInfo'),
    extFaceInfo?: string(name='ExtFaceInfo'),
    extIdInfo?: string(name='ExtIdInfo'),
    extRiskInfo?: string(name='ExtRiskInfo'),
    passed?: string(name='Passed'),
    subCode?: string(name='SubCode'),
  }(name='Result'),
}

model CheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckResultResponseBody(name='body'),
}

async function checkResultWithOptions(request: CheckResultRequest, runtime: Util.RuntimeOptions): CheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extraImageControlList)) {
    query['ExtraImageControlList'] = request.extraImageControlList;
  }
  if (!Util.isUnset(request.isReturnImage)) {
    query['IsReturnImage'] = request.isReturnImage;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.returnFiveCategorySpoofResult)) {
    query['ReturnFiveCategorySpoofResult'] = request.returnFiveCategorySpoofResult;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkResult(request: CheckResultRequest): CheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResultWithOptions(request, runtime);
}

model FaceCompareRequest {
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  sourceFacePicture?: string(name='SourceFacePicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', example='https://***face1.jpeg'),
  targetFacePicture?: string(name='TargetFacePicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://***face2.jpeg'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', example='98'),
    passed?: string(name='Passed', example='Y'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceCompareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FaceCompareResponseBody(name='body'),
}

async function faceCompareWithOptions(request: FaceCompareRequest, runtime: Util.RuntimeOptions): FaceCompareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.sourceFacePicture)) {
    query['SourceFacePicture'] = request.sourceFacePicture;
  }
  if (!Util.isUnset(request.sourceFacePictureUrl)) {
    query['SourceFacePictureUrl'] = request.sourceFacePictureUrl;
  }
  if (!Util.isUnset(request.targetFacePicture)) {
    query['TargetFacePicture'] = request.targetFacePicture;
  }
  if (!Util.isUnset(request.targetFacePictureUrl)) {
    query['TargetFacePictureUrl'] = request.targetFacePictureUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FaceCompare',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceCompareWithOptions(request, runtime);
}

model InitializeRequest {
  docType?: string(name='DocType'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl'),
  flowType?: string(name='FlowType'),
  merchantBizId?: string(name='MerchantBizId'),
  merchantUserId?: string(name='MerchantUserId'),
  metaInfo?: string(name='MetaInfo'),
  operationMode?: string(name='OperationMode'),
  pages?: string(name='Pages'),
  productCode?: string(name='ProductCode'),
  productConfig?: string(name='ProductConfig'),
  sceneCode?: string(name='SceneCode'),
  serviceLevel?: string(name='ServiceLevel'),
}

model InitializeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    clientCfg?: string(name='ClientCfg'),
    transactionId?: string(name='TransactionId'),
  }(name='Result'),
}

model InitializeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeResponseBody(name='body'),
}

async function initializeWithOptions(request: InitializeRequest, runtime: Util.RuntimeOptions): InitializeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.facePictureBase64)) {
    query['FacePictureBase64'] = request.facePictureBase64;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.flowType)) {
    query['FlowType'] = request.flowType;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.metaInfo)) {
    query['MetaInfo'] = request.metaInfo;
  }
  if (!Util.isUnset(request.operationMode)) {
    query['OperationMode'] = request.operationMode;
  }
  if (!Util.isUnset(request.pages)) {
    query['Pages'] = request.pages;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productConfig)) {
    query['ProductConfig'] = request.productConfig;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.serviceLevel)) {
    query['ServiceLevel'] = request.serviceLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Initialize',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initialize(request: InitializeRequest): InitializeResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeWithOptions(request, runtime);
}

