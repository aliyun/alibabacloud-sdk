/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth-intl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CardOcrRequest {
  docType?: string(name='DocType', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  ocr?: string(name='Ocr', example='T'),
  productCode?: string(name='ProductCode', example='ID_OCR_MIN'),
  spoof?: string(name='Spoof', example='F'),
}

model CardOcrResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extCardInfo?: string(name='ExtCardInfo'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model CardOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CardOcrResponseBody(name='body'),
}

/**
  * @deprecated : CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
  *
  * @param request CardOcrRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CardOcrResponse
 */
// Deprecated
async function cardOcrWithOptions(request: CardOcrRequest, runtime: Util.RuntimeOptions): CardOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CardOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
  *
  * @param request CardOcrRequest
  * @return CardOcrResponse
 */
// Deprecated
async function cardOcr(request: CardOcrRequest): CardOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return cardOcrWithOptions(request, runtime);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList', example='***'),
  isReturnImage?: string(name='IsReturnImage', example='N'),
  merchantBizId?: string(name='MerchantBizId', example='djs20d***9-dsskc'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult', example='Y'),
  transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
}

model CheckResultResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    ekycResult?: string(name='EkycResult', example='**'),
    extBasicInfo?: string(name='ExtBasicInfo', example='**'),
    extFaceInfo?: string(name='ExtFaceInfo', example='**'),
    extIdInfo?: string(name='ExtIdInfo', example='**'),
    extRiskInfo?: string(name='ExtRiskInfo', example='**'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='***'),
  }(name='Result'),
}

model CheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResultResponseBody(name='body'),
}

async function checkResultWithOptions(request: CheckResultRequest, runtime: Util.RuntimeOptions): CheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extraImageControlList)) {
    query['ExtraImageControlList'] = request.extraImageControlList;
  }
  if (!Util.isUnset(request.isReturnImage)) {
    query['IsReturnImage'] = request.isReturnImage;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.returnFiveCategorySpoofResult)) {
    query['ReturnFiveCategorySpoofResult'] = request.returnFiveCategorySpoofResult;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkResult(request: CheckResultRequest): CheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResultWithOptions(request, runtime);
}

model DeleteVerifyResultRequest {
  deleteAfterQuery?: string(name='DeleteAfterQuery', example='Y / N'),
  deleteType?: string(name='DeleteType', example='Img / Text / All'),
  transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
}

model DeleteVerifyResultResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  result?: {
    deleteResult?: string(name='DeleteResult', example='Y/N'),
    transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
  }(name='Result'),
}

model DeleteVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVerifyResultResponseBody(name='body'),
}

async function deleteVerifyResultWithOptions(request: DeleteVerifyResultRequest, runtime: Util.RuntimeOptions): DeleteVerifyResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteAfterQuery)) {
    query['DeleteAfterQuery'] = request.deleteAfterQuery;
  }
  if (!Util.isUnset(request.deleteType)) {
    query['DeleteType'] = request.deleteType;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVerifyResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVerifyResult(request: DeleteVerifyResultRequest): DeleteVerifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVerifyResultWithOptions(request, runtime);
}

model DescribeAddressLabelsRequest {
  address?: string(name='Address', example='0xabds8292***dskkds'),
  coin?: string(name='Coin', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22'),
}

model DescribeAddressLabelsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    labelList?: [ string ](name='LabelList'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAddressLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddressLabelsResponseBody(name='body'),
}

async function describeAddressLabelsWithOptions(request: DescribeAddressLabelsRequest, runtime: Util.RuntimeOptions): DescribeAddressLabelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddressLabels',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddressLabels(request: DescribeAddressLabelsRequest): DescribeAddressLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressLabelsWithOptions(request, runtime);
}

model DescribeAddressOverviewRequest {
  address?: string(name='Address', example='0xabds***djskjds'),
  coin?: string(name='Coin', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
}

model DescribeAddressOverviewResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    balance?: float(name='Balance', example='54.4216'),
    firstSeen?: long(name='FirstSeen', example='1441800674'),
    lastSeen?: long(name='LastSeen', example='1682056727'),
    receivedTxsCount?: int32(name='ReceivedTxsCount', example='1470'),
    spentTxsCount?: int32(name='SpentTxsCount', example='227'),
    totalReceived?: float(name='TotalReceived', example='916263.8'),
    totalSpent?: float(name='TotalSpent', example='916205.4'),
    txsCount?: long(name='TxsCount', example='1697'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAddressOverviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddressOverviewResponseBody(name='body'),
}

async function describeAddressOverviewWithOptions(request: DescribeAddressOverviewRequest, runtime: Util.RuntimeOptions): DescribeAddressOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddressOverview',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddressOverview(request: DescribeAddressOverviewRequest): DescribeAddressOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressOverviewWithOptions(request, runtime);
}

model DescribeMaliciousAddressRequest {
  coin?: string(name='Coin', example='BTC'),
  end?: string(name='End', example='2017-08-20'),
  merchantBizId?: string(name='MerchantBizId', example='djs20dsjk2-dsjd29-dsskc'),
  start?: string(name='Start', example='2017-07-20'),
}

model DescribeMaliciousAddressResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      addTime?: string(name='AddTime', example='2017-07-18 00:00:00'),
      address?: string(name='Address', example='f6d239ff***df816'),
      coin?: string(name='Coin', example='ETH'),
      detail?: string(name='Detail', example='FAKE_Coindash_2'),
      tag?: string(name='Tag'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMaliciousAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMaliciousAddressResponseBody(name='body'),
}

async function describeMaliciousAddressWithOptions(request: DescribeMaliciousAddressRequest, runtime: Util.RuntimeOptions): DescribeMaliciousAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMaliciousAddress',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMaliciousAddress(request: DescribeMaliciousAddressRequest): DescribeMaliciousAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMaliciousAddressWithOptions(request, runtime);
}

model DescribeRiskScoreRequest {
  address?: string(name='Address', example='0xabds***djskjds'),
  coin?: string(name='Coin', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
}

model DescribeRiskScoreResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    detailList?: [ string ](name='DetailList'),
    hackingEvent?: string(name='HackingEvent', example='MMFinance Exploiter'),
    riskLevel?: string(name='RiskLevel', example='Severe'),
    score?: int32(name='Score', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRiskScoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskScoreResponseBody(name='body'),
}

async function describeRiskScoreWithOptions(request: DescribeRiskScoreRequest, runtime: Util.RuntimeOptions): DescribeRiskScoreResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskScore',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRiskScore(request: DescribeRiskScoreRequest): DescribeRiskScoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskScoreWithOptions(request, runtime);
}

model DescribeTransactionsListRequest {
  address?: string(name='Address', example='0xabds***djskjds'),
  coin?: string(name='Coin', example='ETH'),
  endTimestamp?: long(name='EndTimestamp', example='1682235649'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  page?: long(name='Page', example='1'),
  startTimestamp?: long(name='StartTimestamp', example='1682232649'),
  type?: string(name='Type', example='in'),
}

model DescribeTransactionsListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    in?: [ 
      {
        address?: string(name='Address', example='0xd90e2***b90ad053324f31b'),
        amount?: float(name='Amount', example='0.0845'),
        label?: string(name='Label', example='bi***ce'),
        txHashList?: [ string ](name='TxHashList'),
        type?: int32(name='Type', example='1'),
      }
    ](name='In'),
    out?: [ 
      {
        address?: string(name='Address', example='0xd90e2***b90ad053324f31b'),
        amount?: float(name='Amount', example='743'),
        label?: string(name='Label', example='Tor***uter'),
        txHashList?: [ string ](name='TxHashList'),
        type?: int32(name='Type', example='1'),
      }
    ](name='Out'),
    page?: long(name='Page', example='1'),
    totalPages?: long(name='TotalPages', example='6'),
    transactionsOnPage?: long(name='TransactionsOnPage', example='300'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeTransactionsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTransactionsListResponseBody(name='body'),
}

async function describeTransactionsListWithOptions(request: DescribeTransactionsListRequest, runtime: Util.RuntimeOptions): DescribeTransactionsListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTransactionsList',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTransactionsList(request: DescribeTransactionsListRequest): DescribeTransactionsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransactionsListWithOptions(request, runtime);
}

model DescribeWeb3AddressLabelsRequest {
  address?: string(name='Address', description='The address hash.', example='0000980145045a5c5acad3d2df0cf3b2afxxxxxx'),
  chainShortName?: string(name='ChainShortName', description='This is the short name of blockchain。
[ ETH, MATIC, BNB ]', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business ID for tracing purpose. For example，the sequence ID from the merchant\\"s business-related database.', example='dso932dsjsd22'),
}

model DescribeWeb3AddressLabelsResponseBody = {
  code?: string(name='Code', description='Return code. For the full list of codes, see Codes and Messages.', example='Success'),
  data?: {
    address?: string(name='Address', description='address', example='2341980145045A5c5acad3d2Df0cF3B2Afxxxxxx'),
    balance?: string(name='Balance', description='amount of native currency', example='0'),
    balanceSymbol?: string(name='BalanceSymbol', description='native currency of the chain', example='ETH'),
    chainName?: string(name='ChainName', description='ChainNameEnumstring name of blockchain', example='Ethereum Mainnet'),
    chainShortName?: string(name='ChainShortName', description='ChainShortName', example='eth'),
    contractAddress?: string(name='ContractAddress', description='0: EOA; 1: Contract', example='0'),
    createContractAddress?: string(name='CreateContractAddress', description='the address of deployer if the current address is a contract, null if the current address is an EOA', example='dAC17F958D2ee523a2206206994597C13Dxxxxxx'),
    createContractTransactionHash?: string(name='CreateContractTransactionHash', description='contract creation hash if the current address is a contract, null if the current address is an EOA', example='dAC17F958D2ee523a2206206994597C13Dxxxxxx'),
    customRiskAssessment?: string(name='CustomRiskAssessment', description='customized assessment detail', example='""'),
    firstTransactionTime?: string(name='FirstTransactionTime', description='the first transaction hash sent by the address', example='20230304'),
    isProducerAddress?: string(name='IsProducerAddress', description='0: Not validator; 1: validator', example='0'),
    lastTransactionTime?: string(name='LastTransactionTime', description='the latest transaction hash sent by the address', example='20230304'),
    receiveAmount?: string(name='ReceiveAmount', description='the amount of native currency received in 180 days', example='0'),
    sendAmount?: string(name='SendAmount', description='the amount of native currency sent in 180 days', example='0'),
    tag?: string(name='Tag', description='tag', example='contracts:Tether: Tether_USD,token_standard:erc20'),
    token?: string(name='Token', description='if the address is an erc20 token, returns the token name', example='Tether USD'),
    tokenAmount?: int32(name='TokenAmount', description='the number of erc20 tokens involved with current address in 180 days', example='1'),
    tokenList?: string(name='TokenList', description='address of erc20 tokens involved with current address in 180 days', example='["{"ERC721":[]"]}"]'),
    transactionCount?: int32(name='TransactionCount', description='the number of transactions', example='2'),
  }(name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code', example='200'),
  message?: string(name='Message', description='Response detailed message.', example='success'),
  requestId?: string(name='RequestId', description='The unique ID of the request, which can be used to locate issues.', example='7F971622-38C0-5F56-B2EC-315367979B4F'),
}

model DescribeWeb3AddressLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWeb3AddressLabelsResponseBody(name='body'),
}

async function describeWeb3AddressLabelsWithOptions(request: DescribeWeb3AddressLabelsRequest, runtime: Util.RuntimeOptions): DescribeWeb3AddressLabelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.chainShortName)) {
    query['ChainShortName'] = request.chainShortName;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWeb3AddressLabels',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWeb3AddressLabels(request: DescribeWeb3AddressLabelsRequest): DescribeWeb3AddressLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWeb3AddressLabelsWithOptions(request, runtime);
}

model DescribeWeb3RiskScoreRequest {
  chainShortName?: string(name='ChainShortName', description='This is the short name of blockchain。
[ ETH, MATIC, BNB ]', example='ETH'),
  depth?: int32(name='Depth', description='minimum: 1
maximum: 100
the maximum depth for risk analysis. For UTXO-based blockchains, default and maximum is enforced at 100.
For account-based blockchains, default and maximum is enforced at 6', example='2'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business ID for tracing purpose. For example，the sequence ID from the merchant\\"s business-related database.', example='e0c34a353888'),
  objectId?: string(name='ObjectId', description='For TRANSACTION objects, you need to provide the transaction hash。
For ADDRESS objects, you need to provide the address or reference address hash。', example='0000980145045a5c5acad3d2df0cf3b2afxxxxxx'),
  objectType?: string(name='ObjectType', description='The object of the analysis.
[ TRANSACTION, ADDRESS ]', example='TRANSACTION'),
}

model DescribeWeb3RiskScoreResponseBody = {
  code?: string(name='Code', description='Return code. For the full list of codes, see Codes and Messages.', example='Success'),
  data?: {
    riskResults?: [ 
      {
        description?: string(name='Description', description='description', example='incoming address risk critical xxxxxx'),
        severity?: string(name='Severity', description='[ CRITICAL, HIGH, MEDIUM, LOW, NO ]
100: Critical
67-99: High risk
34-66: Medium risk
1-33: Low risk
0: No risk', example='HIGH'),
        type?: string(name='Type', description='Address
Transaction', example='Address'),
      }
    ](name='RiskResults', description='risk results'),
    score?: string(name='Score', description='Risk score', example='80'),
  }(name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='Response detailed message.', example='success'),
  requestId?: string(name='RequestId', description='The unique ID of the request, which can be used to locate issues.', example='5E63B760-0ECB-5C07-8503-A65C27876968'),
}

model DescribeWeb3RiskScoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWeb3RiskScoreResponseBody(name='body'),
}

async function describeWeb3RiskScoreWithOptions(request: DescribeWeb3RiskScoreRequest, runtime: Util.RuntimeOptions): DescribeWeb3RiskScoreResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chainShortName)) {
    query['ChainShortName'] = request.chainShortName;
  }
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWeb3RiskScore',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWeb3RiskScore(request: DescribeWeb3RiskScoreRequest): DescribeWeb3RiskScoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWeb3RiskScoreWithOptions(request, runtime);
}

model DescribeWeb3TransactionLabelsRequest {
  chainShortName?: string(name='ChainShortName', description='This is the short name of blockchain。
[ ETH, MATIC, BNB ]', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business ID for tracing purpose. For example，the sequence ID from the merchant\\"s business-related database.', example='e0c34a353888'),
  transaction?: string(name='Transaction', description='The Transaction hash.', example='c92880148d4896d8a2093a891a8f08916fe141fba474ede4101f81fb2bxxxxxx'),
}

model DescribeWeb3TransactionLabelsResponseBody = {
  code?: string(name='Code', description='Return code. For the full list of codes, see Codes and Messages.', example='Success'),
  data?: {
    amount?: string(name='Amount', description='the amount of native currency', example='27'),
    chainName?: string(name='ChainName', description='chainName', example='ETH'),
    chainShortName?: string(name='ChainShortName', description='short name of blockchain', example='eth'),
    contractDetails?: [ 
      {
        amount?: string(name='Amount', description='the value of internal transaction', example='945.5'),
        from?: string(name='From', description='the sender of internal transaction', example='C7019579cB9bdb9204e61C7179ba2F88F9dxxxxxx'),
        gasLimit?: int32(name='GasLimit', description='the gaslimit of internal transaction', example='20712'),
        index?: int32(name='Index', description='the call layer of internal transaction', example='1'),
        to?: string(name='To', description='the receiver of internal transaction', example='C7019579cB9bdb9204e61C7179ba2F88F9dxxxxxx'),
      }
    ](name='ContractDetails', description='contract details'),
    errorLog?: string(name='ErrorLog', description='error log', example='“”'),
    gasLimit?: int32(name='GasLimit', description='gasLimit', example='1232'),
    gasPrice?: string(name='GasPrice', description='gasPrice', example='5034'),
    gasUsed?: int32(name='GasUsed', description='gasUsed', example='234'),
    height?: int32(name='Height', description='height', example='17087552'),
    index?: int32(name='Index', description='the position of the transaction in the block', example='94'),
    inputData?: string(name='InputData', description='input data', example='a9059cbb000000000000000000000000c7019579cb9bdb9204e61c7179ba2f88f9d2990b000000000xxxxxx'),
    inputDetails?: [ 
      {
        amount?: int32(name='Amount', description='example: 15. the amount of transation sent by the address', example='3234'),
        inputHash?: string(name='InputHash', description='the address hash', example='21a31Ee1afC51d94C2eFcCAa2xxxxxx'),
        isContract?: string(name='IsContract', description='example: true. is it a contract', example='true'),
        tag?: string(name='Tag', description='example: Dex . the tag of the address', example='contracts:Tether: Tether_USD,token_standard:xxxxxx'),
      }
    ](name='InputDetails', description='input details'),
    methodId?: string(name='MethodId', description='the method name of contract call. For external transaction method: [\\"CALL\\",\\"CALLCODE\\",\\"DELEGATECALL\\",\\"STATICCALL\\"]; for internal transaction method: the first 4 bytes of the hash of the method name', example='a9059cbb'),
    nonce?: string(name='Nonce', description='nonce', example='6242724'),
    outputDetails?: [ 
      {
        amount?: int32(name='Amount', description='example: 15. the amount of transation sent by the address', example='1500'),
        inputHash?: string(name='InputHash', description='the address hash', example='21a31Ee1afC51d94C2eFcCAa2xxxxxx'),
        isContract?: string(name='IsContract', description='example: true. is it a contract', example='true'),
        tag?: string(name='Tag', description='example: Dex. the tag of the address', example='contracts:Tether: Tether_USD,token_standard:xxxxxx'),
      }
    ](name='OutputDetails', description='output details'),
    state?: int32(name='State', description='the transaction state. 1: success 0: fail', example='1'),
    tokenTransferDetails?: [ 
      {
        amount?: string(name='Amount', description='the token amount', example='945.5'),
        from?: string(name='From', description='the sender of the token', example='21a31Ee1afC51d94C2eFcCAa2092aD1028xxxxxx'),
        index?: int32(name='Index', description='the call layer of to token transfer', example='0'),
        symbol?: string(name='Symbol', description='the token symbol', example='USDT'),
        to?: string(name='To', description='the receiver of the token', example='C7019579cB9bdb9204e61C7179ba2F88F9dxxxxxx'),
        token?: string(name='Token', description='the token name', example='Tether USD'),
        tokenContractAddress?: string(name='TokenContractAddress', description='the token address', example='dAC17F958D2ee523a2206206994597C13Dxxxxxx'),
        tokenId?: string(name='TokenId', description='NFT ID, if the token is erc721', example='-1'),
      }
    ](name='TokenTransferDetails', description='token transfer details'),
    transactionSymbol?: string(name='TransactionSymbol', description='the symbol of native currency', example='ETH'),
    transactionTime?: string(name='TransactionTime', description='the block timestamp', example='1681991807'),
    transactionType?: string(name='TransactionType', description='Integer	0: legacy; 1: eip 2930; 2: eip 1559', example='1'),
    txfee?: string(name='Txfee', description='the transaction fee in eth', example='0.002321489548255059'),
    txid?: string(name='Txid', description='Txid', example='c92880148d4896d8a2093a891a8f08916fe141fba474ede410xxxxxx'),
  }(name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='Response detailed message.', example='success'),
  requestId?: string(name='RequestId', description='The unique ID of the request, which can be used to locate issues.', example='7A0D192A-CC0C-5DE5-A3B6-A14CF45508F2'),
}

model DescribeWeb3TransactionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWeb3TransactionLabelsResponseBody(name='body'),
}

async function describeWeb3TransactionLabelsWithOptions(request: DescribeWeb3TransactionLabelsRequest, runtime: Util.RuntimeOptions): DescribeWeb3TransactionLabelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chainShortName)) {
    query['ChainShortName'] = request.chainShortName;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.transaction)) {
    query['Transaction'] = request.transaction;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWeb3TransactionLabels',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWeb3TransactionLabels(request: DescribeWeb3TransactionLabelsRequest): DescribeWeb3TransactionLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWeb3TransactionLabelsWithOptions(request, runtime);
}

model DocOcrRequest {
  docType?: string(name='DocType', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  ocr?: string(name='Ocr', example='T'),
  productCode?: string(name='ProductCode'),
  spoof?: string(name='Spoof', example='F'),
}

model DocOcrResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model DocOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrResponseBody(name='body'),
}

async function docOcrWithOptions(request: DocOcrRequest, runtime: Util.RuntimeOptions): DocOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DocOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function docOcr(request: DocOcrRequest): DocOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return docOcrWithOptions(request, runtime);
}

model EkycVerifyRequest {
  authorize?: string(name='Authorize', example='T'),
  crop?: string(name='Crop', example='F'),
  docName?: string(name='DocName'),
  docNo?: string(name='DocNo', example='410***************'),
  docType?: string(name='DocType', example='00000001'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', example='123456'),
  productCode?: string(name='ProductCode', example='eKYC_MIN'),
}

model EkycVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extFaceInfo?: string(name='ExtFaceInfo', example='{
"faceAttack": "N",
"faceComparisonScore": 52.57,
"facePassed": "N",
"authorityComparisonScore": 80.39
}'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
  }(name='Result'),
}

model EkycVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EkycVerifyResponseBody(name='body'),
}

async function ekycVerifyWithOptions(request: EkycVerifyRequest, runtime: Util.RuntimeOptions): EkycVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.docName)) {
    query['DocName'] = request.docName;
  }
  if (!Util.isUnset(request.docNo)) {
    query['DocNo'] = request.docNo;
  }
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EkycVerify',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ekycVerify(request: EkycVerifyRequest): EkycVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return ekycVerifyWithOptions(request, runtime);
}

model FaceCompareRequest {
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  sourceFacePicture?: string(name='SourceFacePicture'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', example='https://***face1.jpeg'),
  targetFacePicture?: string(name='TargetFacePicture'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://***face2.jpeg'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', example='98'),
    passed?: string(name='Passed', example='Y'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceCompareResponseBody(name='body'),
}

async function faceCompareWithOptions(request: FaceCompareRequest, runtime: Util.RuntimeOptions): FaceCompareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.sourceFacePictureUrl)) {
    query['SourceFacePictureUrl'] = request.sourceFacePictureUrl;
  }
  if (!Util.isUnset(request.targetFacePictureUrl)) {
    query['TargetFacePictureUrl'] = request.targetFacePictureUrl;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sourceFacePicture)) {
    body['SourceFacePicture'] = request.sourceFacePicture;
  }
  if (!Util.isUnset(request.targetFacePicture)) {
    body['TargetFacePicture'] = request.targetFacePicture;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FaceCompare',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceCompareWithOptions(request, runtime);
}

model FaceLivenessRequest {
  crop?: string(name='Crop', example='T'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  faceQuality?: string(name='FaceQuality', example='T'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  occlusion?: string(name='Occlusion', example='T'),
  productCode?: string(name='ProductCode', example='FACE_LIVENESS_MIN'),
}

model FaceLivenessResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='42EA58CA-5DF4-55D5-82C4-5E7A40DA62BA'),
  result?: {
    extFaceInfo?: {
      faceAttack?: string(name='FaceAttack', example='Y'),
      faceQualityScore?: double(name='FaceQualityScore', example='87.19'),
      occlusionResult?: string(name='OcclusionResult', example='Y'),
    }(name='ExtFaceInfo'),
    passed?: string(name='Passed', example='N'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceLivenessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceLivenessResponseBody(name='body'),
}

async function faceLivenessWithOptions(request: FaceLivenessRequest, runtime: Util.RuntimeOptions): FaceLivenessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.faceQuality)) {
    query['FaceQuality'] = request.faceQuality;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.occlusion)) {
    query['Occlusion'] = request.occlusion;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FaceLiveness',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceLivenessWithOptions(request, runtime);
}

model FraudResultCallBackRequest {
  certifyId?: string(name='CertifyId', example='shs2b27333914876c01de4cb22f5841f'),
  extParams?: string(name='ExtParams'),
  resultCode?: string(name='ResultCode', example='PASS'),
  verifyDeployEnv?: string(name='VerifyDeployEnv', example='production'),
}

model FraudResultCallBackResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model FraudResultCallBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FraudResultCallBackResponseBody(name='body'),
}

async function fraudResultCallBackWithOptions(request: FraudResultCallBackRequest, runtime: Util.RuntimeOptions): FraudResultCallBackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certifyId)) {
    query['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!Util.isUnset(request.resultCode)) {
    query['ResultCode'] = request.resultCode;
  }
  if (!Util.isUnset(request.verifyDeployEnv)) {
    query['VerifyDeployEnv'] = request.verifyDeployEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FraudResultCallBack',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fraudResultCallBack(request: FraudResultCallBackRequest): FraudResultCallBackResponse {
  var runtime = new Util.RuntimeOptions{};
  return fraudResultCallBackWithOptions(request, runtime);
}

model Id2MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211'),
  paramType?: string(name='ParamType', example='normal'),
  productCode?: string(name='ProductCode', example='ID_2META'),
  userName?: string(name='UserName'),
}

model Id2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='EFA11401-C961-5E89-A2D3-BF9883E5CC3D'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='Result'),
}

model Id2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyIntlResponseBody(name='body'),
}

async function id2MetaVerifyIntlWithOptions(request: Id2MetaVerifyIntlRequest, runtime: Util.RuntimeOptions): Id2MetaVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Id2MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function id2MetaVerifyIntl(request: Id2MetaVerifyIntlRequest): Id2MetaVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return id2MetaVerifyIntlWithOptions(request, runtime);
}

model InitializeRequest {
  authorize?: string(name='Authorize'),
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  crop?: string(name='Crop', example='*'),
  docScanMode?: string(name='DocScanMode'),
  docType?: string(name='DocType', example='01000000'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='***'),
  idFaceQuality?: string(name='IdFaceQuality', example='*'),
  idSpoof?: string(name='IdSpoof', example='Y'),
  languageConfig?: string(name='LanguageConfig'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543'),
  metaInfo?: string(name='MetaInfo', example='{\\"bioMetaInfo\\":\\"4.1.0:2916352,0\\",\\"deviceType\\":\\"web\\",\\"ua\\":\\"Mozilla/5.0 (Macintosh'),
  ocr?: string(name='Ocr', description='OCR。', example='*'),
  productCode?: string(name='ProductCode', example='eKYC'),
  productFlow?: string(name='ProductFlow'),
  returnUrl?: string(name='ReturnUrl', example='http*****'),
  sceneCode?: string(name='SceneCode', example='PAY**'),
  securityLevel?: string(name='SecurityLevel'),
  styleConfig?: string(name='StyleConfig'),
}

model InitializeResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    clientCfg?: string(name='ClientCfg', example='***'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
    transactionUrl?: string(name='TransactionUrl', example='http****'),
  }(name='Result'),
}

model InitializeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeResponseBody(name='body'),
}

async function initializeWithOptions(request: InitializeRequest, runtime: Util.RuntimeOptions): InitializeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!Util.isUnset(request.callbackToken)) {
    query['CallbackToken'] = request.callbackToken;
  }
  if (!Util.isUnset(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.docScanMode)) {
    query['DocScanMode'] = request.docScanMode;
  }
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idSpoof)) {
    query['IdSpoof'] = request.idSpoof;
  }
  if (!Util.isUnset(request.languageConfig)) {
    query['LanguageConfig'] = request.languageConfig;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.metaInfo)) {
    query['MetaInfo'] = request.metaInfo;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productFlow)) {
    query['ProductFlow'] = request.productFlow;
  }
  if (!Util.isUnset(request.returnUrl)) {
    query['ReturnUrl'] = request.returnUrl;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.securityLevel)) {
    query['SecurityLevel'] = request.securityLevel;
  }
  if (!Util.isUnset(request.styleConfig)) {
    query['StyleConfig'] = request.styleConfig;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Initialize',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initialize(request: InitializeRequest): InitializeResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeWithOptions(request, runtime);
}

model Mobile3MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211'),
  mobile?: string(name='Mobile', example='186****1234'),
  paramType?: string(name='ParamType', example='normal'),
  productCode?: string(name='ProductCode', example='MOBILE_3META'),
  userName?: string(name='UserName'),
}

model Mobile3MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D241532C-4EE9-5A2A-A5A5-C1FD98CE2EDD'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    subCode?: string(name='SubCode', example='101'),
  }(name='Result'),
}

model Mobile3MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaVerifyIntlResponseBody(name='body'),
}

async function mobile3MetaVerifyIntlWithOptions(request: Mobile3MetaVerifyIntlRequest, runtime: Util.RuntimeOptions): Mobile3MetaVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Mobile3MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function mobile3MetaVerifyIntl(request: Mobile3MetaVerifyIntlRequest): Mobile3MetaVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobile3MetaVerifyIntlWithOptions(request, runtime);
}

