/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth-intl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CardOcrRequest {
  docType?: string(name='DocType', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', example='dsjisaj***oekwodsm'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  ocr?: string(name='Ocr', example='T'),
  productCode?: string(name='ProductCode', example='ID_OCR_MIN'),
  spoof?: string(name='Spoof', example='F'),
}

model CardOcrResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extCardInfo?: string(name='ExtCardInfo'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model CardOcrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CardOcrResponseBody(name='body'),
}

/**
  * @deprecated : CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
  *
  * @param request CardOcrRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CardOcrResponse
 */
// Deprecated
async function cardOcrWithOptions(request: CardOcrRequest, runtime: Util.RuntimeOptions): CardOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    query['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CardOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
  *
  * @param request CardOcrRequest
  * @return CardOcrResponse
 */
// Deprecated
async function cardOcr(request: CardOcrRequest): CardOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return cardOcrWithOptions(request, runtime);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList', example='***'),
  isReturnImage?: string(name='IsReturnImage', example='N'),
  merchantBizId?: string(name='MerchantBizId', example='djs20d***9-dsskc'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult', example='Y'),
  transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
}

model CheckResultResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    ekycResult?: string(name='EkycResult', example='**'),
    extBasicInfo?: string(name='ExtBasicInfo', example='**'),
    extFaceInfo?: string(name='ExtFaceInfo', example='**'),
    extIdInfo?: string(name='ExtIdInfo', example='**'),
    extRiskInfo?: string(name='ExtRiskInfo', example='**'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='***'),
  }(name='Result'),
}

model CheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckResultResponseBody(name='body'),
}

async function checkResultWithOptions(request: CheckResultRequest, runtime: Util.RuntimeOptions): CheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extraImageControlList)) {
    query['ExtraImageControlList'] = request.extraImageControlList;
  }
  if (!Util.isUnset(request.isReturnImage)) {
    query['IsReturnImage'] = request.isReturnImage;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.returnFiveCategorySpoofResult)) {
    query['ReturnFiveCategorySpoofResult'] = request.returnFiveCategorySpoofResult;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkResult(request: CheckResultRequest): CheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResultWithOptions(request, runtime);
}

model DeletePictureRequest {
  deletePicAfterQuery?: string(name='DeletePicAfterQuery', example='Y/N'),
  transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
}

model DeletePictureResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    deleteResult?: string(name='DeleteResult', example='Y/N'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model DeletePictureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePictureResponseBody(name='body'),
}

async function deletePictureWithOptions(request: DeletePictureRequest, runtime: Util.RuntimeOptions): DeletePictureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deletePicAfterQuery)) {
    query['DeletePicAfterQuery'] = request.deletePicAfterQuery;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePicture',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePicture(request: DeletePictureRequest): DeletePictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePictureWithOptions(request, runtime);
}

model DescribeAddressLabelsRequest {
  address?: string(name='Address', example='0xabds8292***dskkds'),
  coin?: string(name='Coin', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22'),
}

model DescribeAddressLabelsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    labelList?: [ string ](name='LabelList'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAddressLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAddressLabelsResponseBody(name='body'),
}

async function describeAddressLabelsWithOptions(request: DescribeAddressLabelsRequest, runtime: Util.RuntimeOptions): DescribeAddressLabelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddressLabels',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddressLabels(request: DescribeAddressLabelsRequest): DescribeAddressLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressLabelsWithOptions(request, runtime);
}

model DescribeAddressOverviewRequest {
  address?: string(name='Address', example='0xabds***djskjds'),
  coin?: string(name='Coin', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
}

model DescribeAddressOverviewResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    balance?: float(name='Balance', example='54.4216'),
    firstSeen?: long(name='FirstSeen', example='1441800674'),
    lastSeen?: long(name='LastSeen', example='1682056727'),
    receivedTxsCount?: int32(name='ReceivedTxsCount', example='1470'),
    spentTxsCount?: int32(name='SpentTxsCount', example='227'),
    totalReceived?: float(name='TotalReceived', example='916263.8'),
    totalSpent?: float(name='TotalSpent', example='916205.4'),
    txsCount?: long(name='TxsCount', example='1697'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAddressOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAddressOverviewResponseBody(name='body'),
}

async function describeAddressOverviewWithOptions(request: DescribeAddressOverviewRequest, runtime: Util.RuntimeOptions): DescribeAddressOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddressOverview',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddressOverview(request: DescribeAddressOverviewRequest): DescribeAddressOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressOverviewWithOptions(request, runtime);
}

model DescribeMaliciousAddressRequest {
  coin?: string(name='Coin', example='BTC'),
  end?: string(name='End', example='2017-08-20'),
  merchantBizId?: string(name='MerchantBizId', example='djs20dsjk2-dsjd29-dsskc'),
  start?: string(name='Start', example='2017-07-20'),
}

model DescribeMaliciousAddressResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      addTime?: string(name='AddTime', example='2017-07-18 00:00:00'),
      address?: string(name='Address', example='f6d239ff***df816'),
      coin?: string(name='Coin', example='ETH'),
      detail?: string(name='Detail', example='FAKE_Coindash_2'),
      tag?: string(name='Tag'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMaliciousAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMaliciousAddressResponseBody(name='body'),
}

async function describeMaliciousAddressWithOptions(request: DescribeMaliciousAddressRequest, runtime: Util.RuntimeOptions): DescribeMaliciousAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMaliciousAddress',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMaliciousAddress(request: DescribeMaliciousAddressRequest): DescribeMaliciousAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMaliciousAddressWithOptions(request, runtime);
}

model DescribeRiskScoreRequest {
  address?: string(name='Address', example='0xabds***djskjds'),
  coin?: string(name='Coin', example='ETH'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
}

model DescribeRiskScoreResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    detailList?: [ string ](name='DetailList'),
    hackingEvent?: string(name='HackingEvent', example='MMFinance Exploiter'),
    riskLevel?: string(name='RiskLevel', example='Severe'),
    score?: int32(name='Score', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRiskScoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskScoreResponseBody(name='body'),
}

async function describeRiskScoreWithOptions(request: DescribeRiskScoreRequest, runtime: Util.RuntimeOptions): DescribeRiskScoreResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskScore',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRiskScore(request: DescribeRiskScoreRequest): DescribeRiskScoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskScoreWithOptions(request, runtime);
}

model DescribeTransactionsListRequest {
  address?: string(name='Address', example='0xabds***djskjds'),
  coin?: string(name='Coin', example='ETH'),
  endTimestamp?: long(name='EndTimestamp', example='1682235649'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  page?: long(name='Page', example='1'),
  startTimestamp?: long(name='StartTimestamp', example='1682232649'),
  type?: string(name='Type', example='in'),
}

model DescribeTransactionsListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    in?: [ 
      {
        address?: string(name='Address', example='0xd90e2***b90ad053324f31b'),
        amount?: float(name='Amount', example='0.0845'),
        label?: string(name='Label', example='bi***ce'),
        txHashList?: [ string ](name='TxHashList'),
        type?: int32(name='Type', example='1'),
      }
    ](name='In'),
    out?: [ 
      {
        address?: string(name='Address', example='0xd90e2***b90ad053324f31b'),
        amount?: float(name='Amount', example='743'),
        label?: string(name='Label', example='Tor***uter'),
        txHashList?: [ string ](name='TxHashList'),
        type?: int32(name='Type', example='1'),
      }
    ](name='Out'),
    page?: long(name='Page', example='1'),
    totalPages?: long(name='TotalPages', example='6'),
    transactionsOnPage?: long(name='TransactionsOnPage', example='300'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model DescribeTransactionsListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTransactionsListResponseBody(name='body'),
}

async function describeTransactionsListWithOptions(request: DescribeTransactionsListRequest, runtime: Util.RuntimeOptions): DescribeTransactionsListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.coin)) {
    query['Coin'] = request.coin;
  }
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTransactionsList',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTransactionsList(request: DescribeTransactionsListRequest): DescribeTransactionsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransactionsListWithOptions(request, runtime);
}

model DocOcrRequest {
  docType?: string(name='DocType', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', example='dsjisaj***oekwodsm'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  ocr?: string(name='Ocr', example='T'),
  productCode?: string(name='ProductCode'),
  spoof?: string(name='Spoof', example='F'),
}

model DocOcrResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model DocOcrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DocOcrResponseBody(name='body'),
}

async function docOcrWithOptions(request: DocOcrRequest, runtime: Util.RuntimeOptions): DocOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    query['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DocOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function docOcr(request: DocOcrRequest): DocOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return docOcrWithOptions(request, runtime);
}

model FaceCompareRequest {
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  sourceFacePicture?: string(name='SourceFacePicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', example='https://***face1.jpeg'),
  targetFacePicture?: string(name='TargetFacePicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://***face2.jpeg'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', example='98'),
    passed?: string(name='Passed', example='Y'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceCompareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FaceCompareResponseBody(name='body'),
}

async function faceCompareWithOptions(request: FaceCompareRequest, runtime: Util.RuntimeOptions): FaceCompareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.sourceFacePicture)) {
    query['SourceFacePicture'] = request.sourceFacePicture;
  }
  if (!Util.isUnset(request.sourceFacePictureUrl)) {
    query['SourceFacePictureUrl'] = request.sourceFacePictureUrl;
  }
  if (!Util.isUnset(request.targetFacePicture)) {
    query['TargetFacePicture'] = request.targetFacePicture;
  }
  if (!Util.isUnset(request.targetFacePictureUrl)) {
    query['TargetFacePictureUrl'] = request.targetFacePictureUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FaceCompare',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceCompareWithOptions(request, runtime);
}

model FaceLivenessRequest {
  crop?: string(name='Crop', example='T'),
  facePictureBase64?: string(name='FacePictureBase64', example='dsjisaj***oekwodsm'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  faceQuality?: string(name='FaceQuality', example='T'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  occlusion?: string(name='Occlusion', example='T'),
  productCode?: string(name='ProductCode', example='FACE_LIVENESS_MIN'),
}

model FaceLivenessResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='42EA58CA-5DF4-55D5-82C4-5E7A40DA62BA'),
  result?: {
    extFaceInfo?: {
      faceAttack?: string(name='FaceAttack', example='Y'),
      faceQualityScore?: double(name='FaceQualityScore', example='87.19'),
      occlusionResult?: string(name='OcclusionResult', example='Y'),
    }(name='ExtFaceInfo'),
    passed?: string(name='Passed', example='N'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceLivenessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FaceLivenessResponseBody(name='body'),
}

async function faceLivenessWithOptions(request: FaceLivenessRequest, runtime: Util.RuntimeOptions): FaceLivenessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.facePictureBase64)) {
    query['FacePictureBase64'] = request.facePictureBase64;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.faceQuality)) {
    query['FaceQuality'] = request.faceQuality;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.occlusion)) {
    query['Occlusion'] = request.occlusion;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FaceLiveness',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceLivenessWithOptions(request, runtime);
}

model FraudResultCallBackRequest {
  certifyId?: string(name='CertifyId', example='shs2b27333914876c01de4cb22f5841f'),
  extParams?: string(name='ExtParams'),
  resultCode?: string(name='ResultCode', example='PASS'),
  verifyDeployEnv?: string(name='VerifyDeployEnv', example='production'),
}

model FraudResultCallBackResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model FraudResultCallBackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FraudResultCallBackResponseBody(name='body'),
}

async function fraudResultCallBackWithOptions(request: FraudResultCallBackRequest, runtime: Util.RuntimeOptions): FraudResultCallBackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certifyId)) {
    query['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!Util.isUnset(request.resultCode)) {
    query['ResultCode'] = request.resultCode;
  }
  if (!Util.isUnset(request.verifyDeployEnv)) {
    query['VerifyDeployEnv'] = request.verifyDeployEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FraudResultCallBack',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fraudResultCallBack(request: FraudResultCallBackRequest): FraudResultCallBackResponse {
  var runtime = new Util.RuntimeOptions{};
  return fraudResultCallBackWithOptions(request, runtime);
}

model InitializeRequest {
  authorize?: string(name='Authorize'),
  crop?: string(name='Crop', example='*'),
  docScanMode?: string(name='DocScanMode'),
  docType?: string(name='DocType', example='01000000'),
  facePictureBase64?: string(name='FacePictureBase64', example='dsjisaj***oekwodsm'),
  facePictureUrl?: string(name='FacePictureUrl', example='***'),
  flowType?: string(name='FlowType', example='***'),
  idFaceQuality?: string(name='IdFaceQuality', example='*'),
  idSpoof?: string(name='IdSpoof', example='Y'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543'),
  metaInfo?: string(name='MetaInfo', example='{\\"bioMetaInfo\\":\\"4.1.0:2916352,0\\",\\"deviceType\\":\\"web\\",\\"ua\\":\\"Mozilla/5.0 (Macintosh'),
  ocr?: string(name='Ocr', description='OCR。', example='*'),
  operationMode?: string(name='OperationMode', example='***'),
  pages?: string(name='Pages', example='1'),
  productCode?: string(name='ProductCode', example='eKYC'),
  productConfig?: string(name='ProductConfig', example='***'),
  returnUrl?: string(name='ReturnUrl', example='http*****'),
  sceneCode?: string(name='SceneCode', example='PAY**'),
  serviceLevel?: string(name='ServiceLevel', example='****'),
}

model InitializeResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    clientCfg?: string(name='ClientCfg', example='***'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
    transactionUrl?: string(name='TransactionUrl', example='http****'),
  }(name='Result'),
}

model InitializeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeResponseBody(name='body'),
}

async function initializeWithOptions(request: InitializeRequest, runtime: Util.RuntimeOptions): InitializeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.docScanMode)) {
    query['DocScanMode'] = request.docScanMode;
  }
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.facePictureBase64)) {
    query['FacePictureBase64'] = request.facePictureBase64;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.flowType)) {
    query['FlowType'] = request.flowType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idSpoof)) {
    query['IdSpoof'] = request.idSpoof;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.metaInfo)) {
    query['MetaInfo'] = request.metaInfo;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.operationMode)) {
    query['OperationMode'] = request.operationMode;
  }
  if (!Util.isUnset(request.pages)) {
    query['Pages'] = request.pages;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productConfig)) {
    query['ProductConfig'] = request.productConfig;
  }
  if (!Util.isUnset(request.returnUrl)) {
    query['ReturnUrl'] = request.returnUrl;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.serviceLevel)) {
    query['ServiceLevel'] = request.serviceLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Initialize',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initialize(request: InitializeRequest): InitializeResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeWithOptions(request, runtime);
}

