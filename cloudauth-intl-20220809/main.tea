/**
 *
 */
import Util;
import XML;
import Credential;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth-intl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddressCompareIntlRequest {
  defaultCountry?: string(name='DefaultCountry', description='This parameter is required.'),
  productCode?: string(name='ProductCode', description='ADD_VERIFY

This parameter is required.'),
  text1?: string(name='Text1', description='This parameter is required.'),
  text2?: string(name='Text2', description='This parameter is required.'),
}

model AddressCompareIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    data?: string(name='Data'),
  }(name='Result'),
}

model AddressCompareIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressCompareIntlResponseBody(name='body'),
}

/**
 * @summary 地址相似比对
 *
 * @param request AddressCompareIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressCompareIntlResponse
 */
async function addressCompareIntlWithOptions(request: AddressCompareIntlRequest, runtime: Util.RuntimeOptions): AddressCompareIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultCountry)) {
    query['DefaultCountry'] = request.defaultCountry;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.text1)) {
    query['Text1'] = request.text1;
  }
  if (!Util.isUnset(request.text2)) {
    query['Text2'] = request.text2;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddressCompareIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 地址相似比对
 *
 * @param request AddressCompareIntlRequest
 * @return AddressCompareIntlResponse
 */
async function addressCompareIntl(request: AddressCompareIntlRequest): AddressCompareIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addressCompareIntlWithOptions(request, runtime);
}

model AddressVerifyIntlRequest {
  addressType?: string(name='AddressType', description='Verification address type:
- “0”: Text address
- “1”: Latitude and longitude

This parameter is required.', example='“0”'),
  defaultCity?: string(name='DefaultCity', description='Default city', example='杭州市'),
  defaultCountry?: string(name='DefaultCountry', description='Country name, currently only supports: China

This parameter is required.', example='中国'),
  defaultDistrict?: string(name='DefaultDistrict', description='Default district', example='余杭区'),
  defaultProvince?: string(name='DefaultProvince', description='Default province', example='浙江省'),
  latitude?: string(name='Latitude', description='Latitude.', example='“31.2304”'),
  longitude?: string(name='Longitude', description='Longitude.', example='“121.4737”'),
  mobile?: string(name='Mobile', description='Supports Chinese mobile phone numbers.

This parameter is required.', example='1872334****'),
  productCode?: string(name='ProductCode', description='Fixed value: ADD_VERIFY_PRO

This parameter is required.', example='ADD_VERIFY_PRO'),
  text?: string(name='Text', description='Detailed address text content', example='阿里巴巴西溪园区'),
  verifyType?: string(name='VerifyType', description='Address verification method:
- HOME: Home address verification
- WORK: Work address verification

This parameter is required.', example='HOME'),
}

model AddressVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  resultObject?: {
    addressInfo?: string(name='AddressInfo', description='Address verification details.', example='0-3000'),
    ispName?: string(name='IspName', description='Operator name:
- CMCC: China Mobile
- CTCC: China Telecom
- CUCC: China Unicom', example='CMCC'),
    passed?: string(name='Passed', description='Verification result, values:
- Y: Yes, the verified address distance is less than or equal to 10KM.
- N: No, the verified address distance is greater than 10KM.', example='Y'),
    subCode?: string(name='SubCode', description='Authentication result description.', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier for the authentication request.', example='hksb7ba1b28130d24e015d69********'),
  }(name='ResultObject', description='Returned result information.'),
}

model AddressVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Address Verification
 *
 * @description Based on the operator\\"s capabilities, input the phone number and address (or latitude and longitude) to verify whether the provided address is the user\\"s usual residence.
 *
 * @param request AddressVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressVerifyIntlResponse
 */
async function addressVerifyIntlWithOptions(request: AddressVerifyIntlRequest, runtime: Util.RuntimeOptions): AddressVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.defaultCity)) {
    query['DefaultCity'] = request.defaultCity;
  }
  if (!Util.isUnset(request.defaultCountry)) {
    query['DefaultCountry'] = request.defaultCountry;
  }
  if (!Util.isUnset(request.defaultDistrict)) {
    query['DefaultDistrict'] = request.defaultDistrict;
  }
  if (!Util.isUnset(request.defaultProvince)) {
    query['DefaultProvince'] = request.defaultProvince;
  }
  if (!Util.isUnset(request.latitude)) {
    query['Latitude'] = request.latitude;
  }
  if (!Util.isUnset(request.longitude)) {
    query['Longitude'] = request.longitude;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddressVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Address Verification
 *
 * @description Based on the operator\\"s capabilities, input the phone number and address (or latitude and longitude) to verify whether the provided address is the user\\"s usual residence.
 *
 * @param request AddressVerifyIntlRequest
 * @return AddressVerifyIntlResponse
 */
async function addressVerifyIntl(request: AddressVerifyIntlRequest): AddressVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addressVerifyIntlWithOptions(request, runtime);
}

model AddressVerifyV2IntlRequest {
  deviceToken?: string(name='DeviceToken', description='This parameter is required.', example='Tk9SSUQuMS*****************ZDNmNWY5NzQxOW1o'),
  mobile?: string(name='Mobile', example='1872334****'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='ADD_VERIFY_PRO'),
  regCountry?: string(name='RegCountry', description='This parameter is required.'),
  text?: string(name='Text'),
  verifyType?: string(name='VerifyType', example='HOME'),
}

model AddressVerifyV2IntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='7F971622-38C0-5F56-B2EC-315367979B4F'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    detail?: string(name='Detail', example='{
  "distanceRange": "0-3000",
  "ispName": "CTCC",
  "phoneStatus": "1"
}'),
    transactionId?: string(name='TransactionId', example='hksb7ba1b28130d24e015d69********'),
  }(name='Result'),
}

model AddressVerifyV2IntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressVerifyV2IntlResponseBody(name='body'),
}

/**
 * @summary 地址核验
 *
 * @param request AddressVerifyV2IntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressVerifyV2IntlResponse
 */
async function addressVerifyV2IntlWithOptions(request: AddressVerifyV2IntlRequest, runtime: Util.RuntimeOptions): AddressVerifyV2IntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceToken)) {
    query['DeviceToken'] = request.deviceToken;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regCountry)) {
    query['RegCountry'] = request.regCountry;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddressVerifyV2Intl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 地址核验
 *
 * @param request AddressVerifyV2IntlRequest
 * @return AddressVerifyV2IntlResponse
 */
async function addressVerifyV2Intl(request: AddressVerifyV2IntlRequest): AddressVerifyV2IntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addressVerifyV2IntlWithOptions(request, runtime);
}

model BankMetaVerifyIntlRequest {
  bankCard?: string(name='BankCard', description='Bank card number.

- When paramType is set to normal, enter the plaintext bank card number.
- When paramType is set to md5, enter the plaintext part of the card number except the last 6 digits, followed by the MD5 value of the last 6 digits (32-character lowercase).

This parameter is required.', example='● 明文：12345678******
● 密文：
12345678f8ee21920e37807b43e7e912ab829b6e'),
  identifyNum?: string(name='IdentifyNum', description='ID number:
- When paramType is normal: Enter the plaintext ID number.
- When paramType is md5:
    - First 6 digits of the ID number (plaintext) + date of birth (ciphertext) + last 4 digits of the ID number (plaintext).
    - For other IDs, encrypt the last two digits with MD5.

Important
This field is required when ProductType is one of the following:
- BANK_CARD_3_META
- BANK_CARD_4_META', example='● 明文：429001********8211
● 密文：
42900132fa7bcd874161bea8ec8fd98f390ec98211'),
  identityType?: string(name='IdentityType', description='ID type (default to ID card if left empty, see the table below for other types).', example='01'),
  mobile?: string(name='Mobile', description='Phone number:
- When paramType is normal: Enter the plaintext phone number.
- When paramType is md5: Enter the ciphertext phone number.

Important

- This field is required when ProductType = BANK_CARD_4_META.', example='● 明文：186****2055
● 密文：
849169cd3b20621c1c78bd61a11a4fc2'),
  paramType?: string(name='ParamType', description='Encryption method:
- normal: no encryption
- md5: md5 encryption

Important:

- All encrypted parameters should be in the form of a 32-character lowercase MD5 string.
- The ciphertext generated by different MD5 tools may vary. If the interface works before encryption but not after, try changing the MD5 tool.

This parameter is required.', example='normal'),
  productCode?: string(name='ProductCode', description='Fixed value: BANK_CARD_N_META

This parameter is required.', example='BANK_CARD_N_META'),
  productType?: string(name='ProductType', description='Product type to call:

- BANK_CARD_2_META: Bank card number + name verification.
- BANK_CARD_3_META: Bank card number + name + ID number verification.
- BANK_CARD_4_META: Bank card number + name + ID number + phone number verification.

This parameter is required.', example='BANK_CARD_4_META'),
  userName?: string(name='UserName', description='Name.

- When paramType is set to normal, enter the plaintext name.
- When paramType is set to md5, encrypt the first character of the name with MD5 (32-character lowercase MD5) and append the rest of the name in plaintext.

This parameter is required.', example='张*'),
  verifyMode?: string(name='VerifyMode', description='VERIFY_BANK_CARD: Bank card authentication mode. This indicates whether the provided bank card number matches the user\\\\"s real name, ID number, and phone number.

This parameter is required.', example='VERIFY_BANK_CARD'),
}

model BankMetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='4EB35****87EBA1'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Consistent (charged)
- 2: Inconsistent (charged)
- 3: No record found (not charged)', example='1'),
    subCode?: string(name='SubCode', description='Verification details:

- **101**: Verification passed.
- **201**: Authentication information does not match, cardholder information is incorrect.
- **202**: Authentication information does not match, bank card has not been activated for authenticated payments.
- **203**: Authentication information does not match, bank card has expired.
- **204**: Authentication information does not match, bank card is a restricted card.
- **205**: Authentication information does not match, this card has been confiscated.
- **206**: Authentication information does not match, bank card is invalid.
- **207**: Authentication information does not match, this card has no corresponding issuing bank.
- **208**: Authentication information does not match, this card is uninitialized or dormant.
- **209**: Authentication information does not match, this card is a cheating card or swallowed card.
- **210**: Authentication information does not match, this card has been reported lost.
- **211**: Authentication information does not match, password error limit exceeded.
- **212**: Authentication information does not match, issuing bank does not support this transaction.
- **213**: Authentication information does not match, card status is abnormal or card is invalid.
- **214**: Authentication information does not match, no phone number reserved.
- **215**: Authentication information does not match, entered password, expiration date, or CVN2 is incorrect.
- **216**: Authentication information does not match, other card anomalies.
- **301**: Unable to verify, bank card does not support this service.
- **302**: Unable to verify, verification failed or bank refused verification, please contact the issuing bank.
- **303**: Unable to verify, bank card does not currently support phone number verification.
- **304**: Unable to verify, bank card number is incorrect.
- **305**: Unable to verify, other reasons.
- **306**: Unable to verify, verification attempt limit exceeded.', example='101'),
  }(name='ResultObject', description='Returned result information'),
}

model BankMetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BankMetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Bank Card Verification
 *
 * @description Verification of bank card elements, including: two-element verification (name + bank card number), three-element verification (name + ID number + bank card number), and four-element verification (name + ID number + phone number + bank card number) for consistency.
 *
 * @param request BankMetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BankMetaVerifyIntlResponse
 */
async function bankMetaVerifyIntlWithOptions(request: BankMetaVerifyIntlRequest, runtime: Util.RuntimeOptions): BankMetaVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bankCard)) {
    query['BankCard'] = request.bankCard;
  }
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.identityType)) {
    query['IdentityType'] = request.identityType;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.verifyMode)) {
    query['VerifyMode'] = request.verifyMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BankMetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Bank Card Verification
 *
 * @description Verification of bank card elements, including: two-element verification (name + bank card number), three-element verification (name + ID number + bank card number), and four-element verification (name + ID number + phone number + bank card number) for consistency.
 *
 * @param request BankMetaVerifyIntlRequest
 * @return BankMetaVerifyIntlResponse
 */
async function bankMetaVerifyIntl(request: BankMetaVerifyIntlRequest): BankMetaVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return bankMetaVerifyIntlWithOptions(request, runtime);
}

model CardOcrRequest {
  docType?: string(name='DocType', description='Document type.', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', description='Whether to perform face quality detection on the document
- T: Indicates that detection is needed
- F: Indicates that detection is not needed (default F)', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Base64 on the front of the document image', example='base64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='URL of the front side of the document image', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure uniqueness.', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', description='Merchant user ID or other identifiers that can be used to identify specific users, such as phone numbers, email addresses, etc. It is strongly recommended to pre-desensitize the value of the userId field, for example, by hashing the value.', example='123456789'),
  ocr?: string(name='Ocr', description='Whether to perform document OCR
- T: Indicates that document OCR is required (default T)
- F: Indicates that it is not required', example='T'),
  productCode?: string(name='ProductCode', description='Product code', example='ID_OCR_MIN'),
  spoof?: string(name='Spoof', description='Whether to enable anti-counterfeiting detection
- T: Indicates to enable anti-counterfeiting
- F: Indicates to disable (default F)', example='F'),
}

model CardOcrResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extCardInfo?: string(name='ExtCardInfo', description='Document recognition result', example='{
  "idFaceQualityScore": 98.90,
  "ocrIdInfo": {
    "expiryDate": "2024-04-20",
    "placeOfIssue": "广东",
    "englishName": "ZHENGJIAN,YANGBEN",
    "originOfIssue": "公安部出入境管理局",
    "sex": "女",
    "name": "证件样本",
    "idNumber": "C00000000",
    "issueDate": "2014-04-21",
    "birthDate": "1981-08-03"
  },
  "spoofInfo": {
    "spoofResult": "N",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    extIdInfo?: string(name='ExtIdInfo', description='Additional result information', example='**'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier for the authentication request', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Return result'),
}

model CardOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CardOcrResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
 *
 * @summary Pure server-side interface for document OCR recognition
 *
 * @param request CardOcrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CardOcrResponse
 */
// Deprecated
async function cardOcrWithOptions(request: CardOcrRequest, runtime: Util.RuntimeOptions): CardOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CardOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @deprecated OpenAPI CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
 *
 * @summary Pure server-side interface for document OCR recognition
 *
 * @param request CardOcrRequest
 * @return CardOcrResponse
 */
// Deprecated
async function cardOcr(request: CardOcrRequest): CardOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return cardOcrWithOptions(request, runtime);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList', description='Return additional information.', example='***'),
  isReturnImage?: string(name='IsReturnImage', description='Whether to return images.
- Y: Return
- N: Do not return', example='N'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure its uniqueness.', example='djs20d***9-dsskc'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult', description='Whether to return anti-fraud detection results.', example='Y'),
  transactionId?: string(name='TransactionId', description='Authentication ID.', example='4ab0b***cbde97'),
}

model CheckResultResponseBody = {
  code?: string(name='Code', description='Return code.', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    ekycResult?: string(name='EkycResult', description='Authentication result.', example='**'),
    extBasicInfo?: string(name='ExtBasicInfo', description='Extended basic information.', example='**'),
    extFaceInfo?: string(name='ExtFaceInfo', description='Face information.', example='**'),
    extIdInfo?: string(name='ExtIdInfo', description='ID information.', example='**'),
    extInfo?: string(name='ExtInfo', description='Extended information', example='{}'),
    extRiskInfo?: string(name='ExtRiskInfo', description='Risk information.', example='**'),
    passed?: string(name='Passed', description='Whether the authentication is passed.

- Y: Passed
- N: Not passed', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='***'),
  }(name='Result', description='Return result.'),
}

model CheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResultResponseBody(name='body'),
}

/**
 * @summary Result Query
 *
 * @param request CheckResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckResultResponse
 */
async function checkResultWithOptions(request: CheckResultRequest, runtime: Util.RuntimeOptions): CheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extraImageControlList)) {
    query['ExtraImageControlList'] = request.extraImageControlList;
  }
  if (!Util.isUnset(request.isReturnImage)) {
    query['IsReturnImage'] = request.isReturnImage;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.returnFiveCategorySpoofResult)) {
    query['ReturnFiveCategorySpoofResult'] = request.returnFiveCategorySpoofResult;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Result Query
 *
 * @param request CheckResultRequest
 * @return CheckResultResponse
 */
async function checkResult(request: CheckResultRequest): CheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResultWithOptions(request, runtime);
}

model CheckVerifyLogRequest {
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent problem localization and troubleshooting. Supports a combination of letters and numbers, with a maximum length of 32 characters. Ensure uniqueness.', example='e0c34a***353888'),
  transactionId?: string(name='TransactionId', description='The unique identifier for the entire authentication process. This value needs to be obtained by calling Initialize.', example='hksb7ba1b*********015d694361bee4'),
}

model CheckVerifyLogResponseBody = {
  code?: string(name='Code', description='Backend error code.', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    extInfo?: string(name='ExtInfo', description='Extended information', example='{}'),
    interruptPage?: string(name='InterruptPage', description='Records the last page where the authentication was interrupted.

- Page not started
- OCR guide page
- OCR camera authorization
- OCR document capture page
- OCR recognition loading
- OCR recognition result editing page
- OCR recognition result editing loading
- Liveness detection guide page
- Liveness detection camera authorization page
- Liveness detection page
- Liveness detection fallback page
- Liveness detection retry
- Liveness detection loading', example='OCR拍摄证件页面'),
    interruptPageEn?: string(name='InterruptPageEn'),
    logInfo?: [ string ](name='LogInfo', description='SDK operation log details'),
    logInfoEn?: [ string ](name='LogInfoEn'),
    logStatisticsInfo?: string(name='LogStatisticsInfo', description='SDK operation log statistics details', example='{
          "faceOverTimes": 0,
          "hasFaceOverTimes": false,
          "hasFacePermissionRefuse": false,
          "hasOcrEdit": true,
          "hasOcrEditOverTimes": false,
          "hasOcrOverTimes": true,
          "hasOcrPermissionRefuse": false,
          "ocrEditOverTimes": 0,
          "ocrEditTimes": 1,
          "ocrOverTimes": 1,
          "pageStayTimeInfo": {
            "LOADING": "1615",
            "OCR_SCAN": "37446",
            "OCR_RESULT": "1338",
            "FACE": "8707"
          }
        }'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code', example='200'),
    verifyErrorCode?: string(name='VerifyErrorCode', description='Authentication interruption error codes

- 1000: The user completed the face scanning process, and the suggested authentication result is pass
- 1001: The user completed the face scanning process, and the suggested authentication result is fail
- 1002: System error
- 1003: SDK initialization failed, please check if the client time is correct
- 1004: Camera permission error
- 1005: Network error
- 1006: User exited
- 1007: Invalid TransactionId
- 1009: Client timestamp error
- 1011: Incorrect document type submitted
- 1012: Missing or format validation failure of key information on the recognized document
- 1013: Poor image quality
- 1014: Exceeded the upper limit of errors
- 1015: Android system version too low
- 1016: Camera permission not obtained
- 9999: Suspected authentication process interruption', example='1001'),
    verifyStatus?: string(name='VerifyStatus', description='Authentication status, values:

- 0: finished (authentication completed)
- 1: unfinished (authentication interrupted)
- 2: notstart (authentication not started)', example='1'),
  }(name='Result', description='Return result.'),
}

model CheckVerifyLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckVerifyLogResponseBody(name='body'),
}

/**
 * @summary Authentication Log Query Interface
 *
 * @param request CheckVerifyLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckVerifyLogResponse
 */
async function checkVerifyLogWithOptions(request: CheckVerifyLogRequest, runtime: Util.RuntimeOptions): CheckVerifyLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.merchantBizId)) {
    body['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.transactionId)) {
    body['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckVerifyLog',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Authentication Log Query Interface
 *
 * @param request CheckVerifyLogRequest
 * @return CheckVerifyLogResponse
 */
async function checkVerifyLog(request: CheckVerifyLogRequest): CheckVerifyLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkVerifyLogWithOptions(request, runtime);
}

model CredentialRecognitionIntlRequest {
  credentialOcrPictureBase64?: string(name='CredentialOcrPictureBase64', example='base64'),
  credentialOcrPictureUrl?: string(name='CredentialOcrPictureUrl', example='https://***'),
  docType?: string(name='DocType', description='This parameter is required.', example='01'),
  fraudCheck?: string(name='FraudCheck', description='This parameter is required.', example='true'),
  ocrArea?: string(name='OcrArea', description='This parameter is required.', example='0101'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='CREDENTIAL_RECOGNITION'),
}

model CredentialRecognitionIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', example='{
  "address": "",
  "name":""
}'),
    subCode?: string(name='SubCode', example='200'),
    success?: string(name='Success', example='S'),
  }(name='Result'),
}

model CredentialRecognitionIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialRecognitionIntlResponseBody(name='body'),
}

/**
 * @summary 凭证识别
 *
 * @param request CredentialRecognitionIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CredentialRecognitionIntlResponse
 */
async function credentialRecognitionIntlWithOptions(request: CredentialRecognitionIntlRequest, runtime: Util.RuntimeOptions): CredentialRecognitionIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.fraudCheck)) {
    query['FraudCheck'] = request.fraudCheck;
  }
  if (!Util.isUnset(request.ocrArea)) {
    query['OcrArea'] = request.ocrArea;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.credentialOcrPictureBase64)) {
    body['CredentialOcrPictureBase64'] = request.credentialOcrPictureBase64;
  }
  if (!Util.isUnset(request.credentialOcrPictureUrl)) {
    body['CredentialOcrPictureUrl'] = request.credentialOcrPictureUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CredentialRecognitionIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 凭证识别
 *
 * @param request CredentialRecognitionIntlRequest
 * @return CredentialRecognitionIntlResponse
 */
async function credentialRecognitionIntl(request: CredentialRecognitionIntlRequest): CredentialRecognitionIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return credentialRecognitionIntlWithOptions(request, runtime);
}

model CredentialVerifyIntlRequest {
  credName?: string(name='CredName', description='Credential name (numeric code):

- Starting with 03: Enterprise Qualification
  - 0301: Mainland China Business License
- Starting with 04, Transaction Voucher
  - 0401: Bank Statement
  - 0402: Pay Slip
  - 0403: Utility Bill
  - 0405: Credit Card Statement
  - 0499: Others

This parameter is required.', example='0301'),
  credType?: string(name='CredType', description='Credential type:

- 03: Enterprise Qualification
- 04: Transaction Voucher

This parameter is required.', example='03'),
  imageFile?: string(name='ImageFile', description='Image input stream.
> Choose either ImageUrl or ImageFile.', example='无'),
  imageUrl?: string(name='ImageUrl', description='The URL of the image.
> Choose either ImageUrl or ImageFile.', example='https://oss-bj01.avic.com/eavic-prod-commodity/pic/commodity/94677ee6-1067-4287-8ff4-6e030ef3a5a8.jpg'),
  productCode?: string(name='ProductCode', description='Invocation mode:
- ANTI_FAKE_CHECK: Image quality and tampering detection.

This parameter is required.', example='取值：ANTI_FAKE_CHECK'),
}

model CredentialVerifyIntlAdvanceRequest {
  credName?: string(name='CredName', description='Credential name (numeric code):

- Starting with 03: Enterprise Qualification
  - 0301: Mainland China Business License
- Starting with 04, Transaction Voucher
  - 0401: Bank Statement
  - 0402: Pay Slip
  - 0403: Utility Bill
  - 0405: Credit Card Statement
  - 0499: Others

This parameter is required.', example='0301'),
  credType?: string(name='CredType', description='Credential type:

- 03: Enterprise Qualification
- 04: Transaction Voucher

This parameter is required.', example='03'),
  imageFileObject?: readable(name='ImageFile', description='Image input stream.
> Choose either ImageUrl or ImageFile.', example='无'),
  imageUrl?: string(name='ImageUrl', description='The URL of the image.
> Choose either ImageUrl or ImageFile.', example='https://oss-bj01.avic.com/eavic-prod-commodity/pic/commodity/94677ee6-1067-4287-8ff4-6e030ef3a5a8.jpg'),
  productCode?: string(name='ProductCode', description='Invocation mode:
- ANTI_FAKE_CHECK: Image quality and tampering detection.

This parameter is required.', example='取值：ANTI_FAKE_CHECK'),
}

model CredentialVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    materialInfo?: string(name='MaterialInfo', description='Other information in JSON format.', example='{
 "sameBackgroundDetail": {
 // 相似背景对于的原始图请求RequestId
 "originalRequestId": "130A2C10-B9EE-4D84-88E3-5384FF03****";
 // 相似背景对于的原始图请求商户ID 
 "originalMerchantId": "xxxxxxxx" 
 }
}'),
    result?: string(name='Result', description='Risk result:

- **0**: Low risk
- **1**: High risk
- **2**: Suspicious', example='1'),
    riskScore?: map[string]string(name='RiskScore', description='Risk score map'),
    riskTag?: string(name='RiskTag', description='Risk tags, separated by commas (,). Includes:

- PS: Image manipulation (Photoshop)
- SCREEN_PHOTO: Screen recapture
- SCREENSHOT: Screenshot
- ORIGINAL_PHOTO: Not original image', example='PS'),
  }(name='ResultObject', description='Returned result information.'),
}

model CredentialVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Credential Verification
 *
 * @description Input credential image information, perform image quality, tampering, and forgery detection, and return the detection results.
 *
 * @param request CredentialVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CredentialVerifyIntlResponse
 */
async function credentialVerifyIntlWithOptions(request: CredentialVerifyIntlRequest, runtime: Util.RuntimeOptions): CredentialVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.credName)) {
    query['CredName'] = request.credName;
  }
  if (!Util.isUnset(request.credType)) {
    query['CredType'] = request.credType;
  }
  if (!Util.isUnset(request.imageUrl)) {
    query['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageFile)) {
    body['ImageFile'] = request.imageFile;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CredentialVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Credential Verification
 *
 * @description Input credential image information, perform image quality, tampering, and forgery detection, and return the detection results.
 *
 * @param request CredentialVerifyIntlRequest
 * @return CredentialVerifyIntlResponse
 */
async function credentialVerifyIntl(request: CredentialVerifyIntlRequest): CredentialVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return credentialVerifyIntlWithOptions(request, runtime);
}

async function credentialVerifyIntlAdvance(request: CredentialVerifyIntlAdvanceRequest, runtime: Util.RuntimeOptions): CredentialVerifyIntlResponse {
  // Step 0: init client
  var credentialModel: Credential.CredentialModel = null;
  if (Util.isUnset(@credential)) {
    throw {
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'Cloudauth-intl',
    RegionId = @regionId,
  };
  var authReq = new OpenApi.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApi.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new FileForm.FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var credentialVerifyIntlReq = new CredentialVerifyIntlRequest{};
  OpenApiUtil.convert(request, credentialVerifyIntlReq);

  if(!Util.isUnset(request.imageFileObject)) {
    var tmpResp0: any = authClient.callApi(authParams, authReq, runtime);
    authResponse = Util.assertAsMap(tmpResp0);
    tmpBody = Util.assertAsMap(authResponse['body']);
    useAccelerate = Util.assertAsBoolean(tmpBody['UseAccelerate']);
    authResponseBody = Util.stringifyMapValue(tmpBody);
    fileObj = new FileForm.FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageFileObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    credentialVerifyIntlReq.imageFile = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var credentialVerifyIntlResp = credentialVerifyIntlWithOptions(credentialVerifyIntlReq, runtime);
  return credentialVerifyIntlResp;
}

model DeepfakeDetectIntlRequest {
  faceBase64?: string(name='FaceBase64', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceInputType?: string(name='FaceInputType', example='IMAGE'),
  faceUrl?: string(name='FaceUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  merchantBizId?: string(name='MerchantBizId', description='This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c******'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='FACE_DEEPFAKE'),
  sceneCode?: string(name='SceneCode', example='1234567890'),
}

model DeepfakeDetectIntlResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    result?: string(name='Result', example='1'),
    riskScore?: map[string]string(name='RiskScore'),
    riskTag?: string(name='RiskTag', example='SuspectDeepForgery,SuspectWarterMark'),
  }(name='ResultObject'),
}

model DeepfakeDetectIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeDetectIntlResponseBody(name='body'),
}

/**
 * @summary 人脸凭证核验
 *
 * @param request DeepfakeDetectIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeepfakeDetectIntlResponse
 */
async function deepfakeDetectIntlWithOptions(request: DeepfakeDetectIntlRequest, runtime: Util.RuntimeOptions): DeepfakeDetectIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.faceInputType)) {
    query['FaceInputType'] = request.faceInputType;
  }
  if (!Util.isUnset(request.faceUrl)) {
    query['FaceUrl'] = request.faceUrl;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.faceBase64)) {
    body['FaceBase64'] = request.faceBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeepfakeDetectIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸凭证核验
 *
 * @param request DeepfakeDetectIntlRequest
 * @return DeepfakeDetectIntlResponse
 */
async function deepfakeDetectIntl(request: DeepfakeDetectIntlRequest): DeepfakeDetectIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deepfakeDetectIntlWithOptions(request, runtime);
}

model DeleteVerifyResultRequest {
  deleteAfterQuery?: string(name='DeleteAfterQuery', description='Whether to depend on the query interface when deleting data', example='Y / N'),
  deleteType?: string(name='DeleteType', description='Type of data to be deleted', example='Img / Text / All'),
  transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='4ab0b***cbde97'),
}

model DeleteVerifyResultResponseBody = {
  code?: string(name='Code', description='Return code', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of this request', example='4EB35****87EBA1'),
  result?: {
    deleteResult?: string(name='DeleteResult', description='Deletion result. Y indicates successful deletion, N indicates failed deletion', example='Y/N'),
    transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='4ab0b***cbde97'),
  }(name='Result', description='Return result'),
}

model DeleteVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVerifyResultResponseBody(name='body'),
}

/**
 * @summary Delete user authentication record results
 *
 * @param request DeleteVerifyResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVerifyResultResponse
 */
async function deleteVerifyResultWithOptions(request: DeleteVerifyResultRequest, runtime: Util.RuntimeOptions): DeleteVerifyResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteAfterQuery)) {
    query['DeleteAfterQuery'] = request.deleteAfterQuery;
  }
  if (!Util.isUnset(request.deleteType)) {
    query['DeleteType'] = request.deleteType;
  }
  if (!Util.isUnset(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVerifyResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete user authentication record results
 *
 * @param request DeleteVerifyResultRequest
 * @return DeleteVerifyResultResponse
 */
async function deleteVerifyResult(request: DeleteVerifyResultRequest): DeleteVerifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVerifyResultWithOptions(request, runtime);
}

model DocOcrRequest {
  cardSide?: string(name='CardSide', description='CardSide', example='0'),
  docType?: string(name='DocType', description='Document type', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', description='Whether to perform ID face quality detection
- T: Indicates that detection is required
- F: Indicates that detection is not required (default F)', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Base64 of the front side of the document image', example='base64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='URL of the front side of the document image', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idThreshold?: string(name='IdThreshold', description='IdThreshold', example='0'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure uniqueness.', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', description='A custom user ID in the business, please keep it unique.', example='123456789'),
  ocr?: string(name='Ocr', description='Whether to perform document OCR
- T: Indicates that document OCR is required
- F: Indicates that document OCR is not required', example='T'),
  productCode?: string(name='ProductCode', description='Product code', example='产品方案类型ID_OCR_MIN'),
  spoof?: string(name='Spoof', description='Whether to enable anti-counterfeiting detection
- T: Indicates that anti-counterfeiting is enabled
- F: Indicates that anti-counterfeiting is disabled', example='F'),
}

model DocOcrResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', description='Card and document recognition result	Only returned when the interface response is successful', example='{
  "idFaceQualityScore": 98.0
  "ocrIdInfo": {
    "expiryDate": "",
    "originOfIssue": "公安部出入境管理局",
    "englishName": "LI SI",
    "sex": "男",
    "name": "李四",
    "idNumber": "H11111112",
    "issueDate": "2013-01-02",
    "birthDate": "1990-02-21"
  },
  "spoofInfo": {
    "spoofResult": "Y",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed
- N: Not passed', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Return result'),
}

model DocOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrResponseBody(name='body'),
}

/**
 * @summary Card and document OCR pure server-side
 *
 * @param request DocOcrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocOcrResponse
 */
async function docOcrWithOptions(request: DocOcrRequest, runtime: Util.RuntimeOptions): DocOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cardSide)) {
    query['CardSide'] = request.cardSide;
  }
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.idThreshold)) {
    query['IdThreshold'] = request.idThreshold;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DocOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Card and document OCR pure server-side
 *
 * @param request DocOcrRequest
 * @return DocOcrResponse
 */
async function docOcr(request: DocOcrRequest): DocOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return docOcrWithOptions(request, runtime);
}

model DocOcrMaxRequest {
  docPage?: string(name='DocPage'),
  docType?: string(name='DocType', example='CNSSC01'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', example='base64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://***********.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idSpoof?: string(name='IdSpoof'),
  idThreshold?: string(name='IdThreshold', example='0'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c******'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  ocrModel?: string(name='OcrModel', example='0'),
  productCode?: string(name='ProductCode', example='ID_OCR_MAX'),
  prompt?: string(name='Prompt'),
  sceneCode?: string(name='SceneCode', example='1234567890'),
  spoof?: string(name='Spoof', example='F'),
}

model DocOcrMaxResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', example='{
  "docType": "PPTW01",
  "ocrIdInfo": {
    "passportNo": "36*******",
    "expiryDate": "2032/02/10",
    "placeOfBirth": "TAIWAN",
    "surname": "CHEN",
    "givenname": "LIN-CHUN",
    "countryCode": "TWN",
    "sex": "F",
    "personalNo": "S22********",
    "issueDate": "2022/02/10",
    "birthDate": "1988/10/04"
  }
}'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='hk573be80f944d95ac812e0*******a8'),
  }(name='Result'),
}

model DocOcrMaxResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrMaxResponseBody(name='body'),
}

/**
 * @summary 全球证件ocr识别接口
 *
 * @param request DocOcrMaxRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocOcrMaxResponse
 */
async function docOcrMaxWithOptions(request: DocOcrMaxRequest, runtime: Util.RuntimeOptions): DocOcrMaxResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.docPage)) {
    body['DocPage'] = request.docPage;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    body['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.idSpoof)) {
    body['IdSpoof'] = request.idSpoof;
  }
  if (!Util.isUnset(request.idThreshold)) {
    body['IdThreshold'] = request.idThreshold;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    body['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    body['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.ocrModel)) {
    body['OcrModel'] = request.ocrModel;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.sceneCode)) {
    body['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.spoof)) {
    body['Spoof'] = request.spoof;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DocOcrMax',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 全球证件ocr识别接口
 *
 * @param request DocOcrMaxRequest
 * @return DocOcrMaxResponse
 */
async function docOcrMax(request: DocOcrMaxRequest): DocOcrMaxResponse {
  var runtime = new Util.RuntimeOptions{};
  return docOcrMaxWithOptions(request, runtime);
}

model EkycVerifyRequest {
  authorize?: string(name='Authorize', example='T'),
  crop?: string(name='Crop', example='F'),
  docName?: string(name='DocName'),
  docNo?: string(name='DocNo', example='410***************'),
  docType?: string(name='DocType', example='00000001'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idThreshold?: string(name='IdThreshold'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', example='123456'),
  productCode?: string(name='ProductCode', example='eKYC_MIN'),
}

model EkycVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extFaceInfo?: string(name='ExtFaceInfo', example='{
"faceAttack": "N",
"faceComparisonScore": 52.57,
"facePassed": "N",
"authorityComparisonScore": 80.39
}'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
  }(name='Result'),
}

model EkycVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EkycVerifyResponseBody(name='body'),
}

/**
 * @summary ekyc纯服务端接口
 *
 * @param request EkycVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EkycVerifyResponse
 */
async function ekycVerifyWithOptions(request: EkycVerifyRequest, runtime: Util.RuntimeOptions): EkycVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.docName)) {
    query['DocName'] = request.docName;
  }
  if (!Util.isUnset(request.docNo)) {
    query['DocNo'] = request.docNo;
  }
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!Util.isUnset(request.idThreshold)) {
    query['IdThreshold'] = request.idThreshold;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  if (!Util.isUnset(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EkycVerify',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ekyc纯服务端接口
 *
 * @param request EkycVerifyRequest
 * @return EkycVerifyResponse
 */
async function ekycVerify(request: EkycVerifyRequest): EkycVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return ekycVerifyWithOptions(request, runtime);
}

model FaceCompareRequest {
  facePictureQualityCheck?: string(name='FacePictureQualityCheck', example='N'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  sourceFacePicture?: string(name='SourceFacePicture'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', example='https://***face1.jpeg'),
  targetFacePicture?: string(name='TargetFacePicture'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://***face2.jpeg'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', example='98'),
    passed?: string(name='Passed', example='Y'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceCompareResponseBody(name='body'),
}

/**
 * @summary 人脸比对
 *
 * @param request FaceCompareRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceCompareResponse
 */
async function faceCompareWithOptions(request: FaceCompareRequest, runtime: Util.RuntimeOptions): FaceCompareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.facePictureQualityCheck)) {
    query['FacePictureQualityCheck'] = request.facePictureQualityCheck;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.sourceFacePictureUrl)) {
    query['SourceFacePictureUrl'] = request.sourceFacePictureUrl;
  }
  if (!Util.isUnset(request.targetFacePictureUrl)) {
    query['TargetFacePictureUrl'] = request.targetFacePictureUrl;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sourceFacePicture)) {
    body['SourceFacePicture'] = request.sourceFacePicture;
  }
  if (!Util.isUnset(request.targetFacePicture)) {
    body['TargetFacePicture'] = request.targetFacePicture;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FaceCompare',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸比对
 *
 * @param request FaceCompareRequest
 * @return FaceCompareResponse
 */
async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceCompareWithOptions(request, runtime);
}

model FaceGuardRiskRequest {
  bizId?: string(name='BizId', example='LMALL20******001'),
  deviceToken?: string(name='DeviceToken', example='Tk9SSUQuMS*****************ZDNmNWY5NzQxOW1o'),
  merchantBizId?: string(name='MerchantBizId', example='0c83ce0101d34eff886b1f7d1cdef67f'),
  productCode?: string(name='ProductCode', example='FACE_GUARD'),
}

model FaceGuardRiskResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='595E387B-3F0E-5C52-BD02-8EFE63D41FD5'),
  result?: {
    guardRiskScore?: double(name='GuardRiskScore'),
    riskExtends?: string(name='RiskExtends'),
    riskTags?: string(name='RiskTags', example='ROOT,VPN,HOOK'),
    transactionId?: string(name='TransactionId', example='hk573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceGuardRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceGuardRiskResponseBody(name='body'),
}

/**
 * @summary 国际人脸保镖纯服务端接口
 *
 * @param request FaceGuardRiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceGuardRiskResponse
 */
async function faceGuardRiskWithOptions(request: FaceGuardRiskRequest, runtime: Util.RuntimeOptions): FaceGuardRiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.deviceToken)) {
    query['DeviceToken'] = request.deviceToken;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FaceGuardRisk',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际人脸保镖纯服务端接口
 *
 * @param request FaceGuardRiskRequest
 * @return FaceGuardRiskResponse
 */
async function faceGuardRisk(request: FaceGuardRiskRequest): FaceGuardRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceGuardRiskWithOptions(request, runtime);
}

model FaceLivenessRequest {
  crop?: string(name='Crop', example='T'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  faceQuality?: string(name='FaceQuality', example='T'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', example='123456789'),
  occlusion?: string(name='Occlusion', example='T'),
  productCode?: string(name='ProductCode', example='FACE_LIVENESS_MIN'),
}

model FaceLivenessResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='42EA58CA-5DF4-55D5-82C4-5E7A40DA62BA'),
  result?: {
    extFaceInfo?: {
      faceAge?: int32(name='FaceAge'),
      faceAttack?: string(name='FaceAttack', example='Y'),
      faceGender?: string(name='FaceGender'),
      faceQualityScore?: double(name='FaceQualityScore', example='87.19'),
      occlusionResult?: string(name='OcclusionResult', example='Y'),
    }(name='ExtFaceInfo'),
    passed?: string(name='Passed', example='N'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceLivenessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceLivenessResponseBody(name='body'),
}

/**
 * @summary 静默活体API 纯服务端
 *
 * @param request FaceLivenessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceLivenessResponse
 */
async function faceLivenessWithOptions(request: FaceLivenessRequest, runtime: Util.RuntimeOptions): FaceLivenessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.faceQuality)) {
    query['FaceQuality'] = request.faceQuality;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.occlusion)) {
    query['Occlusion'] = request.occlusion;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FaceLiveness',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 静默活体API 纯服务端
 *
 * @param request FaceLivenessRequest
 * @return FaceLivenessResponse
 */
async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  var runtime = new Util.RuntimeOptions{};
  return faceLivenessWithOptions(request, runtime);
}

model FraudResultCallBackRequest {
  certifyId?: string(name='CertifyId', example='shs2b27333914876c01de4cb22f5841f'),
  extParams?: string(name='ExtParams'),
  resultCode?: string(name='ResultCode', example='PASS'),
  verifyDeployEnv?: string(name='VerifyDeployEnv', example='production'),
}

model FraudResultCallBackResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model FraudResultCallBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FraudResultCallBackResponseBody(name='body'),
}

/**
 * @summary 防伪回调接口
 *
 * @param request FraudResultCallBackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FraudResultCallBackResponse
 */
async function fraudResultCallBackWithOptions(request: FraudResultCallBackRequest, runtime: Util.RuntimeOptions): FraudResultCallBackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certifyId)) {
    query['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!Util.isUnset(request.resultCode)) {
    query['ResultCode'] = request.resultCode;
  }
  if (!Util.isUnset(request.verifyDeployEnv)) {
    query['VerifyDeployEnv'] = request.verifyDeployEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FraudResultCallBack',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 防伪回调接口
 *
 * @param request FraudResultCallBackRequest
 * @return FraudResultCallBackResponse
 */
async function fraudResultCallBack(request: FraudResultCallBackRequest): FraudResultCallBackResponse {
  var runtime = new Util.RuntimeOptions{};
  return fraudResultCallBackWithOptions(request, runtime);
}

model Id2MetaPeriodVerifyIntlRequest {
  docName?: string(name='DocName', description='This parameter is required.'),
  docNo?: string(name='DocNo', description='This parameter is required.', example='411xxxxxxxxxxx0001'),
  docType?: string(name='DocType', description='This parameter is required.', example='​00000001'),
  merchantBizId?: string(name='MerchantBizId', description='This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c35****'),
  merchantUserId?: string(name='MerchantUserId', example='1234567890'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='eKYC_Date_MIN'),
  sceneCode?: string(name='SceneCode', example='1234567890'),
  validityEndDate?: string(name='ValidityEndDate', description='This parameter is required.', example='20301001'),
  validityStartDate?: string(name='ValidityStartDate', description='This parameter is required.', example='20201001'),
}

model Id2MetaPeriodVerifyIntlResponseBody = {
  code?: string(name='Code', example='success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='7B97D932-7FF5-517D-BF39-7CA1BEE3CDD9'),
  result?: {
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
  }(name='Result'),
}

model Id2MetaPeriodVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaPeriodVerifyIntlResponseBody(name='body'),
}

/**
 * @summary 身份二要素有效期核验
 *
 * @param request Id2MetaPeriodVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Id2MetaPeriodVerifyIntlResponse
 */
async function id2MetaPeriodVerifyIntlWithOptions(request: Id2MetaPeriodVerifyIntlRequest, runtime: Util.RuntimeOptions): Id2MetaPeriodVerifyIntlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.docName)) {
    body['DocName'] = request.docName;
  }
  if (!Util.isUnset(request.docNo)) {
    body['DocNo'] = request.docNo;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    body['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    body['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneCode)) {
    body['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.validityEndDate)) {
    body['ValidityEndDate'] = request.validityEndDate;
  }
  if (!Util.isUnset(request.validityStartDate)) {
    body['ValidityStartDate'] = request.validityStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Id2MetaPeriodVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 身份二要素有效期核验
 *
 * @param request Id2MetaPeriodVerifyIntlRequest
 * @return Id2MetaPeriodVerifyIntlResponse
 */
async function id2MetaPeriodVerifyIntl(request: Id2MetaPeriodVerifyIntlRequest): Id2MetaPeriodVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return id2MetaPeriodVerifyIntlWithOptions(request, runtime);
}

model Id2MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211'),
  paramType?: string(name='ParamType', example='normal'),
  productCode?: string(name='ProductCode', example='ID_2META'),
  userName?: string(name='UserName'),
}

model Id2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='EFA11401-C961-5E89-A2D3-BF9883E5CC3D'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='Result'),
}

model Id2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary 身份二要素国际版接口
 *
 * @param request Id2MetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Id2MetaVerifyIntlResponse
 */
async function id2MetaVerifyIntlWithOptions(request: Id2MetaVerifyIntlRequest, runtime: Util.RuntimeOptions): Id2MetaVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Id2MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 身份二要素国际版接口
 *
 * @param request Id2MetaVerifyIntlRequest
 * @return Id2MetaVerifyIntlResponse
 */
async function id2MetaVerifyIntl(request: Id2MetaVerifyIntlRequest): Id2MetaVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return id2MetaVerifyIntlWithOptions(request, runtime);
}

model InitializeRequest {
  appQualityCheck?: string(name='AppQualityCheck'),
  authorize?: string(name='Authorize'),
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  chameleonFrameEnable?: string(name='ChameleonFrameEnable'),
  crop?: string(name='Crop', example='*'),
  dateOfBirth?: string(name='DateOfBirth'),
  dateOfExpiry?: string(name='DateOfExpiry'),
  docName?: string(name='DocName'),
  docNo?: string(name='DocNo'),
  docPageConfig?: [ string ](name='DocPageConfig'),
  docScanMode?: string(name='DocScanMode'),
  docType?: string(name='DocType', example='01000000'),
  docVideo?: string(name='DocVideo'),
  documentNumber?: string(name='DocumentNumber'),
  editOcrResult?: string(name='EditOcrResult'),
  experienceCode?: string(name='ExperienceCode'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='***'),
  idFaceQuality?: string(name='IdFaceQuality', example='*'),
  idSpoof?: string(name='IdSpoof', example='Y'),
  idThreshold?: string(name='IdThreshold'),
  languageConfig?: string(name='LanguageConfig'),
  MRTDInput?: string(name='MRTDInput'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543'),
  metaInfo?: string(name='MetaInfo', example='{\\\\"bioMetaInfo\\\\":\\\\"4.1.0:2916352,0\\\\",\\\\"deviceType\\\\":\\\\"web\\\\",\\\\"ua\\\\":\\\\"Mozilla/5.0 (Macintosh'),
  model?: string(name='Model'),
  ocr?: string(name='Ocr', description='OCR。', example='*'),
  pages?: string(name='Pages', example='1'),
  procedurePriority?: string(name='ProcedurePriority'),
  productCode?: string(name='ProductCode', example='eKYC'),
  productFlow?: string(name='ProductFlow'),
  returnUrl?: string(name='ReturnUrl', example='http*****'),
  sceneCode?: string(name='SceneCode', example='PAY**'),
  securityLevel?: string(name='SecurityLevel'),
  showAlbumIcon?: string(name='ShowAlbumIcon'),
  showGuidePage?: string(name='ShowGuidePage'),
  showOcrResult?: string(name='ShowOcrResult'),
  styleConfig?: string(name='StyleConfig'),
  useNFC?: string(name='UseNFC'),
}

model InitializeShrinkRequest {
  appQualityCheck?: string(name='AppQualityCheck'),
  authorize?: string(name='Authorize'),
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  chameleonFrameEnable?: string(name='ChameleonFrameEnable'),
  crop?: string(name='Crop', example='*'),
  dateOfBirth?: string(name='DateOfBirth'),
  dateOfExpiry?: string(name='DateOfExpiry'),
  docName?: string(name='DocName'),
  docNo?: string(name='DocNo'),
  docPageConfigShrink?: string(name='DocPageConfig'),
  docScanMode?: string(name='DocScanMode'),
  docType?: string(name='DocType', example='01000000'),
  docVideo?: string(name='DocVideo'),
  documentNumber?: string(name='DocumentNumber'),
  editOcrResult?: string(name='EditOcrResult'),
  experienceCode?: string(name='ExperienceCode'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='***'),
  idFaceQuality?: string(name='IdFaceQuality', example='*'),
  idSpoof?: string(name='IdSpoof', example='Y'),
  idThreshold?: string(name='IdThreshold'),
  languageConfig?: string(name='LanguageConfig'),
  MRTDInput?: string(name='MRTDInput'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543'),
  metaInfo?: string(name='MetaInfo', example='{\\\\"bioMetaInfo\\\\":\\\\"4.1.0:2916352,0\\\\",\\\\"deviceType\\\\":\\\\"web\\\\",\\\\"ua\\\\":\\\\"Mozilla/5.0 (Macintosh'),
  model?: string(name='Model'),
  ocr?: string(name='Ocr', description='OCR。', example='*'),
  pages?: string(name='Pages', example='1'),
  procedurePriority?: string(name='ProcedurePriority'),
  productCode?: string(name='ProductCode', example='eKYC'),
  productFlow?: string(name='ProductFlow'),
  returnUrl?: string(name='ReturnUrl', example='http*****'),
  sceneCode?: string(name='SceneCode', example='PAY**'),
  securityLevel?: string(name='SecurityLevel'),
  showAlbumIcon?: string(name='ShowAlbumIcon'),
  showGuidePage?: string(name='ShowGuidePage'),
  showOcrResult?: string(name='ShowOcrResult'),
  styleConfig?: string(name='StyleConfig'),
  useNFC?: string(name='UseNFC'),
}

model InitializeResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    clientCfg?: string(name='ClientCfg', example='***'),
    protocol?: string(name='Protocol'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
    transactionUrl?: string(name='TransactionUrl', example='http****'),
  }(name='Result'),
}

model InitializeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeResponseBody(name='body'),
}

/**
 * @summary 认证初始化
 *
 * @param tmpReq InitializeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitializeResponse
 */
async function initializeWithOptions(tmpReq: InitializeRequest, runtime: Util.RuntimeOptions): InitializeResponse {
  Util.validateModel(tmpReq);
  var request = new InitializeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docPageConfig)) {
    request.docPageConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docPageConfig, 'DocPageConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appQualityCheck)) {
    query['AppQualityCheck'] = request.appQualityCheck;
  }
  if (!Util.isUnset(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!Util.isUnset(request.callbackToken)) {
    query['CallbackToken'] = request.callbackToken;
  }
  if (!Util.isUnset(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.chameleonFrameEnable)) {
    query['ChameleonFrameEnable'] = request.chameleonFrameEnable;
  }
  if (!Util.isUnset(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.dateOfBirth)) {
    query['DateOfBirth'] = request.dateOfBirth;
  }
  if (!Util.isUnset(request.dateOfExpiry)) {
    query['DateOfExpiry'] = request.dateOfExpiry;
  }
  if (!Util.isUnset(request.docName)) {
    query['DocName'] = request.docName;
  }
  if (!Util.isUnset(request.docNo)) {
    query['DocNo'] = request.docNo;
  }
  if (!Util.isUnset(request.docPageConfigShrink)) {
    query['DocPageConfig'] = request.docPageConfigShrink;
  }
  if (!Util.isUnset(request.docScanMode)) {
    query['DocScanMode'] = request.docScanMode;
  }
  if (!Util.isUnset(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.docVideo)) {
    query['DocVideo'] = request.docVideo;
  }
  if (!Util.isUnset(request.documentNumber)) {
    query['DocumentNumber'] = request.documentNumber;
  }
  if (!Util.isUnset(request.editOcrResult)) {
    query['EditOcrResult'] = request.editOcrResult;
  }
  if (!Util.isUnset(request.experienceCode)) {
    query['ExperienceCode'] = request.experienceCode;
  }
  if (!Util.isUnset(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!Util.isUnset(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!Util.isUnset(request.idSpoof)) {
    query['IdSpoof'] = request.idSpoof;
  }
  if (!Util.isUnset(request.idThreshold)) {
    query['IdThreshold'] = request.idThreshold;
  }
  if (!Util.isUnset(request.languageConfig)) {
    query['LanguageConfig'] = request.languageConfig;
  }
  if (!Util.isUnset(request.MRTDInput)) {
    query['MRTDInput'] = request.MRTDInput;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.metaInfo)) {
    query['MetaInfo'] = request.metaInfo;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!Util.isUnset(request.pages)) {
    query['Pages'] = request.pages;
  }
  if (!Util.isUnset(request.procedurePriority)) {
    query['ProcedurePriority'] = request.procedurePriority;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productFlow)) {
    query['ProductFlow'] = request.productFlow;
  }
  if (!Util.isUnset(request.returnUrl)) {
    query['ReturnUrl'] = request.returnUrl;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.securityLevel)) {
    query['SecurityLevel'] = request.securityLevel;
  }
  if (!Util.isUnset(request.showAlbumIcon)) {
    query['ShowAlbumIcon'] = request.showAlbumIcon;
  }
  if (!Util.isUnset(request.showGuidePage)) {
    query['ShowGuidePage'] = request.showGuidePage;
  }
  if (!Util.isUnset(request.showOcrResult)) {
    query['ShowOcrResult'] = request.showOcrResult;
  }
  if (!Util.isUnset(request.styleConfig)) {
    query['StyleConfig'] = request.styleConfig;
  }
  if (!Util.isUnset(request.useNFC)) {
    query['UseNFC'] = request.useNFC;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Initialize',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 认证初始化
 *
 * @param request InitializeRequest
 * @return InitializeResponse
 */
async function initialize(request: InitializeRequest): InitializeResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeWithOptions(request, runtime);
}

model KeepaliveIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  result?: {
    result?: string(name='Result', example='SUCCESS'),
  }(name='Result'),
}

model KeepaliveIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KeepaliveIntlResponseBody(name='body'),
}

/**
 * @summary 客户端连接保持
 *
 * @param request KeepaliveIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return KeepaliveIntlResponse
 */
async function keepaliveIntlWithOptions(runtime: Util.RuntimeOptions): KeepaliveIntlResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'KeepaliveIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 客户端连接保持
 *
 * @return KeepaliveIntlResponse
 */
async function keepaliveIntl(): KeepaliveIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return keepaliveIntlWithOptions(runtime);
}

model Mobile2MetaVerifyIntlRequest {
  mobile?: string(name='Mobile', description='This parameter is required.', example='186****1234'),
  paramType?: string(name='ParamType', description='This parameter is required.', example='normal'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='MOBILE_2META'),
  userName?: string(name='UserName', description='This parameter is required.'),
}

model Mobile2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
  }(name='Result'),
}

model Mobile2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile2MetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary 手机号二要素核验API
 *
 * @param request Mobile2MetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Mobile2MetaVerifyIntlResponse
 */
async function mobile2MetaVerifyIntlWithOptions(request: Mobile2MetaVerifyIntlRequest, runtime: Util.RuntimeOptions): Mobile2MetaVerifyIntlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    body['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Mobile2MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 手机号二要素核验API
 *
 * @param request Mobile2MetaVerifyIntlRequest
 * @return Mobile2MetaVerifyIntlResponse
 */
async function mobile2MetaVerifyIntl(request: Mobile2MetaVerifyIntlRequest): Mobile2MetaVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobile2MetaVerifyIntlWithOptions(request, runtime);
}

model Mobile3MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', description='ID number

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='429001********8211'),
  mobile?: string(name='Mobile', description='Mobile phone number.

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='186****1234'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: unencrypted
- md5: md5 encrypted', example='normal'),
  productCode?: string(name='ProductCode', description='The product solution to be integrated, with a fixed value: MOBILE_3META', example='MOBILE_3META'),
  userName?: string(name='UserName', description='Name

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='张*'),
}

model Mobile3MetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='D241532C-4EE9-5A2A-A5A5-C1FD98CE2EDD'),
  result?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Verification consistent
- 2: Verification inconsistent
- 3: No record found', example='1'),
    ispName?: string(name='IspName', description='ISP name

- CMCC: China Mobile
- CUCC: China Unicom
- CTCC: China Telecom', example='CMCC'),
    subCode?: string(name='SubCode', description='Detailed verification results

- 101: Verification passed 
- 201: Mobile number and name do not match, mobile number and ID number do not match 
- 202: Mobile number and name match, but mobile number and ID number do not match 
- 203: Mobile number and ID number match, but mobile number and name do not match 
- 204: Other inconsistencies
- 301: No record found', example='101'),
  }(name='Result', description='Return result'),
}

model Mobile3MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary International Version of Mobile Three Elements API
 *
 * @param request Mobile3MetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Mobile3MetaVerifyIntlResponse
 */
async function mobile3MetaVerifyIntlWithOptions(request: Mobile3MetaVerifyIntlRequest, runtime: Util.RuntimeOptions): Mobile3MetaVerifyIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Mobile3MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary International Version of Mobile Three Elements API
 *
 * @param request Mobile3MetaVerifyIntlRequest
 * @return Mobile3MetaVerifyIntlResponse
 */
async function mobile3MetaVerifyIntl(request: Mobile3MetaVerifyIntlRequest): Mobile3MetaVerifyIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobile3MetaVerifyIntlWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, data: object): object {
  var form = Util.assertAsMap(data);
  var boundary = FileForm.getBoundary();
  var host = Util.assertAsString(form.host);
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = host,
    date = Util.getDateUTCString(),
    user-agent = Util.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = FileForm.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = Util.readAsString(__response.body);
  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
    respMap = XML.parseXml(bodyStr, null);
    var err = Util.assertAsMap(respMap.Error);
    throw {
      code = err.Code,
      message = err.Message,
      data = {
        httpCode = __response.statusCode,
        requestId = err.RequestId,
        hostId = err.HostId,
      }
    };
  }
  respMap = XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
