/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudauth-intl';
  @version = '2022-08-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CardOcrRequest {
  docType?: string(name='DocType', example='00000006', position='Query'),
  idFaceQuality?: string(name='IdFaceQuality', example='F', position='Query'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='123456789', position='Query'),
  ocr?: string(name='Ocr', example='T', position='Query'),
  productCode?: string(name='ProductCode', example='ID_OCR_MIN', position='Query'),
  spoof?: string(name='Spoof', example='F', position='Query'),
}

model CardOcrResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extCardInfo?: string(name='ExtCardInfo'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model CardOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CardOcrResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function cardOcr(request: CardOcrRequest): CardOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CardOcr', 'POST', '/', 'json', true, 'form', request);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList', example='***', position='Query'),
  isReturnImage?: string(name='IsReturnImage', example='N', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='djs20d***9-dsskc', position='Query'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult', example='Y', position='Query'),
  transactionId?: string(name='TransactionId', example='4ab0b***cbde97', position='Query'),
}

model CheckResultResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    ekycResult?: string(name='EkycResult', example='**'),
    extBasicInfo?: string(name='ExtBasicInfo', example='**'),
    extFaceInfo?: string(name='ExtFaceInfo', example='**'),
    extIdInfo?: string(name='ExtIdInfo', example='**'),
    extRiskInfo?: string(name='ExtRiskInfo', example='**'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='***'),
  }(name='Result'),
}

model CheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResultResponseBody(name='body'),
}

async function checkResult(request: CheckResultRequest): CheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVerifyResultRequest {
  deleteAfterQuery?: string(name='DeleteAfterQuery', example='Y / N', position='Query'),
  deleteType?: string(name='DeleteType', example='Img / Text / All', position='Query'),
  transactionId?: string(name='TransactionId', example='4ab0b***cbde97', position='Query'),
}

model DeleteVerifyResultResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  result?: {
    deleteResult?: string(name='DeleteResult', example='Y/N'),
    transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
  }(name='Result'),
}

model DeleteVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVerifyResultResponseBody(name='body'),
}

async function deleteVerifyResult(request: DeleteVerifyResultRequest): DeleteVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVerifyResult', 'POST', '/', 'json', false, 'json', request);
}

model DocOcrRequest {
  docType?: string(name='DocType', example='00000006', position='Query'),
  idFaceQuality?: string(name='IdFaceQuality', example='F', position='Query'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  idThreshold?: string(name='IdThreshold', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='dso9322***dsjsd22', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='123456789', position='Query'),
  ocr?: string(name='Ocr', example='T', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  spoof?: string(name='Spoof', example='F', position='Query'),
}

model DocOcrResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model DocOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrResponseBody(name='body'),
}

async function docOcr(request: DocOcrRequest): DocOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DocOcr', 'POST', '/', 'json', true, 'form', request);
}

model EkycVerifyRequest {
  authorize?: string(name='Authorize', example='T', position='Query'),
  crop?: string(name='Crop', example='F', position='Query'),
  docName?: string(name='DocName', position='Query'),
  docNo?: string(name='DocNo', example='410***************', position='Query'),
  docType?: string(name='DocType', example='00000001', position='Query'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  idThreshold?: string(name='IdThreshold', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='123456', position='Query'),
  productCode?: string(name='ProductCode', example='eKYC_MIN', position='Query'),
}

model EkycVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extFaceInfo?: string(name='ExtFaceInfo', example='{
"faceAttack": "N",
"faceComparisonScore": 52.57,
"facePassed": "N",
"authorityComparisonScore": 80.39
}'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
  }(name='Result'),
}

model EkycVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EkycVerifyResponseBody(name='body'),
}

async function ekycVerify(request: EkycVerifyRequest): EkycVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EkycVerify', 'POST', '/', 'json', true, 'form', request);
}

model FaceCompareRequest {
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  sourceFacePicture?: string(name='SourceFacePicture', position='Body'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', example='https://***face1.jpeg', position='Query'),
  targetFacePicture?: string(name='TargetFacePicture', position='Body'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://***face2.jpeg', position='Query'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', example='98'),
    passed?: string(name='Passed', example='Y'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceCompareResponseBody(name='body'),
}

async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceCompare', 'POST', '/', 'json', true, 'form', request);
}

model FaceLivenessRequest {
  crop?: string(name='Crop', example='T', position='Query'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  faceQuality?: string(name='FaceQuality', example='T', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='123456789', position='Query'),
  occlusion?: string(name='Occlusion', example='T', position='Query'),
  productCode?: string(name='ProductCode', example='FACE_LIVENESS_MIN', position='Query'),
}

model FaceLivenessResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='42EA58CA-5DF4-55D5-82C4-5E7A40DA62BA'),
  result?: {
    extFaceInfo?: {
      faceAge?: int32(name='FaceAge'),
      faceAttack?: string(name='FaceAttack', example='Y'),
      faceGender?: string(name='FaceGender'),
      faceQualityScore?: double(name='FaceQualityScore', example='87.19'),
      occlusionResult?: string(name='OcclusionResult', example='Y'),
    }(name='ExtFaceInfo'),
    passed?: string(name='Passed', example='N'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceLivenessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceLivenessResponseBody(name='body'),
}

async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceLiveness', 'POST', '/', 'json', true, 'form', request);
}

model FraudResultCallBackRequest {
  certifyId?: string(name='CertifyId', example='shs2b27333914876c01de4cb22f5841f', position='Query'),
  extParams?: string(name='ExtParams', position='Query'),
  resultCode?: string(name='ResultCode', example='PASS', position='Query'),
  verifyDeployEnv?: string(name='VerifyDeployEnv', example='production', position='Query'),
}

model FraudResultCallBackResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model FraudResultCallBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FraudResultCallBackResponseBody(name='body'),
}

async function fraudResultCallBack(request: FraudResultCallBackRequest): FraudResultCallBackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FraudResultCallBack', 'POST', '/', 'json', false, 'json', request);
}

model Id2MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211', position='Query'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  productCode?: string(name='ProductCode', example='ID_2META', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model Id2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='EFA11401-C961-5E89-A2D3-BF9883E5CC3D'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='Result'),
}

model Id2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyIntlResponseBody(name='body'),
}

async function id2MetaVerifyIntl(request: Id2MetaVerifyIntlRequest): Id2MetaVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaVerifyIntl', 'POST', '/', 'json', false, 'json', request);
}

model InitializeRequest {
  authorize?: string(name='Authorize', position='Query'),
  callbackToken?: string(name='CallbackToken', position='Query'),
  callbackUrl?: string(name='CallbackUrl', position='Query'),
  crop?: string(name='Crop', example='*', position='Query'),
  docScanMode?: string(name='DocScanMode', position='Query'),
  docType?: string(name='DocType', example='01000000', position='Query'),
  docVideo?: string(name='DocVideo', position='Query'),
  experienceCode?: string(name='ExperienceCode', position='Query'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', example='***', position='Query'),
  idFaceQuality?: string(name='IdFaceQuality', example='*', position='Query'),
  idSpoof?: string(name='IdSpoof', example='Y', position='Query'),
  idThreshold?: string(name='IdThreshold', position='Query'),
  languageConfig?: string(name='LanguageConfig', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543', position='Query'),
  metaInfo?: string(name='MetaInfo', example='{\\"bioMetaInfo\\":\\"4.1.0:2916352,0\\",\\"deviceType\\":\\"web\\",\\"ua\\":\\"Mozilla/5.0 (Macintosh', position='Query'),
  model?: string(name='Model', position='Query'),
  ocr?: string(name='Ocr', description='OCR。', example='*', position='Query'),
  productCode?: string(name='ProductCode', example='eKYC', position='Query'),
  productFlow?: string(name='ProductFlow', position='Query'),
  returnUrl?: string(name='ReturnUrl', example='http*****', position='Query'),
  sceneCode?: string(name='SceneCode', example='PAY**', position='Query'),
  securityLevel?: string(name='SecurityLevel', position='Query'),
  showAlbumIcon?: string(name='ShowAlbumIcon', position='Query'),
  showGuidePage?: string(name='ShowGuidePage', position='Query'),
  showOcrResult?: string(name='ShowOcrResult', position='Query'),
  styleConfig?: string(name='StyleConfig', position='Query'),
}

model InitializeResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    clientCfg?: string(name='ClientCfg', example='***'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
    transactionUrl?: string(name='TransactionUrl', example='http****'),
  }(name='Result'),
}

model InitializeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeResponseBody(name='body'),
}

async function initialize(request: InitializeRequest): InitializeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Initialize', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211', position='Query'),
  mobile?: string(name='Mobile', example='186****1234', position='Query'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  productCode?: string(name='ProductCode', example='MOBILE_3META', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model Mobile3MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D241532C-4EE9-5A2A-A5A5-C1FD98CE2EDD'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    subCode?: string(name='SubCode', example='101'),
  }(name='Result'),
}

model Mobile3MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaVerifyIntlResponseBody(name='body'),
}

async function mobile3MetaVerifyIntl(request: Mobile3MetaVerifyIntlRequest): Mobile3MetaVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaVerifyIntl', 'POST', '/', 'json', false, 'json', request);
}

