/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudauth-intl';
  @version = '2022-08-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddressCompareIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  defaultCountry: string(name='DefaultCountry', description='This parameter is required.', position='Query'),
  productCode: string(name='ProductCode', description='ADD_VERIFY

This parameter is required.', position='Query'),
  text1: string(name='Text1', description='This parameter is required.', position='Query'),
  text2: string(name='Text2', description='This parameter is required.', position='Query'),
}

model AddressCompareIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    data?: string(name='Data'),
  }(name='Result'),
}

model AddressCompareIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressCompareIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddressCompareIntl  AddressCompareIntlRequest
  * @return AddressCompareIntlResponse
 */
async function addressCompareIntl(request: AddressCompareIntlRequest): AddressCompareIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddressCompareIntl', 'POST', '/', 'json', false, 'json', request);
}

model AddressVerifyIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  addressType: string(name='AddressType', description='Verification address type:
- “0”: Text address
- “1”: Latitude and longitude

This parameter is required.', example='“0”', position='Query'),
  defaultCity?: string(name='DefaultCity', description='Default city', example='杭州市', position='Query'),
  defaultCountry: string(name='DefaultCountry', description='Country name, currently only supports: China

This parameter is required.', example='中国', position='Query'),
  defaultDistrict?: string(name='DefaultDistrict', description='Default district', example='余杭区', position='Query'),
  defaultProvince?: string(name='DefaultProvince', description='Default province', example='浙江省', position='Query'),
  latitude?: string(name='Latitude', description='Latitude.', example='“31.2304”', position='Query'),
  longitude?: string(name='Longitude', description='Longitude.', example='“121.4737”', position='Query'),
  mobile: string(name='Mobile', description='Supports Chinese mobile phone numbers.

This parameter is required.', example='1872334****', position='Query'),
  productCode: string(name='ProductCode', description='Fixed value: ADD_VERIFY_PRO

This parameter is required.', example='ADD_VERIFY_PRO', position='Query'),
  text?: string(name='Text', description='Detailed address text content', example='阿里巴巴西溪园区', position='Query'),
  verifyType: string(name='VerifyType', description='Address verification method:
- HOME: Home address verification
- WORK: Work address verification

This parameter is required.', example='HOME', position='Query'),
}

model AddressVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  resultObject?: {
    addressInfo?: string(name='AddressInfo', description='Address verification details.', example='0-3000'),
    ispName?: string(name='IspName', description='Operator name:
- CMCC: China Mobile
- CTCC: China Telecom
- CUCC: China Unicom', example='CMCC'),
    passed?: string(name='Passed', description='Verification result, values:
- Y: Yes, the verified address distance is less than or equal to 10KM.
- N: No, the verified address distance is greater than 10KM.', example='Y'),
    subCode?: string(name='SubCode', description='Authentication result description.', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier for the authentication request.', example='hksb7ba1b28130d24e015d69********'),
  }(name='ResultObject', description='Returned result information.'),
}

model AddressVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressVerifyIntlResponseBody(name='body'),
}

/**
  * @description Based on the operator\\"s capabilities, input the phone number and address (or latitude and longitude) to verify whether the provided address is the user\\"s usual residence.
  * @param request  the request parameters of AddressVerifyIntl  AddressVerifyIntlRequest
  * @return AddressVerifyIntlResponse
 */
async function addressVerifyIntl(request: AddressVerifyIntlRequest): AddressVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddressVerifyIntl', 'POST', '/', 'json', false, 'json', request);
}

model AddressVerifyV2IntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  deviceToken: string(name='DeviceToken', description='This parameter is required.', example='Tk9SSUQuMS*****************ZDNmNWY5NzQxOW1o', position='Query'),
  mobile?: string(name='Mobile', example='1872334****', position='Query'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='ADD_VERIFY_PRO', position='Query'),
  regCountry: string(name='RegCountry', description='This parameter is required.', position='Query'),
  text?: string(name='Text', position='Query'),
  verifyType?: string(name='VerifyType', example='HOME', position='Query'),
}

model AddressVerifyV2IntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='7F971622-38C0-5F56-B2EC-315367979B4F'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    detail?: string(name='Detail', example='{
  "distanceRange": "0-3000",
  "ispName": "CTCC",
  "phoneStatus": "1"
}'),
    transactionId?: string(name='TransactionId', example='hksb7ba1b28130d24e015d69********'),
  }(name='Result'),
}

model AddressVerifyV2IntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressVerifyV2IntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddressVerifyV2Intl  AddressVerifyV2IntlRequest
  * @return AddressVerifyV2IntlResponse
 */
async function addressVerifyV2Intl(request: AddressVerifyV2IntlRequest): AddressVerifyV2IntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddressVerifyV2Intl', 'POST', '/', 'json', false, 'json', request);
}

model BankMetaVerifyIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  bankCard: string(name='BankCard', description='Bank card number.

- When paramType is set to normal, enter the plaintext bank card number.
- When paramType is set to md5, enter the plaintext part of the card number except the last 6 digits, followed by the MD5 value of the last 6 digits (32-character lowercase).

This parameter is required.', example='● 明文：12345678******
● 密文：
12345678f8ee21920e37807b43e7e912ab829b6e', position='Query'),
  identifyNum?: string(name='IdentifyNum', description='ID number:
- When paramType is normal: Enter the plaintext ID number.
- When paramType is md5:
    - First 6 digits of the ID number (plaintext) + date of birth (ciphertext) + last 4 digits of the ID number (plaintext).
    - For other IDs, encrypt the last two digits with MD5.

Important
This field is required when ProductType is one of the following:
- BANK_CARD_3_META
- BANK_CARD_4_META', example='● 明文：429001********8211
● 密文：
42900132fa7bcd874161bea8ec8fd98f390ec98211', position='Query'),
  identityType?: string(name='IdentityType', description='ID type (default to ID card if left empty, see the table below for other types).', example='01', position='Query'),
  mobile?: string(name='Mobile', description='Phone number:
- When paramType is normal: Enter the plaintext phone number.
- When paramType is md5: Enter the ciphertext phone number.

Important

- This field is required when ProductType = BANK_CARD_4_META.', example='● 明文：186****2055
● 密文：
849169cd3b20621c1c78bd61a11a4fc2', position='Query'),
  paramType: string(name='ParamType', description='Encryption method:
- normal: no encryption
- md5: md5 encryption

Important:

- All encrypted parameters should be in the form of a 32-character lowercase MD5 string.
- The ciphertext generated by different MD5 tools may vary. If the interface works before encryption but not after, try changing the MD5 tool.

This parameter is required.', example='normal', position='Query'),
  productCode: string(name='ProductCode', description='Fixed value: BANK_CARD_N_META

This parameter is required.', example='BANK_CARD_N_META', position='Query'),
  productType: string(name='ProductType', description='Product type to call:

- BANK_CARD_2_META: Bank card number + name verification.
- BANK_CARD_3_META: Bank card number + name + ID number verification.
- BANK_CARD_4_META: Bank card number + name + ID number + phone number verification.

This parameter is required.', example='BANK_CARD_4_META', position='Query'),
  userName: string(name='UserName', description='Name.

- When paramType is set to normal, enter the plaintext name.
- When paramType is set to md5, encrypt the first character of the name with MD5 (32-character lowercase MD5) and append the rest of the name in plaintext.

This parameter is required.', example='张*', position='Query'),
  verifyMode: string(name='VerifyMode', description='VERIFY_BANK_CARD: Bank card authentication mode. This indicates whether the provided bank card number matches the user\\"s real name, ID number, and phone number.

This parameter is required.', example='VERIFY_BANK_CARD', position='Query'),
}

model BankMetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='4EB35****87EBA1'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Consistent (charged)
- 2: Inconsistent (charged)
- 3: No record found (not charged)', example='1'),
    subCode?: string(name='SubCode', description='Verification details:

- **101**: Verification passed.
- **201**: Authentication information does not match, cardholder information is incorrect.
- **202**: Authentication information does not match, bank card has not been activated for authenticated payments.
- **203**: Authentication information does not match, bank card has expired.
- **204**: Authentication information does not match, bank card is a restricted card.
- **205**: Authentication information does not match, this card has been confiscated.
- **206**: Authentication information does not match, bank card is invalid.
- **207**: Authentication information does not match, this card has no corresponding issuing bank.
- **208**: Authentication information does not match, this card is uninitialized or dormant.
- **209**: Authentication information does not match, this card is a cheating card or swallowed card.
- **210**: Authentication information does not match, this card has been reported lost.
- **211**: Authentication information does not match, password error limit exceeded.
- **212**: Authentication information does not match, issuing bank does not support this transaction.
- **213**: Authentication information does not match, card status is abnormal or card is invalid.
- **214**: Authentication information does not match, no phone number reserved.
- **215**: Authentication information does not match, entered password, expiration date, or CVN2 is incorrect.
- **216**: Authentication information does not match, other card anomalies.
- **301**: Unable to verify, bank card does not support this service.
- **302**: Unable to verify, verification failed or bank refused verification, please contact the issuing bank.
- **303**: Unable to verify, bank card does not currently support phone number verification.
- **304**: Unable to verify, bank card number is incorrect.
- **305**: Unable to verify, other reasons.
- **306**: Unable to verify, verification attempt limit exceeded.', example='101'),
  }(name='ResultObject', description='Returned result information'),
}

model BankMetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BankMetaVerifyIntlResponseBody(name='body'),
}

/**
  * @description Verification of bank card elements, including: two-element verification (name + bank card number), three-element verification (name + ID number + bank card number), and four-element verification (name + ID number + phone number + bank card number) for consistency.
  * @param request  the request parameters of BankMetaVerifyIntl  BankMetaVerifyIntlRequest
  * @return BankMetaVerifyIntlResponse
 */
async function bankMetaVerifyIntl(request: BankMetaVerifyIntlRequest): BankMetaVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BankMetaVerifyIntl', 'POST', '/', 'json', false, 'json', request);
}

model CardOcrRequest {
  docType?: string(name='DocType', description='Document type.', example='00000006', position='Query'),
  idFaceQuality?: string(name='IdFaceQuality', description='Whether to perform face quality detection on the document
- T: Indicates that detection is needed
- F: Indicates that detection is not needed (default F)', example='F', position='Query'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Base64 on the front of the document image', example='base64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='URL of the front side of the document image', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure uniqueness.', example='dso9322***dsjsd22', position='Query'),
  merchantUserId?: string(name='MerchantUserId', description='Merchant user ID or other identifiers that can be used to identify specific users, such as phone numbers, email addresses, etc. It is strongly recommended to pre-desensitize the value of the userId field, for example, by hashing the value.', example='123456789', position='Query'),
  ocr?: string(name='Ocr', description='Whether to perform document OCR
- T: Indicates that document OCR is required (default T)
- F: Indicates that it is not required', example='T', position='Query'),
  productCode?: string(name='ProductCode', description='Product code', example='ID_OCR_MIN', position='Query'),
  spoof?: string(name='Spoof', description='Whether to enable anti-counterfeiting detection
- T: Indicates to enable anti-counterfeiting
- F: Indicates to disable (default F)', example='F', position='Query'),
}

model CardOcrResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extCardInfo?: string(name='ExtCardInfo', description='Document recognition result', example='{
  "idFaceQualityScore": 98.90,
  "ocrIdInfo": {
    "expiryDate": "2024-04-20",
    "placeOfIssue": "广东",
    "englishName": "ZHENGJIAN,YANGBEN",
    "originOfIssue": "公安部出入境管理局",
    "sex": "女",
    "name": "证件样本",
    "idNumber": "C00000000",
    "issueDate": "2014-04-21",
    "birthDate": "1981-08-03"
  },
  "spoofInfo": {
    "spoofResult": "N",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    extIdInfo?: string(name='ExtIdInfo', description='Additional result information', example='**'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier for the authentication request', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Return result'),
}

model CardOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CardOcrResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.  * @param request  the request parameters of CardOcr  CardOcrRequest
  * @return CardOcrResponse
 */
// Deprecated
async function cardOcr(request: CardOcrRequest): CardOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CardOcr', 'POST', '/', 'json', true, 'form', request);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList', description='Return additional information.', example='***', position='Query'),
  isReturnImage?: string(name='IsReturnImage', description='Whether to return images.
- Y: Return
- N: Do not return', example='N', position='Query'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure its uniqueness.', example='djs20d***9-dsskc', position='Query'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult', description='Whether to return anti-fraud detection results.', example='Y', position='Query'),
  transactionId?: string(name='TransactionId', description='Authentication ID.', example='4ab0b***cbde97', position='Query'),
}

model CheckResultResponseBody = {
  code?: string(name='Code', description='Return code.', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    ekycResult?: string(name='EkycResult', description='Authentication result.', example='**'),
    extBasicInfo?: string(name='ExtBasicInfo', description='Extended basic information.', example='**'),
    extFaceInfo?: string(name='ExtFaceInfo', description='Face information.', example='**'),
    extIdInfo?: string(name='ExtIdInfo', description='ID information.', example='**'),
    extInfo?: string(name='ExtInfo', description='Extended information', example='{}'),
    extRiskInfo?: string(name='ExtRiskInfo', description='Risk information.', example='**'),
    passed?: string(name='Passed', description='Whether the authentication is passed.

- Y: Passed
- N: Not passed', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='***'),
  }(name='Result', description='Return result.'),
}

model CheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckResult  CheckResultRequest
  * @return CheckResultResponse
 */
async function checkResult(request: CheckResultRequest): CheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckResult', 'POST', '/', 'json', false, 'json', request);
}

model CheckVerifyLogRequest {
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent problem localization and troubleshooting. Supports a combination of letters and numbers, with a maximum length of 32 characters. Ensure uniqueness.', example='e0c34a***353888', position='Body'),
  transactionId?: string(name='TransactionId', description='The unique identifier for the entire authentication process. This value needs to be obtained by calling Initialize.', example='hksb7ba1b*********015d694361bee4', position='Body'),
}

model CheckVerifyLogResponseBody = {
  code?: string(name='Code', description='Backend error code.', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    extInfo?: string(name='ExtInfo', description='Extended information', example='{}'),
    interruptPage?: string(name='InterruptPage', description='Records the last page where the authentication was interrupted.

- Page not started
- OCR guide page
- OCR camera authorization
- OCR document capture page
- OCR recognition loading
- OCR recognition result editing page
- OCR recognition result editing loading
- Liveness detection guide page
- Liveness detection camera authorization page
- Liveness detection page
- Liveness detection fallback page
- Liveness detection retry
- Liveness detection loading', example='OCR拍摄证件页面'),
    interruptPageEn?: string(name='InterruptPageEn'),
    logInfo?: [ string ](name='LogInfo', description='SDK operation log details'),
    logInfoEn?: [ string ](name='LogInfoEn'),
    logStatisticsInfo?: string(name='LogStatisticsInfo', description='SDK operation log statistics details', example='{
          "faceOverTimes": 0,
          "hasFaceOverTimes": false,
          "hasFacePermissionRefuse": false,
          "hasOcrEdit": true,
          "hasOcrEditOverTimes": false,
          "hasOcrOverTimes": true,
          "hasOcrPermissionRefuse": false,
          "ocrEditOverTimes": 0,
          "ocrEditTimes": 1,
          "ocrOverTimes": 1,
          "pageStayTimeInfo": {
            "LOADING": "1615",
            "OCR_SCAN": "37446",
            "OCR_RESULT": "1338",
            "FACE": "8707"
          }
        }'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code', example='200'),
    verifyErrorCode?: string(name='VerifyErrorCode', description='Authentication interruption error codes

- 1000: The user completed the face scanning process, and the suggested authentication result is pass
- 1001: The user completed the face scanning process, and the suggested authentication result is fail
- 1002: System error
- 1003: SDK initialization failed, please check if the client time is correct
- 1004: Camera permission error
- 1005: Network error
- 1006: User exited
- 1007: Invalid TransactionId
- 1009: Client timestamp error
- 1011: Incorrect document type submitted
- 1012: Missing or format validation failure of key information on the recognized document
- 1013: Poor image quality
- 1014: Exceeded the upper limit of errors
- 1015: Android system version too low
- 1016: Camera permission not obtained
- 9999: Suspected authentication process interruption', example='1001'),
    verifyStatus?: string(name='VerifyStatus', description='Authentication status, values:

- 0: finished (authentication completed)
- 1: unfinished (authentication interrupted)
- 2: notstart (authentication not started)', example='1'),
  }(name='Result', description='Return result.'),
}

model CheckVerifyLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckVerifyLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckVerifyLog  CheckVerifyLogRequest
  * @return CheckVerifyLogResponse
 */
async function checkVerifyLog(request: CheckVerifyLogRequest): CheckVerifyLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckVerifyLog', 'POST', '/', 'json', true, 'form', request);
}

model CredentialRecognitionIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  credentialOcrPictureBase64?: string(name='CredentialOcrPictureBase64', example='base64', position='Body'),
  credentialOcrPictureUrl?: string(name='CredentialOcrPictureUrl', example='https://***', position='Body'),
  docType: string(name='DocType', description='This parameter is required.', example='01', position='Query'),
  fraudCheck: string(name='FraudCheck', description='This parameter is required.', example='true', position='Query'),
  ocrArea: string(name='OcrArea', description='This parameter is required.', example='0101', position='Query'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='CREDENTIAL_RECOGNITION', position='Query'),
}

model CredentialRecognitionIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', example='{
  "address": "",
  "name":""
}'),
    subCode?: string(name='SubCode', example='200'),
    success?: string(name='Success', example='S'),
  }(name='Result'),
}

model CredentialRecognitionIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialRecognitionIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CredentialRecognitionIntl  CredentialRecognitionIntlRequest
  * @return CredentialRecognitionIntlResponse
 */
async function credentialRecognitionIntl(request: CredentialRecognitionIntlRequest): CredentialRecognitionIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CredentialRecognitionIntl', 'POST', '/', 'json', true, 'form', request);
}

model DeepfakeDetectIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  faceBase64?: string(name='FaceBase64', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', position='Body'),
  faceInputType?: string(name='FaceInputType', example='IMAGE', position='Query'),
  faceUrl?: string(name='FaceUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  merchantBizId: string(name='MerchantBizId', description='This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c******', position='Query'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='FACE_DEEPFAKE', position='Query'),
  sceneCode?: string(name='SceneCode', example='1234567890', position='Query'),
}

model DeepfakeDetectIntlResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    result?: string(name='Result', example='1'),
    riskScore?: map[string]string(name='RiskScore'),
    riskTag?: string(name='RiskTag', example='SuspectDeepForgery,SuspectWarterMark'),
  }(name='ResultObject'),
}

model DeepfakeDetectIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeDetectIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeepfakeDetectIntl  DeepfakeDetectIntlRequest
  * @return DeepfakeDetectIntlResponse
 */
async function deepfakeDetectIntl(request: DeepfakeDetectIntlRequest): DeepfakeDetectIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeepfakeDetectIntl', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVerifyResultRequest {
  deleteAfterQuery?: string(name='DeleteAfterQuery', description='Whether to depend on the query interface when deleting data', example='Y / N', position='Query'),
  deleteType?: string(name='DeleteType', description='Type of data to be deleted', example='Img / Text / All', position='Query'),
  transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='4ab0b***cbde97', position='Query'),
}

model DeleteVerifyResultResponseBody = {
  code?: string(name='Code', description='Return code', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of this request', example='4EB35****87EBA1'),
  result?: {
    deleteResult?: string(name='DeleteResult', description='Deletion result. Y indicates successful deletion, N indicates failed deletion', example='Y/N'),
    transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='4ab0b***cbde97'),
  }(name='Result', description='Return result'),
}

model DeleteVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVerifyResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVerifyResult  DeleteVerifyResultRequest
  * @return DeleteVerifyResultResponse
 */
async function deleteVerifyResult(request: DeleteVerifyResultRequest): DeleteVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVerifyResult', 'POST', '/', 'json', false, 'json', request);
}

model DocOcrRequest {
  cardSide?: string(name='CardSide', description='CardSide', example='0', position='Query'),
  docType?: string(name='DocType', description='Document type', example='00000006', position='Query'),
  idFaceQuality?: string(name='IdFaceQuality', description='Whether to perform ID face quality detection
- T: Indicates that detection is required
- F: Indicates that detection is not required (default F)', example='F', position='Query'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Base64 of the front side of the document image', example='base64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='URL of the front side of the document image', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  idThreshold?: string(name='IdThreshold', description='IdThreshold', example='0', position='Query'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure uniqueness.', example='dso9322***dsjsd22', position='Query'),
  merchantUserId?: string(name='MerchantUserId', description='A custom user ID in the business, please keep it unique.', example='123456789', position='Query'),
  ocr?: string(name='Ocr', description='Whether to perform document OCR
- T: Indicates that document OCR is required
- F: Indicates that document OCR is not required', example='T', position='Query'),
  productCode?: string(name='ProductCode', description='Product code', example='产品方案类型ID_OCR_MIN', position='Query'),
  spoof?: string(name='Spoof', description='Whether to enable anti-counterfeiting detection
- T: Indicates that anti-counterfeiting is enabled
- F: Indicates that anti-counterfeiting is disabled', example='F', position='Query'),
}

model DocOcrResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', description='Card and document recognition result	Only returned when the interface response is successful', example='{
  "idFaceQualityScore": 98.0
  "ocrIdInfo": {
    "expiryDate": "",
    "originOfIssue": "公安部出入境管理局",
    "englishName": "LI SI",
    "sex": "男",
    "name": "李四",
    "idNumber": "H11111112",
    "issueDate": "2013-01-02",
    "birthDate": "1990-02-21"
  },
  "spoofInfo": {
    "spoofResult": "Y",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed
- N: Not passed', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Return result'),
}

model DocOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DocOcr  DocOcrRequest
  * @return DocOcrResponse
 */
async function docOcr(request: DocOcrRequest): DocOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DocOcr', 'POST', '/', 'json', true, 'form', request);
}

model DocOcrMaxRequest {
  docPage?: string(name='DocPage', position='Body'),
  docType?: string(name='DocType', example='CNSSC01', position='Body'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', example='base64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://***********.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Body'),
  idSpoof?: string(name='IdSpoof', position='Body'),
  idThreshold?: string(name='IdThreshold', example='0', position='Body'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c******', position='Body'),
  merchantUserId?: string(name='MerchantUserId', example='123456789', position='Body'),
  ocrModel?: string(name='OcrModel', example='0', position='Body'),
  productCode?: string(name='ProductCode', example='ID_OCR_MAX', position='Body'),
  prompt?: string(name='Prompt', position='Body'),
  sceneCode?: string(name='SceneCode', example='1234567890', position='Body'),
  spoof?: string(name='Spoof', example='F', position='Body'),
}

model DocOcrMaxResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', example='{
  "docType": "PPTW01",
  "ocrIdInfo": {
    "passportNo": "36*******",
    "expiryDate": "2032/02/10",
    "placeOfBirth": "TAIWAN",
    "surname": "CHEN",
    "givenname": "LIN-CHUN",
    "countryCode": "TWN",
    "sex": "F",
    "personalNo": "S22********",
    "issueDate": "2022/02/10",
    "birthDate": "1988/10/04"
  }
}'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
    transactionId?: string(name='TransactionId', example='hk573be80f944d95ac812e0*******a8'),
  }(name='Result'),
}

model DocOcrMaxResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrMaxResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DocOcrMax  DocOcrMaxRequest
  * @return DocOcrMaxResponse
 */
async function docOcrMax(request: DocOcrMaxRequest): DocOcrMaxResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DocOcrMax', 'POST', '/', 'json', true, 'form', request);
}

model EkycVerifyRequest {
  authorize?: string(name='Authorize', example='T', position='Query'),
  crop?: string(name='Crop', example='F', position='Query'),
  docName?: string(name='DocName', position='Query'),
  docNo?: string(name='DocNo', example='410***************', position='Query'),
  docType?: string(name='DocType', example='00000001', position='Query'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', position='Body'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  idThreshold?: string(name='IdThreshold', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='123456', position='Query'),
  productCode?: string(name='ProductCode', example='eKYC_MIN', position='Query'),
}

model EkycVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extFaceInfo?: string(name='ExtFaceInfo', example='{
"faceAttack": "N",
"faceComparisonScore": 52.57,
"facePassed": "N",
"authorityComparisonScore": 80.39
}'),
    extIdInfo?: string(name='ExtIdInfo'),
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='4ab0b***cbde97'),
  }(name='Result'),
}

model EkycVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EkycVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EkycVerify  EkycVerifyRequest
  * @return EkycVerifyResponse
 */
async function ekycVerify(request: EkycVerifyRequest): EkycVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EkycVerify', 'POST', '/', 'json', true, 'form', request);
}

model FaceCompareRequest {
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  sourceFacePicture?: string(name='SourceFacePicture', position='Body'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', example='https://***face1.jpeg', position='Query'),
  targetFacePicture?: string(name='TargetFacePicture', position='Body'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://***face2.jpeg', position='Query'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', example='98'),
    passed?: string(name='Passed', example='Y'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceCompareResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FaceCompare  FaceCompareRequest
  * @return FaceCompareResponse
 */
async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceCompare', 'POST', '/', 'json', true, 'form', request);
}

model FaceGuardRiskRequest {
  bizId?: string(name='BizId', example='LMALL20******001', position='Query'),
  deviceToken?: string(name='DeviceToken', example='Tk9SSUQuMS*****************ZDNmNWY5NzQxOW1o', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='0c83ce0101d34eff886b1f7d1cdef67f', position='Query'),
  productCode?: string(name='ProductCode', example='FACE_GUARD', position='Query'),
}

model FaceGuardRiskResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='595E387B-3F0E-5C52-BD02-8EFE63D41FD5'),
  result?: {
    guardRiskScore?: double(name='GuardRiskScore'),
    riskExtends?: string(name='RiskExtends'),
    riskTags?: string(name='RiskTags', example='ROOT,VPN,HOOK'),
    transactionId?: string(name='TransactionId', example='hk573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceGuardRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceGuardRiskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FaceGuardRisk  FaceGuardRiskRequest
  * @return FaceGuardRiskResponse
 */
async function faceGuardRisk(request: FaceGuardRiskRequest): FaceGuardRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceGuardRisk', 'POST', '/', 'json', false, 'json', request);
}

model FaceLivenessRequest {
  crop?: string(name='Crop', example='T', position='Query'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg', position='Query'),
  faceQuality?: string(name='FaceQuality', example='T', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='123456789', position='Query'),
  occlusion?: string(name='Occlusion', example='T', position='Query'),
  productCode?: string(name='ProductCode', example='FACE_LIVENESS_MIN', position='Query'),
}

model FaceLivenessResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='42EA58CA-5DF4-55D5-82C4-5E7A40DA62BA'),
  result?: {
    extFaceInfo?: {
      faceAge?: int32(name='FaceAge'),
      faceAttack?: string(name='FaceAttack', example='Y'),
      faceGender?: string(name='FaceGender'),
      faceQualityScore?: double(name='FaceQualityScore', example='87.19'),
      occlusionResult?: string(name='OcclusionResult', example='Y'),
    }(name='ExtFaceInfo'),
    passed?: string(name='Passed', example='N'),
    subCode?: string(name='SubCode', example='205'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result'),
}

model FaceLivenessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceLivenessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FaceLiveness  FaceLivenessRequest
  * @return FaceLivenessResponse
 */
async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceLiveness', 'POST', '/', 'json', true, 'form', request);
}

model FraudResultCallBackRequest {
  certifyId?: string(name='CertifyId', example='shs2b27333914876c01de4cb22f5841f', position='Query'),
  extParams?: string(name='ExtParams', position='Query'),
  resultCode?: string(name='ResultCode', example='PASS', position='Query'),
  verifyDeployEnv?: string(name='VerifyDeployEnv', example='production', position='Query'),
}

model FraudResultCallBackResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  success?: boolean(name='Success', example='true'),
}

model FraudResultCallBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FraudResultCallBackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FraudResultCallBack  FraudResultCallBackRequest
  * @return FraudResultCallBackResponse
 */
async function fraudResultCallBack(request: FraudResultCallBackRequest): FraudResultCallBackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FraudResultCallBack', 'POST', '/', 'json', false, 'json', request);
}

model Id2MetaPeriodVerifyIntlRequest {
  docName: string(name='DocName', description='This parameter is required.', position='Body'),
  docNo: string(name='DocNo', description='This parameter is required.', example='411xxxxxxxxxxx0001', position='Body'),
  docType: string(name='DocType', description='This parameter is required.', example='​00000001', position='Body'),
  merchantBizId: string(name='MerchantBizId', description='This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c35****', position='Body'),
  merchantUserId?: string(name='MerchantUserId', example='1234567890', position='Body'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='eKYC_Date_MIN', position='Body'),
  sceneCode?: string(name='SceneCode', example='1234567890', position='Body'),
  validityEndDate: string(name='ValidityEndDate', description='This parameter is required.', example='20301001', position='Body'),
  validityStartDate: string(name='ValidityStartDate', description='This parameter is required.', example='20201001', position='Body'),
}

model Id2MetaPeriodVerifyIntlResponseBody = {
  code?: string(name='Code', example='success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='7B97D932-7FF5-517D-BF39-7CA1BEE3CDD9'),
  result?: {
    passed?: string(name='Passed', example='Y'),
    subCode?: string(name='SubCode', example='200'),
  }(name='Result'),
}

model Id2MetaPeriodVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaPeriodVerifyIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Id2MetaPeriodVerifyIntl  Id2MetaPeriodVerifyIntlRequest
  * @return Id2MetaPeriodVerifyIntlResponse
 */
async function id2MetaPeriodVerifyIntl(request: Id2MetaPeriodVerifyIntlRequest): Id2MetaPeriodVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaPeriodVerifyIntl', 'POST', '/', 'json', true, 'form', request);
}

model Id2MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211', position='Query'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  productCode?: string(name='ProductCode', example='ID_2META', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model Id2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='EFA11401-C961-5E89-A2D3-BF9883E5CC3D'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='Result'),
}

model Id2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Id2MetaVerifyIntl  Id2MetaVerifyIntlRequest
  * @return Id2MetaVerifyIntlResponse
 */
async function id2MetaVerifyIntl(request: Id2MetaVerifyIntlRequest): Id2MetaVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaVerifyIntl', 'POST', '/', 'json', false, 'json', request);
}

model InitializeRequest {
  appQualityCheck?: string(name='AppQualityCheck', position='Query'),
  authorize?: string(name='Authorize', position='Query'),
  callbackToken?: string(name='CallbackToken', position='Query'),
  callbackUrl?: string(name='CallbackUrl', position='Query'),
  chameleonFrameEnable?: string(name='ChameleonFrameEnable', position='Query'),
  crop?: string(name='Crop', example='*', position='Query'),
  dateOfBirth?: string(name='DateOfBirth', position='Query'),
  dateOfExpiry?: string(name='DateOfExpiry', position='Query'),
  docName?: string(name='DocName', position='Query'),
  docNo?: string(name='DocNo', position='Query'),
  docPageConfig?: [ string ](name='DocPageConfig', shrink='json', position='Query'),
  docScanMode?: string(name='DocScanMode', position='Query'),
  docType?: string(name='DocType', example='01000000', position='Query'),
  docVideo?: string(name='DocVideo', position='Query'),
  documentNumber?: string(name='DocumentNumber', position='Query'),
  editOcrResult?: string(name='EditOcrResult', position='Query'),
  experienceCode?: string(name='ExperienceCode', position='Query'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', example='***', position='Query'),
  idFaceQuality?: string(name='IdFaceQuality', example='*', position='Query'),
  idSpoof?: string(name='IdSpoof', example='Y', position='Query'),
  idThreshold?: string(name='IdThreshold', position='Query'),
  languageConfig?: string(name='LanguageConfig', position='Query'),
  MRTDInput?: string(name='MRTDInput', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543', position='Query'),
  metaInfo?: string(name='MetaInfo', example='{\\"bioMetaInfo\\":\\"4.1.0:2916352,0\\",\\"deviceType\\":\\"web\\",\\"ua\\":\\"Mozilla/5.0 (Macintosh', position='Query'),
  model?: string(name='Model', position='Query'),
  ocr?: string(name='Ocr', description='OCR。', example='*', position='Query'),
  pages?: string(name='Pages', example='1', position='Query'),
  procedurePriority?: string(name='ProcedurePriority', position='Query'),
  productCode?: string(name='ProductCode', example='eKYC', position='Query'),
  productFlow?: string(name='ProductFlow', position='Query'),
  returnUrl?: string(name='ReturnUrl', example='http*****', position='Query'),
  sceneCode?: string(name='SceneCode', example='PAY**', position='Query'),
  securityLevel?: string(name='SecurityLevel', position='Query'),
  showAlbumIcon?: string(name='ShowAlbumIcon', position='Query'),
  showGuidePage?: string(name='ShowGuidePage', position='Query'),
  showOcrResult?: string(name='ShowOcrResult', position='Query'),
  styleConfig?: string(name='StyleConfig', position='Query'),
  useNFC?: string(name='UseNFC', position='Query'),
}

model InitializeResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    clientCfg?: string(name='ClientCfg', example='***'),
    protocol?: string(name='Protocol'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
    transactionUrl?: string(name='TransactionUrl', example='http****'),
  }(name='Result'),
}

model InitializeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Initialize  InitializeRequest
  * @return InitializeResponse
 */
async function initialize(request: InitializeRequest): InitializeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Initialize', 'POST', '/', 'json', true, 'form', request);
}

model KeepaliveIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model KeepaliveIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EB35****87EBA1'),
  result?: {
    result?: string(name='Result', example='SUCCESS'),
  }(name='Result'),
}

model KeepaliveIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KeepaliveIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of KeepaliveIntl  KeepaliveIntlRequest
  * @return KeepaliveIntlResponse
 */
async function keepaliveIntl(request: KeepaliveIntlRequest): KeepaliveIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KeepaliveIntl', 'POST', '/', 'json', false, 'json', request);
}

model Mobile2MetaVerifyIntlRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile: string(name='Mobile', description='This parameter is required.', example='186****1234', position='Body'),
  paramType: string(name='ParamType', description='This parameter is required.', example='normal', position='Body'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='MOBILE_2META', position='Body'),
  userName: string(name='UserName', description='This parameter is required.', position='Body'),
}

model Mobile2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
  }(name='Result'),
}

model Mobile2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile2MetaVerifyIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Mobile2MetaVerifyIntl  Mobile2MetaVerifyIntlRequest
  * @return Mobile2MetaVerifyIntlResponse
 */
async function mobile2MetaVerifyIntl(request: Mobile2MetaVerifyIntlRequest): Mobile2MetaVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile2MetaVerifyIntl', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', description='ID number

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='429001********8211', position='Query'),
  mobile?: string(name='Mobile', description='Mobile phone number.

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='186****1234', position='Query'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: unencrypted
- md5: md5 encrypted', example='normal', position='Query'),
  productCode?: string(name='ProductCode', description='The product solution to be integrated, with a fixed value: MOBILE_3META', example='MOBILE_3META', position='Query'),
  userName?: string(name='UserName', description='Name

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='张*', position='Query'),
}

model Mobile3MetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='D241532C-4EE9-5A2A-A5A5-C1FD98CE2EDD'),
  result?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Verification consistent
- 2: Verification inconsistent
- 3: No record found', example='1'),
    ispName?: string(name='IspName', description='ISP name

- CMCC: China Mobile
- CUCC: China Unicom
- CTCC: China Telecom', example='CMCC'),
    subCode?: string(name='SubCode', description='Detailed verification results

- 101: Verification passed 
- 201: Mobile number and name do not match, mobile number and ID number do not match 
- 202: Mobile number and name match, but mobile number and ID number do not match 
- 203: Mobile number and ID number match, but mobile number and name do not match 
- 204: Other inconsistencies
- 301: No record found', example='101'),
  }(name='Result', description='Return result'),
}

model Mobile3MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaVerifyIntlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Mobile3MetaVerifyIntl  Mobile3MetaVerifyIntlRequest
  * @return Mobile3MetaVerifyIntlResponse
 */
async function mobile3MetaVerifyIntl(request: Mobile3MetaVerifyIntlRequest): Mobile3MetaVerifyIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaVerifyIntl', 'POST', '/', 'json', false, 'json', request);
}

