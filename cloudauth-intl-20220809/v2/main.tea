/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth-intl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddressCompareIntlRequest {
  defaultCountry?: string(name='DefaultCountry', description='Country name
- China

This parameter is required.', example='fixed value：中国'),
  productCode?: string(name='ProductCode', description='ADD_VERIFY

This parameter is required.', example='fixed value：ADD_VERIFY'),
  text1?: string(name='Text1', description='Address 1

This parameter is required.', example='杭州市阿里巴巴西溪园区'),
  text2?: string(name='Text2', description='Address 2

This parameter is required.', example='杭州市文一西路969号1号楼'),
}

model AddressCompareIntlResponseBody = {
  code?: string(name='Code', description='Return code.', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    data?: string(name='Data', description='The values of sameLevel include:
- all: Exactly the same
- prov: Provincial level
- city: City level
- district: District level
- town: Town level
- road: Road level
- roadno: Road number
- poi: Point of interest (e.g., residential area)
- roomno: Room number', example='{
     sameLevel: "city", 
     distance:  5997.34m, -- 地址相差距离
     same_info: {    -- 相同信息
              prov: "浙江省",
              city: "杭州市",
              district: "西湖区"
      } 
}'),
  }(name='Result', description='Return result.'),
}

model AddressCompareIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressCompareIntlResponseBody(name='body'),
}

/**
 * @summary Address Similarity Comparison
 *
 * @description API for comparing two addresses, standardizing and checking address consistency.
 *
 * @param request AddressCompareIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressCompareIntlResponse
 */
@context("addressCompareIntlWithContext")
async function addressCompareIntlWithOptions(request: AddressCompareIntlRequest, runtime: $RuntimeOptions): AddressCompareIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.defaultCountry)) {
    query['DefaultCountry'] = request.defaultCountry;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.text1)) {
    query['Text1'] = request.text1;
  }
  if (!$isNull(request.text2)) {
    query['Text2'] = request.text2;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddressCompareIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Address Similarity Comparison
 *
 * @description API for comparing two addresses, standardizing and checking address consistency.
 *
 * @param request AddressCompareIntlRequest
 * @return AddressCompareIntlResponse
 */
async function addressCompareIntl(request: AddressCompareIntlRequest): AddressCompareIntlResponse {
  var runtime = new $RuntimeOptions{};
  return addressCompareIntlWithOptions(request, runtime);
}

model AddressVerifyIntlRequest {
  addressType?: string(name='AddressType', description='Verification address type:
- “0”: Text address
- “1”: Latitude and longitude

This parameter is required.', example='“0”'),
  defaultCity?: string(name='DefaultCity', description='Default city', example='杭州市'),
  defaultCountry?: string(name='DefaultCountry', description='Country name, currently only supports: China

This parameter is required.', example='中国'),
  defaultDistrict?: string(name='DefaultDistrict', description='Default district', example='余杭区'),
  defaultProvince?: string(name='DefaultProvince', description='Default province', example='浙江省'),
  latitude?: string(name='Latitude', description='Latitude.', example='“31.2304”'),
  longitude?: string(name='Longitude', description='Longitude.', example='“121.4737”'),
  mobile?: string(name='Mobile', description='Supports Chinese mobile phone numbers.

This parameter is required.', example='1872334****'),
  productCode?: string(name='ProductCode', description='Fixed value: ADD_VERIFY_PRO

This parameter is required.', example='ADD_VERIFY_PRO'),
  text?: string(name='Text', description='Detailed address text content', example='阿里巴巴西溪园区'),
  verifyType?: string(name='VerifyType', description='Address verification method:
- HOME: Home address verification
- WORK: Work address verification

This parameter is required.', example='HOME'),
}

model AddressVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  resultObject?: {
    addressInfo?: string(name='AddressInfo', description='Address verification details.', example='0-3000'),
    ispName?: string(name='IspName', description='Operator name:
- CMCC: China Mobile
- CTCC: China Telecom
- CUCC: China Unicom', example='CMCC'),
    passed?: string(name='Passed', description='Verification result, values:
- Y: Yes, the verified address distance is less than or equal to 10KM.
- N: No, the verified address distance is greater than 10KM.', example='Y'),
    subCode?: string(name='SubCode', description='Authentication result description.', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier for the authentication request.', example='hksb7ba1b28130d24e015d69********'),
  }(name='ResultObject', description='Returned result information.'),
}

model AddressVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Address Verification
 *
 * @description Based on the operator\\"s capabilities, input the phone number and address (or latitude and longitude) to verify whether the provided address is the user\\"s usual residence.
 *
 * @param request AddressVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressVerifyIntlResponse
 */
@context("addressVerifyIntlWithContext")
async function addressVerifyIntlWithOptions(request: AddressVerifyIntlRequest, runtime: $RuntimeOptions): AddressVerifyIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!$isNull(request.defaultCity)) {
    query['DefaultCity'] = request.defaultCity;
  }
  if (!$isNull(request.defaultCountry)) {
    query['DefaultCountry'] = request.defaultCountry;
  }
  if (!$isNull(request.defaultDistrict)) {
    query['DefaultDistrict'] = request.defaultDistrict;
  }
  if (!$isNull(request.defaultProvince)) {
    query['DefaultProvince'] = request.defaultProvince;
  }
  if (!$isNull(request.latitude)) {
    query['Latitude'] = request.latitude;
  }
  if (!$isNull(request.longitude)) {
    query['Longitude'] = request.longitude;
  }
  if (!$isNull(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.text)) {
    query['Text'] = request.text;
  }
  if (!$isNull(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddressVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Address Verification
 *
 * @description Based on the operator\\"s capabilities, input the phone number and address (or latitude and longitude) to verify whether the provided address is the user\\"s usual residence.
 *
 * @param request AddressVerifyIntlRequest
 * @return AddressVerifyIntlResponse
 */
async function addressVerifyIntl(request: AddressVerifyIntlRequest): AddressVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return addressVerifyIntlWithOptions(request, runtime);
}

model AddressVerifyV2IntlRequest {
  deviceToken?: string(name='DeviceToken', description='DeviceToken obtained via the client SDK

This parameter is required.', example='Tk9SSUQuMS*****************ZDNmNWY5NzQxOW1o'),
  mobile?: string(name='Mobile', description='Supported: Chinese mobile phone numbers', example='1872334****'),
  productCode?: string(name='ProductCode', description='Fixed value: ADD_VERIFY_PRO

This parameter is required.', example='ADD_VERIFY_PRO'),
  regCountry?: string(name='RegCountry', description='List of prohibited countries or regions

This parameter is required.', example='Currently supported: USA'),
  text?: string(name='Text', description='Detailed address text content', example='浙江省杭州市西湖区灯彩街云谷园区'),
  verifyType?: string(name='VerifyType', description='Address verification method:

- **HOME**: Home address verification

- **WORK**: Work address verification', example='HOME'),
}

model AddressVerifyV2IntlResponseBody = {
  code?: string(name='Code', description='[Return Code](https://www.alibabacloud.com/help/zh/ekyc/latest/add-verify-pro-api?spm=a2c63.p38356.0.i4#ae60001a3804w)', example='Success'),
  message?: string(name='Message', description='Detailed description of the return code', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='7F971622-38C0-5F56-B2EC-315367979B4F'),
  result?: {
    bizCode?: string(name='BizCode', description='The verification result. Valid values:

- **1**: Passed (billed)
- **2**: Failed (The device is in a prohibited region) (billed)
- **3**: Unknown (billed)', example='1'),
    detail?: string(name='Detail', description='Verification details, including：

- **DistanceRange**：Position rang：[DistanceRange description](https://www.alibabacloud.com/help/zh/ekyc/latest/add-verify-pro-api?spm=a2c63.p38356.0.i27#ee274c08976er)。
> If the input phone number or address is empty, or if no carrier information is found, this field will not be returned.

- **IspName**: The carrier name:
   - **CMCC**: China Mobile
   - **CTCC**: China Telecom
   - **CUCC**: China Unicom
> This parameter is not returned if the mobile phone number or address is empty in the request, or if carrier information is not found.

- **PhoneStatus**: The status of the mobile phone:
  - **0**: Abnormal
  - **1**: Normal

> This parameter is not returned if the mobile phone number is empty in the request.', example='{
  "distanceRange": "0-3000",
  "ispName": "CTCC",
  "phoneStatus": "1"
}'),
    transactionId?: string(name='TransactionId', description='The transaction ID', example='hksb7ba1b28130d24e015d69********'),
  }(name='Result', description='Result object'),
}

model AddressVerifyV2IntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressVerifyV2IntlResponseBody(name='body'),
}

/**
 * @summary This topic describes the address verification API operation, which verifies the region and address of a device using device data and carrier big data capabilities.
 *
 * @param request AddressVerifyV2IntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressVerifyV2IntlResponse
 */
@context("addressVerifyV2IntlWithContext")
async function addressVerifyV2IntlWithOptions(request: AddressVerifyV2IntlRequest, runtime: $RuntimeOptions): AddressVerifyV2IntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.deviceToken)) {
    query['DeviceToken'] = request.deviceToken;
  }
  if (!$isNull(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.regCountry)) {
    query['RegCountry'] = request.regCountry;
  }
  if (!$isNull(request.text)) {
    query['Text'] = request.text;
  }
  if (!$isNull(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddressVerifyV2Intl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary This topic describes the address verification API operation, which verifies the region and address of a device using device data and carrier big data capabilities.
 *
 * @param request AddressVerifyV2IntlRequest
 * @return AddressVerifyV2IntlResponse
 */
async function addressVerifyV2Intl(request: AddressVerifyV2IntlRequest): AddressVerifyV2IntlResponse {
  var runtime = new $RuntimeOptions{};
  return addressVerifyV2IntlWithOptions(request, runtime);
}

model BankMetaVerifyIntlRequest {
  bankCard?: string(name='BankCard', description='Bank card number.

- When paramType is set to normal, enter the plaintext bank card number.
- When paramType is set to md5, enter the plaintext part of the card number except the last 6 digits, followed by the MD5 value of the last 6 digits (32-character lowercase).

This parameter is required.', example='● 明文：12345678******
● 密文：
12345678f8ee21920e37807b43e7e912ab829b6e'),
  identifyNum?: string(name='IdentifyNum', description='ID number:
- When paramType is normal: Enter the plaintext ID number.
- When paramType is md5:
    - First 6 digits of the ID number (plaintext) + date of birth (ciphertext) + last 4 digits of the ID number (plaintext).
    - For other IDs, encrypt the last two digits with MD5.

Important
This field is required when ProductType is one of the following:
- BANK_CARD_3_META
- BANK_CARD_4_META', example='● 明文：429001********8211
● 密文：
42900132fa7bcd874161bea8ec8fd98f390ec98211'),
  identityType?: string(name='IdentityType', description='ID type (default to ID card if left empty, see the table below for other types).', example='01'),
  mobile?: string(name='Mobile', description='Phone number:
- When paramType is normal: Enter the plaintext phone number.
- When paramType is md5: Enter the ciphertext phone number.

Important

- This field is required when ProductType = BANK_CARD_4_META.', example='● 明文：186****2055
● 密文：
849169cd3b20621c1c78bd61a11a4fc2'),
  paramType?: string(name='ParamType', description='Encryption method:
- normal: no encryption
- md5: md5 encryption

Important:

- All encrypted parameters should be in the form of a 32-character lowercase MD5 string.
- The ciphertext generated by different MD5 tools may vary. If the interface works before encryption but not after, try changing the MD5 tool.

This parameter is required.', example='normal'),
  productCode?: string(name='ProductCode', description='Fixed value: BANK_CARD_N_META

This parameter is required.', example='BANK_CARD_N_META'),
  productType?: string(name='ProductType', description='Product type to call:

- BANK_CARD_2_META: Bank card number + name verification.
- BANK_CARD_3_META: Bank card number + name + ID number verification.
- BANK_CARD_4_META: Bank card number + name + ID number + phone number verification.

This parameter is required.', example='BANK_CARD_4_META'),
  userName?: string(name='UserName', description='Name.

- When paramType is set to normal, enter the plaintext name.
- When paramType is set to md5, encrypt the first character of the name with MD5 (32-character lowercase MD5) and append the rest of the name in plaintext.

This parameter is required.', example='张*'),
  verifyMode?: string(name='VerifyMode', description='VERIFY_BANK_CARD: Bank card authentication mode. This indicates whether the provided bank card number matches the user\\\\"s real name, ID number, and phone number.

This parameter is required.', example='VERIFY_BANK_CARD'),
}

model BankMetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='4EB35****87EBA1'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Consistent (charged)
- 2: Inconsistent (charged)
- 3: No record found (not charged)', example='1'),
    subCode?: string(name='SubCode', description='Verification details:

- **101**: Verification passed.
- **201**: Authentication information does not match, cardholder information is incorrect.
- **202**: Authentication information does not match, bank card has not been activated for authenticated payments.
- **203**: Authentication information does not match, bank card has expired.
- **204**: Authentication information does not match, bank card is a restricted card.
- **205**: Authentication information does not match, this card has been confiscated.
- **206**: Authentication information does not match, bank card is invalid.
- **207**: Authentication information does not match, this card has no corresponding issuing bank.
- **208**: Authentication information does not match, this card is uninitialized or dormant.
- **209**: Authentication information does not match, this card is a cheating card or swallowed card.
- **210**: Authentication information does not match, this card has been reported lost.
- **211**: Authentication information does not match, password error limit exceeded.
- **212**: Authentication information does not match, issuing bank does not support this transaction.
- **213**: Authentication information does not match, card status is abnormal or card is invalid.
- **214**: Authentication information does not match, no phone number reserved.
- **215**: Authentication information does not match, entered password, expiration date, or CVN2 is incorrect.
- **216**: Authentication information does not match, other card anomalies.
- **301**: Unable to verify, bank card does not support this service.
- **302**: Unable to verify, verification failed or bank refused verification, please contact the issuing bank.
- **303**: Unable to verify, bank card does not currently support phone number verification.
- **304**: Unable to verify, bank card number is incorrect.
- **305**: Unable to verify, other reasons.
- **306**: Unable to verify, verification attempt limit exceeded.', example='101'),
  }(name='ResultObject', description='Returned result information'),
}

model BankMetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BankMetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Bank Card Verification
 *
 * @description Verification of bank card elements, including: two-element verification (name + bank card number), three-element verification (name + ID number + bank card number), and four-element verification (name + ID number + phone number + bank card number) for consistency.
 *
 * @param request BankMetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BankMetaVerifyIntlResponse
 */
@context("bankMetaVerifyIntlWithContext")
async function bankMetaVerifyIntlWithOptions(request: BankMetaVerifyIntlRequest, runtime: $RuntimeOptions): BankMetaVerifyIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bankCard)) {
    query['BankCard'] = request.bankCard;
  }
  if (!$isNull(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!$isNull(request.identityType)) {
    query['IdentityType'] = request.identityType;
  }
  if (!$isNull(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!$isNull(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.userName)) {
    query['UserName'] = request.userName;
  }
  if (!$isNull(request.verifyMode)) {
    query['VerifyMode'] = request.verifyMode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BankMetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Bank Card Verification
 *
 * @description Verification of bank card elements, including: two-element verification (name + bank card number), three-element verification (name + ID number + bank card number), and four-element verification (name + ID number + phone number + bank card number) for consistency.
 *
 * @param request BankMetaVerifyIntlRequest
 * @return BankMetaVerifyIntlResponse
 */
async function bankMetaVerifyIntl(request: BankMetaVerifyIntlRequest): BankMetaVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return bankMetaVerifyIntlWithOptions(request, runtime);
}

model CardOcrRequest {
  docType?: string(name='DocType', description='Document type.', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', description='Whether to perform face quality detection on the document
- T: Indicates that detection is needed
- F: Indicates that detection is not needed (default F)', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Base64 on the front of the document image', example='base64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='URL of the front side of the document image', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure uniqueness.', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', description='Merchant user ID or other identifiers that can be used to identify specific users, such as phone numbers, email addresses, etc. It is strongly recommended to pre-desensitize the value of the userId field, for example, by hashing the value.', example='123456789'),
  ocr?: string(name='Ocr', description='Whether to perform document OCR
- T: Indicates that document OCR is required (default T)
- F: Indicates that it is not required', example='T'),
  productCode?: string(name='ProductCode', description='Product code', example='ID_OCR_MIN'),
  spoof?: string(name='Spoof', description='Whether to enable anti-counterfeiting detection
- T: Indicates to enable anti-counterfeiting
- F: Indicates to disable (default F)', example='F'),
}

model CardOcrResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extCardInfo?: string(name='ExtCardInfo', description='Document recognition result', example='{
  "idFaceQualityScore": 98.90,
  "ocrIdInfo": {
    "expiryDate": "2024-04-20",
    "placeOfIssue": "广东",
    "englishName": "ZHENGJIAN,YANGBEN",
    "originOfIssue": "公安部出入境管理局",
    "sex": "女",
    "name": "证件样本",
    "idNumber": "C00000000",
    "issueDate": "2014-04-21",
    "birthDate": "1981-08-03"
  },
  "spoofInfo": {
    "spoofResult": "N",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    extIdInfo?: string(name='ExtIdInfo', description='Additional result information', example='**'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier for the authentication request', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Return result'),
}

model CardOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CardOcrResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
 *
 * @summary Pure server-side interface for document OCR recognition
 *
 * @param request CardOcrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CardOcrResponse
 */
// Deprecated
@context("cardOcrWithContext")
async function cardOcrWithOptions(request: CardOcrRequest, runtime: $RuntimeOptions): CardOcrResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!$isNull(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!$isNull(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var body : map[string]any = {};
  if (!$isNull(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CardOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @deprecated OpenAPI CardOcr is deprecated, please use Cloudauth-intl::2022-08-09::DocOcr instead.
 *
 * @summary Pure server-side interface for document OCR recognition
 *
 * @param request CardOcrRequest
 * @return CardOcrResponse
 */
// Deprecated
async function cardOcr(request: CardOcrRequest): CardOcrResponse {
  var runtime = new $RuntimeOptions{};
  return cardOcrWithOptions(request, runtime);
}

model CheckResultRequest {
  extraImageControlList?: string(name='ExtraImageControlList', description='Return additional information.', example='***'),
  isReturnImage?: string(name='IsReturnImage', description='Whether to return images.
- Y: Return
- N: Do not return', example='N'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure its uniqueness.', example='djs20d***9-dsskc'),
  returnFiveCategorySpoofResult?: string(name='ReturnFiveCategorySpoofResult', description='Whether to return anti-fraud detection results.', example='Y'),
  transactionId?: string(name='TransactionId', description='Authentication ID.', example='4ab0b***cbde97'),
}

model CheckResultResponseBody = {
  code?: string(name='Code', description='Return code.', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    ekycResult?: string(name='EkycResult', description='Authentication result.', example='**'),
    extBasicInfo?: string(name='ExtBasicInfo', description='Extended basic information.', example='**'),
    extFaceInfo?: string(name='ExtFaceInfo', description='Face information.', example='**'),
    extIdInfo?: string(name='ExtIdInfo', description='ID information.', example='**'),
    extInfo?: string(name='ExtInfo', description='Extended information', example='{}'),
    extRiskInfo?: string(name='ExtRiskInfo', description='Risk information.', example='**'),
    passed?: string(name='Passed', description='Whether the authentication is passed.

- Y: Passed
- N: Not passed', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='***'),
  }(name='Result', description='Return result.'),
}

model CheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResultResponseBody(name='body'),
}

/**
 * @summary Result Query
 *
 * @param request CheckResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckResultResponse
 */
@context("checkResultWithContext")
async function checkResultWithOptions(request: CheckResultRequest, runtime: $RuntimeOptions): CheckResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.extraImageControlList)) {
    query['ExtraImageControlList'] = request.extraImageControlList;
  }
  if (!$isNull(request.isReturnImage)) {
    query['IsReturnImage'] = request.isReturnImage;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.returnFiveCategorySpoofResult)) {
    query['ReturnFiveCategorySpoofResult'] = request.returnFiveCategorySpoofResult;
  }
  if (!$isNull(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Result Query
 *
 * @param request CheckResultRequest
 * @return CheckResultResponse
 */
async function checkResult(request: CheckResultRequest): CheckResultResponse {
  var runtime = new $RuntimeOptions{};
  return checkResultWithOptions(request, runtime);
}

model CheckVerifyLogRequest {
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent problem localization and troubleshooting. Supports a combination of letters and numbers, with a maximum length of 32 characters. Ensure uniqueness.', example='e0c34a***353888'),
  transactionId?: string(name='TransactionId', description='The unique identifier for the entire authentication process. This value needs to be obtained by calling Initialize.', example='hksb7ba1b*********015d694361bee4'),
}

model CheckVerifyLogResponseBody = {
  code?: string(name='Code', description='Backend error code.', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    extInfo?: string(name='ExtInfo', description='Extended information', example='{}'),
    interruptPage?: string(name='InterruptPage', description='Records the last page where the authentication was interrupted.

- Page not started
- OCR guide page
- OCR camera authorization
- OCR document capture page
- OCR recognition loading
- OCR recognition result editing page
- OCR recognition result editing loading
- Liveness detection guide page
- Liveness detection camera authorization page
- Liveness detection page
- Liveness detection fallback page
- Liveness detection retry
- Liveness detection loading', example='OCR拍摄证件页面'),
    interruptPageEn?: string(name='InterruptPageEn', description='The page where the authentication process stops. Possible English values:

The following are the values in an unordered list:

- LOADING

- GUIDE

- FACE

- OCR_SCAN

- OCR_RESULT

- NFC_INPUT

- NFC_READ', example='LOADING'),
    logInfo?: [ string ](name='LogInfo', description='SDK operation log details'),
    logInfoEn?: [ string ](name='LogInfoEn', description='SDK Operation Log Details (English Version)'),
    logStatisticsInfo?: string(name='LogStatisticsInfo', description='SDK operation log statistics details', example='{
          "faceOverTimes": 0,
          "hasFaceOverTimes": false,
          "hasFacePermissionRefuse": false,
          "hasOcrEdit": true,
          "hasOcrEditOverTimes": false,
          "hasOcrOverTimes": true,
          "hasOcrPermissionRefuse": false,
          "ocrEditOverTimes": 0,
          "ocrEditTimes": 1,
          "ocrOverTimes": 1,
          "pageStayTimeInfo": {
            "LOADING": "1615",
            "OCR_SCAN": "37446",
            "OCR_RESULT": "1338",
            "FACE": "8707"
          }
        }'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code', example='200'),
    verifyErrorCode?: string(name='VerifyErrorCode', description='Authentication interruption error codes

- 1000: The user completed the face scanning process, and the suggested authentication result is pass
- 1001: The user completed the face scanning process, and the suggested authentication result is fail
- 1002: System error
- 1003: SDK initialization failed, please check if the client time is correct
- 1004: Camera permission error
- 1005: Network error
- 1006: User exited
- 1007: Invalid TransactionId
- 1009: Client timestamp error
- 1011: Incorrect document type submitted
- 1012: Missing or format validation failure of key information on the recognized document
- 1013: Poor image quality
- 1014: Exceeded the upper limit of errors
- 1015: Android system version too low
- 1016: Camera permission not obtained
- 9999: Suspected authentication process interruption', example='1001'),
    verifyStatus?: string(name='VerifyStatus', description='Authentication status, values:

- 0: finished (authentication completed)
- 1: unfinished (authentication interrupted)
- 2: notstart (authentication not started)', example='1'),
  }(name='Result', description='Return result.'),
}

model CheckVerifyLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckVerifyLogResponseBody(name='body'),
}

/**
 * @summary Authentication Log Query Interface
 *
 * @param request CheckVerifyLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckVerifyLogResponse
 */
@context("checkVerifyLogWithContext")
async function checkVerifyLogWithOptions(request: CheckVerifyLogRequest, runtime: $RuntimeOptions): CheckVerifyLogResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.merchantBizId)) {
    body['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.transactionId)) {
    body['TransactionId'] = request.transactionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckVerifyLog',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Authentication Log Query Interface
 *
 * @param request CheckVerifyLogRequest
 * @return CheckVerifyLogResponse
 */
async function checkVerifyLog(request: CheckVerifyLogRequest): CheckVerifyLogResponse {
  var runtime = new $RuntimeOptions{};
  return checkVerifyLogWithOptions(request, runtime);
}

model CredentialRecognitionIntlRequest {
  credentialOcrPictureBase64?: string(name='CredentialOcrPictureBase64', description='Base64 encoded image. If you choose to upload the photo via IdOcrPictureBase64 (photo Base64 encoding), please check the photo size and do not upload overly large photos.', example='base64'),
  credentialOcrPictureUrl?: string(name='CredentialOcrPictureUrl', description='Image URL, accessible over the public network via HTTP or HTTPS links.', example='https://***'),
  docType?: string(name='DocType', description='Voucher type.
- Transaction Voucher: 01 (including: water, electricity, gas, credit card, and other types of e-bill images)

This parameter is required.', example='01'),
  fraudCheck?: string(name='FraudCheck', description='Whether to enable tampering detection
- true: Enable
- false: Disable

This parameter is required.', example='true'),
  ocrArea?: string(name='OcrArea', description='Extraction type:
- 0101: E-bill Address & Name Module (extracts address and name modules through intelligent analysis)

This parameter is required.', example='0101'),
  productCode?: string(name='ProductCode', description='The product solution to be integrated. Value: CREDENTIAL_RECOGNITION.

This parameter is required.', example='CREDENTIAL_RECOGNITION'),
}

model CredentialRecognitionIntlResponseBody = {
  code?: string(name='Code', description='Return code.', example='Success'),
  message?: string(name='Message', description='Response message for the returned information.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='4EB35****87EBA1'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', description='Identified key information in JSON format.', example='{
  "address": "",
  "name":""
}'),
    subCode?: string(name='SubCode', description='Authentication result description', example='200'),
    success?: string(name='Success', description='Extraction result. Values:
- S: Success.
- F: Failure.', example='S'),
  }(name='Result', description='Returned result.'),
}

model CredentialRecognitionIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialRecognitionIntlResponseBody(name='body'),
}

/**
 * @summary Credential Recognition
 *
 * @description Detects whether a voucher (such as water, electricity, gas, credit card, etc., e-bills) is forged using AI technology and extracts key information from the voucher.
 *
 * @param request CredentialRecognitionIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CredentialRecognitionIntlResponse
 */
@context("credentialRecognitionIntlWithContext")
async function credentialRecognitionIntlWithOptions(request: CredentialRecognitionIntlRequest, runtime: $RuntimeOptions): CredentialRecognitionIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!$isNull(request.fraudCheck)) {
    query['FraudCheck'] = request.fraudCheck;
  }
  if (!$isNull(request.ocrArea)) {
    query['OcrArea'] = request.ocrArea;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.credentialOcrPictureBase64)) {
    body['CredentialOcrPictureBase64'] = request.credentialOcrPictureBase64;
  }
  if (!$isNull(request.credentialOcrPictureUrl)) {
    body['CredentialOcrPictureUrl'] = request.credentialOcrPictureUrl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CredentialRecognitionIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Credential Recognition
 *
 * @description Detects whether a voucher (such as water, electricity, gas, credit card, etc., e-bills) is forged using AI technology and extracts key information from the voucher.
 *
 * @param request CredentialRecognitionIntlRequest
 * @return CredentialRecognitionIntlResponse
 */
async function credentialRecognitionIntl(request: CredentialRecognitionIntlRequest): CredentialRecognitionIntlResponse {
  var runtime = new $RuntimeOptions{};
  return credentialRecognitionIntlWithOptions(request, runtime);
}

model CredentialVerifyIntlRequest {
  credName?: string(name='CredName', description='Credential name (numeric code):

- Starting with 03: Enterprise Qualification
  - 0301: Mainland China Business License
- Starting with 04, Transaction Voucher
  - 0401: Bank Statement
  - 0402: Pay Slip
  - 0403: Utility Bill
  - 0405: Credit Card Statement
  - 0499: Others

This parameter is required.', example='0301'),
  credType?: string(name='CredType', description='Credential type:

- 03: Enterprise Qualification
- 04: Transaction Voucher

This parameter is required.', example='03'),
  imageFile?: string(name='ImageFile', description='Image input stream.
> Choose either ImageUrl or ImageFile.', example='无'),
  imageUrl?: string(name='ImageUrl', description='The URL of the image.
> Choose either ImageUrl or ImageFile.', example='https://oss-bj01.avic.com/eavic-prod-commodity/pic/commodity/94677ee6-1067-4287-8ff4-6e030ef3a5a8.jpg'),
  productCode?: string(name='ProductCode', description='Invocation mode:
- ANTI_FAKE_CHECK: Image quality and tampering detection.

This parameter is required.', example='取值：ANTI_FAKE_CHECK'),
}

model CredentialVerifyIntlAdvanceRequest {
  credName?: string(name='CredName', description='Credential name (numeric code):

- Starting with 03: Enterprise Qualification
  - 0301: Mainland China Business License
- Starting with 04, Transaction Voucher
  - 0401: Bank Statement
  - 0402: Pay Slip
  - 0403: Utility Bill
  - 0405: Credit Card Statement
  - 0499: Others

This parameter is required.', example='0301'),
  credType?: string(name='CredType', description='Credential type:

- 03: Enterprise Qualification
- 04: Transaction Voucher

This parameter is required.', example='03'),
  imageFileObject?: readable(name='ImageFile', description='Image input stream.
> Choose either ImageUrl or ImageFile.', example='无'),
  imageUrl?: string(name='ImageUrl', description='The URL of the image.
> Choose either ImageUrl or ImageFile.', example='https://oss-bj01.avic.com/eavic-prod-commodity/pic/commodity/94677ee6-1067-4287-8ff4-6e030ef3a5a8.jpg'),
  productCode?: string(name='ProductCode', description='Invocation mode:
- ANTI_FAKE_CHECK: Image quality and tampering detection.

This parameter is required.', example='取值：ANTI_FAKE_CHECK'),
}

model CredentialVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    materialInfo?: string(name='MaterialInfo', description='Other information in JSON format.', example='{
 "sameBackgroundDetail": {
 // 相似背景对于的原始图请求RequestId
 "originalRequestId": "130A2C10-B9EE-4D84-88E3-5384FF03****";
 // 相似背景对于的原始图请求商户ID 
 "originalMerchantId": "xxxxxxxx" 
 }
}'),
    result?: string(name='Result', description='Risk result:

- **0**: Low risk
- **1**: High risk
- **2**: Suspicious', example='1'),
    riskScore?: map[string]string(name='RiskScore', description='Risk score map'),
    riskTag?: string(name='RiskTag', description='Risk tags, separated by commas (,). Includes:

- PS: Image manipulation (Photoshop)
- SCREEN_PHOTO: Screen recapture
- SCREENSHOT: Screenshot
- ORIGINAL_PHOTO: Not original image', example='PS'),
  }(name='ResultObject', description='Returned result information.'),
}

model CredentialVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Credential Verification
 *
 * @description Input credential image information, perform image quality, tampering, and forgery detection, and return the detection results.
 *
 * @param request CredentialVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CredentialVerifyIntlResponse
 */
@context("credentialVerifyIntlWithContext")
async function credentialVerifyIntlWithOptions(request: CredentialVerifyIntlRequest, runtime: $RuntimeOptions): CredentialVerifyIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.credName)) {
    query['CredName'] = request.credName;
  }
  if (!$isNull(request.credType)) {
    query['CredType'] = request.credType;
  }
  if (!$isNull(request.imageUrl)) {
    query['ImageUrl'] = request.imageUrl;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.imageFile)) {
    body['ImageFile'] = request.imageFile;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CredentialVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Credential Verification
 *
 * @description Input credential image information, perform image quality, tampering, and forgery detection, and return the detection results.
 *
 * @param request CredentialVerifyIntlRequest
 * @return CredentialVerifyIntlResponse
 */
async function credentialVerifyIntl(request: CredentialVerifyIntlRequest): CredentialVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return credentialVerifyIntlWithOptions(request, runtime);
}

async function credentialVerifyIntlAdvance(request: CredentialVerifyIntlAdvanceRequest, runtime: $RuntimeOptions): CredentialVerifyIntlResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'Cloudauth-intl',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var credentialVerifyIntlReq = new CredentialVerifyIntlRequest{};
  OpenApiUtil.convert(request, credentialVerifyIntlReq);

  if(!$isNull(request.imageFileObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageFileObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    credentialVerifyIntlReq.imageFile = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var credentialVerifyIntlResp = credentialVerifyIntlWithOptions(credentialVerifyIntlReq, runtime);
  return credentialVerifyIntlResp;
}

model DeepfakeDetectIntlRequest {
  faceBase64?: string(name='FaceBase64', description='Input the Base64 encoded format of the face image.
> Choose one of FaceUrl or FaceBase64 to input.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceInputType?: string(name='FaceInputType', description='Input **IMAGE**, indicating a face image.', example='IMAGE'),
  faceUrl?: string(name='FaceUrl', description='Input the URL address of the face image.
> Choose one of FaceUrl or FaceBase64 to input.', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  merchantBizId?: string(name='MerchantBizId', description='A unique identifier for the merchant\\\\"s request, consisting of a 32-character alphanumeric combination. The first few characters are composed of a custom abbreviation defined by the merchant, the middle part can include a period of time, and the latter part can use a random or incremental sequence.

This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c******'),
  productCode?: string(name='ProductCode', description='The product solution to be integrated. Value: **FACE_DEEPFAKE**.

This parameter is required.', example='FACE_DEEPFAKE'),
  sceneCode?: string(name='SceneCode', description='Your custom authentication scenario ID, used for querying related records by entering this scenario ID in the console later. Supports a combination of 10 characters, including letters, numbers, or underscores.', example='1234567890'),
}

model DeepfakeDetectIntlResponseBody = {
  code?: string(name='Code', description='Return code: 200 indicates a successful request, any other value indicates failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    result?: string(name='Result', description='Risk result:

- **0**: Low risk
- **1**: High risk
- **2**: Suspicious', example='1'),
    riskScore?: map[string]string(name='RiskScore', description='Risk score map.'),
    riskTag?: string(name='RiskTag', description='Risk tags. Multiple tags are separated by commas (,). Includes:

- **SuspectDeepForgery** Suspected deep forgery  
- **SuspectPSFace** Suspected synthetic attack  
- **SuspectWarterMark** Suspected watermark presence  
- **SuspectTemple** Suspected template attack  
- **SuspectAIGCFace**  Suspected generated face  
- **SuspectRemake**  Suspected rephotographed face', example='SuspectDeepForgery,SuspectWarterMark'),
  }(name='ResultObject', description='Returned result information.'),
}

model DeepfakeDetectIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeDetectIntlResponseBody(name='body'),
}

/**
 * @summary Face Credential Verification
 *
 * @description Input a face image and use the algorithm to detect if there is a risk of deep forgery. This includes risk scenarios such as AIGC-generated faces, deepfake face swapping, template faces, and rephotographed faces, and outputs risk labels and confidence levels.
 *
 * @param request DeepfakeDetectIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeepfakeDetectIntlResponse
 */
@context("deepfakeDetectIntlWithContext")
async function deepfakeDetectIntlWithOptions(request: DeepfakeDetectIntlRequest, runtime: $RuntimeOptions): DeepfakeDetectIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.faceInputType)) {
    query['FaceInputType'] = request.faceInputType;
  }
  if (!$isNull(request.faceUrl)) {
    query['FaceUrl'] = request.faceUrl;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.faceBase64)) {
    body['FaceBase64'] = request.faceBase64;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeepfakeDetectIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Face Credential Verification
 *
 * @description Input a face image and use the algorithm to detect if there is a risk of deep forgery. This includes risk scenarios such as AIGC-generated faces, deepfake face swapping, template faces, and rephotographed faces, and outputs risk labels and confidence levels.
 *
 * @param request DeepfakeDetectIntlRequest
 * @return DeepfakeDetectIntlResponse
 */
async function deepfakeDetectIntl(request: DeepfakeDetectIntlRequest): DeepfakeDetectIntlResponse {
  var runtime = new $RuntimeOptions{};
  return deepfakeDetectIntlWithOptions(request, runtime);
}

model DeleteVerifyResultRequest {
  deleteAfterQuery?: string(name='DeleteAfterQuery', description='Whether to depend on the query interface when deleting data', example='Y / N'),
  deleteType?: string(name='DeleteType', description='Type of data to be deleted', example='Img / Text / All'),
  transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='4ab0b***cbde97'),
}

model DeleteVerifyResultResponseBody = {
  code?: string(name='Code', description='Return code', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of this request', example='4EB35****87EBA1'),
  result?: {
    deleteResult?: string(name='DeleteResult', description='Deletion result. Y indicates successful deletion, N indicates failed deletion', example='Y/N'),
    transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='4ab0b***cbde97'),
  }(name='Result', description='Return result'),
}

model DeleteVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVerifyResultResponseBody(name='body'),
}

/**
 * @summary Delete user authentication record results
 *
 * @param request DeleteVerifyResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVerifyResultResponse
 */
@context("deleteVerifyResultWithContext")
async function deleteVerifyResultWithOptions(request: DeleteVerifyResultRequest, runtime: $RuntimeOptions): DeleteVerifyResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.deleteAfterQuery)) {
    query['DeleteAfterQuery'] = request.deleteAfterQuery;
  }
  if (!$isNull(request.deleteType)) {
    query['DeleteType'] = request.deleteType;
  }
  if (!$isNull(request.transactionId)) {
    query['TransactionId'] = request.transactionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteVerifyResult',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete user authentication record results
 *
 * @param request DeleteVerifyResultRequest
 * @return DeleteVerifyResultResponse
 */
async function deleteVerifyResult(request: DeleteVerifyResultRequest): DeleteVerifyResultResponse {
  var runtime = new $RuntimeOptions{};
  return deleteVerifyResultWithOptions(request, runtime);
}

model DocOcrRequest {
  cardSide?: string(name='CardSide', description='CardSide', example='0'),
  docType?: string(name='DocType', description='Document type', example='00000006'),
  idFaceQuality?: string(name='IdFaceQuality', description='Whether to perform ID face quality detection
- T: Indicates that detection is required
- F: Indicates that detection is not required (default F)', example='F'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Base64 of the front side of the document image', example='base64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='URL of the front side of the document image', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idThreshold?: string(name='IdThreshold', description='IdThreshold', example='0'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure uniqueness.', example='dso9322***dsjsd22'),
  merchantUserId?: string(name='MerchantUserId', description='A custom user ID in the business, please keep it unique.', example='123456789'),
  ocr?: string(name='Ocr', description='Whether to perform document OCR
- T: Indicates that document OCR is required
- F: Indicates that document OCR is not required', example='T'),
  productCode?: string(name='ProductCode', description='Product code', example='产品方案类型ID_OCR_MIN'),
  spoof?: string(name='Spoof', description='Whether to enable anti-counterfeiting detection
- T: Indicates that anti-counterfeiting is enabled
- F: Indicates that anti-counterfeiting is disabled', example='F'),
}

model DocOcrResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='86C40EC3-5940-5F47-995C-BFE90B70E540'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', description='Card and document recognition result	Only returned when the interface response is successful', example='{
  "idFaceQualityScore": 98.0
  "ocrIdInfo": {
    "expiryDate": "",
    "originOfIssue": "公安部出入境管理局",
    "englishName": "LI SI",
    "sex": "男",
    "name": "李四",
    "idNumber": "H11111112",
    "issueDate": "2013-01-02",
    "birthDate": "1990-02-21"
  },
  "spoofInfo": {
    "spoofResult": "Y",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed
- N: Not passed', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code', example='200'),
    transactionId?: string(name='TransactionId', description='Unique identifier of the authentication request', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Return result'),
}

model DocOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrResponseBody(name='body'),
}

/**
 * @summary Card and document OCR pure server-side
 *
 * @param request DocOcrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocOcrResponse
 */
@context("docOcrWithContext")
async function docOcrWithOptions(request: DocOcrRequest, runtime: $RuntimeOptions): DocOcrResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.cardSide)) {
    query['CardSide'] = request.cardSide;
  }
  if (!$isNull(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!$isNull(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!$isNull(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!$isNull(request.idThreshold)) {
    query['IdThreshold'] = request.idThreshold;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.spoof)) {
    query['Spoof'] = request.spoof;
  }
  var body : map[string]any = {};
  if (!$isNull(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DocOcr',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Card and document OCR pure server-side
 *
 * @param request DocOcrRequest
 * @return DocOcrResponse
 */
async function docOcr(request: DocOcrRequest): DocOcrResponse {
  var runtime = new $RuntimeOptions{};
  return docOcrWithOptions(request, runtime);
}

model DocOcrMaxRequest {
  docPage?: string(name='DocPage', description='Page expected to be recognized

- 01 (default): ID portrait.

- 02: Back of the certificate', example='01'),
  docType?: string(name='DocType', description='Document type.
Format: Country (region) code + document type abbreviation + page (optional)
Note: If provided, it will automatically check if it matches the model recognition result; if empty, the document type will be returned after model recognition.', example='CNSSC01'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64', description='Document image, base64 encoded binary stream', example='base64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='Document image URL', example='https://***********.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idSpoof?: string(name='IdSpoof', description='Whether to turn on the certificate anti-counterfeiting function:

- T: open

- F (default): not turned on.', example='F'),
  idThreshold?: string(name='IdThreshold', description='Custom OCR quality detection threshold mode:

- 0: System default
- 1: Strict mode
- 2: Lenient mode
- 3 (default): Disable quality detection', example='0'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier defined by the merchant, used for subsequent problem localization and troubleshooting. It supports a combination of letters and numbers, with a maximum length of 32 characters. Please ensure its uniqueness.', example='e0c34a77f5ac40a5aa5e6ed20c******'),
  merchantUserId?: string(name='MerchantUserId', description='Your custom user ID or other identifiers that can uniquely identify a specific user, such as a phone number or email address. It is strongly recommended to pre-desensitize the value of this field, for example, by hashing it.', example='123456789'),
  ocrModel?: string(name='OcrModel', description='OCR recognition mode.
0: General document mode.
1: Custom mode.', example='0'),
  productCode?: string(name='ProductCode', description='The product solution to be integrated.

Value: ID_OCR_MAX', example='ID_OCR_MAX'),
  prompt?: string(name='Prompt', description='Prompt (for custom mode)', example='xxxocr识别'),
  sceneCode?: string(name='SceneCode', description='Custom scene code, used to distinguish business scenarios, a 10-digit number.', example='1234567890'),
  spoof?: string(name='Spoof', description='Whether to enable document anti-counterfeiting function, default is not enabled.

- T: Enable document anti-counterfeiting function.
- F: Do not enable.', example='F'),
}

model DocOcrMaxResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='4EB35****87EBA1'),
  result?: {
    extIdInfo?: string(name='ExtIdInfo', description='Card and document recognition result	Only returned when the interface response is successful', example='{
  "docType": "PPTW01",
  "ocrIdInfo": {
    "passportNo": "36*******",
    "expiryDate": "2032/02/10",
    "placeOfBirth": "TAIWAN",
    "surname": "CHEN",
    "givenname": "LIN-CHUN",
    "countryCode": "TWN",
    "sex": "F",
    "personalNo": "S22********",
    "issueDate": "2022/02/10",
    "birthDate": "1988/10/04"
  }
}'),
    passed?: string(name='Passed', description='Whether the authentication passed.

- Y: Passed.
- N: Not passed.', example='Y'),
    subCode?: string(name='SubCode', description='Sub-result code.', example='200'),
    transactionId?: string(name='TransactionId', description='Authentication ID', example='hk573be80f944d95ac812e0*******a8'),
  }(name='Result', description='Return result'),
}

model DocOcrMaxResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocOcrMaxResponseBody(name='body'),
}

/**
 * @summary Global Document OCR Recognition Interface
 *
 * @param request DocOcrMaxRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocOcrMaxResponse
 */
@context("docOcrMaxWithContext")
async function docOcrMaxWithOptions(request: DocOcrMaxRequest, runtime: $RuntimeOptions): DocOcrMaxResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.docPage)) {
    body['DocPage'] = request.docPage;
  }
  if (!$isNull(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!$isNull(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  if (!$isNull(request.idOcrPictureUrl)) {
    body['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!$isNull(request.idSpoof)) {
    body['IdSpoof'] = request.idSpoof;
  }
  if (!$isNull(request.idThreshold)) {
    body['IdThreshold'] = request.idThreshold;
  }
  if (!$isNull(request.merchantBizId)) {
    body['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    body['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.ocrModel)) {
    body['OcrModel'] = request.ocrModel;
  }
  if (!$isNull(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!$isNull(request.sceneCode)) {
    body['SceneCode'] = request.sceneCode;
  }
  if (!$isNull(request.spoof)) {
    body['Spoof'] = request.spoof;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DocOcrMax',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Global Document OCR Recognition Interface
 *
 * @param request DocOcrMaxRequest
 * @return DocOcrMaxResponse
 */
async function docOcrMax(request: DocOcrMaxRequest): DocOcrMaxResponse {
  var runtime = new $RuntimeOptions{};
  return docOcrMaxWithOptions(request, runtime);
}

model EkycVerifyRequest {
  authorize?: string(name='Authorize', description='Specifies whether to enable identity verification against the official database:

- **T**: Enable.

- **F**: Disable. (Default)

> This feature is currently available only for second-generation resident ID cards of the Chinese mainland.', example='T'),
  crop?: string(name='Crop', description='Specifies whether to crop the face image:

- **T**: Allows cropping.

- **F**: Disallows cropping. (Default)', example='F'),
  docName?: string(name='DocName', description='The user\\\\"s real name.

> If Authorize is set to T and the certificate type is Chinese mainland resident ID card, you must enter at least one of the following groups of information:
> - DocName and DocNo.
> - IdOcrPictureBase64 or IdOcrPictureUrl.', example='Zhang San'),
  docNo?: string(name='DocNo', description='The user\\\\"s certificate number.


> If Authorize is set to **T** and the certificate type is Chinese mainland resident ID card, you must enter at least one of the following groups of information:
> - DocName and DocNo.
> - IdOcrPictureBase64 or IdOcrPictureUrl.', example='410***************'),
  docType?: string(name='DocType', description='The certificate type, which is uniquely identified by an 8-digit number. For more information, see [Certificate types](https://www.alibabacloud.com/help/en/ekyc/latest/im1u641gyesiqmbg?spm=a2c63.p38356.0.i18#Hu5TG).', example='00000001'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', description='The URL of the portrait image. The URL must be an HTTP or HTTPS link accessible over the Internet.', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idOcrPictureBase64?: string(name='IdOcrPictureBase64'),
  idOcrPictureUrl?: string(name='IdOcrPictureUrl', description='The URL of the certificate image. The URL must be an HTTP or HTTPS link accessible over the Internet.', example='https://digital-cardocr-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  idThreshold?: string(name='IdThreshold', description='The custom OCR quality detection threshold mode:

- **0**: Standard mode

- **1**: Strict mode

- **2**: Loose mode

- **3** (default): Disables quality detection', example='0'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier that you customize. It is used to locate and troubleshoot issues. The identifier can be up to 32 characters in length and can contain letters and digits. Make sure that the identifier is unique.', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', description='A custom user ID or another identifier that can identify a specific user, such as a mobile number or an email address. Desensitize the value of this field in advance, for example, by hashing the value.', example='123456'),
  productCode?: string(name='ProductCode', description='The product solution to integrate. Set the value to **eKYC_MIN**.', example='eKYC_MIN'),
}

model EkycVerifyResponseBody = {
  code?: string(name='Code', description='The [response code](https://www.alibabacloud.com/help/en/ekyc/latest/im1u641gyesiqmbg?spm=a2c63.p38356.0.i18#GiGmf).', example='Success'),
  message?: string(name='Message', description='A detailed description of the response code.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    extFaceInfo?: string(name='ExtFaceInfo', description='Information about the face liveness verification result. For the JSON format, see the example on the right. For more information, see [ExtFaceInfo](https://www.alibabacloud.com/help/en/ekyc/latest/im1u641gyesiqmbg?spm=a2c63.p38356.0.i18#JJ40j).', example='{
"faceAttack": "N",
"faceComparisonScore": 52.57,
"facePassed": "N",
"authorityComparisonScore": 80.39
}'),
    extIdInfo?: string(name='ExtIdInfo', description='Information about the certificate detection result.

For the JSON format, see the example on the right. For more information, see [ExtIdInfo](https://www.alibabacloud.com/help/en/ekyc/latest/im1u641gyesiqmbg?spm=a2c63.p38356.0.i18#iWOBY).', example='{
  "ocrIdInfo": {
    "expiryDate": "",
    "originOfIssue": "Exit and Entry Administration of the Ministry of Public Security",
    "englishName": "LI SI",
    "sex": "Male",
    "name": "Li Si",
    "idNumber": "H11111112",
    "issueDate": "2013-01-02",
    "birthDate": "1990-02-21"
  },
  "ocrIdPassed": "N",
  "spoofInfo": {
    "spoofResult": "Y",
    "spoofType": [
      "SCREEN_REMARK"
    ]
  }
}'),
    passed?: string(name='Passed', description='The final authentication result. Valid values:

- **Y**: The authentication is passed.

- **N**: The authentication fails.', example='Y'),
    subCode?: string(name='SubCode', description='A description of the authentication result. For more information, see [Error codes for ResultObject.SubCode](https://www.alibabacloud.com/help/en/ekyc/latest/im1u641gyesiqmbg?spm=a2c63.p38356.0.i18#HCGLb).', example='205'),
    transactionId?: string(name='TransactionId', description='The transaction ID.', example='4ab0b***cbde97'),
  }(name='Result', description='Result object'),
}

model EkycVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EkycVerifyResponseBody(name='body'),
}

/**
 * @summary This topic describes how to integrate with ID Verification using only the server-side API.
 *
 * @param request EkycVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EkycVerifyResponse
 */
@context("ekycVerifyWithContext")
async function ekycVerifyWithOptions(request: EkycVerifyRequest, runtime: $RuntimeOptions): EkycVerifyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!$isNull(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!$isNull(request.docName)) {
    query['DocName'] = request.docName;
  }
  if (!$isNull(request.docNo)) {
    query['DocNo'] = request.docNo;
  }
  if (!$isNull(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!$isNull(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!$isNull(request.idOcrPictureUrl)) {
    query['IdOcrPictureUrl'] = request.idOcrPictureUrl;
  }
  if (!$isNull(request.idThreshold)) {
    query['IdThreshold'] = request.idThreshold;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  if (!$isNull(request.idOcrPictureBase64)) {
    body['IdOcrPictureBase64'] = request.idOcrPictureBase64;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EkycVerify',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary This topic describes how to integrate with ID Verification using only the server-side API.
 *
 * @param request EkycVerifyRequest
 * @return EkycVerifyResponse
 */
async function ekycVerify(request: EkycVerifyRequest): EkycVerifyResponse {
  var runtime = new $RuntimeOptions{};
  return ekycVerifyWithOptions(request, runtime);
}

model FaceCompareRequest {
  facePictureQualityCheck?: string(name='FacePictureQualityCheck', description='是否开启传入人脸图片质量检测', example='N'),
  merchantBizId?: string(name='MerchantBizId', description='A custom unique business ID used for troubleshooting. It can be a combination of up to 32 letters and digits. Make sure that the ID is unique.', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  sourceFacePicture?: string(name='SourceFacePicture'),
  sourceFacePictureUrl?: string(name='SourceFacePictureUrl', description='The URL of the portrait photo. The URL must be an HTTP or HTTPS link accessible over the Internet.

> You must specify either SourceFacePicture or SourceFacePictureUrl.', example='https://***face1.jpeg'),
  targetFacePicture?: string(name='TargetFacePicture'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', description='The URL of the base portrait photo. The URL must be an HTTP or HTTPS link accessible over the Internet.



> You must specify either TargetFacePicture or TargetFacePictureUrl.', example='https://***face2.jpeg'),
}

model FaceCompareResponseBody = {
  code?: string(name='Code', description='The [response code](https://www.alibabacloud.com/help/en/ekyc/latest/facecompare?spm=a3c0i.23458820.2359477120.28.21167d3fzUmXQC#c43fd16d07mae).', example='200'),
  message?: string(name='Message', description='The detailed description of the response code.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB356FE-BB6A-5DCC-B4C5-E8051787EBA1'),
  result?: {
    faceComparisonScore?: double(name='FaceComparisonScore', description='The face comparison score. The value ranges from 0 to 100.', example='98'),
    passed?: string(name='Passed', description='The final authentication result. Valid values:

- **Y**: The authentication is passed.

- **N**: The authentication failed.', example='Y'),
    transactionId?: string(name='TransactionId', description='The transaction ID.', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Result object'),
}

model FaceCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceCompareResponseBody(name='body'),
}

/**
 * @summary This topic describes how to integrate FaceCompare using only the server-side API.
 *
 * @param request FaceCompareRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceCompareResponse
 */
@context("faceCompareWithContext")
async function faceCompareWithOptions(request: FaceCompareRequest, runtime: $RuntimeOptions): FaceCompareResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.facePictureQualityCheck)) {
    query['FacePictureQualityCheck'] = request.facePictureQualityCheck;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.sourceFacePictureUrl)) {
    query['SourceFacePictureUrl'] = request.sourceFacePictureUrl;
  }
  if (!$isNull(request.targetFacePictureUrl)) {
    query['TargetFacePictureUrl'] = request.targetFacePictureUrl;
  }
  var body : map[string]any = {};
  if (!$isNull(request.sourceFacePicture)) {
    body['SourceFacePicture'] = request.sourceFacePicture;
  }
  if (!$isNull(request.targetFacePicture)) {
    body['TargetFacePicture'] = request.targetFacePicture;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'FaceCompare',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary This topic describes how to integrate FaceCompare using only the server-side API.
 *
 * @param request FaceCompareRequest
 * @return FaceCompareResponse
 */
async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  var runtime = new $RuntimeOptions{};
  return faceCompareWithOptions(request, runtime);
}

model FaceGuardRiskRequest {
  bizId?: string(name='BizId', description='The unique ID of the current business authentication. It is used with FACE_GUARD for verification during queries.', example='LMALL20******001'),
  deviceToken?: string(name='DeviceToken', description='The deviceToken obtained from the client SDK.', example='Tk9SSUQuMS*****************ZDNmNWY5NzQxOW1o'),
  merchantBizId?: string(name='MerchantBizId', description='A custom unique business identifier. It is used to locate and troubleshoot issues. The identifier can be a combination of letters and digits up to 32 characters long. Ensure that it is unique.', example='0c83ce0101d34eff886b1f7d1cdef67f'),
  productCode?: string(name='ProductCode', description='The product code. Set this to the static field **FACE_GUARD**.', example='FACE_GUARD'),
}

model FaceGuardRiskResponseBody = {
  code?: string(name='Code', description='The return code. A value of Success indicates that the API operation responded successfully. For more information about how to determine the authentication result, expand the **Return codes** section below.', example='Success'),
  message?: string(name='Message', description='A detailed description of the return code.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='595E387B-3F0E-5C52-BD02-8EFE63D41FD5'),
  result?: {
    guardRiskScore?: double(name='GuardRiskScore', description='The device risk probability predicted by the Device Guard algorithm. A higher score indicates a higher device risk.

Valid values: 0 to 100.', example='0'),
    riskExtends?: string(name='RiskExtends', description='Extended information. This is empty by default.', example='{
  "code": 200
  "message":"success"
  "umid":"07d3295d3d597b425d102a7f********",
  "sip":"198.51.100.1",
  "durationMs" : 4968931
  "queryCount":1,
  "querySessionCount":1,
  "queryUmidCount":1
  "platform":"Android
}'),
    riskTags?: string(name='RiskTags', description='The device risk tags. Multiple risk tags are separated by commas (**,**). For more information about the risk tags and their meanings, expand the **Risk tags (RiskTags)** section below.', example='ROOT,VPN,HOOK'),
    transactionId?: string(name='TransactionId', description='The transaction ID.', example='hk573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Result object'),
}

model FaceGuardRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceGuardRiskResponseBody(name='body'),
}

/**
 * @summary This topic describes how to set up the server for FACE_GUARD.
 *
 * @param request FaceGuardRiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceGuardRiskResponse
 */
@context("faceGuardRiskWithContext")
async function faceGuardRiskWithOptions(request: FaceGuardRiskRequest, runtime: $RuntimeOptions): FaceGuardRiskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!$isNull(request.deviceToken)) {
    query['DeviceToken'] = request.deviceToken;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'FaceGuardRisk',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary This topic describes how to set up the server for FACE_GUARD.
 *
 * @param request FaceGuardRiskRequest
 * @return FaceGuardRiskResponse
 */
async function faceGuardRisk(request: FaceGuardRiskRequest): FaceGuardRiskResponse {
  var runtime = new $RuntimeOptions{};
  return faceGuardRiskWithOptions(request, runtime);
}

model FaceLivenessRequest {
  crop?: string(name='Crop', description='Specifies whether to crop the facial image. The default value is F.

- **T**: allows cropping.

- **F**: Forbidden', example='T'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', description='The URL of the portrait image. The URL must be an HTTP or HTTPS link accessible over the Internet.', example='https://digital-face-prod8.oss-cn-hangzhou.aliyuncs.com/1669520556530-expo/default/face/20221127114236530_w3kx2e6t.jpg'),
  faceQuality?: string(name='FaceQuality', description='Specifies whether to return the facial image quality score. The default value is F.

- **T**: returns the score.

- **F**: does not return the score.', example='T'),
  merchantBizId?: string(name='MerchantBizId', description='A custom unique business identifier. You can use this identifier to track and troubleshoot issues. The identifier can be up to 32 characters in length and can contain letters and digits. Make sure the identifier is unique.

> Alibaba Cloud servers do not check the uniqueness of this value. For better tracking, ensure this value is unique.', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  merchantUserId?: string(name='MerchantUserId', description='A  custom user ID or another identifier for a specific user, such as a mobile number or email address. For security, desensitize this value in advance, for example, by hashing it.', example='123456789'),
  occlusion?: string(name='Occlusion', description='Specifies whether to enable occlusion detection. The default value is F.

- **T**: enables the feature.

- **F**: disables the feature.', example='T'),
  productCode?: string(name='ProductCode', description='The product solution to use. Set the value to **FACE_LIVENESS_MIN** to use the passive liveness detection API.', example='FACE_LIVENESS_MIN'),
}

model FaceLivenessResponseBody = {
  code?: string(name='Code', description='[The response code.](https://www.alibabacloud.com/help/en/ekyc/latest/cadqvlft48igbpdc?spm=a2c63.p38356.0.i54#3d0ed52f967g6)', example='Success'),
  message?: string(name='Message', description='A detailed description of the response code.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='42EA58CA-5DF4-55D5-82C4-5E7A40DA62BA'),
  result?: {
    extFaceInfo?: {
      faceAge?: int32(name='FaceAge', description='The predicted age of the person in the image. The prediction may fail, resulting in an empty value.', example='18'),
      faceAttack?: string(name='FaceAttack', description='Indicates whether a presentation attack was detected on the captured face. Y means an attack was detected. N means no attack was detected.', example='Y'),
      faceGender?: string(name='FaceGender', description='The predicted gender of the person in the image. The prediction may fail, resulting in an empty value.

- **M**: Male

- **F**: Female', example='M'),
      faceQualityScore?: double(name='FaceQualityScore', description='Optional. The quality score of the live face. The value ranges from 0 to 100.', example='87.19'),
      occlusionResult?: string(name='OcclusionResult', description='Optional. Indicates whether the face is occluded. Y means the face is occluded. N means the face is not occluded.', example='Y'),
    }(name='ExtFaceInfo', description='The results of the passive liveness detection. The value is in the JSON format. For more information, see [ExtFaceInfo](https://www.alibabacloud.com/help/en/ekyc/latest/cadqvlft48igbpdc?spm=a2c63.p38356.0.i54#5ff42f7274agz).'),
    passed?: string(name='Passed', description='The authentication result. Valid values:

- Y: The authentication is passed.

- N: The authentication is not passed.', example='N'),
    subCode?: string(name='SubCode', description='The code that corresponds to the verification result. For more information, see [ResultObject.SubCode error codes](https://www.alibabacloud.com/help/en/ekyc/latest/cadqvlft48igbpdc?spm=a2c63.p38356.0.i54#5ff3e16174tl2).', example='205'),
    transactionId?: string(name='TransactionId', description='The transaction ID.', example='08573be80f944d95ac812e019e3655a8'),
  }(name='Result', description='Result object'),
}

model FaceLivenessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceLivenessResponseBody(name='body'),
}

/**
 * @summary Passive liveness detection (FaceLiveness) is a service that detects whether a pre-captured facial image, submitted to an API operation, is a real face. The algorithm primarily detects presentation attacks, such as screen replays and printed photos. This service is suitable for low-risk business scen
 *
 * @param request FaceLivenessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceLivenessResponse
 */
@context("faceLivenessWithContext")
async function faceLivenessWithOptions(request: FaceLivenessRequest, runtime: $RuntimeOptions): FaceLivenessResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!$isNull(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!$isNull(request.faceQuality)) {
    query['FaceQuality'] = request.faceQuality;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.occlusion)) {
    query['Occlusion'] = request.occlusion;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var body : map[string]any = {};
  if (!$isNull(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'FaceLiveness',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Passive liveness detection (FaceLiveness) is a service that detects whether a pre-captured facial image, submitted to an API operation, is a real face. The algorithm primarily detects presentation attacks, such as screen replays and printed photos. This service is suitable for low-risk business scen
 *
 * @param request FaceLivenessRequest
 * @return FaceLivenessResponse
 */
async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  var runtime = new $RuntimeOptions{};
  return faceLivenessWithOptions(request, runtime);
}

model FraudResultCallBackRequest {
  certifyId?: string(name='CertifyId', description='Unique identifier for real-person authentication, corresponding to Ant\\\\"s verifyId.', example='shs2b27333914876c01de4cb22f5841f'),
  extParams?: string(name='ExtParams', description='Extended parameters, in JSON string format.', example='{}'),
  resultCode?: string(name='ResultCode', description='Whether the anti-fraud check passed
- PASS (Passed)
- REJECT (Rejected)', example='PASS'),
  verifyDeployEnv?: string(name='VerifyDeployEnv', description='Environment routing parameter
- staging (Staging environment)
- production (Production environment)', example='production'),
}

model FraudResultCallBackResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='4EB35****87EBA1'),
  success?: boolean(name='Success', description='Whether the call was successful.
- **true**: Call succeeded.
- **false**: Call failed.', example='true'),
}

model FraudResultCallBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FraudResultCallBackResponseBody(name='body'),
}

/**
 * @summary Anti-Fraud Callback Interface
 *
 * @param request FraudResultCallBackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FraudResultCallBackResponse
 */
@context("fraudResultCallBackWithContext")
async function fraudResultCallBackWithOptions(request: FraudResultCallBackRequest, runtime: $RuntimeOptions): FraudResultCallBackResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.certifyId)) {
    query['CertifyId'] = request.certifyId;
  }
  if (!$isNull(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!$isNull(request.resultCode)) {
    query['ResultCode'] = request.resultCode;
  }
  if (!$isNull(request.verifyDeployEnv)) {
    query['VerifyDeployEnv'] = request.verifyDeployEnv;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'FraudResultCallBack',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Anti-Fraud Callback Interface
 *
 * @param request FraudResultCallBackRequest
 * @return FraudResultCallBackResponse
 */
async function fraudResultCallBack(request: FraudResultCallBackRequest): FraudResultCallBackResponse {
  var runtime = new $RuntimeOptions{};
  return fraudResultCallBackWithOptions(request, runtime);
}

model Id2MetaPeriodVerifyIntlRequest {
  docName?: string(name='DocName', description='The user\\\\"s name.

This parameter is required.', example='Zhang San'),
  docNo?: string(name='DocNo', description='The user\\\\"s certificate number.

This parameter is required.', example='411xxxxxxxxxxx0001'),
  docType?: string(name='DocType', description='The certificate type, which is uniquely identified by an 8-digit number.

Currently, only second-generation resident ID cards from the Chinese mainland are supported. Set the value to the static field: **00000001**.

For more information, see [Certificate types](https://www.alibabacloud.com/help/en/ekyc/latest/im1u641gyesiqmbg?spm=a2c63.p38356.0.i13#Hu5TG).

This parameter is required.', example='​00000001'),
  merchantBizId?: string(name='MerchantBizId', description='A unique business identifier that you can customize. Use this identifier to locate and troubleshoot issues. The identifier can be up to 32 characters in length and can contain letters and digits. Make sure that the identifier is unique.

This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c35****'),
  merchantUserId?: string(name='MerchantUserId', description='A custom user ID or another identifier for a specific user, such as a mobile number or email address. Desensitize the value of this field in advance, for example, by hashing the value.', example='1234567890'),
  productCode?: string(name='ProductCode', description='The product solution to integrate. Set the value to **eKYC_Date_MIN**.

This parameter is required.', example='eKYC_Date_MIN'),
  sceneCode?: string(name='SceneCode', description='A custom authentication scenario ID. You can use this ID to query related records in the console. The ID can be up to 10 characters in length and can contain letters, digits, and underscores (_).', example='1234567890'),
  validityEndDate?: string(name='ValidityEndDate', description='The expiration date of the ID card\\\\"s validity period. The format is YYYYMMDD.

> If the ID card is valid for a long term, enter **long-term** for this parameter.

This parameter is required.', example='20301001'),
  validityStartDate?: string(name='ValidityStartDate', description='The start date of the validity period. The format is YYYYMMDD.

This parameter is required.', example='20201001'),
}

model Id2MetaPeriodVerifyIntlResponseBody = {
  code?: string(name='Code', description='[Return to Code](https://www.alibabacloud.com/help/en/ekyc/latest/dateverify?spm=a2c63.p38356.0.i32#22facb6ab6ui1).', example='success'),
  message?: string(name='Message', description='A detailed description of the response code.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='7B97D932-7FF5-517D-BF39-7CA1BEE3CDD9'),
  result?: {
    passed?: string(name='Passed', description='The final authentication result. Valid values:

- **Y**, via

- **N**: The authentication is not passed.', example='Y'),
    subCode?: string(name='SubCode', description='A description of the authentication result. For more information, see [ResultObject.SubCode error codes](https://www.alibabacloud.com/help/en/ekyc/latest/dateverify?spm=a2c63.p38356.0.i32#d1f36d445az8i).', example='200'),
  }(name='Result', description='Return result'),
}

model Id2MetaPeriodVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaPeriodVerifyIntlResponseBody(name='body'),
}

/**
 * @summary This operation verifies the authenticity and consistency of a name, ID card number, and the start and end dates of the ID card\\"s validity period against an authoritative source.
 *
 * @param request Id2MetaPeriodVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Id2MetaPeriodVerifyIntlResponse
 */
@context("id2MetaPeriodVerifyIntlWithContext")
async function id2MetaPeriodVerifyIntlWithOptions(request: Id2MetaPeriodVerifyIntlRequest, runtime: $RuntimeOptions): Id2MetaPeriodVerifyIntlResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.docName)) {
    body['DocName'] = request.docName;
  }
  if (!$isNull(request.docNo)) {
    body['DocNo'] = request.docNo;
  }
  if (!$isNull(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!$isNull(request.merchantBizId)) {
    body['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    body['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.sceneCode)) {
    body['SceneCode'] = request.sceneCode;
  }
  if (!$isNull(request.validityEndDate)) {
    body['ValidityEndDate'] = request.validityEndDate;
  }
  if (!$isNull(request.validityStartDate)) {
    body['ValidityStartDate'] = request.validityStartDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'Id2MetaPeriodVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary This operation verifies the authenticity and consistency of a name, ID card number, and the start and end dates of the ID card\\"s validity period against an authoritative source.
 *
 * @param request Id2MetaPeriodVerifyIntlRequest
 * @return Id2MetaPeriodVerifyIntlResponse
 */
async function id2MetaPeriodVerifyIntl(request: Id2MetaPeriodVerifyIntlRequest): Id2MetaPeriodVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return id2MetaPeriodVerifyIntlWithOptions(request, runtime);
}

model Id2MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', description='The ID card number.

> Only ID cards of residents in the Chinese mainland are supported.', example='429001********8211'),
  paramType?: string(name='ParamType', description='The parameter type.

**normal**: The original value in plaintext.

> Due to limitations of the authoritative data source, two-factor ID verification does not support MD5 encryption.', example='normal'),
  productCode?: string(name='ProductCode', description='The product plan. This is a static field. Set the value to **ID_2META**.', example='ID_2META'),
  userName?: string(name='UserName', description='The name.', example='Zhang*'),
}

model Id2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='[Status codes](https://www.alibabacloud.com/help/en/ekyc/latest/ok4bwxwmu1n94o76?spm=a2c63.p38356.0.i54#942707fca218x).', example='Success'),
  message?: string(name='Message', description='The detailed description of the response code.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='EFA11401-C961-5E89-A2D3-BF9883E5CC3D'),
  result?: {
    bizCode?: string(name='BizCode', description='The verification result:

- 1: The information is consistent. This result is billable.

- 2: The information is inconsistent. This result is billable.

- 3: No record is found. This result is not billable.', example='1'),
  }(name='Result', description='Return result'),
}

model Id2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Verifies that a name and an ID card number are consistent.
 *
 * @param request Id2MetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Id2MetaVerifyIntlResponse
 */
@context("id2MetaVerifyIntlWithContext")
async function id2MetaVerifyIntlWithOptions(request: Id2MetaVerifyIntlRequest, runtime: $RuntimeOptions): Id2MetaVerifyIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!$isNull(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'Id2MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Verifies that a name and an ID card number are consistent.
 *
 * @param request Id2MetaVerifyIntlRequest
 * @return Id2MetaVerifyIntlResponse
 */
async function id2MetaVerifyIntl(request: Id2MetaVerifyIntlRequest): Id2MetaVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return id2MetaVerifyIntlWithOptions(request, runtime);
}

model InitializeRequest {
  appQualityCheck?: string(name='AppQualityCheck'),
  authorize?: string(name='Authorize'),
  autoRegistration?: string(name='AutoRegistration', example='0'),
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  chameleonFrameEnable?: string(name='ChameleonFrameEnable'),
  crop?: string(name='Crop', example='*'),
  dateOfBirth?: string(name='DateOfBirth'),
  dateOfExpiry?: string(name='DateOfExpiry'),
  docName?: string(name='DocName'),
  docNo?: string(name='DocNo'),
  docPageConfig?: [ string ](name='DocPageConfig'),
  docScanMode?: string(name='DocScanMode'),
  docType?: string(name='DocType', example='01000000'),
  docVideo?: string(name='DocVideo'),
  documentNumber?: string(name='DocumentNumber'),
  editOcrResult?: string(name='EditOcrResult'),
  experienceCode?: string(name='ExperienceCode'),
  faceGroupCodes?: string(name='FaceGroupCodes', example='0e0c34a77f'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='***'),
  faceRegisterGroupCode?: string(name='FaceRegisterGroupCode', example='0e0c34a77f'),
  faceVerifyThreshold?: string(name='FaceVerifyThreshold', example='0.5'),
  idFaceQuality?: string(name='IdFaceQuality', example='*'),
  idSpoof?: string(name='IdSpoof', example='Y'),
  idThreshold?: string(name='IdThreshold'),
  languageConfig?: string(name='LanguageConfig'),
  MRTDInput?: string(name='MRTDInput'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543'),
  metaInfo?: string(name='MetaInfo', example='{\\\\"bioMetaInfo\\\\":\\\\"4.1.0:2916352,0\\\\",\\\\"deviceType\\\\":\\\\"web\\\\",\\\\"ua\\\\":\\\\"Mozilla/5.0 (Macintosh'),
  model?: string(name='Model'),
  ocr?: string(name='Ocr', description='OCR。', example='*'),
  pages?: string(name='Pages', example='1'),
  procedurePriority?: string(name='ProcedurePriority'),
  productCode?: string(name='ProductCode', example='eKYC'),
  productFlow?: string(name='ProductFlow'),
  returnFaces?: string(name='ReturnFaces', example='1'),
  returnUrl?: string(name='ReturnUrl', example='http*****'),
  saveFacePicture?: string(name='SaveFacePicture', example='0'),
  sceneCode?: string(name='SceneCode', example='PAY**'),
  securityLevel?: string(name='SecurityLevel'),
  showAlbumIcon?: string(name='ShowAlbumIcon'),
  showGuidePage?: string(name='ShowGuidePage'),
  showOcrResult?: string(name='ShowOcrResult'),
  styleConfig?: string(name='StyleConfig'),
  targetFacePicture?: string(name='TargetFacePicture', example='base64'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://www.xxxxx.com/1.jpg'),
  useNFC?: string(name='UseNFC'),
  verifyModel?: string(name='VerifyModel', example='0'),
}

model InitializeShrinkRequest {
  appQualityCheck?: string(name='AppQualityCheck'),
  authorize?: string(name='Authorize'),
  autoRegistration?: string(name='AutoRegistration', example='0'),
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  chameleonFrameEnable?: string(name='ChameleonFrameEnable'),
  crop?: string(name='Crop', example='*'),
  dateOfBirth?: string(name='DateOfBirth'),
  dateOfExpiry?: string(name='DateOfExpiry'),
  docName?: string(name='DocName'),
  docNo?: string(name='DocNo'),
  docPageConfigShrink?: string(name='DocPageConfig'),
  docScanMode?: string(name='DocScanMode'),
  docType?: string(name='DocType', example='01000000'),
  docVideo?: string(name='DocVideo'),
  documentNumber?: string(name='DocumentNumber'),
  editOcrResult?: string(name='EditOcrResult'),
  experienceCode?: string(name='ExperienceCode'),
  faceGroupCodes?: string(name='FaceGroupCodes', example='0e0c34a77f'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl', example='***'),
  faceRegisterGroupCode?: string(name='FaceRegisterGroupCode', example='0e0c34a77f'),
  faceVerifyThreshold?: string(name='FaceVerifyThreshold', example='0.5'),
  idFaceQuality?: string(name='IdFaceQuality', example='*'),
  idSpoof?: string(name='IdSpoof', example='Y'),
  idThreshold?: string(name='IdThreshold'),
  languageConfig?: string(name='LanguageConfig'),
  MRTDInput?: string(name='MRTDInput'),
  merchantBizId?: string(name='MerchantBizId', example='e0c34a***353888'),
  merchantUserId?: string(name='MerchantUserId', example='1221****6543'),
  metaInfo?: string(name='MetaInfo', example='{\\\\"bioMetaInfo\\\\":\\\\"4.1.0:2916352,0\\\\",\\\\"deviceType\\\\":\\\\"web\\\\",\\\\"ua\\\\":\\\\"Mozilla/5.0 (Macintosh'),
  model?: string(name='Model'),
  ocr?: string(name='Ocr', description='OCR。', example='*'),
  pages?: string(name='Pages', example='1'),
  procedurePriority?: string(name='ProcedurePriority'),
  productCode?: string(name='ProductCode', example='eKYC'),
  productFlow?: string(name='ProductFlow'),
  returnFaces?: string(name='ReturnFaces', example='1'),
  returnUrl?: string(name='ReturnUrl', example='http*****'),
  saveFacePicture?: string(name='SaveFacePicture', example='0'),
  sceneCode?: string(name='SceneCode', example='PAY**'),
  securityLevel?: string(name='SecurityLevel'),
  showAlbumIcon?: string(name='ShowAlbumIcon'),
  showGuidePage?: string(name='ShowGuidePage'),
  showOcrResult?: string(name='ShowOcrResult'),
  styleConfig?: string(name='StyleConfig'),
  targetFacePicture?: string(name='TargetFacePicture', example='base64'),
  targetFacePictureUrl?: string(name='TargetFacePictureUrl', example='https://www.xxxxx.com/1.jpg'),
  useNFC?: string(name='UseNFC'),
  verifyModel?: string(name='VerifyModel', example='0'),
}

model InitializeResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    clientCfg?: string(name='ClientCfg', example='***'),
    protocol?: string(name='Protocol'),
    transactionId?: string(name='TransactionId', example='08573be80f944d95ac812e019e3655a8'),
    transactionUrl?: string(name='TransactionUrl', example='http****'),
  }(name='Result'),
}

model InitializeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeResponseBody(name='body'),
}

/**
 * @summary 认证初始化
 *
 * @param tmpReq InitializeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitializeResponse
 */
@context("initializeWithContext")
async function initializeWithOptions(tmpReq: InitializeRequest, runtime: $RuntimeOptions): InitializeResponse {
  tmpReq.validate();
  var request = new InitializeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.docPageConfig)) {
    request.docPageConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docPageConfig, 'DocPageConfig', 'json');
  }
  var query = {};
  if (!$isNull(request.appQualityCheck)) {
    query['AppQualityCheck'] = request.appQualityCheck;
  }
  if (!$isNull(request.authorize)) {
    query['Authorize'] = request.authorize;
  }
  if (!$isNull(request.autoRegistration)) {
    query['AutoRegistration'] = request.autoRegistration;
  }
  if (!$isNull(request.callbackToken)) {
    query['CallbackToken'] = request.callbackToken;
  }
  if (!$isNull(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!$isNull(request.chameleonFrameEnable)) {
    query['ChameleonFrameEnable'] = request.chameleonFrameEnable;
  }
  if (!$isNull(request.crop)) {
    query['Crop'] = request.crop;
  }
  if (!$isNull(request.dateOfBirth)) {
    query['DateOfBirth'] = request.dateOfBirth;
  }
  if (!$isNull(request.dateOfExpiry)) {
    query['DateOfExpiry'] = request.dateOfExpiry;
  }
  if (!$isNull(request.docName)) {
    query['DocName'] = request.docName;
  }
  if (!$isNull(request.docNo)) {
    query['DocNo'] = request.docNo;
  }
  if (!$isNull(request.docPageConfigShrink)) {
    query['DocPageConfig'] = request.docPageConfigShrink;
  }
  if (!$isNull(request.docScanMode)) {
    query['DocScanMode'] = request.docScanMode;
  }
  if (!$isNull(request.docType)) {
    query['DocType'] = request.docType;
  }
  if (!$isNull(request.docVideo)) {
    query['DocVideo'] = request.docVideo;
  }
  if (!$isNull(request.documentNumber)) {
    query['DocumentNumber'] = request.documentNumber;
  }
  if (!$isNull(request.editOcrResult)) {
    query['EditOcrResult'] = request.editOcrResult;
  }
  if (!$isNull(request.experienceCode)) {
    query['ExperienceCode'] = request.experienceCode;
  }
  if (!$isNull(request.faceGroupCodes)) {
    query['FaceGroupCodes'] = request.faceGroupCodes;
  }
  if (!$isNull(request.facePictureUrl)) {
    query['FacePictureUrl'] = request.facePictureUrl;
  }
  if (!$isNull(request.faceRegisterGroupCode)) {
    query['FaceRegisterGroupCode'] = request.faceRegisterGroupCode;
  }
  if (!$isNull(request.faceVerifyThreshold)) {
    query['FaceVerifyThreshold'] = request.faceVerifyThreshold;
  }
  if (!$isNull(request.idFaceQuality)) {
    query['IdFaceQuality'] = request.idFaceQuality;
  }
  if (!$isNull(request.idSpoof)) {
    query['IdSpoof'] = request.idSpoof;
  }
  if (!$isNull(request.idThreshold)) {
    query['IdThreshold'] = request.idThreshold;
  }
  if (!$isNull(request.languageConfig)) {
    query['LanguageConfig'] = request.languageConfig;
  }
  if (!$isNull(request.MRTDInput)) {
    query['MRTDInput'] = request.MRTDInput;
  }
  if (!$isNull(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!$isNull(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!$isNull(request.metaInfo)) {
    query['MetaInfo'] = request.metaInfo;
  }
  if (!$isNull(request.model)) {
    query['Model'] = request.model;
  }
  if (!$isNull(request.ocr)) {
    query['Ocr'] = request.ocr;
  }
  if (!$isNull(request.pages)) {
    query['Pages'] = request.pages;
  }
  if (!$isNull(request.procedurePriority)) {
    query['ProcedurePriority'] = request.procedurePriority;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.productFlow)) {
    query['ProductFlow'] = request.productFlow;
  }
  if (!$isNull(request.returnFaces)) {
    query['ReturnFaces'] = request.returnFaces;
  }
  if (!$isNull(request.returnUrl)) {
    query['ReturnUrl'] = request.returnUrl;
  }
  if (!$isNull(request.saveFacePicture)) {
    query['SaveFacePicture'] = request.saveFacePicture;
  }
  if (!$isNull(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!$isNull(request.securityLevel)) {
    query['SecurityLevel'] = request.securityLevel;
  }
  if (!$isNull(request.showAlbumIcon)) {
    query['ShowAlbumIcon'] = request.showAlbumIcon;
  }
  if (!$isNull(request.showGuidePage)) {
    query['ShowGuidePage'] = request.showGuidePage;
  }
  if (!$isNull(request.showOcrResult)) {
    query['ShowOcrResult'] = request.showOcrResult;
  }
  if (!$isNull(request.styleConfig)) {
    query['StyleConfig'] = request.styleConfig;
  }
  if (!$isNull(request.targetFacePicture)) {
    query['TargetFacePicture'] = request.targetFacePicture;
  }
  if (!$isNull(request.targetFacePictureUrl)) {
    query['TargetFacePictureUrl'] = request.targetFacePictureUrl;
  }
  if (!$isNull(request.useNFC)) {
    query['UseNFC'] = request.useNFC;
  }
  if (!$isNull(request.verifyModel)) {
    query['VerifyModel'] = request.verifyModel;
  }
  var body : map[string]any = {};
  if (!$isNull(request.facePictureBase64)) {
    body['FacePictureBase64'] = request.facePictureBase64;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'Initialize',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 认证初始化
 *
 * @param request InitializeRequest
 * @return InitializeResponse
 */
async function initialize(request: InitializeRequest): InitializeResponse {
  var runtime = new $RuntimeOptions{};
  return initializeWithOptions(request, runtime);
}

model KeepaliveIntlResponseBody = {
  code?: string(name='Code', description='The [return code.](https://www.alibabacloud.com/help/en/ekyc/latest/client-connection-hold?spm=a3c0i.23458820.2359477120.1.48207d3ftEYld2#74d291dfaaxci)', example='Success'),
  message?: string(name='Message', description='A detailed description of the Code.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EB35****87EBA1'),
  result?: {
    result?: string(name='Result', description='The result of the call.', example='SUCCESS'),
  }(name='Result', description='Return result'),
}

model KeepaliveIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KeepaliveIntlResponseBody(name='body'),
}

/**
 * @summary If your server makes infrequent calls to the ID Verification API, you can call the KeepaliveIntl operation to maintain the client connection.
 *
 * @param request KeepaliveIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return KeepaliveIntlResponse
 */
async function keepaliveIntlWithOptions(runtime: $RuntimeOptions): KeepaliveIntlResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'KeepaliveIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary If your server makes infrequent calls to the ID Verification API, you can call the KeepaliveIntl operation to maintain the client connection.
 *
 * @return KeepaliveIntlResponse
 */
async function keepaliveIntl(): KeepaliveIntlResponse {
  var runtime = new $RuntimeOptions{};
  return keepaliveIntlWithOptions(runtime);
}

model Mobile2MetaVerifyIntlRequest {
  mobile?: string(name='Mobile', description='The mobile number.

>
> - If **paramType** is set to **normal**, enter the plaintext value.
> - If **paramType** is set to **md5**, enter the 32-bit lowercase MD5 string.

This parameter is required.', example='186****1234'),
  paramType?: string(name='ParamType', description='The parameter type:

- **normal**: plaintext

- **md5**: MD5-encrypted

This parameter is required.', example='normal'),
  productCode?: string(name='ProductCode', description='The product to use. Set this parameter to the static value **MOBILE_2META**.

This parameter is required.', example='MOBILE_2META'),
  userName?: string(name='UserName', description='The name.

> 
> - If **paramType** is set to **normal**, enter the plaintext value.
> - If **paramType** is set to **md5**, enter the 32-bit lowercase MD5 string.

This parameter is required.', example='Zhang*'),
}

model Mobile2MetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='[Status codes](https://www.alibabacloud.com/help/en/ekyc/latest/mobile-2meta?spm=a2c63.p38356.0.i13#cbf2539971xzr).', example='Success'),
  message?: string(name='Message', description='A detailed description of the response code.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EB35****87EBA1'),
  result?: {
    bizCode?: string(name='BizCode', description='The verification result:

- 1: The information is consistent. (Billed)

- 2: The information is inconsistent. (Billed)

- 3: No record is found. (Not billed)', example='1'),
    ispName?: string(name='IspName', description='The carrier name:

- CMCC: China Mobile

- CUCC: China Unicom

- CTCC: China Telecom', example='CMCC'),
  }(name='Result', description='Return result'),
}

model Mobile2MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile2MetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary Verifies the authenticity and consistency of a mobile number and name against an authoritative data source.
 *
 * @param request Mobile2MetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Mobile2MetaVerifyIntlResponse
 */
@context("mobile2MetaVerifyIntlWithContext")
async function mobile2MetaVerifyIntlWithOptions(request: Mobile2MetaVerifyIntlRequest, runtime: $RuntimeOptions): Mobile2MetaVerifyIntlResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!$isNull(request.paramType)) {
    body['ParamType'] = request.paramType;
  }
  if (!$isNull(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.userName)) {
    body['UserName'] = request.userName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'Mobile2MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Verifies the authenticity and consistency of a mobile number and name against an authoritative data source.
 *
 * @param request Mobile2MetaVerifyIntlRequest
 * @return Mobile2MetaVerifyIntlResponse
 */
async function mobile2MetaVerifyIntl(request: Mobile2MetaVerifyIntlRequest): Mobile2MetaVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return mobile2MetaVerifyIntlWithOptions(request, runtime);
}

model Mobile3MetaVerifyIntlRequest {
  identifyNum?: string(name='IdentifyNum', description='ID number

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='429001********8211'),
  mobile?: string(name='Mobile', description='Mobile phone number.

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='186****1234'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: unencrypted
- md5: md5 encrypted', example='normal'),
  productCode?: string(name='ProductCode', description='The product solution to be integrated, with a fixed value: MOBILE_3META', example='MOBILE_3META'),
  userName?: string(name='UserName', description='Name

- When paramType is set to normal, enter the plaintext
- When paramType is set to md5, enter a 32-character lowercase md5 string', example='张*'),
}

model Mobile3MetaVerifyIntlResponseBody = {
  code?: string(name='Code', description='Return code', example='Success'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='D241532C-4EE9-5A2A-A5A5-C1FD98CE2EDD'),
  result?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Verification consistent
- 2: Verification inconsistent
- 3: No record found', example='1'),
    ispName?: string(name='IspName', description='ISP name

- CMCC: China Mobile
- CUCC: China Unicom
- CTCC: China Telecom', example='CMCC'),
    subCode?: string(name='SubCode', description='Detailed verification results

- 101: Verification passed 
- 201: Mobile number and name do not match, mobile number and ID number do not match 
- 202: Mobile number and name match, but mobile number and ID number do not match 
- 203: Mobile number and ID number match, but mobile number and name do not match 
- 204: Other inconsistencies
- 301: No record found', example='101'),
  }(name='Result', description='Return result'),
}

model Mobile3MetaVerifyIntlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaVerifyIntlResponseBody(name='body'),
}

/**
 * @summary International Version of Mobile Three Elements API
 *
 * @param request Mobile3MetaVerifyIntlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Mobile3MetaVerifyIntlResponse
 */
@context("mobile3MetaVerifyIntlWithContext")
async function mobile3MetaVerifyIntlWithOptions(request: Mobile3MetaVerifyIntlRequest, runtime: $RuntimeOptions): Mobile3MetaVerifyIntlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!$isNull(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!$isNull(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'Mobile3MetaVerifyIntl',
    version = '2022-08-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary International Version of Mobile Three Elements API
 *
 * @param request Mobile3MetaVerifyIntlRequest
 * @return Mobile3MetaVerifyIntlResponse
 */
async function mobile3MetaVerifyIntl(request: Mobile3MetaVerifyIntlRequest): Mobile3MetaVerifyIntlResponse {
  var runtime = new $RuntimeOptions{};
  return mobile3MetaVerifyIntlWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
