/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Linkvisual';
  @version = '2018-01-20';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'linkvisual.aliyuncs.com',
    ap-northeast-2-pop = 'linkvisual.aliyuncs.com',
    ap-south-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-2 = 'linkvisual.aliyuncs.com',
    ap-southeast-3 = 'linkvisual.aliyuncs.com',
    ap-southeast-5 = 'linkvisual.aliyuncs.com',
    cn-beijing = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-pop = 'linkvisual.aliyuncs.com',
    cn-beijing-gov-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkvisual.aliyuncs.com',
    cn-chengdu = 'linkvisual.aliyuncs.com',
    cn-edge-1 = 'linkvisual.aliyuncs.com',
    cn-fujian = 'linkvisual.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-finance = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkvisual.aliyuncs.com',
    cn-hongkong = 'linkvisual.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkvisual.aliyuncs.com',
    cn-huhehaote = 'linkvisual.aliyuncs.com',
    cn-north-2-gov-1 = 'linkvisual.aliyuncs.com',
    cn-qingdao = 'linkvisual.aliyuncs.com',
    cn-qingdao-nebula = 'linkvisual.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shanghai-inner = 'linkvisual.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen = 'linkvisual.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-inner = 'linkvisual.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkvisual.aliyuncs.com',
    cn-wuhan = 'linkvisual.aliyuncs.com',
    cn-yushanfang = 'linkvisual.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkvisual.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkvisual.aliyuncs.com',
    eu-central-1 = 'linkvisual.aliyuncs.com',
    eu-west-1 = 'linkvisual.aliyuncs.com',
    eu-west-1-oxs = 'linkvisual.aliyuncs.com',
    me-east-1 = 'linkvisual.aliyuncs.com',
    rus-west-1-pop = 'linkvisual.aliyuncs.com',
    us-east-1 = 'linkvisual.aliyuncs.com',
    us-west-1 = 'linkvisual.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddEventRecordPlanDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  planId: string(name='PlanId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
}

model AddEventRecordPlanDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddEventRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddEventRecordPlanDeviceResponseBody(name='body'),
}

async function addEventRecordPlanDevice(request: AddEventRecordPlanDeviceRequest): AddEventRecordPlanDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEventRecordPlanDevice', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceDeviceGroupRequest {
  deviceGroupName: string(name='DeviceGroupName', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
}

model AddFaceDeviceGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceGroupId?: string(name='DeviceGroupId'),
    deviceGroupName?: string(name='DeviceGroupName'),
    modifiedTime?: string(name='ModifiedTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceDeviceGroupResponseBody(name='body'),
}

async function addFaceDeviceGroup(request: AddFaceDeviceGroupRequest): AddFaceDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceDeviceToDeviceGroupRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model AddFaceDeviceToDeviceGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceDeviceToDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceDeviceToDeviceGroupResponseBody(name='body'),
}

async function addFaceDeviceToDeviceGroup(request: AddFaceDeviceToDeviceGroupRequest): AddFaceDeviceToDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceDeviceToDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceUserRequest {
  customUserId: string(name='CustomUserId', position='Query'),
  facePicUrl: string(name='FacePicUrl', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  name?: string(name='Name', position='Query'),
  params?: string(name='Params', position='Query'),
}

model AddFaceUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    customUserId?: string(name='CustomUserId'),
    name?: string(name='Name'),
    params?: string(name='Params'),
    userId?: string(name='UserId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserResponseBody(name='body'),
}

async function addFaceUser(request: AddFaceUserRequest): AddFaceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceUser', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceUserGroupRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userGroupName: string(name='UserGroupName', position='Query'),
}

model AddFaceUserGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    modifiedTime?: string(name='ModifiedTime'),
    userGroupId?: string(name='UserGroupId'),
    userGroupName?: string(name='UserGroupName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserGroupResponseBody(name='body'),
}

async function addFaceUserGroup(request: AddFaceUserGroupRequest): AddFaceUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceUserGroupAndDeviceGroupRelationRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  relation: string(name='Relation', position='Query'),
  userGroupId: string(name='UserGroupId', position='Query'),
}

model AddFaceUserGroupAndDeviceGroupRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    controlId?: string(name='ControlId'),
    modifiedTime?: string(name='ModifiedTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function addFaceUserGroupAndDeviceGroupRelation(request: AddFaceUserGroupAndDeviceGroupRelationRequest): AddFaceUserGroupAndDeviceGroupRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceUserGroupAndDeviceGroupRelation', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceUserPictureRequest {
  facePicUrl: string(name='FacePicUrl', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model AddFaceUserPictureResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceUserPictureResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserPictureResponseBody(name='body'),
}

async function addFaceUserPicture(request: AddFaceUserPictureRequest): AddFaceUserPictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceUserPicture', 'POST', '/', 'json', false, 'json', request);
}

model AddFaceUserToUserGroupRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userGroupId: string(name='UserGroupId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model AddFaceUserToUserGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddFaceUserToUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserToUserGroupResponseBody(name='body'),
}

async function addFaceUserToUserGroup(request: AddFaceUserToUserGroupRequest): AddFaceUserToUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceUserToUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddRecordPlanDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  planId: string(name='PlanId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType: int32(name='StreamType', position='Query'),
}

model AddRecordPlanDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddRecordPlanDeviceResponseBody(name='body'),
}

async function addRecordPlanDevice(request: AddRecordPlanDeviceRequest): AddRecordPlanDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRecordPlanDevice', 'POST', '/', 'json', false, 'json', request);
}

model BindAIPlanWithDevicesRequest {
  iotIdList: [ string ](name='IotIdList', position='Query'),
  planId: string(name='PlanId', position='Query'),
}

model BindAIPlanWithDevicesResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindAIPlanWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BindAIPlanWithDevicesResponseBody(name='body'),
}

async function bindAIPlanWithDevices(request: BindAIPlanWithDevicesRequest): BindAIPlanWithDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAIPlanWithDevices', 'POST', '/', 'json', false, 'json', request);
}

model BindPictureSearchAppWithDevicesRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  deviceIotIds: [ string ](name='DeviceIotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BindPictureSearchAppWithDevicesResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindPictureSearchAppWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BindPictureSearchAppWithDevicesResponseBody(name='body'),
}

async function bindPictureSearchAppWithDevices(request: BindPictureSearchAppWithDevicesRequest): BindPictureSearchAppWithDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPictureSearchAppWithDevices', 'POST', '/', 'json', false, 'json', request);
}

model CheckFaceUserDoExistOnDeviceRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model CheckFaceUserDoExistOnDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    doExist?: boolean(name='DoExist'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckFaceUserDoExistOnDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFaceUserDoExistOnDeviceResponseBody(name='body'),
}

async function checkFaceUserDoExistOnDevice(request: CheckFaceUserDoExistOnDeviceRequest): CheckFaceUserDoExistOnDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFaceUserDoExistOnDevice', 'POST', '/', 'json', false, 'json', request);
}

model ClearFaceDeviceDBRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ClearFaceDeviceDBResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ClearFaceDeviceDBResponse = {
  headers: map[string]string(name='headers'),
  body: ClearFaceDeviceDBResponseBody(name='body'),
}

async function clearFaceDeviceDB(request: ClearFaceDeviceDBRequest): ClearFaceDeviceDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearFaceDeviceDB', 'POST', '/', 'json', false, 'json', request);
}

model ConfigAIActionRequest {
  actionId: string(name='ActionId', position='Query'),
  algoConfig?: string(name='AlgoConfig', position='Query'),
  dataTypeConfigList?: [ 
    {
      configs: string(name='Configs'),
      dataType: string(name='DataType'),
    }
  ](name='DataTypeConfigList', position='Query'),
}

model ConfigAIActionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfigAIActionResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigAIActionResponseBody(name='body'),
}

async function configAIAction(request: ConfigAIActionRequest): ConfigAIActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigAIAction', 'POST', '/', 'json', false, 'json', request);
}

model CreateAIAppRequest {
  appTemplateId: string(name='AppTemplateId', position='Query'),
  appTemplateVersion: string(name='AppTemplateVersion', position='Query'),
  description?: string(name='Description', position='Query'),
  level: int32(name='Level', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateAIAppResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIAppResponseBody(name='body'),
}

async function createAIApp(request: CreateAIAppRequest): CreateAIAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAIApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateAIPlanRequest {
  appId: string(name='AppId', position='Query'),
  description?: string(name='Description', position='Query'),
  planTemplateId: string(name='PlanTemplateId', position='Query'),
}

model CreateAIPlanResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIPlanResponseBody(name='body'),
}

async function createAIPlan(request: CreateAIPlanRequest): CreateAIPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAIPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlgorithmRequest {
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateAlgorithmResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlgorithmResponseBody(name='body'),
}

async function createAlgorithm(request: CreateAlgorithmRequest): CreateAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlgorithm', 'POST', '/', 'json', false, 'json', request);
}

model CreateDevicePurifyJobRequest {
  endTime: long(name='EndTime', position='Query'),
  iotId: string(name='IotId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model CreateDevicePurifyJobResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDevicePurifyJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePurifyJobResponseBody(name='body'),
}

async function createDevicePurifyJob(request: CreateDevicePurifyJobRequest): CreateDevicePurifyJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevicePurifyJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateDevicePurifyJobByPlanIdRequest {
  planId: string(name='PlanId', position='Query'),
  utc: long(name='Utc', position='Query'),
}

model CreateDevicePurifyJobByPlanIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDevicePurifyJobByPlanIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePurifyJobByPlanIdResponseBody(name='body'),
}

async function createDevicePurifyJobByPlanId(request: CreateDevicePurifyJobByPlanIdRequest): CreateDevicePurifyJobByPlanIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevicePurifyJobByPlanId', 'POST', '/', 'json', false, 'json', request);
}

model CreateDevicePurifyPlanRequest {
  endTime: int32(name='EndTime', position='Query'),
  iotId: string(name='IotId', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
}

model CreateDevicePurifyPlanResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDevicePurifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePurifyPlanResponseBody(name='body'),
}

async function createDevicePurifyPlan(request: CreateDevicePurifyPlanRequest): CreateDevicePurifyPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevicePurifyPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventRecordPlanRequest {
  eventTypes?: string(name='EventTypes', position='Query'),
  name: string(name='Name', position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', position='Query'),
  recordDuration: int32(name='RecordDuration', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model CreateEventRecordPlanResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEventRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEventRecordPlanResponseBody(name='body'),
}

async function createEventRecordPlan(request: CreateEventRecordPlanRequest): CreateEventRecordPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventRecordPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateLocalFileUploadJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  timeSlot?: [ 
    {
      deviceName?: string(name='DeviceName'),
      endTime: int32(name='EndTime'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
      startTime: int32(name='StartTime'),
    }
  ](name='TimeSlot', position='Query'),
}

model CreateLocalFileUploadJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    jobId?: string(name='JobId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateLocalFileUploadJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLocalFileUploadJobResponseBody(name='body'),
}

async function createLocalFileUploadJob(request: CreateLocalFileUploadJobRequest): CreateLocalFileUploadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLocalFileUploadJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateModelRequest {
  algorithmId: long(name='AlgorithmId', position='Query'),
  description?: string(name='Description', position='Query'),
  hardware: string(name='Hardware', position='Query'),
  modelPackageStandard: string(name='ModelPackageStandard', position='Query'),
  name: string(name='Name', position='Query'),
  needEncrypt: boolean(name='NeedEncrypt', position='Query'),
  uploadModelPath: string(name='UploadModelPath', position='Query'),
}

model CreateModelResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateModel', 'POST', '/', 'json', false, 'json', request);
}

model CreatePictureSearchAppRequest {
  desc: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreatePictureSearchAppResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatePictureSearchAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePictureSearchAppResponseBody(name='body'),
}

async function createPictureSearchApp(request: CreatePictureSearchAppRequest): CreatePictureSearchAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePictureSearchApp', 'POST', '/', 'json', false, 'json', request);
}

model CreatePictureSearchJobRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  bodyThreshold?: float(name='BodyThreshold', minimum=0, maximum=1, position='Query'),
  endTime: long(name='EndTime', minimum=0, maximum=9999999999999, position='Query'),
  pictureSearchType?: int32(name='PictureSearchType', minimum=0, maximum=10, position='Query'),
  searchPicUrl: string(name='SearchPicUrl', position='Query'),
  startTime: long(name='StartTime', minimum=0, maximum=9999999999999, position='Query'),
  threshold: float(name='Threshold', position='Query'),
}

model CreatePictureSearchJobResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatePictureSearchJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePictureSearchJobResponseBody(name='body'),
}

async function createPictureSearchJob(request: CreatePictureSearchJobRequest): CreatePictureSearchJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePictureSearchJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateRecordPlanRequest {
  name: string(name='Name', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model CreateRecordPlanResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRecordPlanResponseBody(name='body'),
}

async function createRecordPlan(request: CreateRecordPlanRequest): CreateRecordPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRecordPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateTimeTemplateRequest {
  allDay: int32(name='AllDay', position='Query'),
  name: string(name='Name', position='Query'),
  timeSections?: [ 
    {
      begin?: int32(name='Begin'),
      dayOfWeek?: int32(name='DayOfWeek'),
      end?: int32(name='End'),
    }
  ](name='TimeSections', position='Query'),
}

model CreateTimeTemplateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTimeTemplateResponseBody(name='body'),
}

async function createTimeTemplate(request: CreateTimeTemplateRequest): CreateTimeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTimeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlgorithmRequest {
  algorithmId: long(name='AlgorithmId', position='Query'),
}

model DeleteAlgorithmResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlgorithmResponseBody(name='body'),
}

async function deleteAlgorithm(request: DeleteAlgorithmRequest): DeleteAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlgorithm', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventRecordPlanRequest {
  planId: string(name='PlanId', position='Query'),
}

model DeleteEventRecordPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEventRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventRecordPlanResponseBody(name='body'),
}

async function deleteEventRecordPlan(request: DeleteEventRecordPlanRequest): DeleteEventRecordPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventRecordPlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventRecordPlanDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
}

model DeleteEventRecordPlanDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEventRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventRecordPlanDeviceResponseBody(name='body'),
}

async function deleteEventRecordPlanDevice(request: DeleteEventRecordPlanDeviceRequest): DeleteEventRecordPlanDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventRecordPlanDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFaceDeviceGroupRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
}

model DeleteFaceDeviceGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFaceDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceDeviceGroupResponseBody(name='body'),
}

async function deleteFaceDeviceGroup(request: DeleteFaceDeviceGroupRequest): DeleteFaceDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFaceUserRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model DeleteFaceUserResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserResponseBody(name='body'),
}

async function deleteFaceUser(request: DeleteFaceUserRequest): DeleteFaceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFaceUserGroupRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userGroupId: string(name='UserGroupId', position='Query'),
}

model DeleteFaceUserGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserGroupResponseBody(name='body'),
}

async function deleteFaceUserGroup(request: DeleteFaceUserGroupRequest): DeleteFaceUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFaceUserGroupAndDeviceGroupRelationRequest {
  controlId: string(name='ControlId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
}

model DeleteFaceUserGroupAndDeviceGroupRelationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function deleteFaceUserGroupAndDeviceGroupRelation(request: DeleteFaceUserGroupAndDeviceGroupRelationRequest): DeleteFaceUserGroupAndDeviceGroupRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceUserGroupAndDeviceGroupRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFaceUserPictureRequest {
  facePicMd5: string(name='FacePicMd5', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model DeleteFaceUserPictureResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserPictureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserPictureResponseBody(name='body'),
}

async function deleteFaceUserPicture(request: DeleteFaceUserPictureRequest): DeleteFaceUserPictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceUserPicture', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLocalFileUploadJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model DeleteLocalFileUploadJobResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteLocalFileUploadJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLocalFileUploadJobResponseBody(name='body'),
}

async function deleteLocalFileUploadJob(request: DeleteLocalFileUploadJobRequest): DeleteLocalFileUploadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLocalFileUploadJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteModelRequest {
  modelId: long(name='ModelId', position='Query'),
}

model DeleteModelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRecordRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  fileNameList: [ string ](name='FileNameList', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model DeleteRecordResponseBody = {
  code?: string(name='Code'),
  data?: {
    deletedCount?: int32(name='DeletedCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordResponseBody(name='body'),
}

async function deleteRecord(request: DeleteRecordRequest): DeleteRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecord', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRecordPlanRequest {
  planId: string(name='PlanId', position='Query'),
}

model DeleteRecordPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordPlanResponseBody(name='body'),
}

async function deleteRecordPlan(request: DeleteRecordPlanRequest): DeleteRecordPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecordPlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRecordPlanDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType: int32(name='StreamType', position='Query'),
}

model DeleteRecordPlanDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordPlanDeviceResponseBody(name='body'),
}

async function deleteRecordPlanDevice(request: DeleteRecordPlanDeviceRequest): DeleteRecordPlanDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecordPlanDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTimeTemplateRequest {
  templateId: string(name='TemplateId', position='Query'),
}

model DeleteTimeTemplateResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTimeTemplateResponseBody(name='body'),
}

async function deleteTimeTemplate(request: DeleteTimeTemplateRequest): DeleteTimeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTimeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeployModelBatchRequest {
  deviceList: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
    }
  ](name='DeviceList', position='Query'),
  modelId: long(name='ModelId', position='Query'),
}

model DeployModelBatchResponseBody = {
  code?: string(name='Code'),
  data?: {
    deployTaskResultVOList?: [  map[string]any ](name='DeployTaskResultVOList')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeployModelBatchResponse = {
  headers: map[string]string(name='headers'),
  body: DeployModelBatchResponseBody(name='body'),
}

async function deployModelBatch(request: DeployModelBatchRequest): DeployModelBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployModelBatch', 'POST', '/', 'json', false, 'json', request);
}

model DetectUserFaceByUrlRequest {
  facePicUrl: string(name='FacePicUrl', position='Query'),
}

model DetectUserFaceByUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      age?: int32(name='Age'),
      blurScore?: float(name='BlurScore'),
      faceProbability?: float(name='FaceProbability'),
      faceRects?: {
        faceRectsData?: [ string ](name='FaceRectsData')
      }(name='FaceRects'),
      gender?: int32(name='Gender'),
      goodForLibrary?: boolean(name='GoodForLibrary'),
      goodForRecognition?: boolean(name='GoodForRecognition'),
      landmarks?: {
        landmarksData?: [ string ](name='LandmarksData')
      }(name='Landmarks'),
      occlusionScore?: float(name='OcclusionScore'),
      poseScore?: float(name='PoseScore'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DetectUserFaceByUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DetectUserFaceByUrlResponseBody(name='body'),
}

async function detectUserFaceByUrl(request: DetectUserFaceByUrlRequest): DetectUserFaceByUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectUserFaceByUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetAIActionRequest {
  actionId: string(name='ActionId', position='Query'),
}

model GetAIActionResponseBody = {
  code?: string(name='Code'),
  data?: {
    action?: string(name='Action'),
    actionConfig?: string(name='ActionConfig'),
    actionId?: string(name='ActionId'),
    actionIndex?: int32(name='ActionIndex'),
    actionTemplateId?: string(name='ActionTemplateId'),
    algoConfig?: string(name='AlgoConfig'),
    alog?: string(name='Alog'),
    planId?: string(name='PlanId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAIActionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIActionResponseBody(name='body'),
}

async function getAIAction(request: GetAIActionRequest): GetAIActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAIAction', 'POST', '/', 'json', false, 'json', request);
}

model GetAIActionConfigRequest {
  algo: string(name='Algo', position='Query'),
  algoAction: string(name='AlgoAction', position='Query'),
}

model GetAIActionConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    algoAction?: string(name='AlgoAction'),
    algoConfigItems?: string(name='AlgoConfigItems'),
    des?: string(name='Des'),
    inParamList?: [ 
      {
        configItems?: [ string ](name='ConfigItems'),
        dataType?: string(name='DataType'),
        needConfig?: boolean(name='NeedConfig'),
      }
    ](name='InParamList'),
    needDevice?: boolean(name='NeedDevice'),
    outParamList?: [ 
      {
        configItems?: [ string ](name='ConfigItems'),
        dataType?: string(name='DataType'),
        needConfig?: boolean(name='NeedConfig'),
      }
    ](name='OutParamList'),
    sync?: string(name='Sync'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAIActionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIActionConfigResponseBody(name='body'),
}

async function getAIActionConfig(request: GetAIActionConfigRequest): GetAIActionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAIActionConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetAIAppRequest {
  appId: string(name='AppId', position='Query'),
}

model GetAIAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
    appTemplateId?: string(name='AppTemplateId'),
    description?: string(name='Description'),
    level?: int32(name='Level'),
    name?: string(name='Name'),
    version?: string(name='Version'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIAppResponseBody(name='body'),
}

async function getAIApp(request: GetAIAppRequest): GetAIAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAIApp', 'POST', '/', 'json', false, 'json', request);
}

model GetAIJobRequest {
  jobId: string(name='JobId', position='Query'),
}

model GetAIJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    actionJobDTO?: {
      actionId?: string(name='ActionId'),
      iotId?: string(name='IotId'),
      jobId?: string(name='JobId'),
      status?: int32(name='Status'),
    }(name='ActionJobDTO'),
    dataDTOList?: [ 
      {
        algoData?: string(name='AlgoData'),
        dataId?: string(name='DataId'),
        dataSource?: string(name='DataSource'),
        dataType?: string(name='DataType'),
        iotId?: string(name='IotId'),
        jobId?: string(name='JobId'),
      }
    ](name='DataDTOList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAIJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIJobResponseBody(name='body'),
}

async function getAIJob(request: GetAIJobRequest): GetAIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAIJob', 'POST', '/', 'json', false, 'json', request);
}

model GetAIPlanRequest {
  planId: string(name='PlanId', position='Query'),
}

model GetAIPlanResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
    description?: string(name='Description'),
    intervalTiming?: int32(name='IntervalTiming'),
    planId?: string(name='PlanId'),
    planTemplateId?: string(name='PlanTemplateId'),
    preTiming?: long(name='PreTiming'),
    triggerEnum?: int32(name='TriggerEnum'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIPlanResponseBody(name='body'),
}

async function getAIPlan(request: GetAIPlanRequest): GetAIPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAIPlan', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmDetailByIdRequest {
  algorithmId: long(name='AlgorithmId', position='Query'),
}

model GetAlgorithmDetailByIdResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAlgorithmDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlgorithmDetailByIdResponseBody(name='body'),
}

async function getAlgorithmDetailById(request: GetAlgorithmDetailByIdRequest): GetAlgorithmDetailByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmDetailById', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmDetailByNameRequest {
  name: string(name='Name', position='Query'),
}

model GetAlgorithmDetailByNameResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAlgorithmDetailByNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlgorithmDetailByNameResponseBody(name='body'),
}

async function getAlgorithmDetailByName(request: GetAlgorithmDetailByNameRequest): GetAlgorithmDetailByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmDetailByName', 'POST', '/', 'json', false, 'json', request);
}

model GetDevicePurifyJobByJobIdRequest {
  jobId: string(name='JobId', position='Query'),
}

model GetDevicePurifyJobByJobIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceName?: string(name='DeviceName'),
    endTime?: long(name='EndTime'),
    iotId?: string(name='IotId'),
    jobId?: string(name='JobId'),
    planId?: string(name='PlanId'),
    productKey?: string(name='ProductKey'),
    purifyRecordIndexUrl?: string(name='PurifyRecordIndexUrl'),
    purifyRecordNameUrl?: string(name='PurifyRecordNameUrl'),
    startTime?: long(name='StartTime'),
    status?: int32(name='Status'),
    tenantId?: string(name='TenantId'),
    userId?: string(name='UserId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDevicePurifyJobByJobIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevicePurifyJobByJobIdResponseBody(name='body'),
}

async function getDevicePurifyJobByJobId(request: GetDevicePurifyJobByJobIdRequest): GetDevicePurifyJobByJobIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevicePurifyJobByJobId', 'POST', '/', 'json', false, 'json', request);
}

model GetModelDetailRequest {
  algorithmId: long(name='AlgorithmId', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetModelDetailResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetModelDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelDetailResponseBody(name='body'),
}

async function getModelDetail(request: GetModelDetailRequest): GetModelDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModelDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetModelDetailByIdRequest {
  modelId: long(name='ModelId', position='Query'),
}

model GetModelDetailByIdResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetModelDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelDetailByIdResponseBody(name='body'),
}

async function getModelDetailById(request: GetModelDetailByIdRequest): GetModelDetailByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModelDetailById', 'POST', '/', 'json', false, 'json', request);
}

model GetModelOssPolicyRequest {
  algorithmId: long(name='AlgorithmId', position='Query'),
  hardware?: string(name='Hardware', position='Query'),
  modelPackageStandard?: string(name='ModelPackageStandard', position='Query'),
}

model GetModelOssPolicyResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetModelOssPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelOssPolicyResponseBody(name='body'),
}

async function getModelOssPolicy(request: GetModelOssPolicyRequest): GetModelOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModelOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPictureInfoWithVectorIdsRequest {
  vectorIdList: [ string ](name='VectorIdList', position='Query'),
}

model GetPictureInfoWithVectorIdsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      gatewayIotId?: string(name='GatewayIotId'),
      iotId?: string(name='IotId'),
      picUrl?: string(name='PicUrl'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPictureInfoWithVectorIdsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureInfoWithVectorIdsResponseBody(name='body'),
}

async function getPictureInfoWithVectorIds(request: GetPictureInfoWithVectorIdsRequest): GetPictureInfoWithVectorIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPictureInfoWithVectorIds', 'POST', '/', 'json', false, 'json', request);
}

model GetPictureSearchJobStatusRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model GetPictureSearchJobStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: long(name='CreateTime'),
    endTime?: long(name='EndTime'),
    jobId?: string(name='JobId'),
    jobStatus?: int32(name='JobStatus'),
    searchPicUrl?: string(name='SearchPicUrl'),
    startTime?: long(name='StartTime'),
    threshold?: float(name='Threshold'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPictureSearchJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureSearchJobStatusResponseBody(name='body'),
}

async function getPictureSearchJobStatus(request: GetPictureSearchJobStatusRequest): GetPictureSearchJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPictureSearchJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPictureWithVectorIdRequest {
  vectorId: string(name='VectorId', position='Query'),
}

model GetPictureWithVectorIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPictureWithVectorIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureWithVectorIdResponseBody(name='body'),
}

async function getPictureWithVectorId(request: GetPictureWithVectorIdRequest): GetPictureWithVectorIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPictureWithVectorId', 'POST', '/', 'json', false, 'json', request);
}

model ListAlgorithmsByPageRequest {
  currentPage: int32(name='CurrentPage', minimum=1, position='Query'),
  namePattern?: string(name='NamePattern', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
}

model ListAlgorithmsByPageResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAlgorithmsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlgorithmsByPageResponseBody(name='body'),
}

async function listAlgorithmsByPage(request: ListAlgorithmsByPageRequest): ListAlgorithmsByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlgorithmsByPage', 'POST', '/', 'json', false, 'json', request);
}

model ListDeployTaskByModelIdAndDevicesRequest {
  deviceList: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
    }
  ](name='DeviceList', position='Query'),
  modelId: int32(name='ModelId', position='Query'),
}

model ListDeployTaskByModelIdAndDevicesResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDeployTaskByModelIdAndDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployTaskByModelIdAndDevicesResponseBody(name='body'),
}

async function listDeployTaskByModelIdAndDevices(request: ListDeployTaskByModelIdAndDevicesRequest): ListDeployTaskByModelIdAndDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployTaskByModelIdAndDevices', 'POST', '/', 'json', false, 'json', request);
}

model ListDeployTaskByPageRequest {
  currentPage: int32(name='CurrentPage', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=20, position='Query'),
}

model ListDeployTaskByPageResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDeployTaskByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployTaskByPageResponseBody(name='body'),
}

async function listDeployTaskByPage(request: ListDeployTaskByPageRequest): ListDeployTaskByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployTaskByPage', 'POST', '/', 'json', false, 'json', request);
}

model ListModelVersionsByPageRequest {
  algorithmName: string(name='AlgorithmName', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, position='Query'),
  hardware?: string(name='Hardware', position='Query'),
  modelPackageStandard?: string(name='ModelPackageStandard', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  sizeType?: string(name='SizeType', position='Query'),
}

model ListModelVersionsByPageResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListModelVersionsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelVersionsByPageResponseBody(name='body'),
}

async function listModelVersionsByPage(request: ListModelVersionsByPageRequest): ListModelVersionsByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListModelVersionsByPage', 'POST', '/', 'json', false, 'json', request);
}

model ListModelsByPageRequest {
  algorithmId: long(name='AlgorithmId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, position='Query'),
  hardware?: string(name='Hardware', position='Query'),
  modelPackageStandard?: string(name='ModelPackageStandard', position='Query'),
  namePattern?: string(name='NamePattern', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  sizeType?: string(name='SizeType', position='Query'),
}

model ListModelsByPageResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListModelsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelsByPageResponseBody(name='body'),
}

async function listModelsByPage(request: ListModelsByPageRequest): ListModelsByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListModelsByPage', 'POST', '/', 'json', false, 'json', request);
}

model PictureSearchPictureRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  containPicUrl: boolean(name='ContainPicUrl', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, position='Query'),
  endTime: long(name='EndTime', position='Query'),
  pageSize: int32(name='PageSize', maximum=20, position='Query'),
  pictureSearchType?: int32(name='PictureSearchType', minimum=0, maximum=10, position='Query'),
  searchPicUrl: string(name='SearchPicUrl', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  threshold: float(name='Threshold', position='Query'),
}

model PictureSearchPictureResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        eventTime?: long(name='EventTime'),
        gatewayIotId?: string(name='GatewayIotId'),
        iotId?: string(name='IotId'),
        picUrl?: string(name='PicUrl'),
        threshold?: float(name='Threshold'),
        vectorId?: string(name='VectorId'),
        vectorType?: int32(name='VectorType'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PictureSearchPictureResponse = {
  headers: map[string]string(name='headers'),
  body: PictureSearchPictureResponseBody(name='body'),
}

async function pictureSearchPicture(request: PictureSearchPictureRequest): PictureSearchPictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PictureSearchPicture', 'POST', '/', 'json', false, 'json', request);
}

model QueryAIActionRequest {
  planId: string(name='PlanId', position='Query'),
}

model QueryAIActionResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      action?: string(name='Action'),
      actionConfig?: string(name='ActionConfig'),
      actionId?: string(name='ActionId'),
      actionIndex?: int32(name='ActionIndex'),
      actionTemplateId?: string(name='ActionTemplateId'),
      algo?: string(name='Algo'),
      algoConfig?: string(name='AlgoConfig'),
      planId?: string(name='PlanId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAIActionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIActionResponseBody(name='body'),
}

async function queryAIAction(request: QueryAIActionRequest): QueryAIActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAIAction', 'POST', '/', 'json', false, 'json', request);
}

model QueryAIAppRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryAIAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        appId?: string(name='AppId'),
        appTemplateId?: string(name='AppTemplateId'),
        description?: string(name='Description'),
        level?: int32(name='Level'),
        name?: string(name='Name'),
        version?: string(name='Version'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIAppResponseBody(name='body'),
}

async function queryAIApp(request: QueryAIAppRequest): QueryAIAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAIApp', 'POST', '/', 'json', false, 'json', request);
}

model QueryAIJobsRequest {
  actionId: string(name='ActionId', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryAIJobsResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        actionId?: string(name='ActionId'),
        iotId?: string(name='IotId'),
        jobId?: string(name='JobId'),
        status?: int32(name='Status'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAIJobsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIJobsResponseBody(name='body'),
}

async function queryAIJobs(request: QueryAIJobsRequest): QueryAIJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAIJobs', 'POST', '/', 'json', false, 'json', request);
}

model QueryAIPlanRequest {
  appId: string(name='AppId', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryAIPlanResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        appId?: string(name='AppId'),
        description?: string(name='Description'),
        intervalTiming?: int32(name='IntervalTiming'),
        planId?: string(name='PlanId'),
        planTemplateId?: string(name='PlanTemplateId'),
        preTiming?: long(name='PreTiming'),
        triggerEnum?: int32(name='TriggerEnum'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIPlanResponseBody(name='body'),
}

async function queryAIPlan(request: QueryAIPlanRequest): QueryAIPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAIPlan', 'POST', '/', 'json', false, 'json', request);
}

model QueryAIPlanTemplatesRequest {
  appTemplateId: string(name='AppTemplateId', position='Query'),
  appVersion: string(name='AppVersion', position='Query'),
}

model QueryAIPlanTemplatesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appTemplateId?: string(name='AppTemplateId'),
      appVersion?: string(name='AppVersion'),
      description?: string(name='Description'),
      intervalTiming?: int32(name='IntervalTiming'),
      planTemplateId?: string(name='PlanTemplateId'),
      triggerEnum?: int32(name='TriggerEnum'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAIPlanTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIPlanTemplatesResponseBody(name='body'),
}

async function queryAIPlanTemplates(request: QueryAIPlanTemplatesRequest): QueryAIPlanTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAIPlanTemplates', 'POST', '/', 'json', false, 'json', request);
}

model QueryCarProcessEventsRequest {
  actionType?: int32(name='ActionType', minimum=0, maximum=100, position='Query'),
  areaIndex?: int32(name='AreaIndex', minimum=0, maximum=10, position='Query'),
  beginTime?: long(name='BeginTime', minimum=0, maximum=10000000000000, position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, maximum=10000, position='Query'),
  endTime?: long(name='EndTime', minimum=0, maximum=10000000000000, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  plateNo?: string(name='PlateNo', position='Query'),
  subDeviceName?: string(name='SubDeviceName', position='Query'),
  subIotId?: string(name='SubIotId', position='Query'),
  subProductKey?: string(name='SubProductKey', position='Query'),
}

model QueryCarProcessEventsResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        actionType?: int32(name='ActionType'),
        areaIndex?: int32(name='AreaIndex'),
        confidence?: int32(name='Confidence'),
        eventId?: string(name='EventId'),
        eventPicId?: string(name='EventPicId'),
        eventPicUrl?: string(name='EventPicUrl'),
        eventTime?: long(name='EventTime'),
        eventType?: int32(name='EventType'),
        iotId?: string(name='IotId'),
        plateNo?: string(name='PlateNo'),
        subDeviceName?: string(name='SubDeviceName'),
        subDeviceNickName?: string(name='SubDeviceNickName'),
        subIotId?: string(name='SubIotId'),
        subProductKey?: string(name='SubProductKey'),
        taskId?: string(name='TaskId'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCarProcessEventsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCarProcessEventsResponseBody(name='body'),
}

async function queryCarProcessEvents(request: QueryCarProcessEventsRequest): QueryCarProcessEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCarProcessEvents', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceEventRequest {
  beginTime: long(name='BeginTime', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  eventType?: int32(name='EventType', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceEventResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        eventData?: string(name='EventData'),
        eventDesc?: string(name='EventDesc'),
        eventId?: string(name='EventId'),
        eventPicId?: string(name='EventPicId'),
        eventTime?: string(name='EventTime'),
        eventType?: int32(name='EventType'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventResponseBody(name='body'),
}

async function queryDeviceEvent(request: QueryDeviceEventRequest): QueryDeviceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceEvent', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceEventPictureRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  eventId: string(name='EventId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceEventPictureResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventPictureResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventPictureResponseBody(name='body'),
}

async function queryDeviceEventPicture(request: QueryDeviceEventPictureRequest): QueryDeviceEventPictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceEventPicture', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceEventRecordRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  eventId: string(name='EventId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceEventRecordResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      beginTime?: string(name='BeginTime'),
      endTime?: string(name='EndTime'),
      fileName?: string(name='FileName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventRecordResponseBody(name='body'),
}

async function queryDeviceEventRecord(request: QueryDeviceEventRecordRequest): QueryDeviceEventRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceEventRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceFileVodRequest {
  encryptType?: int32(name='EncryptType', position='Query'),
  fileName: string(name='FileName', position='Query'),
  iotId: string(name='IotId', position='Query'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', position='Query'),
}

model QueryDeviceFileVodResponseBody = {
  code?: string(name='Code'),
  data?: {
    vodUrl?: string(name='VodUrl'),
  }(name='Data'),
  decryptKey?: string(name='DecryptKey'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceFileVodResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileVodResponseBody(name='body'),
}

async function queryDeviceFileVod(request: QueryDeviceFileVodRequest): QueryDeviceFileVodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceFileVod', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePictureByListRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  expireTime?: int32(name='ExpireTime', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pictureIdList: [ string ](name='PictureIdList', position='Query'),
  pictureType?: int32(name='PictureType', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  thumbWidth?: int32(name='ThumbWidth', position='Query'),
}

model QueryDevicePictureByListResponseBody = {
  code?: string(name='Code'),
  data?: {
    picData?: [ 
    {
      iotId?: string(name='IotId'),
      picCreateTime?: long(name='PicCreateTime'),
      picId?: string(name='PicId'),
      picUrl?: string(name='PicUrl'),
      thumbUrl?: string(name='ThumbUrl'),
    }
  ](name='picData')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePictureByListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePictureByListResponseBody(name='body'),
}

async function queryDevicePictureByList(request: QueryDevicePictureByListRequest): QueryDevicePictureByListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePictureByList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePictureFileRequest {
  captureId: string(name='CaptureId', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  expireTime?: int32(name='ExpireTime', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pictureType?: int32(name='PictureType', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  thumbWidth?: int32(name='ThumbWidth', position='Query'),
}

model QueryDevicePictureFileResponseBody = {
  code?: string(name='Code'),
  data?: {
    iotId?: string(name='IotId'),
    picCreateTime?: long(name='PicCreateTime'),
    picId?: string(name='PicId'),
    picUrl?: string(name='PicUrl'),
    thumbUrl?: string(name='ThumbUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePictureFileResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePictureFileResponseBody(name='body'),
}

async function queryDevicePictureFile(request: QueryDevicePictureFileRequest): QueryDevicePictureFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePictureFile', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePictureLifeCycleRequest {
  iotId: string(name='IotId', position='Query'),
}

model QueryDevicePictureLifeCycleResponseBody = {
  code?: string(name='Code'),
  data?: {
    day?: int32(name='Day'),
    iotId?: string(name='IotId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePictureLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePictureLifeCycleResponseBody(name='body'),
}

async function queryDevicePictureLifeCycle(request: QueryDevicePictureLifeCycleRequest): QueryDevicePictureLifeCycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePictureLifeCycle', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePurifyJobsRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  iotId: string(name='IotId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryDevicePurifyJobsResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        deviceName?: string(name='DeviceName'),
        endTime?: long(name='EndTime'),
        iotId?: string(name='IotId'),
        jobId?: string(name='JobId'),
        planId?: string(name='PlanId'),
        productKey?: string(name='ProductKey'),
        purifyRecordIndexUrl?: string(name='PurifyRecordIndexUrl'),
        purifyRecordNameUrl?: string(name='PurifyRecordNameUrl'),
        startTime?: long(name='StartTime'),
        status?: int32(name='Status'),
        tenantId?: string(name='TenantId'),
        userId?: string(name='UserId'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePurifyJobsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePurifyJobsResponseBody(name='body'),
}

async function queryDevicePurifyJobs(request: QueryDevicePurifyJobsRequest): QueryDevicePurifyJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePurifyJobs', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePurifyPlanByPlanIdRequest {
  planId: string(name='PlanId', position='Query'),
}

model QueryDevicePurifyPlanByPlanIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceName?: string(name='DeviceName'),
    endTime?: int32(name='EndTime'),
    iotId?: string(name='IotId'),
    planId?: string(name='PlanId'),
    productKey?: string(name='ProductKey'),
    startTime?: int32(name='StartTime'),
    tenantId?: string(name='TenantId'),
    userId?: string(name='UserId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePurifyPlanByPlanIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePurifyPlanByPlanIdResponseBody(name='body'),
}

async function queryDevicePurifyPlanByPlanId(request: QueryDevicePurifyPlanByPlanIdRequest): QueryDevicePurifyPlanByPlanIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePurifyPlanByPlanId', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePurifyPlansRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  iotId: string(name='IotId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryDevicePurifyPlansResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        deviceName?: string(name='DeviceName'),
        endTime?: int32(name='EndTime'),
        iotId?: string(name='IotId'),
        planId?: string(name='PlanId'),
        productKey?: string(name='ProductKey'),
        startTime?: int32(name='StartTime'),
        tenantId?: string(name='TenantId'),
        userId?: string(name='UserId'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePurifyPlansResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePurifyPlansResponseBody(name='body'),
}

async function queryDevicePurifyPlans(request: QueryDevicePurifyPlansRequest): QueryDevicePurifyPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePurifyPlans', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceRecordLifeCycleRequest {
  deviceList: [ string ](name='DeviceList', position='Query'),
}

model QueryDeviceRecordLifeCycleResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      day?: int32(name='Day'),
      iotId?: string(name='IotId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceRecordLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceRecordLifeCycleResponseBody(name='body'),
}

async function queryDeviceRecordLifeCycle(request: QueryDeviceRecordLifeCycleRequest): QueryDeviceRecordLifeCycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceRecordLifeCycle', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceVodUrlRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  encryptType?: int32(name='EncryptType', position='Query'),
  fileName: string(name='FileName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  playUnLimited?: boolean(name='PlayUnLimited', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  scheme?: string(name='Scheme', position='Query'),
  seekTime?: int32(name='SeekTime', position='Query'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', position='Query'),
  urlValidDuration?: int32(name='UrlValidDuration', position='Query'),
}

model QueryDeviceVodUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    decryptKey?: string(name='DecryptKey'),
    vodUrl?: string(name='VodUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceVodUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceVodUrlResponseBody(name='body'),
}

async function queryDeviceVodUrl(request: QueryDeviceVodUrlRequest): QueryDeviceVodUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceVodUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceVodUrlByTimeRequest {
  beginTime: int32(name='BeginTime', minimum=0, maximum=2147483648, position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  encryptType?: int32(name='EncryptType', minimum=0, maximum=2147483648, position='Query'),
  endTime: int32(name='EndTime', minimum=0, maximum=2147483648, position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  playUnLimited?: boolean(name='PlayUnLimited', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  scheme?: string(name='Scheme', position='Query'),
  seekTime?: int32(name='SeekTime', minimum=0, maximum=2147483648, position='Query'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', position='Query'),
  urlValidDuration?: int32(name='UrlValidDuration', position='Query'),
}

model QueryDeviceVodUrlByTimeResponseBody = {
  code?: string(name='Code'),
  data?: {
    decryptKey?: string(name='DecryptKey'),
    vodUrl?: string(name='VodUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceVodUrlByTimeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceVodUrlByTimeResponseBody(name='body'),
}

async function queryDeviceVodUrlByTime(request: QueryDeviceVodUrlByTimeRequest): QueryDeviceVodUrlByTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceVodUrlByTime', 'POST', '/', 'json', false, 'json', request);
}

model QueryEventRecordPlanDetailRequest {
  planId: string(name='PlanId', position='Query'),
}

model QueryEventRecordPlanDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    name?: string(name='Name'),
    planId?: string(name='PlanId'),
    preRecordDuration?: int32(name='PreRecordDuration'),
    recordDuration?: int32(name='RecordDuration'),
    templateId?: string(name='TemplateId'),
    templateInfo?: {
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
      timeSectionList?: [ 
        {
          begin?: int32(name='Begin'),
          dayOfWeek?: int32(name='DayOfWeek'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
    }(name='TemplateInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlanDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlanDetailResponseBody(name='body'),
}

async function queryEventRecordPlanDetail(request: QueryEventRecordPlanDetailRequest): QueryEventRecordPlanDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEventRecordPlanDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryEventRecordPlanDeviceByDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
}

model QueryEventRecordPlanDeviceByDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    name?: string(name='Name'),
    planId?: string(name='PlanId'),
    preRecordDuration?: int32(name='PreRecordDuration'),
    recordDuration?: int32(name='RecordDuration'),
    templateId?: string(name='TemplateId'),
    templateInfo?: {
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
      timeSectionList?: [ 
        {
          begin?: int32(name='Begin'),
          dayOfWeek?: int32(name='DayOfWeek'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
    }(name='TemplateInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlanDeviceByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlanDeviceByDeviceResponseBody(name='body'),
}

async function queryEventRecordPlanDeviceByDevice(request: QueryEventRecordPlanDeviceByDeviceRequest): QueryEventRecordPlanDeviceByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEventRecordPlanDeviceByDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryEventRecordPlanDeviceByPlanRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  planId: string(name='PlanId', position='Query'),
}

model QueryEventRecordPlanDeviceByPlanResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        iotId?: string(name='IotId'),
        streamType?: int32(name='StreamType'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlanDeviceByPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlanDeviceByPlanResponseBody(name='body'),
}

async function queryEventRecordPlanDeviceByPlan(request: QueryEventRecordPlanDeviceByPlanRequest): QueryEventRecordPlanDeviceByPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEventRecordPlanDeviceByPlan', 'POST', '/', 'json', false, 'json', request);
}

model QueryEventRecordPlansRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryEventRecordPlansResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        eventType?: string(name='EventType'),
        name?: string(name='Name'),
        planId?: string(name='PlanId'),
        preRecordDuration?: int32(name='PreRecordDuration'),
        recordDuration?: int32(name='RecordDuration'),
        templateId?: string(name='TemplateId'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlansResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlansResponseBody(name='body'),
}

async function queryEventRecordPlans(request: QueryEventRecordPlansRequest): QueryEventRecordPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEventRecordPlans', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceAllDeviceGroupRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryFaceAllDeviceGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceGroupList?: [ 
      {
        deviceGroupId?: string(name='DeviceGroupId'),
        deviceGroupName?: string(name='DeviceGroupName'),
        modifiedTime?: string(name='ModifiedTime'),
      }
    ](name='DeviceGroupList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceAllDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllDeviceGroupResponseBody(name='body'),
}

async function queryFaceAllDeviceGroup(request: QueryFaceAllDeviceGroupRequest): QueryFaceAllDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceAllDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceAllUserGroupRequest {
  isolationId: string(name='IsolationId', position='Query'),
  pageNo: int32(name='PageNo', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model QueryFaceAllUserGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    userGroupList?: [ 
      {
        modifiedTime?: string(name='ModifiedTime'),
        userGroupId?: string(name='UserGroupId'),
        userGroupName?: string(name='UserGroupName'),
      }
    ](name='UserGroupList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceAllUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllUserGroupResponseBody(name='body'),
}

async function queryFaceAllUserGroup(request: QueryFaceAllUserGroupRequest): QueryFaceAllUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceAllUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceAllUserGroupAndDeviceGroupRelationRequest {
  isolationId: string(name='IsolationId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryFaceAllUserGroupAndDeviceGroupRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        controlId?: string(name='ControlId'),
        controlType?: string(name='ControlType'),
        deviceGroupId?: string(name='DeviceGroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        userGroupId?: string(name='UserGroupId'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceAllUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function queryFaceAllUserGroupAndDeviceGroupRelation(request: QueryFaceAllUserGroupAndDeviceGroupRelationRequest): QueryFaceAllUserGroupAndDeviceGroupRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceAllUserGroupAndDeviceGroupRelation', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceAllUserIdsByGroupIdRequest {
  isolationId: string(name='IsolationId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  userGroupId: string(name='UserGroupId', position='Query'),
}

model QueryFaceAllUserIdsByGroupIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        customUserId?: string(name='CustomUserId'),
        name?: string(name='Name'),
        params?: string(name='Params'),
        userId?: string(name='UserId'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceAllUserIdsByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllUserIdsByGroupIdResponseBody(name='body'),
}

async function queryFaceAllUserIdsByGroupId(request: QueryFaceAllUserIdsByGroupIdRequest): QueryFaceAllUserIdsByGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceAllUserIdsByGroupId', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceCustomUserIdByUserIdRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model QueryFaceCustomUserIdByUserIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceCustomUserIdByUserIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceCustomUserIdByUserIdResponseBody(name='body'),
}

async function queryFaceCustomUserIdByUserId(request: QueryFaceCustomUserIdByUserIdRequest): QueryFaceCustomUserIdByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceCustomUserIdByUserId', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceDeviceGroupsByDeviceRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryFaceDeviceGroupsByDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceGroupList?: [ 
      {
        deviceGroupId?: string(name='DeviceGroupId'),
        deviceGroupName?: string(name='DeviceGroupName'),
        modifiedTime?: string(name='ModifiedTime'),
      }
    ](name='DeviceGroupList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceDeviceGroupsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceDeviceGroupsByDeviceResponseBody(name='body'),
}

async function queryFaceDeviceGroupsByDevice(request: QueryFaceDeviceGroupsByDeviceRequest): QueryFaceDeviceGroupsByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceDeviceGroupsByDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceUserRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model QueryFaceUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    customUserId?: string(name='CustomUserId'),
    facePicList?: [ 
      {
        faceMd5?: string(name='FaceMd5'),
        faceUrl?: string(name='FaceUrl'),
        featureDTOList?: [ 
          {
            algorithmName?: string(name='AlgorithmName'),
            algorithmProvider?: string(name='AlgorithmProvider'),
            algorithmVersion?: string(name='AlgorithmVersion'),
            errorCode?: string(name='ErrorCode'),
            errorMessage?: string(name='ErrorMessage'),
            faceMd5?: string(name='FaceMd5'),
          }
        ](name='FeatureDTOList'),
      }
    ](name='FacePicList'),
    name?: string(name='Name'),
    params?: string(name='Params'),
    userId?: string(name='UserId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserResponseBody(name='body'),
}

async function queryFaceUser(request: QueryFaceUserRequest): QueryFaceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceUser', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceUserBatchRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userIdList: [ string ](name='UserIdList', position='Query'),
}

model QueryFaceUserBatchResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: long(name='CreateTime'),
      customUserId?: string(name='CustomUserId'),
      facePicList?: [ 
        {
          faceMd5?: string(name='FaceMd5'),
          faceUrl?: string(name='FaceUrl'),
          featureDTOList?: [ 
            {
              algorithmName?: string(name='AlgorithmName'),
              algorithmProvider?: string(name='AlgorithmProvider'),
              algorithmVersion?: string(name='AlgorithmVersion'),
              errorCode?: string(name='ErrorCode'),
              errorMessage?: string(name='ErrorMessage'),
              faceMd5?: string(name='FaceMd5'),
            }
          ](name='FeatureDTOList'),
        }
      ](name='FacePicList'),
      modifyTime?: long(name='ModifyTime'),
      name?: string(name='Name'),
      params?: string(name='Params'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceUserBatchResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserBatchResponseBody(name='body'),
}

async function queryFaceUserBatch(request: QueryFaceUserBatchRequest): QueryFaceUserBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceUserBatch', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceUserByNameRequest {
  isolationId: string(name='IsolationId', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNo: int32(name='PageNo', minimum=1, maximum=1000000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  params?: string(name='Params', position='Query'),
}

model QueryFaceUserByNameResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        createTime?: long(name='CreateTime'),
        customUserId?: string(name='CustomUserId'),
        facePicList?: [ 
          {
            faceMd5?: string(name='FaceMd5'),
            faceUrl?: string(name='FaceUrl'),
            featureDTOList?: [ 
              {
                algorithmName?: string(name='AlgorithmName'),
                algorithmProvider?: string(name='AlgorithmProvider'),
                algorithmVersion?: string(name='AlgorithmVersion'),
                errorCode?: string(name='ErrorCode'),
                errorMessage?: string(name='ErrorMessage'),
                faceMd5?: string(name='FaceMd5'),
              }
            ](name='FeatureDTOList'),
          }
        ](name='FacePicList'),
        modifyTime?: long(name='ModifyTime'),
        name?: string(name='Name'),
        params?: string(name='Params'),
        userId?: string(name='UserId'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceUserByNameResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserByNameResponseBody(name='body'),
}

async function queryFaceUserByName(request: QueryFaceUserByNameRequest): QueryFaceUserByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceUserByName', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceUserGroupRequest {
  isolationId: string(name='IsolationId', position='Query'),
  pageNo: int32(name='PageNo', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  userId: string(name='UserId', position='Query'),
}

model QueryFaceUserGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    userGroupList?: [ 
      {
        modifiedTime?: string(name='ModifiedTime'),
        userGroupId?: string(name='UserGroupId'),
        userGroupName?: string(name='UserGroupName'),
      }
    ](name='UserGroupList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserGroupResponseBody(name='body'),
}

async function queryFaceUserGroup(request: QueryFaceUserGroupRequest): QueryFaceUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceUserGroupAndDeviceGroupRelationRequest {
  controlId: string(name='ControlId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
}

model QueryFaceUserGroupAndDeviceGroupRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    controlId?: string(name='ControlId'),
    controlType?: string(name='ControlType'),
    deviceGroupId?: string(name='DeviceGroupId'),
    modifiedTime?: string(name='ModifiedTime'),
    userGroupId?: string(name='UserGroupId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function queryFaceUserGroupAndDeviceGroupRelation(request: QueryFaceUserGroupAndDeviceGroupRelationRequest): QueryFaceUserGroupAndDeviceGroupRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceUserGroupAndDeviceGroupRelation', 'POST', '/', 'json', false, 'json', request);
}

model QueryFaceUserIdByCustomUserIdRequest {
  customUserId: string(name='CustomUserId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
}

model QueryFaceUserIdByCustomUserIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    customUserId?: string(name='CustomUserId'),
    name?: string(name='Name'),
    params?: string(name='Params'),
    userId?: string(name='UserId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFaceUserIdByCustomUserIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserIdByCustomUserIdResponseBody(name='body'),
}

async function queryFaceUserIdByCustomUserId(request: QueryFaceUserIdByCustomUserIdRequest): QueryFaceUserIdByCustomUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceUserIdByCustomUserId', 'POST', '/', 'json', false, 'json', request);
}

model QueryIotIdsByAIPlanRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  planId: string(name='PlanId', position='Query'),
}

model QueryIotIdsByAIPlanResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ string ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIotIdsByAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIotIdsByAIPlanResponseBody(name='body'),
}

async function queryIotIdsByAIPlan(request: QueryIotIdsByAIPlanRequest): QueryIotIdsByAIPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIotIdsByAIPlan', 'POST', '/', 'json', false, 'json', request);
}

model QueryLiveStreamingRequest {
  cacheDuration?: int32(name='CacheDuration', minimum=0, maximum=10000, position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  encryptType?: int32(name='EncryptType', position='Query'),
  forceIFrame?: boolean(name='ForceIFrame', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  playUnLimited?: boolean(name='PlayUnLimited', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  scheme?: string(name='Scheme', position='Query'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
  urlValidDuration?: int32(name='UrlValidDuration', position='Query'),
}

model QueryLiveStreamingResponseBody = {
  code?: string(name='Code'),
  data?: {
    decryptKey?: string(name='DecryptKey'),
    path?: string(name='Path'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryLiveStreamingResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLiveStreamingResponseBody(name='body'),
}

async function queryLiveStreaming(request: QueryLiveStreamingRequest): QueryLiveStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLiveStreaming', 'POST', '/', 'json', false, 'json', request);
}

model QueryLocalFileUploadJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model QueryLocalFileUploadJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    resultList?: [ 
      {
        code?: int32(name='Code'),
        deviceName?: string(name='DeviceName'),
        fileList?: [ 
          {
            fileEndTime?: int32(name='FileEndTime'),
            fileName?: string(name='FileName'),
            fileStartTime?: int32(name='FileStartTime'),
          }
        ](name='FileList'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
        slotEndTime?: int32(name='SlotEndTime'),
        slotStartTime?: int32(name='SlotStartTime'),
        slotStatus?: int32(name='SlotStatus'),
      }
    ](name='ResultList'),
    status?: int32(name='Status'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryLocalFileUploadJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLocalFileUploadJobResponseBody(name='body'),
}

async function queryLocalFileUploadJob(request: QueryLocalFileUploadJobRequest): QueryLocalFileUploadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLocalFileUploadJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthRecordRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  month: string(name='Month', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryMonthRecordResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMonthRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonthRecordResponseBody(name='body'),
}

async function queryMonthRecord(request: QueryMonthRecordRequest): QueryMonthRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureFilesRequest {
  beginTime: long(name='BeginTime', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  pictureSource?: int32(name='PictureSource', position='Query'),
  pictureType?: int32(name='PictureType', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryPictureFilesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        iotId?: string(name='IotId'),
        picCreateTime?: long(name='PicCreateTime'),
        picId?: string(name='PicId'),
        picUrl?: string(name='PicUrl'),
        thumbUrl?: string(name='ThumbUrl'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureFilesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureFilesResponseBody(name='body'),
}

async function queryPictureFiles(request: QueryPictureFilesRequest): QueryPictureFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureFiles', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureSearchAiboxesRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, maximum=100, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
}

model QueryPictureSearchAiboxesResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        iotId?: string(name='IotId'),
        nickName?: string(name='NickName'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchAiboxesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchAiboxesResponseBody(name='body'),
}

async function queryPictureSearchAiboxes(request: QueryPictureSearchAiboxesRequest): QueryPictureSearchAiboxesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureSearchAiboxes', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureSearchAppRequest {
}

model QueryPictureSearchAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      appInstanceId?: string(name='AppInstanceId'),
      appTemplateId?: string(name='AppTemplateId'),
      createTime?: long(name='CreateTime'),
      level?: string(name='Level'),
      modifiedTime?: long(name='ModifiedTime'),
      name?: string(name='Name'),
      version?: string(name='Version'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchAppResponseBody(name='body'),
}

async function queryPictureSearchApp(request: QueryPictureSearchAppRequest): QueryPictureSearchAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureSearchApp', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureSearchAppsRequest {
  currentPage: int32(name='CurrentPage', minimum=1, maximum=10000, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=20, position='Query'),
}

model QueryPictureSearchAppsResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        appInstanceId?: string(name='AppInstanceId'),
        appTemplateId?: string(name='AppTemplateId'),
        createTime?: long(name='CreateTime'),
        description?: string(name='Description'),
        modifiedTime?: long(name='ModifiedTime'),
        name?: string(name='Name'),
        version?: string(name='Version'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchAppsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchAppsResponseBody(name='body'),
}

async function queryPictureSearchApps(request: QueryPictureSearchAppsRequest): QueryPictureSearchAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureSearchApps', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureSearchDevicesRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', maximum=20, position='Query'),
}

model QueryPictureSearchDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        iotId?: string(name='IotId'),
        nickName?: string(name='NickName'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchDevicesResponseBody(name='body'),
}

async function queryPictureSearchDevices(request: QueryPictureSearchDevicesRequest): QueryPictureSearchDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureSearchDevices', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureSearchJobRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, maximum=10000, position='Query'),
  jobStatus?: int32(name='JobStatus', minimum=0, maximum=10, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=20, position='Query'),
}

model QueryPictureSearchJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        createTime?: long(name='CreateTime'),
        endTime?: long(name='EndTime'),
        jobId?: string(name='JobId'),
        jobStatus?: int32(name='JobStatus'),
        searchPicUrl?: string(name='SearchPicUrl'),
        startTime?: long(name='StartTime'),
        threshold?: float(name='Threshold'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchJobResponseBody(name='body'),
}

async function queryPictureSearchJob(request: QueryPictureSearchJobRequest): QueryPictureSearchJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureSearchJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryPictureSearchJobResultRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=1, maximum=10000, position='Query'),
  jobId: string(name='JobId', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=20, position='Query'),
}

model QueryPictureSearchJobResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageData?: [ 
      {
        deviceNickName?: string(name='DeviceNickName'),
        eventTime?: long(name='EventTime'),
        gatewayIotId?: string(name='GatewayIotId'),
        iotId?: string(name='IotId'),
        picUrl?: string(name='PicUrl'),
        threshold?: float(name='Threshold'),
        vectorId?: string(name='VectorId'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchJobResultResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchJobResultResponseBody(name='body'),
}

async function queryPictureSearchJobResult(request: QueryPictureSearchJobResultRequest): QueryPictureSearchJobResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPictureSearchJobResult', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordRequest {
  beginTime: int32(name='BeginTime', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: int32(name='EndTime', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  needSnapshot?: boolean(name='NeedSnapshot', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  recordType?: int32(name='RecordType', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
}

model QueryRecordResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        beginTime?: string(name='BeginTime'),
        endTime?: string(name='EndTime'),
        fileName?: string(name='FileName'),
        fileSize?: int32(name='FileSize'),
        recordType?: int32(name='RecordType'),
        snapshotUrl?: string(name='SnapshotUrl'),
        streamType?: int32(name='StreamType'),
        videoFrameNumber?: int32(name='VideoFrameNumber'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordResponseBody(name='body'),
}

async function queryRecord(request: QueryRecordRequest): QueryRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordByRecordIdRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  recordId: string(name='RecordId', position='Query'),
}

model QueryRecordByRecordIdResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      beginTime?: string(name='BeginTime'),
      endTime?: string(name='EndTime'),
      fileName?: string(name='FileName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordByRecordIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordByRecordIdResponseBody(name='body'),
}

async function queryRecordByRecordId(request: QueryRecordByRecordIdRequest): QueryRecordByRecordIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordByRecordId', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordDownloadUrlRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  fileName: string(name='FileName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryRecordDownloadUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    progress?: int32(name='Progress'),
    status?: int32(name='Status'),
    url?: string(name='Url'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordDownloadUrlResponseBody(name='body'),
}

async function queryRecordDownloadUrl(request: QueryRecordDownloadUrlRequest): QueryRecordDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordPlanDetailRequest {
  planId: string(name='PlanId', position='Query'),
}

model QueryRecordPlanDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    name?: string(name='Name'),
    planId?: string(name='PlanId'),
    templateId?: string(name='TemplateId'),
    templateInfo?: {
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
      timeSectionList?: [ 
        {
          begin?: int32(name='Begin'),
          dayOfWeek?: int32(name='DayOfWeek'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
    }(name='TemplateInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordPlanDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlanDetailResponseBody(name='body'),
}

async function queryRecordPlanDetail(request: QueryRecordPlanDetailRequest): QueryRecordPlanDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordPlanDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordPlanDeviceByDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType: int32(name='StreamType', position='Query'),
}

model QueryRecordPlanDeviceByDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    name?: string(name='Name'),
    planId?: string(name='PlanId'),
    templateId?: string(name='TemplateId'),
    templateInfo?: {
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
      timeSectionList?: [ 
        {
          begin?: int32(name='Begin'),
          dayOfWeek?: int32(name='DayOfWeek'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
    }(name='TemplateInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordPlanDeviceByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlanDeviceByDeviceResponseBody(name='body'),
}

async function queryRecordPlanDeviceByDevice(request: QueryRecordPlanDeviceByDeviceRequest): QueryRecordPlanDeviceByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordPlanDeviceByDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordPlanDeviceByPlanRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  planId: string(name='PlanId', position='Query'),
}

model QueryRecordPlanDeviceByPlanResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        iotId?: string(name='IotId'),
        streamType?: int32(name='StreamType'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordPlanDeviceByPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlanDeviceByPlanResponseBody(name='body'),
}

async function queryRecordPlanDeviceByPlan(request: QueryRecordPlanDeviceByPlanRequest): QueryRecordPlanDeviceByPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordPlanDeviceByPlan', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordPlansRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryRecordPlansResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        name?: string(name='Name'),
        planId?: string(name='PlanId'),
        templateId?: string(name='TemplateId'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordPlansResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlansResponseBody(name='body'),
}

async function queryRecordPlans(request: QueryRecordPlansRequest): QueryRecordPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordPlans', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordUrlRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  fileName: string(name='FileName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  seekTime?: int32(name='SeekTime', position='Query'),
  urlValidDuration?: int32(name='UrlValidDuration', minimum=10, maximum=3600, position='Query'),
}

model QueryRecordUrlResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordUrlResponseBody(name='body'),
}

async function queryRecordUrl(request: QueryRecordUrlRequest): QueryRecordUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordUrlByTimeRequest {
  beginTime: int32(name='BeginTime', minimum=0, maximum=2147483647, position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: int32(name='EndTime', minimum=0, maximum=2147483647, position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
  urlValidDuration?: int32(name='UrlValidDuration', minimum=10, maximum=3600, position='Query'),
}

model QueryRecordUrlByTimeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecordUrlByTimeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordUrlByTimeResponseBody(name='body'),
}

async function queryRecordUrlByTime(request: QueryRecordUrlByTimeRequest): QueryRecordUrlByTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordUrlByTime', 'POST', '/', 'json', false, 'json', request);
}

model QueryStandardAIAppTemplatesRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryStandardAIAppTemplatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        appTemplateId?: string(name='AppTemplateId'),
        description?: string(name='Description'),
        name?: string(name='Name'),
        version?: string(name='Version'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStandardAIAppTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStandardAIAppTemplatesResponseBody(name='body'),
}

async function queryStandardAIAppTemplates(request: QueryStandardAIAppTemplatesRequest): QueryStandardAIAppTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStandardAIAppTemplates', 'POST', '/', 'json', false, 'json', request);
}

model QueryTimeTemplateRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryTimeTemplateResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        allDay?: int32(name='AllDay'),
        default?: int32(name='Default'),
        name?: string(name='Name'),
        templateId?: string(name='TemplateId'),
        timeSectionList?: [ 
          {
            begin?: int32(name='Begin'),
            dayOfWeek?: int32(name='DayOfWeek'),
            end?: int32(name='End'),
          }
        ](name='TimeSectionList'),
      }
    ](name='List'),
    page?: int32(name='Page'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTimeTemplateResponseBody(name='body'),
}

async function queryTimeTemplate(request: QueryTimeTemplateRequest): QueryTimeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTimeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QueryTimeTemplateDetailRequest {
  templateId: string(name='TemplateId', position='Query'),
}

model QueryTimeTemplateDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    allDay?: int32(name='AllDay'),
    default?: int32(name='Default'),
    name?: string(name='Name'),
    templateId?: string(name='TemplateId'),
    timeSectionList?: [ 
      {
        begin?: int32(name='Begin'),
        dayOfWeek?: int32(name='DayOfWeek'),
        end?: int32(name='End'),
      }
    ](name='TimeSectionList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTimeTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTimeTemplateDetailResponseBody(name='body'),
}

async function queryTimeTemplateDetail(request: QueryTimeTemplateDetailRequest): QueryTimeTemplateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTimeTemplateDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryVoiceIntercomRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryVoiceIntercomResponseBody = {
  code?: string(name='Code'),
  data?: {
    cryptoKey?: {
      iv?: string(name='Iv'),
      key?: string(name='Key'),
    }(name='CryptoKey'),
    url?: string(name='Url'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryVoiceIntercomResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVoiceIntercomResponseBody(name='body'),
}

async function queryVoiceIntercom(request: QueryVoiceIntercomRequest): QueryVoiceIntercomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVoiceIntercom', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAIAppRequest {
  appId: string(name='AppId', position='Query'),
}

model RemoveAIAppResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAIAppResponseBody(name='body'),
}

async function removeAIApp(request: RemoveAIAppRequest): RemoveAIAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAIApp', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAIPlanRequest {
  planId: string(name='PlanId', position='Query'),
}

model RemoveAIPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAIPlanResponseBody(name='body'),
}

async function removeAIPlan(request: RemoveAIPlanRequest): RemoveAIPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAIPlan', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDevicePurifyPlanRequest {
  planId: string(name='PlanId', position='Query'),
}

model RemoveDevicePurifyPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDevicePurifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDevicePurifyPlanResponseBody(name='body'),
}

async function removeDevicePurifyPlan(request: RemoveDevicePurifyPlanRequest): RemoveDevicePurifyPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDevicePurifyPlan', 'POST', '/', 'json', false, 'json', request);
}

model RemoveFaceDeviceFromDeviceGroupRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model RemoveFaceDeviceFromDeviceGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveFaceDeviceFromDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFaceDeviceFromDeviceGroupResponseBody(name='body'),
}

async function removeFaceDeviceFromDeviceGroup(request: RemoveFaceDeviceFromDeviceGroupRequest): RemoveFaceDeviceFromDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveFaceDeviceFromDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveFaceUserFromUserGroupRequest {
  isolationId: string(name='IsolationId', position='Query'),
  userGroupId: string(name='UserGroupId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model RemoveFaceUserFromUserGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveFaceUserFromUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFaceUserFromUserGroupResponseBody(name='body'),
}

async function removeFaceUserFromUserGroup(request: RemoveFaceUserFromUserGroupRequest): RemoveFaceUserFromUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveFaceUserFromUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetDevicePictureLifeCycleRequest {
  day: int32(name='Day', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model SetDevicePictureLifeCycleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDevicePictureLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicePictureLifeCycleResponseBody(name='body'),
}

async function setDevicePictureLifeCycle(request: SetDevicePictureLifeCycleRequest): SetDevicePictureLifeCycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDevicePictureLifeCycle', 'POST', '/', 'json', false, 'json', request);
}

model SetDeviceRecordLifeCycleRequest {
  day: int32(name='Day', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model SetDeviceRecordLifeCycleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDeviceRecordLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceRecordLifeCycleResponseBody(name='body'),
}

async function setDeviceRecordLifeCycle(request: SetDeviceRecordLifeCycleRequest): SetDeviceRecordLifeCycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceRecordLifeCycle', 'POST', '/', 'json', false, 'json', request);
}

model StopLiveStreamingRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
}

model StopLiveStreamingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopLiveStreamingResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveStreamingResponseBody(name='body'),
}

async function stopLiveStreaming(request: StopLiveStreamingRequest): StopLiveStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLiveStreaming', 'POST', '/', 'json', false, 'json', request);
}

model StopTriggeredRecordRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  recordId: string(name='RecordId', position='Query'),
}

model StopTriggeredRecordResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopTriggeredRecordResponse = {
  headers: map[string]string(name='headers'),
  body: StopTriggeredRecordResponseBody(name='body'),
}

async function stopTriggeredRecord(request: StopTriggeredRecordRequest): StopTriggeredRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTriggeredRecord', 'POST', '/', 'json', false, 'json', request);
}

model TransferDeviceInstanceRequest {
  deviceNameList: [ string ](name='DeviceNameList', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', position='Query'),
}

model TransferDeviceInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    failedList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        message?: string(name='Message'),
      }
    ](name='FailedList'),
    successList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        message?: string(name='Message'),
      }
    ](name='SuccessList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferDeviceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: TransferDeviceInstanceResponseBody(name='body'),
}

async function transferDeviceInstance(request: TransferDeviceInstanceRequest): TransferDeviceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferDeviceInstance', 'POST', '/', 'json', false, 'json', request);
}

model TriggerCapturePictureRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model TriggerCapturePictureResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TriggerCapturePictureResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerCapturePictureResponseBody(name='body'),
}

async function triggerCapturePicture(request: TriggerCapturePictureRequest): TriggerCapturePictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerCapturePicture', 'POST', '/', 'json', false, 'json', request);
}

model TriggerRecordRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  recordDuration: int32(name='RecordDuration', position='Query'),
  streamType?: int32(name='StreamType', position='Query'),
}

model TriggerRecordResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TriggerRecordResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerRecordResponseBody(name='body'),
}

async function triggerRecord(request: TriggerRecordRequest): TriggerRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerRecord', 'POST', '/', 'json', false, 'json', request);
}

model UnbindAIPlanWithDevicesRequest {
  iotIdList: [ string ](name='IotIdList', position='Query'),
  planId: string(name='PlanId', position='Query'),
}

model UnbindAIPlanWithDevicesResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindAIPlanWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindAIPlanWithDevicesResponseBody(name='body'),
}

async function unbindAIPlanWithDevices(request: UnbindAIPlanWithDevicesRequest): UnbindAIPlanWithDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAIPlanWithDevices', 'POST', '/', 'json', false, 'json', request);
}

model UnbindPictureSearchAppWithDevicesRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  deviceIotIds: [ string ](name='DeviceIotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model UnbindPictureSearchAppWithDevicesResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindPictureSearchAppWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPictureSearchAppWithDevicesResponseBody(name='body'),
}

async function unbindPictureSearchAppWithDevices(request: UnbindPictureSearchAppWithDevicesRequest): UnbindPictureSearchAppWithDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPictureSearchAppWithDevices', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAIAppRequest {
  appId: string(name='AppId', position='Query'),
  description?: string(name='Description', position='Query'),
  level?: int32(name='Level', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateAIAppResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAIAppResponseBody(name='body'),
}

async function updateAIApp(request: UpdateAIAppRequest): UpdateAIAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAIApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAIPlanRequest {
  description?: string(name='Description', position='Query'),
  planId: string(name='PlanId', position='Query'),
}

model UpdateAIPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAIPlanResponseBody(name='body'),
}

async function updateAIPlan(request: UpdateAIPlanRequest): UpdateAIPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAIPlan', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDevicePurifyPlanRequest {
  endTime: int32(name='EndTime', position='Query'),
  planId: string(name='PlanId', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
}

model UpdateDevicePurifyPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDevicePurifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicePurifyPlanResponseBody(name='body'),
}

async function updateDevicePurifyPlan(request: UpdateDevicePurifyPlanRequest): UpdateDevicePurifyPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevicePurifyPlan', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEventRecordPlanRequest {
  eventTypes?: string(name='EventTypes', position='Query'),
  name: string(name='Name', position='Query'),
  planId: string(name='PlanId', position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', position='Query'),
  recordDuration: int32(name='RecordDuration', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model UpdateEventRecordPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEventRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEventRecordPlanResponseBody(name='body'),
}

async function updateEventRecordPlan(request: UpdateEventRecordPlanRequest): UpdateEventRecordPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventRecordPlan', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFaceUserRequest {
  customUserId?: string(name='CustomUserId', position='Query'),
  facePicUrl?: string(name='FacePicUrl', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  name?: string(name='Name', position='Query'),
  params?: string(name='Params', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model UpdateFaceUserResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFaceUserResponseBody(name='body'),
}

async function updateFaceUser(request: UpdateFaceUserRequest): UpdateFaceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFaceUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFaceUserGroupAndDeviceGroupRelationRequest {
  controlId: string(name='ControlId', position='Query'),
  isolationId: string(name='IsolationId', position='Query'),
  relation: string(name='Relation', position='Query'),
}

model UpdateFaceUserGroupAndDeviceGroupRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    controlId?: string(name='ControlId'),
    modifiedTime?: string(name='ModifiedTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function updateFaceUserGroupAndDeviceGroupRelation(request: UpdateFaceUserGroupAndDeviceGroupRelationRequest): UpdateFaceUserGroupAndDeviceGroupRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFaceUserGroupAndDeviceGroupRelation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateModelRequest {
  description?: string(name='Description', position='Query'),
  hardware?: string(name='Hardware', position='Query'),
  modelId: long(name='ModelId', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateModelResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateModelResponseBody(name='body'),
}

async function updateModel(request: UpdateModelRequest): UpdateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateModel', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePictureSearchAppRequest {
  appInstanceId: string(name='AppInstanceId', position='Query'),
  description: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
}

model UpdatePictureSearchAppResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdatePictureSearchAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePictureSearchAppResponseBody(name='body'),
}

async function updatePictureSearchApp(request: UpdatePictureSearchAppRequest): UpdatePictureSearchAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePictureSearchApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordPlanRequest {
  name: string(name='Name', position='Query'),
  planId: string(name='PlanId', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model UpdateRecordPlanResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecordPlanResponseBody(name='body'),
}

async function updateRecordPlan(request: UpdateRecordPlanRequest): UpdateRecordPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordPlan', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTimeTemplateRequest {
  allDay: int32(name='AllDay', position='Query'),
  name?: string(name='Name', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
  timeSections?: [ 
    {
      begin?: int32(name='Begin'),
      dayOfWeek?: int32(name='DayOfWeek'),
      end?: int32(name='End'),
    }
  ](name='TimeSections', position='Query'),
}

model UpdateTimeTemplateResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTimeTemplateResponseBody(name='body'),
}

async function updateTimeTemplate(request: UpdateTimeTemplateRequest): UpdateTimeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTimeTemplate', 'POST', '/', 'json', false, 'json', request);
}

