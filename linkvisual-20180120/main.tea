/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    ap-northeast-1 = 'linkvisual.aliyuncs.com',
    ap-northeast-2-pop = 'linkvisual.aliyuncs.com',
    ap-south-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-2 = 'linkvisual.aliyuncs.com',
    ap-southeast-3 = 'linkvisual.aliyuncs.com',
    ap-southeast-5 = 'linkvisual.aliyuncs.com',
    cn-beijing = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-pop = 'linkvisual.aliyuncs.com',
    cn-beijing-gov-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkvisual.aliyuncs.com',
    cn-chengdu = 'linkvisual.aliyuncs.com',
    cn-edge-1 = 'linkvisual.aliyuncs.com',
    cn-fujian = 'linkvisual.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-finance = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkvisual.aliyuncs.com',
    cn-hongkong = 'linkvisual.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkvisual.aliyuncs.com',
    cn-huhehaote = 'linkvisual.aliyuncs.com',
    cn-north-2-gov-1 = 'linkvisual.aliyuncs.com',
    cn-qingdao = 'linkvisual.aliyuncs.com',
    cn-qingdao-nebula = 'linkvisual.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shanghai-inner = 'linkvisual.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen = 'linkvisual.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-inner = 'linkvisual.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkvisual.aliyuncs.com',
    cn-wuhan = 'linkvisual.aliyuncs.com',
    cn-yushanfang = 'linkvisual.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkvisual.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkvisual.aliyuncs.com',
    eu-central-1 = 'linkvisual.aliyuncs.com',
    eu-west-1 = 'linkvisual.aliyuncs.com',
    eu-west-1-oxs = 'linkvisual.aliyuncs.com',
    me-east-1 = 'linkvisual.aliyuncs.com',
    rus-west-1-pop = 'linkvisual.aliyuncs.com',
    us-east-1 = 'linkvisual.aliyuncs.com',
    us-west-1 = 'linkvisual.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('linkvisual', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddEventRecordPlanDeviceRequest {
  iotId?: string(name='IotId'),
  planId?: string(name='PlanId'),
  streamType?: int32(name='StreamType'),
}

model AddEventRecordPlanDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddEventRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddEventRecordPlanDeviceResponseBody(name='body'),
}

async function addEventRecordPlanDeviceWithOptions(request: AddEventRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): AddEventRecordPlanDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["PlanId"] = request.planId;
  query["StreamType"] = request.streamType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddEventRecordPlanDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addEventRecordPlanDevice(request: AddEventRecordPlanDeviceRequest): AddEventRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEventRecordPlanDeviceWithOptions(request, runtime);
}

model AddFaceDeviceGroupRequest {
  isolationId?: string(name='IsolationId'),
  deviceGroupName?: string(name='DeviceGroupName'),
}

model AddFaceDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    deviceGroupId?: string(name='DeviceGroupId'),
    modifiedTime?: string(name='ModifiedTime'),
    deviceGroupName?: string(name='DeviceGroupName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceDeviceGroupResponseBody(name='body'),
}

async function addFaceDeviceGroupWithOptions(request: AddFaceDeviceGroupRequest, runtime: Util.RuntimeOptions): AddFaceDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["DeviceGroupName"] = request.deviceGroupName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceDeviceGroup(request: AddFaceDeviceGroupRequest): AddFaceDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceDeviceGroupWithOptions(request, runtime);
}

model AddFaceDeviceToDeviceGroupRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  deviceGroupId?: string(name='DeviceGroupId'),
}

model AddFaceDeviceToDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceDeviceToDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceDeviceToDeviceGroupResponseBody(name='body'),
}

async function addFaceDeviceToDeviceGroupWithOptions(request: AddFaceDeviceToDeviceGroupRequest, runtime: Util.RuntimeOptions): AddFaceDeviceToDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["ProductKey"] = request.productKey;
  query["DeviceName"] = request.deviceName;
  query["DeviceGroupId"] = request.deviceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceDeviceToDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceDeviceToDeviceGroup(request: AddFaceDeviceToDeviceGroupRequest): AddFaceDeviceToDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceDeviceToDeviceGroupWithOptions(request, runtime);
}

model AddFaceUserRequest {
  isolationId?: string(name='IsolationId'),
  facePicUrl?: string(name='FacePicUrl'),
  customUserId?: string(name='CustomUserId'),
  name?: string(name='Name'),
  params?: string(name='Params'),
}

model AddFaceUserResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    params?: string(name='Params'),
    customUserId?: string(name='CustomUserId'),
    userId?: string(name='UserId'),
    name?: string(name='Name'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserResponseBody(name='body'),
}

async function addFaceUserWithOptions(request: AddFaceUserRequest, runtime: Util.RuntimeOptions): AddFaceUserResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["FacePicUrl"] = request.facePicUrl;
  query["CustomUserId"] = request.customUserId;
  query["Name"] = request.name;
  query["Params"] = request.params;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceUser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceUser(request: AddFaceUserRequest): AddFaceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceUserWithOptions(request, runtime);
}

model AddFaceUserGroupRequest {
  isolationId?: string(name='IsolationId'),
  userGroupName?: string(name='UserGroupName'),
}

model AddFaceUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    modifiedTime?: string(name='ModifiedTime'),
    userGroupId?: string(name='UserGroupId'),
    userGroupName?: string(name='UserGroupName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserGroupResponseBody(name='body'),
}

async function addFaceUserGroupWithOptions(request: AddFaceUserGroupRequest, runtime: Util.RuntimeOptions): AddFaceUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserGroupName"] = request.userGroupName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceUserGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceUserGroup(request: AddFaceUserGroupRequest): AddFaceUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceUserGroupWithOptions(request, runtime);
}

model AddFaceUserGroupAndDeviceGroupRelationRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  userGroupId?: string(name='UserGroupId'),
  deviceGroupId?: string(name='DeviceGroupId'),
  relation?: string(name='Relation'),
}

model AddFaceUserGroupAndDeviceGroupRelationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    modifiedTime?: string(name='ModifiedTime'),
    controlId?: string(name='ControlId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function addFaceUserGroupAndDeviceGroupRelationWithOptions(request: AddFaceUserGroupAndDeviceGroupRelationRequest, runtime: Util.RuntimeOptions): AddFaceUserGroupAndDeviceGroupRelationResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["UserGroupId"] = request.userGroupId;
  query["DeviceGroupId"] = request.deviceGroupId;
  query["Relation"] = request.relation;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceUserGroupAndDeviceGroupRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceUserGroupAndDeviceGroupRelation(request: AddFaceUserGroupAndDeviceGroupRelationRequest): AddFaceUserGroupAndDeviceGroupRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceUserGroupAndDeviceGroupRelationWithOptions(request, runtime);
}

model AddFaceUserPictureRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
  facePicUrl?: string(name='FacePicUrl'),
}

model AddFaceUserPictureResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceUserPictureResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserPictureResponseBody(name='body'),
}

async function addFaceUserPictureWithOptions(request: AddFaceUserPictureRequest, runtime: Util.RuntimeOptions): AddFaceUserPictureResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  query["FacePicUrl"] = request.facePicUrl;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceUserPicture',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceUserPicture(request: AddFaceUserPictureRequest): AddFaceUserPictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceUserPictureWithOptions(request, runtime);
}

model AddFaceUserToUserGroupRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
  userGroupId?: string(name='UserGroupId'),
}

model AddFaceUserToUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddFaceUserToUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddFaceUserToUserGroupResponseBody(name='body'),
}

async function addFaceUserToUserGroupWithOptions(request: AddFaceUserToUserGroupRequest, runtime: Util.RuntimeOptions): AddFaceUserToUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  query["UserGroupId"] = request.userGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddFaceUserToUserGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFaceUserToUserGroup(request: AddFaceUserToUserGroupRequest): AddFaceUserToUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFaceUserToUserGroupWithOptions(request, runtime);
}

model AddRecordPlanDeviceRequest {
  iotId?: string(name='IotId'),
  planId?: string(name='PlanId'),
  streamType?: int32(name='StreamType'),
}

model AddRecordPlanDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddRecordPlanDeviceResponseBody(name='body'),
}

async function addRecordPlanDeviceWithOptions(request: AddRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): AddRecordPlanDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["PlanId"] = request.planId;
  query["StreamType"] = request.streamType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddRecordPlanDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRecordPlanDevice(request: AddRecordPlanDeviceRequest): AddRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecordPlanDeviceWithOptions(request, runtime);
}

model BindAIPlanWithDevicesRequest {
  planId?: string(name='PlanId'),
  iotIdList?: [ string ](name='IotIdList'),
}

model BindAIPlanWithDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindAIPlanWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BindAIPlanWithDevicesResponseBody(name='body'),
}

async function bindAIPlanWithDevicesWithOptions(request: BindAIPlanWithDevicesRequest, runtime: Util.RuntimeOptions): BindAIPlanWithDevicesResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["IotIdList"] = request.iotIdList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindAIPlanWithDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAIPlanWithDevices(request: BindAIPlanWithDevicesRequest): BindAIPlanWithDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAIPlanWithDevicesWithOptions(request, runtime);
}

model BindPictureSearchAppWithDevicesRequest {
  appInstanceId?: string(name='AppInstanceId'),
  iotInstanceId?: string(name='IotInstanceId'),
  deviceIotIds?: [ string ](name='DeviceIotIds'),
}

model BindPictureSearchAppWithDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindPictureSearchAppWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BindPictureSearchAppWithDevicesResponseBody(name='body'),
}

async function bindPictureSearchAppWithDevicesWithOptions(request: BindPictureSearchAppWithDevicesRequest, runtime: Util.RuntimeOptions): BindPictureSearchAppWithDevicesResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["DeviceIotIds"] = request.deviceIotIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindPictureSearchAppWithDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindPictureSearchAppWithDevices(request: BindPictureSearchAppWithDevicesRequest): BindPictureSearchAppWithDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPictureSearchAppWithDevicesWithOptions(request, runtime);
}

model CheckFaceUserDoExistOnDeviceRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  userId?: string(name='UserId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
}

model CheckFaceUserDoExistOnDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    doExist?: boolean(name='DoExist'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CheckFaceUserDoExistOnDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFaceUserDoExistOnDeviceResponseBody(name='body'),
}

async function checkFaceUserDoExistOnDeviceWithOptions(request: CheckFaceUserDoExistOnDeviceRequest, runtime: Util.RuntimeOptions): CheckFaceUserDoExistOnDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["UserId"] = request.userId;
  query["ProductKey"] = request.productKey;
  query["DeviceName"] = request.deviceName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CheckFaceUserDoExistOnDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkFaceUserDoExistOnDevice(request: CheckFaceUserDoExistOnDeviceRequest): CheckFaceUserDoExistOnDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFaceUserDoExistOnDeviceWithOptions(request, runtime);
}

model ClearFaceDeviceDBRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
}

model ClearFaceDeviceDBResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ClearFaceDeviceDBResponse = {
  headers: map[string]string(name='headers'),
  body: ClearFaceDeviceDBResponseBody(name='body'),
}

async function clearFaceDeviceDBWithOptions(request: ClearFaceDeviceDBRequest, runtime: Util.RuntimeOptions): ClearFaceDeviceDBResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["ProductKey"] = request.productKey;
  query["DeviceName"] = request.deviceName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ClearFaceDeviceDB',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearFaceDeviceDB(request: ClearFaceDeviceDBRequest): ClearFaceDeviceDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearFaceDeviceDBWithOptions(request, runtime);
}

model ConfigAIActionRequest {
  actionId?: string(name='ActionId'),
  algoConfig?: string(name='AlgoConfig'),
  dataTypeConfigList?: [ 
    {
      dataType?: string(name='DataType'),
      configs?: string(name='Configs'),
    }
  ](name='DataTypeConfigList'),
}

model ConfigAIActionResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ConfigAIActionResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigAIActionResponseBody(name='body'),
}

async function configAIActionWithOptions(request: ConfigAIActionRequest, runtime: Util.RuntimeOptions): ConfigAIActionResponse {
  Util.validateModel(request);
  var query = {};
  query["ActionId"] = request.actionId;
  query["AlgoConfig"] = request.algoConfig;
  query["DataTypeConfigList"] = request.dataTypeConfigList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfigAIAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configAIAction(request: ConfigAIActionRequest): ConfigAIActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return configAIActionWithOptions(request, runtime);
}

model CreateAIAppRequest {
  appTemplateId?: string(name='AppTemplateId'),
  appTemplateVersion?: string(name='AppTemplateVersion'),
  level?: int32(name='Level'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model CreateAIAppResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIAppResponseBody(name='body'),
}

async function createAIAppWithOptions(request: CreateAIAppRequest, runtime: Util.RuntimeOptions): CreateAIAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppTemplateId"] = request.appTemplateId;
  query["AppTemplateVersion"] = request.appTemplateVersion;
  query["Level"] = request.level;
  query["Name"] = request.name;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateAIApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAIApp(request: CreateAIAppRequest): CreateAIAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAIAppWithOptions(request, runtime);
}

model CreateAIPlanRequest {
  appId?: string(name='AppId'),
  planTemplateId?: string(name='PlanTemplateId'),
  description?: string(name='Description'),
}

model CreateAIPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIPlanResponseBody(name='body'),
}

async function createAIPlanWithOptions(request: CreateAIPlanRequest, runtime: Util.RuntimeOptions): CreateAIPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["AppId"] = request.appId;
  query["PlanTemplateId"] = request.planTemplateId;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateAIPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAIPlan(request: CreateAIPlanRequest): CreateAIPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAIPlanWithOptions(request, runtime);
}

model CreateAlgorithmRequest {
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model CreateAlgorithmResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlgorithmResponseBody(name='body'),
}

async function createAlgorithmWithOptions(request: CreateAlgorithmRequest, runtime: Util.RuntimeOptions): CreateAlgorithmResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlgorithm',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAlgorithm(request: CreateAlgorithmRequest): CreateAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlgorithmWithOptions(request, runtime);
}

model CreateDevicePurifyJobRequest {
  iotId?: string(name='IotId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model CreateDevicePurifyJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDevicePurifyJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePurifyJobResponseBody(name='body'),
}

async function createDevicePurifyJobWithOptions(request: CreateDevicePurifyJobRequest, runtime: Util.RuntimeOptions): CreateDevicePurifyJobResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDevicePurifyJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDevicePurifyJob(request: CreateDevicePurifyJobRequest): CreateDevicePurifyJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePurifyJobWithOptions(request, runtime);
}

model CreateDevicePurifyJobByPlanIdRequest {
  planId?: string(name='PlanId'),
  utc?: long(name='Utc'),
}

model CreateDevicePurifyJobByPlanIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDevicePurifyJobByPlanIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePurifyJobByPlanIdResponseBody(name='body'),
}

async function createDevicePurifyJobByPlanIdWithOptions(request: CreateDevicePurifyJobByPlanIdRequest, runtime: Util.RuntimeOptions): CreateDevicePurifyJobByPlanIdResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["Utc"] = request.utc;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDevicePurifyJobByPlanId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDevicePurifyJobByPlanId(request: CreateDevicePurifyJobByPlanIdRequest): CreateDevicePurifyJobByPlanIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePurifyJobByPlanIdWithOptions(request, runtime);
}

model CreateDevicePurifyPlanRequest {
  iotId?: string(name='IotId'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
}

model CreateDevicePurifyPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDevicePurifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePurifyPlanResponseBody(name='body'),
}

async function createDevicePurifyPlanWithOptions(request: CreateDevicePurifyPlanRequest, runtime: Util.RuntimeOptions): CreateDevicePurifyPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDevicePurifyPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDevicePurifyPlan(request: CreateDevicePurifyPlanRequest): CreateDevicePurifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePurifyPlanWithOptions(request, runtime);
}

model CreateEventRecordPlanRequest {
  name?: string(name='Name'),
  eventTypes?: string(name='EventTypes'),
  preRecordDuration?: int32(name='PreRecordDuration'),
  recordDuration?: int32(name='RecordDuration'),
  templateId?: string(name='TemplateId'),
}

model CreateEventRecordPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEventRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEventRecordPlanResponseBody(name='body'),
}

async function createEventRecordPlanWithOptions(request: CreateEventRecordPlanRequest, runtime: Util.RuntimeOptions): CreateEventRecordPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["EventTypes"] = request.eventTypes;
  query["PreRecordDuration"] = request.preRecordDuration;
  query["RecordDuration"] = request.recordDuration;
  query["TemplateId"] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateEventRecordPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEventRecordPlan(request: CreateEventRecordPlanRequest): CreateEventRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventRecordPlanWithOptions(request, runtime);
}

model CreateModelRequest {
  algorithmId?: long(name='AlgorithmId'),
  name?: string(name='Name'),
  modelPackageStandard?: string(name='ModelPackageStandard'),
  hardware?: string(name='Hardware'),
  uploadModelPath?: string(name='UploadModelPath'),
  needEncrypt?: boolean(name='NeedEncrypt'),
  description?: string(name='Description'),
}

model CreateModelResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModelWithOptions(request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmId"] = request.algorithmId;
  query["Name"] = request.name;
  query["ModelPackageStandard"] = request.modelPackageStandard;
  query["Hardware"] = request.hardware;
  query["UploadModelPath"] = request.uploadModelPath;
  query["NeedEncrypt"] = request.needEncrypt;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model CreatePictureSearchAppRequest {
  name?: string(name='Name'),
  desc?: string(name='Desc'),
}

model CreatePictureSearchAppResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreatePictureSearchAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePictureSearchAppResponseBody(name='body'),
}

async function createPictureSearchAppWithOptions(request: CreatePictureSearchAppRequest, runtime: Util.RuntimeOptions): CreatePictureSearchAppResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["Desc"] = request.desc;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreatePictureSearchApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPictureSearchApp(request: CreatePictureSearchAppRequest): CreatePictureSearchAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPictureSearchAppWithOptions(request, runtime);
}

model CreatePictureSearchJobRequest {
  appInstanceId?: string(name='AppInstanceId'),
  searchPicUrl?: string(name='SearchPicUrl'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  threshold?: float(name='Threshold'),
  bodyThreshold?: float(name='BodyThreshold'),
  pictureSearchType?: int32(name='PictureSearchType'),
}

model CreatePictureSearchJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreatePictureSearchJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePictureSearchJobResponseBody(name='body'),
}

async function createPictureSearchJobWithOptions(request: CreatePictureSearchJobRequest, runtime: Util.RuntimeOptions): CreatePictureSearchJobResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["SearchPicUrl"] = request.searchPicUrl;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Threshold"] = request.threshold;
  query["BodyThreshold"] = request.bodyThreshold;
  query["PictureSearchType"] = request.pictureSearchType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreatePictureSearchJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPictureSearchJob(request: CreatePictureSearchJobRequest): CreatePictureSearchJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPictureSearchJobWithOptions(request, runtime);
}

model CreateRecordPlanRequest {
  name?: string(name='Name'),
  templateId?: string(name='TemplateId'),
}

model CreateRecordPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRecordPlanResponseBody(name='body'),
}

async function createRecordPlanWithOptions(request: CreateRecordPlanRequest, runtime: Util.RuntimeOptions): CreateRecordPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["TemplateId"] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateRecordPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRecordPlan(request: CreateRecordPlanRequest): CreateRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecordPlanWithOptions(request, runtime);
}

model CreateTimeTemplateRequest {
  name?: string(name='Name'),
  allDay?: int32(name='AllDay'),
  timeSections?: [ 
    {
      dayOfWeek?: int32(name='DayOfWeek'),
      begin?: int32(name='Begin'),
      end?: int32(name='End'),
    }
  ](name='TimeSections'),
}

model CreateTimeTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTimeTemplateResponseBody(name='body'),
}

async function createTimeTemplateWithOptions(request: CreateTimeTemplateRequest, runtime: Util.RuntimeOptions): CreateTimeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["AllDay"] = request.allDay;
  query["TimeSections"] = request.timeSections;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateTimeTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTimeTemplate(request: CreateTimeTemplateRequest): CreateTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTimeTemplateWithOptions(request, runtime);
}

model DeleteAlgorithmRequest {
  algorithmId?: long(name='AlgorithmId'),
}

model DeleteAlgorithmResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlgorithmResponseBody(name='body'),
}

async function deleteAlgorithmWithOptions(request: DeleteAlgorithmRequest, runtime: Util.RuntimeOptions): DeleteAlgorithmResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmId"] = request.algorithmId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlgorithm',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlgorithm(request: DeleteAlgorithmRequest): DeleteAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlgorithmWithOptions(request, runtime);
}

model DeleteEventRecordPlanRequest {
  planId?: string(name='PlanId'),
}

model DeleteEventRecordPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteEventRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventRecordPlanResponseBody(name='body'),
}

async function deleteEventRecordPlanWithOptions(request: DeleteEventRecordPlanRequest, runtime: Util.RuntimeOptions): DeleteEventRecordPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventRecordPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventRecordPlan(request: DeleteEventRecordPlanRequest): DeleteEventRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventRecordPlanWithOptions(request, runtime);
}

model DeleteEventRecordPlanDeviceRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
}

model DeleteEventRecordPlanDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteEventRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventRecordPlanDeviceResponseBody(name='body'),
}

async function deleteEventRecordPlanDeviceWithOptions(request: DeleteEventRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): DeleteEventRecordPlanDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventRecordPlanDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventRecordPlanDevice(request: DeleteEventRecordPlanDeviceRequest): DeleteEventRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventRecordPlanDeviceWithOptions(request, runtime);
}

model DeleteFaceDeviceGroupRequest {
  isolationId?: string(name='IsolationId'),
  deviceGroupId?: string(name='DeviceGroupId'),
}

model DeleteFaceDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteFaceDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceDeviceGroupResponseBody(name='body'),
}

async function deleteFaceDeviceGroupWithOptions(request: DeleteFaceDeviceGroupRequest, runtime: Util.RuntimeOptions): DeleteFaceDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["DeviceGroupId"] = request.deviceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFaceDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFaceDeviceGroup(request: DeleteFaceDeviceGroupRequest): DeleteFaceDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFaceDeviceGroupWithOptions(request, runtime);
}

model DeleteFaceUserRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
}

model DeleteFaceUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserResponseBody(name='body'),
}

async function deleteFaceUserWithOptions(request: DeleteFaceUserRequest, runtime: Util.RuntimeOptions): DeleteFaceUserResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFaceUser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFaceUser(request: DeleteFaceUserRequest): DeleteFaceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFaceUserWithOptions(request, runtime);
}

model DeleteFaceUserGroupRequest {
  isolationId?: string(name='IsolationId'),
  userGroupId?: string(name='UserGroupId'),
}

model DeleteFaceUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserGroupResponseBody(name='body'),
}

async function deleteFaceUserGroupWithOptions(request: DeleteFaceUserGroupRequest, runtime: Util.RuntimeOptions): DeleteFaceUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserGroupId"] = request.userGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFaceUserGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFaceUserGroup(request: DeleteFaceUserGroupRequest): DeleteFaceUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFaceUserGroupWithOptions(request, runtime);
}

model DeleteFaceUserGroupAndDeviceGroupRelationRequest {
  isolationId?: string(name='IsolationId'),
  controlId?: string(name='ControlId'),
}

model DeleteFaceUserGroupAndDeviceGroupRelationResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function deleteFaceUserGroupAndDeviceGroupRelationWithOptions(request: DeleteFaceUserGroupAndDeviceGroupRelationRequest, runtime: Util.RuntimeOptions): DeleteFaceUserGroupAndDeviceGroupRelationResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["ControlId"] = request.controlId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFaceUserGroupAndDeviceGroupRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFaceUserGroupAndDeviceGroupRelation(request: DeleteFaceUserGroupAndDeviceGroupRelationRequest): DeleteFaceUserGroupAndDeviceGroupRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFaceUserGroupAndDeviceGroupRelationWithOptions(request, runtime);
}

model DeleteFaceUserPictureRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
  facePicMd5?: string(name='FacePicMd5'),
}

model DeleteFaceUserPictureResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteFaceUserPictureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaceUserPictureResponseBody(name='body'),
}

async function deleteFaceUserPictureWithOptions(request: DeleteFaceUserPictureRequest, runtime: Util.RuntimeOptions): DeleteFaceUserPictureResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  query["FacePicMd5"] = request.facePicMd5;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFaceUserPicture',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFaceUserPicture(request: DeleteFaceUserPictureRequest): DeleteFaceUserPictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFaceUserPictureWithOptions(request, runtime);
}

model DeleteModelRequest {
  modelId?: long(name='ModelId'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModelWithOptions(request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  var query = {};
  query["ModelId"] = request.modelId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(request, runtime);
}

model DeleteRecordPlanRequest {
  planId?: string(name='PlanId'),
}

model DeleteRecordPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordPlanResponseBody(name='body'),
}

async function deleteRecordPlanWithOptions(request: DeleteRecordPlanRequest, runtime: Util.RuntimeOptions): DeleteRecordPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecordPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRecordPlan(request: DeleteRecordPlanRequest): DeleteRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordPlanWithOptions(request, runtime);
}

model DeleteRecordPlanDeviceRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
}

model DeleteRecordPlanDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteRecordPlanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordPlanDeviceResponseBody(name='body'),
}

async function deleteRecordPlanDeviceWithOptions(request: DeleteRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): DeleteRecordPlanDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecordPlanDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRecordPlanDevice(request: DeleteRecordPlanDeviceRequest): DeleteRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordPlanDeviceWithOptions(request, runtime);
}

model DeleteTimeTemplateRequest {
  templateId?: string(name='TemplateId'),
}

model DeleteTimeTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTimeTemplateResponseBody(name='body'),
}

async function deleteTimeTemplateWithOptions(request: DeleteTimeTemplateRequest, runtime: Util.RuntimeOptions): DeleteTimeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  query["TemplateId"] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTimeTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTimeTemplate(request: DeleteTimeTemplateRequest): DeleteTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTimeTemplateWithOptions(request, runtime);
}

model DeployModelBatchRequest {
  modelId?: long(name='ModelId'),
  deviceList?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceList'),
}

model DeployModelBatchResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    deployTaskResultVOList?: [  map[string]any ](name='DeployTaskResultVOList')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeployModelBatchResponse = {
  headers: map[string]string(name='headers'),
  body: DeployModelBatchResponseBody(name='body'),
}

async function deployModelBatchWithOptions(request: DeployModelBatchRequest, runtime: Util.RuntimeOptions): DeployModelBatchResponse {
  Util.validateModel(request);
  var query = {};
  query["ModelId"] = request.modelId;
  query["DeviceList"] = request.deviceList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeployModelBatch',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployModelBatch(request: DeployModelBatchRequest): DeployModelBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployModelBatchWithOptions(request, runtime);
}

model DetectUserFaceByUrlRequest {
  facePicUrl?: string(name='FacePicUrl'),
}

model DetectUserFaceByUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    data?: [ 
    {
      blurScore?: float(name='BlurScore'),
      gender?: int32(name='Gender'),
      faceRects?: {
        faceRectsData?: [ string ](name='FaceRectsData')
      }(name='FaceRects'),
      occlusionScore?: float(name='OcclusionScore'),
      goodForLibrary?: boolean(name='GoodForLibrary'),
      goodForRecognition?: boolean(name='GoodForRecognition'),
      age?: int32(name='Age'),
      landmarks?: {
        landmarksData?: [ string ](name='LandmarksData')
      }(name='Landmarks'),
      faceProbability?: float(name='FaceProbability'),
      poseScore?: float(name='PoseScore'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DetectUserFaceByUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DetectUserFaceByUrlResponseBody(name='body'),
}

async function detectUserFaceByUrlWithOptions(request: DetectUserFaceByUrlRequest, runtime: Util.RuntimeOptions): DetectUserFaceByUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["FacePicUrl"] = request.facePicUrl;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DetectUserFaceByUrl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectUserFaceByUrl(request: DetectUserFaceByUrlRequest): DetectUserFaceByUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectUserFaceByUrlWithOptions(request, runtime);
}

model GetAIActionRequest {
  actionId?: string(name='ActionId'),
}

model GetAIActionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    algoConfig?: string(name='AlgoConfig'),
    action?: string(name='Action'),
    actionId?: string(name='ActionId'),
    actionTemplateId?: string(name='ActionTemplateId'),
    alog?: string(name='Alog'),
    actionIndex?: int32(name='ActionIndex'),
    actionConfig?: string(name='ActionConfig'),
    planId?: string(name='PlanId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAIActionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIActionResponseBody(name='body'),
}

async function getAIActionWithOptions(request: GetAIActionRequest, runtime: Util.RuntimeOptions): GetAIActionResponse {
  Util.validateModel(request);
  var query = {};
  query["ActionId"] = request.actionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAIAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAIAction(request: GetAIActionRequest): GetAIActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIActionWithOptions(request, runtime);
}

model GetAIActionConfigRequest {
  algo?: string(name='Algo'),
  algoAction?: string(name='AlgoAction'),
}

model GetAIActionConfigResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    inParamList?: [ 
      {
        needConfig?: boolean(name='NeedConfig'),
        dataType?: string(name='DataType'),
        configItems?: [ string ](name='ConfigItems'),
      }
    ](name='InParamList'),
    algoAction?: string(name='AlgoAction'),
    sync?: string(name='Sync'),
    needDevice?: boolean(name='NeedDevice'),
    outParamList?: [ 
      {
        needConfig?: boolean(name='NeedConfig'),
        dataType?: string(name='DataType'),
        configItems?: [ string ](name='ConfigItems'),
      }
    ](name='OutParamList'),
    algoConfigItems?: string(name='AlgoConfigItems'),
    des?: string(name='Des'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAIActionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIActionConfigResponseBody(name='body'),
}

async function getAIActionConfigWithOptions(request: GetAIActionConfigRequest, runtime: Util.RuntimeOptions): GetAIActionConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["Algo"] = request.algo;
  query["AlgoAction"] = request.algoAction;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAIActionConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAIActionConfig(request: GetAIActionConfigRequest): GetAIActionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIActionConfigWithOptions(request, runtime);
}

model GetAIAppRequest {
  appId?: string(name='AppId'),
}

model GetAIAppResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    description?: string(name='Description'),
    version?: string(name='Version'),
    appId?: string(name='AppId'),
    appTemplateId?: string(name='AppTemplateId'),
    name?: string(name='Name'),
    level?: int32(name='Level'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIAppResponseBody(name='body'),
}

async function getAIAppWithOptions(request: GetAIAppRequest, runtime: Util.RuntimeOptions): GetAIAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppId"] = request.appId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAIApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAIApp(request: GetAIAppRequest): GetAIAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIAppWithOptions(request, runtime);
}

model GetAIJobRequest {
  jobId?: string(name='JobId'),
}

model GetAIJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    dataDTOList?: [ 
      {
        dataSource?: string(name='DataSource'),
        dataType?: string(name='DataType'),
        algoData?: string(name='AlgoData'),
        jobId?: string(name='JobId'),
        dataId?: string(name='DataId'),
        iotId?: string(name='IotId'),
      }
    ](name='DataDTOList'),
    actionJobDTO?: {
      status?: int32(name='Status'),
      jobId?: string(name='JobId'),
      actionId?: string(name='ActionId'),
      iotId?: string(name='IotId'),
    }(name='ActionJobDTO'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAIJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIJobResponseBody(name='body'),
}

async function getAIJobWithOptions(request: GetAIJobRequest, runtime: Util.RuntimeOptions): GetAIJobResponse {
  Util.validateModel(request);
  var query = {};
  query["JobId"] = request.jobId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAIJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAIJob(request: GetAIJobRequest): GetAIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIJobWithOptions(request, runtime);
}

model GetAIPlanRequest {
  planId?: string(name='PlanId'),
}

model GetAIPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    planTemplateId?: string(name='PlanTemplateId'),
    triggerEnum?: int32(name='TriggerEnum'),
    description?: string(name='Description'),
    preTiming?: long(name='PreTiming'),
    appId?: string(name='AppId'),
    intervalTiming?: int32(name='IntervalTiming'),
    planId?: string(name='PlanId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIPlanResponseBody(name='body'),
}

async function getAIPlanWithOptions(request: GetAIPlanRequest, runtime: Util.RuntimeOptions): GetAIPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAIPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAIPlan(request: GetAIPlanRequest): GetAIPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIPlanWithOptions(request, runtime);
}

model GetAlgorithmDetailByIdRequest {
  algorithmId?: long(name='AlgorithmId'),
}

model GetAlgorithmDetailByIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAlgorithmDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlgorithmDetailByIdResponseBody(name='body'),
}

async function getAlgorithmDetailByIdWithOptions(request: GetAlgorithmDetailByIdRequest, runtime: Util.RuntimeOptions): GetAlgorithmDetailByIdResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmId"] = request.algorithmId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAlgorithmDetailById',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAlgorithmDetailById(request: GetAlgorithmDetailByIdRequest): GetAlgorithmDetailByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlgorithmDetailByIdWithOptions(request, runtime);
}

model GetAlgorithmDetailByNameRequest {
  name?: string(name='Name'),
}

model GetAlgorithmDetailByNameResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAlgorithmDetailByNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlgorithmDetailByNameResponseBody(name='body'),
}

async function getAlgorithmDetailByNameWithOptions(request: GetAlgorithmDetailByNameRequest, runtime: Util.RuntimeOptions): GetAlgorithmDetailByNameResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetAlgorithmDetailByName',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAlgorithmDetailByName(request: GetAlgorithmDetailByNameRequest): GetAlgorithmDetailByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlgorithmDetailByNameWithOptions(request, runtime);
}

model GetDevicePurifyJobByJobIdRequest {
  jobId?: string(name='JobId'),
}

model GetDevicePurifyJobByJobIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: int32(name='Status'),
    deviceName?: string(name='DeviceName'),
    userId?: string(name='UserId'),
    planId?: string(name='PlanId'),
    endTime?: long(name='EndTime'),
    startTime?: long(name='StartTime'),
    purifyRecordIndexUrl?: string(name='PurifyRecordIndexUrl'),
    productKey?: string(name='ProductKey'),
    purifyRecordNameUrl?: string(name='PurifyRecordNameUrl'),
    jobId?: string(name='JobId'),
    iotId?: string(name='IotId'),
    tenantId?: string(name='TenantId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetDevicePurifyJobByJobIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevicePurifyJobByJobIdResponseBody(name='body'),
}

async function getDevicePurifyJobByJobIdWithOptions(request: GetDevicePurifyJobByJobIdRequest, runtime: Util.RuntimeOptions): GetDevicePurifyJobByJobIdResponse {
  Util.validateModel(request);
  var query = {};
  query["JobId"] = request.jobId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetDevicePurifyJobByJobId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDevicePurifyJobByJobId(request: GetDevicePurifyJobByJobIdRequest): GetDevicePurifyJobByJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDevicePurifyJobByJobIdWithOptions(request, runtime);
}

model GetModelDetailRequest {
  algorithmId?: long(name='AlgorithmId'),
  version?: string(name='Version'),
}

model GetModelDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetModelDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelDetailResponseBody(name='body'),
}

async function getModelDetailWithOptions(request: GetModelDetailRequest, runtime: Util.RuntimeOptions): GetModelDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmId"] = request.algorithmId;
  query["Version"] = request.version;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetModelDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModelDetail(request: GetModelDetailRequest): GetModelDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelDetailWithOptions(request, runtime);
}

model GetModelDetailByIdRequest {
  modelId?: long(name='ModelId'),
}

model GetModelDetailByIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetModelDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelDetailByIdResponseBody(name='body'),
}

async function getModelDetailByIdWithOptions(request: GetModelDetailByIdRequest, runtime: Util.RuntimeOptions): GetModelDetailByIdResponse {
  Util.validateModel(request);
  var query = {};
  query["ModelId"] = request.modelId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetModelDetailById',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModelDetailById(request: GetModelDetailByIdRequest): GetModelDetailByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelDetailByIdWithOptions(request, runtime);
}

model GetModelOssPolicyRequest {
  algorithmId?: long(name='AlgorithmId'),
  hardware?: string(name='Hardware'),
  modelPackageStandard?: string(name='ModelPackageStandard'),
}

model GetModelOssPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetModelOssPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelOssPolicyResponseBody(name='body'),
}

async function getModelOssPolicyWithOptions(request: GetModelOssPolicyRequest, runtime: Util.RuntimeOptions): GetModelOssPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmId"] = request.algorithmId;
  query["Hardware"] = request.hardware;
  query["ModelPackageStandard"] = request.modelPackageStandard;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetModelOssPolicy',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModelOssPolicy(request: GetModelOssPolicyRequest): GetModelOssPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelOssPolicyWithOptions(request, runtime);
}

model GetPictureInfoWithVectorIdsRequest {
  vectorIdList?: [ string ](name='VectorIdList'),
}

model GetPictureInfoWithVectorIdsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      picUrl?: string(name='PicUrl'),
      gatewayIotId?: string(name='GatewayIotId'),
      iotId?: string(name='IotId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetPictureInfoWithVectorIdsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureInfoWithVectorIdsResponseBody(name='body'),
}

async function getPictureInfoWithVectorIdsWithOptions(request: GetPictureInfoWithVectorIdsRequest, runtime: Util.RuntimeOptions): GetPictureInfoWithVectorIdsResponse {
  Util.validateModel(request);
  var query = {};
  query["VectorIdList"] = request.vectorIdList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetPictureInfoWithVectorIds',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPictureInfoWithVectorIds(request: GetPictureInfoWithVectorIdsRequest): GetPictureInfoWithVectorIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPictureInfoWithVectorIdsWithOptions(request, runtime);
}

model GetPictureSearchJobStatusRequest {
  appInstanceId?: string(name='AppInstanceId'),
  jobId?: string(name='JobId'),
}

model GetPictureSearchJobStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    endTime?: long(name='EndTime'),
    startTime?: long(name='StartTime'),
    jobStatus?: int32(name='JobStatus'),
    searchPicUrl?: string(name='SearchPicUrl'),
    createTime?: long(name='CreateTime'),
    jobId?: string(name='JobId'),
    threshold?: float(name='Threshold'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetPictureSearchJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureSearchJobStatusResponseBody(name='body'),
}

async function getPictureSearchJobStatusWithOptions(request: GetPictureSearchJobStatusRequest, runtime: Util.RuntimeOptions): GetPictureSearchJobStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["JobId"] = request.jobId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetPictureSearchJobStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPictureSearchJobStatus(request: GetPictureSearchJobStatusRequest): GetPictureSearchJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPictureSearchJobStatusWithOptions(request, runtime);
}

model GetPictureWithVectorIdRequest {
  vectorId?: string(name='VectorId'),
}

model GetPictureWithVectorIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetPictureWithVectorIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureWithVectorIdResponseBody(name='body'),
}

async function getPictureWithVectorIdWithOptions(request: GetPictureWithVectorIdRequest, runtime: Util.RuntimeOptions): GetPictureWithVectorIdResponse {
  Util.validateModel(request);
  var query = {};
  query["VectorId"] = request.vectorId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetPictureWithVectorId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPictureWithVectorId(request: GetPictureWithVectorIdRequest): GetPictureWithVectorIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPictureWithVectorIdWithOptions(request, runtime);
}

model ListAlgorithmsByPageRequest {
  namePattern?: string(name='NamePattern'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListAlgorithmsByPageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListAlgorithmsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlgorithmsByPageResponseBody(name='body'),
}

async function listAlgorithmsByPageWithOptions(request: ListAlgorithmsByPageRequest, runtime: Util.RuntimeOptions): ListAlgorithmsByPageResponse {
  Util.validateModel(request);
  var query = {};
  query["NamePattern"] = request.namePattern;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListAlgorithmsByPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAlgorithmsByPage(request: ListAlgorithmsByPageRequest): ListAlgorithmsByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlgorithmsByPageWithOptions(request, runtime);
}

model ListDeployTaskByModelIdAndDevicesRequest {
  modelId?: int32(name='ModelId'),
  deviceList?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceList'),
}

model ListDeployTaskByModelIdAndDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListDeployTaskByModelIdAndDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployTaskByModelIdAndDevicesResponseBody(name='body'),
}

async function listDeployTaskByModelIdAndDevicesWithOptions(request: ListDeployTaskByModelIdAndDevicesRequest, runtime: Util.RuntimeOptions): ListDeployTaskByModelIdAndDevicesResponse {
  Util.validateModel(request);
  var query = {};
  query["ModelId"] = request.modelId;
  query["DeviceList"] = request.deviceList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployTaskByModelIdAndDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeployTaskByModelIdAndDevices(request: ListDeployTaskByModelIdAndDevicesRequest): ListDeployTaskByModelIdAndDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeployTaskByModelIdAndDevicesWithOptions(request, runtime);
}

model ListDeployTaskByPageRequest {
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListDeployTaskByPageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListDeployTaskByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployTaskByPageResponseBody(name='body'),
}

async function listDeployTaskByPageWithOptions(request: ListDeployTaskByPageRequest, runtime: Util.RuntimeOptions): ListDeployTaskByPageResponse {
  Util.validateModel(request);
  var query = {};
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployTaskByPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeployTaskByPage(request: ListDeployTaskByPageRequest): ListDeployTaskByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeployTaskByPageWithOptions(request, runtime);
}

model ListModelsByPageRequest {
  algorithmId?: long(name='AlgorithmId'),
  sizeType?: string(name='SizeType'),
  modelPackageStandard?: string(name='ModelPackageStandard'),
  hardware?: string(name='Hardware'),
  namePattern?: string(name='NamePattern'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListModelsByPageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListModelsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelsByPageResponseBody(name='body'),
}

async function listModelsByPageWithOptions(request: ListModelsByPageRequest, runtime: Util.RuntimeOptions): ListModelsByPageResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmId"] = request.algorithmId;
  query["SizeType"] = request.sizeType;
  query["ModelPackageStandard"] = request.modelPackageStandard;
  query["Hardware"] = request.hardware;
  query["NamePattern"] = request.namePattern;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListModelsByPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listModelsByPage(request: ListModelsByPageRequest): ListModelsByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listModelsByPageWithOptions(request, runtime);
}

model ListModelVersionsByPageRequest {
  algorithmName?: string(name='AlgorithmName'),
  sizeType?: string(name='SizeType'),
  modelPackageStandard?: string(name='ModelPackageStandard'),
  hardware?: string(name='Hardware'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListModelVersionsByPageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListModelVersionsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelVersionsByPageResponseBody(name='body'),
}

async function listModelVersionsByPageWithOptions(request: ListModelVersionsByPageRequest, runtime: Util.RuntimeOptions): ListModelVersionsByPageResponse {
  Util.validateModel(request);
  var query = {};
  query["AlgorithmName"] = request.algorithmName;
  query["SizeType"] = request.sizeType;
  query["ModelPackageStandard"] = request.modelPackageStandard;
  query["Hardware"] = request.hardware;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListModelVersionsByPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listModelVersionsByPage(request: ListModelVersionsByPageRequest): ListModelVersionsByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listModelVersionsByPageWithOptions(request, runtime);
}

model PictureSearchPictureRequest {
  appInstanceId?: string(name='AppInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  searchPicUrl?: string(name='SearchPicUrl'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  threshold?: float(name='Threshold'),
  containPicUrl?: boolean(name='ContainPicUrl'),
  pictureSearchType?: int32(name='PictureSearchType'),
}

model PictureSearchPictureResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageData?: [ 
      {
        picUrl?: string(name='PicUrl'),
        eventTime?: long(name='EventTime'),
        gatewayIotId?: string(name='GatewayIotId'),
        vectorId?: string(name='VectorId'),
        threshold?: float(name='Threshold'),
        vectorType?: int32(name='VectorType'),
        iotId?: string(name='IotId'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model PictureSearchPictureResponse = {
  headers: map[string]string(name='headers'),
  body: PictureSearchPictureResponseBody(name='body'),
}

async function pictureSearchPictureWithOptions(request: PictureSearchPictureRequest, runtime: Util.RuntimeOptions): PictureSearchPictureResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  query["SearchPicUrl"] = request.searchPicUrl;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Threshold"] = request.threshold;
  query["ContainPicUrl"] = request.containPicUrl;
  query["PictureSearchType"] = request.pictureSearchType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'PictureSearchPicture',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pictureSearchPicture(request: PictureSearchPictureRequest): PictureSearchPictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return pictureSearchPictureWithOptions(request, runtime);
}

model QueryAIActionRequest {
  planId?: string(name='PlanId'),
}

model QueryAIActionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      algoConfig?: string(name='AlgoConfig'),
      action?: string(name='Action'),
      algo?: string(name='Algo'),
      actionId?: string(name='ActionId'),
      actionTemplateId?: string(name='ActionTemplateId'),
      actionIndex?: int32(name='ActionIndex'),
      actionConfig?: string(name='ActionConfig'),
      planId?: string(name='PlanId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAIActionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIActionResponseBody(name='body'),
}

async function queryAIActionWithOptions(request: QueryAIActionRequest, runtime: Util.RuntimeOptions): QueryAIActionResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAIAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAIAction(request: QueryAIActionRequest): QueryAIActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAIActionWithOptions(request, runtime);
}

model QueryAIAppRequest {
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryAIAppResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        description?: string(name='Description'),
        version?: string(name='Version'),
        appId?: string(name='AppId'),
        appTemplateId?: string(name='AppTemplateId'),
        name?: string(name='Name'),
        level?: int32(name='Level'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIAppResponseBody(name='body'),
}

async function queryAIAppWithOptions(request: QueryAIAppRequest, runtime: Util.RuntimeOptions): QueryAIAppResponse {
  Util.validateModel(request);
  var query = {};
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAIApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAIApp(request: QueryAIAppRequest): QueryAIAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAIAppWithOptions(request, runtime);
}

model QueryAIJobsRequest {
  actionId?: string(name='ActionId'),
  iotId?: string(name='IotId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryAIJobsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        status?: int32(name='Status'),
        jobId?: string(name='JobId'),
        actionId?: string(name='ActionId'),
        iotId?: string(name='IotId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAIJobsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIJobsResponseBody(name='body'),
}

async function queryAIJobsWithOptions(request: QueryAIJobsRequest, runtime: Util.RuntimeOptions): QueryAIJobsResponse {
  Util.validateModel(request);
  var query = {};
  query["ActionId"] = request.actionId;
  query["IotId"] = request.iotId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAIJobs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAIJobs(request: QueryAIJobsRequest): QueryAIJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAIJobsWithOptions(request, runtime);
}

model QueryAIPlanRequest {
  appId?: string(name='AppId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryAIPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        planTemplateId?: string(name='PlanTemplateId'),
        triggerEnum?: int32(name='TriggerEnum'),
        description?: string(name='Description'),
        preTiming?: long(name='PreTiming'),
        appId?: string(name='AppId'),
        intervalTiming?: int32(name='IntervalTiming'),
        planId?: string(name='PlanId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIPlanResponseBody(name='body'),
}

async function queryAIPlanWithOptions(request: QueryAIPlanRequest, runtime: Util.RuntimeOptions): QueryAIPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["AppId"] = request.appId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAIPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAIPlan(request: QueryAIPlanRequest): QueryAIPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAIPlanWithOptions(request, runtime);
}

model QueryAIPlanTemplatesRequest {
  appTemplateId?: string(name='AppTemplateId'),
  appVersion?: string(name='AppVersion'),
}

model QueryAIPlanTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      planTemplateId?: string(name='PlanTemplateId'),
      triggerEnum?: int32(name='TriggerEnum'),
      description?: string(name='Description'),
      intervalTiming?: int32(name='IntervalTiming'),
      appVersion?: string(name='AppVersion'),
      appTemplateId?: string(name='AppTemplateId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAIPlanTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAIPlanTemplatesResponseBody(name='body'),
}

async function queryAIPlanTemplatesWithOptions(request: QueryAIPlanTemplatesRequest, runtime: Util.RuntimeOptions): QueryAIPlanTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  query["AppTemplateId"] = request.appTemplateId;
  query["AppVersion"] = request.appVersion;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAIPlanTemplates',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAIPlanTemplates(request: QueryAIPlanTemplatesRequest): QueryAIPlanTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAIPlanTemplatesWithOptions(request, runtime);
}

model QueryDeviceEventRequest {
  iotId?: string(name='IotId'),
  eventType?: int32(name='EventType'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryDeviceEventResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        eventId?: string(name='EventId'),
        eventTime?: string(name='EventTime'),
        eventType?: int32(name='EventType'),
        eventPicId?: string(name='EventPicId'),
        eventDesc?: string(name='EventDesc'),
        eventData?: string(name='EventData'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    pageCount?: int32(name='PageCount'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventResponseBody(name='body'),
}

async function queryDeviceEventWithOptions(request: QueryDeviceEventRequest, runtime: Util.RuntimeOptions): QueryDeviceEventResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["EventType"] = request.eventType;
  query["BeginTime"] = request.beginTime;
  query["EndTime"] = request.endTime;
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceEvent',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceEvent(request: QueryDeviceEventRequest): QueryDeviceEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventWithOptions(request, runtime);
}

model QueryDeviceEventPictureRequest {
  iotId?: string(name='IotId'),
  eventId?: string(name='EventId'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryDeviceEventPictureResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventPictureResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventPictureResponseBody(name='body'),
}

async function queryDeviceEventPictureWithOptions(request: QueryDeviceEventPictureRequest, runtime: Util.RuntimeOptions): QueryDeviceEventPictureResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["EventId"] = request.eventId;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceEventPicture',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceEventPicture(request: QueryDeviceEventPictureRequest): QueryDeviceEventPictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventPictureWithOptions(request, runtime);
}

model QueryDeviceEventRecordRequest {
  iotId?: string(name='IotId'),
  eventId?: string(name='EventId'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryDeviceEventRecordResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      endTime?: string(name='EndTime'),
      beginTime?: string(name='BeginTime'),
      fileName?: string(name='FileName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventRecordResponseBody(name='body'),
}

async function queryDeviceEventRecordWithOptions(request: QueryDeviceEventRecordRequest, runtime: Util.RuntimeOptions): QueryDeviceEventRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["EventId"] = request.eventId;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceEventRecord',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceEventRecord(request: QueryDeviceEventRecordRequest): QueryDeviceEventRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventRecordWithOptions(request, runtime);
}

model QueryDeviceFileVodRequest {
  iotId?: string(name='IotId'),
  fileName?: string(name='FileName'),
  shouldEncrypt?: boolean(name='ShouldEncrypt'),
  encryptType?: int32(name='EncryptType'),
}

model QueryDeviceFileVodResponseBody = {
  requestId?: string(name='RequestId'),
  decryptKey?: string(name='DecryptKey'),
  data?: {
    vodUrl?: string(name='VodUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceFileVodResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileVodResponseBody(name='body'),
}

async function queryDeviceFileVodWithOptions(request: QueryDeviceFileVodRequest, runtime: Util.RuntimeOptions): QueryDeviceFileVodResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["FileName"] = request.fileName;
  query["ShouldEncrypt"] = request.shouldEncrypt;
  query["EncryptType"] = request.encryptType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceFileVod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceFileVod(request: QueryDeviceFileVodRequest): QueryDeviceFileVodResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileVodWithOptions(request, runtime);
}

model QueryDevicePictureFileRequest {
  iotId?: string(name='IotId'),
  captureId?: string(name='CaptureId'),
  pictureType?: int32(name='PictureType'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryDevicePictureFileResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    picUrl?: string(name='PicUrl'),
    picCreateTime?: long(name='PicCreateTime'),
    picId?: string(name='PicId'),
    thumbUrl?: string(name='ThumbUrl'),
    iotId?: string(name='IotId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDevicePictureFileResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePictureFileResponseBody(name='body'),
}

async function queryDevicePictureFileWithOptions(request: QueryDevicePictureFileRequest, runtime: Util.RuntimeOptions): QueryDevicePictureFileResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["CaptureId"] = request.captureId;
  query["PictureType"] = request.pictureType;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePictureFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePictureFile(request: QueryDevicePictureFileRequest): QueryDevicePictureFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePictureFileWithOptions(request, runtime);
}

model QueryDevicePictureLifeCycleRequest {
  iotId?: string(name='IotId'),
}

model QueryDevicePictureLifeCycleResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    day?: int32(name='Day'),
    iotId?: string(name='IotId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDevicePictureLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePictureLifeCycleResponseBody(name='body'),
}

async function queryDevicePictureLifeCycleWithOptions(request: QueryDevicePictureLifeCycleRequest, runtime: Util.RuntimeOptions): QueryDevicePictureLifeCycleResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePictureLifeCycle',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePictureLifeCycle(request: QueryDevicePictureLifeCycleRequest): QueryDevicePictureLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePictureLifeCycleWithOptions(request, runtime);
}

model QueryDevicePurifyJobsRequest {
  iotId?: string(name='IotId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDevicePurifyJobsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        status?: int32(name='Status'),
        deviceName?: string(name='DeviceName'),
        userId?: string(name='UserId'),
        planId?: string(name='PlanId'),
        endTime?: long(name='EndTime'),
        startTime?: long(name='StartTime'),
        purifyRecordIndexUrl?: string(name='PurifyRecordIndexUrl'),
        productKey?: string(name='ProductKey'),
        purifyRecordNameUrl?: string(name='PurifyRecordNameUrl'),
        jobId?: string(name='JobId'),
        iotId?: string(name='IotId'),
        tenantId?: string(name='TenantId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDevicePurifyJobsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePurifyJobsResponseBody(name='body'),
}

async function queryDevicePurifyJobsWithOptions(request: QueryDevicePurifyJobsRequest, runtime: Util.RuntimeOptions): QueryDevicePurifyJobsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePurifyJobs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePurifyJobs(request: QueryDevicePurifyJobsRequest): QueryDevicePurifyJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePurifyJobsWithOptions(request, runtime);
}

model QueryDevicePurifyPlanByPlanIdRequest {
  planId?: string(name='PlanId'),
}

model QueryDevicePurifyPlanByPlanIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    endTime?: int32(name='EndTime'),
    startTime?: int32(name='StartTime'),
    productKey?: string(name='ProductKey'),
    deviceName?: string(name='DeviceName'),
    userId?: string(name='UserId'),
    planId?: string(name='PlanId'),
    tenantId?: string(name='TenantId'),
    iotId?: string(name='IotId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDevicePurifyPlanByPlanIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePurifyPlanByPlanIdResponseBody(name='body'),
}

async function queryDevicePurifyPlanByPlanIdWithOptions(request: QueryDevicePurifyPlanByPlanIdRequest, runtime: Util.RuntimeOptions): QueryDevicePurifyPlanByPlanIdResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePurifyPlanByPlanId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePurifyPlanByPlanId(request: QueryDevicePurifyPlanByPlanIdRequest): QueryDevicePurifyPlanByPlanIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePurifyPlanByPlanIdWithOptions(request, runtime);
}

model QueryDevicePurifyPlansRequest {
  iotId?: string(name='IotId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDevicePurifyPlansResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        endTime?: int32(name='EndTime'),
        startTime?: int32(name='StartTime'),
        productKey?: string(name='ProductKey'),
        deviceName?: string(name='DeviceName'),
        userId?: string(name='UserId'),
        planId?: string(name='PlanId'),
        tenantId?: string(name='TenantId'),
        iotId?: string(name='IotId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDevicePurifyPlansResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePurifyPlansResponseBody(name='body'),
}

async function queryDevicePurifyPlansWithOptions(request: QueryDevicePurifyPlansRequest, runtime: Util.RuntimeOptions): QueryDevicePurifyPlansResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePurifyPlans',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePurifyPlans(request: QueryDevicePurifyPlansRequest): QueryDevicePurifyPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePurifyPlansWithOptions(request, runtime);
}

model QueryDeviceRecordLifeCycleRequest {
  deviceList?: [ string ](name='DeviceList'),
}

model QueryDeviceRecordLifeCycleResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      day?: int32(name='Day'),
      iotId?: string(name='IotId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceRecordLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceRecordLifeCycleResponseBody(name='body'),
}

async function queryDeviceRecordLifeCycleWithOptions(request: QueryDeviceRecordLifeCycleRequest, runtime: Util.RuntimeOptions): QueryDeviceRecordLifeCycleResponse {
  Util.validateModel(request);
  var query = {};
  query["DeviceList"] = request.deviceList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceRecordLifeCycle',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceRecordLifeCycle(request: QueryDeviceRecordLifeCycleRequest): QueryDeviceRecordLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceRecordLifeCycleWithOptions(request, runtime);
}

model QueryDeviceVodUrlRequest {
  fileName?: string(name='FileName'),
  scheme?: string(name='Scheme'),
  seekTime?: int32(name='SeekTime'),
  iotInstanceId?: string(name='IotInstanceId'),
  iotId?: string(name='IotId'),
  playUnLimited?: boolean(name='PlayUnLimited'),
  encryptType?: int32(name='EncryptType'),
  shouldEncrypt?: boolean(name='ShouldEncrypt'),
}

model QueryDeviceVodUrlResponseBody = {
  requestId?: string(name='RequestId'),
  decryptKey?: string(name='DecryptKey'),
  data?: {
    vodUrl?: string(name='VodUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceVodUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceVodUrlResponseBody(name='body'),
}

async function queryDeviceVodUrlWithOptions(request: QueryDeviceVodUrlRequest, runtime: Util.RuntimeOptions): QueryDeviceVodUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["FileName"] = request.fileName;
  query["Scheme"] = request.scheme;
  query["SeekTime"] = request.seekTime;
  query["IotInstanceId"] = request.iotInstanceId;
  query["IotId"] = request.iotId;
  query["PlayUnLimited"] = request.playUnLimited;
  query["EncryptType"] = request.encryptType;
  query["ShouldEncrypt"] = request.shouldEncrypt;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceVodUrl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceVodUrl(request: QueryDeviceVodUrlRequest): QueryDeviceVodUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceVodUrlWithOptions(request, runtime);
}

model QueryDeviceVodUrlByTimeRequest {
  endTime?: int32(name='EndTime'),
  scheme?: string(name='Scheme'),
  seekTime?: int32(name='SeekTime'),
  iotInstanceId?: string(name='IotInstanceId'),
  beginTime?: int32(name='BeginTime'),
  iotId?: string(name='IotId'),
  playUnLimited?: boolean(name='PlayUnLimited'),
  encryptType?: int32(name='EncryptType'),
  shouldEncrypt?: boolean(name='ShouldEncrypt'),
}

model QueryDeviceVodUrlByTimeResponseBody = {
  requestId?: string(name='RequestId'),
  decryptKey?: string(name='DecryptKey'),
  data?: {
    vodUrl?: string(name='VodUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryDeviceVodUrlByTimeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceVodUrlByTimeResponseBody(name='body'),
}

async function queryDeviceVodUrlByTimeWithOptions(request: QueryDeviceVodUrlByTimeRequest, runtime: Util.RuntimeOptions): QueryDeviceVodUrlByTimeResponse {
  Util.validateModel(request);
  var query = {};
  query["EndTime"] = request.endTime;
  query["Scheme"] = request.scheme;
  query["SeekTime"] = request.seekTime;
  query["IotInstanceId"] = request.iotInstanceId;
  query["BeginTime"] = request.beginTime;
  query["IotId"] = request.iotId;
  query["PlayUnLimited"] = request.playUnLimited;
  query["EncryptType"] = request.encryptType;
  query["ShouldEncrypt"] = request.shouldEncrypt;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceVodUrlByTime',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceVodUrlByTime(request: QueryDeviceVodUrlByTimeRequest): QueryDeviceVodUrlByTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceVodUrlByTimeWithOptions(request, runtime);
}

model QueryEventRecordPlanDetailRequest {
  planId?: string(name='PlanId'),
}

model QueryEventRecordPlanDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    recordDuration?: int32(name='RecordDuration'),
    preRecordDuration?: int32(name='PreRecordDuration'),
    name?: string(name='Name'),
    planId?: string(name='PlanId'),
    templateInfo?: {
      timeSectionList?: [ 
        {
          dayOfWeek?: int32(name='DayOfWeek'),
          begin?: int32(name='Begin'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
    }(name='TemplateInfo'),
    templateId?: string(name='TemplateId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlanDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlanDetailResponseBody(name='body'),
}

async function queryEventRecordPlanDetailWithOptions(request: QueryEventRecordPlanDetailRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlanDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryEventRecordPlanDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEventRecordPlanDetail(request: QueryEventRecordPlanDetailRequest): QueryEventRecordPlanDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlanDetailWithOptions(request, runtime);
}

model QueryEventRecordPlanDeviceByDeviceRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
}

model QueryEventRecordPlanDeviceByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    recordDuration?: int32(name='RecordDuration'),
    preRecordDuration?: int32(name='PreRecordDuration'),
    name?: string(name='Name'),
    planId?: string(name='PlanId'),
    templateInfo?: {
      timeSectionList?: [ 
        {
          dayOfWeek?: int32(name='DayOfWeek'),
          begin?: int32(name='Begin'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
    }(name='TemplateInfo'),
    templateId?: string(name='TemplateId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlanDeviceByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlanDeviceByDeviceResponseBody(name='body'),
}

async function queryEventRecordPlanDeviceByDeviceWithOptions(request: QueryEventRecordPlanDeviceByDeviceRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlanDeviceByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryEventRecordPlanDeviceByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEventRecordPlanDeviceByDevice(request: QueryEventRecordPlanDeviceByDeviceRequest): QueryEventRecordPlanDeviceByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlanDeviceByDeviceWithOptions(request, runtime);
}

model QueryEventRecordPlanDeviceByPlanRequest {
  planId?: string(name='PlanId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryEventRecordPlanDeviceByPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        streamType?: int32(name='StreamType'),
        iotId?: string(name='IotId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlanDeviceByPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlanDeviceByPlanResponseBody(name='body'),
}

async function queryEventRecordPlanDeviceByPlanWithOptions(request: QueryEventRecordPlanDeviceByPlanRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlanDeviceByPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryEventRecordPlanDeviceByPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEventRecordPlanDeviceByPlan(request: QueryEventRecordPlanDeviceByPlanRequest): QueryEventRecordPlanDeviceByPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlanDeviceByPlanWithOptions(request, runtime);
}

model QueryEventRecordPlansRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryEventRecordPlansResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        eventType?: string(name='EventType'),
        recordDuration?: int32(name='RecordDuration'),
        preRecordDuration?: int32(name='PreRecordDuration'),
        planId?: string(name='PlanId'),
        name?: string(name='Name'),
        templateId?: string(name='TemplateId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    pageCount?: int32(name='PageCount'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryEventRecordPlansResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEventRecordPlansResponseBody(name='body'),
}

async function queryEventRecordPlansWithOptions(request: QueryEventRecordPlansRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlansResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryEventRecordPlans',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEventRecordPlans(request: QueryEventRecordPlansRequest): QueryEventRecordPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlansWithOptions(request, runtime);
}

model QueryFaceAllDeviceGroupRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryFaceAllDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    deviceGroupList?: [ 
      {
        deviceGroupId?: string(name='DeviceGroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        deviceGroupName?: string(name='DeviceGroupName'),
      }
    ](name='DeviceGroupList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceAllDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllDeviceGroupResponseBody(name='body'),
}

async function queryFaceAllDeviceGroupWithOptions(request: QueryFaceAllDeviceGroupRequest, runtime: Util.RuntimeOptions): QueryFaceAllDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["PageSize"] = request.pageSize;
  query["PageNo"] = request.pageNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceAllDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceAllDeviceGroup(request: QueryFaceAllDeviceGroupRequest): QueryFaceAllDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceAllDeviceGroupWithOptions(request, runtime);
}

model QueryFaceAllUserGroupRequest {
  isolationId?: string(name='IsolationId'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryFaceAllUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    pageNo?: int32(name='PageNo'),
    userGroupList?: [ 
      {
        modifiedTime?: string(name='ModifiedTime'),
        userGroupId?: string(name='UserGroupId'),
        userGroupName?: string(name='UserGroupName'),
      }
    ](name='UserGroupList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceAllUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllUserGroupResponseBody(name='body'),
}

async function queryFaceAllUserGroupWithOptions(request: QueryFaceAllUserGroupRequest, runtime: Util.RuntimeOptions): QueryFaceAllUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["PageSize"] = request.pageSize;
  query["PageNo"] = request.pageNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceAllUserGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceAllUserGroup(request: QueryFaceAllUserGroupRequest): QueryFaceAllUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceAllUserGroupWithOptions(request, runtime);
}

model QueryFaceAllUserGroupAndDeviceGroupRelationRequest {
  isolationId?: string(name='IsolationId'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryFaceAllUserGroupAndDeviceGroupRelationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        deviceGroupId?: string(name='DeviceGroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        controlType?: string(name='ControlType'),
        userGroupId?: string(name='UserGroupId'),
        controlId?: string(name='ControlId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceAllUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function queryFaceAllUserGroupAndDeviceGroupRelationWithOptions(request: QueryFaceAllUserGroupAndDeviceGroupRelationRequest, runtime: Util.RuntimeOptions): QueryFaceAllUserGroupAndDeviceGroupRelationResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["PageSize"] = request.pageSize;
  query["PageNo"] = request.pageNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceAllUserGroupAndDeviceGroupRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceAllUserGroupAndDeviceGroupRelation(request: QueryFaceAllUserGroupAndDeviceGroupRelationRequest): QueryFaceAllUserGroupAndDeviceGroupRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceAllUserGroupAndDeviceGroupRelationWithOptions(request, runtime);
}

model QueryFaceAllUserIdsByGroupIdRequest {
  isolationId?: string(name='IsolationId'),
  userGroupId?: string(name='UserGroupId'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryFaceAllUserIdsByGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        params?: string(name='Params'),
        customUserId?: string(name='CustomUserId'),
        userId?: string(name='UserId'),
        name?: string(name='Name'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceAllUserIdsByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceAllUserIdsByGroupIdResponseBody(name='body'),
}

async function queryFaceAllUserIdsByGroupIdWithOptions(request: QueryFaceAllUserIdsByGroupIdRequest, runtime: Util.RuntimeOptions): QueryFaceAllUserIdsByGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserGroupId"] = request.userGroupId;
  query["PageSize"] = request.pageSize;
  query["PageNo"] = request.pageNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceAllUserIdsByGroupId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceAllUserIdsByGroupId(request: QueryFaceAllUserIdsByGroupIdRequest): QueryFaceAllUserIdsByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceAllUserIdsByGroupIdWithOptions(request, runtime);
}

model QueryFaceCustomUserIdByUserIdRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
}

model QueryFaceCustomUserIdByUserIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceCustomUserIdByUserIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceCustomUserIdByUserIdResponseBody(name='body'),
}

async function queryFaceCustomUserIdByUserIdWithOptions(request: QueryFaceCustomUserIdByUserIdRequest, runtime: Util.RuntimeOptions): QueryFaceCustomUserIdByUserIdResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceCustomUserIdByUserId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceCustomUserIdByUserId(request: QueryFaceCustomUserIdByUserIdRequest): QueryFaceCustomUserIdByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceCustomUserIdByUserIdWithOptions(request, runtime);
}

model QueryFaceDeviceGroupsByDeviceRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryFaceDeviceGroupsByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    deviceGroupList?: [ 
      {
        deviceGroupId?: string(name='DeviceGroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        deviceGroupName?: string(name='DeviceGroupName'),
      }
    ](name='DeviceGroupList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceDeviceGroupsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceDeviceGroupsByDeviceResponseBody(name='body'),
}

async function queryFaceDeviceGroupsByDeviceWithOptions(request: QueryFaceDeviceGroupsByDeviceRequest, runtime: Util.RuntimeOptions): QueryFaceDeviceGroupsByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["ProductKey"] = request.productKey;
  query["DeviceName"] = request.deviceName;
  query["PageSize"] = request.pageSize;
  query["PageNo"] = request.pageNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceDeviceGroupsByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceDeviceGroupsByDevice(request: QueryFaceDeviceGroupsByDeviceRequest): QueryFaceDeviceGroupsByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceDeviceGroupsByDeviceWithOptions(request, runtime);
}

model QueryFaceUserRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
}

model QueryFaceUserResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    params?: string(name='Params'),
    customUserId?: string(name='CustomUserId'),
    userId?: string(name='UserId'),
    facePicList?: [ 
      {
        faceUrl?: string(name='FaceUrl'),
        featureDTOList?: [ 
          {
            algorithmName?: string(name='AlgorithmName'),
            algorithmVersion?: string(name='AlgorithmVersion'),
            algorithmProvider?: string(name='AlgorithmProvider'),
            errorMessage?: string(name='ErrorMessage'),
            errorCode?: string(name='ErrorCode'),
            faceMd5?: string(name='FaceMd5'),
          }
        ](name='FeatureDTOList'),
        faceMd5?: string(name='FaceMd5'),
      }
    ](name='FacePicList'),
    name?: string(name='Name'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserResponseBody(name='body'),
}

async function queryFaceUserWithOptions(request: QueryFaceUserRequest, runtime: Util.RuntimeOptions): QueryFaceUserResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceUser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceUser(request: QueryFaceUserRequest): QueryFaceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceUserWithOptions(request, runtime);
}

model QueryFaceUserGroupRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryFaceUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    pageNo?: int32(name='PageNo'),
    userGroupList?: [ 
      {
        modifiedTime?: string(name='ModifiedTime'),
        userGroupId?: string(name='UserGroupId'),
        userGroupName?: string(name='UserGroupName'),
      }
    ](name='UserGroupList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserGroupResponseBody(name='body'),
}

async function queryFaceUserGroupWithOptions(request: QueryFaceUserGroupRequest, runtime: Util.RuntimeOptions): QueryFaceUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  query["PageSize"] = request.pageSize;
  query["PageNo"] = request.pageNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceUserGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceUserGroup(request: QueryFaceUserGroupRequest): QueryFaceUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceUserGroupWithOptions(request, runtime);
}

model QueryFaceUserGroupAndDeviceGroupRelationRequest {
  isolationId?: string(name='IsolationId'),
  controlId?: string(name='ControlId'),
}

model QueryFaceUserGroupAndDeviceGroupRelationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    deviceGroupId?: string(name='DeviceGroupId'),
    modifiedTime?: string(name='ModifiedTime'),
    controlType?: string(name='ControlType'),
    userGroupId?: string(name='UserGroupId'),
    controlId?: string(name='ControlId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function queryFaceUserGroupAndDeviceGroupRelationWithOptions(request: QueryFaceUserGroupAndDeviceGroupRelationRequest, runtime: Util.RuntimeOptions): QueryFaceUserGroupAndDeviceGroupRelationResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["ControlId"] = request.controlId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceUserGroupAndDeviceGroupRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceUserGroupAndDeviceGroupRelation(request: QueryFaceUserGroupAndDeviceGroupRelationRequest): QueryFaceUserGroupAndDeviceGroupRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceUserGroupAndDeviceGroupRelationWithOptions(request, runtime);
}

model QueryFaceUserIdByCustomUserIdRequest {
  isolationId?: string(name='IsolationId'),
  customUserId?: string(name='CustomUserId'),
}

model QueryFaceUserIdByCustomUserIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    params?: string(name='Params'),
    customUserId?: string(name='CustomUserId'),
    userId?: string(name='UserId'),
    name?: string(name='Name'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryFaceUserIdByCustomUserIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFaceUserIdByCustomUserIdResponseBody(name='body'),
}

async function queryFaceUserIdByCustomUserIdWithOptions(request: QueryFaceUserIdByCustomUserIdRequest, runtime: Util.RuntimeOptions): QueryFaceUserIdByCustomUserIdResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["CustomUserId"] = request.customUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryFaceUserIdByCustomUserId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFaceUserIdByCustomUserId(request: QueryFaceUserIdByCustomUserIdRequest): QueryFaceUserIdByCustomUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFaceUserIdByCustomUserIdWithOptions(request, runtime);
}

model QueryIotIdsByAIPlanRequest {
  planId?: string(name='PlanId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryIotIdsByAIPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ string ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryIotIdsByAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIotIdsByAIPlanResponseBody(name='body'),
}

async function queryIotIdsByAIPlanWithOptions(request: QueryIotIdsByAIPlanRequest, runtime: Util.RuntimeOptions): QueryIotIdsByAIPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryIotIdsByAIPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryIotIdsByAIPlan(request: QueryIotIdsByAIPlanRequest): QueryIotIdsByAIPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryIotIdsByAIPlanWithOptions(request, runtime);
}

model QueryLiveStreamingRequest {
  scheme?: string(name='Scheme'),
  iotInstanceId?: string(name='IotInstanceId'),
  streamType?: int32(name='StreamType'),
  cacheDuration?: int32(name='CacheDuration'),
  iotId?: string(name='IotId'),
  shouldEncrypt?: boolean(name='ShouldEncrypt'),
  playUnLimited?: boolean(name='PlayUnLimited'),
  encryptType?: int32(name='EncryptType'),
  forceIFrame?: boolean(name='ForceIFrame'),
}

model QueryLiveStreamingResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    path?: string(name='Path'),
    decryptKey?: string(name='DecryptKey'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryLiveStreamingResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLiveStreamingResponseBody(name='body'),
}

async function queryLiveStreamingWithOptions(request: QueryLiveStreamingRequest, runtime: Util.RuntimeOptions): QueryLiveStreamingResponse {
  Util.validateModel(request);
  var query = {};
  query["Scheme"] = request.scheme;
  query["IotInstanceId"] = request.iotInstanceId;
  query["StreamType"] = request.streamType;
  query["CacheDuration"] = request.cacheDuration;
  query["IotId"] = request.iotId;
  query["ShouldEncrypt"] = request.shouldEncrypt;
  query["PlayUnLimited"] = request.playUnLimited;
  query["EncryptType"] = request.encryptType;
  query["ForceIFrame"] = request.forceIFrame;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveStreaming',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLiveStreaming(request: QueryLiveStreamingRequest): QueryLiveStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLiveStreamingWithOptions(request, runtime);
}

model QueryMonthRecordRequest {
  iotId?: string(name='IotId'),
  month?: string(name='Month'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryMonthRecordResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryMonthRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonthRecordResponseBody(name='body'),
}

async function queryMonthRecordWithOptions(request: QueryMonthRecordRequest, runtime: Util.RuntimeOptions): QueryMonthRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["Month"] = request.month;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryMonthRecord',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMonthRecord(request: QueryMonthRecordRequest): QueryMonthRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonthRecordWithOptions(request, runtime);
}

model QueryPictureFilesRequest {
  iotId?: string(name='IotId'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  pictureType?: int32(name='PictureType'),
  pictureSource?: int32(name='PictureSource'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryPictureFilesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        picUrl?: string(name='PicUrl'),
        picCreateTime?: long(name='PicCreateTime'),
        picId?: string(name='PicId'),
        thumbUrl?: string(name='ThumbUrl'),
        iotId?: string(name='IotId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureFilesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureFilesResponseBody(name='body'),
}

async function queryPictureFilesWithOptions(request: QueryPictureFilesRequest, runtime: Util.RuntimeOptions): QueryPictureFilesResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["BeginTime"] = request.beginTime;
  query["EndTime"] = request.endTime;
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  query["PictureType"] = request.pictureType;
  query["PictureSource"] = request.pictureSource;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPictureFiles',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureFiles(request: QueryPictureFilesRequest): QueryPictureFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureFilesWithOptions(request, runtime);
}

model QueryPictureSearchAiboxesRequest {
  appInstanceId?: string(name='AppInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryPictureSearchAiboxesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageData?: [ 
      {
        nickName?: string(name='NickName'),
        iotId?: string(name='IotId'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchAiboxesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchAiboxesResponseBody(name='body'),
}

async function queryPictureSearchAiboxesWithOptions(request: QueryPictureSearchAiboxesRequest, runtime: Util.RuntimeOptions): QueryPictureSearchAiboxesResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPictureSearchAiboxes',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureSearchAiboxes(request: QueryPictureSearchAiboxesRequest): QueryPictureSearchAiboxesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureSearchAiboxesWithOptions(request, runtime);
}

model QueryPictureSearchAppResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    data?: [ 
    {
      appInstanceId?: string(name='AppInstanceId'),
      modifiedTime?: long(name='ModifiedTime'),
      version?: string(name='Version'),
      createTime?: long(name='CreateTime'),
      appTemplateId?: string(name='AppTemplateId'),
      name?: string(name='Name'),
      level?: string(name='Level'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchAppResponseBody(name='body'),
}

async function queryPictureSearchAppWithOptions(runtime: Util.RuntimeOptions): QueryPictureSearchAppResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QueryPictureSearchApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureSearchApp(): QueryPictureSearchAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureSearchAppWithOptions(runtime);
}

model QueryPictureSearchAppsRequest {
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryPictureSearchAppsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageData?: [ 
      {
        appInstanceId?: string(name='AppInstanceId'),
        modifiedTime?: long(name='ModifiedTime'),
        description?: string(name='Description'),
        version?: string(name='Version'),
        createTime?: long(name='CreateTime'),
        appTemplateId?: string(name='AppTemplateId'),
        name?: string(name='Name'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchAppsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchAppsResponseBody(name='body'),
}

async function queryPictureSearchAppsWithOptions(request: QueryPictureSearchAppsRequest, runtime: Util.RuntimeOptions): QueryPictureSearchAppsResponse {
  Util.validateModel(request);
  var query = {};
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPictureSearchApps',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureSearchApps(request: QueryPictureSearchAppsRequest): QueryPictureSearchAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureSearchAppsWithOptions(request, runtime);
}

model QueryPictureSearchDevicesRequest {
  appInstanceId?: string(name='AppInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryPictureSearchDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageData?: [ 
      {
        nickName?: string(name='NickName'),
        iotId?: string(name='IotId'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchDevicesResponseBody(name='body'),
}

async function queryPictureSearchDevicesWithOptions(request: QueryPictureSearchDevicesRequest, runtime: Util.RuntimeOptions): QueryPictureSearchDevicesResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPictureSearchDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureSearchDevices(request: QueryPictureSearchDevicesRequest): QueryPictureSearchDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureSearchDevicesWithOptions(request, runtime);
}

model QueryPictureSearchJobRequest {
  appInstanceId?: string(name='AppInstanceId'),
  jobStatus?: int32(name='JobStatus'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryPictureSearchJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageData?: [ 
      {
        endTime?: long(name='EndTime'),
        startTime?: long(name='StartTime'),
        jobStatus?: int32(name='JobStatus'),
        searchPicUrl?: string(name='SearchPicUrl'),
        createTime?: long(name='CreateTime'),
        jobId?: string(name='JobId'),
        threshold?: float(name='Threshold'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchJobResponseBody(name='body'),
}

async function queryPictureSearchJobWithOptions(request: QueryPictureSearchJobRequest, runtime: Util.RuntimeOptions): QueryPictureSearchJobResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["JobStatus"] = request.jobStatus;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPictureSearchJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureSearchJob(request: QueryPictureSearchJobRequest): QueryPictureSearchJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureSearchJobWithOptions(request, runtime);
}

model QueryPictureSearchJobResultRequest {
  appInstanceId?: string(name='AppInstanceId'),
  jobId?: string(name='JobId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryPictureSearchJobResultResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageData?: [ 
      {
        picUrl?: string(name='PicUrl'),
        eventTime?: long(name='EventTime'),
        gatewayIotId?: string(name='GatewayIotId'),
        vectorId?: string(name='VectorId'),
        deviceNickName?: string(name='DeviceNickName'),
        threshold?: float(name='Threshold'),
        iotId?: string(name='IotId'),
      }
    ](name='PageData'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryPictureSearchJobResultResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPictureSearchJobResultResponseBody(name='body'),
}

async function queryPictureSearchJobResultWithOptions(request: QueryPictureSearchJobResultRequest, runtime: Util.RuntimeOptions): QueryPictureSearchJobResultResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["JobId"] = request.jobId;
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPictureSearchJobResult',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPictureSearchJobResult(request: QueryPictureSearchJobResultRequest): QueryPictureSearchJobResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureSearchJobResultWithOptions(request, runtime);
}

model QueryRecordRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
  beginTime?: int32(name='BeginTime'),
  endTime?: int32(name='EndTime'),
  recordType?: int32(name='RecordType'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  needSnapshot?: boolean(name='NeedSnapshot'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryRecordResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        snapshotUrl?: string(name='SnapshotUrl'),
        endTime?: string(name='EndTime'),
        recordType?: int32(name='RecordType'),
        streamType?: int32(name='StreamType'),
        beginTime?: string(name='BeginTime'),
        fileName?: string(name='FileName'),
        videoFrameNumber?: int32(name='VideoFrameNumber'),
        fileSize?: int32(name='FileSize'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordResponseBody(name='body'),
}

async function queryRecordWithOptions(request: QueryRecordRequest, runtime: Util.RuntimeOptions): QueryRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  query["BeginTime"] = request.beginTime;
  query["EndTime"] = request.endTime;
  query["RecordType"] = request.recordType;
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  query["NeedSnapshot"] = request.needSnapshot;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecord',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecord(request: QueryRecordRequest): QueryRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordWithOptions(request, runtime);
}

model QueryRecordByRecordIdRequest {
  iotId?: string(name='IotId'),
  recordId?: string(name='RecordId'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryRecordByRecordIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      endTime?: string(name='EndTime'),
      beginTime?: string(name='BeginTime'),
      fileName?: string(name='FileName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordByRecordIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordByRecordIdResponseBody(name='body'),
}

async function queryRecordByRecordIdWithOptions(request: QueryRecordByRecordIdRequest, runtime: Util.RuntimeOptions): QueryRecordByRecordIdResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["RecordId"] = request.recordId;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordByRecordId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordByRecordId(request: QueryRecordByRecordIdRequest): QueryRecordByRecordIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordByRecordIdWithOptions(request, runtime);
}

model QueryRecordPlanDetailRequest {
  planId?: string(name='PlanId'),
}

model QueryRecordPlanDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    planId?: string(name='PlanId'),
    name?: string(name='Name'),
    templateInfo?: {
      timeSectionList?: [ 
        {
          dayOfWeek?: int32(name='DayOfWeek'),
          begin?: int32(name='Begin'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
    }(name='TemplateInfo'),
    templateId?: string(name='TemplateId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordPlanDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlanDetailResponseBody(name='body'),
}

async function queryRecordPlanDetailWithOptions(request: QueryRecordPlanDetailRequest, runtime: Util.RuntimeOptions): QueryRecordPlanDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordPlanDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordPlanDetail(request: QueryRecordPlanDetailRequest): QueryRecordPlanDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlanDetailWithOptions(request, runtime);
}

model QueryRecordPlanDeviceByDeviceRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
}

model QueryRecordPlanDeviceByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    planId?: string(name='PlanId'),
    name?: string(name='Name'),
    templateInfo?: {
      timeSectionList?: [ 
        {
          dayOfWeek?: int32(name='DayOfWeek'),
          begin?: int32(name='Begin'),
          end?: int32(name='End'),
        }
      ](name='TimeSectionList'),
      allDay?: int32(name='AllDay'),
      default?: int32(name='Default'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
    }(name='TemplateInfo'),
    templateId?: string(name='TemplateId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordPlanDeviceByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlanDeviceByDeviceResponseBody(name='body'),
}

async function queryRecordPlanDeviceByDeviceWithOptions(request: QueryRecordPlanDeviceByDeviceRequest, runtime: Util.RuntimeOptions): QueryRecordPlanDeviceByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordPlanDeviceByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordPlanDeviceByDevice(request: QueryRecordPlanDeviceByDeviceRequest): QueryRecordPlanDeviceByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlanDeviceByDeviceWithOptions(request, runtime);
}

model QueryRecordPlanDeviceByPlanRequest {
  planId?: string(name='PlanId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryRecordPlanDeviceByPlanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        streamType?: int32(name='StreamType'),
        iotId?: string(name='IotId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordPlanDeviceByPlanResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlanDeviceByPlanResponseBody(name='body'),
}

async function queryRecordPlanDeviceByPlanWithOptions(request: QueryRecordPlanDeviceByPlanRequest, runtime: Util.RuntimeOptions): QueryRecordPlanDeviceByPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordPlanDeviceByPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordPlanDeviceByPlan(request: QueryRecordPlanDeviceByPlanRequest): QueryRecordPlanDeviceByPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlanDeviceByPlanWithOptions(request, runtime);
}

model QueryRecordPlansRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryRecordPlansResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        planId?: string(name='PlanId'),
        name?: string(name='Name'),
        templateId?: string(name='TemplateId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    pageCount?: int32(name='PageCount'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordPlansResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordPlansResponseBody(name='body'),
}

async function queryRecordPlansWithOptions(request: QueryRecordPlansRequest, runtime: Util.RuntimeOptions): QueryRecordPlansResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordPlans',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordPlans(request: QueryRecordPlansRequest): QueryRecordPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlansWithOptions(request, runtime);
}

model QueryRecordUrlRequest {
  iotId?: string(name='IotId'),
  fileName?: string(name='FileName'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryRecordUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRecordUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordUrlResponseBody(name='body'),
}

async function queryRecordUrlWithOptions(request: QueryRecordUrlRequest, runtime: Util.RuntimeOptions): QueryRecordUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["FileName"] = request.fileName;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordUrl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordUrl(request: QueryRecordUrlRequest): QueryRecordUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordUrlWithOptions(request, runtime);
}

model QueryStandardAIAppTemplatesRequest {
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryStandardAIAppTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        description?: string(name='Description'),
        version?: string(name='Version'),
        appTemplateId?: string(name='AppTemplateId'),
        name?: string(name='Name'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    pageCount?: int32(name='PageCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryStandardAIAppTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStandardAIAppTemplatesResponseBody(name='body'),
}

async function queryStandardAIAppTemplatesWithOptions(request: QueryStandardAIAppTemplatesRequest, runtime: Util.RuntimeOptions): QueryStandardAIAppTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryStandardAIAppTemplates',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStandardAIAppTemplates(request: QueryStandardAIAppTemplatesRequest): QueryStandardAIAppTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStandardAIAppTemplatesWithOptions(request, runtime);
}

model QueryTimeTemplateRequest {
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryTimeTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        timeSectionList?: [ 
          {
            dayOfWeek?: int32(name='DayOfWeek'),
            begin?: int32(name='Begin'),
            end?: int32(name='End'),
          }
        ](name='TimeSectionList'),
        allDay?: int32(name='AllDay'),
        default?: int32(name='Default'),
        name?: string(name='Name'),
        templateId?: string(name='TemplateId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    pageCount?: int32(name='PageCount'),
    page?: int32(name='Page'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTimeTemplateResponseBody(name='body'),
}

async function queryTimeTemplateWithOptions(request: QueryTimeTemplateRequest, runtime: Util.RuntimeOptions): QueryTimeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  query["PageSize"] = request.pageSize;
  query["CurrentPage"] = request.currentPage;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryTimeTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTimeTemplate(request: QueryTimeTemplateRequest): QueryTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTimeTemplateWithOptions(request, runtime);
}

model QueryTimeTemplateDetailRequest {
  templateId?: string(name='TemplateId'),
}

model QueryTimeTemplateDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    timeSectionList?: [ 
      {
        dayOfWeek?: int32(name='DayOfWeek'),
        begin?: int32(name='Begin'),
        end?: int32(name='End'),
      }
    ](name='TimeSectionList'),
    allDay?: int32(name='AllDay'),
    default?: int32(name='Default'),
    name?: string(name='Name'),
    templateId?: string(name='TemplateId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTimeTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTimeTemplateDetailResponseBody(name='body'),
}

async function queryTimeTemplateDetailWithOptions(request: QueryTimeTemplateDetailRequest, runtime: Util.RuntimeOptions): QueryTimeTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["TemplateId"] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryTimeTemplateDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTimeTemplateDetail(request: QueryTimeTemplateDetailRequest): QueryTimeTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTimeTemplateDetailWithOptions(request, runtime);
}

model QueryVoiceIntercomRequest {
  iotId?: string(name='IotId'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryVoiceIntercomResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    cryptoKey?: {
      key?: string(name='Key'),
      iv?: string(name='Iv'),
    }(name='CryptoKey'),
    url?: string(name='Url'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryVoiceIntercomResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVoiceIntercomResponseBody(name='body'),
}

async function queryVoiceIntercomWithOptions(request: QueryVoiceIntercomRequest, runtime: Util.RuntimeOptions): QueryVoiceIntercomResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryVoiceIntercom',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryVoiceIntercom(request: QueryVoiceIntercomRequest): QueryVoiceIntercomResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVoiceIntercomWithOptions(request, runtime);
}

model RemoveAIAppRequest {
  appId?: string(name='AppId'),
}

model RemoveAIAppResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAIAppResponseBody(name='body'),
}

async function removeAIAppWithOptions(request: RemoveAIAppRequest, runtime: Util.RuntimeOptions): RemoveAIAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppId"] = request.appId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAIApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAIApp(request: RemoveAIAppRequest): RemoveAIAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAIAppWithOptions(request, runtime);
}

model RemoveAIPlanRequest {
  planId?: string(name='PlanId'),
}

model RemoveAIPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAIPlanResponseBody(name='body'),
}

async function removeAIPlanWithOptions(request: RemoveAIPlanRequest, runtime: Util.RuntimeOptions): RemoveAIPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAIPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAIPlan(request: RemoveAIPlanRequest): RemoveAIPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAIPlanWithOptions(request, runtime);
}

model RemoveDevicePurifyPlanRequest {
  planId?: string(name='PlanId'),
}

model RemoveDevicePurifyPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveDevicePurifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDevicePurifyPlanResponseBody(name='body'),
}

async function removeDevicePurifyPlanWithOptions(request: RemoveDevicePurifyPlanRequest, runtime: Util.RuntimeOptions): RemoveDevicePurifyPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveDevicePurifyPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeDevicePurifyPlan(request: RemoveDevicePurifyPlanRequest): RemoveDevicePurifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDevicePurifyPlanWithOptions(request, runtime);
}

model RemoveFaceDeviceFromDeviceGroupRequest {
  isolationId?: string(name='IsolationId'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  deviceGroupId?: string(name='DeviceGroupId'),
}

model RemoveFaceDeviceFromDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveFaceDeviceFromDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFaceDeviceFromDeviceGroupResponseBody(name='body'),
}

async function removeFaceDeviceFromDeviceGroupWithOptions(request: RemoveFaceDeviceFromDeviceGroupRequest, runtime: Util.RuntimeOptions): RemoveFaceDeviceFromDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["ProductKey"] = request.productKey;
  query["DeviceName"] = request.deviceName;
  query["DeviceGroupId"] = request.deviceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveFaceDeviceFromDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeFaceDeviceFromDeviceGroup(request: RemoveFaceDeviceFromDeviceGroupRequest): RemoveFaceDeviceFromDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeFaceDeviceFromDeviceGroupWithOptions(request, runtime);
}

model RemoveFaceUserFromUserGroupRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
  userGroupId?: string(name='UserGroupId'),
}

model RemoveFaceUserFromUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveFaceUserFromUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFaceUserFromUserGroupResponseBody(name='body'),
}

async function removeFaceUserFromUserGroupWithOptions(request: RemoveFaceUserFromUserGroupRequest, runtime: Util.RuntimeOptions): RemoveFaceUserFromUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  query["UserGroupId"] = request.userGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveFaceUserFromUserGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeFaceUserFromUserGroup(request: RemoveFaceUserFromUserGroupRequest): RemoveFaceUserFromUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeFaceUserFromUserGroupWithOptions(request, runtime);
}

model SetDevicePictureLifeCycleRequest {
  iotId?: string(name='IotId'),
  day?: int32(name='Day'),
}

model SetDevicePictureLifeCycleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SetDevicePictureLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicePictureLifeCycleResponseBody(name='body'),
}

async function setDevicePictureLifeCycleWithOptions(request: SetDevicePictureLifeCycleRequest, runtime: Util.RuntimeOptions): SetDevicePictureLifeCycleResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["Day"] = request.day;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetDevicePictureLifeCycle',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDevicePictureLifeCycle(request: SetDevicePictureLifeCycleRequest): SetDevicePictureLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicePictureLifeCycleWithOptions(request, runtime);
}

model SetDeviceRecordLifeCycleRequest {
  iotId?: string(name='IotId'),
  day?: int32(name='Day'),
}

model SetDeviceRecordLifeCycleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SetDeviceRecordLifeCycleResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceRecordLifeCycleResponseBody(name='body'),
}

async function setDeviceRecordLifeCycleWithOptions(request: SetDeviceRecordLifeCycleRequest, runtime: Util.RuntimeOptions): SetDeviceRecordLifeCycleResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["Day"] = request.day;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceRecordLifeCycle',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDeviceRecordLifeCycle(request: SetDeviceRecordLifeCycleRequest): SetDeviceRecordLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceRecordLifeCycleWithOptions(request, runtime);
}

model StopLiveStreamingRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model StopLiveStreamingResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StopLiveStreamingResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveStreamingResponseBody(name='body'),
}

async function stopLiveStreamingWithOptions(request: StopLiveStreamingRequest, runtime: Util.RuntimeOptions): StopLiveStreamingResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'StopLiveStreaming',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopLiveStreaming(request: StopLiveStreamingRequest): StopLiveStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveStreamingWithOptions(request, runtime);
}

model StopTriggeredRecordRequest {
  iotId?: string(name='IotId'),
  recordId?: string(name='RecordId'),
}

model StopTriggeredRecordResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StopTriggeredRecordResponse = {
  headers: map[string]string(name='headers'),
  body: StopTriggeredRecordResponseBody(name='body'),
}

async function stopTriggeredRecordWithOptions(request: StopTriggeredRecordRequest, runtime: Util.RuntimeOptions): StopTriggeredRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["RecordId"] = request.recordId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'StopTriggeredRecord',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopTriggeredRecord(request: StopTriggeredRecordRequest): StopTriggeredRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTriggeredRecordWithOptions(request, runtime);
}

model TriggerCapturePictureRequest {
  iotId?: string(name='IotId'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model TriggerCapturePictureResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TriggerCapturePictureResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerCapturePictureResponseBody(name='body'),
}

async function triggerCapturePictureWithOptions(request: TriggerCapturePictureRequest, runtime: Util.RuntimeOptions): TriggerCapturePictureResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'TriggerCapturePicture',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerCapturePicture(request: TriggerCapturePictureRequest): TriggerCapturePictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerCapturePictureWithOptions(request, runtime);
}

model TriggerRecordRequest {
  iotId?: string(name='IotId'),
  streamType?: int32(name='StreamType'),
  preRecordDuration?: int32(name='PreRecordDuration'),
  recordDuration?: int32(name='RecordDuration'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model TriggerRecordResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TriggerRecordResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerRecordResponseBody(name='body'),
}

async function triggerRecordWithOptions(request: TriggerRecordRequest, runtime: Util.RuntimeOptions): TriggerRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["IotId"] = request.iotId;
  query["StreamType"] = request.streamType;
  query["PreRecordDuration"] = request.preRecordDuration;
  query["RecordDuration"] = request.recordDuration;
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'TriggerRecord',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerRecord(request: TriggerRecordRequest): TriggerRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerRecordWithOptions(request, runtime);
}

model UnbindAIPlanWithDevicesRequest {
  planId?: string(name='PlanId'),
  iotIdList?: [ string ](name='IotIdList'),
}

model UnbindAIPlanWithDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UnbindAIPlanWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindAIPlanWithDevicesResponseBody(name='body'),
}

async function unbindAIPlanWithDevicesWithOptions(request: UnbindAIPlanWithDevicesRequest, runtime: Util.RuntimeOptions): UnbindAIPlanWithDevicesResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["IotIdList"] = request.iotIdList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnbindAIPlanWithDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindAIPlanWithDevices(request: UnbindAIPlanWithDevicesRequest): UnbindAIPlanWithDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAIPlanWithDevicesWithOptions(request, runtime);
}

model UnbindPictureSearchAppWithDevicesRequest {
  appInstanceId?: string(name='AppInstanceId'),
  iotInstanceId?: string(name='IotInstanceId'),
  deviceIotIds?: [ string ](name='DeviceIotIds'),
}

model UnbindPictureSearchAppWithDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UnbindPictureSearchAppWithDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPictureSearchAppWithDevicesResponseBody(name='body'),
}

async function unbindPictureSearchAppWithDevicesWithOptions(request: UnbindPictureSearchAppWithDevicesRequest, runtime: Util.RuntimeOptions): UnbindPictureSearchAppWithDevicesResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["IotInstanceId"] = request.iotInstanceId;
  query["DeviceIotIds"] = request.deviceIotIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnbindPictureSearchAppWithDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindPictureSearchAppWithDevices(request: UnbindPictureSearchAppWithDevicesRequest): UnbindPictureSearchAppWithDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPictureSearchAppWithDevicesWithOptions(request, runtime);
}

model UpdateAIAppRequest {
  appId?: string(name='AppId'),
  level?: int32(name='Level'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model UpdateAIAppResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateAIAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAIAppResponseBody(name='body'),
}

async function updateAIAppWithOptions(request: UpdateAIAppRequest, runtime: Util.RuntimeOptions): UpdateAIAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppId"] = request.appId;
  query["Level"] = request.level;
  query["Name"] = request.name;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAIApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAIApp(request: UpdateAIAppRequest): UpdateAIAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAIAppWithOptions(request, runtime);
}

model UpdateAIPlanRequest {
  planId?: string(name='PlanId'),
  description?: string(name='Description'),
}

model UpdateAIPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateAIPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAIPlanResponseBody(name='body'),
}

async function updateAIPlanWithOptions(request: UpdateAIPlanRequest, runtime: Util.RuntimeOptions): UpdateAIPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAIPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAIPlan(request: UpdateAIPlanRequest): UpdateAIPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAIPlanWithOptions(request, runtime);
}

model UpdateDevicePurifyPlanRequest {
  planId?: string(name='PlanId'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
}

model UpdateDevicePurifyPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateDevicePurifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicePurifyPlanResponseBody(name='body'),
}

async function updateDevicePurifyPlanWithOptions(request: UpdateDevicePurifyPlanRequest, runtime: Util.RuntimeOptions): UpdateDevicePurifyPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDevicePurifyPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDevicePurifyPlan(request: UpdateDevicePurifyPlanRequest): UpdateDevicePurifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDevicePurifyPlanWithOptions(request, runtime);
}

model UpdateEventRecordPlanRequest {
  planId?: string(name='PlanId'),
  name?: string(name='Name'),
  eventTypes?: string(name='EventTypes'),
  preRecordDuration?: int32(name='PreRecordDuration'),
  recordDuration?: int32(name='RecordDuration'),
  templateId?: string(name='TemplateId'),
}

model UpdateEventRecordPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateEventRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEventRecordPlanResponseBody(name='body'),
}

async function updateEventRecordPlanWithOptions(request: UpdateEventRecordPlanRequest, runtime: Util.RuntimeOptions): UpdateEventRecordPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["Name"] = request.name;
  query["EventTypes"] = request.eventTypes;
  query["PreRecordDuration"] = request.preRecordDuration;
  query["RecordDuration"] = request.recordDuration;
  query["TemplateId"] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEventRecordPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEventRecordPlan(request: UpdateEventRecordPlanRequest): UpdateEventRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEventRecordPlanWithOptions(request, runtime);
}

model UpdateFaceUserRequest {
  isolationId?: string(name='IsolationId'),
  userId?: string(name='UserId'),
  name?: string(name='Name'),
  params?: string(name='Params'),
  facePicUrl?: string(name='FacePicUrl'),
  customUserId?: string(name='CustomUserId'),
}

model UpdateFaceUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateFaceUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFaceUserResponseBody(name='body'),
}

async function updateFaceUserWithOptions(request: UpdateFaceUserRequest, runtime: Util.RuntimeOptions): UpdateFaceUserResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["UserId"] = request.userId;
  query["Name"] = request.name;
  query["Params"] = request.params;
  query["FacePicUrl"] = request.facePicUrl;
  query["CustomUserId"] = request.customUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFaceUser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFaceUser(request: UpdateFaceUserRequest): UpdateFaceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFaceUserWithOptions(request, runtime);
}

model UpdateFaceUserGroupAndDeviceGroupRelationRequest {
  isolationId?: string(name='IsolationId'),
  controlId?: string(name='ControlId'),
  relation?: string(name='Relation'),
}

model UpdateFaceUserGroupAndDeviceGroupRelationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    modifiedTime?: string(name='ModifiedTime'),
    controlId?: string(name='ControlId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateFaceUserGroupAndDeviceGroupRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFaceUserGroupAndDeviceGroupRelationResponseBody(name='body'),
}

async function updateFaceUserGroupAndDeviceGroupRelationWithOptions(request: UpdateFaceUserGroupAndDeviceGroupRelationRequest, runtime: Util.RuntimeOptions): UpdateFaceUserGroupAndDeviceGroupRelationResponse {
  Util.validateModel(request);
  var query = {};
  query["IsolationId"] = request.isolationId;
  query["ControlId"] = request.controlId;
  query["Relation"] = request.relation;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFaceUserGroupAndDeviceGroupRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFaceUserGroupAndDeviceGroupRelation(request: UpdateFaceUserGroupAndDeviceGroupRelationRequest): UpdateFaceUserGroupAndDeviceGroupRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFaceUserGroupAndDeviceGroupRelationWithOptions(request, runtime);
}

model UpdateModelRequest {
  modelId?: long(name='ModelId'),
  name?: string(name='Name'),
  hardware?: string(name='Hardware'),
  description?: string(name='Description'),
}

model UpdateModelResponseBody = {
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateModelResponseBody(name='body'),
}

async function updateModelWithOptions(request: UpdateModelRequest, runtime: Util.RuntimeOptions): UpdateModelResponse {
  Util.validateModel(request);
  var query = {};
  query["ModelId"] = request.modelId;
  query["Name"] = request.name;
  query["Hardware"] = request.hardware;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateModel(request: UpdateModelRequest): UpdateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateModelWithOptions(request, runtime);
}

model UpdatePictureSearchAppRequest {
  appInstanceId?: string(name='AppInstanceId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model UpdatePictureSearchAppResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdatePictureSearchAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePictureSearchAppResponseBody(name='body'),
}

async function updatePictureSearchAppWithOptions(request: UpdatePictureSearchAppRequest, runtime: Util.RuntimeOptions): UpdatePictureSearchAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppInstanceId"] = request.appInstanceId;
  query["Name"] = request.name;
  query["Description"] = request.description;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePictureSearchApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePictureSearchApp(request: UpdatePictureSearchAppRequest): UpdatePictureSearchAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePictureSearchAppWithOptions(request, runtime);
}

model UpdateRecordPlanRequest {
  planId?: string(name='PlanId'),
  name?: string(name='Name'),
  templateId?: string(name='TemplateId'),
}

model UpdateRecordPlanResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateRecordPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecordPlanResponseBody(name='body'),
}

async function updateRecordPlanWithOptions(request: UpdateRecordPlanRequest, runtime: Util.RuntimeOptions): UpdateRecordPlanResponse {
  Util.validateModel(request);
  var query = {};
  query["PlanId"] = request.planId;
  query["Name"] = request.name;
  query["TemplateId"] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordPlan',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordPlan(request: UpdateRecordPlanRequest): UpdateRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordPlanWithOptions(request, runtime);
}

model UpdateTimeTemplateRequest {
  templateId?: string(name='TemplateId'),
  name?: string(name='Name'),
  allDay?: int32(name='AllDay'),
  timeSections?: [ 
    {
      dayOfWeek?: int32(name='DayOfWeek'),
      begin?: int32(name='Begin'),
      end?: int32(name='End'),
    }
  ](name='TimeSections'),
}

model UpdateTimeTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateTimeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTimeTemplateResponseBody(name='body'),
}

async function updateTimeTemplateWithOptions(request: UpdateTimeTemplateRequest, runtime: Util.RuntimeOptions): UpdateTimeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  query["TemplateId"] = request.templateId;
  query["Name"] = request.name;
  query["AllDay"] = request.allDay;
  query["TimeSections"] = request.timeSections;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTimeTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTimeTemplate(request: UpdateTimeTemplateRequest): UpdateTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTimeTemplateWithOptions(request, runtime);
}

