/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudauth';
  @version = '2019-03-07';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AIGCFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  faceContrastPicture?: string(name='FaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', position='Body'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  ossBucketName?: string(name='OssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Query'),
  ossObjectName?: string(name='OssObjectName', example='verify/xxxxx/xxxxxx.jpeg', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  productCode?: string(name='ProductCode', example='LR_FR_AIGC', position='Query'),
  sceneId?: long(name='SceneId', example='100000xxxx', position='Query'),
}

model AIGCFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    result?: string(name='Result', example='Y'),
    score?: string(name='Score', example='1.0000'),
  }(name='ResultObject'),
}

model AIGCFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AIGCFaceVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AIGCFaceVerify  AIGCFaceVerifyRequest
  * @return AIGCFaceVerifyResponse
 */
async function aIGCFaceVerify(request: AIGCFaceVerifyRequest): AIGCFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AIGCFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model BankMetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  bankCard?: string(name='BankCard', example='610*************1181', position='Query'),
  identifyNum?: string(name='IdentifyNum', example='429001********8211', position='Query'),
  identityType?: string(name='IdentityType', position='Query'),
  mobile?: string(name='Mobile', example='138******11', position='Query'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  productType?: string(name='ProductType', example='BANK_CARD_2_META', position='Query'),
  userName?: string(name='UserName', position='Query'),
  verifyMode?: string(name='VerifyMode', example='VERIFY_BANK_CARD', position='Query'),
}

model BankMetaVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-A***B-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    subCode?: string(name='SubCode', example='101'),
  }(name='ResultObject'),
}

model BankMetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BankMetaVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BankMetaVerify  BankMetaVerifyRequest
  * @return BankMetaVerifyResponse
 */
async function bankMetaVerify(request: BankMetaVerifyRequest): BankMetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BankMetaVerify', 'POST', '/', 'json', false, 'json', request);
}

model CompareFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  crop?: string(name='Crop', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Body'),
  productCode?: string(name='ProductCode', example='PV_FC', position='Body'),
  sceneId?: long(name='SceneId', example='1000000006', position='Body'),
  sourceCertifyId?: string(name='SourceCertifyId', example='0bfa7c493f850e5178b9f8613634c9xx', position='Body'),
  sourceFaceContrastPicture?: string(name='SourceFaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', maxLength=1048676, position='Body'),
  sourceFaceContrastPictureUrl?: string(name='SourceFaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Body'),
  sourceOssBucketName?: string(name='SourceOssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Body'),
  sourceOssObjectName?: string(name='SourceOssObjectName', example='verify/xxxxx/xxxxxx.jpeg', position='Body'),
  targetCertifyId?: string(name='TargetCertifyId', example='0bfa7c493f850e5178b9f8613634c9xx', position='Body'),
  targetFaceContrastPicture?: string(name='TargetFaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', maxLength=1048676, position='Body'),
  targetFaceContrastPictureUrl?: string(name='TargetFaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Body'),
  targetOssBucketName?: string(name='TargetOssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Body'),
  targetOssObjectName?: string(name='TargetOssObjectName', example='verify/xxxxx/xxxxxx.jpeg', position='Body'),
}

model CompareFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    passed?: string(name='Passed', example='T'),
    verifyScore?: float(name='VerifyScore', example='99.60875'),
  }(name='ResultObject'),
}

model CompareFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFaceVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompareFaceVerify  CompareFaceVerifyRequest
  * @return CompareFaceVerifyResponse
 */
async function compareFaceVerify(request: CompareFaceVerifyRequest): CompareFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompareFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model CompareFacesRequest {
  sourceImageType?: string(name='SourceImageType', example='FacePic', position='Body'),
  sourceImageValue?: string(name='SourceImageValue', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Body'),
  targetImageType?: string(name='TargetImageType', example='FacePic', position='Body'),
  targetImageValue?: string(name='TargetImageValue', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Body'),
}

model CompareFacesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    confidenceThresholds?: string(name='ConfidenceThresholds', example='{"0.0001":"90.07","0.001":"80.01","0.01":"70.02"}'),
    similarityScore?: float(name='SimilarityScore', example='98.7913'),
  }(name='Data'),
  message?: string(name='Message', example='Error.InternalError'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
}

model CompareFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompareFaces  CompareFacesRequest
  * @return CompareFacesResponse
 */
async function compareFaces(request: CompareFacesRequest): CompareFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompareFaces', 'POST', '/', 'json', true, 'form', request);
}

model CreateAuthKeyRequest {
  authYears?: int32(name='AuthYears', example='1', position='Query'),
  bizType?: string(name='BizType', example='FACE_TEST', position='Query'),
  test?: boolean(name='Test', example='false', position='Query'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69', position='Query'),
}

model CreateAuthKeyResponseBody = {
  authKey?: string(name='AuthKey', example='auth.1KQMcnLd4m37LN2D0F0WCD-1qtQI$'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateAuthKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAuthKey  CreateAuthKeyRequest
  * @return CreateAuthKeyResponse
 */
async function createAuthKey(request: CreateAuthKeyRequest): CreateAuthKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateVerifySettingRequest {
  bizName: string(name='BizName', description='This parameter is required.', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='UserRegister', position='Query'),
  guideStep?: boolean(name='GuideStep', example='false', position='Query'),
  privacyStep?: boolean(name='PrivacyStep', example='true', position='Query'),
  resultStep?: boolean(name='ResultStep', example='false', position='Query'),
  solution: string(name='Solution', description='This parameter is required.', example='RPBasic', position='Query'),
}

model CreateVerifySettingResponseBody = {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType', example='UserRegister'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  solution?: string(name='Solution', example='RPBasic'),
  stepList?: [ string ](name='StepList'),
}

model CreateVerifySettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVerifySettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVerifySetting  CreateVerifySettingRequest
  * @return CreateVerifySettingResponse
 */
async function createVerifySetting(request: CreateVerifySettingRequest): CreateVerifySettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVerifySetting', 'POST', '/', 'json', false, 'json', request);
}

model CredentialVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certNum?: string(name='CertNum', example='4601*****', position='Query'),
  credName?: string(name='CredName', example='0104', position='Query'),
  credType?: string(name='CredType', example='01', position='Query'),
  identifyNum?: string(name='IdentifyNum', example='429001********8211', position='Query'),
  imageContext?: string(name='ImageContext', example='base64', position='Body'),
  imageUrl?: string(name='ImageUrl', example='http://marry.momocdn.com/avatar/3B/B6/3BB6527E-7467-926E-1048-B43614F20CC420230803_L.jpg', position='Query'),
  isCheck?: string(name='IsCheck', example='0', position='Query'),
  isOCR?: string(name='IsOCR', example='1', position='Query'),
  merchantDetail?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='MerchantDetail', shrink='json', position='Query'),
  merchantId?: string(name='MerchantId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  prompt?: string(name='Prompt', position='Query'),
  promptModel?: string(name='PromptModel', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model CredentialVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    materialInfo?: string(name='MaterialInfo'),
    ocrInfo?: string(name='OcrInfo'),
    result?: string(name='Result', example='1'),
    riskScore?: map[string]string(name='RiskScore'),
    riskTag?: string(name='RiskTag', example='PS,SCREEN_PHOTO'),
    verifyDetail?: string(name='VerifyDetail', example='**'),
    verifyResult?: string(name='VerifyResult', example='*'),
    vlResult?: {
      success?: boolean(name='Success'),
      vlContent?: string(name='VlContent'),
    }(name='VlResult'),
  }(name='ResultObject'),
}

model CredentialVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CredentialVerify  CredentialVerifyRequest
  * @return CredentialVerifyResponse
 */
async function credentialVerify(request: CredentialVerifyRequest): CredentialVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CredentialVerify', 'POST', '/', 'json', true, 'form', request);
}

model DeepfakeDetectRequest {
  regionId?: string(name='RegionId', position='Host'),
  faceBase64?: string(name='FaceBase64', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', position='Body'),
  faceInputType?: string(name='FaceInputType', example='IMAGE', position='Query'),
  faceUrl?: string(name='FaceUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c******', position='Query'),
}

model DeepfakeDetectResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    result?: string(name='Result', example='1'),
    riskScore?: map[string]string(name='RiskScore'),
    riskTag?: string(name='RiskTag', example='SuspectDeepForgery,SuspectWarterMark'),
  }(name='ResultObject'),
}

model DeepfakeDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeepfakeDetect  DeepfakeDetectRequest
  * @return DeepfakeDetectResponse
 */
async function deepfakeDetect(request: DeepfakeDetectRequest): DeepfakeDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeepfakeDetect', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFaceVerifyResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', example='shae18209d29ce4e8ba252caae98ab15', position='Query'),
  deleteAfterQuery?: string(name='DeleteAfterQuery', example='Y', position='Query'),
}

model DeleteFaceVerifyResultResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: {
    certifyId?: string(name='CertifyId', example='sha58aeae7ea2f5ed069530f58df4e6d'),
    deleteResult?: string(name='DeleteResult', example='N'),
    failReason?: string(name='FailReason', example='NOT_DELETE_REPEATEDLY'),
  }(name='ResultObject'),
}

model DeleteFaceVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceVerifyResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFaceVerifyResult  DeleteFaceVerifyResultRequest
  * @return DeleteFaceVerifyResultResponse
 */
async function deleteFaceVerifyResult(request: DeleteFaceVerifyResultRequest): DeleteFaceVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceVerifyResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceInfoRequest {
  bizType?: string(name='BizType', example='FACE_TEST', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  deviceId?: string(name='DeviceId', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM', position='Query'),
  expiredEndDay?: string(name='ExpiredEndDay', example='20200330', position='Query'),
  expiredStartDay?: string(name='ExpiredStartDay', example='20190401', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69', position='Query'),
}

model DescribeDeviceInfoResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceInfoList?: {
    deviceInfo?: [ 
    {
      beginDay?: string(name='BeginDay', example='20180101'),
      bizType?: string(name='BizType', example='FACE_TEST'),
      deviceId?: string(name='DeviceId', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
      expiredDay?: string(name='ExpiredDay', example='20180101'),
      userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
    }
  ](name='DeviceInfo')
  }(name='DeviceInfoList'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDeviceInfo  DescribeDeviceInfoRequest
  * @return DescribeDeviceInfoResponse
 */
async function describeDeviceInfo(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaceGuardRiskRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId?: string(name='BizId', example='aba9830f471a4335af4612c8adaa91b0', position='Query'),
  deviceToken?: string(name='DeviceToken', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c35xxxx', position='Query'),
  productCode?: string(name='ProductCode', example='FACE_GUARD', position='Query'),
}

model DescribeFaceGuardRiskResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    riskExtends?: string(name='RiskExtends', example='{
  "code": 200
  "badNet":false,
  "umid":"74e37355171ab62230063569350d368e",
  "fileTags":"basic_root,basic_hook",
  "queryCount":1,
  "querySessionCount":1,
  "queryUmidCount":1
  "platform":"Android"
}'),
    riskTags?: string(name='RiskTags'),
  }(name='ResultObject'),
}

model DescribeFaceGuardRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaceGuardRiskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaceGuardRisk  DescribeFaceGuardRiskRequest
  * @return DescribeFaceGuardRiskResponse
 */
async function describeFaceGuardRisk(request: DescribeFaceGuardRiskRequest): DescribeFaceGuardRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaceGuardRisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', example='91707dc296d469ad38e4c5efa6a0f24b', position='Query'),
  pictureReturnType?: string(name='PictureReturnType', example='JPG', position='Query'),
  sceneId?: long(name='SceneId', example='1000000006', position='Query'),
}

model DescribeFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    deviceRisk?: string(name='DeviceRisk'),
    deviceToken?: string(name='DeviceToken', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx'),
    identityInfo?: string(name='IdentityInfo', example='null'),
    materialInfo?: string(name='MaterialInfo', example='{"faceAttack": "F","facialPictureFront": {"qualityScore": 88.3615493774414,"pictureUrl": "https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg","ossBucketName": "cn-shanghai-aliyun-cloudauth-1260051251634779","ossObjectName": "verify/1260051251634779/6ba7bcfccf33f56cdb44ed086f36ce3e0.jpeg"}}'),
    passed?: string(name='Passed', example='T'),
    subCode?: string(name='SubCode', example='200'),
    success?: string(name='Success'),
    userInfo?: string(name='UserInfo'),
  }(name='ResultObject'),
}

model DescribeFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaceVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaceVerify  DescribeFaceVerifyRequest
  * @return DescribeFaceVerifyResponse
 */
async function describeFaceVerify(request: DescribeFaceVerifyRequest): DescribeFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaceVerify', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssUploadTokenRequest {
}

model DescribeOssUploadTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket', example='cloudauth-zhangjiakou-external'),
    endPoint?: string(name='EndPoint', example='https://oss-cn-zhangjiakou.aliyuncs.com'),
    expired?: long(name='Expired', example='1582636610000'),
    key?: string(name='Key', example='STS.NU8rUBj****'),
    path?: string(name='Path', example='prod/RdNLC@Ox2n-1s7NMt'),
    secret?: string(name='Secret', example='FwmnyoqT8dHj7nJLuM67T****'),
    token?: string(name='Token', example='uWia500nTS5knZaDzq4/KqpvhcLnO****'),
  }(name='OssUploadToken'),
  requestId?: string(name='RequestId', example='2FA2C773-47DB-4156-B1EE-5B047321A939'),
}

model DescribeOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssUploadTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOssUploadToken  DescribeOssUploadTokenRequest
  * @return DescribeOssUploadTokenResponse
 */
async function describeOssUploadToken(request: DescribeOssUploadTokenRequest): DescribeOssUploadTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssUploadToken', 'POST', '/', 'json', false, 'json', request);
}

model DescribePageFaceVerifyDataRequest {
  currentPage?: long(name='CurrentPage', example='1', position='Query'),
  endDate?: string(name='EndDate', example='2023-04-30', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  productCode?: string(name='ProductCode', example='ID_PLUS', position='Query'),
  sceneId?: long(name='SceneId', example='36**01', position='Query'),
  startDate?: string(name='StartDate', example='2023-04-10', position='Query'),
}

model DescribePageFaceVerifyDataResponseBody = {
  code?: string(name='Code', example='200'),
  currentPage?: string(name='CurrentPage', example='1'),
  items?: [ 
    {
      date?: string(name='Date', example='2024-03-24T00:00:00.000Z'),
      productCode?: string(name='ProductCode', example='ID_PLUS'),
      sceneId?: string(name='SceneId', example='20**40'),
      sceneName?: string(name='SceneName'),
      successCount?: string(name='SuccessCount', example='1'),
      totalCount?: string(name='TotalCount', example='19'),
    }
  ](name='Items'),
  message?: string(name='Message', example='OK'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-A***B-A3DC0DE3C83E'),
  success?: string(name='Success', example='true'),
  totalCount?: string(name='TotalCount', example='100'),
  totalPage?: string(name='TotalPage', example='5'),
}

model DescribePageFaceVerifyDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePageFaceVerifyDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePageFaceVerifyData  DescribePageFaceVerifyDataRequest
  * @return DescribePageFaceVerifyDataResponse
 */
async function describePageFaceVerifyData(request: DescribePageFaceVerifyDataRequest): DescribePageFaceVerifyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePageFaceVerifyData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSmartStatisticsPageListRequest {
  currentPage: string(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  endDate: string(name='EndDate', description='This parameter is required.', example='2022-11-16 23:59:59 +0800', position='Query'),
  pageSize: string(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='36**01', position='Query'),
  serviceCode?: string(name='ServiceCode', example='cloudauthst', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', example='2023-11-01 00:00:00 +0800', position='Query'),
}

model DescribeSmartStatisticsPageListResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      date?: string(name='Date', example='11/8'),
      passRate?: string(name='PassRate', example='25'),
      productCode?: string(name='ProductCode', example='SMART_VERIFY'),
      sceneId?: long(name='SceneId', example='20**40'),
      sceneName?: string(name='SceneName'),
      successCount?: int32(name='SuccessCount', example='1'),
      totalCount?: int32(name='TotalCount', example='4'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='96943***4E39F805'),
  totalCount?: int32(name='TotalCount', example='29'),
  totalPage?: int32(name='TotalPage', example='3'),
}

model DescribeSmartStatisticsPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartStatisticsPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSmartStatisticsPageList  DescribeSmartStatisticsPageListRequest
  * @return DescribeSmartStatisticsPageListResponse
 */
async function describeSmartStatisticsPageList(request: DescribeSmartStatisticsPageListRequest): DescribeSmartStatisticsPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartStatisticsPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifyResultRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125b****', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='FVBioOnlyTest', position='Query'),
}

model DescribeVerifyResultResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore', example='97'),
  faceComparisonScore?: float(name='FaceComparisonScore', example='97'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore', example='97'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-global-example.jpg'),
    faceImageUrl?: string(name='FaceImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-image-example.jpg'),
    faceMask?: boolean(name='FaceMask', example='false'),
    faceQuality?: string(name='FaceQuality', example='NORMAL'),
    idCardInfo?: {
      address?: string(name='Address'),
      authority?: string(name='Authority'),
      backImageUrl?: string(name='BackImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
      birth?: string(name='Birth', example='19900101'),
      endDate?: string(name='EndDate', example='20201101'),
      frontImageUrl?: string(name='FrontImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
      number?: string(name='Number', example='02343218901123****'),
      startDate?: string(name='StartDate', example='20201101'),
    }(name='IdCardInfo'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber', example='02343218901123****'),
    videoUrls?: [ string ](name='VideoUrls'),
  }(name='Material'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyStatus?: int32(name='VerifyStatus', example='1'),
}

model DescribeVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifyResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVerifyResult  DescribeVerifyResultRequest
  * @return DescribeVerifyResultResponse
 */
async function describeVerifyResult(request: DescribeVerifyResultRequest): DescribeVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifySDKRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='1KQMcnLd4m37LN2D0F0WCD', position='Query'),
}

model DescribeVerifySDKResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  sdkUrl?: string(name='SdkUrl', example='https://www.xxx.com'),
}

model DescribeVerifySDKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifySDKResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVerifySDK  DescribeVerifySDKRequest
  * @return DescribeVerifySDKResponse
 */
async function describeVerifySDK(request: DescribeVerifySDKRequest): DescribeVerifySDKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifySDK', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifyTokenRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125be683', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='RPBasicTest', position='Query'),
  callbackSeed?: string(name='CallbackSeed', example='-', position='Query'),
  callbackUrl?: string(name='CallbackUrl', example='-', position='Query'),
  faceRetainedImageUrl?: string(name='FaceRetainedImageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Query'),
  failedRedirectUrl?: string(name='FailedRedirectUrl', example='-', position='Query'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Query'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Query'),
  idCardNumber?: string(name='IdCardNumber', example='330100xxxxxxxxxxxx', position='Query'),
  name?: string(name='Name', position='Query'),
  passedRedirectUrl?: string(name='PassedRedirectUrl', example='-', position='Query'),
  userId?: string(name='UserId', example='user111', position='Query'),
  userIp?: string(name='UserIp', example='192.168.***.***', position='Query'),
  userPhoneNumber?: string(name='UserPhoneNumber', example='187********', position='Query'),
  userRegistTime?: long(name='UserRegistTime', example='1577808000000', position='Query'),
}

model DescribeVerifyTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket', example='cloudauth-zhangjiakou-external'),
    endPoint?: string(name='EndPoint', example='https://oss-cn-zhangjiakou.aliyuncs.com'),
    expired?: long(name='Expired', example='1582636610000'),
    key?: string(name='Key', example='STS.NU8rUBj****'),
    path?: string(name='Path', example='prod/RdNLC@Ox2n-1s7NMt'),
    secret?: string(name='Secret', example='FwmnyoqT8dHj7nJLuM67T****'),
    token?: string(name='Token', example='uWia500nTS5knZaDzq4/KqpvhcLnO****'),
  }(name='OssUploadToken'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyPageUrl?: string(name='VerifyPageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  verifyToken?: string(name='VerifyToken', example='c302c0797679457685410ee51a5ba375'),
}

model DescribeVerifyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifyTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVerifyToken  DescribeVerifyTokenRequest
  * @return DescribeVerifyTokenResponse
 */
async function describeVerifyToken(request: DescribeVerifyTokenRequest): DescribeVerifyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyToken', 'POST', '/', 'json', false, 'json', request);
}

model DetectFaceAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizType?: string(name='BizType', example='RPBasicTest', position='Body'),
  materialValue: string(name='MaterialValue', description='This parameter is required.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg', position='Body'),
}

model DetectFaceAttributesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    faceInfos?: {
      faceAttributesDetectInfo?: [ 
      {
        faceAttributes?: {
          blur?: float(name='Blur', example='0.1419367790222168'),
          facequal?: float(name='Facequal', example='60'),
          facetype?: string(name='Facetype', example='Face'),
          glasses?: string(name='Glasses', example='None'),
          headpose?: {
            pitchAngle?: float(name='PitchAngle', example='-1.5683923959732056'),
            rollAngle?: float(name='RollAngle', example='7.163370132446289'),
            yawAngle?: float(name='YawAngle', example='-6.925303936004639'),
          }(name='Headpose'),
          integrity?: int32(name='Integrity', example='70'),
          respirator?: string(name='Respirator', example='Wear'),
          smiling?: {
            threshold?: float(name='Threshold', example='95'),
            value?: float(name='Value', example='97'),
          }(name='Smiling'),
        }(name='FaceAttributes'),
        faceRect?: {
          height?: int32(name='Height', example='473'),
          left?: int32(name='Left', example='354'),
          top?: int32(name='Top', example='453'),
          width?: int32(name='Width', example='473'),
        }(name='FaceRect'),
      }
    ](name='FaceAttributesDetectInfo')
    }(name='FaceInfos'),
    imgHeight?: int32(name='ImgHeight', example='1920'),
    imgWidth?: int32(name='ImgWidth', example='1080'),
  }(name='Data'),
  message?: string(name='Message', example='Error.InternalError'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
}

model DetectFaceAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectFaceAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetectFaceAttributes  DetectFaceAttributesRequest
  * @return DetectFaceAttributesResponse
 */
async function detectFaceAttributes(request: DetectFaceAttributesRequest): DetectFaceAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectFaceAttributes', 'POST', '/', 'json', true, 'form', request);
}

model Id2MetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', position='Body'),
  paramType?: string(name='ParamType', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model Id2MetaVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='ResultObject'),
}

model Id2MetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Id2MetaVerify  Id2MetaVerifyRequest
  * @return Id2MetaVerifyResponse
 */
async function id2MetaVerify(request: Id2MetaVerifyRequest): Id2MetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaVerify', 'POST', '/', 'json', true, 'form', request);
}

model InitFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  appQualityCheck?: string(name='AppQualityCheck', position='Query'),
  authId?: string(name='AuthId', position='Body'),
  birthday?: string(name='Birthday', position='Query'),
  callbackToken?: string(name='CallbackToken', position='Query'),
  callbackUrl?: string(name='CallbackUrl', position='Query'),
  certName?: string(name='CertName', position='Query'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx', position='Query'),
  certType?: string(name='CertType', example='IDENTITY_CARD', position='Query'),
  certifyId?: string(name='CertifyId', example='0bfa7c493f850e5178b9f8613634c9xx', position='Query'),
  certifyUrlStyle?: string(name='CertifyUrlStyle', position='Query'),
  certifyUrlType?: string(name='CertifyUrlType', position='Query'),
  crop?: string(name='Crop', position='Body'),
  encryptType?: string(name='EncryptType', position='Query'),
  faceContrastPicture?: string(name='FaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', maxLength=1548576, position='Body'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  faceGuardOutput?: string(name='FaceGuardOutput', position='Query'),
  ip?: string(name='Ip', example='114.xxx.xxx.xxx', position='Query'),
  metaInfo?: string(name='MetaInfo', example='{"zimVer":"3.0.0","appVersion": "1","bioMetaInfo": "4.1.0:11501568,0","appName": "com.aliyun.antcloudauth","deviceType": "ios","osVersion": "iOS 10.3.2","apdidToken": "","deviceModel": "iPhone9,1"}', position='Query'),
  mobile?: string(name='Mobile', example='130xxxxxxxx', position='Query'),
  mode?: string(name='Mode', position='Query'),
  model?: string(name='Model', position='Body'),
  ossBucketName?: string(name='OssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Query'),
  ossObjectName?: string(name='OssObjectName', example='verify/xxxxx/xxxxxx.jpeg', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  procedurePriority?: string(name='ProcedurePriority', position='Query'),
  productCode?: string(name='ProductCode', example='ID_PRO', position='Query'),
  rarelyCharacters?: string(name='RarelyCharacters', position='Query'),
  readImg?: string(name='ReadImg', position='Query'),
  returnUrl?: string(name='ReturnUrl', example='www.aliyun.com', position='Query'),
  sceneId?: long(name='SceneId', example='1000000006', position='Query'),
  suitableType?: string(name='SuitableType', position='Query'),
  uiCustomUrl?: string(name='UiCustomUrl', position='Query'),
  userId?: string(name='UserId', example='123456789', position='Query'),
  validityDate?: string(name='ValidityDate', position='Query'),
  videoEvidence?: string(name='VideoEvidence', position='Query'),
  voluntaryCustomizedContent?: string(name='VoluntaryCustomizedContent', position='Query'),
}

model InitFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId', example='91707dc296d469ad38e4c5efa6a0f24b'),
    certifyUrl?: string(name='CertifyUrl'),
  }(name='ResultObject'),
}

model InitFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitFaceVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitFaceVerify  InitFaceVerifyRequest
  * @return InitFaceVerifyResponse
 */
async function initFaceVerify(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model InsertWhiteListSettingRequest {
  regionId?: string(name='RegionId', position='Host'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx', position='Query'),
  certifyId?: string(name='CertifyId', example='shsf57a4e0d9981c3bd66dc754f3d3cd', position='Query'),
  remark?: string(name='Remark', example='xxxxxx', position='Query'),
  sceneId?: long(name='SceneId', example='100000xxxx', position='Query'),
  serviceCode?: string(name='ServiceCode', example='antcloudauth', position='Query'),
  validDay?: int32(name='ValidDay', example='30', position='Query'),
}

model InsertWhiteListSettingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: boolean(name='ResultObject', example='true'),
  success?: boolean(name='Success', example='true'),
}

model InsertWhiteListSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertWhiteListSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InsertWhiteListSetting  InsertWhiteListSettingRequest
  * @return InsertWhiteListSettingResponse
 */
async function insertWhiteListSetting(request: InsertWhiteListSettingRequest): InsertWhiteListSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertWhiteListSetting', 'POST', '/', 'json', false, 'json', request);
}

model LivenessFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', position='Body'),
  crop?: string(name='Crop', position='Body'),
  deviceToken?: string(name='DeviceToken', position='Body'),
  faceContrastPicture?: string(name='FaceContrastPicture', position='Body'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', position='Body'),
  ip?: string(name='Ip', position='Body'),
  mobile?: string(name='Mobile', position='Body'),
  model?: string(name='Model', position='Query'),
  ossBucketName?: string(name='OssBucketName', position='Body'),
  ossObjectName?: string(name='OssObjectName', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  sceneId?: long(name='SceneId', position='Body'),
  userId?: string(name='UserId', position='Body'),
}

model LivenessFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    materialInfo?: string(name='MaterialInfo'),
    passed?: string(name='Passed'),
    subCode?: string(name='SubCode'),
  }(name='ResultObject'),
}

model LivenessFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LivenessFaceVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LivenessFaceVerify  LivenessFaceVerifyRequest
  * @return LivenessFaceVerifyResponse
 */
async function livenessFaceVerify(request: LivenessFaceVerifyRequest): LivenessFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LivenessFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaDetailVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', position='Body'),
  mobile?: string(name='Mobile', position='Body'),
  paramType?: string(name='ParamType', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model Mobile3MetaDetailVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    subCode?: string(name='SubCode', example='101'),
  }(name='ResultObject'),
}

model Mobile3MetaDetailVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaDetailVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Mobile3MetaDetailVerify  Mobile3MetaDetailVerifyRequest
  * @return Mobile3MetaDetailVerifyResponse
 */
async function mobile3MetaDetailVerify(request: Mobile3MetaDetailVerifyRequest): Mobile3MetaDetailVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaDetailVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaSimpleVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', position='Body'),
  mobile?: string(name='Mobile', position='Body'),
  paramType?: string(name='ParamType', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model Mobile3MetaSimpleVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
  }(name='ResultObject'),
}

model Mobile3MetaSimpleVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaSimpleVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Mobile3MetaSimpleVerify  Mobile3MetaSimpleVerifyRequest
  * @return Mobile3MetaSimpleVerifyResponse
 */
async function mobile3MetaSimpleVerify(request: Mobile3MetaSimpleVerifyRequest): Mobile3MetaSimpleVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaSimpleVerify', 'POST', '/', 'json', true, 'form', request);
}

model MobileDetectRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobiles?: string(name='Mobiles', position='Body'),
  paramType?: string(name='ParamType', position='Body'),
}

model MobileDetectResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='969434DF-926B-4997-9881-4DE94E39F805'),
  resultObject?: {
    chargeCount?: string(name='ChargeCount', example='2'),
    items?: [ 
      {
        area?: string(name='Area'),
        bizCode?: string(name='BizCode', example='1'),
        ispName?: string(name='IspName', example='CMCC'),
        mobile?: string(name='Mobile', example='131********'),
        subCode?: string(name='SubCode', example='101'),
      }
    ](name='Items'),
  }(name='ResultObject'),
}

model MobileDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileDetect  MobileDetectRequest
  * @return MobileDetectResponse
 */
async function mobileDetect(request: MobileDetectRequest): MobileDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MobileDetect', 'POST', '/', 'json', true, 'form', request);
}

model MobileOnlineStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile?: string(name='Mobile', position='Body'),
  paramType?: string(name='ParamType', position='Body'),
}

model MobileOnlineStatusResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B506328A-D84B-4750-82C7-6A207C585CF1'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    subCode?: string(name='SubCode', example='101'),
  }(name='ResultObject'),
}

model MobileOnlineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileOnlineStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileOnlineStatus  MobileOnlineStatusRequest
  * @return MobileOnlineStatusResponse
 */
async function mobileOnlineStatus(request: MobileOnlineStatusRequest): MobileOnlineStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MobileOnlineStatus', 'POST', '/', 'json', true, 'form', request);
}

model MobileOnlineTimeRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile?: string(name='Mobile', position='Body'),
  paramType?: string(name='ParamType', position='Body'),
}

model MobileOnlineTimeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B506328A-D84B-4750-82C7-6A207C585CF1'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    timeCode?: string(name='TimeCode', example='5'),
  }(name='ResultObject'),
}

model MobileOnlineTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileOnlineTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileOnlineTime  MobileOnlineTimeRequest
  * @return MobileOnlineTimeResponse
 */
async function mobileOnlineTime(request: MobileOnlineTimeRequest): MobileOnlineTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MobileOnlineTime', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDeviceInfoRequest {
  bizType?: string(name='BizType', example='FACE_TEST', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM', position='Query'),
  duration?: string(name='Duration', example='1', position='Query'),
  expiredDay?: string(name='ExpiredDay', example='20190401', position='Query'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69', position='Query'),
}

model ModifyDeviceInfoResponseBody = {
  beginDay?: string(name='BeginDay', example='20190401'),
  bizType?: string(name='BizType', example='FACE_TEST'),
  deviceId?: string(name='DeviceId', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
  expiredDay?: string(name='ExpiredDay', example='20200330'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
}

model ModifyDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDeviceInfo  ModifyDeviceInfoRequest
  * @return ModifyDeviceInfoResponse
 */
async function modifyDeviceInfo(request: ModifyDeviceInfoRequest): ModifyDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model PageQueryWhiteListSettingRequest {
  regionId?: string(name='RegionId', position='Host'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx', position='Query'),
  certifyId?: string(name='CertifyId', example='sha75b4e19a1ddda059b920757b0e12b', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sceneId?: long(name='SceneId', example='1000000xxx', position='Query'),
  serviceCode?: string(name='ServiceCode', example='antcloudauth', position='Query'),
  status?: string(name='Status', example='VALID', position='Query'),
  validEndDate?: string(name='ValidEndDate', example='1725379200000', position='Query'),
  validStartDate?: string(name='ValidStartDate', example='1725120000000', position='Query'),
}

model PageQueryWhiteListSettingResponseBody = {
  code?: string(name='Code', example='200'),
  currentPage?: int32(name='CurrentPage', example='1'),
  message?: string(name='Message', example='success'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: [ 
    {
      certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx'),
      certifyId?: string(name='CertifyId', example='sha43d9cabd52d370d9f4cca9468f71e'),
      gmtCreate?: string(name='GmtCreate', example='2024-08-30 14:00:00'),
      gmtModified?: string(name='GmtModified', example='2024-08-30 14:00:00'),
      id?: long(name='Id', example='234822'),
      remark?: string(name='Remark', example='test'),
      sceneId?: long(name='SceneId', example='1000000332'),
      serviceCode?: string(name='ServiceCode', example='antcloudauth'),
      status?: string(name='Status', example='VALID'),
      validEndDate?: string(name='ValidEndDate', example='2024-09-02 13:57:51'),
      validStartDate?: string(name='ValidStartDate', example='2024-08-30 13:57:51'),
    }
  ](name='ResultObject'),
  success?: boolean(name='Success', example='true'),
  totalItem?: int32(name='TotalItem', example='28'),
  totalPage?: int32(name='TotalPage', example='3'),
}

model PageQueryWhiteListSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageQueryWhiteListSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageQueryWhiteListSetting  PageQueryWhiteListSettingRequest
  * @return PageQueryWhiteListSettingResponse
 */
async function pageQueryWhiteListSetting(request: PageQueryWhiteListSettingRequest): PageQueryWhiteListSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageQueryWhiteListSetting', 'POST', '/', 'json', false, 'json', request);
}

model RemoveWhiteListSettingRequest {
  regionId?: string(name='RegionId', position='Host'),
  ids?: [ long ](name='Ids', shrink='json', position='Query'),
  serviceCode?: string(name='ServiceCode', example='antcloudauth', position='Query'),
}

model RemoveWhiteListSettingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: boolean(name='ResultObject', example='true'),
  success?: boolean(name='Success', example='true'),
}

model RemoveWhiteListSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveWhiteListSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveWhiteListSetting  RemoveWhiteListSettingRequest
  * @return RemoveWhiteListSettingResponse
 */
async function removeWhiteListSetting(request: RemoveWhiteListSettingRequest): RemoveWhiteListSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveWhiteListSetting', 'POST', '/', 'json', false, 'json', request);
}

model Vehicle5ItemQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  vehicleNum?: string(name='VehicleNum', position='Query'),
  vehicleType?: string(name='VehicleType', example='02', position='Query'),
}

model Vehicle5ItemQueryResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0D******'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    vehicleInfo?: string(name='VehicleInfo'),
  }(name='ResultObject'),
}

model Vehicle5ItemQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Vehicle5ItemQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Vehicle5ItemQuery  Vehicle5ItemQueryRequest
  * @return Vehicle5ItemQueryResponse
 */
async function vehicle5ItemQuery(request: Vehicle5ItemQueryRequest): Vehicle5ItemQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Vehicle5ItemQuery', 'POST', '/', 'json', false, 'json', request);
}

model VehicleInsureQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  vehicleNum?: string(name='VehicleNum', position='Query'),
  vehicleType?: string(name='VehicleType', example='02', position='Query'),
  vin?: string(name='Vin', example='LB**************', position='Query'),
}

model VehicleInsureQueryResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5A6229C0-E156-48E4-B6EC-0F52********'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    vehicleInfo?: string(name='VehicleInfo', example='{
    "firstInsuranceDate": "****-**-**",
    "lastInsuranceDate": "****-**",
    "latestInsuranceDate": "****-**",
    "latestInsuranceDateStart": "****-**"
  }'),
  }(name='ResultObject'),
}

model VehicleInsureQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleInsureQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VehicleInsureQuery  VehicleInsureQueryRequest
  * @return VehicleInsureQueryResponse
 */
async function vehicleInsureQuery(request: VehicleInsureQueryRequest): VehicleInsureQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleInsureQuery', 'POST', '/', 'json', false, 'json', request);
}

model VehicleMetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', example='4****************1', position='Query'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  userName?: string(name='UserName', position='Query'),
  vehicleNum?: string(name='VehicleNum', position='Query'),
  vehicleType?: string(name='VehicleType', example='02', position='Query'),
  verifyMetaType?: string(name='VerifyMetaType', example='VEHICLE_2_META', position='Query'),
}

model VehicleMetaVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='8FC3D6AC-9FED-4311-8DA7-C4BF4*****'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='ResultObject'),
}

model VehicleMetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleMetaVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VehicleMetaVerify  VehicleMetaVerifyRequest
  * @return VehicleMetaVerifyResponse
 */
async function vehicleMetaVerify(request: VehicleMetaVerifyRequest): VehicleMetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleMetaVerify', 'POST', '/', 'json', false, 'json', request);
}

model VehicleMetaVerifyV2Request {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', example='4****************1', position='Query'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  userName?: string(name='UserName', position='Query'),
  vehicleNum?: string(name='VehicleNum', position='Query'),
  vehicleType?: string(name='VehicleType', example='02', position='Query'),
  verifyMetaType?: string(name='VerifyMetaType', example='VEHICLE_3_META', position='Query'),
}

model VehicleMetaVerifyV2ResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5A6229C0-E156-48E4-B6EC-0F528B******'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    vehicleInfo?: string(name='VehicleInfo'),
  }(name='ResultObject'),
}

model VehicleMetaVerifyV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleMetaVerifyV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VehicleMetaVerifyV2  VehicleMetaVerifyV2Request
  * @return VehicleMetaVerifyV2Response
 */
async function vehicleMetaVerifyV2(request: VehicleMetaVerifyV2Request): VehicleMetaVerifyV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleMetaVerifyV2', 'POST', '/', 'json', false, 'json', request);
}

model VehicleQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramType?: string(name='ParamType', example='normal', position='Query'),
  vehicleNum?: string(name='VehicleNum', position='Query'),
  vehicleType?: string(name='VehicleType', example='02', position='Query'),
}

model VehicleQueryResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83*******'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    vehicleInfo?: string(name='VehicleInfo'),
  }(name='ResultObject'),
}

model VehicleQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VehicleQuery  VehicleQueryRequest
  * @return VehicleQueryResponse
 */
async function vehicleQuery(request: VehicleQueryRequest): VehicleQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleQuery', 'POST', '/', 'json', false, 'json', request);
}

model VerifyMaterialRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125b****', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='RPMinTest', position='Query'),
  faceImageUrl: string(name='FaceImageUrl', description='This parameter is required.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg', position='Query'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg', position='Query'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg', position='Query'),
  idCardNumber: string(name='IdCardNumber', description='This parameter is required.', example='02343218901123****', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  userId?: string(name='UserId', example='54sdj', position='Query'),
}

model VerifyMaterialResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore', example='97'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore', example='97'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-global-example.jpg'),
    faceImageUrl?: string(name='FaceImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg'),
    faceMask?: string(name='FaceMask', example='false'),
    faceQuality?: string(name='FaceQuality', example='NORMAL'),
    idCardInfo?: {
      address?: string(name='Address'),
      authority?: string(name='Authority'),
      backImageUrl?: string(name='BackImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
      birth?: string(name='Birth', example='19900101'),
      endDate?: string(name='EndDate', example='20201101'),
      frontImageUrl?: string(name='FrontImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
      number?: string(name='Number', example='02343218901123****'),
      startDate?: string(name='StartDate', example='20201101'),
    }(name='IdCardInfo'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber', example='02343218901123****'),
  }(name='Material'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyStatus?: int32(name='VerifyStatus', example='1'),
  verifyToken?: string(name='VerifyToken', example='c302c0797679457685410ee51a5ba375'),
}

model VerifyMaterialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyMaterialResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyMaterial  VerifyMaterialRequest
  * @return VerifyMaterialResponse
 */
async function verifyMaterial(request: VerifyMaterialRequest): VerifyMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyMaterial', 'POST', '/', 'json', false, 'json', request);
}

