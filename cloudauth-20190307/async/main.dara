/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudauth';
  @version = '2019-03-07';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AIGCFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  faceContrastPicture?: string(name='FaceContrastPicture', description='Base64 encoded photo.
> Choose one of the three ways to input images: FaceContrastPicture, FaceContrastPictureUrl, or OSS.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', position='Body'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', description='Portrait address, accessible via public HTTP or HTTPS link.

> Choose one of the three ways to input images: FaceContrastPicture, FaceContrastPictureUrl, or OSS.', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  ossBucketName?: string(name='OssBucketName', description='Authorized OSS bucket name.
> Choose one of the three ways to input images: FaceContrastPicture, FaceContrastPictureUrl, or OSS.', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Query'),
  ossObjectName?: string(name='OssObjectName', description='Authorized OSS file name.
> Choose one of the three ways to input images: FaceContrastPicture, FaceContrastPictureUrl, or OSS.', example='verify/xxxxx/xxxxxx.jpeg', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', description='A unique business identifier defined by the client side, used for subsequent troubleshooting. The value should be a combination of letters and numbers with a maximum length of 32 characters, please ensure its uniqueness.', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  productCode?: string(name='ProductCode', description='Product solution', example='LR_FR_AIGC', position='Query'),
  sceneId?: long(name='SceneId', description='Authentication scene ID. This ID is automatically generated after creating an authentication scene in the console. For how to create an authentication scene, see Adding an Authentication Scene.', example='100000xxxx', position='Query'),
}

model AIGCFaceVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Unique real-person authentication identifier.', example='91707dc296d469ad38e4c5efa6a0****'),
    result?: string(name='Result', description='Authentication result. Values:

● Y: AIGC-generated face.

● N: Not detected', example='Y'),
    score?: string(name='Score', description='Detection score', example='1.0000'),
  }(name='ResultObject', description='Returned result'),
}

model AIGCFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AIGCFaceVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AIGCFaceVerify  AIGCFaceVerifyRequest
  * @return AIGCFaceVerifyResponse
 */
async function aIGCFaceVerify(request: AIGCFaceVerifyRequest): AIGCFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AIGCFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model BankMetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  bankCard?: string(name='BankCard', description='Bank card number.

- When `paramType` is `normal`, enter the plain text bank card number.
- When `paramType` is `md5`, enter the part of the card number except the last 6 digits in plain text + the last 6 digits encrypted with MD5 (32 lowercase).', example='610*************1181', position='Query'),
  identifyNum?: string(name='IdentifyNum', description='ID number.

- When `ProductType` is `BANK_CARD_3_META`, this field is required.
- When `paramType` is `normal`, enter the plain text ID number.
- When `paramType` is `md5`, enter the first 6 digits of the ID number in plain text + the birth date encrypted with MD5 (32 lowercase MD5) + the last 4 digits of the ID number.', example='429001********8211', position='Query'),
  identityType?: string(name='IdentityType', description='Identity type.', example='01', position='Query'),
  mobile?: string(name='Mobile', description='Mobile phone number.

- When `ProductType` is `BANK_CARD_4_META`, this field is required.
- When `paramType` is `normal`, enter the plain text mobile phone number.
- When `paramType` is `md5`, enter the mobile phone number (32 lowercase MD5).', example='138******11', position='Query'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: Unencrypted.
- md5: MD5 encrypted.', example='normal', position='Query'),
  productType?: string(name='ProductType', description='Product type to call:

- BANK_CARD_2_META: Bank card number + name verification.
- BANK_CARD_3_META: Bank card number + name + ID number verification.
- BANK_CARD_4_META: Bank card number + name + ID number + mobile phone number verification.', example='BANK_CARD_2_META', position='Query'),
  userName?: string(name='UserName', description='Name.

- When `paramType` is `normal`, enter the plain text name.
- When `paramType` is `md5`, encrypt the first character of the name with MD5 (32 lowercase MD5) + the rest of the name in plain text.', example='张*', position='Query'),
  verifyMode?: string(name='VerifyMode', description='VERIFY_BANK_CARD: Bank card authentication mode. It indicates whether the provided bank card number matches the user\\"s real name, ID number, and mobile phone number.', example='VERIFY_BANK_CARD', position='Query'),
}

model BankMetaVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='473469C7-A***B-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result.

- 1: Consistent (billable)
- 2: Inconsistent (billable)
- 3: No record found (non-billable)', example='1'),
    subCode?: string(name='SubCode', description='Verification details:

- **101**: Verification passed.
- **201**: Authentication information does not match, cardholder information is incorrect.
- **202**: Authentication information does not match, bank card has not enabled authentication payment.
- **203**: Authentication information does not match, bank card has expired.
- **204**: Authentication information does not match, bank card is a restricted card.
- **205**: Authentication information does not match, this card has been confiscated.
- **206**: Authentication information does not match, bank card is invalid.
- **207**: Authentication information does not match, this card has no corresponding issuing bank.
- **208**: Authentication information does not match, the card is uninitialized or a dormant card.
- **209**: Authentication information does not match, this card is a cheating card or swallowed card.
- **210**: Authentication information does not match, this card has been reported lost.
- **211**: Authentication information does not match, the number of password errors exceeds the limit.
- **212**: Authentication information does not match, the issuing bank does not support this transaction.
- **213**: Authentication information does not match, the card status is abnormal or the card is invalid.
- **214**: Authentication information does not match, no mobile phone number reserved.
- **215**: Authentication information does not match, the entered password, expiration date, or CVN2 is incorrect.
- **216**: Authentication information does not match, other card anomalies.
- **301**: Unable to verify, the bank card does not support this service.
- **302**: Unable to verify, verification failed or the bank refused to verify, please contact the issuing bank.
- **303**: Unable to verify, the bank card does not currently support mobile phone number verification.
- **304**: Unable to verify, the bank card number is incorrect.
- **305**: Unable to verify, other reasons.
- **306**: Unable to verify, the number of verifications exceeds the limit.', example='101'),
  }(name='ResultObject', description='Returned result information'),
}

model BankMetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BankMetaVerifyResponseBody(name='body'),
}

/**
  * @description Bank card verification, including: two elements (name + bank card number), three elements (name + ID number + bank card number), and four elements (name + ID number + mobile phone number + bank card number) consistency verification.
  * - Service address:
  *   - Beijing region: cloudauth.cn-beijing.aliyuncs.com (IPv4) or cloudauth-dualstack.cn-beijing.aliyuncs.com (IPv6).
  *   - Shanghai region: cloudauth.cn-shanghai.aliyuncs.com (IPv4) or cloudauth-dualstack.cn-shanghai.aliyuncs.com (IPv6).
  * - Request method: POST and GET.
  * - Transfer protocol: HTTPS.
  * @param request  the request parameters of BankMetaVerify  BankMetaVerifyRequest
  * @return BankMetaVerifyResponse
 */
async function bankMetaVerify(request: BankMetaVerifyRequest): BankMetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BankMetaVerify', 'POST', '/', 'json', false, 'json', request);
}

model CompareFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  crop?: string(name='Crop', description='Whether cropping is allowed. Default is not allowed, T/F.

- T: Indicates that cropping is required
- F: Indicates that cropping is not required (default F)', example='T', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', description='A unique identifier for the merchant\\"s request. The value is a 32-character alphanumeric combination, where the first few characters are a custom abbreviation defined by the merchant, followed by a period, and the latter part can be a random or incrementing sequence.', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Body'),
  productCode?: string(name='ProductCode', description='Fixed value: PV_FC.', example='PV_FC', position='Body'),
  sceneId?: long(name='SceneId', description='Authentication scenario ID.', example='1000000006', position='Body'),
  sourceCertifyId?: string(name='SourceCertifyId', description='The CertifyId of a previously successful real-person verification, where the photo taken during that verification is used as the face comparison photo.
> Among the four ways to input facial photos (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to provide.', example='0bfa7c493f850e5178b9f8613634c9xx', position='Body'),
  sourceFaceContrastPicture?: string(name='SourceFaceContrastPicture', description='Base64 encoding of the photo.
> Choose one of the four ways to input a face photo: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', maxLength=1048676, position='Body'),
  sourceFaceContrastPictureUrl?: string(name='SourceFaceContrastPictureUrl', description='OSS photo URL, currently only supports authorized OSS photo URLs.
> Four ways to input face photos: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, and OSS. Choose one of them to input.', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Body'),
  sourceOssBucketName?: string(name='SourceOssBucketName', description='Name of the authorized OSS bucket.
> Choose one of the four ways to input face photos: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Body'),
  sourceOssObjectName?: string(name='SourceOssObjectName', description='Filename of the authorized OSS space.
> Choose one of the four ways to input face photos: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='verify/xxxxx/xxxxxx.jpeg', position='Body'),
  targetCertifyId?: string(name='TargetCertifyId', description='CertifyId from a previously successful real-person authentication, where the photo taken during the authentication is used for face comparison.

> Choose one of the four methods to provide the reference face photo: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='0bfa7c493f850e5178b9f8613634c9xx', position='Body'),
  targetFaceContrastPicture?: string(name='TargetFaceContrastPicture', description='Base64 encoding of the reference photo.

> Choose one of the four methods to provide the reference face photo: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', maxLength=1048676, position='Body'),
  targetFaceContrastPictureUrl?: string(name='TargetFaceContrastPictureUrl', description='OSS address of the reference photo. Currently, only authorized OSS addresses are supported.

> Choose one of the four methods to provide the reference face photo: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Body'),
  targetOssBucketName?: string(name='TargetOssBucketName', description='Name of the authorized OSS bucket.

> Choose one of the four methods to provide the reference face photo: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Body'),
  targetOssObjectName?: string(name='TargetOssObjectName', description='File name in the authorized OSS space.

> Choose one of the four methods to provide the reference face photo: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='verify/xxxxx/xxxxxx.jpeg', position='Body'),
}

model CompareFaceVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, other values indicate failure.', example='200'),
  message?: string(name='Message', description='Error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Unique identifier for the real-person authentication request.', example='08573be80f944d95ac812e019e3655a8'),
    passed?: string(name='Passed', description='Whether the verification passed, T for pass, F for fail.', example='T'),
    verifyScore?: float(name='VerifyScore', description='Face comparison score.', example='99.60875'),
  }(name='ResultObject', description='Face comparison result information.'),
}

model CompareFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFaceVerifyResponseBody(name='body'),
}

/**
  * @description - API Name: CompareFaceVerify.
  * - Service Address: cloudauth.aliyuncs.com.
  * - Request Method: HTTPS POST and GET.
  * - API Description: An interface to achieve real-person authentication through server-side integration.
  * #### Photo Format Requirements
  * When performing face comparison, please upload 2 facial photos that meet all the following conditions:
  * - Recent photo/recent database photo, with a complete, clear, unobstructed face, natural expression, and facing the camera directly.
  * - Clear photo with normal exposure, no overly dark, overly bright, or halo effects on the face, and no significant angle deviation.
  * - Resolution not exceeding 1920*1080, at least 640*480, recommended to scale the shorter side to 720 pixels, with a compression ratio greater than 0.9.
  * - Photo size: <1MB.
  * - Supports 90, 180, and 270-degree photos; in cases of multiple faces, the largest face will be selected.
  * @param request  the request parameters of CompareFaceVerify  CompareFaceVerifyRequest
  * @return CompareFaceVerifyResponse
 */
async function compareFaceVerify(request: CompareFaceVerifyRequest): CompareFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompareFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model CompareFacesRequest {
  sourceImageType?: string(name='SourceImageType', description='Type of Image 1, with values:

- **FacePic**: User\\"s face photo
- **IDPic**: Headshot from the user\\"s second-generation ID card chip (typically obtained and decoded by a second-generation ID card reader)', example='FacePic', position='Body'),
  sourceImageValue?: string(name='SourceImageValue', description='Address of Image 1. Please refer to the instructions on uploading image addresses.', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Body'),
  targetImageType?: string(name='TargetImageType', description='Type of Image 2, with values:

- **FacePic**: User\\"s face photo
- **IDPic**: Headshot from the user\\"s second-generation ID card chip (typically obtained and decoded by a second-generation ID card reader)', example='FacePic', position='Body'),
  targetImageValue?: string(name='TargetImageValue', description='Address of Image 2. Please refer to the instructions on uploading image addresses.', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Body'),
}

model CompareFacesResponseBody = {
  code?: string(name='Code', description='HTTP status code.', example='200'),
  data?: {
    confidenceThresholds?: string(name='ConfidenceThresholds', description='Confidence thresholds for face comparison. The returned content is a JSON Object, with the specific structure being `"key":"value"`.

- `key` represents the false acceptance rate, which is the probability of misidentifying someone else as the specified person.
- `value` is the corresponding threshold.


> Regarding the confidence thresholds (confidenceThresholds) in the example:
- `"0.0001": "90.07"` indicates that the threshold is 90.07 when the false acceptance rate is 0.01%.
- `"0.001": "80.01"` indicates that the threshold is 80.01 when the false acceptance rate is 0.1%.
- `"0.01": "70.02"` indicates that the threshold is 70.02 when the false acceptance rate is 1%.

Confidence thresholds are dynamically provided based on different images and algorithms, so do not persist these thresholds.', example='{"0.0001":"90.07","0.001":"80.01","0.01":"70.02"}'),
    similarityScore?: float(name='SimilarityScore', description='The degree of similarity between the faces in the two images. The value range is [0, 100], with higher values indicating greater similarity.', example='98.7913'),
  }(name='Data', description='Result of the face comparison.'),
  message?: string(name='Message', description='Error code.', example='Error.InternalError'),
  requestId?: string(name='RequestId', description='ID of the current request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', description='Indicates whether the response was successful.', example='true'),
}

model CompareFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFacesResponseBody(name='body'),
}

/**
  * @description Request Method: Only supports sending requests via HTTPS POST.
  * Interface Description: Compares two face images and outputs the similarity score of the faces in the two images as the result.
  * - At least one of the specified comparison images should be a face photo (FacePic).
  * - If an image contains multiple faces, the algorithm will automatically select the largest face in the image.
  * - If one of the two comparison images does not detect a face, the system will return an error message stating \\"No face detected\\".
  * When uploading images, you need to provide the HTTP address or base64 encoding of the image.
  * - HTTP Address: A publicly accessible HTTP address. For example, `http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg`.
  * - Base64 Encoding: An image encoded in base64, formatted as `base64://<base64 string of the image>`.
  * Image Restrictions
  * - Does not support relative or absolute paths for local images.
  * - Please keep the size of a single image within 2MB to avoid timeout during retrieval by the algorithm.
  * - The body of a single request has a size limit of 8MB; please calculate the total size of all images and other information in the request to ensure it does not exceed this limit.
  * - When using base64 to transmit images, the request method must be changed to POST; the header description such as `data:image/png;base64,` should be removed from the base64 string of the image.
  * @param request  the request parameters of CompareFaces  CompareFacesRequest
  * @return CompareFacesResponse
 */
async function compareFaces(request: CompareFacesRequest): CompareFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompareFaces', 'POST', '/', 'json', true, 'form', request);
}

model CreateAuthKeyRequest {
  authYears?: int32(name='AuthYears', description='When the Test flag is false or empty, AuthYears is required, in years, with a range of [1,100]. A value of 100 indicates permanent authorization.', example='1', position='Query'),
  bizType?: string(name='BizType', description='Business type. No more than 64 characters. Can be used to note specific business, such as different face usage scenarios of the access party or the customer identifier to be delivered. It is recommended to pass this parameter.', example='FACE_TEST', position='Query'),
  test?: boolean(name='Test', description='Test flag. If true, it indicates using test authorization with a default duration of 30 days; if false, the authorization duration will be based on AuthYears.', example='false', position='Query'),
  userDeviceId?: string(name='UserDeviceId', description='User device ID. No more than 64 characters. Can be used to identify a specific device, and it is suggested to use the physical number of the device. It is recommended to pass this parameter.', example='3iJ1AY$oHcu7mC69', position='Query'),
}

model CreateAuthKeyResponseBody = {
  authKey?: string(name='AuthKey', description='The key that can be used for authorization activation. The authorization key is valid for 30 minutes and cannot be reused. It is recommended to re-obtain it before each activation.', example='auth.1KQMcnLd4m37LN2D0F0WCD-1qtQI$'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateAuthKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthKeyResponseBody(name='body'),
}

/**
  * @description Request Method: Supports sending requests via HTTPS POST and GET methods.
  * > The authorization key is valid for 30 minutes and cannot be reused. It is recommended to re-obtain it before each activation.
  * @param request  the request parameters of CreateAuthKey  CreateAuthKeyRequest
  * @return CreateAuthKeyResponse
 */
async function createAuthKey(request: CreateAuthKeyRequest): CreateAuthKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateVerifySettingRequest {
  bizName: string(name='BizName', description='Verification scenario name, supporting Chinese, English, numbers, and hyphens (-), with a maximum of 20 characters.

This parameter is required.', example='用户注册', position='Query'),
  bizType: string(name='BizType', description='Verification scenario identifier, supporting English letters, numbers, and hyphens (-), with a maximum of 20 characters.

This parameter is required.', example='UserRegister', position='Query'),
  guideStep?: boolean(name='GuideStep', description='Whether to use the system\\"s default guide page.', example='false', position='Query'),
  privacyStep?: boolean(name='PrivacyStep', description='Whether to use the system\\"s default authorization page.', example='true', position='Query'),
  resultStep?: boolean(name='ResultStep', description='Whether to use the system\\"s default result page.', example='false', position='Query'),
  solution: string(name='Solution', description='The name of the authentication solution to use, such as **RPBasic**, **RPBioOnly**, etc. For all supported authentication solutions, see [Authentication Solutions](https://help.aliyun.com/document_detail/127521.html).

This parameter is required.', example='RPBasic', position='Query'),
}

model CreateVerifySettingResponseBody = {
  bizName?: string(name='BizName', description='Verification scenario name.', example='用户注册'),
  bizType?: string(name='BizType', description='Verification scenario identifier.', example='UserRegister'),
  requestId?: string(name='RequestId', description='ID of this request.', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  solution?: string(name='Solution', description='Authentication solution name.', example='RPBasic'),
  stepList?: [ string ](name='StepList', description='Authentication steps'),
}

model CreateVerifySettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVerifySettingResponseBody(name='body'),
}

/**
  * @description Request Method: Only supports sending requests via HTTPS POST.
  * @param request  the request parameters of CreateVerifySetting  CreateVerifySettingRequest
  * @return CreateVerifySettingResponse
 */
async function createVerifySetting(request: CreateVerifySettingRequest): CreateVerifySettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVerifySetting', 'POST', '/', 'json', false, 'json', request);
}

model CredentialVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certNum?: string(name='CertNum', description='Relevant certificate number.', example='4601*****', position='Query'),
  credName?: string(name='CredName', description='- 01: Personal ID cards
  - **0101**: ID card
  - **0102**: Bank card
  - **0104**: Teacher qualification certificate
  - **0107**: Student ID card
- 02: Business scenario
  - **0201**: Storefront photo
  - **0202**: Counter photo
  - **0203**: Scene photo
- 03: Corporate qualifications
  - **0301**: Business license', example='0104', position='Query'),
  credType?: string(name='CredType', description='Credential type:

- 01: Personal ID cards
- 02: Business scenario
- 03: Corporate qualifications', example='01', position='Query'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

Note
Only supports the ID numbers of second-generation resident IDs and Hong Kong, Macao, and Taiwan residence permits.

- When paramType is normal: enter the plaintext ID number.

- When paramType is md5: first 6 digits of the ID number (plaintext) + date of birth (ciphertext) + last 4 digits of the ID number (plaintext).', example='429001********8211', position='Query'),
  imageContext?: string(name='ImageContext', description='Base64 encoded image, choose one from `imageUrl`, `imageFile`, or `imageContext`.', example='base64', position='Body'),
  imageUrl?: string(name='ImageUrl', description='Image URL, choose one from `imageUrl`, `imageFile`, or `imageContext`.', example='http://marry.momocdn.com/avatar/3B/B6/3BB6527E-7467-926E-1048-B43614F20CC420230803_L.jpg', position='Query'),
  isCheck?: string(name='IsCheck', description='Whether to enable authoritative authentication

- ****0****: No
- **1**: Yes', example='0', position='Query'),
  isOCR?: string(name='IsOCR', description='Whether to enable OCR recognition.

- **0**: No
- **1**: Yes

> IsOCR can be set to 1 only when **CredType** is 01.', example='1', position='Query'),
  merchantDetail?: [ 
    {
      key?: string(name='Key', description='The private key of the certificate.

>  If this parameter is specified, you must also specify **CertName** and **Cert**. If **CertName**, **Cert**, and **Key** are specified, you do not need to specify **CertId**.', example='keyword'),
      value?: string(name='Value', description='Keyword value.', example='-'),
    }
  ](name='MerchantDetail', description='Merchant details:


> This field is required when PromptModel is set to DEFAULT.', shrink='json', position='Query'),
  merchantId?: string(name='MerchantId', description='Merchant ID. 

> This field is required when ****CredName**** is set to **02**.', example='913100********KW8P', position='Query'),
  productCode?: string(name='ProductCode', description='Invocation mode:

- **ANTI_FAKE_CHECK**: Image anti-forgery check

- **ANTI_FAKE_VL**: Image anti-forgery check and semantic understanding

- **IMAGE_VL_COG**: Image semantic understanding

Default value: ANTI_FAKE_CHECK

> When **CredType** is set to 02, **ProductCode** can only be ANTI_FAKE_VL or IMAGE_VL_COG.', example='ANTI_FAKE_CHECK', position='Query'),
  prompt?: string(name='Prompt', description='Customer-defined prompt content for image semantic understanding.


> This field is required when PromptModel is set to CUSTOM.', example='-', position='Query'),
  promptModel?: string(name='PromptModel', description='Prompt acquisition method for image semantic understanding:

- **DEFAULT**: System default

- **CUSTOM**: Customer-defined

> When **ProductCode** is set to **ANTI_FAKE_VL** or **IMAGE_VL_COG**, this parameter must be provided.', example='DEFAULT', position='Query'),
  userName?: string(name='UserName', description='UserName', example='张*', position='Query'),
}

model CredentialVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    materialInfo?: string(name='MaterialInfo', description='Additional information in JSON format.', example='{

"sameBackgroundDetail": {

// 相似背景对于的原始图请求RequestId

"originalRequestId": "130A2C10-B9EE-4D84-88E3-5384FF03****";

// 相似背景对于的原始图请求商户ID

"originalMerchantId": "xxxxxxxx"

}

}'),
    ocrInfo?: string(name='OcrInfo', description='OCR recognition result.', example='{
   "certNo":"20216*********",
  "certType":"小学教师资格",
   "gender":"男",
   "subject":"美术",
    "name":"李**",
    "ext_info":"{}",
    "birthDate":"1998-07-28",
    "idNo":"620************",
    "certOrg":""
}'),
    result?: string(name='Result', description='Risk result

- **0**: Low risk
- **1**: High risk
- **2**: Suspicious', example='1'),
    riskScore?: map[string]string(name='RiskScore', description='Risk score map.'),
    riskTag?: string(name='RiskTag', description='Risk tags, separated by commas (,), including:

- **PS**: Image manipulation.
- **SCREEN_PHOTO**: Screen recapture.
- **SCREENSHOT**: Screenshot.
- **WATERMARK**: Watermark.
- **SAME_BACKGROUND**: Similar background.
- **ORIGINAL_PHOTO**: Not the original image', example='PS,SCREEN_PHOTO'),
    verifyDetail?: string(name='VerifyDetail', description='Authority verification details.', example='**'),
    verifyResult?: string(name='VerifyResult', description='The verification result.', example='*'),
    vlResult?: {
      success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

- **true**: The call was successful.
- **false**: The call failed.', example='true'),
      vlContent?: string(name='VlContent', description='Image understanding result:

- When PromptModel is DEFAULT, the output format refers to the example on the right.

- When PromptModel is CUSTOM, the output format follows the agreed format of the Prompt.', example='{\\"这张图有没有明显的PS特征\\":0,\\"图片是否为正常经营照片\\":1,\\"图片中有没有58、美团、大众点评字样\\":0,\\"这张图有没有网站信息\\":0,\\"图片经营的场景是否为酒店\\":0}'),
    }(name='VlResult', description='Qwen interpretation.'),
  }(name='ResultObject', description='Returned result'),
}

model CredentialVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CredentialVerify  CredentialVerifyRequest
  * @return CredentialVerifyResponse
 */
async function credentialVerify(request: CredentialVerifyRequest): CredentialVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CredentialVerify', 'POST', '/', 'json', true, 'form', request);
}

model DeepfakeDetectRequest {
  regionId?: string(name='RegionId', position='Host'),
  faceBase64?: string(name='FaceBase64', description='Enter the Base64 encoded string of the face image.
> Either FaceUrl or FaceBase64 must be provided.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', position='Body'),
  faceInputType?: string(name='FaceInputType', description='Input **IMAGE** to indicate an image type.', example='IMAGE', position='Query'),
  faceUrl?: string(name='FaceUrl', description='Enter the URL of the face image.
> Either FaceUrl or FaceBase64 must be provided.', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', description='A unique identifier for the merchant\\"s request, consisting of a 32-character alphanumeric combination. The first few characters can be a custom abbreviation defined by the merchant, the middle part may include a timestamp, and the latter part can use a random or incrementing sequence.', example='e0c34a77f5ac40a5aa5e6ed20c******', position='Query'),
}

model DeepfakeDetectResponseBody = {
  code?: string(name='Code', description='Return code: 200 indicates success, others indicate failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    result?: string(name='Result', description='Risk result:

- **0**: Low risk
- **1**: High risk
- **2**: Suspicious', example='1'),
    riskScore?: map[string]string(name='RiskScore', description='Risk score map.'),
    riskTag?: string(name='RiskTag', description='Risk tags. Multiple tags are separated by commas (,). Includes:

- Suspected deep forgery  SuspectDeepForgery
- Suspected synthetic attack  SuspectPSFace
- Suspected watermark  SuspectWarterMark
- Suspected black industry attack  SuspectTemple
- Suspected generated face  SuspectAIGC Face
- Suspected rephotographed face  SuspectRemake', example='SuspectDeepForgery,SuspectWarterMark'),
  }(name='ResultObject', description='Returned result information.'),
}

model DeepfakeDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeDetectResponseBody(name='body'),
}

/**
  * @description > The Face Deepfake Detection API is currently in the free public beta stage, which will end on August 30, 2024, at 23:59:59. During the public beta, the QPS (Queries Per Second) cannot exceed 3 times/second.
  * - Service address: cloudauth.aliyuncs.com (IPv4) or cloudauth-dualstack.aliyuncs.com (IPv6).
  * - Request method: POST and GET.
  * - Transfer protocol: HTTPS.
  * @param request  the request parameters of DeepfakeDetect  DeepfakeDetectRequest
  * @return DeepfakeDetectResponse
 */
async function deepfakeDetect(request: DeepfakeDetectRequest): DeepfakeDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeepfakeDetect', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFaceVerifyResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', description='Unique identifier for real-person authentication.', example='shae18209d29ce4e8ba252caae98ab15', position='Query'),
  deleteAfterQuery?: string(name='DeleteAfterQuery', description='Whether deletion depends on having already obtained relevant data from the corresponding authentication process.

- Y: Required. To successfully delete the related data, you must have obtained the processing result through the DescribeFaceVerify interface.
- N: Not required (default). For pure server-side API integration, you can directly pass N.', example='Y', position='Query'),
}

model DeleteFaceVerifyResultResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Unique identifier for real-person authentication.', example='sha58aeae7ea2f5ed069530f58df4e6d'),
    deleteResult?: string(name='DeleteResult', description='Deletion result. Possible values are as follows:

- Y: Deletion successful.
- N: Deletion failed.', example='N'),
    failReason?: string(name='FailReason', description='Reason for deletion failure

- NOT_DELETE_REPEATEDLY: Cannot be deleted repeatedly
- NEED_QUERY_VERIFY_RESULT: Need to query the verification result first, then delete', example='NOT_DELETE_REPEATEDLY'),
  }(name='ResultObject', description='Returned result information.'),
}

model DeleteFaceVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceVerifyResultResponseBody(name='body'),
}

/**
  * @description Deletes all personal information fields in the request, including name, ID number, phone number, IP, images, videos, and device information, etc.
  * @param request  the request parameters of DeleteFaceVerifyResult  DeleteFaceVerifyResultRequest
  * @return DeleteFaceVerifyResultResponse
 */
async function deleteFaceVerifyResult(request: DeleteFaceVerifyResultRequest): DeleteFaceVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceVerifyResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCardVerifyRequest {
  certifyId: string(name='CertifyId', description='Authentication request ID.
You must first call the initialization interface InitCardVerify to submit an authentication request in order to get the authentication request ID.

This parameter is required.', example='91707dc296d469ad38e4c5efa6a0xxxx', position='Query'),
}

model DescribeCardVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 indicates success, all others indicate failure.
Important
- This parameter indicates whether the interface was called correctly. For detailed return code explanations, please refer to the error codes.
- Please check the business verification results through the fields in ResultObject.', example='200'),
  message?: string(name='Message', description='Interface call return message.
Important
- This parameter only indicates whether there was an exception with the interface.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF03****'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Identity verification result:
- 1: Consistent
- 2: Inconsistent
- 3: No Record Found', example='1'),
    cardInfo?: string(name='CardInfo', description='Submitted ID card information for verification.', example='{"address":"浙江省杭州市余杭区文一西路969号","birthDate":"19901226","certName":"张三","certNo":"1234561990122*****","nationality":"汉","authority":"xxx公安局","startDate":"20201130","endDate":"20301130"}'),
    faceDetail?: string(name='FaceDetail', description='Image comparison score.', example='{
 "verifyScore": 50.28594166529785
}'),
    ocrCardInfo?: string(name='OcrCardInfo', description='ID card information read by OCR.', example='{"address":"浙江省杭州市余杭区文一西路969号","birthDate":"19901226","certName":"张三","certNo":"1234561990122*****","nationality":"汉","authority":"xxx公安局","startDate":"20201130","endDate":"20301130"}'),
    pictureInfo?: string(name='PictureInfo', description='Returned photo URLs.
- certUrl  Front side
- certNationalUrl  National emblem side', example='{
    "certUrl": "https://cn-shanghai-aliyun-nmeta.cn-shanghai.oss.aliyuncs.com/verify/xxxxxxx/xxxxxxxxxx_ocridface_dbf2_normal.jpeg",
    "certNationalUrl": "https://cn-shanghai-aliyun-nmeta.cn-shanghai.oss.aliyuncs.com/verify/xxxxxxxxxx/xxxxxxxxxxx_ocridback_e8a3_normal.jpeg"
}'),
  }(name='ResultObject', description='Result object.'),
}

model DescribeCardVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCardVerifyResponseBody(name='body'),
}

/**
  * @description After receiving the callback notification, you can use this interface on the server side to obtain the corresponding authentication status and information.
  * @param request  the request parameters of DescribeCardVerify  DescribeCardVerifyRequest
  * @return DescribeCardVerifyResponse
 */
async function describeCardVerify(request: DescribeCardVerifyRequest): DescribeCardVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCardVerify', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceInfoRequest {
  bizType?: string(name='BizType', description='Business type. No more than 64 characters.', example='FACE_TEST', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The current page number being queried.', example='1', position='Query'),
  deviceId?: string(name='DeviceId', description='A unique ID generated by the real-person authentication server for the access party\\"s device. This ID is only generated after the device has been successfully activated and can be obtained through the getLicenseExtraInfo function in the offline facial recognition SDK.', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM', position='Query'),
  expiredEndDay?: string(name='ExpiredEndDay', description='The end time of the query, i.e., querying authorizations that will expire between ExpiredStartDay and ExpiredEndDay.', example='20200330', position='Query'),
  expiredStartDay?: string(name='ExpiredStartDay', description='The start time of the query, i.e., querying authorizations that will expire between ExpiredStartDay and ExpiredEndDay.', example='20190401', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page in the query.', example='20', position='Query'),
  userDeviceId?: string(name='UserDeviceId', description='No more than 64 characters, defined by the access party, which can be used to identify a specific device.', example='3iJ1AY$oHcu7mC69', position='Query'),
}

model DescribeDeviceInfoResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The current page number being queried.', example='1'),
  deviceInfoList?: {
    deviceInfo?: [ 
    {
      beginDay?: string(name='BeginDay', description='Authorization start date.', example='20180101'),
      bizType?: string(name='BizType', description='Corresponds to the BizType in the request.', example='FACE_TEST'),
      deviceId?: string(name='DeviceId', description='Corresponds to the DeviceId in the request.', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
      expiredDay?: string(name='ExpiredDay', description='Authorization expiration date.', example='20180101'),
      userDeviceId?: string(name='UserDeviceId', description='Corresponds to the UserDeviceId in the request.', example='3iJ1AY$oHcu7mC69'),
    }
  ](name='DeviceInfo')
  }(name='DeviceInfoList', description='Array of device information.'),
  pageSize?: int32(name='PageSize', description='Number of items per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='1'),
}

model DescribeDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceInfoResponseBody(name='body'),
}

/**
  * @description Request Method: Supports sending requests using HTTPS POST and GET methods.
  * @param request  the request parameters of DescribeDeviceInfo  DescribeDeviceInfoRequest
  * @return DescribeDeviceInfoResponse
 */
async function describeDeviceInfo(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaceGuardRiskRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId?: string(name='BizId', description='Authentication ID', example='aba9830f471a4335af4612c8adaa91b0', position='Query'),
  deviceToken?: string(name='DeviceToken', description='Risk identification - device token.', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', description='This identifier is used for subsequent troubleshooting, and you need to ensure that this value is unique in your business.

Supports the use of English letters (including uppercase and lowercase) and numbers, with a maximum length of 32 characters.', example='e0c34a77f5ac40a5aa5e6ed20c35xxxx', position='Query'),
  productCode?: string(name='ProductCode', description='Product code, fixed value: FACE_GUARD', example='FACE_GUARD', position='Query'),
}

model DescribeFaceGuardRiskResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates successful response from the interface.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Unique real-person authentication identifier.', example='sha43d9cabd52d370d9f4cca9468f71e'),
    riskExtends?: string(name='RiskExtends', description='Extended information, in JSON format. (Customized return based on tenant requirements)', example='{
  "code": 200
  "badNet":false,
  "umid":"74e37355171ab62230063569350d368e",
  "fileTags":"basic_root,basic_hook",
  "queryCount":1,
  "querySessionCount":1,
  "queryUmidCount":1
  "platform":"Android"
}'),
    riskTags?: string(name='RiskTags', description='Device risk tags.

- Multiple device risk tags are separated by commas (,). For example, “ROOT,VPN,HOOK”,

- For more information about device risk tags and their meanings, please refer to the official documentation on Face Guard Tag Descriptions.', example='ROOT,VPN,HOOK'),
  }(name='ResultObject', description='Returned result information.'),
}

model DescribeFaceGuardRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaceGuardRiskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaceGuardRisk  DescribeFaceGuardRiskRequest
  * @return DescribeFaceGuardRiskResponse
 */
async function describeFaceGuardRisk(request: DescribeFaceGuardRiskRequest): DescribeFaceGuardRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaceGuardRisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', description='Unique identifier for real-person authentication.', example='91707dc296d469ad38e4c5efa6a0f24b', position='Query'),
  pictureReturnType?: string(name='PictureReturnType', description='Image return type.', example='JPG', position='Query'),
  sceneId?: long(name='SceneId', description='Authentication scene ID.', example='1000000006', position='Query'),
}

model DescribeFaceVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 indicates success, other values indicate failure.', example='200'),
  message?: string(name='Message', description='Error message', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    deviceRisk?: string(name='DeviceRisk', description='Device risk label.', example='ROOT,VPN,HOOK'),
    deviceToken?: string(name='DeviceToken', description='Device token.', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx'),
    identityInfo?: string(name='IdentityInfo', description='Information about the authenticated subject, usually empty in general authentication scenarios.', example='null'),
    materialInfo?: string(name='MaterialInfo', description='Attachment information of the authenticated subject, mainly image materials. JSON format, see example below.', example='{"faceAttack": "F","facialPictureFront": {"qualityScore": 88.3615493774414,"pictureUrl": "https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg","ossBucketName": "cn-shanghai-aliyun-cloudauth-1260051251634779","ossObjectName": "verify/1260051251634779/6ba7bcfccf33f56cdb44ed086f36ce3e0.jpeg"}}'),
    passed?: string(name='Passed', description='Whether it passed, T for pass, F for fail.', example='T'),
    subCode?: string(name='SubCode', description='Description of the authentication result. For details, see the SubCode explanation below.', example='200'),
    success?: string(name='Success', description='Whether the response was successful.', example='True'),
    userInfo?: string(name='UserInfo', description='Records the identity information and corresponding encoding entered by the user under the rare character mode. The returned data is a JSON formatted string, which will be an empty string if there are no rare characters in the name.

- name: Refers to the name entered by the user.

- verifyName: Refers to the final name encoding after verification. For example, if a rare character is verified through transcoding: “Mr. Wang”, the actual verified name is “Wang Xiansheng”.

- number: Refers to the identification number entered by the user.', example='{
  "number": "610***********1110",
  "name": "王先生",
  "verifyName": "王先"
}'),
  }(name='ResultObject', description='Returned result information'),
}

model DescribeFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaceVerifyResponseBody(name='body'),
}

/**
  * @description - Service Address: cloudauth.aliyuncs.com.
  * - Request Method: HTTPS POST and GET.
  * @param request  the request parameters of DescribeFaceVerify  DescribeFaceVerifyRequest
  * @return DescribeFaceVerifyResponse
 */
async function describeFaceVerify(request: DescribeFaceVerifyRequest): DescribeFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaceVerify', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssUploadTokenRequest {
}

model DescribeOssUploadTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket', description='OSS bucket for file storage.', example='cloudauth-zhangjiakou-external'),
    endPoint?: string(name='EndPoint', description='Access endpoint.', example='https://oss-cn-zhangjiakou.aliyuncs.com'),
    expired?: long(name='Expired', description='Expiration time.', example='1582636610000'),
    key?: string(name='Key', description='The Key required for file upload.', example='STS.NU8rUBj****'),
    path?: string(name='Path', description='File storage path.', example='prod/RdNLC@Ox2n-1s7NMt'),
    secret?: string(name='Secret', description='The Secret required for file upload.', example='FwmnyoqT8dHj7nJLuM67T****'),
    token?: string(name='Token', description='The Token required for file upload.', example='uWia500nTS5knZaDzq4/KqpvhcLnO****'),
  }(name='OssUploadToken', description='Information about the OSS upload Token.'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='2FA2C773-47DB-4156-B1EE-5B047321A939'),
}

model DescribeOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssUploadTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOssUploadToken  DescribeOssUploadTokenRequest
  * @return DescribeOssUploadTokenResponse
 */
async function describeOssUploadToken(request: DescribeOssUploadTokenRequest): DescribeOssUploadTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssUploadToken', 'POST', '/', 'json', false, 'json', request);
}

model DescribePageFaceVerifyDataRequest {
  currentPage?: long(name='CurrentPage', description='Current page number, default is 1.', example='1', position='Query'),
  endDate?: string(name='EndDate', description='Required, end time, format is yyyy-MM-dd, default is yyyy-MM-dd 00:00:00, the query interval cannot exceed 90 days.', example='2023-04-30', position='Query'),
  pageSize?: long(name='PageSize', description='Number of items per page, default is 10.', example='10', position='Query'),
  productCode?: string(name='ProductCode', description='Product code.', example='ID_PLUS', position='Query'),
  sceneId?: long(name='SceneId', description='Scene ID.', example='36**01', position='Query'),
  startDate?: string(name='StartDate', description='Required, start time, format is yyyy-MM-dd, default is yyyy-MM-dd 00:00:00, the query interval cannot exceed 90 days.', example='2023-04-10', position='Query'),
}

model DescribePageFaceVerifyDataResponseBody = {
  code?: string(name='Code', description='Return code', example='200'),
  currentPage?: string(name='CurrentPage', description='Current page number.', example='1'),
  items?: [ 
    {
      date?: string(name='Date', description='Date.', example='2024-03-24T00:00:00.000Z'),
      productCode?: string(name='ProductCode', description='Product scheme code, please refer to the financial-grade real-person help documentation.', example='ID_PLUS'),
      sceneId?: string(name='SceneId', description='Scene ID.', example='20**40'),
      sceneName?: string(name='SceneName', description='Scene name.', example='****实名认证'),
      successCount?: string(name='SuccessCount', description='Number of successful calls.', example='1'),
      totalCount?: string(name='TotalCount', description='Total count.', example='19'),
    }
  ](name='Items', description='List of returned data.'),
  message?: string(name='Message', description='Return message.', example='OK'),
  pageSize?: string(name='PageSize', description='Number of items per page.', example='10'),
  requestId?: string(name='RequestId', description='ID of this request.', example='473469C7-A***B-A3DC0DE3C83E'),
  success?: string(name='Success', description='Whether the response was successful.', example='true'),
  totalCount?: string(name='TotalCount', description='Total count.', example='100'),
  totalPage?: string(name='TotalPage', description='Total number of pages.', example='5'),
}

model DescribePageFaceVerifyDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePageFaceVerifyDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePageFaceVerifyData  DescribePageFaceVerifyDataRequest
  * @return DescribePageFaceVerifyDataResponse
 */
async function describePageFaceVerifyData(request: DescribePageFaceVerifyDataRequest): DescribePageFaceVerifyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePageFaceVerifyData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSmartStatisticsPageListRequest {
  currentPage: string(name='CurrentPage', description='Current page number.

This parameter is required.', example='1', position='Query'),
  endDate: string(name='EndDate', description='End time, using UTC format, in the form of yyyy-MM-ddTHH:mm:ssZ.

This parameter is required.', example='2022-11-16 23:59:59 +0800', position='Query'),
  pageSize: string(name='PageSize', description='Number of items per page.

This parameter is required.', example='10', position='Query'),
  sceneId: string(name='SceneId', description='Scene ID.

This parameter is required.', example='36**01', position='Query'),
  serviceCode?: string(name='ServiceCode', description='ServiceCode for the real person cloud product, only value: **cloudauthst**.', example='cloudauthst', position='Query'),
  startDate: string(name='StartDate', description='Start time, using UTC format, in the form of yyyy-MM-ddTHH:mm:ssZ.

This parameter is required.', example='2023-11-01 00:00:00 +0800', position='Query'),
}

model DescribeSmartStatisticsPageListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='Current page number.', example='1'),
  items?: [ 
    {
      date?: string(name='Date', description='Date. Format: <i>month/day</i>', example='11/8'),
      passRate?: string(name='PassRate', description='Pass rate.', example='25'),
      productCode?: string(name='ProductCode', description='Product solution Code, please refer to the Enhanced Real Person Help Documentation.', example='SMART_VERIFY'),
      sceneId?: long(name='SceneId', description='Scene ID.', example='20**40'),
      sceneName?: string(name='SceneName', description='Scene name.', example='****实名认证'),
      successCount?: int32(name='SuccessCount', description='Number of successful calls.', example='1'),
      totalCount?: int32(name='TotalCount', description='Total count.', example='4'),
    }
  ](name='Items', description='Returned data list.'),
  pageSize?: int32(name='PageSize', description='Number of items displayed per page.', example='10'),
  requestId?: string(name='RequestId', description='ID of this request.', example='96943***4E39F805'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='29'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='3'),
}

model DescribeSmartStatisticsPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartStatisticsPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSmartStatisticsPageList  DescribeSmartStatisticsPageListRequest
  * @return DescribeSmartStatisticsPageListResponse
 */
async function describeSmartStatisticsPageList(request: DescribeSmartStatisticsPageListRequest): DescribeSmartStatisticsPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartStatisticsPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifyResultRequest {
  bizId: string(name='BizId', description='Authentication ID. A unique ID that identifies an authentication task, not exceeding 64 characters. For a single authentication task, the system supports an unlimited number of submissions until the final authentication is successful and the task is completed. > You need to use a different BizId for each new authentication task.

This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125b****', position='Query'),
  bizType: string(name='BizType', description='Business scenario identifier for real-person authentication service

This parameter is required.', example='FVBioOnlyTest', position='Query'),
}

model DescribeVerifyResultResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore', description='The comparison score between the face photo submitted during the authentication process and the authoritative data, with a value range of **0** to **100**.
Confidence threshold references:
- When the false acceptance rate is 0.001%, the corresponding threshold is 95. - When the false acceptance rate is 0.01%, the corresponding threshold is 90. - When the false acceptance rate is 0.1%, the corresponding threshold is 80. - When the false acceptance rate is 1%, the corresponding threshold is 60.
> This field only indicates the comparison result between the face and the authoritative data, for your reference only. It is generally not recommended to use this value alone as the standard for whether the authentication passes. For a comprehensive authentication result, please refer to the **VerifyStatus** field. The **VerifyStatus** result integrates the comparison of the face with the authoritative data and various other strategies, which can enhance security levels.', example='97'),
  faceComparisonScore?: float(name='FaceComparisonScore', description='The comparison score between the face photo submitted during the authentication process and the face in the retained face image. The value range is **0**~**100**.

Confidence threshold reference:

- When the false recognition rate is 0.001%, the corresponding threshold is 95.
- When the false recognition rate is 0.01%, the corresponding threshold is 90.
- When the false recognition rate is 0.1%, the corresponding threshold is 80.
- When the false recognition rate is 1%, the corresponding threshold is 60.', example='97'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore', description='The comparison score between the face photo submitted during the authentication process and the face on the ID card\\"s face side. The value range is **0**~**100**.

Confidence threshold reference:

- When the false recognition rate is 0.001%, the corresponding threshold is 95.
- When the false recognition rate is 0.01%, the corresponding threshold is 90.
- When the false recognition rate is 0.1%, the corresponding threshold is 80.
- When the false recognition rate is 1%, the corresponding threshold is 60.', example='97'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl', description='The global camera image captured by the real-person authentication SDK.

> This parameter will only take effect after configuration. If you need to use this parameter, please submit a [ticket](https://selfservice.console.aliyun.com/ticket/category/cloudauth/today) to contact us.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-global-example.jpg'),
    faceImageUrl?: string(name='FaceImageUrl', description='The HTTP or HTTPS link to the frontal face image. The link is valid for 5 minutes, and it is recommended to store it elsewhere to avoid any impact on usage.
> If the HTTP or HTTPS link to the frontal face image expires, you can call [DescribeVerifyResult](https://help.aliyun.com/document_detail/154606.html) again to get the link.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-image-example.jpg'),
    faceMask?: boolean(name='FaceMask', description='Whether the face is wearing a mask. Values:
- **true**: Wearing a mask
- **false**: Not wearing a mask', example='false'),
    faceQuality?: string(name='FaceQuality', description='The quality of the frontal face image. Values:
- **UNQUALIFIED**: Poor quality
- **LOW**: Low
- **NORMAL**: Normal
- **HIGH**: High', example='NORMAL'),
    idCardInfo?: {
      address?: string(name='Address', description='Address.', example='浙江省杭州市余杭区文一西路969号'),
      authority?: string(name='Authority', description='Issuing authority.', example='杭州市公安局'),
      backImageUrl?: string(name='BackImageUrl', description='HTTP/HTTPS link to the image of the back side (national emblem side) of the ID card. The link is valid for 5 minutes, and it is recommended to store it for business use to avoid any impact.
> If the HTTP/HTTPS link to the front-facing portrait image expires, you can call DescribeVerifyResult again to get the link.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
      birth?: string(name='Birth', description='Date of birth.', example='19900101'),
      endDate?: string(name='EndDate', description='The end date of the document\\"s validity period. Format: yyyymmdd.', example='20201101'),
      frontImageUrl?: string(name='FrontImageUrl', description='HTTP/HTTPS link to the image of the front side (portrait side) of the ID card. The link is valid for 5 minutes, and it is recommended to store it for business use to avoid any impact.
> If the HTTP/HTTPS link to the front-facing portrait image expires, you can call DescribeVerifyResult again to get the link.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
      name?: string(name='Name', description='Name.', example='张三'),
      nationality?: string(name='Nationality', description='Nationality.', example='汉'),
      number?: string(name='Number', description='ID card number.', example='02343218901123****'),
      startDate?: string(name='StartDate', description='Start date of the document\\"s validity. Format: yyyymmdd.', example='20201101'),
    }(name='IdCardInfo', description='OCR results of the ID card information.
> If there is no front and back information of the ID card during the authentication process, the real-person authentication service will not return the OCR results of the ID card. Even if there is front and back information of the ID card during the authentication process, the real-person authentication service does not guarantee to return all the information on the ID card. Due to issues with ID card photography, the OCR may fail to recognize some information, resulting in incomplete OCR information. It is recommended that your business does not strongly rely on the ID card OCR information.'),
    idCardName?: string(name='IdCardName', description='Name.', example='张三'),
    idCardNumber?: string(name='IdCardNumber', description='ID number.', example='02343218901123****'),
    videoUrls?: [ string ](name='VideoUrls', description='The URL addresses of the recorded videos returned by the historical RPH5BioOnly solution.'),
  }(name='Material', description='Authentication materials.'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyStatus?: int32(name='VerifyStatus', description='Authentication status, values:
- **-1**: Not authenticated - **1**: Authentication passed - **2** to **n**: Authentication failed for various reasons. For detailed descriptions, see the authentication status explanation.', example='1'),
}

model DescribeVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifyResultResponseBody(name='body'),
}

/**
  * @description Prerequisites: Before accessing this API, please ensure that you have completed the necessary preparations. For more details, see [Real Person Authentication Server-side Preparation](https://help.aliyun.com/document_detail/127471.html) and [Liveness Face Verification Server-side Preparation](https://help.aliyun.com/document_detail/127717.html).
  * > Alibaba Cloud Real Person Authentication only stores authentication data for the last 180 days. For any subsequent business use, please call this interface in a timely manner to retrieve and store the data yourself to avoid any impact on usage.
  * Request Method: HTTPS POST and GET.
  * Interface Description: After the mobile end of the access party receives the callback, its server can call this interface to obtain the corresponding authentication status and authentication information.
  * Applicable Scope: This interface is applicable to the authentication solution with SDK + server-side integration.
  * @param request  the request parameters of DescribeVerifyResult  DescribeVerifyResultRequest
  * @return DescribeVerifyResultResponse
 */
async function describeVerifyResult(request: DescribeVerifyResultRequest): DescribeVerifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifySDKRequest {
  taskId: string(name='TaskId', description='The task ID for generating the SDK.

This parameter is required.', example='1KQMcnLd4m37LN2D0F0WCD', position='Query'),
}

model DescribeVerifySDKResponseBody = {
  requestId?: string(name='RequestId', description='The ID of this request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  sdkUrl?: string(name='SdkUrl', description='The SDK download URL. When not empty, it indicates that the generation is complete.', example='https://www.xxx.com'),
}

model DescribeVerifySDKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifySDKResponseBody(name='body'),
}

/**
  * @description Request Method: Supports sending requests via HTTPS POST and GET methods.
  * Interface Description: Obtain the SDK generation result based on the task ID for generating an offline facial recognition SDK.
  * @param request  the request parameters of DescribeVerifySDK  DescribeVerifySDKRequest
  * @return DescribeVerifySDKResponse
 */
async function describeVerifySDK(request: DescribeVerifySDKRequest): DescribeVerifySDKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifySDK', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifyTokenRequest {
  bizId: string(name='BizId', description='Verification ID. A unique ID that identifies a verification task, not exceeding 64 characters. For a single verification task, the system supports unlimited submissions until the final verification is passed and the task is completed.

> Different BizIds are required for different verification tasks.

This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125be683', position='Query'),
  bizType: string(name='BizType', description='Identifier for the business scenario using the real person authentication service. Please refer to [Business Settings](https://help.aliyun.com/document_detail/127885.html) and complete the creation in the console first.

This parameter is required.', example='RPBasicTest', position='Query'),
  callbackSeed?: string(name='CallbackSeed', description='Callback seed.', example='-', position='Query'),
  callbackUrl?: string(name='CallbackUrl', description='Callback URL.', example='-', position='Query'),
  faceRetainedImageUrl?: string(name='FaceRetainedImageUrl', description='HTTP or HTTPS link to the retained portrait photo.', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Query'),
  failedRedirectUrl?: string(name='FailedRedirectUrl', description='Redirect URL for failed verification.', example='-', position='Query'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl', description='HTTP or HTTPS link to the national emblem side of the ID card image.', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Query'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl', description='HTTP or HTTPS link to the portrait side of the ID card image.', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg', position='Query'),
  idCardNumber?: string(name='IdCardNumber', description='ID card number.', example='330100xxxxxxxxxxxx', position='Query'),
  name?: string(name='Name', description='Name.', example='张三', position='Query'),
  passedRedirectUrl?: string(name='PassedRedirectUrl', description='Redirect URL upon successful verification.', example='-', position='Query'),
  userId?: string(name='UserId', description='ID of the end user, such as the account ID of the end user.', example='user111', position='Query'),
  userIp?: string(name='UserIp', description='User IP.', example='192.168.***.***', position='Query'),
  userPhoneNumber?: string(name='UserPhoneNumber', description='User phone number.', example='187********', position='Query'),
  userRegistTime?: long(name='UserRegistTime', description='User registration time. Expressed in timestamp format, unit: milliseconds.', example='1577808000000', position='Query'),
}

model DescribeVerifyTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket', description='OSS file storage bucket.', example='cloudauth-zhangjiakou-external'),
    endPoint?: string(name='EndPoint', description='Access endpoint.', example='https://oss-cn-zhangjiakou.aliyuncs.com'),
    expired?: long(name='Expired', description='Expiration time. Expressed in timestamp format, unit: milliseconds.', example='1582636610000'),
    key?: string(name='Key', description='The key required for file upload.', example='STS.NU8rUBj****'),
    path?: string(name='Path', description='File storage path.', example='prod/RdNLC@Ox2n-1s7NMt'),
    secret?: string(name='Secret', description='The secret required for file upload.', example='FwmnyoqT8dHj7nJLuM67T****'),
    token?: string(name='Token', description='The token required for file upload.', example='uWia500nTS5knZaDzq4/KqpvhcLnO****'),
  }(name='OssUploadToken', description='OSS upload token information.'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyPageUrl?: string(name='VerifyPageUrl', description='The entry link for the original H5 verification scheme, which has been discontinued and no longer supports new integrations. If you need to integrate an H5 verification scheme, it is recommended to use the [PC or mobile H5 web integration solution](https://help.aliyun.com/document_detail/173779.html) of financial-grade real-person authentication.', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  verifyToken?: string(name='VerifyToken', description='The token for this verification, used to link various interfaces in the verification request, valid for 30 minutes.', example='c302c0797679457685410ee51a5ba375'),
}

model DescribeVerifyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifyTokenResponseBody(name='body'),
}

/**
  * @description Preparation for Access: When integrating this API, please ensure that the corresponding preparations have been completed. For details, see [Overview of Real Person Authentication Solution Integration Process](https://help.aliyun.com/document_detail/127536.html) and [Overview of Live Face Verification Solution (Liveness Detection Solution) Integration Process](https://help.aliyun.com/document_detail/127687.html).
  * Request Method: HTTPS POST and GET
  * API Description: Before each authentication, use this interface to obtain an authentication Token (VerifyToken), which is used to link various interfaces in the authentication request.
  * Applicable Scope: This interface is suitable for wireless SDK integration.
  * Image Address: Use HTTP or HTTPS addresses that are publicly accessible over the Internet. For example, `http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg`.
  * Image Restrictions:
  * - Relative or absolute paths of local images are not supported.
  * - The size of a single image should be controlled within 2 MB to avoid algorithm retrieval timeout.
  * - The face area in the image must be at least 64*64 pixels (px).
  * - There is an 8 MB size limit for the Body of a single request. Please calculate the total size of all images and other information in the request to ensure it does not exceed the limit.
  * @param request  the request parameters of DescribeVerifyToken  DescribeVerifyTokenRequest
  * @return DescribeVerifyTokenResponse
 */
async function describeVerifyToken(request: DescribeVerifyTokenRequest): DescribeVerifyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyToken', 'POST', '/', 'json', false, 'json', request);
}

model DetectFaceAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizType?: string(name='BizType', description='Identifier for the business scenario using real-person authentication services.', example='RPBasicTest', position='Body'),
  materialValue: string(name='MaterialValue', description='The photo to be detected, see the instructions for uploading image addresses for format description. A maximum of 5 faces can be detected in a single image.

This parameter is required.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg', position='Body'),
}

model DetectFaceAttributesResponseBody = {
  code?: string(name='Code', description='HTTP status code.', example='200'),
  data?: {
    faceInfos?: {
      faceAttributesDetectInfo?: [ 
      {
        faceAttributes?: {
          blur?: float(name='Blur', description='Face blur level, with higher values indicating more blurriness. Typically, a value ≥2.0 is considered quite blurry. It is recommended to adjust based on actual business data testing.', example='0.1419367790222168'),
          facequal?: float(name='Facequal', description='A score ranging from 0 to 100. The higher the score, the better the quality. It is recommended to consider a score of 50 or above as acceptable quality.', example='60'),
          facetype?: string(name='Facetype', description='Whether it is a human face. Values:

- **None**: Not a human face
- **Face**: Human face
- **Profile**: Profile (head turned left or right by more than 30°)

> If no face is detected, the `faceInfos` in the response will be empty; here, `None` means that a face was detected but is considered to be a cartoon, pet, etc.', example='Face'),
          glasses?: string(name='Glasses', description='Whether wearing glasses. Values:

- **None**: Not wearing glasses
- **Wear**: Wearing regular glasses
- **Sunglass**: Wearing sunglasses', example='None'),
          headpose?: {
            pitchAngle?: float(name='PitchAngle', description='Pitch angle, in degrees.', example='-1.5683923959732056'),
            rollAngle?: float(name='RollAngle', description='Roll angle, in degrees.', example='7.163370132446289'),
            yawAngle?: float(name='YawAngle', description='Yaw angle, in degrees.', example='-6.925303936004639'),
          }(name='Headpose', description='Face pose.'),
          integrity?: int32(name='Integrity', description='A score ranging from 0 to 100. The higher the score, the more complete the face. It is recommended to consider a score of 70 or above as acceptable completeness.', example='70'),
          respirator?: string(name='Respirator', description='Whether wearing a mask. Values:

- Wear: Wearing a mask.
- None: Not wearing a mask.', example='Wear'),
          smiling?: {
            threshold?: float(name='Threshold', description='Smile threshold.', example='95'),
            value?: float(name='Value', description='Smile score.', example='97'),
          }(name='Smiling', description='Whether smiling.'),
        }(name='FaceAttributes', description='Face attributes.'),
        faceRect?: {
          height?: int32(name='Height', description='Height of the face rectangle.', example='473'),
          left?: int32(name='Left', description='Distance from the top-left corner of the face rectangle to the left edge of the original image, in pixels.', example='354'),
          top?: int32(name='Top', description='Distance from the top-left corner of the face rectangle to the top edge of the original image, in pixels.', example='453'),
          width?: int32(name='Width', description='Width of the face rectangle.', example='473'),
        }(name='FaceRect', description='Position of the face in the original image.'),
      }
    ](name='FaceAttributesDetectInfo')
    }(name='FaceInfos', description='Face detection results.'),
    imgHeight?: int32(name='ImgHeight', description='Original image height, in pixels.', example='1920'),
    imgWidth?: int32(name='ImgWidth', description='Original image width, in pixels.', example='1080'),
  }(name='Data', description='Returned data.'),
  message?: string(name='Message', description='Error code.', example='Error.InternalError'),
  requestId?: string(name='RequestId', description='ID of this request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', description='Whether the response was successful.', example='true'),
}

model DetectFaceAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectFaceAttributesResponseBody(name='body'),
}

/**
  * @description Request Method: Only supports sending requests via HTTPS POST.
  * Interface Description: Detects the validity-related attributes of faces in the input photo, which helps the business side to determine whether the photo meets their own business retention or comparison requirements. The currently supported face validity-related attributes include: whether it is a face, whether it is blurry, whether glasses are worn, face pose, whether it is a smile, etc.
  * Instructions for Uploading Image Addresses: When passing in images, you need to upload their corresponding HTTP, OSS addresses, or Base64 encoding.
  * - HTTP Address: A publicly accessible HTTP address. For example, `http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg`.
  * - Base64 Encoding: An image encoded through base64, with the format being `base64://<image base64 string>`.
  * Image Limitations:
  * - Does not support relative or absolute paths of local images.
  * - Please keep the size of a single image within 2 MB to avoid algorithm timeout.
  * - There is an 8 MB size limit for the Body of a single request; please calculate the total size of all images and other information in the request and do not exceed the limit.
  * - When using Base64 to pass images, the request method needs to be changed to POST; the header description of the image Base64 string, such as `data:image/png;base64`, should be removed.
  * @param request  the request parameters of DetectFaceAttributes  DetectFaceAttributesRequest
  * @return DetectFaceAttributesResponse
 */
async function detectFaceAttributes(request: DetectFaceAttributesRequest): DetectFaceAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectFaceAttributes', 'POST', '/', 'json', true, 'form', request);
}

model Id2MetaPeriodVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

- When `paramType` is `normal`: Enter the plain text of the ID number.
- When `paramType` is `md5`:
The first 6 digits (plain text) + date of birth (encrypted) + last 4 digits (plain text).', example='4****************1', position='Body'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: Unencrypted.
- md5: MD5 encrypted.', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name.

- When `paramType` = `normal`: Enter the plain text of the name.
- When `paramType` = `md5`: The first character of the name MD5 encrypted (32 lowercase MD5) + the rest of the name in plain text.', example='张*', position='Body'),
  validityEndDate?: string(name='ValidityEndDate', description='End date of ID validity, format: YYYYMMDD', example='20301001', position='Body'),
  validityStartDate?: string(name='ValidityStartDate', description='Start date of ID validity, format: YYYYMMDD', example='20201001', position='Body'),
}

model Id2MetaPeriodVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Verification consistent.
- **2**: Verification inconsistent.
- **3**: No record found.', example='1'),
  }(name='ResultObject', description='Returned result information.'),
}

model Id2MetaPeriodVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaPeriodVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Id2MetaPeriodVerify  Id2MetaPeriodVerifyRequest
  * @return Id2MetaPeriodVerifyResponse
 */
async function id2MetaPeriodVerify(request: Id2MetaPeriodVerifyRequest): Id2MetaPeriodVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaPeriodVerify', 'POST', '/', 'json', true, 'form', request);
}

model Id2MetaStandardVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

- When `paramType` is normal: enter the plain text of the ID number.
- When `paramType` is md5:
The first 6 digits (plain text) + date of birth (encrypted) + last 4 digits (plain text).', example='4****************1', position='Body'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: unencrypted.
- md5: md5 encrypted.', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name:

- When `paramType` is normal: enter the plain text of the name.
- When `paramType` is md5: the first character of the name (encrypted) + the rest of the name (plain text).', example='张*', position='Body'),
}

model Id2MetaStandardVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: verification matches.
- **2**: verification does not match.
- **3**: no record found.', example='1'),
  }(name='ResultObject', description='Returned result information.'),
}

model Id2MetaStandardVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaStandardVerifyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Id2MetaStandardVerify  Id2MetaStandardVerifyRequest
  * @return Id2MetaStandardVerifyResponse
 */
async function id2MetaStandardVerify(request: Id2MetaStandardVerifyRequest): Id2MetaStandardVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaStandardVerify', 'POST', '/', 'json', true, 'form', request);
}

model Id2MetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

Note
Only supports the ID numbers of second-generation resident IDs and Hong Kong, Macao, and Taiwan residence permits.

- When paramType is normal: enter the plaintext ID number.

- When paramType is md5: first 6 digits of the ID number (plaintext) + date of birth (ciphertext) + last 4 digits of the ID number (plaintext).', example='明文：429001********8211

密文：

42900132fa7bcd874161bea8ec8fd98f390ec98211', position='Body'),
  paramType?: string(name='ParamType', description='Encryption method:

- normal: plaintext, no encryption

- md5: MD5 encryption', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name:

- When paramType is normal: enter the plaintext name.

- When paramType is md5: first character of the name in ciphertext + rest of the name in plaintext.', example='明文：张三

密文：

6499fc7409049355527ef6a2ba5706b8三​', position='Body'),
}

model Id2MetaVerifyResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates successful API response.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Verification consistent.
- **2**: Verification inconsistent.
- **3**: No record found.', example='1'),
  }(name='ResultObject', description='Returned result information.'),
}

model Id2MetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyResponseBody(name='body'),
}

/**
  * @description - Service address: cloudauth.aliyuncs.com (IPv4) or cloudauth-dualstack.aliyuncs.com (IPv6).
  * - Request method: POST and GET.
  * - Transfer protocol: HTTPS.
  * @param request  the request parameters of Id2MetaVerify  Id2MetaVerifyRequest
  * @return Id2MetaVerifyResponse
 */
async function id2MetaVerify(request: Id2MetaVerifyRequest): Id2MetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Id2MetaVerify', 'POST', '/', 'json', true, 'form', request);
}

model InitCardVerifyRequest {
  callbackToken?: string(name='CallbackToken', description='Security Token, used for anti-replay and anti-tampering checks. If this parameter is passed, the CallbackToken field will be displayed in the callback address.', example='NMjvQanQgplBSaEI0sL86WnQplB', position='Query'),
  callbackUrl?: string(name='CallbackUrl', description='- The callback notification address for the authentication result, which must start with https.
- The platform will call back this address after completing the authentication and automatically add the certifyId and passed fields, example: https://www.aliyun.com?certifyId=xxxx&passed=T
- Warning
The callback is triggered only when the authentication is completed. If the authentication is abandoned, interrupted abnormally, or not performed, no notification will be sent. It is recommended that when you receive the callback notification, if necessary, you can obtain detailed authentication information through the query interface.', example='https://www.aliyun.com', position='Query'),
  cardPageNumber: string(name='CardPageNumber', description='Number of card pages collected by the SDK
- You can input 1 or 2; input 1 to collect the front side, input 2 to collect both the front and back sides.

- If the verification type is ID period (VerifyMeta value is ID_PERIOD), you must input 2.

This parameter is required.', example='1', position='Query'),
  cardType: string(name='CardType', description='Type of identification
- Resident Second Generation ID Card: IDENTITY_CARD

This parameter is required.', example='IDENTITY_CARD', position='Query'),
  docScanMode?: string(name='DocScanMode', description='Enumeration of photo-taking methods (manual/auto)
- Take a photo: shoot
- Scan: scan 
- Auto switch: auto', example='shoot', position='Query'),
  merchantBizId: string(name='MerchantBizId', description='A unique business identifier you define, used for subsequent troubleshooting.
Supports a combination of 32 alphanumeric characters, please ensure uniqueness.

This parameter is required.', example='e0c34a77f5ac40a5aa5e6ed20c35****', position='Query'),
  metaInfo: string(name='MetaInfo', description='MetaInfo environment parameter, which needs to be obtained through the client SDK.

This parameter is required.', example='{"zimVer":"3.0.0","appVersion": "1","bioMetaInfo": "4.1.0:1150****,0","appName": "com.aliyun.antcloudauth","deviceType": "ios","osVersion": "iOS 10.3.2","apdidToken": "","deviceModel": "iPhone9,1"}', position='Query'),
  model: string(name='Model', description='Verification method, value:
- OCR_VERIFY: OCR recognition and verification mode.

This parameter is required.', example='OCR_VERIFY', position='Query'),
  pictureSave: string(name='PictureSave', description='Whether to temporarily store the images collected by the app.
- Y: Yes
- N: No
- If \\"Yes\\" is selected here, the query interface will support returning the card image information.

This parameter is required.', example='Y', position='Query'),
  verifyMeta: string(name='VerifyMeta', description='Verification type, value:
- Identity two elements (name + ID number): ID_2_META

This parameter is required.', example='ID_2_META', position='Query'),
}

model InitCardVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.
Important
- This parameter indicates whether the interface was called correctly. For detailed return code descriptions, see the error codes.
- Business results should be viewed through the fields in ResultObject.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Verification request ID, a unique identifier for the verification service\\"s authentication request.
- When querying the authentication result, the authentication request ID must be provided.

- The CertifyId field is a billing statistics field. To facilitate subsequent bill reconciliation, please retain this field information locally. The CertifyId returned by the initialization interface is valid for 30 minutes and can only be submitted once for authentication. Please apply it within the validity period to avoid reuse.', example='91707dc296d469ad38e4c5efa6a0****'),
  }(name='ResultObject', description='Return result.'),
}

model InitCardVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitCardVerifyResponseBody(name='body'),
}

/**
  * @description Before each authentication, use this interface to obtain the CertifyId, which is used to link various interfaces in the authentication request.
  * @param request  the request parameters of InitCardVerify  InitCardVerifyRequest
  * @return InitCardVerifyResponse
 */
async function initCardVerify(request: InitCardVerifyRequest): InitCardVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitCardVerify', 'POST', '/', 'json', false, 'json', request);
}

model InitFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  appQualityCheck?: string(name='AppQualityCheck', description='Whether the SDK enables strict face quality detection:

- **Y**: Enable

- **N** (default): Disable


> 
> - If this parameter is enabled, the SDK needs to integrate the [strict face quality detection module](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/description-of-sdk-package-clipping?spm=a2c4g.11186623.0.0.1a9d35c6ySFUPW). Enabling strict quality detection may decrease the success rate of user face recognition.
> - Only supported in Android SDK version 2.3.24 and above.', example='N', position='Query'),
  authId?: string(name='AuthId', description='User authorization ID, with a maximum length of 64 characters.', example='92d46b9e9e2d703f2897f350d5bd4149', position='Body'),
  birthday?: string(name='Birthday', description='Date of birth on the document.

This field is required when the document type **CertType** is **PASSPORT** and **Mode** is **3**.', example='1993-10-10', position='Query'),
  callbackToken?: string(name='CallbackToken', description='Security token, generated by you, used for preventing duplication and tampering.

If this value is set, the **CallbackToken** field will be displayed in the callback address.', example='NMjvQanQgplBSaEI0sL86WnQplB', position='Query'),
  callbackUrl?: string(name='CallbackUrl', description='Callback notification address for the authentication result, with the default callback request method being GET. The callback address must start with `https`. After completing the authentication, the platform will call back this address and automatically add the `certifyId` and `passed` fields, where the value of the `passed` field is the subcode, for example: `https://www.aliyun.com?callbackToken=1000004826&certifyId=shaxxxx&passed=200`.

<notice>

- Callbacks are triggered only when the authentication is completed (including both successful and unsuccessful authentications). If the authentication is abandoned, interrupted abnormally, or not performed, no notification will be sent. It is recommended that you retrieve detailed authentication information through a query interface if needed after receiving the callback notification.
- The accessibility of the provided address will be verified before the API call. If the address cannot be accessed over the public network, a 401 error will be returned.
- The callback interface must return an HTTP status code of 200; otherwise, it will trigger a retry, with two callbacks within 3 seconds.

</notice>', example='https://www.aliyun.com', position='Query'),
  cameraSelection?: string(name='CameraSelection', description='Whether to enable the camera selection feature:

- **Y**: Enable

- **N** (default): Disable

> This feature only takes effect in PC integration mode. When enabled, it allows users to select the camera for authentication.', example='N', position='Query'),
  certName?: string(name='CertName', description='Real name.', example='张三', position='Query'),
  certNo?: string(name='CertNo', description='Document number.', example='330103xxxxxxxxxxxx', position='Query'),
  certType?: string(name='CertType', description='Document type.
Currently, only IDENTITY_CARD (ID card) is supported.', example='IDENTITY_CARD', position='Query'),
  certifyId?: string(name='CertifyId', description='>Warning: To be deprecated

Previously passed CertifyId for real-person authentication, where the photo taken during authentication is used as the comparison photo.

> Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.', example='0bfa7c493f850e5178b9f8613634c9xx', position='Query'),
  certifyUrlStyle?: string(name='CertifyUrlStyle', description='Types of **CertifyUrl** returned, including:

- **L**: Original long link

- **S** (default): Short link', example='L', position='Query'),
  certifyUrlType?: string(name='CertifyUrlType', description='Web SDK device type, with values **WEB** or **H5**.

> Only Web SDK device types are supported.', example='WEB', position='Query'),
  crop?: string(name='Crop', description='Whether to allow cropping of the face image, with the default being not allowed.

- T: Indicates allowing cropping.

- F: Indicates not allowing cropping.

> If the image you are requesting is not from a standard liveness detection SDK, it is recommended to allow face image cropping. When this feature is enabled, the requested image will first undergo face cropping and alignment, and then the service request will be initiated.', example='T', position='Body'),
  encryptType?: string(name='EncryptType', description='Encryption algorithm to be used, currently supporting only the SM2 national encryption algorithm.

After enabling encrypted transmission, you need to pass in the encrypted CertName and CertNo. For how to encrypt, please refer to [Parameter Encryption Instructions](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/description-of-parameter-encryption?spm=a2c4g.11186623.0.0.1a9d566eWdqwy8#task-2229332).', example='SM2', position='Query'),
  faceContrastPicture?: string(name='FaceContrastPicture', description='Base64 encoded photo.

> Choose one of the following methods to upload the image: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', maxLength=1548576, position='Body'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', description='OSS photo address, currently only supports authorized OSS photo addresses.

> Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg', position='Query'),
  faceGuardOutput?: string(name='FaceGuardOutput', description='Device assistant label type, with the value: **DeviceRisk**.

>
> - Choosing to output the device assistant will incur additional costs. For details, see [Paid Value-Added Services](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/face-guard?spm=a2c4g.11186623.0.0.443e5522rbHsR4).
> - If you do not need to output the device assistant label, you can either not pass the parameter or pass an empty value.', example='DeviceRisk', position='Query'),
  ip?: string(name='Ip', description='User\\"s IP address.', example='114.xxx.xxx.xxx', position='Query'),
  metaInfo?: string(name='MetaInfo', description='Metainfo environment parameter, which needs to be obtained through the client SDK.', example='{"zimVer":"3.0.0","appVersion": "1","bioMetaInfo": "4.1.0:11501568,0","appName": "com.aliyun.antcloudauth","deviceType": "ios","osVersion": "iOS 10.3.2","apdidToken": "","deviceModel": "iPhone9,1"}', position='Query'),
  mobile?: string(name='Mobile', description='User\\"s phone number.', example='130xxxxxxxx', position='Query'),
  mode?: string(name='Mode', description='Method to obtain passport NFC verification elements:

- **1**: User input, where the end-user manually inputs the document information using the UI interface provided by the Alibaba Cloud SDK.

- **3**: External parameter input, where the document information is passed through external parameters.

> When decoding the encrypted information from the passport chip using NFC, three elements of the passport need to be obtained, including name, date of birth, and document expiration date.', example='1', position='Query'),
  model?: string(name='Model', description='Liveness detection type, with values:
> Only the following liveness detection types are supported; custom actions or combinations are not supported at this time.

Note
Only the following liveness detection types are supported; custom actions or combinations are not supported at this time.

- **LIVENESS** (default): Blinking

- **PHOTINUS_LIVENESS**: Blinking + Colorful Light

- **MULTI_ACTION**: Blinking + Head Shaking (the order of blinking and head shaking is random)

- **MOVE_ACTION** (recommended): Moving Closer and Farther + Blinking

- **MOVE_PHOTINUS**: Moving Closer and Farther + Colorful Light

> 
>- The **default liveness detection type** is supported in the following versions:
>   - Android SDK 1.2.6 and above
>   - iOS SDK 1.2.4 and above
>   - Harmony SDK 1.0.0 and above
>- Other types are supported in the latest SDK versions for Android/iOS/Harmony. It is recommended to integrate the latest version.', example='MOVE_ACTION', position='Body'),
  needMultiFaceCheck?: string(name='NeedMultiFaceCheck', description='Whether to intercept when multiple faces are detected, with the following values:

- **Y**: Intercept, and the client prompts the user to re-scan their face.

- **N** (default): Do not intercept, and send the largest face in the scanned image to the server for security checks.', example='Y', position='Query'),
  ossBucketName?: string(name='OssBucketName', description='Authorized OSS bucket name.

> Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.', example='cn-shanghai-aliyun-cloudauth-xxxxx', position='Query'),
  ossObjectName?: string(name='OssObjectName', description='Authorized OSS object name.

> Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.', example='verify/xxxxx/xxxxxx.jpeg', position='Query'),
  outerOrderNo?: string(name='OuterOrderNo', description='Unique identifier for the merchant\\"s request.

The value is a 32-character alphanumeric combination. The first few characters are a custom abbreviation defined by the merchant, followed by a period, and the latter part can be a random or incremental sequence.', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Query'),
  procedurePriority?: string(name='ProcedurePriority', description='Degradation configuration for mobile H5 authentication when WebRTC or Webassembly is incompatible.

- **keep**: Does not support degradation, returns directly.

- **url** (default): Supports degradation, returns an authentication URL. Users can use this URL to open or switch browsers for authentication.

- **video**: Supports degradation, uses the system camera to record a 3~5 second blinking video for authentication.


> 
> When the degradation mode is Video, the following functions will be disabled, and the product security will decrease. It is recommended to configure it only for secure scenarios.
> - Liveness detection type settings will not take effect.
> - The VideoEvidence function is not supported.', example='url', position='Query'),
  productCode?: string(name='ProductCode', description='Fixed value. The parameter value differs based on the product solution:
- APP Authentication Scheme: Fixed value is ID_PRO
- Live Face Verification Scheme: Fixed value is PV_FV
- Liveness Detection Scheme: Fixed value is LR_FR', example='ID_PRO', position='Query'),
  rarelyCharacters?: string(name='RarelyCharacters', description='Whether to enable rare character mode:

- **Y**: Enable. A message input box will pop up before the user authenticates, requiring the input of the rare character name and ID number. The user must agree to the terms before starting the authentication process.

- **N**: Not enabled (default)', example='Y', position='Query'),
  readImg?: string(name='ReadImg', description='Whether to read the document photo:

- **Y**: Read

- **N**: Do not read

> If the document face photo is needed in subsequent authentication steps, it is recommended to set this parameter to Y.', example='Y', position='Query'),
  returnUrl?: string(name='ReturnUrl', description='Target URL for the merchant\\"s business page to redirect to.', example='www.aliyun.com', position='Query'),
  sceneId?: long(name='SceneId', description='Authentication Scene ID.', example='1000000006', position='Query'),
  suitableType?: string(name='SuitableType', description='Aging-friendly configuration parameters that take effect for each authentication request. You can choose different parameters based on your app\\"s business attributes, customer distribution, operational characteristics, etc., for each authentication request. The options include the following, with the default being 0.

- **0**: Not enabled, indicating that the current authentication request does not enable aging-friendly mode.

- **1**: Enabled, indicating that the current authentication request enables aging-friendly mode.

- **2**: User choice.


Supports end-users in choosing the authentication mode. The product guide page provides two authentication entry points: \\"Enable Authentication\\" and \\"Elderly Authentication Mode\\". When the user selects \\"Elderly Authentication Mode\\", the system enters aging-friendly mode.
> 
> - Aging-friendly parameters are only effective when the liveness detection type **Model** is set to **LIVENESS** or **MULTI_ACTION**.', example='0', position='Query'),
  uiCustomUrl?: string(name='UiCustomUrl', description='UI configuration file URL.

You can view the complete configuration in the [Web SDK UI Customization Description](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/web-sdk-ui-custom-configuration-description?spm=a2c4g.11186623.0.0.4c683f5c8K3I9p).', example='www.aliyundoc.com', position='Query'),
  userId?: string(name='UserId', description='Custom user ID for the customer\\"s business, please ensure it is unique.', example='123456789', position='Query'),
  validityDate?: string(name='ValidityDate', description='Document expiration date.

This field is required when the document type **CertType** is **PASSPORT** and **Mode** is **3**.', example='2039-06-10', position='Query'),
  videoEvidence?: string(name='VideoEvidence', description='Whether to enable video evidence:

- **true**: Enable

- **false** (default): Disable

> Due to the large size of video files, when the network is unstable, the system will discard the video file to prioritize the transmission of necessary images for authentication. It is recommended that your business set a weak dependency on the video.', example='false', position='Query'),
  voluntaryCustomizedContent?: string(name='VoluntaryCustomizedContent', description='Customized content. Required when personalized settings are enabled. The format is a JSON String of a String List.

- For the follow-reading scenario: It should not exceed 60 Chinese characters (excluding punctuation), and the List contains only one element.

- For the Q&A scenario: Up to 3 questions can be set, with each question not exceeding 30 Chinese characters, and each question being an element in the List.', example='["本人王先生同意***协议。"]', position='Query'),
}

model InitFaceVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 indicates success, other values indicate failure.', example='200'),
  message?: string(name='Message', description='Error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Unique identifier for real-person authentication.', example='91707dc296d469ad38e4c5efa6a0f24b'),
    certifyUrl?: string(name='CertifyUrl', description='URL for real-person authentication in a Web browser, which will redirect according to the ReturnUrl parameter after authentication.

>Notice: 

- The CertifyUrl returned by the initialization interface is valid for **30 minutes and can only be used once**. Please use it within the validity period to avoid reuse.
- This parameter requires the correct input of **MetaInfo** to return a CertifyUrl that matches the client. If you cannot obtain it, please check whether **MetaInfo** and other input parameters are correct.

- The domain name of this URL may change with service updates. To ensure normal service availability, it is recommended not to apply access control to this domain name.

- When redirecting in the browser, try not to use incognito mode or modify the URL, as this may result in a **signature error**.', example='https://t.aliyun.com/****'),
  }(name='ResultObject', description='Result object.'),
}

model InitFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitFaceVerifyResponseBody(name='body'),
}

/**
  * @description - Service Address: cloudauth.aliyuncs.com
  * - Request Method: HTTPS POST and GET.
  * - This interface uses different parameters for different product solutions. For details, please refer to the [official documentation](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/product-overview/introduction/?spm=a2c4g.11186623.help-menu-2401581.d_0_0.13f644ecRzFHfm&scm=20140722.H_99169._.OR_help-T_cn~zh-V_1).
  * #### Image Format Requirements
  * When performing real-person authentication, please provide images that meet all of the following conditions:
  * - Recent photo with a clear, unobstructed face, natural expression, and facing the camera directly.
  * - Clear photo with normal exposure, no overexposure, underexposure, or halo effects, and no significant angle deviation.
  * - Resolution not exceeding 1920*1080, at least 640*480, recommended short side scaled to 720 pixels, compression ratio greater than 0.9.
  * - Photo size: <1MB.
  * - Supports 90, 180, and 270-degree photos; in the case of multiple faces, the largest face will be selected.
  * @param request  the request parameters of InitFaceVerify  InitFaceVerifyRequest
  * @return InitFaceVerifyResponse
 */
async function initFaceVerify(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model InsertWhiteListSettingRequest {
  regionId?: string(name='RegionId', position='Host'),
  certNo?: string(name='CertNo', description='ID number.', example='330103xxxxxxxxxxxx', position='Query'),
  certifyId?: string(name='CertifyId', description='Unique identifier for real person authentication.', example='shsf57a4e0d9981c3bd66dc754f3d3cd', position='Query'),
  remark?: string(name='Remark', description='Remark, with a length less than 32 characters.', example='xxxxxx', position='Query'),
  sceneId?: long(name='SceneId', description='Authentication scene ID. This ID is automatically generated after creating an authentication scene in the console. For instructions on how to create an authentication scene, see Adding an Authentication Scene.', example='100000xxxx', position='Query'),
  serviceCode?: string(name='ServiceCode', description='ServiceCode for the real person cloud product, value: **antcloudauth**.', example='antcloudauth', position='Query'),
  validDay?: int32(name='ValidDay', description='Whitelist validity period in days (only supports 3, 7, 30).', example='30', position='Query'),
}

model InsertWhiteListSettingResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: boolean(name='ResultObject', description='Returned result', example='true'),
  success?: boolean(name='Success', description='Indicates whether the response was successful.', example='true'),
}

model InsertWhiteListSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertWhiteListSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InsertWhiteListSetting  InsertWhiteListSettingRequest
  * @return InsertWhiteListSettingResponse
 */
async function insertWhiteListSetting(request: InsertWhiteListSettingRequest): InsertWhiteListSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertWhiteListSetting', 'POST', '/', 'json', false, 'json', request);
}

model LivenessFaceVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', description='Unique identifier for real-person authentication.', example='91707dc296d469ad38e4c5efa6a0f24b', position='Body'),
  crop?: string(name='Crop', description='Whether to allow cropping of the face image:

- T: Allow cropping

- F (default): Do not allow cropping.', example='T', position='Body'),
  deviceToken?: string(name='DeviceToken', description='Device token, used for risk identification.', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx', position='Body'),
  faceContrastPicture?: string(name='FaceContrastPicture', description='Base64 encoded photo.', example='/9j/4AAQSkZJRgABAQAASxxxxxxx', position='Body'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', description='Image URL.', example='https://ware.cdeledu.com/upfile/uploadPic/2025/03/21/dd62fbb9c966433ab0ba9a7252816b30.jpg', position='Body'),
  ip?: string(name='Ip', description='User\\"s network IP address.', example='114.xxx.xxx.xxx', position='Body'),
  mobile?: string(name='Mobile', description='User\\"s mobile phone number.', example='130xxxxxxxx', position='Body'),
  model?: string(name='Model', description='Liveness detection parameters.', example='FRONT_CAMERA_LIVENESS', position='Query'),
  ossBucketName?: string(name='OssBucketName', description='Authorized OSS bucket name.', example='cn-shanghai-aliyun-cloudauth-1494517779820665', position='Body'),
  ossObjectName?: string(name='OssObjectName', description='Authorized OSS file name.', example='facedetect/17483113370916034.jpg', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', description='A unique business identifier defined by the client side, used for subsequent troubleshooting. The value should be a combination of letters and numbers up to 32 characters long, ensuring uniqueness.', example='e0c34a77f5ac40a5aa5e6ed20c353888', position='Body'),
  productCode?: string(name='ProductCode', description='Fixed value: LR_FR_MIN.', example='LR_FR_MIN', position='Body'),
  sceneId?: long(name='SceneId', description='Authentication scenario ID. This ID is automatically generated after creating an authentication scenario in the console.', example='100000****', position='Body'),
  userId?: string(name='UserId', description='Your custom user ID (up to 100 characters), please ensure it is unique.', example='123456789', position='Body'),
}

model LivenessFaceVerifyResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates successful API response.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of this request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    certifyId?: string(name='CertifyId', description='Unique identifier for the real-person authentication request.', example='91707dc296d469ad38e4c5efa6a0f24b'),
    materialInfo?: string(name='MaterialInfo', description='Attachment information of the face authentication subject, including data such as face quality, face attack, face or OCR image, and intent verification.', example='{"faceAttack": "F","facialPictureFront": {"qualityScore": 88.3615493774414,"verifyScore": 50.28594166529785}}'),
    passed?: string(name='Passed', description='Authentication result, values:

- T: Passed

- F: Not passed', example='T'),
    subCode?: string(name='SubCode', description='Authentication result code.', example='200'),
  }(name='ResultObject', description='Return result.'),
}

model LivenessFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LivenessFaceVerifyResponseBody(name='body'),
}

/**
  * @description Invoke the LivenessFaceVerify interface to perform liveness detection on a face image.
  * @param request  the request parameters of LivenessFaceVerify  LivenessFaceVerifyRequest
  * @return LivenessFaceVerifyResponse
 */
async function livenessFaceVerify(request: LivenessFaceVerifyRequest): LivenessFaceVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LivenessFaceVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile2MetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile: string(name='Mobile', description='Phone number:
- When paramType is normal: input the plaintext phone number.
- When paramType is md5: input the encrypted phone number.

This parameter is required.', example='● 明文：186****2055
● 密文：
849169cd3b20621c1c78bd61a11a4fc2', position='Body'),
  paramType: string(name='ParamType', description='Encryption method:
- normal: plaintext without encryption
- md5: MD5 encryption

This parameter is required.', example='normal', position='Body'),
  userName: string(name='UserName', description='Name:
- When paramType is normal: input the plaintext name.
- When paramType is md5: input the encrypted name.

This parameter is required.', example='● 明文：张三
● 密文：
32fa7bcd874161bea8ec8fd98f390ec9', position='Body'),
}

model Mobile2MetaVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result:
- 1: Consistent verification
- 2: Inconsistent verification
- 3: No record found', example='1'),
    ispName?: string(name='IspName', description='Operator name:
- CMCC: China Mobile
- CUCC: China Unicom
- CTCC: China Telecom', example='CMCC'),
  }(name='ResultObject', description='Result object.'),
}

model Mobile2MetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile2MetaVerifyResponseBody(name='body'),
}

/**
  * @description Input the phone number and name, verify their authenticity and consistency through authoritative data sources.
  * @param request  the request parameters of Mobile2MetaVerify  Mobile2MetaVerifyRequest
  * @return Mobile2MetaVerifyResponse
 */
async function mobile2MetaVerify(request: Mobile2MetaVerifyRequest): Mobile2MetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile2MetaVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaDetailStandardVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

- When `paramType` is `normal`: Input the plain text of the ID number.
- When `paramType` is `md5`: Input the encrypted text of the ID number.', example='429001********8211', position='Body'),
  mobile?: string(name='Mobile', description='Phone number:

- When `paramType` is `normal`: Input the plain text of the phone number.
- When `paramType` is `md5`: Input the encrypted text of the phone number.', example='138********', position='Body'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: Unencrypted.
- md5: Encrypted with MD5.', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name:

- When `paramType` is `normal`: Input the plain text of the name.
- When `paramType` is `md5`: Input the encrypted text of the name.', example='张*', position='Body'),
}

model Mobile3MetaDetailStandardVerifyResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates a successful API response.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Verification matches.
- **2**: Verification does not match.
- **3**: No record found.', example='1'),
    ispName?: string(name='IspName', description='ISP name:

- **CMCC**: China Mobile.
- **CUCC**: China Unicom.
- **CTCC**: China Telecom.
- **CBCC**: China Broadcasting Network.', example='CMCC'),
    subCode?: string(name='SubCode', description='Detailed verification results:

- 101: Passed, three elements are consistent.
- 201: The phone number does not match the name and ID number.
- 202: The phone number matches the name but does not match the ID number.
- 203: The phone number does not match the name but matches the ID number.
- 204: Other inconsistencies.
- 301: No record found.', example='101'),
  }(name='ResultObject', description='Returned result information'),
}

model Mobile3MetaDetailStandardVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaDetailStandardVerifyResponseBody(name='body'),
}

/**
  * @description Input the phone number, name, and ID number to verify their authenticity and consistency through authoritative data sources. If they do not match, the reason for the mismatch is returned.
  * @param request  the request parameters of Mobile3MetaDetailStandardVerify  Mobile3MetaDetailStandardVerifyRequest
  * @return Mobile3MetaDetailStandardVerifyResponse
 */
async function mobile3MetaDetailStandardVerify(request: Mobile3MetaDetailStandardVerifyRequest): Mobile3MetaDetailStandardVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaDetailStandardVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaDetailVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

Note
Only supports the ID numbers of second-generation resident IDs and Hong Kong, Macao, and Taiwan residence permits.

- When paramType is normal: enter the plaintext ID number.

- When paramType is md5: enter the encrypted ID number.', example='明文：429001********8211

密文：

32fa7bcd874161bea8ec8fd98f390ec9', position='Body'),
  mobile?: string(name='Mobile', description='Mobile phone number:

- When paramType is normal: enter the plaintext mobile phone number.

- When paramType is md5: enter the encrypted mobile phone number.', example='明文：186****2055

密文：

849169cd3b20621c1c78bd61a11a4fc2', position='Body'),
  paramType?: string(name='ParamType', description='Encryption method:

- normal: plaintext, unencrypted

- md5: MD5 encryption', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name:

- When paramType is normal: enter the plaintext name.

- When paramType is md5: enter the encrypted name.', example='明文：张三

密文：

32fa7bcd874161bea8ec8fd98f390ec9', position='Body'),
}

model Mobile3MetaDetailVerifyResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates a successful API response.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Verification consistent.
- **2**: Verification inconsistent.
- **3**: No record found.', example='1'),
    ispName?: string(name='IspName', description='Operator name:

- **CMCC**: China Mobile.
- **CUCC**: China Unicom.
- **CTCC**: China Telecom.', example='CMCC'),
    subCode?: string(name='SubCode', description='Detailed verification results:

- **101**: Verification passed.
- **201**: Mobile number and name do not match, mobile number and ID number do not match.
- **202**: Mobile number and name match, but mobile number and ID number do not match.
- **203**: Mobile number and ID number match, but mobile number and name do not match.
- **204**: Other inconsistencies.
- **301**: No record found.', example='101'),
  }(name='ResultObject', description='Returned result information.'),
}

model Mobile3MetaDetailVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaDetailVerifyResponseBody(name='body'),
}

/**
  * @description - Service address: cloudauth.aliyuncs.com (IPv4) or cloudauth-dualstack.aliyuncs.com (IPv6).
  * - Request method: POST and GET.
  * - Transfer protocol: HTTPS.
  * @param request  the request parameters of Mobile3MetaDetailVerify  Mobile3MetaDetailVerifyRequest
  * @return Mobile3MetaDetailVerifyResponse
 */
async function mobile3MetaDetailVerify(request: Mobile3MetaDetailVerifyRequest): Mobile3MetaDetailVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaDetailVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaSimpleStandardVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

- When `paramType` is `normal`: Input the plain text of the ID number.
- When `paramType` is `md5`: Input the encrypted ID number.', example='429001********8211', position='Body'),
  mobile?: string(name='Mobile', description='Phone number:

- When `paramType` is `normal`: Input the plain text of the phone number.
- When `paramType` is `md5`: Input the encrypted phone number.', example='130********', position='Body'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: Unencrypted.
- md5: MD5 encrypted.', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name:

- When `paramType` is `normal`: Input the plain text of the name.
- When `paramType` is `md5`: Input the encrypted name.', example='张*', position='Body'),
}

model Mobile3MetaSimpleStandardVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result:

- 1: Consistent (billable)
- 2: Inconsistent (billable)
- 3: No record found (non-billable)', example='1'),
    ispName?: string(name='IspName', description='Operator name:

- **CMCC**: China Mobile.
- **CUCC**: China Unicom.
- **CTCC**: China Telecom.
- **CBCC**: China Broadcasting Network.', example='CMCC'),
  }(name='ResultObject', description='Returned result information'),
}

model Mobile3MetaSimpleStandardVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaSimpleStandardVerifyResponseBody(name='body'),
}

/**
  * @description Input the phone number, name, and ID number to verify their authenticity and consistency through authoritative data sources.
  * @param request  the request parameters of Mobile3MetaSimpleStandardVerify  Mobile3MetaSimpleStandardVerifyRequest
  * @return Mobile3MetaSimpleStandardVerifyResponse
 */
async function mobile3MetaSimpleStandardVerify(request: Mobile3MetaSimpleStandardVerifyRequest): Mobile3MetaSimpleStandardVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaSimpleStandardVerify', 'POST', '/', 'json', true, 'form', request);
}

model Mobile3MetaSimpleVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number:

Note
Only supports the ID numbers of second-generation resident IDs and Hong Kong, Macao, and Taiwan residence permits.

- When paramType is normal: enter the plaintext ID number.

- When paramType is md5: enter the encrypted ID number.', example='明文：429001********8211

密文：

32fa7bcd874161bea8ec8fd98f390ec9', position='Body'),
  mobile?: string(name='Mobile', description='Mobile phone number:

- When paramType is normal: enter the plaintext mobile phone number.

- When paramType is md5: enter the encrypted mobile phone number.', example='明文：186****2055

密文：

849169cd3b20621c1c78bd61a11a4fc2', position='Body'),
  paramType?: string(name='ParamType', description='Encryption method:

- normal: plaintext, not encrypted

- md5: MD5 encryption', example='normal', position='Body'),
  userName?: string(name='UserName', description='Name:

- When paramType is normal: enter the plaintext name.

- When paramType is md5: enter the encrypted name.', example='明文：张三

密文：

32fa7bcd874161bea8ec8fd98f390ec9', position='Body'),
}

model Mobile3MetaSimpleVerifyResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Verification consistent.
- **2**: Verification inconsistent.
- **3**: No record found.', example='1'),
    ispName?: string(name='IspName', description='ISP name:

- **CMCC**: China Mobile.
- **CUCC**: China Unicom.
- **CTCC**: China Telecom.', example='CMCC'),
  }(name='ResultObject', description='Returned result.'),
}

model Mobile3MetaSimpleVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaSimpleVerifyResponseBody(name='body'),
}

/**
  * @description - Service address: cloudauth.aliyuncs.com (IPv4) or cloudauth-dualstack.aliyuncs.com (IPv6).
  * - Request method: POST and GET.
  * - Transfer protocol: HTTPS.
  * @param request  the request parameters of Mobile3MetaSimpleVerify  Mobile3MetaSimpleVerifyRequest
  * @return Mobile3MetaSimpleVerifyResponse
 */
async function mobile3MetaSimpleVerify(request: Mobile3MetaSimpleVerifyRequest): Mobile3MetaSimpleVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Mobile3MetaSimpleVerify', 'POST', '/', 'json', true, 'form', request);
}

model MobileDetectRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobiles?: string(name='Mobiles', description='List of phone numbers.', example='19833232569', position='Body'),
  paramType?: string(name='ParamType', description='Encryption method:
- normal: plaintext, no encryption
- md5: MD5 encryption', example='normal', position='Body'),
}

model MobileDetectResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='969434DF-926B-4997-9881-4DE94E39F805'),
  resultObject?: {
    chargeCount?: string(name='ChargeCount', description='Billing count, the total billing count in one request', example='2'),
    items?: [ 
      {
        area?: string(name='Area', description='Phone number\\"s area (only for plaintext phone numbers)', example='安徽-马**'),
        bizCode?: string(name='BizCode', description='Verification result

- 1: Available online 
- 2: Not available online
- 3: No query result', example='1'),
        ispName?: string(name='IspName', description='Operator name

- CMCC: China Mobile 
- CUCC: China Unicom 
- CTCC: China Telecom', example='CMCC'),
        mobile?: string(name='Mobile', description='Phone number', example='131********'),
        subCode?: string(name='SubCode', description='Verification details

- 101: Available number
- 102: Empty number
- 103: Suspended 
- 104: Silent number (inactive small number, new number, non-smartphone user within the last six months) 
- 105: Risky number (long-term shutdown or no voice service activated and prone to complaints)
- 301: No record found', example='101'),
      }
    ](name='Items', description='Verification results set'),
  }(name='ResultObject', description='Returned result information'),
}

model MobileDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileDetect  MobileDetectRequest
  * @return MobileDetectResponse
 */
async function mobileDetect(request: MobileDetectRequest): MobileDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MobileDetect', 'POST', '/', 'json', true, 'form', request);
}

model MobileOnlineStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile?: string(name='Mobile', description='Mobile number:

- When `paramType` is `normal`: provide the plaintext mobile number.
- When `paramType` is `md5`: provide the encrypted mobile number.', example='13665148158', position='Body'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: unencrypted.
- md5: md5 encrypted.', example='normal', position='Body'),
}

model MobileOnlineStatusResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='B506328A-D84B-4750-82C7-6A207C585CF1'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result

- 1: Available online 
- 2: Not available online (see subCode for details)
- 3: No query result', example='1'),
    ispName?: string(name='IspName', description='ISP name

- CMCC: China Mobile 
- CUCC: China Unicom 
- CTCC: China Telecom', example='CMCC'),
    subCode?: string(name='SubCode', description='Verification details

- 101: Available online 
- 201: Suspended 
- 202: Disconnected 
- 203: Online but not available 
- 204: Not online 
- 301: No record found', example='101'),
  }(name='ResultObject', description='Returned result information'),
}

model MobileOnlineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileOnlineStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileOnlineStatus  MobileOnlineStatusRequest
  * @return MobileOnlineStatusResponse
 */
async function mobileOnlineStatus(request: MobileOnlineStatusRequest): MobileOnlineStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MobileOnlineStatus', 'POST', '/', 'json', true, 'form', request);
}

model MobileOnlineTimeRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile?: string(name='Mobile', description='Mobile number:
- When `paramType` is `normal`: provide the plaintext mobile number.
- When `paramType` is `md5`: provide the encrypted mobile number.', example='明文：186****2055

密文：

849169cd3b20621c1c78bd61a11a4fc2', position='Body'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: unencrypted.
- md5: md5 encrypted.', example='normal', position='Body'),
}

model MobileOnlineTimeResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='B506328A-D84B-4750-82C7-6A207C585CF1'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code.
- 1: Verification consistent
- 2: Verification inconsistent
- 3: No record found', example='1'),
    ispName?: string(name='IspName', description='Operator name

- CMCC: China Mobile 
- CUCC: China Unicom 
- CTCC: China Telecom', example='CMCC'),
    timeCode?: string(name='TimeCode', description='- 1: [0,3) indicates the online duration is 0~3 months 
- 2: [3,6) indicates the online duration is 3~6 months 
- 3: [6,12) indicates the online duration is 6~12 months 
- 4: [12,24) indicates the online duration is 12~24 months 
- 5: [24,+) indicates the online duration is more than 24 months', example='5'),
  }(name='ResultObject', description='Returned result information'),
}

model MobileOnlineTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileOnlineTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileOnlineTime  MobileOnlineTimeRequest
  * @return MobileOnlineTimeResponse
 */
async function mobileOnlineTime(request: MobileOnlineTimeRequest): MobileOnlineTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MobileOnlineTime', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDeviceInfoRequest {
  bizType?: string(name='BizType', description='The updated business type. It should not exceed 64 characters and is defined by the connected party. It can be used to annotate specific businesses, for example, different face usage scenarios or the customer identifiers to be delivered.', example='FACE_TEST', position='Query'),
  deviceId: string(name='DeviceId', description='A unique ID generated by the real-person authentication server for the connected device, which is only generated after the device is successfully activated. This ID can be obtained through the getLicenseExtraInfo function in the offline facial recognition SDK.

This parameter is required.', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM', position='Query'),
  duration?: string(name='Duration', description='The extended duration of the device expiration. Unit: years, with a range of [1,100]. A value of 100 indicates permanent use. One year is calculated as 365 days.', example='1', position='Query'),
  expiredDay?: string(name='ExpiredDay', description='The current expiration time of the device. If the expiration date is incorrect (differing from the real-person authentication server\\"s recorded expiration time by more than one week), an error will be reported.
> The expiration time can be queried through the DescribeDeviceInfo interface. An incorrect expiration date will result in an error. This check ensures that the business party does not accidentally re-activate a device due to some misoperation, thus consuming the authorization unnecessarily.', example='20190401', position='Query'),
  userDeviceId?: string(name='UserDeviceId', description='The updated user device ID. It should not exceed 64 characters and is defined by the connected party. It can be used to identify specific devices, and it is recommended to use the physical number of the device.', example='3iJ1AY$oHcu7mC69', position='Query'),
}

model ModifyDeviceInfoResponseBody = {
  beginDay?: string(name='BeginDay', description='If the Duration in the request parameters is not empty, this field represents the start time of the authorization after the device validity period has been extended. One year of Duration is calculated as 365 days. Example: 20180101.', example='20190401'),
  bizType?: string(name='BizType', description='Corresponds to the BizType in the request parameters.', example='FACE_TEST'),
  deviceId?: string(name='DeviceId', description='Corresponds to the DeviceId in the request parameters.', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
  expiredDay?: string(name='ExpiredDay', description='If the Duration in the request parameters is not empty, this field represents the expiration time of the authorization after the device validity period has been extended. One year of Duration is calculated as 365 days. Example: 20180101.', example='20200330'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  userDeviceId?: string(name='UserDeviceId', description='Corresponds to the UserDeviceId in the request parameters.', example='3iJ1AY$oHcu7mC69'),
}

model ModifyDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceInfoResponseBody(name='body'),
}

/**
  * @description Request Method: Supports sending requests using HTTPS POST and GET methods.
  * @param request  the request parameters of ModifyDeviceInfo  ModifyDeviceInfoRequest
  * @return ModifyDeviceInfoResponse
 */
async function modifyDeviceInfo(request: ModifyDeviceInfoRequest): ModifyDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model PageQueryWhiteListSettingRequest {
  regionId?: string(name='RegionId', position='Host'),
  certNo?: string(name='CertNo', description='ID number.', example='330103xxxxxxxxxxxx', position='Query'),
  certifyId?: string(name='CertifyId', description='Unique identifier for real person authentication.', example='sha75b4e19a1ddda059b920757b0e12b', position='Query'),
  currentPage?: int32(name='CurrentPage', description='Current page number, default is 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page, default is 10', example='10', position='Query'),
  sceneId?: long(name='SceneId', description='Authentication scene ID. This ID is automatically generated after creating an authentication scene in the console. For how to create an authentication scene, see Adding an Authentication Scene.', example='1000000xxx', position='Query'),
  serviceCode?: string(name='ServiceCode', description='ServiceCode of the real person cloud product, value: **antcloudauth**.', example='antcloudauth', position='Query'),
  status?: string(name='Status', description='Status:

- DELETE: Deleted
- VALID: Not deleted and within the validity period, valid
- INVALID: Not deleted but outside the validity period, invalid', example='VALID', position='Query'),
  validEndDate?: string(name='ValidEndDate', description='End date of validity (timestamp in milliseconds)', example='1725379200000', position='Query'),
  validStartDate?: string(name='ValidStartDate', description='Start date of validity (timestamp in milliseconds)', example='1725120000000', position='Query'),
}

model PageQueryWhiteListSettingResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates a successful API response.', example='200'),
  currentPage?: int32(name='CurrentPage', description='Current page number.', example='1'),
  message?: string(name='Message', description='Return message.', example='success'),
  pageSize?: int32(name='PageSize', description='Number of items per page.', example='10'),
  requestId?: string(name='RequestId', description='ID of the request', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: [ 
    {
      certNo?: string(name='CertNo', description='ID number.', example='330103xxxxxxxxxxxx'),
      certifyId?: string(name='CertifyId', description='Unique identifier for real person authentication.', example='sha43d9cabd52d370d9f4cca9468f71e'),
      gmtCreate?: string(name='GmtCreate', description='Creation time.', example='2024-08-30 14:00:00'),
      gmtModified?: string(name='GmtModified', description='Modification time.', example='2024-08-30 14:00:00'),
      id?: long(name='Id', description='Whitelist ID.', example='234822'),
      remark?: string(name='Remark', description='Remark information.', example='test'),
      sceneId?: long(name='SceneId', description='Authentication scene ID.', example='1000000332'),
      serviceCode?: string(name='ServiceCode', description='ServiceCode of the real person cloud product', example='antcloudauth'),
      status?: string(name='Status', description='Status:

- DELETE: Deleted
- VALID: Not deleted and within the validity period, valid
- INVALID: Not deleted but outside the validity period, invalid', example='VALID'),
      validEndDate?: string(name='ValidEndDate', description='End date of validity', example='2024-09-02 13:57:51'),
      validStartDate?: string(name='ValidStartDate', description='Start date of validity', example='2024-08-30 13:57:51'),
    }
  ](name='ResultObject', description='Request result'),
  success?: boolean(name='Success', description='Whether the response was successful.', example='true'),
  totalItem?: int32(name='TotalItem', description='Total number of items.', example='28'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='3'),
}

model PageQueryWhiteListSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageQueryWhiteListSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageQueryWhiteListSetting  PageQueryWhiteListSettingRequest
  * @return PageQueryWhiteListSettingResponse
 */
async function pageQueryWhiteListSetting(request: PageQueryWhiteListSettingRequest): PageQueryWhiteListSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageQueryWhiteListSetting', 'POST', '/', 'json', false, 'json', request);
}

model RemoveWhiteListSettingRequest {
  regionId?: string(name='RegionId', position='Host'),
  ids?: [ long ](name='Ids', description='IDs of the whitelist to be deleted in bulk.', shrink='json', position='Query'),
  serviceCode?: string(name='ServiceCode', description='ServiceCode for the real person cloud product, only value: **antcloudauth**.', example='antcloudauth', position='Query'),
}

model RemoveWhiteListSettingResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: boolean(name='ResultObject', description='Returned result information.', example='true'),
  success?: boolean(name='Success', description='Whether the response was successful.', example='true'),
}

model RemoveWhiteListSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveWhiteListSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveWhiteListSetting  RemoveWhiteListSettingRequest
  * @return RemoveWhiteListSettingResponse
 */
async function removeWhiteListSetting(request: RemoveWhiteListSettingRequest): RemoveWhiteListSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveWhiteListSetting', 'POST', '/', 'json', false, 'json', request);
}

model Vehicle5ItemQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramType?: string(name='ParamType', description='Parameter type:

- **normal**: Unencrypted.
- **md5**: MD5 encrypted.', example='normal', position='Query'),
  vehicleNum?: string(name='VehicleNum', description='License plate number

> 
> - When paramType is set to normal, enter the plain text.
> - When paramType is set to md5, enter the plain text of all but the last two characters of the license plate + MD5 encryption (32-bit lowercase MD5) of the last two characters.', example='陕A9****', position='Query'),
  vehicleType?: string(name='VehicleType', description='Vehicle type

> 
> - 02: Ordinary passenger car
> - 52: New energy passenger car', example='02', position='Query'),
}

model Vehicle5ItemQueryResponseBody = {
  code?: string(name='Code', description='Return code', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0D******'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Found (charged)
- **3**: No record found (not charged)', example='1'),
    vehicleInfo?: string(name='VehicleInfo', description='Vehicle information', example='{
        "engineNo": "F0******",
        "useProperty": 0,
        "registrationDate": "****-**-** **:**:**",
        "engineType": "B******",
        "vin": "A********",
        "state": "0",
        "modelNo": "B********",
        "type": "小型轿车",
        "brand": "宝马",
        "usePropertyDesc": "非营运",
        "stateDesc": "正常"
    }'),
  }(name='ResultObject', description='Returned result information.'),
}

model Vehicle5ItemQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Vehicle5ItemQueryResponseBody(name='body'),
}

/**
  * @description Query basic vehicle information through the license plate number and vehicle type.
  * @param request  the request parameters of Vehicle5ItemQuery  Vehicle5ItemQueryRequest
  * @return Vehicle5ItemQueryResponse
 */
async function vehicle5ItemQuery(request: Vehicle5ItemQueryRequest): Vehicle5ItemQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Vehicle5ItemQuery', 'POST', '/', 'json', false, 'json', request);
}

model VehicleInsureQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramType?: string(name='ParamType', description='Parameter type:

- **normal**: Unencrypted.
- **md5**: MD5 encrypted.', example='normal', position='Query'),
  vehicleNum?: string(name='VehicleNum', description='License plate number
> 
> - When `paramType` is set to `normal`, enter the plain text.
> - When `paramType` is set to `md5`, enter the plain text of all but the last two characters of the license plate + the MD5 encryption (32 lowercase characters) of the last two characters of the license plate.', example='陕A9****', position='Query'),
  vehicleType?: string(name='VehicleType', description='Driver\\"s license vehicle type.', example='02', position='Query'),
  vin?: string(name='Vin', description='Vehicle identification code, i.e., the vehicle VIN


> 
> - When `paramType` is set to `normal`, enter the plain text.
> - When `paramType` is set to `md5`, enter the plain text of all but the last four characters of the VIN + the MD5 encryption (32 lowercase characters) of the last four characters of the VIN.', example='LB**************', position='Query'),
}

model VehicleInsureQueryResponseBody = {
  code?: string(name='Code', description='Return code: 200 indicates success, others indicate failure.', example='200'),
  message?: string(name='Message', description='Response message for the request information.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='5A6229C0-E156-48E4-B6EC-0F52********'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:

> 
> - 1: Found (charged)
> - 3: No record found (not charged)', example='1'),
    vehicleInfo?: string(name='VehicleInfo', description='Insurance date information', example='{
    "firstInsuranceDate": "****-**-**",
    "lastInsuranceDate": "****-**",
    "latestInsuranceDate": "****-**",
    "latestInsuranceDateStart": "****-**"
  }'),
  }(name='ResultObject', description='Returned result information.'),
}

model VehicleInsureQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleInsureQueryResponseBody(name='body'),
}

/**
  * @description Query the vehicle insurance date through the license plate number, vehicle type, and vehicle identification number (VIN).
  * @param request  the request parameters of VehicleInsureQuery  VehicleInsureQueryRequest
  * @return VehicleInsureQueryResponse
 */
async function vehicleInsureQuery(request: VehicleInsureQueryRequest): VehicleInsureQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleInsureQuery', 'POST', '/', 'json', false, 'json', request);
}

model VehicleMetaVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number.

This is a required field when VerifyMetaType is set to VEHICLE_3_META.
> 
> - When paramType is set to normal, enter the plain text.
> - When paramType is set to md5, enter the first 6 digits in plain text + the birth date encrypted with MD5 (32 lowercase characters) + the last 4 digits in plain text.', example='4****************1', position='Query'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: Unencrypted.
- md5: Encrypted with MD5.', example='normal', position='Query'),
  userName?: string(name='UserName', description='Name

> This is an explanation
> - When paramType is set to normal, enter the plain text.
> - When paramType is set to md5, encrypt the first character of the name with MD5 (32 lowercase characters) + the rest of the name in plain text.', example='张**', position='Query'),
  vehicleNum?: string(name='VehicleNum', description='Vehicle license plate

> 
> - When paramType is set to normal, enter the plain text.
> - When paramType is set to md5, enter the part of the license plate except for the last two characters in plain text + the last two characters of the license plate encrypted with MD5 (32 lowercase characters).', example='陕A9****', position='Query'),
  vehicleType?: string(name='VehicleType', description='Vehicle type', example='02', position='Query'),
  verifyMetaType?: string(name='VerifyMetaType', description='Verification type

> 
> - VEHICLE_2_META: Two-element verification, name + vehicle license plate verification;
> - VEHICLE_3_META: Three-element verification, name + vehicle license plate + ID number verification;', example='VEHICLE_2_META', position='Query'),
}

model VehicleMetaVerifyResponseBody = {
  code?: string(name='Code', description='Response code, **200** indicates that the API response was successful.', example='200'),
  message?: string(name='Message', description='Response message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the request', example='8FC3D6AC-9FED-4311-8DA7-C4BF4*****'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result.

- 1: Consistent (billable)
- 2: Inconsistent (billable)
- 3: No record found (non-billable)', example='1'),
  }(name='ResultObject', description='Returned result information.'),
}

model VehicleMetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleMetaVerifyResponseBody(name='body'),
}

/**
  * @description Verifies the consistency of name, ID number, vehicle license plate, and vehicle type.
  * @param request  the request parameters of VehicleMetaVerify  VehicleMetaVerifyRequest
  * @return VehicleMetaVerifyResponse
 */
async function vehicleMetaVerify(request: VehicleMetaVerifyRequest): VehicleMetaVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleMetaVerify', 'POST', '/', 'json', false, 'json', request);
}

model VehicleMetaVerifyV2Request {
  regionId?: string(name='RegionId', position='Host'),
  identifyNum?: string(name='IdentifyNum', description='ID number.

This is a required field when VerifyMetaType is VEHICLE_3_META.

> 
> - When paramType is normal, enter plain text.
> - When paramType is md5, enter the first 6 digits in plain text + MD5 (32 lowercase) of the birth date + the last 4 digits in plain text.', example='4****************1', position='Query'),
  paramType?: string(name='ParamType', description='Parameter type:

- normal: Unencrypted.
- md5: Md5 encrypted.', example='normal', position='Query'),
  userName?: string(name='UserName', description='Name
> 
> - When paramType is normal, enter plain text.
> - When paramType is md5, enter the first character of the name as MD5 (32 lowercase) + the rest of the name in plain text.', example='张*', position='Query'),
  vehicleNum?: string(name='VehicleNum', description='License plate number

> 
> - When paramType is normal, enter plain text.
> - When paramType is md5, enter all but the last two characters in plain text + the last two characters as MD5 (32 lowercase).', example='陕A9****', position='Query'),
  vehicleType?: string(name='VehicleType', description='Vehicle type', example='02', position='Query'),
  verifyMetaType?: string(name='VerifyMetaType', description='Verification type

> 
> - VEHICLE_2_META: Two-element verification, name + license plate number verification;
> - VEHICLE_3_META: Three-element verification, name + license plate number + ID number verification;', example='VEHICLE_3_META', position='Query'),
}

model VehicleMetaVerifyV2ResponseBody = {
  code?: string(name='Code', description='Return code, **200** indicates successful API response.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='5A6229C0-E156-48E4-B6EC-0F528B******'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:
- **1**: Verification consistent.
- **2**: Verification inconsistent.
- **3**: No record found.', example='1'),
    vehicleInfo?: string(name='VehicleInfo', description='Detailed vehicle information.', example='{
	"approvedCount": "7",
	"approvedLoad": "0",
	"axleCount": "2",
	"backWheelDistance": "1585",
	"brand": "雷克萨斯",
	"displacement": "4608",
	"engineNum": "1*********",
	"engineType": "1**",
	"frontWheelDistance": "1585",
	"fuelType": "汽油",
	"inspectionDate": "****-**-** **:**:**",
	"modelNum": "UR*****-******",
	"power": "228",
	"registrationDate": "****-**-** **:**:**",
	"retirementDate": "****-**-** **:**:**",
	"totalMass": "2940",
	"unladenMass": "2350",
	"useProperty": "非营运",
	"vehicleState": "正常",
	"vin": "JT***************",
	"wheelBase": "2790"
}'),
  }(name='ResultObject', description='Returned result'),
}

model VehicleMetaVerifyV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleMetaVerifyV2ResponseBody(name='body'),
}

/**
  * @description Verifies the consistency of name, ID number, license plate number, and vehicle type, and supports returning detailed vehicle information.
  * @param request  the request parameters of VehicleMetaVerifyV2  VehicleMetaVerifyV2Request
  * @return VehicleMetaVerifyV2Response
 */
async function vehicleMetaVerifyV2(request: VehicleMetaVerifyV2Request): VehicleMetaVerifyV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleMetaVerifyV2', 'POST', '/', 'json', false, 'json', request);
}

model VehicleQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramType?: string(name='ParamType', description='Parameter type:

- **normal**: Unencrypted.
- **md5**: MD5 encrypted.', example='normal', position='Query'),
  vehicleNum?: string(name='VehicleNum', description='License plate number

> 
> - When paramType is set to normal, enter the plain text.
> - When paramType is set to md5, enter the unencrypted part of the license plate number except for the last two characters + the MD5 (32 lowercase) encryption of the last two characters of the license plate.', example='陕A9****', position='Query'),
  vehicleType?: string(name='VehicleType', description='Vehicle type', example='02', position='Query'),
}

model VehicleQueryResponseBody = {
  code?: string(name='Code', description='Return code: 200 for success, others for failure', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='D6163397-15C5-419C-9ACC-B7C83*******'),
  resultObject?: {
    bizCode?: string(name='BizCode', description='Verification result code:

> 
> - 1: Found (charged)
> - 3: No record found (not charged)', example='1'),
    vehicleInfo?: string(name='VehicleInfo', description='Vehicle information.', example='{
	"approvedCount": 7,
	"approvedLoad": 0,
	"axleCount": 2,
	"backWheelDistance": 1585,
	"brand": "雷克萨斯",
	"compulsoryScrapTo": "****-**-** **:**:**",
	"displacement": 4608,
	"engineNo": "1UR0******",
	"engineType": "1**",
	"frontWheelDistance": 1585,
	"fuelType": "汽油",
	"high": 1860,
	"inspectionResultEffectiveTo": "****-**-** **:**:**",
	"modelNo": "UR*****-******",
	"power": 228,
	"registrationDate": "****-**-** **:**:**",
	"releaseDate": "",
	"state": "0",
	"stateDesc": "正常",
	"totalMass": 2940,
	"unladenMass": 2350,
	"useProperty": 0,
	"usePropertyDesc": "非营运",
	"long": 4890,
	"vin": "A***********",
	"wheelBase": 2790,
	"wide": 1910
}'),
  }(name='ResultObject', description='Request result'),
}

model VehicleQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VehicleQueryResponseBody(name='body'),
}

/**
  * @description Query detailed vehicle information through the license plate number and vehicle type.
  * @param request  the request parameters of VehicleQuery  VehicleQueryRequest
  * @return VehicleQueryResponse
 */
async function vehicleQuery(request: VehicleQueryRequest): VehicleQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VehicleQuery', 'POST', '/', 'json', false, 'json', request);
}

model VerifyMaterialRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='A unique ID that identifies a single authentication task, not exceeding 64 characters. For a single authentication task, the system supports unlimited submissions until the final authentication is passed and the task is completed.

> Different BizIds are required for different authentication tasks.

This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125b****', position='Query'),
  bizType: string(name='BizType', description='Identifier for the business scenario using the real-person authentication service. Please refer to [Business Setup](https://help.aliyun.com/document_detail/127885.html) and complete the creation in the console first.

This parameter is required.', example='RPMinTest', position='Query'),
  faceImageUrl: string(name='FaceImageUrl', description='HTTP or HTTPS link to the frontal face image.

This parameter is required.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg', position='Query'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl', description='HTTP or HTTPS link to the national emblem side of the ID card.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg', position='Query'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl', description='HTTP or HTTPS link to the portrait side of the ID card image.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg', position='Query'),
  idCardNumber: string(name='IdCardNumber', description='ID number.

This parameter is required.', example='02343218901123****', position='Query'),
  name: string(name='Name', description='Name.

This parameter is required.', example='张三', position='Query'),
  userId?: string(name='UserId', description='The ID of the end user, such as the account ID of the end user.', example='54sdj', position='Query'),
}

model VerifyMaterialResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore', description='Comparison score between the facial photo submitted during the authentication process and authoritative data, with a range of **0**~**100**.

Confidence threshold references:
- False recognition rate 0.001% corresponds to a threshold of 95.
- False recognition rate 0.01% corresponds to a threshold of 90.
- False recognition rate 0.1% corresponds to a threshold of 80.
- False recognition rate 1% corresponds to a threshold of 60.

> This field only indicates the comparison result between the face and authoritative data, serving as a reference score. It is generally not recommended to use this score alone as the pass/fail criterion. For the comprehensive authentication result, please refer to the **VerifyStatus** field. The **VerifyStatus** result integrates the face-to-authoritative data comparison and other various strategies, enhancing security levels.', example='97'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore', description='Comparison score between the facial photo submitted during the authentication process and the face on the portrait side of the ID card image, with a range of **0**~**100**.

Confidence threshold references:
- False recognition rate 0.001% corresponds to a threshold of 95.
- False recognition rate 0.01% corresponds to a threshold of 90.
- False recognition rate 0.1% corresponds to a threshold of 80.
- False recognition rate 1% corresponds to a threshold of 60.', example='97'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl', description='Global camera image captured by the real-person authentication SDK.

> This parameter will take effect after configuration. If you need to use this parameter, please submit a [ticket](https://selfservice.console.aliyun.com/ticket/category/cloudauth/today) to contact us.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-global-example.jpg'),
    faceImageUrl?: string(name='FaceImageUrl', description='HTTP or HTTPS link to the frontal face image, corresponding to the request parameter **FaceImageUrl**. The link is valid for 5 minutes, and it is recommended to store it in your business to avoid affecting usage.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg'),
    faceMask?: string(name='FaceMask', description='Whether the face is wearing a mask. Values:
- **true**: Wearing a mask
- **false**: Not wearing a mask', example='false'),
    faceQuality?: string(name='FaceQuality', description='The quality of the frontal face image. Possible values:
- **UNQUALIFIED**: Poor quality
- **LOW**: Low
- **NORMAL**: Average
- **HIGH**: High', example='NORMAL'),
    idCardInfo?: {
      address?: string(name='Address', description='Address.', example='浙江省杭州市余杭区文一西路969号'),
      authority?: string(name='Authority', description='Issuing authority.', example='杭州市公安局'),
      backImageUrl?: string(name='BackImageUrl', description='HTTP or HTTPS link to the national emblem side of the ID card. The link is valid for 5 minutes. It is recommended to store it in your business system to avoid any impact on usage.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
      birth?: string(name='Birth', description='Date of birth.', example='19900101'),
      endDate?: string(name='EndDate', description='End date of the document\\"s validity period. Format: yyyymmdd.', example='20201101'),
      frontImageUrl?: string(name='FrontImageUrl', description='HTTP or HTTPS link to the portrait side of the ID card. The link is valid for 5 minutes. It is recommended to store it in your business system to avoid any impact on usage.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
      name?: string(name='Name', description='Name.', example='张三'),
      nationality?: string(name='Nationality', description='Nationality.', example='汉'),
      number?: string(name='Number', description='ID number.', example='02343218901123****'),
      startDate?: string(name='StartDate', description='Start date of the document\\"s validity period. Format: yyyymmdd.', example='20201101'),
    }(name='IdCardInfo', description='OCR result of the ID card information.

> If there is no front or back of the ID card during the verification process, the OCR result of the ID card information will not be returned. Even if the front and back of the ID card are present during the verification process, it does not guarantee that all the information on the ID card will be returned. Due to issues such as poor ID card photography, the OCR may fail to recognize some information, leading to incomplete OCR results. It is recommended that the business side does not heavily rely on the ID card OCR information.'),
    idCardName?: string(name='IdCardName', description='Name, corresponding to the request parameter **Name**.', example='张三'),
    idCardNumber?: string(name='IdCardNumber', description='ID number, corresponding to the request parameter **IdCardNumber**.', example='02343218901123****'),
  }(name='Material', description='Authentication materials.'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyStatus?: int32(name='VerifyStatus', description='Authentication status. Values:

- **1**: Authentication passed.
- **2**~**n**: Authentication failed due to various reasons. For detailed descriptions, see the **Authentication Status Explanation** below.', example='1'),
  verifyToken?: string(name='VerifyToken', description='Token for this authentication, used to link various interfaces in the authentication request, valid for 30 minutes.', example='c302c0797679457685410ee51a5ba375'),
}

model VerifyMaterialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyMaterialResponseBody(name='body'),
}

/**
  * @description Preparation for Access: When integrating this API, please ensure that the corresponding preparatory work has been completed. For details, please refer to [Server-side Access Preparation](https://help.aliyun.com/document_detail/127471.html).
  * Request Method: HTTPS POST and GET.
  * API Description: The server of the access party submits the authentication materials to the real-person authentication service for verification and comparison, with the results returned synchronously.
  * Applicable Scope: This interface is only applicable to pure server-side access authentication solutions.
  * Image Upload Address Explanation:
  * - HTTP or HTTPS address: Supports publicly accessible HTTP or HTTPS addresses. For example, `http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg`.
  * - OSS address: If the images from the access party are local files, Alibaba Cloud also provides an upload SDK, supporting the business party to upload the images to the specified OSS bucket of the real-person authentication service, and use the obtained OSS address as the image address parameter in the interface. If your business needs to use the upload SDK, please submit a [ticket](https://selfservice.console.aliyun.com/ticket/category/cloudauth/today) to contact us for acquisition.
  * Image Limitations:
  * - Does not support relative or absolute paths of local images.
  * - Please keep the size of a single image within 2 MB to avoid algorithm retrieval timeout.
  * - The face area in the image should be at least 64*64 pixels.
  * - There is an 8 MB size limit for the Body of a single request. Please calculate the total size of all images and other information in the request, and do not exceed the limit.
  * @param request  the request parameters of VerifyMaterial  VerifyMaterialRequest
  * @return VerifyMaterialResponse
 */
async function verifyMaterial(request: VerifyMaterialRequest): VerifyMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyMaterial', 'POST', '/', 'json', false, 'json', request);
}

