/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AIGCFaceVerifyRequest {
  faceContrastPicture?: string(name='FaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  ossBucketName?: string(name='OssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx'),
  ossObjectName?: string(name='OssObjectName', example='verify/xxxxx/xxxxxx.jpeg'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  productCode?: string(name='ProductCode', example='LR_FR_AIGC'),
  sceneId?: long(name='SceneId', example='100000xxxx'),
}

model AIGCFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    result?: string(name='Result', example='Y'),
    score?: string(name='Score', example='1.0000'),
  }(name='ResultObject'),
}

model AIGCFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AIGCFaceVerifyResponseBody(name='body'),
}

/**
 * @summary 新增AIGC人脸检测能力
 *
 * @param request AIGCFaceVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AIGCFaceVerifyResponse
 */
async function aIGCFaceVerifyWithOptions(request: AIGCFaceVerifyRequest, runtime: Util.RuntimeOptions): AIGCFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.faceContrastPictureUrl)) {
    query['FaceContrastPictureUrl'] = request.faceContrastPictureUrl;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    query['OssBucketName'] = request.ossBucketName;
  }
  if (!Util.isUnset(request.ossObjectName)) {
    query['OssObjectName'] = request.ossObjectName;
  }
  if (!Util.isUnset(request.outerOrderNo)) {
    query['OuterOrderNo'] = request.outerOrderNo;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.faceContrastPicture)) {
    body['FaceContrastPicture'] = request.faceContrastPicture;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AIGCFaceVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增AIGC人脸检测能力
 *
 * @param request AIGCFaceVerifyRequest
 * @return AIGCFaceVerifyResponse
 */
async function aIGCFaceVerify(request: AIGCFaceVerifyRequest): AIGCFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return aIGCFaceVerifyWithOptions(request, runtime);
}

model BankMetaVerifyRequest {
  bankCard?: string(name='BankCard', example='610*************1181'),
  identifyNum?: string(name='IdentifyNum', example='429001********8211'),
  mobile?: string(name='Mobile', example='138******11'),
  paramType?: string(name='ParamType', example='normal'),
  productType?: string(name='ProductType', example='BANK_CARD_2_META'),
  userName?: string(name='UserName'),
  verifyMode?: string(name='VerifyMode', example='VERIFY_BANK_CARD'),
}

model BankMetaVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-A***B-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    subCode?: string(name='SubCode', example='101'),
  }(name='ResultObject'),
}

model BankMetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BankMetaVerifyResponseBody(name='body'),
}

/**
 * @summary 银行卡要素核验接口
 *
 * @param request BankMetaVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BankMetaVerifyResponse
 */
async function bankMetaVerifyWithOptions(request: BankMetaVerifyRequest, runtime: Util.RuntimeOptions): BankMetaVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bankCard)) {
    query['BankCard'] = request.bankCard;
  }
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.verifyMode)) {
    query['VerifyMode'] = request.verifyMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BankMetaVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 银行卡要素核验接口
 *
 * @param request BankMetaVerifyRequest
 * @return BankMetaVerifyResponse
 */
async function bankMetaVerify(request: BankMetaVerifyRequest): BankMetaVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return bankMetaVerifyWithOptions(request, runtime);
}

model CompareFaceVerifyRequest {
  crop?: string(name='Crop'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  productCode?: string(name='ProductCode', example='PV_FC'),
  sceneId?: long(name='SceneId', example='1000000006'),
  sourceCertifyId?: string(name='SourceCertifyId', example='0bfa7c493f850e5178b9f8613634c9xx'),
  sourceFaceContrastPicture?: string(name='SourceFaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  sourceFaceContrastPictureUrl?: string(name='SourceFaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  sourceOssBucketName?: string(name='SourceOssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx'),
  sourceOssObjectName?: string(name='SourceOssObjectName', example='verify/xxxxx/xxxxxx.jpeg'),
  targetCertifyId?: string(name='TargetCertifyId', example='0bfa7c493f850e5178b9f8613634c9xx'),
  targetFaceContrastPicture?: string(name='TargetFaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  targetFaceContrastPictureUrl?: string(name='TargetFaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  targetOssBucketName?: string(name='TargetOssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx'),
  targetOssObjectName?: string(name='TargetOssObjectName', example='verify/xxxxx/xxxxxx.jpeg'),
}

model CompareFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    passed?: string(name='Passed', example='T'),
    verifyScore?: float(name='VerifyScore', example='99.60875'),
  }(name='ResultObject'),
}

model CompareFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFaceVerifyResponseBody(name='body'),
}

/**
 * @param request CompareFaceVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CompareFaceVerifyResponse
 */
async function compareFaceVerifyWithOptions(request: CompareFaceVerifyRequest, runtime: Util.RuntimeOptions): CompareFaceVerifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.crop)) {
    body['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.outerOrderNo)) {
    body['OuterOrderNo'] = request.outerOrderNo;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.sourceCertifyId)) {
    body['SourceCertifyId'] = request.sourceCertifyId;
  }
  if (!Util.isUnset(request.sourceFaceContrastPicture)) {
    body['SourceFaceContrastPicture'] = request.sourceFaceContrastPicture;
  }
  if (!Util.isUnset(request.sourceFaceContrastPictureUrl)) {
    body['SourceFaceContrastPictureUrl'] = request.sourceFaceContrastPictureUrl;
  }
  if (!Util.isUnset(request.sourceOssBucketName)) {
    body['SourceOssBucketName'] = request.sourceOssBucketName;
  }
  if (!Util.isUnset(request.sourceOssObjectName)) {
    body['SourceOssObjectName'] = request.sourceOssObjectName;
  }
  if (!Util.isUnset(request.targetCertifyId)) {
    body['TargetCertifyId'] = request.targetCertifyId;
  }
  if (!Util.isUnset(request.targetFaceContrastPicture)) {
    body['TargetFaceContrastPicture'] = request.targetFaceContrastPicture;
  }
  if (!Util.isUnset(request.targetFaceContrastPictureUrl)) {
    body['TargetFaceContrastPictureUrl'] = request.targetFaceContrastPictureUrl;
  }
  if (!Util.isUnset(request.targetOssBucketName)) {
    body['TargetOssBucketName'] = request.targetOssBucketName;
  }
  if (!Util.isUnset(request.targetOssObjectName)) {
    body['TargetOssObjectName'] = request.targetOssObjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CompareFaceVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CompareFaceVerifyRequest
 * @return CompareFaceVerifyResponse
 */
async function compareFaceVerify(request: CompareFaceVerifyRequest): CompareFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFaceVerifyWithOptions(request, runtime);
}

model CompareFacesRequest {
  sourceImageType?: string(name='SourceImageType', example='FacePic'),
  sourceImageValue?: string(name='SourceImageValue', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  targetImageType?: string(name='TargetImageType', example='FacePic'),
  targetImageValue?: string(name='TargetImageValue', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
}

model CompareFacesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    confidenceThresholds?: string(name='ConfidenceThresholds', example='{"0.0001":"90.07","0.001":"80.01","0.01":"70.02"}'),
    similarityScore?: float(name='SimilarityScore', example='98.7913'),
  }(name='Data'),
  message?: string(name='Message', example='Error.InternalError'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
}

model CompareFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFacesResponseBody(name='body'),
}

/**
 * @param request CompareFacesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CompareFacesResponse
 */
async function compareFacesWithOptions(request: CompareFacesRequest, runtime: Util.RuntimeOptions): CompareFacesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.sourceImageType)) {
    body['SourceImageType'] = request.sourceImageType;
  }
  if (!Util.isUnset(request.sourceImageValue)) {
    body['SourceImageValue'] = request.sourceImageValue;
  }
  if (!Util.isUnset(request.targetImageType)) {
    body['TargetImageType'] = request.targetImageType;
  }
  if (!Util.isUnset(request.targetImageValue)) {
    body['TargetImageValue'] = request.targetImageValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CompareFaces',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CompareFacesRequest
 * @return CompareFacesResponse
 */
async function compareFaces(request: CompareFacesRequest): CompareFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFacesWithOptions(request, runtime);
}

model ContrastFaceVerifyRequest {
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx'),
  certType?: string(name='CertType', example='IDENTITY_CARD'),
  certifyId?: string(name='CertifyId', example='0bfa7c493f850e5178b9f8613634c9xx'),
  crop?: string(name='Crop'),
  deviceToken?: string(name='DeviceToken', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx'),
  encryptType?: string(name='EncryptType'),
  faceContrastFile?: string(name='FaceContrastFile'),
  faceContrastPicture?: string(name='FaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  ip?: string(name='Ip', example='114.xxx.xxx.xxx'),
  mobile?: string(name='Mobile', example='130xxxxxxxx'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx'),
  ossObjectName?: string(name='OssObjectName', example='verify/xxxxx/xxxxxx.jpeg'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  productCode?: string(name='ProductCode', example='ID_MIN'),
  sceneId?: long(name='SceneId', example='1000000006'),
  userId?: string(name='UserId', example='123456789'),
}

model ContrastFaceVerifyAdvanceRequest {
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx'),
  certType?: string(name='CertType', example='IDENTITY_CARD'),
  certifyId?: string(name='CertifyId', example='0bfa7c493f850e5178b9f8613634c9xx'),
  crop?: string(name='Crop'),
  deviceToken?: string(name='DeviceToken', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx'),
  encryptType?: string(name='EncryptType'),
  faceContrastFileObject?: readable(name='FaceContrastFile'),
  faceContrastPicture?: string(name='FaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  ip?: string(name='Ip', example='114.xxx.xxx.xxx'),
  mobile?: string(name='Mobile', example='130xxxxxxxx'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx'),
  ossObjectName?: string(name='OssObjectName', example='verify/xxxxx/xxxxxx.jpeg'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  productCode?: string(name='ProductCode', example='ID_MIN'),
  sceneId?: long(name='SceneId', example='1000000006'),
  userId?: string(name='UserId', example='123456789'),
}

model ContrastFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    identityInfo?: string(name='IdentityInfo', example='null'),
    materialInfo?: string(name='MaterialInfo', example='{"faceAttack": "F","facialPictureFront": {"qualityScore": 88.3615493774414,"verifyScore": 50.28594166529785}}'),
    passed?: string(name='Passed', example='T'),
    subCode?: string(name='SubCode', example='200'),
  }(name='ResultObject'),
}

model ContrastFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContrastFaceVerifyResponseBody(name='body'),
}

/**
 * @param request ContrastFaceVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ContrastFaceVerifyResponse
 */
async function contrastFaceVerifyWithOptions(request: ContrastFaceVerifyRequest, runtime: Util.RuntimeOptions): ContrastFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.certName)) {
    body['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certNo)) {
    body['CertNo'] = request.certNo;
  }
  if (!Util.isUnset(request.certType)) {
    body['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.certifyId)) {
    body['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.crop)) {
    body['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.deviceToken)) {
    body['DeviceToken'] = request.deviceToken;
  }
  if (!Util.isUnset(request.encryptType)) {
    body['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.faceContrastFile)) {
    body['FaceContrastFile'] = request.faceContrastFile;
  }
  if (!Util.isUnset(request.faceContrastPicture)) {
    body['FaceContrastPicture'] = request.faceContrastPicture;
  }
  if (!Util.isUnset(request.faceContrastPictureUrl)) {
    body['FaceContrastPictureUrl'] = request.faceContrastPictureUrl;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    body['OssBucketName'] = request.ossBucketName;
  }
  if (!Util.isUnset(request.ossObjectName)) {
    body['OssObjectName'] = request.ossObjectName;
  }
  if (!Util.isUnset(request.outerOrderNo)) {
    body['OuterOrderNo'] = request.outerOrderNo;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ContrastFaceVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ContrastFaceVerifyRequest
 * @return ContrastFaceVerifyResponse
 */
async function contrastFaceVerify(request: ContrastFaceVerifyRequest): ContrastFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return contrastFaceVerifyWithOptions(request, runtime);
}

async function contrastFaceVerifyAdvance(request: ContrastFaceVerifyAdvanceRequest, runtime: Util.RuntimeOptions): ContrastFaceVerifyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var contrastFaceVerifyReq = new ContrastFaceVerifyRequest{};
  OpenApiUtil.convert(request, contrastFaceVerifyReq);

  if(!Util.isUnset(request.faceContrastFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.faceContrastFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    contrastFaceVerifyReq.faceContrastFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var contrastFaceVerifyResp = contrastFaceVerifyWithOptions(contrastFaceVerifyReq, runtime);
  return contrastFaceVerifyResp;
}

model CreateAuthKeyRequest {
  authYears?: int32(name='AuthYears', example='1'),
  bizType?: string(name='BizType', example='FACE_TEST'),
  test?: boolean(name='Test', example='false'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
}

model CreateAuthKeyResponseBody = {
  authKey?: string(name='AuthKey', example='auth.1KQMcnLd4m37LN2D0F0WCD-1qtQI$'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateAuthKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthKeyResponseBody(name='body'),
}

/**
 * @param request CreateAuthKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAuthKeyResponse
 */
async function createAuthKeyWithOptions(request: CreateAuthKeyRequest, runtime: Util.RuntimeOptions): CreateAuthKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authYears)) {
    query['AuthYears'] = request.authYears;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.test)) {
    query['Test'] = request.test;
  }
  if (!Util.isUnset(request.userDeviceId)) {
    query['UserDeviceId'] = request.userDeviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAuthKey',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateAuthKeyRequest
 * @return CreateAuthKeyResponse
 */
async function createAuthKey(request: CreateAuthKeyRequest): CreateAuthKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthKeyWithOptions(request, runtime);
}

model CreateVerifySettingRequest {
  bizName?: string(name='BizName', description='This parameter is required.'),
  bizType?: string(name='BizType', description='This parameter is required.', example='UserRegister'),
  guideStep?: boolean(name='GuideStep', example='false'),
  privacyStep?: boolean(name='PrivacyStep', example='true'),
  resultStep?: boolean(name='ResultStep', example='false'),
  solution?: string(name='Solution', description='This parameter is required.', example='RPBasic'),
}

model CreateVerifySettingResponseBody = {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType', example='UserRegister'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  solution?: string(name='Solution', example='RPBasic'),
  stepList?: [ string ](name='StepList'),
}

model CreateVerifySettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVerifySettingResponseBody(name='body'),
}

/**
 * @param request CreateVerifySettingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVerifySettingResponse
 */
async function createVerifySettingWithOptions(request: CreateVerifySettingRequest, runtime: Util.RuntimeOptions): CreateVerifySettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.guideStep)) {
    query['GuideStep'] = request.guideStep;
  }
  if (!Util.isUnset(request.privacyStep)) {
    query['PrivacyStep'] = request.privacyStep;
  }
  if (!Util.isUnset(request.resultStep)) {
    query['ResultStep'] = request.resultStep;
  }
  if (!Util.isUnset(request.solution)) {
    query['Solution'] = request.solution;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVerifySetting',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateVerifySettingRequest
 * @return CreateVerifySettingResponse
 */
async function createVerifySetting(request: CreateVerifySettingRequest): CreateVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySettingWithOptions(request, runtime);
}

model CredentialVerifyRequest {
  certNum?: string(name='CertNum', example='4601*****'),
  credName?: string(name='CredName', example='0104'),
  credType?: string(name='CredType', example='01'),
  identifyNum?: string(name='IdentifyNum', example='429001********8211'),
  imageContext?: string(name='ImageContext', example='base64'),
  imageUrl?: string(name='ImageUrl', example='http://marry.momocdn.com/avatar/3B/B6/3BB6527E-7467-926E-1048-B43614F20CC420230803_L.jpg'),
  isCheck?: string(name='IsCheck', example='0'),
  isOCR?: string(name='IsOCR', example='1'),
  merchantId?: string(name='MerchantId'),
  userName?: string(name='UserName'),
}

model CredentialVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    materialInfo?: string(name='MaterialInfo'),
    ocrInfo?: string(name='OcrInfo'),
    result?: string(name='Result', example='1'),
    riskScore?: map[string]string(name='RiskScore'),
    riskTag?: string(name='RiskTag', example='PS,SCREEN_PHOTO'),
    verifyDetail?: string(name='VerifyDetail', example='**'),
    verifyResult?: string(name='VerifyResult', example='*'),
  }(name='ResultObject'),
}

model CredentialVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CredentialVerifyResponseBody(name='body'),
}

/**
 * @summary 凭证核验
 *
 * @param request CredentialVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CredentialVerifyResponse
 */
async function credentialVerifyWithOptions(request: CredentialVerifyRequest, runtime: Util.RuntimeOptions): CredentialVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certNum)) {
    query['CertNum'] = request.certNum;
  }
  if (!Util.isUnset(request.credName)) {
    query['CredName'] = request.credName;
  }
  if (!Util.isUnset(request.credType)) {
    query['CredType'] = request.credType;
  }
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.imageUrl)) {
    query['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.isCheck)) {
    query['IsCheck'] = request.isCheck;
  }
  if (!Util.isUnset(request.isOCR)) {
    query['IsOCR'] = request.isOCR;
  }
  if (!Util.isUnset(request.merchantId)) {
    query['MerchantId'] = request.merchantId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageContext)) {
    body['ImageContext'] = request.imageContext;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CredentialVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 凭证核验
 *
 * @param request CredentialVerifyRequest
 * @return CredentialVerifyResponse
 */
async function credentialVerify(request: CredentialVerifyRequest): CredentialVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return credentialVerifyWithOptions(request, runtime);
}

model DeepfakeDetectRequest {
  faceBase64?: string(name='FaceBase64', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceInputType?: string(name='FaceInputType', example='IMAGE'),
  faceUrl?: string(name='FaceUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c******'),
}

model DeepfakeDetectResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  resultObject?: {
    result?: string(name='Result', example='1'),
    riskScore?: map[string]string(name='RiskScore'),
    riskTag?: string(name='RiskTag', example='SuspectDeepForgery,SuspectWarterMark'),
  }(name='ResultObject'),
}

model DeepfakeDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeDetectResponseBody(name='body'),
}

/**
 * @summary 人脸凭证核验服务
 *
 * @param request DeepfakeDetectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeepfakeDetectResponse
 */
async function deepfakeDetectWithOptions(request: DeepfakeDetectRequest, runtime: Util.RuntimeOptions): DeepfakeDetectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.faceInputType)) {
    query['FaceInputType'] = request.faceInputType;
  }
  if (!Util.isUnset(request.faceUrl)) {
    query['FaceUrl'] = request.faceUrl;
  }
  if (!Util.isUnset(request.outerOrderNo)) {
    query['OuterOrderNo'] = request.outerOrderNo;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.faceBase64)) {
    body['FaceBase64'] = request.faceBase64;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeepfakeDetect',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸凭证核验服务
 *
 * @param request DeepfakeDetectRequest
 * @return DeepfakeDetectResponse
 */
async function deepfakeDetect(request: DeepfakeDetectRequest): DeepfakeDetectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deepfakeDetectWithOptions(request, runtime);
}

model DescribeDeviceInfoRequest {
  bizType?: string(name='BizType', example='FACE_TEST'),
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceId?: string(name='DeviceId', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
  expiredEndDay?: string(name='ExpiredEndDay', example='20200330'),
  expiredStartDay?: string(name='ExpiredStartDay', example='20190401'),
  pageSize?: int32(name='PageSize', example='20'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
}

model DescribeDeviceInfoResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceInfoList?: {
    deviceInfo?: [ 
    {
      beginDay?: string(name='BeginDay', example='20180101'),
      bizType?: string(name='BizType', example='FACE_TEST'),
      deviceId?: string(name='DeviceId', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
      expiredDay?: string(name='ExpiredDay', example='20180101'),
      userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
    }
  ](name='DeviceInfo')
  }(name='DeviceInfoList'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceInfoResponseBody(name='body'),
}

/**
 * @param request DescribeDeviceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDeviceInfoResponse
 */
async function describeDeviceInfoWithOptions(request: DescribeDeviceInfoRequest, runtime: Util.RuntimeOptions): DescribeDeviceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.expiredEndDay)) {
    query['ExpiredEndDay'] = request.expiredEndDay;
  }
  if (!Util.isUnset(request.expiredStartDay)) {
    query['ExpiredStartDay'] = request.expiredStartDay;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.userDeviceId)) {
    query['UserDeviceId'] = request.userDeviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeviceInfo',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeDeviceInfoRequest
 * @return DescribeDeviceInfoResponse
 */
async function describeDeviceInfo(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceInfoWithOptions(request, runtime);
}

model DescribeFaceVerifyRequest {
  certifyId?: string(name='CertifyId', example='91707dc296d469ad38e4c5efa6a0f24b'),
  pictureReturnType?: string(name='PictureReturnType', example='JPG'),
  sceneId?: long(name='SceneId', example='1000000006'),
}

model DescribeFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    deviceRisk?: string(name='DeviceRisk'),
    deviceToken?: string(name='DeviceToken', example='McozS1ZWRcRZStlERcZZo_QOytx5jcgZoZJEoRLOxxxxxxx'),
    identityInfo?: string(name='IdentityInfo', example='null'),
    materialInfo?: string(name='MaterialInfo', example='{"faceAttack": "F","facialPictureFront": {"qualityScore": 88.3615493774414,"pictureUrl": "https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg","ossBucketName": "cn-shanghai-aliyun-cloudauth-1260051251634779","ossObjectName": "verify/1260051251634779/6ba7bcfccf33f56cdb44ed086f36ce3e0.jpeg"}}'),
    passed?: string(name='Passed', example='T'),
    subCode?: string(name='SubCode', example='200'),
    success?: string(name='Success'),
    userInfo?: string(name='UserInfo'),
  }(name='ResultObject'),
}

model DescribeFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaceVerifyResponseBody(name='body'),
}

/**
 * @param request DescribeFaceVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFaceVerifyResponse
 */
async function describeFaceVerifyWithOptions(request: DescribeFaceVerifyRequest, runtime: Util.RuntimeOptions): DescribeFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certifyId)) {
    query['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.pictureReturnType)) {
    query['PictureReturnType'] = request.pictureReturnType;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFaceVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeFaceVerifyRequest
 * @return DescribeFaceVerifyResponse
 */
async function describeFaceVerify(request: DescribeFaceVerifyRequest): DescribeFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceVerifyWithOptions(request, runtime);
}

model DescribeOssUploadTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket', example='cloudauth-zhangjiakou-external'),
    endPoint?: string(name='EndPoint', example='https://oss-cn-zhangjiakou.aliyuncs.com'),
    expired?: long(name='Expired', example='1582636610000'),
    key?: string(name='Key', example='STS.NU8rUBj****'),
    path?: string(name='Path', example='prod/RdNLC@Ox2n-1s7NMt'),
    secret?: string(name='Secret', example='FwmnyoqT8dHj7nJLuM67T****'),
    token?: string(name='Token', example='uWia500nTS5knZaDzq4/KqpvhcLnO****'),
  }(name='OssUploadToken'),
  requestId?: string(name='RequestId', example='2FA2C773-47DB-4156-B1EE-5B047321A939'),
}

model DescribeOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssUploadTokenResponseBody(name='body'),
}

/**
 * @param request DescribeOssUploadTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOssUploadTokenResponse
 */
async function describeOssUploadTokenWithOptions(runtime: Util.RuntimeOptions): DescribeOssUploadTokenResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeOssUploadToken',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @return DescribeOssUploadTokenResponse
 */
async function describeOssUploadToken(): DescribeOssUploadTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssUploadTokenWithOptions(runtime);
}

model DescribePageFaceVerifyDataRequest {
  currentPage?: long(name='CurrentPage', example='1'),
  endDate?: string(name='EndDate', example='2023-04-30'),
  pageSize?: long(name='PageSize', example='10'),
  productCode?: string(name='ProductCode', example='ID_PLUS'),
  sceneId?: long(name='SceneId', example='36**01'),
  startDate?: string(name='StartDate', example='2023-04-10'),
}

model DescribePageFaceVerifyDataResponseBody = {
  code?: string(name='Code', example='200'),
  currentPage?: string(name='CurrentPage', example='1'),
  items?: [ 
    {
      date?: string(name='Date', example='2024-03-24T00:00:00.000Z'),
      productCode?: string(name='ProductCode', example='ID_PLUS'),
      sceneId?: string(name='SceneId', example='20**40'),
      sceneName?: string(name='SceneName'),
      successCount?: string(name='SuccessCount', example='1'),
      totalCount?: string(name='TotalCount', example='19'),
    }
  ](name='Items'),
  message?: string(name='Message', example='OK'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-A***B-A3DC0DE3C83E'),
  success?: string(name='Success', example='true'),
  totalCount?: string(name='TotalCount', example='100'),
  totalPage?: string(name='TotalPage', example='5'),
}

model DescribePageFaceVerifyDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePageFaceVerifyDataResponseBody(name='body'),
}

/**
 * @summary Open API新增金融级数据统计API
 *
 * @param request DescribePageFaceVerifyDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePageFaceVerifyDataResponse
 */
async function describePageFaceVerifyDataWithOptions(request: DescribePageFaceVerifyDataRequest, runtime: Util.RuntimeOptions): DescribePageFaceVerifyDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePageFaceVerifyData',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Open API新增金融级数据统计API
 *
 * @param request DescribePageFaceVerifyDataRequest
 * @return DescribePageFaceVerifyDataResponse
 */
async function describePageFaceVerifyData(request: DescribePageFaceVerifyDataRequest): DescribePageFaceVerifyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePageFaceVerifyDataWithOptions(request, runtime);
}

model DescribeSmartStatisticsPageListRequest {
  currentPage?: string(name='CurrentPage', description='This parameter is required.', example='1'),
  endDate?: string(name='EndDate', description='This parameter is required.', example='2022-11-16 23:59:59 +0800'),
  pageSize?: string(name='PageSize', description='This parameter is required.', example='10'),
  sceneId?: string(name='SceneId', description='This parameter is required.', example='36**01'),
  serviceCode?: string(name='ServiceCode', example='cloudauthst'),
  startDate?: string(name='StartDate', description='This parameter is required.', example='2023-11-01 00:00:00 +0800'),
}

model DescribeSmartStatisticsPageListResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      date?: string(name='Date', example='11/8'),
      passRate?: string(name='PassRate', example='25'),
      productCode?: string(name='ProductCode', example='SMART_VERIFY'),
      sceneId?: long(name='SceneId', example='20**40'),
      sceneName?: string(name='SceneName'),
      successCount?: int32(name='SuccessCount', example='1'),
      totalCount?: int32(name='TotalCount', example='4'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='96943***4E39F805'),
  totalCount?: int32(name='TotalCount', example='29'),
  totalPage?: int32(name='TotalPage', example='3'),
}

model DescribeSmartStatisticsPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartStatisticsPageListResponseBody(name='body'),
}

/**
 * @param request DescribeSmartStatisticsPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSmartStatisticsPageListResponse
 */
async function describeSmartStatisticsPageListWithOptions(request: DescribeSmartStatisticsPageListRequest, runtime: Util.RuntimeOptions): DescribeSmartStatisticsPageListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.serviceCode)) {
    query['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartStatisticsPageList',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeSmartStatisticsPageListRequest
 * @return DescribeSmartStatisticsPageListResponse
 */
async function describeSmartStatisticsPageList(request: DescribeSmartStatisticsPageListRequest): DescribeSmartStatisticsPageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartStatisticsPageListWithOptions(request, runtime);
}

model DescribeVerifyResultRequest {
  bizId?: string(name='BizId', description='This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125b****'),
  bizType?: string(name='BizType', description='This parameter is required.', example='FVBioOnlyTest'),
}

model DescribeVerifyResultResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore', example='97'),
  faceComparisonScore?: float(name='FaceComparisonScore', example='97'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore', example='97'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-global-example.jpg'),
    faceImageUrl?: string(name='FaceImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-image-example.jpg'),
    faceMask?: boolean(name='FaceMask', example='false'),
    faceQuality?: string(name='FaceQuality', example='NORMAL'),
    idCardInfo?: {
      address?: string(name='Address'),
      authority?: string(name='Authority'),
      backImageUrl?: string(name='BackImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
      birth?: string(name='Birth', example='19900101'),
      endDate?: string(name='EndDate', example='20201101'),
      frontImageUrl?: string(name='FrontImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
      number?: string(name='Number', example='02343218901123****'),
      startDate?: string(name='StartDate', example='20201101'),
    }(name='IdCardInfo'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber', example='02343218901123****'),
    videoUrls?: [ string ](name='VideoUrls'),
  }(name='Material'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyStatus?: int32(name='VerifyStatus', example='1'),
}

model DescribeVerifyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifyResultResponseBody(name='body'),
}

/**
 * @param request DescribeVerifyResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVerifyResultResponse
 */
async function describeVerifyResultWithOptions(request: DescribeVerifyResultRequest, runtime: Util.RuntimeOptions): DescribeVerifyResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVerifyResult',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeVerifyResultRequest
 * @return DescribeVerifyResultResponse
 */
async function describeVerifyResult(request: DescribeVerifyResultRequest): DescribeVerifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyResultWithOptions(request, runtime);
}

model DescribeVerifySDKRequest {
  taskId?: string(name='TaskId', description='This parameter is required.', example='1KQMcnLd4m37LN2D0F0WCD'),
}

model DescribeVerifySDKResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  sdkUrl?: string(name='SdkUrl', example='https://www.xxx.com'),
}

model DescribeVerifySDKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifySDKResponseBody(name='body'),
}

/**
 * @param request DescribeVerifySDKRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVerifySDKResponse
 */
async function describeVerifySDKWithOptions(request: DescribeVerifySDKRequest, runtime: Util.RuntimeOptions): DescribeVerifySDKResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVerifySDK',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeVerifySDKRequest
 * @return DescribeVerifySDKResponse
 */
async function describeVerifySDK(request: DescribeVerifySDKRequest): DescribeVerifySDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySDKWithOptions(request, runtime);
}

model DescribeVerifyTokenRequest {
  bizId?: string(name='BizId', description='This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125be683'),
  bizType?: string(name='BizType', description='This parameter is required.', example='RPBasicTest'),
  callbackSeed?: string(name='CallbackSeed', example='-'),
  callbackUrl?: string(name='CallbackUrl', example='-'),
  faceRetainedImageUrl?: string(name='FaceRetainedImageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  failedRedirectUrl?: string(name='FailedRedirectUrl', example='-'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  idCardNumber?: string(name='IdCardNumber', example='330100xxxxxxxxxxxx'),
  name?: string(name='Name'),
  passedRedirectUrl?: string(name='PassedRedirectUrl', example='-'),
  userId?: string(name='UserId', example='user111'),
  userIp?: string(name='UserIp', example='192.168.***.***'),
  userPhoneNumber?: string(name='UserPhoneNumber', example='187********'),
  userRegistTime?: long(name='UserRegistTime', example='1577808000000'),
}

model DescribeVerifyTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket', example='cloudauth-zhangjiakou-external'),
    endPoint?: string(name='EndPoint', example='https://oss-cn-zhangjiakou.aliyuncs.com'),
    expired?: long(name='Expired', example='1582636610000'),
    key?: string(name='Key', example='STS.NU8rUBj****'),
    path?: string(name='Path', example='prod/RdNLC@Ox2n-1s7NMt'),
    secret?: string(name='Secret', example='FwmnyoqT8dHj7nJLuM67T****'),
    token?: string(name='Token', example='uWia500nTS5knZaDzq4/KqpvhcLnO****'),
  }(name='OssUploadToken'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyPageUrl?: string(name='VerifyPageUrl', example='http%3A%2F%2Fjiangsu.china.com.cn%2Fuploadfile%2F2015%2F0114%2F1421221304095989.jpg'),
  verifyToken?: string(name='VerifyToken', example='c302c0797679457685410ee51a5ba375'),
}

model DescribeVerifyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVerifyTokenResponseBody(name='body'),
}

/**
 * @param request DescribeVerifyTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVerifyTokenResponse
 */
async function describeVerifyTokenWithOptions(request: DescribeVerifyTokenRequest, runtime: Util.RuntimeOptions): DescribeVerifyTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.callbackSeed)) {
    query['CallbackSeed'] = request.callbackSeed;
  }
  if (!Util.isUnset(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.faceRetainedImageUrl)) {
    query['FaceRetainedImageUrl'] = request.faceRetainedImageUrl;
  }
  if (!Util.isUnset(request.failedRedirectUrl)) {
    query['FailedRedirectUrl'] = request.failedRedirectUrl;
  }
  if (!Util.isUnset(request.idCardBackImageUrl)) {
    query['IdCardBackImageUrl'] = request.idCardBackImageUrl;
  }
  if (!Util.isUnset(request.idCardFrontImageUrl)) {
    query['IdCardFrontImageUrl'] = request.idCardFrontImageUrl;
  }
  if (!Util.isUnset(request.idCardNumber)) {
    query['IdCardNumber'] = request.idCardNumber;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.passedRedirectUrl)) {
    query['PassedRedirectUrl'] = request.passedRedirectUrl;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userIp)) {
    query['UserIp'] = request.userIp;
  }
  if (!Util.isUnset(request.userPhoneNumber)) {
    query['UserPhoneNumber'] = request.userPhoneNumber;
  }
  if (!Util.isUnset(request.userRegistTime)) {
    query['UserRegistTime'] = request.userRegistTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVerifyToken',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeVerifyTokenRequest
 * @return DescribeVerifyTokenResponse
 */
async function describeVerifyToken(request: DescribeVerifyTokenRequest): DescribeVerifyTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyTokenWithOptions(request, runtime);
}

model DetectFaceAttributesRequest {
  bizType?: string(name='BizType', example='RPBasicTest'),
  materialValue?: string(name='MaterialValue', description='This parameter is required.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg'),
}

model DetectFaceAttributesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    faceInfos?: {
      faceAttributesDetectInfo?: [ 
      {
        faceAttributes?: {
          blur?: float(name='Blur', example='0.1419367790222168'),
          facequal?: float(name='Facequal', example='60'),
          facetype?: string(name='Facetype', example='Face'),
          glasses?: string(name='Glasses', example='None'),
          headpose?: {
            pitchAngle?: float(name='PitchAngle', example='-1.5683923959732056'),
            rollAngle?: float(name='RollAngle', example='7.163370132446289'),
            yawAngle?: float(name='YawAngle', example='-6.925303936004639'),
          }(name='Headpose'),
          integrity?: int32(name='Integrity', example='70'),
          respirator?: string(name='Respirator', example='Wear'),
          smiling?: {
            threshold?: float(name='Threshold', example='95'),
            value?: float(name='Value', example='97'),
          }(name='Smiling'),
        }(name='FaceAttributes'),
        faceRect?: {
          height?: int32(name='Height', example='473'),
          left?: int32(name='Left', example='354'),
          top?: int32(name='Top', example='453'),
          width?: int32(name='Width', example='473'),
        }(name='FaceRect'),
      }
    ](name='FaceAttributesDetectInfo')
    }(name='FaceInfos'),
    imgHeight?: int32(name='ImgHeight', example='1920'),
    imgWidth?: int32(name='ImgWidth', example='1080'),
  }(name='Data'),
  message?: string(name='Message', example='Error.InternalError'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
}

model DetectFaceAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectFaceAttributesResponseBody(name='body'),
}

/**
 * @param request DetectFaceAttributesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectFaceAttributesResponse
 */
async function detectFaceAttributesWithOptions(request: DetectFaceAttributesRequest, runtime: Util.RuntimeOptions): DetectFaceAttributesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.materialValue)) {
    body['MaterialValue'] = request.materialValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetectFaceAttributes',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectFaceAttributesRequest
 * @return DetectFaceAttributesResponse
 */
async function detectFaceAttributes(request: DetectFaceAttributesRequest): DetectFaceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectFaceAttributesWithOptions(request, runtime);
}

model Id2MetaVerifyRequest {
  identifyNum?: string(name='IdentifyNum', example='412722198610274919'),
  paramType?: string(name='ParamType', example='normal'),
  userName?: string(name='UserName'),
}

model Id2MetaVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D6163397-15C5-419C-9ACC-B7C83E0B4C10'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
  }(name='ResultObject'),
}

model Id2MetaVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Id2MetaVerifyResponseBody(name='body'),
}

/**
 * @summary 身份二要素接口
 *
 * @param request Id2MetaVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Id2MetaVerifyResponse
 */
async function id2MetaVerifyWithOptions(request: Id2MetaVerifyRequest, runtime: Util.RuntimeOptions): Id2MetaVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Id2MetaVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 身份二要素接口
 *
 * @param request Id2MetaVerifyRequest
 * @return Id2MetaVerifyResponse
 */
async function id2MetaVerify(request: Id2MetaVerifyRequest): Id2MetaVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return id2MetaVerifyWithOptions(request, runtime);
}

model InitFaceVerifyRequest {
  authId?: string(name='AuthId'),
  birthday?: string(name='Birthday'),
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx'),
  certType?: string(name='CertType', example='IDENTITY_CARD'),
  certifyId?: string(name='CertifyId', example='0bfa7c493f850e5178b9f8613634c9xx'),
  certifyUrlStyle?: string(name='CertifyUrlStyle'),
  certifyUrlType?: string(name='CertifyUrlType'),
  crop?: string(name='Crop'),
  encryptType?: string(name='EncryptType'),
  faceContrastPicture?: string(name='FaceContrastPicture', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl', example='https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg'),
  faceGuardOutput?: string(name='FaceGuardOutput'),
  ip?: string(name='Ip', example='114.xxx.xxx.xxx'),
  metaInfo?: string(name='MetaInfo', example='{"zimVer":"3.0.0","appVersion": "1","bioMetaInfo": "4.1.0:11501568,0","appName": "com.aliyun.antcloudauth","deviceType": "ios","osVersion": "iOS 10.3.2","apdidToken": "","deviceModel": "iPhone9,1"}'),
  mobile?: string(name='Mobile', example='130xxxxxxxx'),
  mode?: string(name='Mode'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName', example='cn-shanghai-aliyun-cloudauth-xxxxx'),
  ossObjectName?: string(name='OssObjectName', example='verify/xxxxx/xxxxxx.jpeg'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c353888'),
  procedurePriority?: string(name='ProcedurePriority'),
  productCode?: string(name='ProductCode', example='ID_PRO'),
  rarelyCharacters?: string(name='RarelyCharacters'),
  readImg?: string(name='ReadImg'),
  returnUrl?: string(name='ReturnUrl', example='www.aliyun.com'),
  sceneId?: long(name='SceneId', example='1000000006'),
  suitableType?: string(name='SuitableType'),
  uiCustomUrl?: string(name='UiCustomUrl'),
  userId?: string(name='UserId', example='123456789'),
  validityDate?: string(name='ValidityDate'),
  voluntaryCustomizedContent?: string(name='VoluntaryCustomizedContent'),
}

model InitFaceVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    certifyId?: string(name='CertifyId', example='91707dc296d469ad38e4c5efa6a0f24b'),
    certifyUrl?: string(name='CertifyUrl'),
  }(name='ResultObject'),
}

model InitFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitFaceVerifyResponseBody(name='body'),
}

/**
 * @param request InitFaceVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitFaceVerifyResponse
 */
async function initFaceVerifyWithOptions(request: InitFaceVerifyRequest, runtime: Util.RuntimeOptions): InitFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.birthday)) {
    query['Birthday'] = request.birthday;
  }
  if (!Util.isUnset(request.callbackToken)) {
    query['CallbackToken'] = request.callbackToken;
  }
  if (!Util.isUnset(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certNo)) {
    query['CertNo'] = request.certNo;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.certifyId)) {
    query['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.certifyUrlStyle)) {
    query['CertifyUrlStyle'] = request.certifyUrlStyle;
  }
  if (!Util.isUnset(request.certifyUrlType)) {
    query['CertifyUrlType'] = request.certifyUrlType;
  }
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.faceContrastPictureUrl)) {
    query['FaceContrastPictureUrl'] = request.faceContrastPictureUrl;
  }
  if (!Util.isUnset(request.faceGuardOutput)) {
    query['FaceGuardOutput'] = request.faceGuardOutput;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.metaInfo)) {
    query['MetaInfo'] = request.metaInfo;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    query['OssBucketName'] = request.ossBucketName;
  }
  if (!Util.isUnset(request.ossObjectName)) {
    query['OssObjectName'] = request.ossObjectName;
  }
  if (!Util.isUnset(request.outerOrderNo)) {
    query['OuterOrderNo'] = request.outerOrderNo;
  }
  if (!Util.isUnset(request.procedurePriority)) {
    query['ProcedurePriority'] = request.procedurePriority;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.rarelyCharacters)) {
    query['RarelyCharacters'] = request.rarelyCharacters;
  }
  if (!Util.isUnset(request.readImg)) {
    query['ReadImg'] = request.readImg;
  }
  if (!Util.isUnset(request.returnUrl)) {
    query['ReturnUrl'] = request.returnUrl;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.suitableType)) {
    query['SuitableType'] = request.suitableType;
  }
  if (!Util.isUnset(request.uiCustomUrl)) {
    query['UiCustomUrl'] = request.uiCustomUrl;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.validityDate)) {
    query['ValidityDate'] = request.validityDate;
  }
  if (!Util.isUnset(request.voluntaryCustomizedContent)) {
    query['VoluntaryCustomizedContent'] = request.voluntaryCustomizedContent;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.authId)) {
    body['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.crop)) {
    body['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.faceContrastPicture)) {
    body['FaceContrastPicture'] = request.faceContrastPicture;
  }
  if (!Util.isUnset(request.model)) {
    body['Model'] = request.model;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitFaceVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request InitFaceVerifyRequest
 * @return InitFaceVerifyResponse
 */
async function initFaceVerify(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return initFaceVerifyWithOptions(request, runtime);
}

model LivenessFaceVerifyRequest {
  certifyId?: string(name='CertifyId'),
  crop?: string(name='Crop'),
  deviceToken?: string(name='DeviceToken'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  ip?: string(name='Ip'),
  mobile?: string(name='Mobile'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  sceneId?: long(name='SceneId'),
  userId?: string(name='UserId'),
}

model LivenessFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    materialInfo?: string(name='MaterialInfo'),
    passed?: string(name='Passed'),
    subCode?: string(name='SubCode'),
  }(name='ResultObject'),
}

model LivenessFaceVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LivenessFaceVerifyResponseBody(name='body'),
}

/**
 * @param request LivenessFaceVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return LivenessFaceVerifyResponse
 */
async function livenessFaceVerifyWithOptions(request: LivenessFaceVerifyRequest, runtime: Util.RuntimeOptions): LivenessFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.certifyId)) {
    body['CertifyId'] = request.certifyId;
  }
  if (!Util.isUnset(request.crop)) {
    body['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.deviceToken)) {
    body['DeviceToken'] = request.deviceToken;
  }
  if (!Util.isUnset(request.faceContrastPicture)) {
    body['FaceContrastPicture'] = request.faceContrastPicture;
  }
  if (!Util.isUnset(request.faceContrastPictureUrl)) {
    body['FaceContrastPictureUrl'] = request.faceContrastPictureUrl;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    body['OssBucketName'] = request.ossBucketName;
  }
  if (!Util.isUnset(request.ossObjectName)) {
    body['OssObjectName'] = request.ossObjectName;
  }
  if (!Util.isUnset(request.outerOrderNo)) {
    body['OuterOrderNo'] = request.outerOrderNo;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LivenessFaceVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request LivenessFaceVerifyRequest
 * @return LivenessFaceVerifyResponse
 */
async function livenessFaceVerify(request: LivenessFaceVerifyRequest): LivenessFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return livenessFaceVerifyWithOptions(request, runtime);
}

model Mobile3MetaDetailVerifyRequest {
  identifyNum?: string(name='IdentifyNum', example='520181199902104631'),
  mobile?: string(name='Mobile', example='150000xxxx'),
  paramType?: string(name='ParamType', example='normal'),
  userName?: string(name='UserName'),
}

model Mobile3MetaDetailVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    subCode?: string(name='SubCode', example='101'),
  }(name='ResultObject'),
}

model Mobile3MetaDetailVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaDetailVerifyResponseBody(name='body'),
}

/**
 * @summary 手机三要素详版接口
 *
 * @param request Mobile3MetaDetailVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Mobile3MetaDetailVerifyResponse
 */
async function mobile3MetaDetailVerifyWithOptions(request: Mobile3MetaDetailVerifyRequest, runtime: Util.RuntimeOptions): Mobile3MetaDetailVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Mobile3MetaDetailVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 手机三要素详版接口
 *
 * @param request Mobile3MetaDetailVerifyRequest
 * @return Mobile3MetaDetailVerifyResponse
 */
async function mobile3MetaDetailVerify(request: Mobile3MetaDetailVerifyRequest): Mobile3MetaDetailVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobile3MetaDetailVerifyWithOptions(request, runtime);
}

model Mobile3MetaSimpleVerifyRequest {
  identifyNum?: string(name='IdentifyNum', example='429001********8211'),
  mobile?: string(name='Mobile', example='150000****'),
  paramType?: string(name='ParamType', example='normal'),
  userName?: string(name='UserName'),
}

model Mobile3MetaSimpleVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
  }(name='ResultObject'),
}

model Mobile3MetaSimpleVerifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Mobile3MetaSimpleVerifyResponseBody(name='body'),
}

/**
 * @summary 手机号三要素简版接口
 *
 * @param request Mobile3MetaSimpleVerifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Mobile3MetaSimpleVerifyResponse
 */
async function mobile3MetaSimpleVerifyWithOptions(request: Mobile3MetaSimpleVerifyRequest, runtime: Util.RuntimeOptions): Mobile3MetaSimpleVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifyNum)) {
    query['IdentifyNum'] = request.identifyNum;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Mobile3MetaSimpleVerify',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 手机号三要素简版接口
 *
 * @param request Mobile3MetaSimpleVerifyRequest
 * @return Mobile3MetaSimpleVerifyResponse
 */
async function mobile3MetaSimpleVerify(request: Mobile3MetaSimpleVerifyRequest): Mobile3MetaSimpleVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobile3MetaSimpleVerifyWithOptions(request, runtime);
}

model MobileDetectRequest {
  mobiles?: string(name='Mobiles', example='138********,156********'),
  paramType?: string(name='ParamType', example='normal'),
}

model MobileDetectResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='969434DF-926B-4997-9881-4DE94E39F805'),
  resultObject?: {
    chargeCount?: string(name='ChargeCount', example='2'),
    items?: [ 
      {
        area?: string(name='Area'),
        bizCode?: string(name='BizCode', example='1'),
        ispName?: string(name='IspName', example='CMCC'),
        mobile?: string(name='Mobile', example='131********'),
        subCode?: string(name='SubCode', example='101'),
      }
    ](name='Items'),
  }(name='ResultObject'),
}

model MobileDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileDetectResponseBody(name='body'),
}

/**
 * @summary 号码检测
 *
 * @param request MobileDetectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MobileDetectResponse
 */
async function mobileDetectWithOptions(request: MobileDetectRequest, runtime: Util.RuntimeOptions): MobileDetectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mobiles)) {
    query['Mobiles'] = request.mobiles;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MobileDetect',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 号码检测
 *
 * @param request MobileDetectRequest
 * @return MobileDetectResponse
 */
async function mobileDetect(request: MobileDetectRequest): MobileDetectResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobileDetectWithOptions(request, runtime);
}

model MobileOnlineStatusRequest {
  mobile?: string(name='Mobile', example='130********'),
  paramType?: string(name='ParamType', example='normal'),
}

model MobileOnlineStatusResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B506328A-D84B-4750-82C7-6A207C585CF1'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    subCode?: string(name='SubCode', example='101'),
  }(name='ResultObject'),
}

model MobileOnlineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileOnlineStatusResponseBody(name='body'),
}

/**
 * @summary 查询手机号在网状态
 *
 * @param request MobileOnlineStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MobileOnlineStatusResponse
 */
async function mobileOnlineStatusWithOptions(request: MobileOnlineStatusRequest, runtime: Util.RuntimeOptions): MobileOnlineStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MobileOnlineStatus',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询手机号在网状态
 *
 * @param request MobileOnlineStatusRequest
 * @return MobileOnlineStatusResponse
 */
async function mobileOnlineStatus(request: MobileOnlineStatusRequest): MobileOnlineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobileOnlineStatusWithOptions(request, runtime);
}

model MobileOnlineTimeRequest {
  mobile?: string(name='Mobile', example='130********'),
  paramType?: string(name='ParamType', example='normal'),
}

model MobileOnlineTimeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B506328A-D84B-4750-82C7-6A207C585CF1'),
  resultObject?: {
    bizCode?: string(name='BizCode', example='1'),
    ispName?: string(name='IspName', example='CMCC'),
    timeCode?: string(name='TimeCode', example='5'),
  }(name='ResultObject'),
}

model MobileOnlineTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileOnlineTimeResponseBody(name='body'),
}

/**
 * @summary 查询手机号在网时长
 *
 * @param request MobileOnlineTimeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MobileOnlineTimeResponse
 */
async function mobileOnlineTimeWithOptions(request: MobileOnlineTimeRequest, runtime: Util.RuntimeOptions): MobileOnlineTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MobileOnlineTime',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询手机号在网时长
 *
 * @param request MobileOnlineTimeRequest
 * @return MobileOnlineTimeResponse
 */
async function mobileOnlineTime(request: MobileOnlineTimeRequest): MobileOnlineTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return mobileOnlineTimeWithOptions(request, runtime);
}

model ModifyDeviceInfoRequest {
  bizType?: string(name='BizType', example='FACE_TEST'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
  duration?: string(name='Duration', example='1'),
  expiredDay?: string(name='ExpiredDay', example='20190401'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
}

model ModifyDeviceInfoResponseBody = {
  beginDay?: string(name='BeginDay', example='20190401'),
  bizType?: string(name='BizType', example='FACE_TEST'),
  deviceId?: string(name='DeviceId', example='wd.6ziUffspAeW5FVYbaqmexR-1qwNjM'),
  expiredDay?: string(name='ExpiredDay', example='20200330'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  userDeviceId?: string(name='UserDeviceId', example='3iJ1AY$oHcu7mC69'),
}

model ModifyDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceInfoResponseBody(name='body'),
}

/**
 * @param request ModifyDeviceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDeviceInfoResponse
 */
async function modifyDeviceInfoWithOptions(request: ModifyDeviceInfoRequest, runtime: Util.RuntimeOptions): ModifyDeviceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.expiredDay)) {
    query['ExpiredDay'] = request.expiredDay;
  }
  if (!Util.isUnset(request.userDeviceId)) {
    query['UserDeviceId'] = request.userDeviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDeviceInfo',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ModifyDeviceInfoRequest
 * @return ModifyDeviceInfoResponse
 */
async function modifyDeviceInfo(request: ModifyDeviceInfoRequest): ModifyDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceInfoWithOptions(request, runtime);
}

model VerifyMaterialRequest {
  bizId?: string(name='BizId', description='This parameter is required.', example='39ecf51e-2f81-4dc5-90ee-ff86125b****'),
  bizType?: string(name='BizType', description='This parameter is required.', example='RPMinTest'),
  faceImageUrl?: string(name='FaceImageUrl', description='This parameter is required.', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
  idCardNumber?: string(name='IdCardNumber', description='This parameter is required.', example='02343218901123****'),
  name?: string(name='Name', description='This parameter is required.'),
  userId?: string(name='UserId', example='54sdj'),
}

model VerifyMaterialResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore', example='97'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore', example='97'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/face-global-example.jpg'),
    faceImageUrl?: string(name='FaceImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example.jpg'),
    faceMask?: string(name='FaceMask', example='false'),
    faceQuality?: string(name='FaceQuality', example='NORMAL'),
    idCardInfo?: {
      address?: string(name='Address'),
      authority?: string(name='Authority'),
      backImageUrl?: string(name='BackImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example3.jpg'),
      birth?: string(name='Birth', example='19900101'),
      endDate?: string(name='EndDate', example='20201101'),
      frontImageUrl?: string(name='FrontImageUrl', example='http://image-demo.img-cn-hangzhou.aliyuncs.com/example2.jpg'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
      number?: string(name='Number', example='02343218901123****'),
      startDate?: string(name='StartDate', example='20201101'),
    }(name='IdCardInfo'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber', example='02343218901123****'),
  }(name='Material'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  verifyStatus?: int32(name='VerifyStatus', example='1'),
  verifyToken?: string(name='VerifyToken', example='c302c0797679457685410ee51a5ba375'),
}

model VerifyMaterialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyMaterialResponseBody(name='body'),
}

/**
 * @param request VerifyMaterialRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return VerifyMaterialResponse
 */
async function verifyMaterialWithOptions(request: VerifyMaterialRequest, runtime: Util.RuntimeOptions): VerifyMaterialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.faceImageUrl)) {
    query['FaceImageUrl'] = request.faceImageUrl;
  }
  if (!Util.isUnset(request.idCardBackImageUrl)) {
    query['IdCardBackImageUrl'] = request.idCardBackImageUrl;
  }
  if (!Util.isUnset(request.idCardFrontImageUrl)) {
    query['IdCardFrontImageUrl'] = request.idCardFrontImageUrl;
  }
  if (!Util.isUnset(request.idCardNumber)) {
    query['IdCardNumber'] = request.idCardNumber;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyMaterial',
    version = '2019-03-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request VerifyMaterialRequest
 * @return VerifyMaterialResponse
 */
async function verifyMaterial(request: VerifyMaterialRequest): VerifyMaterialResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyMaterialWithOptions(request, runtime);
}

