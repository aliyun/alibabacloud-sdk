/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CompareFaceVerifyRequest {
  crop?: string(name='Crop'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  sceneId?: long(name='SceneId'),
  sourceCertifyId?: string(name='SourceCertifyId'),
  sourceFaceContrastPicture?: string(name='SourceFaceContrastPicture'),
  sourceFaceContrastPictureUrl?: string(name='SourceFaceContrastPictureUrl'),
  sourceOssBucketName?: string(name='SourceOssBucketName'),
  sourceOssObjectName?: string(name='SourceOssObjectName'),
  targetCertifyId?: string(name='TargetCertifyId'),
  targetFaceContrastPicture?: string(name='TargetFaceContrastPicture'),
  targetFaceContrastPictureUrl?: string(name='TargetFaceContrastPictureUrl'),
  targetOssBucketName?: string(name='TargetOssBucketName'),
  targetOssObjectName?: string(name='TargetOssObjectName'),
}

model CompareFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    passed?: string(name='Passed'),
    verifyScore?: float(name='VerifyScore'),
  }(name='ResultObject'),
}

model CompareFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: CompareFaceVerifyResponseBody(name='body'),
}

async function compareFaceVerifyWithOptions(request: CompareFaceVerifyRequest, runtime: Util.RuntimeOptions): CompareFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompareFaceVerify', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function compareFaceVerify(request: CompareFaceVerifyRequest): CompareFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFaceVerifyWithOptions(request, runtime);
}

model CompareFacesRequest {
  sourceImageType?: string(name='SourceImageType'),
  sourceImageValue?: string(name='SourceImageValue'),
  targetImageType?: string(name='TargetImageType'),
  targetImageValue?: string(name='TargetImageValue'),
}

model CompareFacesResponseBody = {
  code?: string(name='Code'),
  data?: {
    confidenceThresholds?: string(name='ConfidenceThresholds'),
    similarityScore?: float(name='SimilarityScore'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CompareFacesResponse = {
  headers: map[string]string(name='headers'),
  body: CompareFacesResponseBody(name='body'),
}

async function compareFacesWithOptions(request: CompareFacesRequest, runtime: Util.RuntimeOptions): CompareFacesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompareFaces', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function compareFaces(request: CompareFacesRequest): CompareFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFacesWithOptions(request, runtime);
}

model ContrastFaceVerifyRequest {
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  certType?: string(name='CertType'),
  certifyId?: string(name='CertifyId'),
  crop?: string(name='Crop'),
  deviceToken?: string(name='DeviceToken'),
  faceContrastFile?: string(name='FaceContrastFile'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  ip?: string(name='Ip'),
  mobile?: string(name='Mobile'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  sceneId?: long(name='SceneId'),
  userId?: string(name='UserId'),
}

model ContrastFaceVerifyAdvanceRequest {
  faceContrastFileObject: readable(name='FaceContrastFileObject'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  certType?: string(name='CertType'),
  certifyId?: string(name='CertifyId'),
  crop?: string(name='Crop'),
  deviceToken?: string(name='DeviceToken'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  ip?: string(name='Ip'),
  mobile?: string(name='Mobile'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  sceneId?: long(name='SceneId'),
  userId?: string(name='UserId'),
}

model ContrastFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    identityInfo?: string(name='IdentityInfo'),
    materialInfo?: string(name='MaterialInfo'),
    passed?: string(name='Passed'),
    subCode?: string(name='SubCode'),
  }(name='ResultObject'),
}

model ContrastFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: ContrastFaceVerifyResponseBody(name='body'),
}

async function contrastFaceVerifyWithOptions(request: ContrastFaceVerifyRequest, runtime: Util.RuntimeOptions): ContrastFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ContrastFaceVerify', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function contrastFaceVerify(request: ContrastFaceVerifyRequest): ContrastFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return contrastFaceVerifyWithOptions(request, runtime);
}

async function contrastFaceVerifyAdvance(request: ContrastFaceVerifyAdvanceRequest, runtime: Util.RuntimeOptions): ContrastFaceVerifyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var contrastFaceVerifyReq = new ContrastFaceVerifyRequest{};
  OpenApiUtil.convert(request, contrastFaceVerifyReq);

  if(!Util.isUnset(request.faceContrastFileObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.faceContrastFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    contrastFaceVerifyReq.faceContrastFile = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var contrastFaceVerifyResp = contrastFaceVerifyWithOptions(contrastFaceVerifyReq, runtime);
  return contrastFaceVerifyResp;
}

model CreateAuthKeyRequest {
  authYears?: int32(name='AuthYears'),
  bizType?: string(name='BizType'),
  test?: boolean(name='Test'),
  userDeviceId?: string(name='UserDeviceId'),
}

model CreateAuthKeyResponseBody = {
  authKey?: string(name='AuthKey'),
  requestId?: string(name='RequestId'),
}

model CreateAuthKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthKeyResponseBody(name='body'),
}

async function createAuthKeyWithOptions(request: CreateAuthKeyRequest, runtime: Util.RuntimeOptions): CreateAuthKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAuthKey', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAuthKey(request: CreateAuthKeyRequest): CreateAuthKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthKeyWithOptions(request, runtime);
}

model CreateFaceConfigRequest {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model CreateFaceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateFaceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFaceConfigResponseBody(name='body'),
}

async function createFaceConfigWithOptions(request: CreateFaceConfigRequest, runtime: Util.RuntimeOptions): CreateFaceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFaceConfig', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFaceConfig(request: CreateFaceConfigRequest): CreateFaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFaceConfigWithOptions(request, runtime);
}

model CreateRPSDKRequest {
  appUrl?: string(name='AppUrl'),
  lang?: string(name='Lang'),
  platform?: string(name='Platform'),
  sourceIp?: string(name='SourceIp'),
}

model CreateRPSDKResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateRPSDKResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRPSDKResponseBody(name='body'),
}

async function createRPSDKWithOptions(request: CreateRPSDKRequest, runtime: Util.RuntimeOptions): CreateRPSDKResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRPSDK', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRPSDK(request: CreateRPSDKRequest): CreateRPSDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRPSDKWithOptions(request, runtime);
}

model CreateVerifySDKRequest {
  appUrl?: string(name='AppUrl'),
  platform?: string(name='Platform'),
}

model CreateVerifySDKResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateVerifySDKResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVerifySDKResponseBody(name='body'),
}

async function createVerifySDKWithOptions(request: CreateVerifySDKRequest, runtime: Util.RuntimeOptions): CreateVerifySDKResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVerifySDK', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVerifySDK(request: CreateVerifySDKRequest): CreateVerifySDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySDKWithOptions(request, runtime);
}

model CreateVerifySettingRequest {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType'),
  guideStep?: boolean(name='GuideStep'),
  privacyStep?: boolean(name='PrivacyStep'),
  resultStep?: boolean(name='ResultStep'),
  solution?: string(name='Solution'),
}

model CreateVerifySettingResponseBody = {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType'),
  requestId?: string(name='RequestId'),
  solution?: string(name='Solution'),
  stepList?: [ string ](name='StepList'),
}

model CreateVerifySettingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVerifySettingResponseBody(name='body'),
}

async function createVerifySettingWithOptions(request: CreateVerifySettingRequest, runtime: Util.RuntimeOptions): CreateVerifySettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVerifySetting', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVerifySetting(request: CreateVerifySettingRequest): CreateVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySettingWithOptions(request, runtime);
}

model CreateWhitelistRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  idCardNum?: string(name='IdCardNum'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  validDay?: string(name='ValidDay'),
}

model CreateWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWhitelistResponseBody(name='body'),
}

async function createWhitelistWithOptions(request: CreateWhitelistRequest, runtime: Util.RuntimeOptions): CreateWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateWhitelist', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createWhitelist(request: CreateWhitelistRequest): CreateWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWhitelistWithOptions(request, runtime);
}

model CreateWhitelistSettingRequest {
  certNo?: string(name='CertNo'),
  certifyId?: string(name='CertifyId'),
  lang?: string(name='Lang'),
  sceneId?: long(name='SceneId'),
  serviceCode?: string(name='ServiceCode'),
  sourceIp?: string(name='SourceIp'),
  validDay?: int32(name='ValidDay'),
}

model CreateWhitelistSettingResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='ResultObject'),
}

model CreateWhitelistSettingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWhitelistSettingResponseBody(name='body'),
}

async function createWhitelistSettingWithOptions(request: CreateWhitelistSettingRequest, runtime: Util.RuntimeOptions): CreateWhitelistSettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateWhitelistSetting', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createWhitelistSetting(request: CreateWhitelistSettingRequest): CreateWhitelistSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWhitelistSettingWithOptions(request, runtime);
}

model DeleteWhitelistRequest {
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWhitelistResponseBody(name='body'),
}

async function deleteWhitelistWithOptions(request: DeleteWhitelistRequest, runtime: Util.RuntimeOptions): DeleteWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWhitelist', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWhitelist(request: DeleteWhitelistRequest): DeleteWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWhitelistWithOptions(request, runtime);
}

model DeleteWhitelistSettingRequest {
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  serviceCode?: string(name='ServiceCode'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteWhitelistSettingResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='ResultObject'),
}

model DeleteWhitelistSettingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWhitelistSettingResponseBody(name='body'),
}

async function deleteWhitelistSettingWithOptions(request: DeleteWhitelistSettingRequest, runtime: Util.RuntimeOptions): DeleteWhitelistSettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWhitelistSetting', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWhitelistSetting(request: DeleteWhitelistSettingRequest): DeleteWhitelistSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWhitelistSettingWithOptions(request, runtime);
}

model DescribeAppInfoRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  platform?: string(name='Platform'),
}

model DescribeAppInfoResponseBody = {
  appInfoList?: [ 
    {
      debugPackageInfo?: {
        version?: string(name='Version'),
      }(name='DebugPackageInfo'),
      endDate?: string(name='EndDate'),
      icon?: string(name='Icon'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      packageInfo?: {
        version?: string(name='Version'),
      }(name='PackageInfo'),
      packageName?: string(name='PackageName'),
      startDate?: string(name='StartDate'),
      type?: int32(name='Type'),
    }
  ](name='AppInfoList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppInfoResponseBody(name='body'),
}

async function describeAppInfoWithOptions(request: DescribeAppInfoRequest, runtime: Util.RuntimeOptions): DescribeAppInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAppInfo', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAppInfo(request: DescribeAppInfoRequest): DescribeAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppInfoWithOptions(request, runtime);
}

model DescribeDeviceInfoRequest {
  bizType?: string(name='BizType'),
  currentPage?: int32(name='CurrentPage'),
  deviceId?: string(name='DeviceId'),
  expiredEndDay?: string(name='ExpiredEndDay'),
  expiredStartDay?: string(name='ExpiredStartDay'),
  pageSize?: int32(name='PageSize'),
  userDeviceId?: string(name='UserDeviceId'),
}

model DescribeDeviceInfoResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  deviceInfoList?: {
    deviceInfo?: [ 
    {
      beginDay?: string(name='BeginDay'),
      bizType?: string(name='BizType'),
      deviceId?: string(name='DeviceId'),
      expiredDay?: string(name='ExpiredDay'),
      userDeviceId?: string(name='UserDeviceId'),
    }
  ](name='DeviceInfo')
  }(name='DeviceInfoList'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceInfoResponseBody(name='body'),
}

async function describeDeviceInfoWithOptions(request: DescribeDeviceInfoRequest, runtime: Util.RuntimeOptions): DescribeDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeviceInfo', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeviceInfo(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceInfoWithOptions(request, runtime);
}

model DescribeFaceConfigRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeFaceConfigResponseBody = {
  items?: [ 
    {
      bizName?: string(name='BizName'),
      bizType?: string(name='BizType'),
      gmtUpdated?: long(name='GmtUpdated'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeFaceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFaceConfigResponseBody(name='body'),
}

async function describeFaceConfigWithOptions(request: DescribeFaceConfigRequest, runtime: Util.RuntimeOptions): DescribeFaceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFaceConfig', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFaceConfig(request: DescribeFaceConfigRequest): DescribeFaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceConfigWithOptions(request, runtime);
}

model DescribeFaceUsageRequest {
  endDate?: string(name='EndDate'),
  startDate?: string(name='StartDate'),
}

model DescribeFaceUsageResponseBody = {
  faceUsageList?: [ 
    {
      date?: string(name='Date'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='FaceUsageList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeFaceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFaceUsageResponseBody(name='body'),
}

async function describeFaceUsageWithOptions(request: DescribeFaceUsageRequest, runtime: Util.RuntimeOptions): DescribeFaceUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFaceUsage', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFaceUsage(request: DescribeFaceUsageRequest): DescribeFaceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceUsageWithOptions(request, runtime);
}

model DescribeFaceVerifyRequest {
  certifyId?: string(name='CertifyId'),
  pictureReturnType?: string(name='PictureReturnType'),
  sceneId?: long(name='SceneId'),
}

model DescribeFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    deviceToken?: string(name='DeviceToken'),
    identityInfo?: string(name='IdentityInfo'),
    materialInfo?: string(name='MaterialInfo'),
    passed?: string(name='Passed'),
    subCode?: string(name='SubCode'),
  }(name='ResultObject'),
}

model DescribeFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFaceVerifyResponseBody(name='body'),
}

async function describeFaceVerifyWithOptions(request: DescribeFaceVerifyRequest, runtime: Util.RuntimeOptions): DescribeFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFaceVerify', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFaceVerify(request: DescribeFaceVerifyRequest): DescribeFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceVerifyWithOptions(request, runtime);
}

model DescribeOssUploadTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket'),
    endPoint?: string(name='EndPoint'),
    expired?: long(name='Expired'),
    key?: string(name='Key'),
    path?: string(name='Path'),
    secret?: string(name='Secret'),
    token?: string(name='Token'),
  }(name='OssUploadToken'),
  requestId?: string(name='RequestId'),
}

model DescribeOssUploadTokenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssUploadTokenResponseBody(name='body'),
}

async function describeOssUploadTokenWithOptions(runtime: Util.RuntimeOptions): DescribeOssUploadTokenResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeOssUploadToken', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOssUploadToken(): DescribeOssUploadTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssUploadTokenWithOptions(runtime);
}

model DescribeRPSDKRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  taskId?: string(name='TaskId'),
}

model DescribeRPSDKResponseBody = {
  requestId?: string(name='RequestId'),
  sdkUrl?: string(name='SdkUrl'),
}

model DescribeRPSDKResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRPSDKResponseBody(name='body'),
}

async function describeRPSDKWithOptions(request: DescribeRPSDKRequest, runtime: Util.RuntimeOptions): DescribeRPSDKResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRPSDK', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRPSDK(request: DescribeRPSDKRequest): DescribeRPSDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRPSDKWithOptions(request, runtime);
}

model DescribeSdkUrlRequest {
  debug?: boolean(name='Debug'),
  id?: long(name='Id'),
}

model DescribeSdkUrlResponseBody = {
  requestId?: string(name='RequestId'),
  sdkUrl?: string(name='SdkUrl'),
}

model DescribeSdkUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSdkUrlResponseBody(name='body'),
}

async function describeSdkUrlWithOptions(request: DescribeSdkUrlRequest, runtime: Util.RuntimeOptions): DescribeSdkUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSdkUrl', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSdkUrl(request: DescribeSdkUrlRequest): DescribeSdkUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSdkUrlWithOptions(request, runtime);
}

model DescribeUpdatePackageResultRequest {
  taskId?: string(name='TaskId'),
}

model DescribeUpdatePackageResultResponseBody = {
  appInfo?: {
    debugPackageInfo?: {
      version?: string(name='Version'),
    }(name='DebugPackageInfo'),
    endDate?: string(name='EndDate'),
    icon?: string(name='Icon'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    packageInfo?: {
      version?: string(name='Version'),
    }(name='PackageInfo'),
    packageName?: string(name='PackageName'),
    startDate?: string(name='StartDate'),
    type?: int32(name='Type'),
  }(name='AppInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeUpdatePackageResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpdatePackageResultResponseBody(name='body'),
}

async function describeUpdatePackageResultWithOptions(request: DescribeUpdatePackageResultRequest, runtime: Util.RuntimeOptions): DescribeUpdatePackageResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUpdatePackageResult', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUpdatePackageResult(request: DescribeUpdatePackageResultRequest): DescribeUpdatePackageResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpdatePackageResultWithOptions(request, runtime);
}

model DescribeUploadInfoRequest {
  biz?: string(name='Biz'),
}

model DescribeUploadInfoResponseBody = {
  accessid?: string(name='Accessid'),
  expire?: long(name='Expire'),
  folder?: string(name='Folder'),
  host?: string(name='Host'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
}

model DescribeUploadInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUploadInfoResponseBody(name='body'),
}

async function describeUploadInfoWithOptions(request: DescribeUploadInfoRequest, runtime: Util.RuntimeOptions): DescribeUploadInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUploadInfo', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUploadInfo(request: DescribeUploadInfoRequest): DescribeUploadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUploadInfoWithOptions(request, runtime);
}

model DescribeUserStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  requestId?: string(name='RequestId'),
}

model DescribeUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserStatusResponseBody(name='body'),
}

async function describeUserStatusWithOptions(runtime: Util.RuntimeOptions): DescribeUserStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeUserStatus', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserStatus(): DescribeUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserStatusWithOptions(runtime);
}

model DescribeVerifyRecordsRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  currentPage?: int32(name='CurrentPage'),
  endDate?: string(name='EndDate'),
  idCardNum?: string(name='IdCardNum'),
  pageSize?: int32(name='PageSize'),
  queryId?: string(name='QueryId'),
  startDate?: string(name='StartDate'),
  statusList?: string(name='StatusList'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVerifyRecordsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  queryId?: string(name='QueryId'),
  recordsList?: [ 
    {
      authorityComparisonScore?: float(name='AuthorityComparisonScore'),
      bizId?: string(name='BizId'),
      bizType?: string(name='BizType'),
      dataStats?: string(name='DataStats'),
      finishTime?: long(name='FinishTime'),
      idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore'),
      material?: {
        faceImageUrl?: string(name='FaceImageUrl'),
        idCardInfo?: {
          address?: string(name='Address'),
          authority?: string(name='Authority'),
          backImageUrl?: string(name='BackImageUrl'),
          birth?: string(name='Birth'),
          endDate?: string(name='EndDate'),
          frontImageUrl?: string(name='FrontImageUrl'),
          name?: string(name='Name'),
          nationality?: string(name='Nationality'),
          number?: string(name='Number'),
          sex?: string(name='Sex'),
          startDate?: string(name='StartDate'),
        }(name='IdCardInfo'),
        idCardName?: string(name='IdCardName'),
        idCardNumber?: string(name='IdCardNumber'),
      }(name='Material'),
      status?: int32(name='Status'),
      verifyId?: string(name='VerifyId'),
    }
  ](name='RecordsList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVerifyRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyRecordsResponseBody(name='body'),
}

async function describeVerifyRecordsWithOptions(request: DescribeVerifyRecordsRequest, runtime: Util.RuntimeOptions): DescribeVerifyRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyRecords', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyRecords(request: DescribeVerifyRecordsRequest): DescribeVerifyRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyRecordsWithOptions(request, runtime);
}

model DescribeVerifyResultRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
}

model DescribeVerifyResultResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore'),
  faceComparisonScore?: float(name='FaceComparisonScore'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl'),
    faceImageUrl?: string(name='FaceImageUrl'),
    faceMask?: boolean(name='FaceMask'),
    faceQuality?: string(name='FaceQuality'),
    idCardInfo?: {
      address?: string(name='Address'),
      authority?: string(name='Authority'),
      backImageUrl?: string(name='BackImageUrl'),
      birth?: string(name='Birth'),
      endDate?: string(name='EndDate'),
      frontImageUrl?: string(name='FrontImageUrl'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
      number?: string(name='Number'),
      startDate?: string(name='StartDate'),
    }(name='IdCardInfo'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber'),
    videoUrls?: [ string ](name='VideoUrls'),
  }(name='Material'),
  requestId?: string(name='RequestId'),
  verifyStatus?: int32(name='VerifyStatus'),
}

model DescribeVerifyResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyResultResponseBody(name='body'),
}

async function describeVerifyResultWithOptions(request: DescribeVerifyResultRequest, runtime: Util.RuntimeOptions): DescribeVerifyResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyResult', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyResult(request: DescribeVerifyResultRequest): DescribeVerifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyResultWithOptions(request, runtime);
}

model DescribeVerifySDKRequest {
  taskId?: string(name='TaskId'),
}

model DescribeVerifySDKResponseBody = {
  requestId?: string(name='RequestId'),
  sdkUrl?: string(name='SdkUrl'),
}

model DescribeVerifySDKResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifySDKResponseBody(name='body'),
}

async function describeVerifySDKWithOptions(request: DescribeVerifySDKRequest, runtime: Util.RuntimeOptions): DescribeVerifySDKResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifySDK', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifySDK(request: DescribeVerifySDKRequest): DescribeVerifySDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySDKWithOptions(request, runtime);
}

model DescribeVerifySettingResponseBody = {
  requestId?: string(name='RequestId'),
  verifySettingList?: [ 
    {
      bizName?: string(name='BizName'),
      bizType?: string(name='BizType'),
      solution?: string(name='Solution'),
      stepList?: [ string ](name='StepList'),
    }
  ](name='VerifySettingList'),
}

model DescribeVerifySettingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifySettingResponseBody(name='body'),
}

async function describeVerifySettingWithOptions(runtime: Util.RuntimeOptions): DescribeVerifySettingResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeVerifySetting', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifySetting(): DescribeVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySettingWithOptions(runtime);
}

model DescribeVerifyTokenRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  callbackSeed?: string(name='CallbackSeed'),
  callbackUrl?: string(name='CallbackUrl'),
  faceRetainedImageUrl?: string(name='FaceRetainedImageUrl'),
  failedRedirectUrl?: string(name='FailedRedirectUrl'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl'),
  idCardNumber?: string(name='IdCardNumber'),
  name?: string(name='Name'),
  passedRedirectUrl?: string(name='PassedRedirectUrl'),
  userId?: string(name='UserId'),
  userIp?: string(name='UserIp'),
  userPhoneNumber?: string(name='UserPhoneNumber'),
  userRegistTime?: long(name='UserRegistTime'),
}

model DescribeVerifyTokenResponseBody = {
  ossUploadToken?: {
    bucket?: string(name='Bucket'),
    endPoint?: string(name='EndPoint'),
    expired?: long(name='Expired'),
    key?: string(name='Key'),
    path?: string(name='Path'),
    secret?: string(name='Secret'),
    token?: string(name='Token'),
  }(name='OssUploadToken'),
  requestId?: string(name='RequestId'),
  verifyPageUrl?: string(name='VerifyPageUrl'),
  verifyToken?: string(name='VerifyToken'),
}

model DescribeVerifyTokenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyTokenResponseBody(name='body'),
}

async function describeVerifyTokenWithOptions(request: DescribeVerifyTokenRequest, runtime: Util.RuntimeOptions): DescribeVerifyTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyToken', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyToken(request: DescribeVerifyTokenRequest): DescribeVerifyTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyTokenWithOptions(request, runtime);
}

model DescribeVerifyUsageRequest {
  bizType?: string(name='BizType'),
  endDate?: string(name='EndDate'),
  startDate?: string(name='StartDate'),
}

model DescribeVerifyUsageResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  verifyUsageList?: [ 
    {
      bizType?: string(name='BizType'),
      date?: string(name='Date'),
      failCount?: long(name='FailCount'),
      passCount?: long(name='PassCount'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='VerifyUsageList'),
}

model DescribeVerifyUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyUsageResponseBody(name='body'),
}

async function describeVerifyUsageWithOptions(request: DescribeVerifyUsageRequest, runtime: Util.RuntimeOptions): DescribeVerifyUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyUsage', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyUsage(request: DescribeVerifyUsageRequest): DescribeVerifyUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyUsageWithOptions(request, runtime);
}

model DescribeWhitelistRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  currentPage?: int32(name='CurrentPage'),
  idCardNum?: string(name='IdCardNum'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  sourceIp?: string(name='SourceIp'),
  valid?: string(name='Valid'),
  validEndDate?: string(name='ValidEndDate'),
  validStartDate?: string(name='ValidStartDate'),
}

model DescribeWhitelistResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      bizId?: string(name='BizId'),
      bizType?: string(name='BizType'),
      endDate?: long(name='EndDate'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      idCardNum?: string(name='IdCardNum'),
      startDate?: long(name='StartDate'),
      uid?: long(name='Uid'),
      valid?: int32(name='Valid'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWhitelistResponseBody(name='body'),
}

async function describeWhitelistWithOptions(request: DescribeWhitelistRequest, runtime: Util.RuntimeOptions): DescribeWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWhitelist', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWhitelist(request: DescribeWhitelistRequest): DescribeWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWhitelistWithOptions(request, runtime);
}

model DescribeWhitelistSettingRequest {
  certNo?: string(name='CertNo'),
  certifyId?: string(name='CertifyId'),
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  sceneId?: long(name='SceneId'),
  serviceCode?: string(name='ServiceCode'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  validEndDate?: long(name='ValidEndDate'),
  validStartDate?: long(name='ValidStartDate'),
}

model DescribeWhitelistSettingResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      certNo?: string(name='CertNo'),
      certifyId?: string(name='CertifyId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      sceneId?: long(name='SceneId'),
      status?: string(name='Status'),
      validEndDate?: string(name='ValidEndDate'),
      validStartDate?: string(name='ValidStartDate'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWhitelistSettingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWhitelistSettingResponseBody(name='body'),
}

async function describeWhitelistSettingWithOptions(request: DescribeWhitelistSettingRequest, runtime: Util.RuntimeOptions): DescribeWhitelistSettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWhitelistSetting', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWhitelistSetting(request: DescribeWhitelistSettingRequest): DescribeWhitelistSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWhitelistSettingWithOptions(request, runtime);
}

model DetectFaceAttributesRequest {
  bizType?: string(name='BizType'),
  materialValue?: string(name='MaterialValue'),
}

model DetectFaceAttributesResponseBody = {
  code?: string(name='Code'),
  data?: {
    faceInfos?: {
      faceAttributesDetectInfo?: [ 
      {
        faceAttributes?: {
          blur?: float(name='Blur'),
          facequal?: float(name='Facequal'),
          facetype?: string(name='Facetype'),
          glasses?: string(name='Glasses'),
          headpose?: {
            pitchAngle?: float(name='PitchAngle'),
            rollAngle?: float(name='RollAngle'),
            yawAngle?: float(name='YawAngle'),
          }(name='Headpose'),
          integrity?: int32(name='Integrity'),
          respirator?: string(name='Respirator'),
          smiling?: {
            threshold?: float(name='Threshold'),
            value?: float(name='Value'),
          }(name='Smiling'),
        }(name='FaceAttributes'),
        faceRect?: {
          height?: int32(name='Height'),
          left?: int32(name='Left'),
          top?: int32(name='Top'),
          width?: int32(name='Width'),
        }(name='FaceRect'),
      }
    ](name='FaceAttributesDetectInfo')
    }(name='FaceInfos'),
    imgHeight?: int32(name='ImgHeight'),
    imgWidth?: int32(name='ImgWidth'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DetectFaceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DetectFaceAttributesResponseBody(name='body'),
}

async function detectFaceAttributesWithOptions(request: DetectFaceAttributesRequest, runtime: Util.RuntimeOptions): DetectFaceAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectFaceAttributes', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectFaceAttributes(request: DetectFaceAttributesRequest): DetectFaceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectFaceAttributesWithOptions(request, runtime);
}

model InitDeviceRequest {
  appVersion?: string(name='AppVersion'),
  bizData?: string(name='BizData'),
  certifyId?: string(name='CertifyId'),
  certifyPrincipal?: string(name='CertifyPrincipal'),
  channel?: string(name='Channel'),
  deviceToken?: string(name='DeviceToken'),
  merchant?: string(name='Merchant'),
  metaInfo?: string(name='MetaInfo'),
  outerOrderNo?: string(name='OuterOrderNo'),
  produceNode?: string(name='ProduceNode'),
  productName?: string(name='ProductName'),
  uaToken?: string(name='UaToken'),
  webUmidToken?: string(name='WebUmidToken'),
}

model InitDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucketName?: string(name='BucketName'),
    certifyId?: string(name='CertifyId'),
    extParams?: string(name='ExtParams'),
    fileName?: string(name='FileName'),
    fileNamePrefix?: string(name='FileNamePrefix'),
    message?: string(name='Message'),
    ossEndPoint?: string(name='OssEndPoint'),
    presignedUrl?: string(name='PresignedUrl'),
    protocol?: string(name='Protocol'),
    retCode?: string(name='RetCode'),
    retCodeSub?: string(name='RetCodeSub'),
    retMessageSub?: string(name='RetMessageSub'),
    securityToken?: string(name='SecurityToken'),
  }(name='ResultObject'),
}

model InitDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: InitDeviceResponseBody(name='body'),
}

async function initDeviceWithOptions(request: InitDeviceRequest, runtime: Util.RuntimeOptions): InitDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitDevice', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initDevice(request: InitDeviceRequest): InitDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return initDeviceWithOptions(request, runtime);
}

model InitFaceVerifyRequest {
  callbackToken?: string(name='CallbackToken'),
  callbackUrl?: string(name='CallbackUrl'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  certType?: string(name='CertType'),
  certifyId?: string(name='CertifyId'),
  certifyUrlType?: string(name='CertifyUrlType'),
  crop?: string(name='Crop'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  ip?: string(name='Ip'),
  metaInfo?: string(name='MetaInfo'),
  mobile?: string(name='Mobile'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  returnUrl?: string(name='ReturnUrl'),
  sceneId?: long(name='SceneId'),
  userId?: string(name='UserId'),
}

model InitFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    certifyUrl?: string(name='CertifyUrl'),
  }(name='ResultObject'),
}

model InitFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: InitFaceVerifyResponseBody(name='body'),
}

async function initFaceVerifyWithOptions(request: InitFaceVerifyRequest, runtime: Util.RuntimeOptions): InitFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitFaceVerify', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initFaceVerify(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return initFaceVerifyWithOptions(request, runtime);
}

model LivenessFaceVerifyRequest {
  certifyId?: string(name='CertifyId'),
  crop?: string(name='Crop'),
  deviceToken?: string(name='DeviceToken'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  ip?: string(name='Ip'),
  mobile?: string(name='Mobile'),
  model?: string(name='Model'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  sceneId?: long(name='SceneId'),
  userId?: string(name='UserId'),
}

model LivenessFaceVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    certifyId?: string(name='CertifyId'),
    materialInfo?: string(name='MaterialInfo'),
    passed?: string(name='Passed'),
    subCode?: string(name='SubCode'),
  }(name='ResultObject'),
}

model LivenessFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: LivenessFaceVerifyResponseBody(name='body'),
}

async function livenessFaceVerifyWithOptions(request: LivenessFaceVerifyRequest, runtime: Util.RuntimeOptions): LivenessFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LivenessFaceVerify', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function livenessFaceVerify(request: LivenessFaceVerifyRequest): LivenessFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return livenessFaceVerifyWithOptions(request, runtime);
}

model ModifyDeviceInfoRequest {
  bizType?: string(name='BizType'),
  deviceId?: string(name='DeviceId'),
  duration?: string(name='Duration'),
  expiredDay?: string(name='ExpiredDay'),
  userDeviceId?: string(name='UserDeviceId'),
}

model ModifyDeviceInfoResponseBody = {
  beginDay?: string(name='BeginDay'),
  bizType?: string(name='BizType'),
  deviceId?: string(name='DeviceId'),
  expiredDay?: string(name='ExpiredDay'),
  requestId?: string(name='RequestId'),
  userDeviceId?: string(name='UserDeviceId'),
}

model ModifyDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceInfoResponseBody(name='body'),
}

async function modifyDeviceInfoWithOptions(request: ModifyDeviceInfoRequest, runtime: Util.RuntimeOptions): ModifyDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDeviceInfo', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDeviceInfo(request: ModifyDeviceInfoRequest): ModifyDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceInfoWithOptions(request, runtime);
}

model UpdateAppPackageRequest {
  debug?: boolean(name='Debug'),
  id?: long(name='Id'),
  packageUrl?: string(name='PackageUrl'),
  platform?: string(name='Platform'),
}

model UpdateAppPackageResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model UpdateAppPackageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppPackageResponseBody(name='body'),
}

async function updateAppPackageWithOptions(request: UpdateAppPackageRequest, runtime: Util.RuntimeOptions): UpdateAppPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppPackage', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppPackage(request: UpdateAppPackageRequest): UpdateAppPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppPackageWithOptions(request, runtime);
}

model UpdateFaceConfigRequest {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model UpdateFaceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateFaceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFaceConfigResponseBody(name='body'),
}

async function updateFaceConfigWithOptions(request: UpdateFaceConfigRequest, runtime: Util.RuntimeOptions): UpdateFaceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFaceConfig', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFaceConfig(request: UpdateFaceConfigRequest): UpdateFaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFaceConfigWithOptions(request, runtime);
}

model UpdateVerifySettingRequest {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType'),
  guideStep?: boolean(name='GuideStep'),
  privacyStep?: boolean(name='PrivacyStep'),
  resultStep?: boolean(name='ResultStep'),
  solution?: string(name='Solution'),
}

model UpdateVerifySettingResponseBody = {
  bizName?: string(name='BizName'),
  bizType?: string(name='BizType'),
  requestId?: string(name='RequestId'),
  solution?: string(name='Solution'),
  stepList?: [ string ](name='StepList'),
}

model UpdateVerifySettingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVerifySettingResponseBody(name='body'),
}

async function updateVerifySettingWithOptions(request: UpdateVerifySettingRequest, runtime: Util.RuntimeOptions): UpdateVerifySettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVerifySetting', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVerifySetting(request: UpdateVerifySettingRequest): UpdateVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVerifySettingWithOptions(request, runtime);
}

model VerifyDeviceRequest {
  appVersion?: string(name='AppVersion'),
  certifyData?: string(name='CertifyData'),
  certifyId?: string(name='CertifyId'),
  deviceToken?: string(name='DeviceToken'),
  extInfo?: string(name='ExtInfo'),
}

model VerifyDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    extParams?: string(name='ExtParams'),
    hasNext?: string(name='HasNext'),
    productRetCode?: string(name='ProductRetCode'),
    retCodeSub?: string(name='RetCodeSub'),
    retMessageSub?: string(name='RetMessageSub'),
    validationRetCode?: string(name='ValidationRetCode'),
  }(name='ResultObject'),
}

model VerifyDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDeviceResponseBody(name='body'),
}

async function verifyDeviceWithOptions(request: VerifyDeviceRequest, runtime: Util.RuntimeOptions): VerifyDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyDevice', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyDevice(request: VerifyDeviceRequest): VerifyDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDeviceWithOptions(request, runtime);
}

model VerifyMaterialRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  faceImageUrl?: string(name='FaceImageUrl'),
  idCardBackImageUrl?: string(name='IdCardBackImageUrl'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl'),
  idCardNumber?: string(name='IdCardNumber'),
  name?: string(name='Name'),
  userId?: string(name='UserId'),
}

model VerifyMaterialResponseBody = {
  authorityComparisionScore?: float(name='AuthorityComparisionScore'),
  idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore'),
  material?: {
    faceGlobalUrl?: string(name='FaceGlobalUrl'),
    faceImageUrl?: string(name='FaceImageUrl'),
    faceMask?: string(name='FaceMask'),
    faceQuality?: string(name='FaceQuality'),
    idCardInfo?: {
      address?: string(name='Address'),
      authority?: string(name='Authority'),
      backImageUrl?: string(name='BackImageUrl'),
      birth?: string(name='Birth'),
      endDate?: string(name='EndDate'),
      frontImageUrl?: string(name='FrontImageUrl'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
      number?: string(name='Number'),
      startDate?: string(name='StartDate'),
    }(name='IdCardInfo'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber'),
  }(name='Material'),
  requestId?: string(name='RequestId'),
  verifyStatus?: int32(name='VerifyStatus'),
  verifyToken?: string(name='VerifyToken'),
}

model VerifyMaterialResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyMaterialResponseBody(name='body'),
}

async function verifyMaterialWithOptions(request: VerifyMaterialRequest, runtime: Util.RuntimeOptions): VerifyMaterialResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyMaterial', '2019-03-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyMaterial(request: VerifyMaterialRequest): VerifyMaterialResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyMaterialWithOptions(request, runtime);
}

