/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'mongodb.aliyuncs.com',
    cn-beijing = 'mongodb.aliyuncs.com',
    cn-chengdu = 'mongodb.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'mongodb.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'mongodb.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'mongodb.aliyuncs.com',
    cn-shanghai = 'mongodb.aliyuncs.com',
    cn-shenzhen = 'mongodb.aliyuncs.com',
    cn-heyuan = 'mongodb.aliyuncs.com',
    cn-hongkong = 'mongodb.aliyuncs.com',
    ap-southeast-1 = 'mongodb.aliyuncs.com',
    ap-southeast-2 = 'mongodb.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'mongodb.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'mongodb.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'mongodb.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'mongodb.eu-west-1.aliyuncs.com',
    us-west-1 = 'mongodb.aliyuncs.com',
    us-east-1 = 'mongodb.aliyuncs.com',
    eu-central-1 = 'mongodb.eu-central-1.aliyuncs.com',
    me-east-1 = 'mongodb.me-east-1.aliyuncs.com',
    ap-south-1 = 'mongodb.ap-south-1.aliyuncs.com',
    cn-hangzhou-finance = 'mongodb.aliyuncs.com',
    cn-shanghai-finance-1 = 'mongodb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mongodb.aliyuncs.com',
    cn-north-2-gov-1 = 'mongodb.aliyuncs.com',
    ap-northeast-2-pop = 'mongodb.aliyuncs.com',
    cn-beijing-finance-1 = 'mongodb.aliyuncs.com',
    cn-beijing-finance-pop = 'mongodb.aliyuncs.com',
    cn-beijing-gov-1 = 'mongodb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mongodb.aliyuncs.com',
    cn-edge-1 = 'mongodb.aliyuncs.com',
    cn-fujian = 'mongodb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mongodb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mongodb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mongodb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mongodb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mongodb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mongodb.aliyuncs.com',
    cn-hangzhou-test-306 = 'mongodb.aliyuncs.com',
    cn-hongkong-finance-pop = 'mongodb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'mongodb.aliyuncs.com',
    cn-qingdao-nebula = 'mongodb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mongodb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mongodb.aliyuncs.com',
    cn-shanghai-inner = 'mongodb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mongodb.aliyuncs.com',
    cn-shenzhen-inner = 'mongodb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mongodb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mongodb.aliyuncs.com',
    cn-wuhan = 'mongodb.aliyuncs.com',
    cn-wulanchabu = 'mongodb.aliyuncs.com',
    cn-yushanfang = 'mongodb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mongodb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mongodb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mongodb.aliyuncs.com',
    eu-west-1-oxs = 'mongodb.aliyuncs.com',
    rus-west-1-pop = 'mongodb.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('dds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AllocateNodePrivateNetworkAddressRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  zoneId?: string(name='ZoneId'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
}

model AllocateNodePrivateNetworkAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateNodePrivateNetworkAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateNodePrivateNetworkAddressResponseBody(name='body'),
}

async function allocateNodePrivateNetworkAddressWithOptions(request: AllocateNodePrivateNetworkAddressRequest, runtime: Util.RuntimeOptions): AllocateNodePrivateNetworkAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateNodePrivateNetworkAddress', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateNodePrivateNetworkAddress(request: AllocateNodePrivateNetworkAddressRequest): AllocateNodePrivateNetworkAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateNodePrivateNetworkAddressWithOptions(request, runtime);
}

model AllocatePublicNetworkAddressRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
}

model AllocatePublicNetworkAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocatePublicNetworkAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocatePublicNetworkAddressResponseBody(name='body'),
}

async function allocatePublicNetworkAddressWithOptions(request: AllocatePublicNetworkAddressRequest, runtime: Util.RuntimeOptions): AllocatePublicNetworkAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocatePublicNetworkAddress', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocatePublicNetworkAddress(request: AllocatePublicNetworkAddressRequest): AllocatePublicNetworkAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicNetworkAddressWithOptions(request, runtime);
}

model CheckCloudResourceAuthorizedRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  targetRegionId?: string(name='TargetRegionId'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  authorizationState?: int32(name='AuthorizationState'),
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorizedWithOptions(request: CheckCloudResourceAuthorizedRequest, runtime: Util.RuntimeOptions): CheckCloudResourceAuthorizedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckCloudResourceAuthorized', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCloudResourceAuthorizedWithOptions(request, runtime);
}

model CheckRecoveryConditionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  sourceDBInstance?: string(name='SourceDBInstance'),
  databaseNames?: string(name='DatabaseNames'),
  restoreTime?: string(name='RestoreTime'),
  backupId?: string(name='BackupId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CheckRecoveryConditionResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceName?: string(name='DBInstanceName'),
  isValid?: boolean(name='IsValid'),
}

model CheckRecoveryConditionResponse = {
  headers: map[string]string(name='headers'),
  body: CheckRecoveryConditionResponseBody(name='body'),
}

async function checkRecoveryConditionWithOptions(request: CheckRecoveryConditionRequest, runtime: Util.RuntimeOptions): CheckRecoveryConditionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckRecoveryCondition', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkRecoveryCondition(request: CheckRecoveryConditionRequest): CheckRecoveryConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkRecoveryConditionWithOptions(request, runtime);
}

model CreateBackupRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupMethod?: string(name='BackupMethod'),
}

model CreateBackupResponseBody = {
  requestId?: string(name='RequestId'),
  backupId?: string(name='BackupId'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackup', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList?: string(name='SecurityIPList'),
  accountPassword?: string(name='AccountPassword'),
  chargeType?: string(name='ChargeType'),
  period?: int32(name='Period'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  srcDBInstanceId?: string(name='SrcDBInstanceId'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  businessInfo?: string(name='BusinessInfo'),
  autoRenew?: string(name='AutoRenew'),
  databaseNames?: string(name='DatabaseNames'),
  couponNo?: string(name='CouponNo'),
  storageEngine?: string(name='StorageEngine'),
  replicationFactor?: string(name='ReplicationFactor'),
  readonlyReplicas?: string(name='ReadonlyReplicas'),
  resourceGroupId?: string(name='ResourceGroupId'),
  clusterId?: string(name='ClusterId'),
}

model CreateDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateNodeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeClass?: string(name='NodeClass'),
  nodeStorage?: int32(name='NodeStorage'),
  nodeType?: string(name='NodeType'),
  clientToken?: string(name='ClientToken'),
  fromApp?: string(name='FromApp'),
  autoPay?: boolean(name='AutoPay'),
  readonlyReplicas?: int32(name='ReadonlyReplicas'),
}

model CreateNodeResponseBody = {
  requestId?: string(name='RequestId'),
  nodeId?: string(name='NodeId'),
  orderId?: string(name='OrderId'),
}

model CreateNodeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNodeResponseBody(name='body'),
}

async function createNodeWithOptions(request: CreateNodeRequest, runtime: Util.RuntimeOptions): CreateNodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNode', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNode(request: CreateNodeRequest): CreateNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNodeWithOptions(request, runtime);
}

model CreateRecommendationTaskRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateRecommendationTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRecommendationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRecommendationTaskResponseBody(name='body'),
}

async function createRecommendationTaskWithOptions(request: CreateRecommendationTaskRequest, runtime: Util.RuntimeOptions): CreateRecommendationTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRecommendationTask', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRecommendationTask(request: CreateRecommendationTaskRequest): CreateRecommendationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecommendationTaskWithOptions(request, runtime);
}

model CreateServerlessDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList?: string(name='SecurityIPList'),
  accountPassword?: string(name='AccountPassword'),
  period?: int32(name='Period'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  clientToken?: string(name='ClientToken'),
  storageEngine?: string(name='StorageEngine'),
  autoRenew?: string(name='AutoRenew'),
  resourceGroupId?: string(name='ResourceGroupId'),
  periodPriceType?: string(name='PeriodPriceType'),
}

model CreateServerlessDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
}

model CreateServerlessDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServerlessDBInstanceResponseBody(name='body'),
}

async function createServerlessDBInstanceWithOptions(request: CreateServerlessDBInstanceRequest, runtime: Util.RuntimeOptions): CreateServerlessDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServerlessDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServerlessDBInstance(request: CreateServerlessDBInstanceRequest): CreateServerlessDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerlessDBInstanceWithOptions(request, runtime);
}

model CreateShardingDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList?: string(name='SecurityIPList'),
  accountPassword?: string(name='AccountPassword'),
  chargeType?: string(name='ChargeType'),
  period?: int32(name='Period'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  srcDBInstanceId?: string(name='SrcDBInstanceId'),
  restoreTime?: string(name='RestoreTime'),
  clientToken?: string(name='ClientToken'),
  storageEngine?: string(name='StorageEngine'),
  autoRenew?: string(name='AutoRenew'),
  protocolType?: string(name='ProtocolType'),
  mongos?: [ 
    {
      class?: string(name='Class'),
    }
  ](name='Mongos'),
  replicaSet?: [ 
    {
      class?: string(name='Class'),
      storage?: int32(name='Storage'),
      readonlyReplicas?: int32(name='ReadonlyReplicas'),
    }
  ](name='ReplicaSet'),
  configServer?: [ 
    {
      class?: string(name='Class'),
      storage?: int32(name='Storage'),
    }
  ](name='ConfigServer'),
}

model CreateShardingDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
}

model CreateShardingDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShardingDBInstanceResponseBody(name='body'),
}

async function createShardingDBInstanceWithOptions(request: CreateShardingDBInstanceRequest, runtime: Util.RuntimeOptions): CreateShardingDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateShardingDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createShardingDBInstance(request: CreateShardingDBInstanceRequest): CreateShardingDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createShardingDBInstanceWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  clientToken?: string(name='ClientToken'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteNodeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  clientToken?: string(name='ClientToken'),
}

model DeleteNodeResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model DeleteNodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNodeResponseBody(name='body'),
}

async function deleteNodeWithOptions(request: DeleteNodeRequest, runtime: Util.RuntimeOptions): DeleteNodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNode', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNode(request: DeleteNodeRequest): DeleteNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNodeWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  accounts?: {
    account?: [ 
    {
      characterType?: string(name='CharacterType'),
      accountStatus?: string(name='AccountStatus'),
      accountDescription?: string(name='AccountDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      accountName?: string(name='AccountName'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeActiveOperationTaskCountRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeActiveOperationTaskCountResponseBody = {
  requestId?: string(name='RequestId'),
  needPop?: int32(name='NeedPop'),
  taskCount?: int32(name='TaskCount'),
}

model DescribeActiveOperationTaskCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTaskCountResponseBody(name='body'),
}

async function describeActiveOperationTaskCountWithOptions(request: DescribeActiveOperationTaskCountRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationTaskCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeActiveOperationTaskCount', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeActiveOperationTaskCount(request: DescribeActiveOperationTaskCountRequest): DescribeActiveOperationTaskCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationTaskCountWithOptions(request, runtime);
}

model DescribeActiveOperationTaskTypeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  isHistory?: int32(name='IsHistory'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeActiveOperationTaskTypeResponseBody = {
  requestId?: string(name='RequestId'),
  typeList?: [ 
    {
      taskType?: string(name='TaskType'),
      count?: int32(name='Count'),
    }
  ](name='TypeList'),
}

model DescribeActiveOperationTaskTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTaskTypeResponseBody(name='body'),
}

async function describeActiveOperationTaskTypeWithOptions(request: DescribeActiveOperationTaskTypeRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationTaskTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeActiveOperationTaskType', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeActiveOperationTaskType(request: DescribeActiveOperationTaskTypeRequest): DescribeActiveOperationTaskTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationTaskTypeWithOptions(request, runtime);
}

model DescribeAuditFilesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAuditFilesResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    logFile?: [ 
    {
      fileID?: int32(name='FileID'),
      logStartTime?: string(name='LogStartTime'),
      logSize?: long(name='LogSize'),
      logDownloadURL?: string(name='LogDownloadURL'),
      logEndTime?: string(name='LogEndTime'),
      logStatus?: string(name='LogStatus'),
    }
  ](name='LogFile')
  }(name='Items'),
}

model DescribeAuditFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditFilesResponseBody(name='body'),
}

async function describeAuditFilesWithOptions(request: DescribeAuditFilesRequest, runtime: Util.RuntimeOptions): DescribeAuditFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditFiles', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditFiles(request: DescribeAuditFilesRequest): DescribeAuditFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditFilesWithOptions(request, runtime);
}

model DescribeAuditLogFilterRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  roleType?: string(name='RoleType'),
}

model DescribeAuditLogFilterResponseBody = {
  requestId?: string(name='RequestId'),
  filter?: string(name='Filter'),
  roleType?: string(name='RoleType'),
}

model DescribeAuditLogFilterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogFilterResponseBody(name='body'),
}

async function describeAuditLogFilterWithOptions(request: DescribeAuditLogFilterRequest, runtime: Util.RuntimeOptions): DescribeAuditLogFilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditLogFilter', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditLogFilter(request: DescribeAuditLogFilterRequest): DescribeAuditLogFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogFilterWithOptions(request, runtime);
}

model DescribeAuditPolicyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeAuditPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  logAuditStatus?: string(name='LogAuditStatus'),
}

model DescribeAuditPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditPolicyResponseBody(name='body'),
}

async function describeAuditPolicyWithOptions(request: DescribeAuditPolicyRequest, runtime: Util.RuntimeOptions): DescribeAuditPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditPolicy', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditPolicy(request: DescribeAuditPolicyRequest): DescribeAuditPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditPolicyWithOptions(request, runtime);
}

model DescribeAuditRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  database?: string(name='Database'),
  user?: string(name='User'),
  form?: string(name='Form'),
  queryKeywords?: string(name='QueryKeywords'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  orderType?: string(name='OrderType'),
}

model DescribeAuditRecordsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    SQLRecord?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      tableName?: string(name='TableName'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      threadID?: string(name='ThreadID'),
      totalExecutionTimes?: long(name='TotalExecutionTimes'),
      syntax?: string(name='Syntax'),
      accountName?: string(name='AccountName'),
    }
  ](name='SQLRecord')
  }(name='Items'),
}

model DescribeAuditRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditRecordsResponseBody(name='body'),
}

async function describeAuditRecordsWithOptions(request: DescribeAuditRecordsRequest, runtime: Util.RuntimeOptions): DescribeAuditRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditRecords', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditRecords(request: DescribeAuditRecordsRequest): DescribeAuditRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditRecordsWithOptions(request, runtime);
}

model DescribeAvailableTimeRangeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
}

model DescribeAvailableTimeRangeResponseBody = {
  timeRange?: {
    timeRange?: [ 
    {
      status?: string(name='Status'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      taskId?: string(name='TaskId'),
      nodeId?: string(name='NodeId'),
    }
  ](name='TimeRange')
  }(name='TimeRange'),
  requestId?: string(name='RequestId'),
}

model DescribeAvailableTimeRangeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableTimeRangeResponseBody(name='body'),
}

async function describeAvailableTimeRangeWithOptions(request: DescribeAvailableTimeRangeRequest, runtime: Util.RuntimeOptions): DescribeAvailableTimeRangeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableTimeRange', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableTimeRange(request: DescribeAvailableTimeRangeRequest): DescribeAvailableTimeRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableTimeRangeWithOptions(request, runtime);
}

model DescribeBackupDBsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sourceDBInstance?: string(name='SourceDBInstance'),
  restoreTime?: string(name='RestoreTime'),
  backupId?: string(name='BackupId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeBackupDBsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  databases?: {
    database?: [ 
    {
      DBName?: string(name='DBName'),
    }
  ](name='Database')
  }(name='Databases'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupDBsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDBsResponseBody(name='body'),
}

async function describeBackupDBsWithOptions(request: DescribeBackupDBsRequest, runtime: Util.RuntimeOptions): DescribeBackupDBsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupDBs', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupDBs(request: DescribeBackupDBsRequest): DescribeBackupDBsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDBsWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeBackupPolicyResponseBody = {
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  requestId?: string(name='RequestId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  backupId?: string(name='BackupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeBackupsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  backups?: {
    backup?: [ 
    {
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL'),
      backupSize?: long(name='BackupSize'),
      backupDownloadURL?: string(name='BackupDownloadURL'),
      backupMode?: string(name='BackupMode'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: int32(name='BackupId'),
      backupDBNames?: string(name='BackupDBNames'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Backup')
  }(name='Backups'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  engine?: string(name='Engine'),
  DBInstanceId?: string(name='DBInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDBInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstances?: {
    DBInstance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      replicaSets?: {
        replicaSet?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          connectionPort?: string(name='ConnectionPort'),
          replicaSetRole?: string(name='ReplicaSetRole'),
          connectionDomain?: string(name='ConnectionDomain'),
          VPCCloudInstanceId?: string(name='VPCCloudInstanceId'),
          networkType?: string(name='NetworkType'),
          VPCId?: string(name='VPCId'),
        }
      ](name='ReplicaSet')
      }(name='ReplicaSets'),
      replacateId?: string(name='ReplacateId'),
      chargeType?: string(name='ChargeType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcAuthMode?: string(name='VpcAuthMode'),
      networkType?: string(name='NetworkType'),
      lockMode?: string(name='LockMode'),
      engineVersion?: string(name='EngineVersion'),
      maxIOPS?: int32(name='MaxIOPS'),
      VPCCloudInstanceIds?: string(name='VPCCloudInstanceIds'),
      mongosList?: {
        mongosAttribute?: [ 
        {
          vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
          maxIOPS?: int32(name='MaxIOPS'),
          vSwitchId?: string(name='VSwitchId'),
          nodeClass?: string(name='NodeClass'),
          maxConnections?: int32(name='MaxConnections'),
          port?: int32(name='Port'),
          VPCId?: string(name='VPCId'),
          connectSting?: string(name='ConnectSting'),
          nodeDescription?: string(name='NodeDescription'),
          nodeId?: string(name='NodeId'),
        }
      ](name='MongosAttribute')
      }(name='MongosList'),
      protocolType?: string(name='ProtocolType'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      currentKernelVersion?: string(name='CurrentKernelVersion'),
      DBInstanceReleaseProtection?: boolean(name='DBInstanceReleaseProtection'),
      expireTime?: string(name='ExpireTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
      DBInstanceType?: string(name='DBInstanceType'),
      lastDowngradeTime?: string(name='LastDowngradeTime'),
      shardList?: {
        shardAttribute?: [ 
        {
          maxIOPS?: int32(name='MaxIOPS'),
          connectString?: string(name='ConnectString'),
          nodeClass?: string(name='NodeClass'),
          maxConnections?: int32(name='MaxConnections'),
          port?: int32(name='Port'),
          nodeDescription?: string(name='NodeDescription'),
          nodeId?: string(name='NodeId'),
          nodeStorage?: int32(name='NodeStorage'),
          readonlyReplicas?: int32(name='ReadonlyReplicas'),
        }
      ](name='ShardAttribute')
      }(name='ShardList'),
      maintainEndTime?: string(name='MaintainEndTime'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      VPCId?: string(name='VPCId'),
      regionId?: string(name='RegionId'),
      DBInstanceStorage?: int32(name='DBInstanceStorage'),
      replicaSetName?: string(name='ReplicaSetName'),
      vSwitchId?: string(name='VSwitchId'),
      storageEngine?: string(name='StorageEngine'),
      configserverList?: {
        configserverAttribute?: [ 
        {
          maxIOPS?: int32(name='MaxIOPS'),
          connectString?: string(name='ConnectString'),
          nodeClass?: string(name='NodeClass'),
          maxConnections?: int32(name='MaxConnections'),
          port?: int32(name='Port'),
          nodeDescription?: string(name='NodeDescription'),
          nodeId?: string(name='NodeId'),
          nodeStorage?: int32(name='NodeStorage'),
        }
      ](name='ConfigserverAttribute')
      }(name='ConfigserverList'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      maxConnections?: int32(name='MaxConnections'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      engine?: string(name='Engine'),
      readonlyReplicas?: string(name='ReadonlyReplicas'),
      replicationFactor?: string(name='ReplicationFactor'),
      kindCode?: string(name='KindCode'),
    }
  ](name='DBInstance')
  }(name='DBInstances'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceAttribute', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceEncryptionKeyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  encryptionKey?: string(name='EncryptionKey'),
}

model DescribeDBInstanceEncryptionKeyResponseBody = {
  origin?: string(name='Origin'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  encryptionKeyStatus?: string(name='EncryptionKeyStatus'),
  materialExpireTime?: string(name='MaterialExpireTime'),
  keyUsage?: string(name='KeyUsage'),
  encryptionKey?: string(name='EncryptionKey'),
  creator?: string(name='Creator'),
  deleteDate?: string(name='DeleteDate'),
}

model DescribeDBInstanceEncryptionKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceEncryptionKeyResponseBody(name='body'),
}

async function describeDBInstanceEncryptionKeyWithOptions(request: DescribeDBInstanceEncryptionKeyRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceEncryptionKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceEncryptionKey', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceEncryptionKey(request: DescribeDBInstanceEncryptionKeyRequest): DescribeDBInstanceEncryptionKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceEncryptionKeyWithOptions(request, runtime);
}

model DescribeDBInstanceMonitorRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceMonitorResponseBody = {
  requestId?: string(name='RequestId'),
  granularity?: string(name='Granularity'),
}

model DescribeDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceMonitorResponseBody(name='body'),
}

async function describeDBInstanceMonitorWithOptions(request: DescribeDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceMonitor', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceMonitor(request: DescribeDBInstanceMonitorRequest): DescribeDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceMonitorWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  key?: string(name='Key'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  roleId?: string(name='RoleId'),
  replicaSetRole?: string(name='ReplicaSetRole'),
}

model DescribeDBInstancePerformanceResponseBody = {
  performanceKeys?: {
    performanceKey?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      valueFormat?: string(name='ValueFormat'),
      performanceValues?: {
        performanceValue?: [ 
        {
          value?: string(name='Value'),
          date?: string(name='Date'),
        }
      ](name='PerformanceValue')
      }(name='PerformanceValues'),
    }
  ](name='PerformanceKey')
  }(name='PerformanceKeys'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstancePerformance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  DBInstanceId?: string(name='DBInstanceId'),
  replicationFactor?: string(name='ReplicationFactor'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  expireTime?: string(name='ExpireTime'),
  DBInstanceStatus?: string(name='DBInstanceStatus'),
  DBInstanceType?: string(name='DBInstanceType'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  chargeType?: string(name='ChargeType'),
  zoneId?: string(name='ZoneId'),
  expired?: string(name='Expired'),
  connectionDomain?: string(name='ConnectionDomain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  DBInstances?: {
    DBInstance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      chargeType?: string(name='ChargeType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcAuthMode?: string(name='VpcAuthMode'),
      networkType?: string(name='NetworkType'),
      lockMode?: string(name='LockMode'),
      engineVersion?: string(name='EngineVersion'),
      mongosList?: {
        mongosAttribute?: [ 
        {
          nodeClass?: string(name='NodeClass'),
          nodeDescription?: string(name='NodeDescription'),
          nodeId?: string(name='NodeId'),
        }
      ](name='MongosAttribute')
      }(name='MongosList'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      expireTime?: string(name='ExpireTime'),
      DBInstanceType?: string(name='DBInstanceType'),
      lastDowngradeTime?: string(name='LastDowngradeTime'),
      shardList?: {
        shardAttribute?: [ 
        {
          nodeClass?: string(name='NodeClass'),
          nodeDescription?: string(name='NodeDescription'),
          nodeStorage?: int32(name='NodeStorage'),
          nodeId?: string(name='NodeId'),
          readonlyReplicas?: int32(name='ReadonlyReplicas'),
        }
      ](name='ShardAttribute')
      }(name='ShardList'),
      destroyTime?: string(name='DestroyTime'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      regionId?: string(name='RegionId'),
      DBInstanceStorage?: int32(name='DBInstanceStorage'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      engine?: string(name='Engine'),
      replicationFactor?: string(name='ReplicationFactor'),
      kindCode?: string(name='KindCode'),
    }
  ](name='DBInstance')
  }(name='DBInstances'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstances', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceSSLResponseBody = {
  SSLExpiredTime?: string(name='SSLExpiredTime'),
  SSLStatus?: string(name='SSLStatus'),
  requestId?: string(name='RequestId'),
  certCommonName?: string(name='CertCommonName'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceSSL', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeDBInstanceTDEInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceTDEInfoResponseBody = {
  TDEStatus?: string(name='TDEStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceTDEInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTDEInfoResponseBody(name='body'),
}

async function describeDBInstanceTDEInfoWithOptions(request: DescribeDBInstanceTDEInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceTDEInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceTDEInfo', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceTDEInfo(request: DescribeDBInstanceTDEInfoRequest): DescribeDBInstanceTDEInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceTDEInfoWithOptions(request, runtime);
}

model DescribeDedicatedClusterInstanceListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceNetType?: string(name='InstanceNetType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  clusterId?: string(name='ClusterId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDedicatedClusterInstanceListResponseBody = {
  instances?: {
    dbInstance?: [ 
    {
      vpcId?: string(name='VpcId'),
      characterType?: string(name='CharacterType'),
      vswitchId?: string(name='VswitchId'),
      maintainStartTime?: string(name='MaintainStartTime'),
      instanceClass?: string(name='InstanceClass'),
      createTime?: string(name='CreateTime'),
      maintainEndTime?: string(name='MaintainEndTime'),
      storageType?: string(name='StorageType'),
      instanceNodeList?: {
        instanceNodes?: [ 
        {
          nodeIp?: string(name='NodeIp'),
          dedicatedHostName?: string(name='DedicatedHostName'),
          insName?: string(name='InsName'),
          nodeType?: string(name='NodeType'),
          zoneId?: string(name='ZoneId'),
          role?: string(name='Role'),
          port?: int32(name='Port'),
          nodeId?: int32(name='NodeId'),
        }
      ](name='InstanceNodes')
      }(name='InstanceNodeList'),
      instanceId?: string(name='InstanceId'),
      engineVersion?: string(name='EngineVersion'),
      regionId?: string(name='RegionId'),
      instanceName?: string(name='InstanceName'),
      region?: string(name='Region'),
      zoneId?: string(name='ZoneId'),
      clusterName?: string(name='ClusterName'),
      instanceStatus?: string(name='InstanceStatus'),
      engine?: string(name='Engine'),
      customId?: string(name='CustomId'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='dbInstance')
  }(name='Instances'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDedicatedClusterInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedClusterInstanceListResponseBody(name='body'),
}

async function describeDedicatedClusterInstanceListWithOptions(request: DescribeDedicatedClusterInstanceListRequest, runtime: Util.RuntimeOptions): DescribeDedicatedClusterInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedClusterInstanceList', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedClusterInstanceList(request: DescribeDedicatedClusterInstanceListRequest): DescribeDedicatedClusterInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedClusterInstanceListWithOptions(request, runtime);
}

model DescribeErrorLogRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  roleType?: string(name='RoleType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeErrorLogRecordsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    logRecords?: [ 
    {
      connInfo?: string(name='ConnInfo'),
      createTime?: string(name='CreateTime'),
      category?: string(name='Category'),
      content?: string(name='Content'),
      id?: int32(name='Id'),
    }
  ](name='LogRecords')
  }(name='Items'),
  engine?: string(name='Engine'),
}

model DescribeErrorLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeErrorLogRecordsResponseBody(name='body'),
}

async function describeErrorLogRecordsWithOptions(request: DescribeErrorLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeErrorLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeErrorLogRecords', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeErrorLogRecords(request: DescribeErrorLogRecordsRequest): DescribeErrorLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeErrorLogRecordsWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewalAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceType?: string(name='DBInstanceType'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeInstanceAutoRenewalAttributeResponseBody = {
  itemsNumbers?: int32(name='ItemsNumbers'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    item?: [ 
    {
      DBInstanceType?: string(name='DBInstanceType'),
      autoRenew?: string(name='AutoRenew'),
      duration?: string(name='Duration'),
      dbInstanceId?: string(name='DbInstanceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAutoRenewalAttribute', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model DescribeKernelReleaseNotesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  kernelVersion?: string(name='KernelVersion'),
}

model DescribeKernelReleaseNotesResponseBody = {
  requestId?: string(name='RequestId'),
  releaseNotes?: {
    releaseNote?: [ 
    {
      releaseNote?: string(name='ReleaseNote'),
      kernelVersion?: string(name='KernelVersion'),
    }
  ](name='ReleaseNote')
  }(name='ReleaseNotes'),
}

model DescribeKernelReleaseNotesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKernelReleaseNotesResponseBody(name='body'),
}

async function describeKernelReleaseNotesWithOptions(request: DescribeKernelReleaseNotesRequest, runtime: Util.RuntimeOptions): DescribeKernelReleaseNotesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeKernelReleaseNotes', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeKernelReleaseNotes(request: DescribeKernelReleaseNotesRequest): DescribeKernelReleaseNotesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKernelReleaseNotesWithOptions(request, runtime);
}

model DescribeMongoDBLogConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeMongoDBLogConfigResponseBody = {
  userProjectName?: string(name='UserProjectName'),
  requestId?: string(name='RequestId'),
  isUserProjectLogstoreExist?: int32(name='IsUserProjectLogstoreExist'),
  isEtlMetaExist?: int32(name='IsEtlMetaExist'),
}

model DescribeMongoDBLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMongoDBLogConfigResponseBody(name='body'),
}

async function describeMongoDBLogConfigWithOptions(request: DescribeMongoDBLogConfigRequest, runtime: Util.RuntimeOptions): DescribeMongoDBLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMongoDBLogConfig', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMongoDBLogConfig(request: DescribeMongoDBLogConfigRequest): DescribeMongoDBLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMongoDBLogConfigWithOptions(request, runtime);
}

model DescribeParameterModificationHistoryRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  characterType?: string(name='CharacterType'),
}

model DescribeParameterModificationHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  historicalParameters?: {
    historicalParameter?: [ 
    {
      parameterName?: string(name='ParameterName'),
      oldParameterValue?: string(name='OldParameterValue'),
      newParameterValue?: string(name='NewParameterValue'),
      modifyTime?: string(name='ModifyTime'),
    }
  ](name='HistoricalParameter')
  }(name='HistoricalParameters'),
}

model DescribeParameterModificationHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterModificationHistoryResponseBody(name='body'),
}

async function describeParameterModificationHistoryWithOptions(request: DescribeParameterModificationHistoryRequest, runtime: Util.RuntimeOptions): DescribeParameterModificationHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterModificationHistory', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterModificationHistory(request: DescribeParameterModificationHistoryRequest): DescribeParameterModificationHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterModificationHistoryWithOptions(request, runtime);
}

model DescribeParametersRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  characterType?: string(name='CharacterType'),
}

model DescribeParametersResponseBody = {
  runningParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceRestart?: string(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
      modifiableStatus?: string(name='ModifiableStatus'),
    }
  ](name='Parameter')
  }(name='RunningParameters'),
  engineVersion?: string(name='EngineVersion'),
  requestId?: string(name='RequestId'),
  configParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceRestart?: boolean(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
      modifiableStatus?: boolean(name='ModifiableStatus'),
    }
  ](name='Parameter')
  }(name='ConfigParameters'),
  engine?: string(name='Engine'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameters', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeParameterTemplatesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
}

model DescribeParameterTemplatesResponseBody = {
  parameterCount?: string(name='ParameterCount'),
  engineVersion?: string(name='EngineVersion'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceModify?: boolean(name='ForceModify'),
      forceRestart?: boolean(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
    }
  ](name='TemplateRecord')
  }(name='Parameters'),
  requestId?: string(name='RequestId'),
  engine?: string(name='Engine'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: Util.RuntimeOptions): DescribeParameterTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterTemplates', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterTemplatesWithOptions(request, runtime);
}

model DescribePriceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  orderType?: string(name='OrderType'),
  DBInstances?: string(name='DBInstances'),
  commodityCode?: string(name='CommodityCode'),
  productCode?: string(name='ProductCode'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  orderParamOut?: string(name='OrderParamOut'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribePriceResponseBody = {
  order?: {
    coupons?: {
      coupon?: [ 
      {
        description?: string(name='Description'),
        isSelected?: string(name='IsSelected'),
        couponNo?: string(name='CouponNo'),
        name?: string(name='Name'),
      }
    ](name='Coupon')
    }(name='Coupons'),
    originalAmount?: string(name='OriginalAmount'),
    discountAmount?: string(name='DiscountAmount'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds'),
    tradeAmount?: string(name='TradeAmount'),
    currency?: string(name='Currency'),
  }(name='Order'),
  requestId?: string(name='RequestId'),
  subOrders?: {
    subOrder?: [ 
    {
      originalAmount?: string(name='OriginalAmount'),
      discountAmount?: string(name='DiscountAmount'),
      ruleIds?: {
        ruleId?: [ string ](name='RuleId')
      }(name='RuleIds'),
      tradeAmount?: string(name='TradeAmount'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='SubOrder')
  }(name='SubOrders'),
  traceId?: string(name='TraceId'),
  orderParams?: string(name='OrderParams'),
  rules?: {
    rule?: [ 
    {
      ruleDescId?: long(name='RuleDescId'),
      title?: string(name='Title'),
      name?: string(name='Name'),
    }
  ](name='Rule')
  }(name='Rules'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrice', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    ddsRegion?: [ 
    {
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneName?: string(name='ZoneName'),
        }
      ](name='Zone')
      }(name='Zones'),
      regionId?: string(name='RegionId'),
    }
  ](name='DdsRegion')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeReplicaSetRoleRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeReplicaSetRoleResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceId?: string(name='DBInstanceId'),
  replicaSets?: {
    replicaSet?: [ 
    {
      connectionPort?: string(name='ConnectionPort'),
      replicaSetRole?: string(name='ReplicaSetRole'),
      expiredTime?: string(name='ExpiredTime'),
      connectionDomain?: string(name='ConnectionDomain'),
      networkType?: string(name='NetworkType'),
      roleId?: string(name='RoleId'),
    }
  ](name='ReplicaSet')
  }(name='ReplicaSets'),
}

model DescribeReplicaSetRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReplicaSetRoleResponseBody(name='body'),
}

async function describeReplicaSetRoleWithOptions(request: DescribeReplicaSetRoleRequest, runtime: Util.RuntimeOptions): DescribeReplicaSetRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeReplicaSetRole', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeReplicaSetRole(request: DescribeReplicaSetRoleRequest): DescribeReplicaSetRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReplicaSetRoleWithOptions(request, runtime);
}

model DescribeRoleZoneInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeRoleZoneInfoResponseBody = {
  requestId?: string(name='RequestId'),
  zoneInfos?: {
    zoneInfo?: [ 
    {
      insName?: string(name='InsName'),
      nodeType?: string(name='NodeType'),
      roleType?: string(name='RoleType'),
      zoneId?: string(name='ZoneId'),
      roleId?: string(name='RoleId'),
    }
  ](name='ZoneInfo')
  }(name='ZoneInfos'),
}

model DescribeRoleZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoleZoneInfoResponseBody(name='body'),
}

async function describeRoleZoneInfoWithOptions(request: DescribeRoleZoneInfoRequest, runtime: Util.RuntimeOptions): DescribeRoleZoneInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoleZoneInfo', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoleZoneInfo(request: DescribeRoleZoneInfoRequest): DescribeRoleZoneInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoleZoneInfoWithOptions(request, runtime);
}

model DescribeRunningLogRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  roleType?: string(name='RoleType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  orderType?: string(name='OrderType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  roleId?: string(name='RoleId'),
}

model DescribeRunningLogRecordsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    logRecords?: [ 
    {
      connInfo?: string(name='ConnInfo'),
      createTime?: string(name='CreateTime'),
      category?: string(name='Category'),
      content?: string(name='Content'),
      id?: int32(name='Id'),
    }
  ](name='LogRecords')
  }(name='Items'),
  engine?: string(name='Engine'),
}

model DescribeRunningLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRunningLogRecordsResponseBody(name='body'),
}

async function describeRunningLogRecordsWithOptions(request: DescribeRunningLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeRunningLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRunningLogRecords', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRunningLogRecords(request: DescribeRunningLogRecordsRequest): DescribeRunningLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRunningLogRecordsWithOptions(request, runtime);
}

model DescribeSecurityGroupConfigurationRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSecurityGroupConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    rdsEcsSecurityGroupRel?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
      netType?: string(name='NetType'),
      regionId?: string(name='RegionId'),
    }
  ](name='RdsEcsSecurityGroupRel')
  }(name='Items'),
}

model DescribeSecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupConfigurationResponseBody(name='body'),
}

async function describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroupConfiguration', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupConfigurationWithOptions(request, runtime);
}

model DescribeSecurityIpsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSecurityIpsResponseBody = {
  securityIps?: string(name='SecurityIps'),
  requestId?: string(name='RequestId'),
  securityIpGroups?: {
    securityIpGroup?: [ 
    {
      securityIpGroupName?: string(name='SecurityIpGroupName'),
      securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute'),
      securityIpList?: string(name='SecurityIpList'),
    }
  ](name='SecurityIpGroup')
  }(name='SecurityIpGroups'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIpsWithOptions(request: DescribeSecurityIpsRequest, runtime: Util.RuntimeOptions): DescribeSecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityIps', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIpsWithOptions(request, runtime);
}

model DescribeShardingNetworkAddressRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
}

model DescribeShardingNetworkAddressResponseBody = {
  compatibleConnections?: {
    compatibleConnection?: [ 
    {
      vswitchId?: string(name='VswitchId'),
      expiredTime?: string(name='ExpiredTime'),
      networkType?: string(name='NetworkType'),
      port?: string(name='Port'),
      networkAddress?: string(name='NetworkAddress'),
      VPCId?: string(name='VPCId'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='CompatibleConnection')
  }(name='CompatibleConnections'),
  requestId?: string(name='RequestId'),
  networkAddresses?: {
    networkAddress?: [ 
    {
      nodeType?: string(name='NodeType'),
      vswitchId?: string(name='VswitchId'),
      expiredTime?: string(name='ExpiredTime'),
      networkType?: string(name='NetworkType'),
      role?: string(name='Role'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      networkAddress?: string(name='NetworkAddress'),
      nodeId?: string(name='NodeId'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='NetworkAddress')
  }(name='NetworkAddresses'),
}

model DescribeShardingNetworkAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardingNetworkAddressResponseBody(name='body'),
}

async function describeShardingNetworkAddressWithOptions(request: DescribeShardingNetworkAddressRequest, runtime: Util.RuntimeOptions): DescribeShardingNetworkAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeShardingNetworkAddress', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeShardingNetworkAddress(request: DescribeShardingNetworkAddressRequest): DescribeShardingNetworkAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardingNetworkAddressWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  orderType?: string(name='OrderType'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlowLogRecordsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    logRecords?: [ 
    {
      executionStartTime?: string(name='ExecutionStartTime'),
      hostAddress?: string(name='HostAddress'),
      queryTimes?: string(name='QueryTimes'),
      tableName?: string(name='TableName'),
      SQLText?: string(name='SQLText'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      keysExamined?: long(name='KeysExamined'),
      DBName?: string(name='DBName'),
      docsExamined?: long(name='DocsExamined'),
      accountName?: string(name='AccountName'),
    }
  ](name='LogRecords')
  }(name='Items'),
  engine?: string(name='Engine'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogRecords', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DestroyInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  DBInstanceId?: string(name='DBInstanceId'),
  clientToken?: string(name='ClientToken'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DestroyInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DestroyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyInstanceResponseBody(name='body'),
}

async function destroyInstanceWithOptions(request: DestroyInstanceRequest, runtime: Util.RuntimeOptions): DestroyInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DestroyInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function destroyInstance(request: DestroyInstanceRequest): DestroyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyInstanceWithOptions(request, runtime);
}

model EvaluateResourceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  shardsInfo?: string(name='ShardsInfo'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model EvaluateResourceResponseBody = {
  DBInstanceAvailable?: string(name='DBInstanceAvailable'),
  engineVersion?: string(name='EngineVersion'),
  requestId?: string(name='RequestId'),
  engine?: string(name='Engine'),
}

model EvaluateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: EvaluateResourceResponseBody(name='body'),
}

async function evaluateResourceWithOptions(request: EvaluateResourceRequest, runtime: Util.RuntimeOptions): EvaluateResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EvaluateResource', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function evaluateResource(request: EvaluateResourceRequest): EvaluateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return evaluateResourceWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model MigrateAvailableZoneRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  zoneId?: string(name='ZoneId'),
  vswitch?: string(name='Vswitch'),
  effectiveTime?: string(name='EffectiveTime'),
}

model MigrateAvailableZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateAvailableZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateAvailableZoneResponseBody(name='body'),
}

async function migrateAvailableZoneWithOptions(request: MigrateAvailableZoneRequest, runtime: Util.RuntimeOptions): MigrateAvailableZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateAvailableZone', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateAvailableZone(request: MigrateAvailableZoneRequest): MigrateAvailableZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateAvailableZoneWithOptions(request, runtime);
}

model MigrateToOtherZoneRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  zoneId?: string(name='ZoneId'),
  ownerAccount?: string(name='OwnerAccount'),
  effectiveTime?: string(name='EffectiveTime'),
  vSwitchId?: string(name='VSwitchId'),
}

model MigrateToOtherZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateToOtherZoneResponseBody(name='body'),
}

async function migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: Util.RuntimeOptions): MigrateToOtherZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateToOtherZone', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateToOtherZoneWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAuditLogFilterRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  filter?: string(name='Filter'),
  roleType?: string(name='RoleType'),
}

model ModifyAuditLogFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAuditLogFilterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditLogFilterResponseBody(name='body'),
}

async function modifyAuditLogFilterWithOptions(request: ModifyAuditLogFilterRequest, runtime: Util.RuntimeOptions): ModifyAuditLogFilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAuditLogFilter', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAuditLogFilter(request: ModifyAuditLogFilterRequest): ModifyAuditLogFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditLogFilterWithOptions(request, runtime);
}

model ModifyAuditPolicyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  auditStatus?: string(name='AuditStatus'),
  storagePeriod?: int32(name='StoragePeriod'),
}

model ModifyAuditPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAuditPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditPolicyResponseBody(name='body'),
}

async function modifyAuditPolicyWithOptions(request: ModifyAuditPolicyRequest, runtime: Util.RuntimeOptions): ModifyAuditPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAuditPolicy', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAuditPolicy(request: ModifyAuditPolicyRequest): ModifyAuditPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditPolicyWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  newConnectionString?: string(name='NewConnectionString'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceConnectionString', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceDescription', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  maintainStartTime?: string(name='MaintainStartTime'),
  maintainEndTime?: string(name='MaintainEndTime'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceMaintainTime', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceMonitorRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  granularity?: string(name='Granularity'),
}

model ModifyDBInstanceMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMonitorResponseBody(name='body'),
}

async function modifyDBInstanceMonitorWithOptions(request: ModifyDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceMonitor', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceMonitor(request: ModifyDBInstanceMonitorRequest): ModifyDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMonitorWithOptions(request, runtime);
}

model ModifyDBInstanceNetExpireTimeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionString?: string(name='ConnectionString'),
  classicExpendExpiredDays?: int32(name='ClassicExpendExpiredDays'),
}

model ModifyDBInstanceNetExpireTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceNetExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceNetExpireTimeResponseBody(name='body'),
}

async function modifyDBInstanceNetExpireTimeWithOptions(request: ModifyDBInstanceNetExpireTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetExpireTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceNetExpireTime', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceNetExpireTime(request: ModifyDBInstanceNetExpireTimeRequest): ModifyDBInstanceNetExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetExpireTimeWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkTypeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  retainClassic?: string(name='RetainClassic'),
  classicExpiredDays?: int32(name='ClassicExpiredDays'),
}

model ModifyDBInstanceNetworkTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceNetworkTypeResponseBody(name='body'),
}

async function modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceNetworkType', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkTypeWithOptions(request, runtime);
}

model ModifyDBInstanceSpecRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: string(name='DBInstanceStorage'),
  orderType?: string(name='OrderType'),
  autoPay?: boolean(name='AutoPay'),
  businessInfo?: string(name='BusinessInfo'),
  replicationFactor?: string(name='ReplicationFactor'),
  readonlyReplicas?: string(name='ReadonlyReplicas'),
  couponNo?: string(name='CouponNo'),
  effectiveTime?: string(name='EffectiveTime'),
}

model ModifyDBInstanceSpecResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyDBInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSpecResponseBody(name='body'),
}

async function modifyDBInstanceSpecWithOptions(request: ModifyDBInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceSpec', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceSpec(request: ModifyDBInstanceSpecRequest): ModifyDBInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSpecWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  SSLAction?: string(name='SSLAction'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceSSL', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model ModifyDBInstanceTDERequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  TDEStatus?: string(name='TDEStatus'),
  encryptorName?: string(name='EncryptorName'),
  encryptionKey?: string(name='EncryptionKey'),
  roleARN?: string(name='RoleARN'),
}

model ModifyDBInstanceTDEResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceTDEResponseBody(name='body'),
}

async function modifyDBInstanceTDEWithOptions(request: ModifyDBInstanceTDERequest, runtime: Util.RuntimeOptions): ModifyDBInstanceTDEResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceTDE', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceTDE(request: ModifyDBInstanceTDERequest): ModifyDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceTDEWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewalAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  duration?: string(name='Duration'),
  autoRenew?: string(name='AutoRenew'),
}

model ModifyInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAutoRenewalAttribute', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model ModifyInstanceVpcAuthModeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  vpcAuthMode?: string(name='VpcAuthMode'),
}

model ModifyInstanceVpcAuthModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceVpcAuthModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVpcAuthModeResponseBody(name='body'),
}

async function modifyInstanceVpcAuthModeWithOptions(request: ModifyInstanceVpcAuthModeRequest, runtime: Util.RuntimeOptions): ModifyInstanceVpcAuthModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceVpcAuthMode', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceVpcAuthMode(request: ModifyInstanceVpcAuthModeRequest): ModifyInstanceVpcAuthModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVpcAuthModeWithOptions(request, runtime);
}

model ModifyNodeSpecRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  nodeClass?: string(name='NodeClass'),
  nodeStorage?: int32(name='NodeStorage'),
  clientToken?: string(name='ClientToken'),
  fromApp?: string(name='FromApp'),
  autoPay?: boolean(name='AutoPay'),
  effectiveTime?: string(name='EffectiveTime'),
  orderType?: string(name='OrderType'),
  readonlyReplicas?: int32(name='ReadonlyReplicas'),
}

model ModifyNodeSpecResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyNodeSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodeSpecResponseBody(name='body'),
}

async function modifyNodeSpecWithOptions(request: ModifyNodeSpecRequest, runtime: Util.RuntimeOptions): ModifyNodeSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNodeSpec', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNodeSpec(request: ModifyNodeSpecRequest): ModifyNodeSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNodeSpecWithOptions(request, runtime);
}

model ModifyParametersRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  parameters?: string(name='Parameters'),
  characterType?: string(name='CharacterType'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParametersResponseBody(name='body'),
}

async function modifyParametersWithOptions(request: ModifyParametersRequest, runtime: Util.RuntimeOptions): ModifyParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyParameters', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParametersWithOptions(request, runtime);
}

model ModifySecurityGroupConfigurationRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model ModifySecurityGroupConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupConfigurationResponseBody(name='body'),
}

async function modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupConfiguration', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupConfigurationWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  securityIps?: string(name='SecurityIps'),
  modifyMode?: string(name='ModifyMode'),
  securityIpGroupName?: string(name='SecurityIpGroupName'),
  securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityIps', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ReleaseNodePrivateNetworkAddressRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  networkType?: string(name='NetworkType'),
}

model ReleaseNodePrivateNetworkAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseNodePrivateNetworkAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseNodePrivateNetworkAddressResponseBody(name='body'),
}

async function releaseNodePrivateNetworkAddressWithOptions(request: ReleaseNodePrivateNetworkAddressRequest, runtime: Util.RuntimeOptions): ReleaseNodePrivateNetworkAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseNodePrivateNetworkAddress', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseNodePrivateNetworkAddress(request: ReleaseNodePrivateNetworkAddressRequest): ReleaseNodePrivateNetworkAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseNodePrivateNetworkAddressWithOptions(request, runtime);
}

model ReleasePublicNetworkAddressRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
}

model ReleasePublicNetworkAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleasePublicNetworkAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePublicNetworkAddressResponseBody(name='body'),
}

async function releasePublicNetworkAddressWithOptions(request: ReleasePublicNetworkAddressRequest, runtime: Util.RuntimeOptions): ReleasePublicNetworkAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleasePublicNetworkAddress', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releasePublicNetworkAddress(request: ReleasePublicNetworkAddressRequest): ReleasePublicNetworkAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicNetworkAddressWithOptions(request, runtime);
}

model RenewDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  period?: int32(name='Period'),
  autoPay?: boolean(name='AutoPay'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
}

model RenewDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model RenewDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDBInstanceResponseBody(name='body'),
}

async function renewDBInstanceWithOptions(request: RenewDBInstanceRequest, runtime: Util.RuntimeOptions): RenewDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewDBInstance(request: RenewDBInstanceRequest): RenewDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDBInstanceWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccountPassword', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model RestoreDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: int32(name='BackupId'),
}

model RestoreDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreDBInstanceResponseBody(name='body'),
}

async function restoreDBInstanceWithOptions(request: RestoreDBInstanceRequest, runtime: Util.RuntimeOptions): RestoreDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestoreDBInstance', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restoreDBInstance(request: RestoreDBInstanceRequest): RestoreDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreDBInstanceWithOptions(request, runtime);
}

model SwitchDBInstanceHARequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  roleIds?: string(name='RoleIds'),
  switchMode?: int32(name='SwitchMode'),
}

model SwitchDBInstanceHAResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceHAResponseBody(name='body'),
}

async function switchDBInstanceHAWithOptions(request: SwitchDBInstanceHARequest, runtime: Util.RuntimeOptions): SwitchDBInstanceHAResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchDBInstanceHA', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchDBInstanceHA(request: SwitchDBInstanceHARequest): SwitchDBInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceHAWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TransformToPrePaidRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
  autoPay?: boolean(name='AutoPay'),
  fromApp?: string(name='FromApp'),
  businessInfo?: string(name='BusinessInfo'),
  autoRenew?: string(name='AutoRenew'),
  couponNo?: string(name='CouponNo'),
}

model TransformToPrePaidResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model TransformToPrePaidResponse = {
  headers: map[string]string(name='headers'),
  body: TransformToPrePaidResponseBody(name='body'),
}

async function transformToPrePaidWithOptions(request: TransformToPrePaidRequest, runtime: Util.RuntimeOptions): TransformToPrePaidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransformToPrePaid', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transformToPrePaid(request: TransformToPrePaidRequest): TransformToPrePaidResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformToPrePaidWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeDBInstanceEngineVersionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  engineVersion?: string(name='EngineVersion'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

async function upgradeDBInstanceEngineVersionWithOptions(request: UpgradeDBInstanceEngineVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceEngineVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBInstanceEngineVersion', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceEngineVersionWithOptions(request, runtime);
}

model UpgradeDBInstanceKernelVersionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBInstanceKernelVersionWithOptions(request: UpgradeDBInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceKernelVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBInstanceKernelVersion', '2015-12-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceKernelVersionWithOptions(request, runtime);
}

