/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('nis', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAndAnalyzeNetworkPathRequest {
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **tcp**: Transmission Control Protocol (TCP)
*   **udp**: User Datagram Protocol (UDP)
*   **icmp**: Internet Control Message Protocol (ICMP)', example='tcp'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to initiate a task for analyzing network reachability.', example='cn-shanghai'),
  sourceId?: string(name='SourceId', description='The ID of the source resource.', example='i-uf62y8khhbkbdrp6****'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='192.168.XX.XX'),
  sourcePort?: int32(name='SourcePort', description='The source port.', example='0'),
  sourceType?: string(name='SourceType', description='The type of the source resource. Valid values:

*   **ecs**: the Elastic Compute Service (ECS) instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the virtual border router (VBR)', example='ecs'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-m5eactvw7wtpktv5****'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='172.50.XX.XX'),
  targetPort?: int32(name='TargetPort', description='The destination port.', example='80'),
  targetType?: string(name='TargetType', description='The type of the destination resource. Valid values:

*   **ecs**: the ECS instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the VBR
*   **clb**: the Classic Load Balancer (CLB) instance', example='ecs'),
}

model CreateAndAnalyzeNetworkPathResponseBody = {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability that you initiated.', example='nra-dfe9e53d2b524568****'),
  protocol?: string(name='Protocol', description='The protocol type.', example='tcp'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  sourceId?: string(name='SourceId', description='The ID of the source resource.', example='i-uf62y8khhbkbdrp6****'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='192.168.XX.XX'),
  sourcePort?: string(name='SourcePort', description='The source port.', example='0'),
  sourceType?: string(name='SourceType', description='The type of the source resource.', example='ecs'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-m5eactvw7wtpktv5****'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='172.50.XX.XX'),
  targetPort?: string(name='TargetPort', description='The destination port.', example='80'),
  targetType?: string(name='TargetType', description='The type of the destination resource.', example='ecs'),
}

model CreateAndAnalyzeNetworkPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAndAnalyzeNetworkPathResponseBody(name='body'),
}

/**
  * You can call this operation to initiate a task for analyzing network reachability by specifying only the information about the source and destination. You do not need to create a network path for reachability analysis. The analysis result is not recorded in the system. If you want to record the path parameters and analysis result in the Network Intelligence Service (NIS) console, we recommend that you call the **createNetworkReachableAnalysis** operation.
  *
  * @param request CreateAndAnalyzeNetworkPathRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAndAnalyzeNetworkPathResponse
 */
async function createAndAnalyzeNetworkPathWithOptions(request: CreateAndAnalyzeNetworkPathRequest, runtime: Util.RuntimeOptions): CreateAndAnalyzeNetworkPathResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAndAnalyzeNetworkPath',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to initiate a task for analyzing network reachability by specifying only the information about the source and destination. You do not need to create a network path for reachability analysis. The analysis result is not recorded in the system. If you want to record the path parameters and analysis result in the Network Intelligence Service (NIS) console, we recommend that you call the **createNetworkReachableAnalysis** operation.
  *
  * @param request CreateAndAnalyzeNetworkPathRequest
  * @return CreateAndAnalyzeNetworkPathResponse
 */
async function createAndAnalyzeNetworkPath(request: CreateAndAnalyzeNetworkPathRequest): CreateAndAnalyzeNetworkPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAndAnalyzeNetworkPathWithOptions(request, runtime);
}

model CreateNetworkPathRequest {
  networkPathDescription?: string(name='NetworkPathDescription', description='The description of the network path.', example='Analyze the path from ECS to ECS'),
  networkPathName?: string(name='NetworkPathName', description='The name of the network path.', example='ecs2PublicIp'),
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **tcp**: Transmission Control Protocol (TCP)
*   **udp**: User Datagram Protocol (UDP)
*   **icmp**: Internet Control Message Protocol (ICMP)', example='tcp'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to create.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceId?: string(name='SourceId', description='The ID of the source resource.', example='i-2zef4ngqfarepyun****'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='172.17.XX.XX'),
  sourcePort?: int32(name='SourcePort', description='The source port.', example='443'),
  sourceType?: string(name='SourceType', description='The type of the source resource. Valid values:

*   **ecs**: the Elastic Compute Service (ECS) instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the virtual border router (VBR)', example='ecs'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.

You can add up to 20 tags in each call.', example='role'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='ops'),
    }
  ](name='Tag', description='The tags to add to the resource.'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-bp13d0e064gubm****'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='192.168.0.210'),
  targetPort?: int32(name='TargetPort', description='The destination port.', example='80'),
  targetType?: string(name='TargetType', description='The type of the destination resource. Valid values:

*   **ecs**: the ECS instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the VBR
*   **clb**: the Classic Load Balancer (CLB) instance', example='ecs'),
}

model CreateNetworkPathResponseBody = {
  networkPathId?: string(name='NetworkPathId', description='The ID of the network path.', example='np-4cbf598673d14d27****'),
  requestId?: string(name='RequestId', description='The request ID.', example='92DD9FFB-06FB-56F7-83EF-5CEF98F5562A'),
}

model CreateNetworkPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkPathResponseBody(name='body'),
}

/**
  * *   You can call the **CreateNetworkPath** operation to create network paths in multiple networking scenarios and between multiple resources. After a path is created, the path parameters are saved for repeated analysis.
  * *   You can create up to 100 network paths within one Alibaba Cloud account.
  *
  * @param request CreateNetworkPathRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNetworkPathResponse
 */
async function createNetworkPathWithOptions(request: CreateNetworkPathRequest, runtime: Util.RuntimeOptions): CreateNetworkPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPathDescription)) {
    query['NetworkPathDescription'] = request.networkPathDescription;
  }
  if (!Util.isUnset(request.networkPathName)) {
    query['NetworkPathName'] = request.networkPathName;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceIpAddress)) {
    query['SourceIpAddress'] = request.sourceIpAddress;
  }
  if (!Util.isUnset(request.sourcePort)) {
    query['SourcePort'] = request.sourcePort;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetIpAddress)) {
    query['TargetIpAddress'] = request.targetIpAddress;
  }
  if (!Util.isUnset(request.targetPort)) {
    query['TargetPort'] = request.targetPort;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkPath',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call the **CreateNetworkPath** operation to create network paths in multiple networking scenarios and between multiple resources. After a path is created, the path parameters are saved for repeated analysis.
  * *   You can create up to 100 network paths within one Alibaba Cloud account.
  *
  * @param request CreateNetworkPathRequest
  * @return CreateNetworkPathResponse
 */
async function createNetworkPath(request: CreateNetworkPathRequest): CreateNetworkPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkPathWithOptions(request, runtime);
}

model CreateNetworkReachableAnalysisRequest {
  networkPathId?: string(name='NetworkPathId', description='The ID of the network path. You can call the **CreateNetworkPath** operation to obtain the ID of the network path.', example='np-b2f618ceb2c84057****'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to create a task for analyzing network reachability.', example='cn-shanghai'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.

You can add up to 20 tags in each call.', example='Team'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='ops'),
    }
  ](name='Tag', description='The tags to add to the resource.'),
}

model CreateNetworkReachableAnalysisResponseBody = {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability.', example='nra-2fede05617494417****'),
  requestId?: string(name='RequestId', description='The request ID.', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model CreateNetworkReachableAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * *   The **CreateNetworkReachableAnalysis** operation is used to create a task for analyzing the reachability of the network path that is created by calling the **CreateNetworkPath** operation and record the analysis results.
  * *   The **CreateNetworkReachableAnalysis** operation can be called to repeatedly analyze the reachability of a network path.
  * *   You can create up to 1,000 reachability analysis records within one Alibaba Cloud account.
  *
  * @param request CreateNetworkReachableAnalysisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNetworkReachableAnalysisResponse
 */
async function createNetworkReachableAnalysisWithOptions(request: CreateNetworkReachableAnalysisRequest, runtime: Util.RuntimeOptions): CreateNetworkReachableAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPathId)) {
    query['NetworkPathId'] = request.networkPathId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkReachableAnalysis',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The **CreateNetworkReachableAnalysis** operation is used to create a task for analyzing the reachability of the network path that is created by calling the **CreateNetworkPath** operation and record the analysis results.
  * *   The **CreateNetworkReachableAnalysis** operation can be called to repeatedly analyze the reachability of a network path.
  * *   You can create up to 1,000 reachability analysis records within one Alibaba Cloud account.
  *
  * @param request CreateNetworkReachableAnalysisRequest
  * @return CreateNetworkReachableAnalysisResponse
 */
async function createNetworkReachableAnalysis(request: CreateNetworkReachableAnalysisRequest): CreateNetworkReachableAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkReachableAnalysisWithOptions(request, runtime);
}

model DeleteNetworkPathRequest {
  networkPathIds?: [ string ](name='NetworkPathIds', description='The IDs of network paths.'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to delete.', example='cn-shanghai'),
}

model DeleteNetworkPathShrinkRequest {
  networkPathIdsShrink?: string(name='NetworkPathIds', description='The IDs of network paths.'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to delete.', example='cn-shanghai'),
}

model DeleteNetworkPathResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C4331873-C534-590F-A905-F66C53B88A47'),
}

model DeleteNetworkPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkPathResponseBody(name='body'),
}

async function deleteNetworkPathWithOptions(tmpReq: DeleteNetworkPathRequest, runtime: Util.RuntimeOptions): DeleteNetworkPathResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteNetworkPathShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.networkPathIds)) {
    request.networkPathIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.networkPathIds, 'NetworkPathIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.networkPathIdsShrink)) {
    query['NetworkPathIds'] = request.networkPathIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkPath',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkPath(request: DeleteNetworkPathRequest): DeleteNetworkPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkPathWithOptions(request, runtime);
}

model DeleteNetworkReachableAnalysisRequest {
  networkReachableAnalysisIds?: [ string ](name='NetworkReachableAnalysisIds', description='The IDs of the tasks for analyzing network reachability.'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to delete a task for analyzing network reachability.', example='cn-shanghai'),
}

model DeleteNetworkReachableAnalysisShrinkRequest {
  networkReachableAnalysisIdsShrink?: string(name='NetworkReachableAnalysisIds', description='The IDs of the tasks for analyzing network reachability.'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to delete a task for analyzing network reachability.', example='cn-shanghai'),
}

model DeleteNetworkReachableAnalysisResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4838F3F2-30E1-5D82-B25A-B9FE33BC3E25'),
}

model DeleteNetworkReachableAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkReachableAnalysisResponseBody(name='body'),
}

async function deleteNetworkReachableAnalysisWithOptions(tmpReq: DeleteNetworkReachableAnalysisRequest, runtime: Util.RuntimeOptions): DeleteNetworkReachableAnalysisResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteNetworkReachableAnalysisShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.networkReachableAnalysisIds)) {
    request.networkReachableAnalysisIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.networkReachableAnalysisIds, 'NetworkReachableAnalysisIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.networkReachableAnalysisIdsShrink)) {
    query['NetworkReachableAnalysisIds'] = request.networkReachableAnalysisIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkReachableAnalysis',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkReachableAnalysis(request: DeleteNetworkReachableAnalysisRequest): DeleteNetworkReachableAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkReachableAnalysisWithOptions(request, runtime);
}

model GetInternetTupleRequest {
  accountIds?: [ string ](name='AccountIds', description='The IDs of member accounts.'),
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684373600099'),
  cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX'),
  cloudIsp?: string(name='CloudIsp', description='The local Internet service provider (ISP).

> In most cases, the value is Alibaba or Alibaba Cloud.', example='Alibaba'),
  cloudPort?: string(name='CloudPort', description='The local port.

>  This parameter is required only if you set the **TupleType** parameter to **5**.', example='443'),
  direction?: string(name='Direction', description='The direction of the Internet traffic that you want to query. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
  endTime?: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684373700099'),
  instanceId?: string(name='InstanceId', description='The ID of the Alibaba Cloud instance.', example='eip-sample*'),
  instanceList?: [ string ](name='InstanceList', description='The instance IDs for filtering.'),
  orderBy?: string(name='OrderBy', description='The metric for data ranking. Default value: **ByteCount**. This value specifies that data is ranked by traffic volume.', example='ByteCount'),
  otherCity?: string(name='OtherCity', description='The remote city.

> This parameter is required only if you set **TupleType** to **5**.', example='Hangzhou'),
  otherCountry?: string(name='OtherCountry', description='The remote country.

> This parameter is required only if you set **TupleType** to **5**.', example='China'),
  otherIp?: string(name='OtherIp', description='The remote IP address.

> This parameter is required only when you set **TupleType** to **2** or **5**.', example='122.112.XX.XX'),
  otherIsp?: string(name='OtherIsp', description='The remote ISP.

> This parameter is required if you want to view the information about the remote ISP.', example='China Mobile'),
  otherPort?: string(name='OtherPort', description='The remote port.

> This parameter is required only when you set **TupleType** to **5**.', example='40002'),
  protocol?: string(name='Protocol', description='The protocol number.

> All protocols are supported. This parameter is required only when you set **TupleType** to **5**.', example='6'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to query the Internet traffic.', example='cn-shanghai'),
  sort?: string(name='Sort', description='The order in which instances are ranked by Internet traffic. Valid values:

*   **desc**: the descending order
*   **asc**: the ascending order', example='desc'),
  topN?: int32(name='TopN', description='Specifies top-N traffic data to display. Default value: **10**. This value specifies to display top-10 traffic data by default.', example='10'),
  tupleType?: int32(name='TupleType', description='The type of the tuple. Valid values:

*   **1**: 1-tuple
*   **2**: 2-tuple
*   **5**: 5-tuple', example='1'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your customer business manager to apply for permissions.', example='false'),
}

model GetInternetTupleShrinkRequest {
  accountIds?: [ string ](name='AccountIds', description='The IDs of member accounts.'),
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684373600099'),
  cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX'),
  cloudIsp?: string(name='CloudIsp', description='The local Internet service provider (ISP).

> In most cases, the value is Alibaba or Alibaba Cloud.', example='Alibaba'),
  cloudPort?: string(name='CloudPort', description='The local port.

>  This parameter is required only if you set the **TupleType** parameter to **5**.', example='443'),
  direction?: string(name='Direction', description='The direction of the Internet traffic that you want to query. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
  endTime?: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684373700099'),
  instanceId?: string(name='InstanceId', description='The ID of the Alibaba Cloud instance.', example='eip-sample*'),
  instanceListShrink?: string(name='InstanceList', description='The instance IDs for filtering.'),
  orderBy?: string(name='OrderBy', description='The metric for data ranking. Default value: **ByteCount**. This value specifies that data is ranked by traffic volume.', example='ByteCount'),
  otherCity?: string(name='OtherCity', description='The remote city.

> This parameter is required only if you set **TupleType** to **5**.', example='Hangzhou'),
  otherCountry?: string(name='OtherCountry', description='The remote country.

> This parameter is required only if you set **TupleType** to **5**.', example='China'),
  otherIp?: string(name='OtherIp', description='The remote IP address.

> This parameter is required only when you set **TupleType** to **2** or **5**.', example='122.112.XX.XX'),
  otherIsp?: string(name='OtherIsp', description='The remote ISP.

> This parameter is required if you want to view the information about the remote ISP.', example='China Mobile'),
  otherPort?: string(name='OtherPort', description='The remote port.

> This parameter is required only when you set **TupleType** to **5**.', example='40002'),
  protocol?: string(name='Protocol', description='The protocol number.

> All protocols are supported. This parameter is required only when you set **TupleType** to **5**.', example='6'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to query the Internet traffic.', example='cn-shanghai'),
  sort?: string(name='Sort', description='The order in which instances are ranked by Internet traffic. Valid values:

*   **desc**: the descending order
*   **asc**: the ascending order', example='desc'),
  topN?: int32(name='TopN', description='Specifies top-N traffic data to display. Default value: **10**. This value specifies to display top-10 traffic data by default.', example='10'),
  tupleType?: int32(name='TupleType', description='The type of the tuple. Valid values:

*   **1**: 1-tuple
*   **2**: 2-tuple
*   **5**: 5-tuple', example='1'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your customer business manager to apply for permissions.', example='false'),
}

model GetInternetTupleResponseBody = {
  data?: [ 
    {
      accessRegion?: string(name='AccessRegion', description='The access point of Alibaba Cloud.

> This parameter is valid only when the value of **InstanceId** is the instance ID of an Anycast elastic IP address (EIP).', example='cn-hongkong-pop'),
      beginTime?: string(name='BeginTime', description='The beginning of the time range that you queried. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684373600099'),
      byteCount?: double(name='ByteCount', description='The traffic volume. Unit: bytes.', example='88'),
      cloudCity?: string(name='CloudCity', description='The local city.', example='Nanjing'),
      cloudCountry?: string(name='CloudCountry', description='The local country or region.', example='China'),
      cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX'),
      cloudIsp?: string(name='CloudIsp', description='The local ISP.', example='China Mobile'),
      cloudPort?: string(name='CloudPort', description='The local port.', example='443'),
      cloudProduct?: string(name='CloudProduct', description='The product code of the instance to which the local IP address belongs.', example='EIP'),
      cloudProvince?: string(name='CloudProvince', description='The local province.', example='Jiangsu'),
      direction?: string(name='Direction', description='The direction of the Internet traffic. Valid values:

- **in**: inbound
- **out**: outbound', example='in'),
      inByteCount?: double(name='InByteCount', description='The inbound traffic volume. Unit: bytes.', example='88'),
      inOutOrderCount?: double(name='InOutOrderCount', description='The number of inbound disordered packets.', example='2'),
      inPacketCount?: double(name='InPacketCount', description='The number of inbound packets.', example='33'),
      inRetranCount?: double(name='InRetranCount', description='The number of inbound repeated packets.', example='0'),
      instanceId?: string(name='InstanceId', description='The instance ID to which the local IP address belongs.', example='eip-sample*'),
      otherCity?: string(name='OtherCity', description='The remote city. In most cases, this parameter is empty if the value of **OtherCountry** is not China.', example='Austin'),
      otherCountry?: string(name='OtherCountry', description='The remote country or region.', example='United States'),
      otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX'),
      otherIsp?: string(name='OtherIsp', description='The remote ISP.', example='amazon.com'),
      otherPort?: string(name='OtherPort', description='The remote port.', example='40002'),
      otherProduct?: string(name='OtherProduct', description='The product code of the instance to which the remote IP address belongs. If the IP address is not in the cloud, this parameter is empty.', example='ECS'),
      otherProvince?: string(name='OtherProvince', description='The remote province. In most cases, this parameter is empty if the value of **OtherCountry** is not China.', example='Texas'),
      outByteCount?: double(name='OutByteCount', description='The outbound traffic volume. Unit: bytes.', example='66'),
      outOrderCount?: double(name='OutOrderCount', description='The number of disordered packets.', example='1'),
      outOutOrderCount?: double(name='OutOutOrderCount', description='The number of outbound disordered packets.', example='1'),
      outPacketCount?: double(name='OutPacketCount', description='The number of outbound packets.', example='22'),
      outRetranCount?: double(name='OutRetranCount', description='The number of outbound repeated packets.', example='1'),
      packetCount?: double(name='PacketCount', description='The number of packets.', example='66'),
      protocol?: string(name='Protocol', description='The protocol number.', example='6'),
      retransmitRate?: double(name='RetransmitRate'),
      rtt?: double(name='Rtt', description='The round-trip time (RTT). Unit: milliseconds.', example='10000'),
    }
  ](name='Data', description='The ranking result of instances by Internet traffic.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
}

model GetInternetTupleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInternetTupleResponseBody(name='body'),
}

async function getInternetTupleWithOptions(tmpReq: GetInternetTupleRequest, runtime: Util.RuntimeOptions): GetInternetTupleResponse {
  Util.validateModel(tmpReq);
  var request = new GetInternetTupleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountIds)) {
    query['AccountIds'] = request.accountIds;
  }
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cloudIp)) {
    query['CloudIp'] = request.cloudIp;
  }
  if (!Util.isUnset(request.cloudIsp)) {
    query['CloudIsp'] = request.cloudIsp;
  }
  if (!Util.isUnset(request.cloudPort)) {
    query['CloudPort'] = request.cloudPort;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceListShrink)) {
    query['InstanceList'] = request.instanceListShrink;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.otherCity)) {
    query['OtherCity'] = request.otherCity;
  }
  if (!Util.isUnset(request.otherCountry)) {
    query['OtherCountry'] = request.otherCountry;
  }
  if (!Util.isUnset(request.otherIp)) {
    query['OtherIp'] = request.otherIp;
  }
  if (!Util.isUnset(request.otherIsp)) {
    query['OtherIsp'] = request.otherIsp;
  }
  if (!Util.isUnset(request.otherPort)) {
    query['OtherPort'] = request.otherPort;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.topN)) {
    query['TopN'] = request.topN;
  }
  if (!Util.isUnset(request.tupleType)) {
    query['TupleType'] = request.tupleType;
  }
  if (!Util.isUnset(request.useMultiAccount)) {
    query['UseMultiAccount'] = request.useMultiAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInternetTuple',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInternetTuple(request: GetInternetTupleRequest): GetInternetTupleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInternetTupleWithOptions(request, runtime);
}

model GetNatTopNRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query in milliseconds. If you do not specify **EndTime**, the point in time specified by **BeginTime** is queried.', example='1638239092000'),
  endTime?: long(name='EndTime', description='The end of the time range to query in milliseconds. The time range specified by **BeginTime** and **EndTime** cannot exceed **86400000** milliseconds (24 hours).', example='1638239093000'),
  ip?: string(name='Ip', description='Query ranking statistics for a specific IP address. If you specify this parameter, you do not need to specify **TopN** or **OrderBy**.', example='192.168.156.101'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-sample***'),
  orderBy?: string(name='OrderBy', description='The metric that is used for real-time SNAT performance ranking. Valid values:

*   **InBps**: inbound data transfer. Unit: bit/s.
*   **OutBps**: outbound data transfer. Unit: bit/s.
*   **InPps**: inbound packet forwarding rate. Unit: packets per second.
*   **OutPps**: outbound packet forwarding rate. Unit: packets per second.
*   **NewSessionPerSecond**: new connection creation rate. Unit: connections per second.
*   **ActiveSessionCount**: number of concurrent connections. Unit: connections.', example='InBps'),
  regionId?: string(name='RegionId', description='The ID of the region in which the NAT gateway is deployed.', example='cn-shanghai'),
  topN?: int32(name='TopN', description='The number of entries to return for real-time SNAT performance ranking. Valid values: **1 to 100**. Default value: **10**.', example='10'),
}

model GetNatTopNResponseBody = {
  isTopNOpen?: boolean(name='IsTopNOpen', description='Indicates whether Network Intelligence Service (NIS) is activated. The NatGatewayTopN parameter returns an empty array when NIS is not activated.

*   **true**: activated
*   **false**: not activated', example='true'),
  natGatewayTopN?: [ 
    {
      activeSessionCount?: float(name='ActiveSessionCount', description='The number of concurrent connections. Unit: connections.', example='8'),
      inBps?: float(name='InBps', description='The inbound data transfer. Unit: bit/s.', example='100'),
      inFlowPerMinute?: float(name='InFlowPerMinute', description='This field is reserved and not in use.', example='10'),
      inPps?: float(name='InPps', description='The inbound packet forwarding rate. Unit: packets per second.', example='10'),
      ip?: string(name='Ip', description='The IP address.', example='192.168.156.101'),
      newSessionPerSecond?: float(name='NewSessionPerSecond', description='The new connection creation rate. Unit: connections per second.', example='2'),
      outBps?: float(name='OutBps', description='The outbound data transfer. Unit: bit/s.', example='200'),
      outFlowPerMinute?: float(name='OutFlowPerMinute', description='This field is reserved and not in use.', example='10'),
      outPps?: float(name='OutPps', description='The outbound packet forwarding rate. Unit: packets per second.', example='20'),
    }
  ](name='NatGatewayTopN', description='An array of statistics about real-time SNAT performance ranking.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='77C512B5-12f3-f892-BD94-88A98271C1A0'),
}

model GetNatTopNResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNatTopNResponseBody(name='body'),
}

async function getNatTopNWithOptions(request: GetNatTopNRequest, runtime: Util.RuntimeOptions): GetNatTopNResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.topN)) {
    query['TopN'] = request.topN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNatTopN',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNatTopN(request: GetNatTopNRequest): GetNatTopNResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNatTopNWithOptions(request, runtime);
}

model GetNetworkReachableAnalysisRequest {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability. You can call the **CreateNetworkRearchableAnalysis** operation to obtain the ID of the task for analyzing network reachability.', example='nra-90eef36a9e6e4662****'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to obtain the result of network reachability analysis.', example='cn-shanghai'),
}

model GetNetworkReachableAnalysisResponseBody = {
  aliUid?: long(name='AliUid', description='The unique ID (UID) of the Alibaba Cloud account.', example='123147627844****'),
  createTime?: string(name='CreateTime', description='The time when the network path was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-16T07:11:27Z'),
  networkPathId?: string(name='NetworkPathId', description='The network path ID.', example='np-2a1332214fa346b6****'),
  networkPathParameter?: string(name='NetworkPathParameter', description='The parameters of the network path.', example='{
  "sourceId": "i-bp100g5pbp6kj4p9****",
  "sourceType": "ecs",
  "targetId": "i-t4n4ltwgbbomzb0g****",
  "targetType": "ecs"
}'),
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability.', example='nra-8607514e71c1484****'),
  networkReachableAnalysisResult?: string(name='NetworkReachableAnalysisResult', description='The result of network reachability analysis, which includes the network topology, error codes of network unreachability, and rules of network unreachability.', example='{
  "errorCode": "",
  "networkAclData": {
    "networkAclItems": [
      
    ]
  },
  "nraId": "nra-f2c8701a36424094****",
  "requestId": "B931F8A0-620E-5230-B77F-3BD7F612****",
  "routeData": {
    "routeItems": [
      
    ]
  },
  "securityGroupData": {
    "policy": "accept",
    "securityGroupItems": [
      {
        "description": "default_sg_access_rule",
        "matchedRule": {
          "bizProtocol": "ALL",
          "creatingTime": "2022-11-10T03:24:49Z",
          "description": "",
          "destinationCidr": "",
          "destinationGroupId": "sg-wz980j96p8y99co5****",
          "direction": "egress",
          "policy": "Accept",
          "portRange": "-1/-1",
          "priority": "1",
          "sourceCidr": "",
          "sourceGroupId": ""
        },
        "policy": "accept",
        "resourceId": "eni-wz92ce4saz1jzazg****",
        "securityGroupId": "sg-wz980j96p8y99co5****"
      },
      {
        "description": "user_acl_drop_rule",
        "matchedRule": {
          "bizProtocol": "",
          "creatingTime": "",
          "description": "",
          "destinationCidr": "",
          "destinationGroupId": "",
          "direction": "",
          "policy": "",
          "portRange": "",
          "priority": "",
          "sourceCidr": "",
          "sourceGroupId": ""
        },
        "policy": "",
        "resourceId": "eni-wz97vry93t6z4lbd****",
        "securityGroupId": "sg-wz980j96p8y99co****"
      }
    ],
    "securityGroupReportId": "sgr-4479d23bb37241aab****"
  },
  "status": "security_group_checking_target",
  "topologyData": {
    "positive": {
      "linkList": [
        {
          "id": "i-wz91dk7bor557hp93zyv-->eni-wz92ce4saz1jzazg****",
          "source": "i-wz91dk7bor557hp9****",
          "target": "eni-wz92ce4saz1jzazg****"
        },
        {
          "id": "eni-wz92ce4saz1jzazgi13d-->vsw-wz9slpwdcppwfrnee****",
          "source": "eni-wz92ce4saz1jzazg****",
          "target": "vsw-wz9slpwdcppwfrnee****"
        },
        {
          "id": "vsw-wz9slpwdcppwfrneebcrp-->eni-wz97vry93t6z4lbd****",
          "source": "vsw-wz9slpwdcppwfrnee****",
          "target": "eni-wz97vry93t6z4lbd****"
        },
        {
          "id": "eni-wz97vry93t6z4lbdgmfi-->i-wz91dk7bor557hp9****",
          "source": "eni-wz97vry93t6z4lbd****",
          "target": "i-wz91dk7bor557hp9****"
        }
      ],
      "nodeList": [
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 1,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 3,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "vsw-wz9slpwdcppwfrnee****",
          "cidr": "192.168.0.0/24",
          "id": "vsw-wz9slpwdcppwfrnee****",
          "level": 2,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VSW",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "bizInsId": "eni-wz92ce4saz1jzazg****",
          "id": "eni-wz92ce4saz1jzazg****",
          "ip": "192.168.0.33",
          "mac": "00:XXXX:3e:16:7c:50",
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "status": "InUse",
          "trafficLogs": [
            
          ]
        },
        {
          "bizInsId": "eni-wz97vry93t6z4lbd****",
          "id": "eni-wz97vry93t6z4lbd****",
          "ip": "192.168.0.34",
          "mac": "00:XXXX:3e:14:70:c2",
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "status": "InUse",
          "trafficLogs": [
            
          ]
        }
      ]
    },
    "reverse": {
      "revLinkList": [
        {
          "id": "i-wz91dk7bor557hp93zys-->eni-wz97vry93t6z4lbd****",
          "source": "i-wz91dk7bor557hp9****",
          "target": "eni-wz97vry93t6z4lbd****"
        },
        {
          "id": "eni-wz97vry93t6z4lbdgmfi-->vsw-wz9slpwdcppwfrnee****",
          "source": "eni-wz97vry93t6z4lbd****",
          "target": "vsw-wz9slpwdcppwfrnee****"
        },
        {
          "id": "vsw-wz9slpwdcppwfrneebcrp-->eni-wz92ce4saz1jzazg****",
          "source": "vsw-wz9slpwdcppwfrnee****",
          "target": "eni-wz92ce4saz1jzazg****"
        },
        {
          "id": "eni-wz92ce4saz1jzazgi13d-->i-wz91dk7bor557hp9****",
          "source": "eni-wz92ce4saz1jzazg****",
          "target": "i-wz91dk7bor557hp9****"
        }
      ],
      "revNodeList": [
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 1,
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 3,
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "vsw-wz9slpwdcppwfrnee****",
          "cidr": "192.168.0.0/24",
          "id": "vsw-wz9slpwdcppwfrnee****",
          "level": 2,
          "nodeType": "VSW",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "bizInsId": "eni-wz97vry93t6z4lbd****",
          "id": "eni-wz97vry93t6z4lbd****",
          "ip": "192.168.0.34",
          "mac": "00:XXXX:3e:14:70:c2",
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          },
          "status": "InUse"
        },
        {
          "bizInsId": "eni-wz92ce4saz1jzazg****",
          "id": "eni-wz92ce4saz1jzazg****",
          "ip": "192.168.0.33",
          "mac": "00:XXXX:3e:16:7c:50",
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          },
          "status": "InUse"
        }
      ]
    },
    "topologyReportId": "tpr-21cf60002715491b8****"
  }
}'),
  networkReachableAnalysisStatus?: string(name='NetworkReachableAnalysisStatus', description='The state of the task for analyzing network reachability. Valid values:

*   **init**: The task is in progress.
*   **finish**: The task is complete.
*   **error**: An analysis error occurred.
*   **timeout**: The task timed out.', example='finish'),
  reachable?: boolean(name='Reachable', description='Indicates whether the network path is reachable. Valid values:

*   **true**: The network path is reachable.
*   **false**: The network path is unreachable.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='DEE0FEAF-59AE-5CDD-AA07-626BC365D571'),
}

model GetNetworkReachableAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * **GetNetworkReachableAnalysis** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can query the state of the task for analyzing network reachability.
  * *   The **init** state indicates that the task is in progress.
  * *   The **finish** state indicates that the task is complete. In this state, you can obtain the analysis result.
  *
  * @param request GetNetworkReachableAnalysisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNetworkReachableAnalysisResponse
 */
async function getNetworkReachableAnalysisWithOptions(request: GetNetworkReachableAnalysisRequest, runtime: Util.RuntimeOptions): GetNetworkReachableAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkReachableAnalysisId)) {
    query['NetworkReachableAnalysisId'] = request.networkReachableAnalysisId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNetworkReachableAnalysis',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **GetNetworkReachableAnalysis** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can query the state of the task for analyzing network reachability.
  * *   The **init** state indicates that the task is in progress.
  * *   The **finish** state indicates that the task is complete. In this state, you can obtain the analysis result.
  *
  * @param request GetNetworkReachableAnalysisRequest
  * @return GetNetworkReachableAnalysisResponse
 */
async function getNetworkReachableAnalysis(request: GetNetworkReachableAnalysisRequest): GetNetworkReachableAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetworkReachableAnalysisWithOptions(request, runtime);
}

model GetTransitRouterFlowTopNRequest {
  accountIds?: [ string ](name='AccountIds', description='The IDs of member accounts.'),
  bandwithPackageId?: string(name='BandwithPackageId', description='The ID of the CEN bandwidth plan.', example='cenbwp-ia8kw1zjv4hyal*****'),
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1684373600099'),
  cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****'),
  direction?: string(name='Direction', description='The direction of the inter-region traffic in the local regions or for the local IP addresses. Valid values:

*   in: inbound traffic
*   out: outbound traffic', example='in'),
  endTime?: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1638239093000'),
  groupBy?: string(name='GroupBy', description='The dimension for ranking inter-region traffic data. The value of this parameter is case-sensitive. Valid values:

*   1Tuple: queries the rankings of inter-region traffic data for the local regions, Cloud Enterprise Network (CEN) instances, and IP addresses.
*   2Tuple: queries the rankings of inter-region traffic data for the local and remote regions, and the local and remote IP addresses.
*   5Tuple: queries the rankings of inter-region traffic data for the local and remote IP addresses, local and remote ports, and protocols in use.
*   Cen: queries the rankings of inter-region traffic data for CEN instances.
*   RegionPair: queries the rankings of inter-region traffic data for the local and remote regions.
*   Port: queries the rankings of inter-region traffic data for the local and remote ports.
*   Protocol: queries the rankings of inter-region traffic data for the protocols in use.', example='1Tuple'),
  orderBy?: string(name='OrderBy', description='The metric for ranking inter-region traffic data. Default value: Bytes. This value specifies that inter-region traffic data is ranked by traffic volume.', example='Bytes'),
  otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX'),
  otherPort?: string(name='OtherPort', description='The remote port.', example='10869'),
  otherRegion?: string(name='OtherRegion', description='The remote region.', example='ap-southeast-1'),
  protocol?: string(name='Protocol', description='The protocol number.

>  All protocols are supported. This parameter is required only if you set GroupBy to 5Tuple or Protocol.', example='6'),
  sort?: string(name='Sort', description='The order for ranking inter-region traffic data. Valid values:

*   desc: descending order
*   asc: ascending order', example='desc'),
  thisIp?: string(name='ThisIp', description='The local IP address.', example='1.8.XX.XX'),
  thisPort?: string(name='ThisPort', description='The local port.', example='80'),
  thisRegion?: string(name='ThisRegion', description='The local region where the **local IP address** resides.', example='cn-shanghai'),
  topN?: int32(name='TopN', description='Specifies the maximum number of data entries to display. Default value: **10**. Maximum value: 100.', example='20'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false'),
}

model GetTransitRouterFlowTopNShrinkRequest {
  accountIdsShrink?: string(name='AccountIds', description='The IDs of member accounts.'),
  bandwithPackageId?: string(name='BandwithPackageId', description='The ID of the CEN bandwidth plan.', example='cenbwp-ia8kw1zjv4hyal*****'),
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1684373600099'),
  cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****'),
  direction?: string(name='Direction', description='The direction of the inter-region traffic in the local regions or for the local IP addresses. Valid values:

*   in: inbound traffic
*   out: outbound traffic', example='in'),
  endTime?: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1638239093000'),
  groupBy?: string(name='GroupBy', description='The dimension for ranking inter-region traffic data. The value of this parameter is case-sensitive. Valid values:

*   1Tuple: queries the rankings of inter-region traffic data for the local regions, Cloud Enterprise Network (CEN) instances, and IP addresses.
*   2Tuple: queries the rankings of inter-region traffic data for the local and remote regions, and the local and remote IP addresses.
*   5Tuple: queries the rankings of inter-region traffic data for the local and remote IP addresses, local and remote ports, and protocols in use.
*   Cen: queries the rankings of inter-region traffic data for CEN instances.
*   RegionPair: queries the rankings of inter-region traffic data for the local and remote regions.
*   Port: queries the rankings of inter-region traffic data for the local and remote ports.
*   Protocol: queries the rankings of inter-region traffic data for the protocols in use.', example='1Tuple'),
  orderBy?: string(name='OrderBy', description='The metric for ranking inter-region traffic data. Default value: Bytes. This value specifies that inter-region traffic data is ranked by traffic volume.', example='Bytes'),
  otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX'),
  otherPort?: string(name='OtherPort', description='The remote port.', example='10869'),
  otherRegion?: string(name='OtherRegion', description='The remote region.', example='ap-southeast-1'),
  protocol?: string(name='Protocol', description='The protocol number.

>  All protocols are supported. This parameter is required only if you set GroupBy to 5Tuple or Protocol.', example='6'),
  sort?: string(name='Sort', description='The order for ranking inter-region traffic data. Valid values:

*   desc: descending order
*   asc: ascending order', example='desc'),
  thisIp?: string(name='ThisIp', description='The local IP address.', example='1.8.XX.XX'),
  thisPort?: string(name='ThisPort', description='The local port.', example='80'),
  thisRegion?: string(name='ThisRegion', description='The local region where the **local IP address** resides.', example='cn-shanghai'),
  topN?: int32(name='TopN', description='Specifies the maximum number of data entries to display. Default value: **10**. Maximum value: 100.', example='20'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false'),
}

model GetTransitRouterFlowTopNResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  transitRouterFlowTopN?: [ 
    {
      accountId?: string(name='AccountId', description='The account ID.', example='118639953821xxxx'),
      bandwithPackageId?: string(name='BandwithPackageId', description='The ID of the CEN bandwidth plan.', example='cenbwp-ia8kw1zjv4hyal****'),
      bytes?: double(name='Bytes', description='The total volume of traffic in the specified time range.', example='188'),
      cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****'),
      endTime?: string(name='EndTime', description='The end of the time range that you queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-01-31T06:40:00Z'),
      otherIp?: string(name='OtherIp', description='The remote IP address.', example='47.216.XX.XX'),
      otherPort?: string(name='OtherPort', description='The remote port.', example='53470'),
      otherRegion?: string(name='OtherRegion', description='The remote region where the remote IP address resides.', example='ap-southeast-2'),
      packets?: double(name='Packets', description='The total number of packets in the specified time range.', example='88'),
      protocol?: string(name='Protocol', description='The protocol number.', example='6'),
      startTime?: string(name='StartTime', description='The beginning of the time range that you queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-01-31T05:40:00Z'),
      thisIp?: string(name='ThisIp', description='The local IP address.', example='1.8.XX.XX'),
      thisPort?: string(name='ThisPort', description='The local port.', example='80'),
      thisRegion?: string(name='ThisRegion', description='The local region where the local IP address resides.', example='cn-shanghai'),
    }
  ](name='TransitRouterFlowTopN', description='The ranking result of inter-region traffic data.'),
}

model GetTransitRouterFlowTopNResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTransitRouterFlowTopNResponseBody(name='body'),
}

async function getTransitRouterFlowTopNWithOptions(tmpReq: GetTransitRouterFlowTopNRequest, runtime: Util.RuntimeOptions): GetTransitRouterFlowTopNResponse {
  Util.validateModel(tmpReq);
  var request = new GetTransitRouterFlowTopNShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.accountIds)) {
    request.accountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.accountIds, 'AccountIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountIdsShrink)) {
    query['AccountIds'] = request.accountIdsShrink;
  }
  if (!Util.isUnset(request.bandwithPackageId)) {
    query['BandwithPackageId'] = request.bandwithPackageId;
  }
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupBy)) {
    query['GroupBy'] = request.groupBy;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.otherIp)) {
    query['OtherIp'] = request.otherIp;
  }
  if (!Util.isUnset(request.otherPort)) {
    query['OtherPort'] = request.otherPort;
  }
  if (!Util.isUnset(request.otherRegion)) {
    query['OtherRegion'] = request.otherRegion;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.thisIp)) {
    query['ThisIp'] = request.thisIp;
  }
  if (!Util.isUnset(request.thisPort)) {
    query['ThisPort'] = request.thisPort;
  }
  if (!Util.isUnset(request.thisRegion)) {
    query['ThisRegion'] = request.thisRegion;
  }
  if (!Util.isUnset(request.topN)) {
    query['TopN'] = request.topN;
  }
  if (!Util.isUnset(request.useMultiAccount)) {
    query['UseMultiAccount'] = request.useMultiAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTransitRouterFlowTopN',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTransitRouterFlowTopN(request: GetTransitRouterFlowTopNRequest): GetTransitRouterFlowTopNResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTransitRouterFlowTopNWithOptions(request, runtime);
}

model GetVbrFlowTopNRequest {
  accountIds?: [ string ](name='AccountIds', description='The IDs of member accounts.'),
  attachmentId?: string(name='AttachmentId', description='The CEN connection ID.', example='tr-attach-dnv870gmqzmb5u****'),
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1638239092000'),
  cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****'),
  cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX'),
  cloudPort?: string(name='CloudPort', description='The local port.

>  This parameter is required only if you set GroupBy to CloudPort.', example='443'),
  direction?: string(name='Direction', description='The direction of the hybrid cloud traffic in the local regions or for the local IP addresses. Valid values:

*   in: traffic from a data center to Alibaba Cloud
*   out: traffic from Alibaba Cloud to a data center', example='in'),
  endTime?: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1638239093000'),
  groupBy?: string(name='GroupBy', description='The dimension for ranking hybrid cloud traffic data. The value of this parameter is case-sensitive. Valid values:

*   1Tuple: queries the rankings of hybrid cloud traffic data for the Cloud Enterprise Network (CEN) instances, CEN connections, virtual border routers (VBRs), and IP addresses.
*   2Tuple: queries the rankings of hybrid cloud traffic data for the local and remote IP addresses.
*   5Tuple: queries the rankings of hybrid cloud traffic data for the local and remote IP addresses, local and remote ports, and protocols.
*   CloudPort: queries the rankings of hybrid cloud traffic data for the local ports.
*   OtherPort: queries the rankings of hybrid cloud traffic data for the remote ports.
*   Protocol: queries the rankings of hybrid cloud traffic data for the protocols.', example='1Tuple'),
  orderBy?: string(name='OrderBy', description='The metric for ranking hybrid cloud traffic data. Default value: Bytes. This value specifies that hybrid cloud traffic data is ranked by traffic volumes.', example='Bytes'),
  otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX'),
  otherPort?: string(name='OtherPort', description='The remote port.

>  This parameter is required only if you set GroupBy to OtherPort.', example='40002'),
  protocol?: string(name='Protocol', description='The protocol number.

>  All protocols are supported. This parameter is required only if you set GroupBy to 5Tuple or Protocol.', example='6'),
  regionId?: string(name='RegionId', description='The local region.', example='cn-shanghai'),
  sort?: string(name='Sort', description='The order for ranking hybrid cloud traffic data. Valid values:

*   desc: descending order
*   asc: ascending order', example='desc'),
  topN?: int32(name='TopN', description='Specifies top-N traffic data to display. Default value: **10**. This value specifies that top-10 traffic data is displayed by default. Maximum value: **100**.', example='10'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId', description='The ID of the VBR that is associated with the Express Connect circuit.', example='vbr-k1atj46citwuek42j****'),
}

model GetVbrFlowTopNShrinkRequest {
  accountIdsShrink?: string(name='AccountIds', description='The IDs of member accounts.'),
  attachmentId?: string(name='AttachmentId', description='The CEN connection ID.', example='tr-attach-dnv870gmqzmb5u****'),
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1638239092000'),
  cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****'),
  cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX'),
  cloudPort?: string(name='CloudPort', description='The local port.

>  This parameter is required only if you set GroupBy to CloudPort.', example='443'),
  direction?: string(name='Direction', description='The direction of the hybrid cloud traffic in the local regions or for the local IP addresses. Valid values:

*   in: traffic from a data center to Alibaba Cloud
*   out: traffic from Alibaba Cloud to a data center', example='in'),
  endTime?: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.', example='1638239093000'),
  groupBy?: string(name='GroupBy', description='The dimension for ranking hybrid cloud traffic data. The value of this parameter is case-sensitive. Valid values:

*   1Tuple: queries the rankings of hybrid cloud traffic data for the Cloud Enterprise Network (CEN) instances, CEN connections, virtual border routers (VBRs), and IP addresses.
*   2Tuple: queries the rankings of hybrid cloud traffic data for the local and remote IP addresses.
*   5Tuple: queries the rankings of hybrid cloud traffic data for the local and remote IP addresses, local and remote ports, and protocols.
*   CloudPort: queries the rankings of hybrid cloud traffic data for the local ports.
*   OtherPort: queries the rankings of hybrid cloud traffic data for the remote ports.
*   Protocol: queries the rankings of hybrid cloud traffic data for the protocols.', example='1Tuple'),
  orderBy?: string(name='OrderBy', description='The metric for ranking hybrid cloud traffic data. Default value: Bytes. This value specifies that hybrid cloud traffic data is ranked by traffic volumes.', example='Bytes'),
  otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX'),
  otherPort?: string(name='OtherPort', description='The remote port.

>  This parameter is required only if you set GroupBy to OtherPort.', example='40002'),
  protocol?: string(name='Protocol', description='The protocol number.

>  All protocols are supported. This parameter is required only if you set GroupBy to 5Tuple or Protocol.', example='6'),
  regionId?: string(name='RegionId', description='The local region.', example='cn-shanghai'),
  sort?: string(name='Sort', description='The order for ranking hybrid cloud traffic data. Valid values:

*   desc: descending order
*   asc: ascending order', example='desc'),
  topN?: int32(name='TopN', description='Specifies top-N traffic data to display. Default value: **10**. This value specifies that top-10 traffic data is displayed by default. Maximum value: **100**.', example='10'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId', description='The ID of the VBR that is associated with the Express Connect circuit.', example='vbr-k1atj46citwuek42j****'),
}

model GetVbrFlowTopNResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
  virtualBorderRouterFlowlogTopN?: [ 
    {
      accountId?: string(name='AccountId', description='The account ID.', example='156237031628****'),
      attachmentId?: string(name='AttachmentId', description='The CEN connection ID.', example='tr-attach-u6v1j3jre0fe9h****'),
      bytes?: double(name='Bytes', description='The total volume of traffic in the specified time range.', example='108'),
      cloudIp?: string(name='CloudIp', description='The local IP address.', example='120.24.X.X'),
      cloudPort?: string(name='CloudPort', description='The local port.', example='80'),
      cloudRegion?: string(name='CloudRegion', description='The local region where the local IP address resides.', example='cn-shanghai'),
      otherIp?: string(name='OtherIp', description='The remote IP address.', example='222.85.X.X'),
      otherPort?: string(name='OtherPort', description='The remote port.', example='10965'),
      packets?: double(name='Packets', description='The total number of packets in the specified time range.', example='66'),
      protocol?: string(name='Protocol', description='The protocol number.', example='6'),
      virtualBorderRouterId?: string(name='VirtualBorderRouterId', description='The ID of the VBR that is associated with the Express Connect circuit.', example='vbr-k1atj46citwuek42j****'),
    }
  ](name='VirtualBorderRouterFlowlogTopN', description='The ranking result of hybrid cloud traffic data.'),
}

model GetVbrFlowTopNResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVbrFlowTopNResponseBody(name='body'),
}

async function getVbrFlowTopNWithOptions(tmpReq: GetVbrFlowTopNRequest, runtime: Util.RuntimeOptions): GetVbrFlowTopNResponse {
  Util.validateModel(tmpReq);
  var request = new GetVbrFlowTopNShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.accountIds)) {
    request.accountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.accountIds, 'AccountIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountIdsShrink)) {
    query['AccountIds'] = request.accountIdsShrink;
  }
  if (!Util.isUnset(request.attachmentId)) {
    query['AttachmentId'] = request.attachmentId;
  }
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cloudIp)) {
    query['CloudIp'] = request.cloudIp;
  }
  if (!Util.isUnset(request.cloudPort)) {
    query['CloudPort'] = request.cloudPort;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupBy)) {
    query['GroupBy'] = request.groupBy;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.otherIp)) {
    query['OtherIp'] = request.otherIp;
  }
  if (!Util.isUnset(request.otherPort)) {
    query['OtherPort'] = request.otherPort;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.topN)) {
    query['TopN'] = request.topN;
  }
  if (!Util.isUnset(request.useMultiAccount)) {
    query['UseMultiAccount'] = request.useMultiAccount;
  }
  if (!Util.isUnset(request.virtualBorderRouterId)) {
    query['VirtualBorderRouterId'] = request.virtualBorderRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVbrFlowTopN',
    version = '2021-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVbrFlowTopN(request: GetVbrFlowTopNRequest): GetVbrFlowTopNResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVbrFlowTopNWithOptions(request, runtime);
}

