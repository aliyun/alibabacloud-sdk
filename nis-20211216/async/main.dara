/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'nis';
  @version = '2021-12-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAndAnalyzeNetworkPathRequest {
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **tcp**: Transmission Control Protocol (TCP)
*   **udp**: User Datagram Protocol (UDP)
*   **icmp**: Internet Control Message Protocol (ICMP)', example='tcp', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to initiate a task for analyzing network reachability.', example='cn-shanghai', position='Query'),
  sourceId: string(name='SourceId', description='The ID of the source resource.

This parameter is required.', example='i-uf62y8khhbkbdrp6****', position='Query'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='192.168.XX.XX', position='Query'),
  sourcePort?: int32(name='SourcePort', description='The source port.', example='0', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source resource. Valid values:

*   **ecs**: the Elastic Compute Service (ECS) instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the virtual border router (VBR)

This parameter is required.', example='ecs', position='Query'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-m5eactvw7wtpktv5****', position='Query'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='172.50.XX.XX', position='Query'),
  targetPort?: int32(name='TargetPort', description='The destination port.', example='80', position='Query'),
  targetType?: string(name='TargetType', description='The type of the destination resource. Valid values:

*   **ecs**: the ECS instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the VBR
*   **clb**: the Classic Load Balancer (CLB) instance', example='ecs', position='Query'),
}

model CreateAndAnalyzeNetworkPathResponseBody = {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability that you initiated.', example='nra-dfe9e53d2b524568****'),
  protocol?: string(name='Protocol', description='The protocol type.', example='tcp'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  sourceId?: string(name='SourceId', description='The ID of the source resource.', example='i-uf62y8khhbkbdrp6****'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='192.168.XX.XX'),
  sourcePort?: string(name='SourcePort', description='The source port.', example='0'),
  sourceType?: string(name='SourceType', description='The type of the source resource.', example='ecs'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-m5eactvw7wtpktv5****'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='172.50.XX.XX'),
  targetPort?: string(name='TargetPort', description='The destination port.', example='80'),
  targetType?: string(name='TargetType', description='The type of the destination resource.', example='ecs'),
}

model CreateAndAnalyzeNetworkPathResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndAnalyzeNetworkPathResponseBody(name='body'),
}

/**
  * @description You can call this operation to initiate a task for analyzing network reachability by specifying only the information about the source and destination. You do not need to create a network path for reachability analysis. The analysis result is not recorded in the system. If you want to record the path parameters and analysis result in the Network Intelligence Service (NIS) console, we recommend that you call the **createNetworkReachableAnalysis** operation.
  * @param request  the request parameters of CreateAndAnalyzeNetworkPath  CreateAndAnalyzeNetworkPathRequest
  * @return CreateAndAnalyzeNetworkPathResponse
 */
async function createAndAnalyzeNetworkPath(request: CreateAndAnalyzeNetworkPathRequest): CreateAndAnalyzeNetworkPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAndAnalyzeNetworkPath', 'GET', '/', 'json', false, 'json', request);
}

model CreateNetworkPathRequest {
  networkPathDescription?: string(name='NetworkPathDescription', description='The description of the network path.', example='Analyze the path from ECS to ECS', position='Query'),
  networkPathName: string(name='NetworkPathName', description='The name of the network path.

This parameter is required.', example='ecs2PublicIp', position='Query'),
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **tcp**: Transmission Control Protocol (TCP)
*   **udp**: User Datagram Protocol (UDP)
*   **icmp**: Internet Control Message Protocol (ICMP)', example='tcp', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to create.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfm27qsxjj****', position='Query'),
  sourceId: string(name='SourceId', description='The ID of the source resource.

This parameter is required.', example='i-2zef4ngqfarepyun****', position='Query'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='172.17.XX.XX', position='Query'),
  sourcePort?: int32(name='SourcePort', description='The source port.', example='443', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source resource. Valid values:

*   **ecs**: the Elastic Compute Service (ECS) instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the virtual border router (VBR)

This parameter is required.', example='ecs', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.

You can add up to 20 tags in each call.', example='role'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='ops'),
    }
  ](name='Tag', description='The tags to add to the resource.', position='Query'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-bp13d0e064gubm****', minimum=0, position='Query'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='192.168.0.210', position='Query'),
  targetPort?: int32(name='TargetPort', description='The destination port.', example='80', position='Query'),
  targetType?: string(name='TargetType', description='The type of the destination resource. Valid values:

*   **ecs**: the ECS instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the VBR
*   **clb**: the Classic Load Balancer (CLB) instance', example='ecs', minimum=0, position='Query'),
}

model CreateNetworkPathResponseBody = {
  networkPathId?: string(name='NetworkPathId', description='The ID of the network path.', example='np-4cbf598673d14d27****'),
  requestId?: string(name='RequestId', description='The request ID.', example='92DD9FFB-06FB-56F7-83EF-5CEF98F5562A'),
}

model CreateNetworkPathResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkPathResponseBody(name='body'),
}

/**
  * @description *   You can call the **CreateNetworkPath** operation to create network paths in multiple networking scenarios and between multiple resources. After a path is created, the path parameters are saved for repeated analysis.
  * *   You can create up to 100 network paths within one Alibaba Cloud account.
  * @param request  the request parameters of CreateNetworkPath  CreateNetworkPathRequest
  * @return CreateNetworkPathResponse
 */
async function createNetworkPath(request: CreateNetworkPathRequest): CreateNetworkPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkPath', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkReachableAnalysisRequest {
  networkPathId: string(name='NetworkPathId', description='The ID of the network path. You can call the [CreateNetworkPath](https://help.aliyun.com/document_detail/2366522.html) operation to obtain the ID of the network path.

This parameter is required.', example='np-b2f618ceb2c84057****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to create a task for analyzing network reachability.', example='cn-shanghai', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to add to the resource. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.

You can add up to 20 tags in each call.', example='Team'),
      value?: string(name='Value', description='The value of the tag to add to the resource. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:` or `aliyun`. The tag value can be an empty string.

You can add up to 20 tag values in each call.', example='ops'),
    }
  ](name='Tag', description='The tags to add to the resource.', position='Query'),
}

model CreateNetworkReachableAnalysisResponseBody = {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability.', example='nra-2fede05617494417****'),
  requestId?: string(name='RequestId', description='The request ID.', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model CreateNetworkReachableAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * @description *   The **CreateNetworkReachableAnalysis** operation is used to create a task for analyzing the reachability of the network path that is created by calling the **CreateNetworkPath** operation and record the analysis results.
  * *   The **CreateNetworkReachableAnalysis** operation can be called to repeatedly analyze the reachability of a network path.
  * *   You can create up to 1,000 reachability analysis records within one Alibaba Cloud account.
  * @param request  the request parameters of CreateNetworkReachableAnalysis  CreateNetworkReachableAnalysisRequest
  * @return CreateNetworkReachableAnalysisResponse
 */
async function createNetworkReachableAnalysis(request: CreateNetworkReachableAnalysisRequest): CreateNetworkReachableAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkReachableAnalysis', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkPathRequest {
  networkPathIds: [ string ](name='NetworkPathIds', description='The IDs of network paths.

This parameter is required.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to delete.', example='cn-shanghai', position='Query'),
}

model DeleteNetworkPathResponseBody = {
  data?: boolean(name='Data', description='Result of operation.

- **true**: Delete Success.
- **false**: Delete Fail.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C4331873-C534-590F-A905-F66C53B88A47'),
}

model DeleteNetworkPathResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkPathResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNetworkPath  DeleteNetworkPathRequest
  * @return DeleteNetworkPathResponse
 */
async function deleteNetworkPath(request: DeleteNetworkPathRequest): DeleteNetworkPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkPath', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkReachableAnalysisRequest {
  networkReachableAnalysisIds: [ string ](name='NetworkReachableAnalysisIds', description='The IDs of the tasks for analyzing network reachability.

This parameter is required.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to delete a task for analyzing network reachability.', example='cn-shanghai', position='Query'),
}

model DeleteNetworkReachableAnalysisResponseBody = {
  data?: boolean(name='Data', description='Result of operation.
- **true**: Delete Success.
- **false**: Delete Fail.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='4838F3F2-30E1-5D82-B25A-B9FE33BC3E25'),
}

model DeleteNetworkReachableAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNetworkReachableAnalysis  DeleteNetworkReachableAnalysisRequest
  * @return DeleteNetworkReachableAnalysisResponse
 */
async function deleteNetworkReachableAnalysis(request: DeleteNetworkReachableAnalysisRequest): DeleteNetworkReachableAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkReachableAnalysis', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNisInspectionReportRequest {
  inspectionReportId: string(name='InspectionReportId', description='This parameter is required.', example='nir-ffd1af****196d0', minLength=1, maxLength=128, position='Query'),
}

model DeleteNisInspectionReportResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
}

model DeleteNisInspectionReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNisInspectionReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNisInspectionReport  DeleteNisInspectionReportRequest
  * @return DeleteNisInspectionReportResponse
 */
async function deleteNisInspectionReport(request: DeleteNisInspectionReportRequest): DeleteNisInspectionReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNisInspectionReport', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNisInspectionTaskRequest {
  inspectionTaskId: string(name='InspectionTaskId', description='This parameter is required.', example='ni-209d****wfirfwc2yl', minLength=1, maxLength=128, position='Query'),
}

model DeleteNisInspectionTaskResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model DeleteNisInspectionTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNisInspectionTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNisInspectionTask  DeleteNisInspectionTaskRequest
  * @return DeleteNisInspectionTaskResponse
 */
async function deleteNisInspectionTask(request: DeleteNisInspectionTaskRequest): DeleteNisInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNisInspectionTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNisInspectionRecommendationResourcesRequest {
  inspectionReportId: string(name='InspectionReportId', description='This parameter is required.', example='nir-ffd1af****196d0', minLength=1, maxLength=128, position='Query'),
  language?: string(name='Language', example='zh-CN', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml16/uO3mvCyHxSjzdhx9VRUC+8umDTIV2Wg9TTOUrR7ve', position='Query'),
  recommendationCode: string(name='RecommendationCode', description='This parameter is required.', example='nat_snat_cross_az_warn', minLength=1, maxLength=64, position='Query'),
}

model DescribeNisInspectionRecommendationResourcesResponseBody = {
  inspectionReportId?: string(name='InspectionReportId', example='nir-ffd1af****196d0'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='qt0DqY2lXxwBt9/ROQoS/7J9p90D1vF2vFbwzb/1oSWr3AxcM6/KpObZ7Z1PZdcV'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
  resourceList?: [ 
    {
      analysisData?: string(name='AnalysisData', example='{ResourceId: "ngw-p0wn04hi4****q2us6q7q"}'),
      resourceId?: string(name='ResourceId', example='ngw-p0wn04hi4****q2us6q7q'),
      resourceName?: string(name='ResourceName'),
    }
  ](name='ResourceList'),
  totalCount?: int32(name='TotalCount', example='192'),
}

model DescribeNisInspectionRecommendationResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNisInspectionRecommendationResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNisInspectionRecommendationResources  DescribeNisInspectionRecommendationResourcesRequest
  * @return DescribeNisInspectionRecommendationResourcesResponse
 */
async function describeNisInspectionRecommendationResources(request: DescribeNisInspectionRecommendationResourcesRequest): DescribeNisInspectionRecommendationResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNisInspectionRecommendationResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNisInspectionReportCheckItemsRequest {
  categoryCode?: string(name='CategoryCode', example='stability', position='Query'),
  inspectionReportId: string(name='InspectionReportId', description='This parameter is required.', example='nir-ffd1af****196d0', minLength=1, maxLength=128, position='Query'),
  language?: string(name='Language', example='zh-CN', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml16/uO3mvCyHxSjzdhx9VRUC+8umDTIV2Wg9TTOUrR7ve', position='Query'),
  resourceType?: [ string ](name='ResourceType', shrink='json', position='Query'),
  riskLevel?: [ string ](name='RiskLevel', shrink='json', position='Query'),
}

model DescribeNisInspectionReportCheckItemsResponseBody = {
  checkItemList?: [ 
    {
      categoryCode?: string(name='CategoryCode', example='stability'),
      checkItemCode?: string(name='CheckItemCode', example='item_nat_water_level_check'),
      checkItemName?: string(name='CheckItemName'),
      checkResultList?: [ 
        {
          count?: int32(name='Count', example='0'),
          riskLevel?: string(name='RiskLevel'),
        }
      ](name='CheckResultList'),
      description?: string(name='Description'),
      recommendationList?: [ 
        {
          abnormality?: string(name='Abnormality'),
          metadata?: string(name='Metadata'),
          reason?: string(name='Reason'),
          reasonCode?: string(name='ReasonCode'),
          recommendationCode?: string(name='RecommendationCode', example='nat_snat_cross_az_warn'),
          riskLevel?: string(name='RiskLevel'),
          suggestion?: string(name='Suggestion'),
          suggestionCode?: string(name='SuggestionCode'),
        }
      ](name='RecommendationList'),
      resourceType?: string(name='ResourceType', example='NAT'),
    }
  ](name='CheckItemList'),
  inspectionReportId?: string(name='InspectionReportId', example='nir-ffd1af****196d0'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml194Cz/lMNdmr+DEh0th6dVlNEo/F148UPCh2itDku7Qj'),
  requestId?: string(name='RequestId', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  totalCount?: int32(name='TotalCount', example='11'),
}

model DescribeNisInspectionReportCheckItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNisInspectionReportCheckItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNisInspectionReportCheckItems  DescribeNisInspectionReportCheckItemsRequest
  * @return DescribeNisInspectionReportCheckItemsResponse
 */
async function describeNisInspectionReportCheckItems(request: DescribeNisInspectionReportCheckItemsRequest): DescribeNisInspectionReportCheckItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNisInspectionReportCheckItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNisInspectionReportStatusRequest {
  inspectionReportId: string(name='InspectionReportId', description='This parameter is required.', example='nir-2ca527b8de114ba4afb9', minLength=1, maxLength=128, position='Query'),
}

model DescribeNisInspectionReportStatusResponseBody = {
  endTime?: string(name='EndTime', example='2024-07-18 15:13:07'),
  inspectionProject?: string(name='InspectionProject', example='basic'),
  inspectionReportId?: string(name='InspectionReportId', example='nir-2ca527b8de114ba4afb9'),
  inspectionTaskId?: string(name='InspectionTaskId', example='ni-8svmpe0yso****r7fh79'),
  inspectionTaskName?: string(name='InspectionTaskName'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
  startTime?: string(name='StartTime', example='2024-07-18 15:12:28'),
  status?: string(name='Status', example='Finish'),
}

model DescribeNisInspectionReportStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNisInspectionReportStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNisInspectionReportStatus  DescribeNisInspectionReportStatusRequest
  * @return DescribeNisInspectionReportStatusResponse
 */
async function describeNisInspectionReportStatus(request: DescribeNisInspectionReportStatusRequest): DescribeNisInspectionReportStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNisInspectionReportStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNisInspectionReportSummaryRequest {
  inspectionReportId: string(name='InspectionReportId', description='This parameter is required.', example='nir-38abb318b27b49cc9a01', minLength=1, maxLength=128, position='Query'),
}

model DescribeNisInspectionReportSummaryResponseBody = {
  endTime?: string(name='EndTime', example='2024-06-03 09:36:00'),
  inspectionReportId?: string(name='InspectionReportId', example='nir-38abb318b27b49cc9a01'),
  inspectionTaskId?: string(name='InspectionTaskId', example='ni-8svmpe0yso2bhzr7fh79'),
  requestId?: string(name='RequestId', example='4838F3F2-30E1-5D82-B25A-B9FE33BC3E25'),
  startTime?: string(name='StartTime', example='2024-06-03 09:35:00'),
  status?: string(name='Status', example='Active'),
  summary?: {
    checkItemCount?: int32(name='CheckItemCount', example='11'),
    checkResourceCount?: int32(name='CheckResourceCount', example='123'),
    passRateSummary?: [ 
      {
        passRate?: double(name='PassRate', example='0.98'),
        passRateScope?: string(name='PassRateScope', example='Stability'),
      }
    ](name='PassRateSummary'),
    riskSummary?: [ 
      {
        resourceCount?: int32(name='ResourceCount', example='0'),
        riskCount?: int32(name='RiskCount', example='3'),
        riskLevel?: string(name='RiskLevel', example='HighRisk'),
        riskType?: string(name='RiskType', example='StabilityRisk'),
      }
    ](name='RiskSummary'),
  }(name='Summary'),
}

model DescribeNisInspectionReportSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNisInspectionReportSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNisInspectionReportSummary  DescribeNisInspectionReportSummaryRequest
  * @return DescribeNisInspectionReportSummaryResponse
 */
async function describeNisInspectionReportSummary(request: DescribeNisInspectionReportSummaryRequest): DescribeNisInspectionReportSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNisInspectionReportSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNisInspectionTaskRequest {
  inspectionTaskId: string(name='InspectionTaskId', description='This parameter is required.', example='ni-8svmpe0yso2bhzr7fh79', minLength=1, maxLength=128, position='Query'),
}

model DescribeNisInspectionTaskResponseBody = {
  checkResourceList?: [ 
    {
      checkScope?: string(name='CheckScope', example='CheckAll'),
      resourceType?: string(name='ResourceType', example='EIP'),
    }
  ](name='CheckResourceList'),
  createTime?: string(name='CreateTime', example='2024-07-01 10:00:57'),
  inspectionInterval?: string(name='InspectionInterval', example='1'),
  inspectionName?: string(name='InspectionName', example='Default'),
  inspectionProject?: string(name='InspectionProject', example='basic'),
  inspectionTaskId?: string(name='InspectionTaskId', example='ni-8svmpe0yso2bhzr7fh79'),
  inspectionTriggerTime?: string(name='InspectionTriggerTime', example='2024-07-01 15:15:57'),
  lastUpdateReportId?: string(name='LastUpdateReportId', example='nir-7c3dd178738a429abe6d'),
  lastUpdateTime?: string(name='LastUpdateTime', example='2024-07-01 10:00:59'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
  status?: string(name='Status', example='Active'),
}

model DescribeNisInspectionTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNisInspectionTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNisInspectionTask  DescribeNisInspectionTaskRequest
  * @return DescribeNisInspectionTaskResponse
 */
async function describeNisInspectionTask(request: DescribeNisInspectionTaskRequest): DescribeNisInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNisInspectionTask', 'POST', '/', 'json', false, 'json', request);
}

model GetInternetTupleRequest {
  accountIds?: [ long ](name='AccountIds', description='The IDs of member accounts.', position='Query'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1684373600099', minimum=0, maximum=253402271999000, position='Query'),
  cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX', position='Query'),
  cloudIpList?: [ string ](name='CloudIpList', description='The local IP addresses for filtering.', shrink='json', position='Query'),
  cloudIsp?: string(name='CloudIsp', description='The local Internet service provider (ISP).

>  In most cases, the value is Alibaba or Alibaba Cloud.', example='Alibaba', position='Query'),
  cloudPort?: string(name='CloudPort', description='The local port.

>  This parameter is required only if you set GroupBy to CloudPort.', example='443', position='Query'),
  direction: string(name='Direction', description='The direction of the Internet traffic that you want to query. Valid values:

*   **in**: inbound
*   **out**: outbound

This parameter is required.', example='in', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1684373700099', minimum=0, maximum=253402271999000, position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the Alibaba Cloud instance.', example='eip-sample*', position='Query'),
  instanceList?: [ string ](name='InstanceList', description='The instance IDs for filtering.', shrink='json', position='Query'),
  orderBy?: string(name='OrderBy', description='The metric for data ranking. Default value: **ByteCount**. This value indicates that Internet traffic data is ranked by traffic volume.

Valid values:

*   Rtt
*   ByteCount
*   PacketCount
*   RetransmitRate', example='ByteCount', position='Query'),
  otherCity?: string(name='OtherCity', description='The remote city.

>  This parameter is required only if you set **TupleType** to **2** or **5**.', example='Hangzhou', position='Query'),
  otherCountry?: string(name='OtherCountry', description='The remote country.

>  This parameter is required only if you set **TupleType** to **2** or **5**.', example='China', position='Query'),
  otherIp?: string(name='OtherIp', description='The remote IP address.

> This parameter is required only when you set **TupleType** to **2** or **5**.', example='122.112.XX.XX', position='Query'),
  otherIsp?: string(name='OtherIsp', description='The remote ISP.

> This parameter is required if you want to view the information about the remote ISP.', example='China Mobile', position='Query'),
  otherPort?: string(name='OtherPort', description='The remote port.

> This parameter is required only when you set **TupleType** to **5**.', example='40002', position='Query'),
  protocol?: string(name='Protocol', description='The protocol number.

> All protocols are supported. This parameter is required only when you set **TupleType** to **5**.', example='6', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region for which you want to query the Internet traffic.

This parameter is required.', example='cn-shanghai', position='Query'),
  sort?: string(name='Sort', description='The order in which instances are ranked by Internet traffic. Valid values:

*   **desc**: the descending order
*   **asc**: the ascending order', example='desc', position='Query'),
  topN?: int32(name='TopN', description='Specifies top-N traffic data to display. Default value: **10**. This value specifies to display top-10 traffic data by default. Max value: **100**.', example='10', position='Query'),
  tupleType: int32(name='TupleType', description='The type of the tuple. Valid values:

*   **1**: 1-tuple
*   **2**: 2-tuple
*   **5**: 5-tuple

This parameter is required.', example='1', position='Query'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false', position='Query'),
}

model GetInternetTupleResponseBody = {
  data?: [ 
    {
      accessRegion?: string(name='AccessRegion', description='The access point of Alibaba Cloud.

>  This parameter is valid only if you set **InstanceId** to the instance ID of an Anycast elastic IP address (EIP).', example='cn-hongkong-pop'),
      beginTime?: string(name='BeginTime', description='The beginning of the time range that you queried. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684373600099'),
      byteCount?: double(name='ByteCount', description='The traffic volume. Unit: bytes.', example='88'),
      cloudCity?: string(name='CloudCity', description='The local city.', example='Nanjing'),
      cloudCountry?: string(name='CloudCountry', description='The local country or region.', example='China'),
      cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX'),
      cloudIsp?: string(name='CloudIsp', description='The local ISP.', example='China Mobile'),
      cloudPort?: string(name='CloudPort', description='The local port.', example='443'),
      cloudProduct?: string(name='CloudProduct', description='The service code of the instance to which the local IP address belongs.', example='EIP'),
      cloudProvince?: string(name='CloudProvince', description='The local province.', example='Jiangsu'),
      direction?: string(name='Direction', description='The direction of Internet traffic. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
      inByteCount?: double(name='InByteCount', description='The inbound traffic volume. Unit: bytes.', example='88'),
      inOutOrderCount?: double(name='InOutOrderCount', description='The number of inbound disordered packets.', example='2'),
      inPacketCount?: double(name='InPacketCount', description='The number of inbound packets.', example='33'),
      inRetranCount?: double(name='InRetranCount', description='The number of inbound repeated packets.', example='0'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the local IP address belongs.', example='eip-sample*'),
      otherCity?: string(name='OtherCity', description='The remote city. In most cases, this parameter is empty if you set **OtherCountry** to a country except China.', example='Austin'),
      otherCountry?: string(name='OtherCountry', description='The remote country or region.', example='United States'),
      otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX'),
      otherIsp?: string(name='OtherIsp', description='The remote ISP.', example='amazon.com'),
      otherPort?: string(name='OtherPort', description='The remote port.', example='40002'),
      otherProduct?: string(name='OtherProduct', description='The service code of the instance to which the remote IP address belongs. If the IP address is not on the cloud, this parameter is empty.', example='ECS'),
      otherProvince?: string(name='OtherProvince', description='The remote province. In most cases, this parameter is empty if you set **OtherCountry** to a country except China.', example='Texas'),
      outByteCount?: double(name='OutByteCount', description='The outbound traffic volume. Unit: bytes.', example='66'),
      outOrderCount?: double(name='OutOrderCount', description='The number of disordered packets.', example='1'),
      outOutOrderCount?: double(name='OutOutOrderCount', description='The number of outbound disordered packets.', example='1'),
      outPacketCount?: double(name='OutPacketCount', description='The number of outbound packets.', example='22'),
      outRetranCount?: double(name='OutRetranCount', description='The number of outbound repeated packets.', example='1'),
      packetCount?: double(name='PacketCount', description='The number of packets.', example='66'),
      protocol?: string(name='Protocol', description='The protocol number.', example='6'),
      retransmitRate?: double(name='RetransmitRate', description='The retransmission rate of TCP packets.', example='0.1'),
      rtt?: double(name='Rtt', description='The round-trip time (RTT). Unit: milliseconds.', example='10000'),
    }
  ](name='Data', description='The ranking result of Internet traffic data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
}

model GetInternetTupleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInternetTupleResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI GetInternetTuple is deprecated, please use nis::2021-12-16::GetNisNetworkRanking instead.  * @param request  the request parameters of GetInternetTuple  GetInternetTupleRequest
  * @return GetInternetTupleResponse
 */
// Deprecated
async function getInternetTuple(request: GetInternetTupleRequest): GetInternetTupleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInternetTuple', 'POST', '/', 'json', false, 'json', request);
}

model GetNatTopNRequest {
  beginTime: long(name='BeginTime', description='The beginning of the time range to query in milliseconds. If you do not specify **EndTime**, the point in time specified by **BeginTime** is queried.

This parameter is required.', example='1638239092000', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query in milliseconds. The time range specified by **BeginTime** and **EndTime** cannot exceed **86400000** milliseconds (24 hours).', example='1638239093000', position='Query'),
  ip?: string(name='Ip', description='Query ranking statistics for a specific IP address. If you specify this parameter, you do not need to specify **TopN** or **OrderBy**.', example='192.168.156.101', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-sample***', position='Query'),
  orderBy?: string(name='OrderBy', description='The metric that is used for real-time SNAT performance ranking. Valid values:

*   **InBps**: inbound data transfer. Unit: bit/s.
*   **OutBps**: outbound data transfer. Unit: bit/s.
*   **InPps**: inbound packet forwarding rate. Unit: packets per second.
*   **OutPps**: outbound packet forwarding rate. Unit: packets per second.
*   **NewSessionPerSecond**: new connection creation rate. Unit: connections per second.
*   **ActiveSessionCount**: number of concurrent connections. Unit: connections.', example='InBps', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the NAT gateway is deployed.', example='cn-shanghai', position='Query'),
  topN?: int32(name='TopN', description='The number of entries to return for real-time SNAT performance ranking. Valid values: **1 to 100**. Default value: **10**.', example='10', position='Query'),
}

model GetNatTopNResponseBody = {
  isTopNOpen?: boolean(name='IsTopNOpen', description='Indicates whether Network Intelligence Service (NIS) is activated. The NatGatewayTopN parameter returns an empty array when NIS is not activated.

*   **true**: activated
*   **false**: not activated', example='true'),
  natGatewayTopN?: [ 
    {
      activeSessionCount?: float(name='ActiveSessionCount', description='The number of concurrent connections. Unit: connections.', example='8'),
      inBps?: float(name='InBps', description='The inbound data transfer. Unit: bit/s.', example='100'),
      inFlowPerMinute?: float(name='InFlowPerMinute', description='This field is reserved and not in use.', example='10'),
      inPps?: float(name='InPps', description='The inbound packet forwarding rate. Unit: packets per second.', example='10'),
      ip?: string(name='Ip', description='The IP address.', example='192.168.156.101'),
      newSessionPerSecond?: float(name='NewSessionPerSecond', description='The new connection creation rate. Unit: connections per second.', example='2'),
      outBps?: float(name='OutBps', description='The outbound data transfer. Unit: bit/s.', example='200'),
      outFlowPerMinute?: float(name='OutFlowPerMinute', description='This field is reserved and not in use.', example='10'),
      outPps?: float(name='OutPps', description='The outbound packet forwarding rate. Unit: packets per second.', example='20'),
    }
  ](name='NatGatewayTopN', description='An array of statistics about real-time SNAT performance ranking.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='77C512B5-12f3-f892-BD94-88A98271C1A0'),
}

model GetNatTopNResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNatTopNResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI GetNatTopN is deprecated, please use nis::2021-12-16::GetNisNetworkRanking instead.  * @param request  the request parameters of GetNatTopN  GetNatTopNRequest
  * @return GetNatTopNResponse
 */
// Deprecated
async function getNatTopN(request: GetNatTopNRequest): GetNatTopNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNatTopN', 'POST', '/', 'json', false, 'json', request);
}

model GetNetworkReachableAnalysisRequest {
  networkReachableAnalysisId: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability. You can call the **CreateNetworkRearchableAnalysis** operation to obtain the ID of the task for analyzing network reachability.

This parameter is required.', example='nra-90eef36a9e6e4662****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to obtain the result of network reachability analysis.', example='cn-shanghai', position='Query'),
}

model GetNetworkReachableAnalysisResponseBody = {
  aliUid?: long(name='AliUid', description='The unique ID (UID) of the Alibaba Cloud account.', example='123147627844****'),
  createTime?: string(name='CreateTime', description='The time when the network path was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-16T07:11:27Z'),
  networkPathId?: string(name='NetworkPathId', description='The network path ID.', example='np-2a1332214fa346b6****'),
  networkPathParameter?: string(name='NetworkPathParameter', description='The parameters of the network path.', example='{
  "sourceId": "i-bp100g5pbp6kj4p9****",
  "sourceType": "ecs",
  "targetId": "i-t4n4ltwgbbomzb0g****",
  "targetType": "ecs"
}'),
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability.', example='nra-8607514e71c1484****'),
  networkReachableAnalysisResult?: string(name='NetworkReachableAnalysisResult', description='The result of network reachability analysis, which includes the network topology, error codes of network unreachability, and rules of network unreachability.', example='{
  "errorCode": "",
  "networkAclData": {
    "networkAclItems": [
      
    ]
  },
  "nraId": "nra-f2c8701a36424094****",
  "requestId": "B931F8A0-620E-5230-B77F-3BD7F612****",
  "routeData": {
    "routeItems": [
      
    ]
  },
  "securityGroupData": {
    "policy": "accept",
    "securityGroupItems": [
      {
        "description": "default_sg_access_rule",
        "matchedRule": {
          "bizProtocol": "ALL",
          "creatingTime": "2022-11-10T03:24:49Z",
          "description": "",
          "destinationCidr": "",
          "destinationGroupId": "sg-wz980j96p8y99co5****",
          "direction": "egress",
          "policy": "Accept",
          "portRange": "-1/-1",
          "priority": "1",
          "sourceCidr": "",
          "sourceGroupId": ""
        },
        "policy": "accept",
        "resourceId": "eni-wz92ce4saz1jzazg****",
        "securityGroupId": "sg-wz980j96p8y99co5****"
      },
      {
        "description": "user_acl_drop_rule",
        "matchedRule": {
          "bizProtocol": "",
          "creatingTime": "",
          "description": "",
          "destinationCidr": "",
          "destinationGroupId": "",
          "direction": "",
          "policy": "",
          "portRange": "",
          "priority": "",
          "sourceCidr": "",
          "sourceGroupId": ""
        },
        "policy": "",
        "resourceId": "eni-wz97vry93t6z4lbd****",
        "securityGroupId": "sg-wz980j96p8y99co****"
      }
    ],
    "securityGroupReportId": "sgr-4479d23bb37241aab****"
  },
  "status": "security_group_checking_target",
  "topologyData": {
    "positive": {
      "linkList": [
        {
          "id": "i-wz91dk7bor557hp93zyv-->eni-wz92ce4saz1jzazg****",
          "source": "i-wz91dk7bor557hp9****",
          "target": "eni-wz92ce4saz1jzazg****"
        },
        {
          "id": "eni-wz92ce4saz1jzazgi13d-->vsw-wz9slpwdcppwfrnee****",
          "source": "eni-wz92ce4saz1jzazg****",
          "target": "vsw-wz9slpwdcppwfrnee****"
        },
        {
          "id": "vsw-wz9slpwdcppwfrneebcrp-->eni-wz97vry93t6z4lbd****",
          "source": "vsw-wz9slpwdcppwfrnee****",
          "target": "eni-wz97vry93t6z4lbd****"
        },
        {
          "id": "eni-wz97vry93t6z4lbdgmfi-->i-wz91dk7bor557hp9****",
          "source": "eni-wz97vry93t6z4lbd****",
          "target": "i-wz91dk7bor557hp9****"
        }
      ],
      "nodeList": [
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 1,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 3,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "vsw-wz9slpwdcppwfrnee****",
          "cidr": "192.168.0.0/24",
          "id": "vsw-wz9slpwdcppwfrnee****",
          "level": 2,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VSW",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "bizInsId": "eni-wz92ce4saz1jzazg****",
          "id": "eni-wz92ce4saz1jzazg****",
          "ip": "192.168.0.33",
          "mac": "00:XXXX:3e:16:7c:50",
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "status": "InUse",
          "trafficLogs": [
            
          ]
        },
        {
          "bizInsId": "eni-wz97vry93t6z4lbd****",
          "id": "eni-wz97vry93t6z4lbd****",
          "ip": "192.168.0.34",
          "mac": "00:XXXX:3e:14:70:c2",
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "status": "InUse",
          "trafficLogs": [
            
          ]
        }
      ]
    },
    "reverse": {
      "revLinkList": [
        {
          "id": "i-wz91dk7bor557hp93zys-->eni-wz97vry93t6z4lbd****",
          "source": "i-wz91dk7bor557hp9****",
          "target": "eni-wz97vry93t6z4lbd****"
        },
        {
          "id": "eni-wz97vry93t6z4lbdgmfi-->vsw-wz9slpwdcppwfrnee****",
          "source": "eni-wz97vry93t6z4lbd****",
          "target": "vsw-wz9slpwdcppwfrnee****"
        },
        {
          "id": "vsw-wz9slpwdcppwfrneebcrp-->eni-wz92ce4saz1jzazg****",
          "source": "vsw-wz9slpwdcppwfrnee****",
          "target": "eni-wz92ce4saz1jzazg****"
        },
        {
          "id": "eni-wz92ce4saz1jzazgi13d-->i-wz91dk7bor557hp9****",
          "source": "eni-wz92ce4saz1jzazg****",
          "target": "i-wz91dk7bor557hp9****"
        }
      ],
      "revNodeList": [
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 1,
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 3,
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "vsw-wz9slpwdcppwfrnee****",
          "cidr": "192.168.0.0/24",
          "id": "vsw-wz9slpwdcppwfrnee****",
          "level": 2,
          "nodeType": "VSW",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "bizInsId": "eni-wz97vry93t6z4lbd****",
          "id": "eni-wz97vry93t6z4lbd****",
          "ip": "192.168.0.34",
          "mac": "00:XXXX:3e:14:70:c2",
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          },
          "status": "InUse"
        },
        {
          "bizInsId": "eni-wz92ce4saz1jzazg****",
          "id": "eni-wz92ce4saz1jzazg****",
          "ip": "192.168.0.33",
          "mac": "00:XXXX:3e:16:7c:50",
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          },
          "status": "InUse"
        }
      ]
    },
    "topologyReportId": "tpr-21cf60002715491b8****"
  }
}'),
  networkReachableAnalysisStatus?: string(name='NetworkReachableAnalysisStatus', description='The state of the task for analyzing network reachability. Valid values:

*   **init**: The task is in progress.
*   **finish**: The task is complete.
*   **error**: An analysis error occurred.
*   **timeout**: The task timed out.', example='finish'),
  reachable?: boolean(name='Reachable', description='Indicates whether the network path is reachable. Valid values:

*   **true**: The network path is reachable.
*   **false**: The network path is unreachable.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='DEE0FEAF-59AE-5CDD-AA07-626BC365D571'),
}

model GetNetworkReachableAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * @description **GetNetworkReachableAnalysis** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can query the state of the task for analyzing network reachability.
  * *   The **init** state indicates that the task is in progress.
  * *   The **finish** state indicates that the task is complete. In this state, you can obtain the analysis result.
  * @param request  the request parameters of GetNetworkReachableAnalysis  GetNetworkReachableAnalysisRequest
  * @return GetNetworkReachableAnalysisResponse
 */
async function getNetworkReachableAnalysis(request: GetNetworkReachableAnalysisRequest): GetNetworkReachableAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetworkReachableAnalysis', 'POST', '/', 'json', false, 'json', request);
}

model GetNisNetworkMetricsRequest {
  accountIds?: [ string ](name='AccountIds', position='Query'),
  beginTime?: long(name='BeginTime', example='1638239092000', minimum=0, maximum=253402271999000, position='Query'),
  dimensions: [ 
    {
      name?: string(name='Name', example='instanceId'),
      value?: string(name='Value', example='eip-sample*'),
    }
  ](name='Dimensions', description='This parameter is required.', shrink='json', position='Query'),
  endTime?: long(name='EndTime', example='1684373700099', minimum=0, maximum=253402271999000, position='Query'),
  metricName: string(name='MetricName', description='This parameter is required.', example='bps', position='Query'),
  regionNo: string(name='RegionNo', description='This parameter is required.', example='cn-shenzhen', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='AccessInternetIPV4', position='Query'),
  scanBy?: string(name='ScanBy', example='TimestampAscending', position='Query'),
  stepMinutes?: int32(name='StepMinutes', position='Query'),
  useCrossAccount?: boolean(name='UseCrossAccount', example='false', position='Query'),
}

model GetNisNetworkMetricsResponseBody = {
  data?: {
    metrics?: [ 
      {
        timeStamp?: long(name='TimeStamp', example='1690684091100'),
        value?: double(name='Value', example='88'),
      }
    ](name='Metrics'),
    unit?: string(name='Unit', example='Bits/Second'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
}

model GetNisNetworkMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNisNetworkMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNisNetworkMetrics  GetNisNetworkMetricsRequest
  * @return GetNisNetworkMetricsResponse
 */
async function getNisNetworkMetrics(request: GetNisNetworkMetricsRequest): GetNisNetworkMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNisNetworkMetrics', 'POST', '/', 'json', false, 'json', request);
}

model GetNisNetworkRankingRequest {
  accountIds?: [ string ](name='AccountIds', position='Query'),
  beginTime?: long(name='BeginTime', example='1684373600099', minimum=0, maximum=253402271999000, position='Query'),
  direction: string(name='Direction', description='This parameter is required.', example='in', position='Query'),
  endTime?: long(name='EndTime', example='1684379093000', minimum=0, maximum=253402271999000, position='Query'),
  filter?: [ 
    {
      name?: string(name='Name', example='instanceId'),
      value?: string(name='Value', example='lb-2zxxxxz1d'),
    }
  ](name='Filter', shrink='json', position='Query'),
  groupBy: string(name='GroupBy', description='This parameter is required.', example='Protocol', position='Query'),
  orderBy: string(name='OrderBy', description='This parameter is required.', example='bps', position='Query'),
  regionNo: string(name='RegionNo', description='This parameter is required.', example='cn-beijing', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='AccessInternetIpV4', position='Query'),
  sort?: string(name='Sort', example='desc', position='Query'),
  topN?: int32(name='TopN', example='10', minimum=1, maximum=100, position='Query'),
  useCrossAccount?: boolean(name='UseCrossAccount', example='false', position='Query'),
}

model GetNisNetworkRankingResponseBody = {
  data?: [ 
    {
      activeSessionCount?: double(name='ActiveSessionCount', example='66'),
      asn?: string(name='Asn', example='129103'),
      attachmentId?: string(name='AttachmentId', example='tr-sample*'),
      bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-sample*'),
      byteCount?: double(name='ByteCount', example='1024'),
      city?: string(name='City'),
      country?: string(name='Country'),
      destinationIp?: string(name='DestinationIp', example='2.2.XX.XX'),
      destinationIsp?: string(name='DestinationIsp'),
      destinationPort?: string(name='DestinationPort', example='80'),
      destinationRegionNo?: string(name='DestinationRegionNo', example='cn-hangzhou'),
      destinationZone?: string(name='DestinationZone', example='cn-hangzhou-b'),
      ip?: string(name='IP', example='120.238.XX.XX'),
      inBps?: double(name='InBps', example='10'),
      inPps?: double(name='InPps', example='3'),
      instanceId?: string(name='InstanceId', example='eip-sample*'),
      isp?: string(name='Isp'),
      newSessionPerSecond?: double(name='NewSessionPerSecond', example='18'),
      outBps?: double(name='OutBps', example='88'),
      outPps?: double(name='OutPps', example='8'),
      packetCount?: double(name='PacketCount', example='66'),
      protocol?: string(name='Protocol', example='6'),
      province?: string(name='Province'),
      RTT?: double(name='RTT', example='23'),
      regionNo?: string(name='RegionNo', example='cn-shenzhen'),
      retransmitRate?: double(name='RetransmitRate', example='0.1'),
      sourceIp?: string(name='SourceIp', example='42.120.XX.XX'),
      sourceIsp?: string(name='SourceIsp'),
      sourcePort?: string(name='SourcePort', example='443'),
      sourceZone?: string(name='SourceZone', example='cn-hangzhou-a'),
      vbrId?: string(name='VbrId', example='vbr-sample*'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model GetNisNetworkRankingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNisNetworkRankingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNisNetworkRanking  GetNisNetworkRankingRequest
  * @return GetNisNetworkRankingResponse
 */
async function getNisNetworkRanking(request: GetNisNetworkRankingRequest): GetNisNetworkRankingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNisNetworkRanking', 'POST', '/', 'json', false, 'json', request);
}

model GetTransitRouterFlowTopNRequest {
  accountIds?: [ long ](name='AccountIds', description='The IDs of the member accounts.', shrink='json', position='Query'),
  bandwithPackageId?: string(name='BandwithPackageId', description='The ID of the CEN bandwidth plan.', example='cenbwp-ia8kw1zjv4hyal*****', position='Query'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.

This parameter is required.', example='1684373600099', position='Query'),
  cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****', position='Query'),
  direction: string(name='Direction', description='The direction of the inter-region traffic in the local regions or for the local IP addresses. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic

This parameter is required.', example='in', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.

This parameter is required.', example='1638239093000', position='Query'),
  groupBy: string(name='GroupBy', description='The dimension for ranking inter-region traffic data. The value of this parameter is case-sensitive. Valid values:

*   **1Tuple**: queries the rankings of inter-region traffic data for the local regions, Cloud Enterprise Network (CEN) instances, and IP addresses.
*   **2Tuple**: queries the rankings of inter-region traffic data for the local and remote regions, and the local and remote IP addresses.
*   **5Tuple**: queries the rankings of inter-region traffic data for the local and remote IP addresses, local and remote ports, and protocols.
*   **Cen**: queries the rankings of inter-region traffic data for CEN instances.
*   **RegionPair**: queries the rankings of inter-region traffic data for the local and remote regions.
*   **Port**: queries the rankings of inter-region traffic data for the local and remote ports.
*   **Protocol**: queries the rankings of inter-region traffic data for the protocols.

This parameter is required.', example='1Tuple', position='Query'),
  orderBy?: string(name='OrderBy', description='The metric for ranking inter-region traffic data. Default value: Bytes. This value specifies that inter-region traffic data is ranked by traffic volume.', example='Bytes', position='Query'),
  otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX', position='Query'),
  otherPort?: string(name='OtherPort', description='The remote port.', example='10869', position='Query'),
  otherRegion?: string(name='OtherRegion', description='The remote region.', example='ap-southeast-1', position='Query'),
  protocol?: string(name='Protocol', description='The protocol number.

>  All protocols are supported. This parameter is required only if you set **GroupBy** to **5Tuple** or **Protocol**.', example='6', position='Query'),
  sort?: string(name='Sort', description='The order for ranking inter-region traffic data. Valid values:

*   **desc**: descending order
*   **asc**: ascending order', example='desc', position='Query'),
  thisIp?: string(name='ThisIp', description='The local IP address.', example='1.8.XX.XX', position='Query'),
  thisPort?: string(name='ThisPort', description='The local port.', example='80', position='Query'),
  thisRegion?: string(name='ThisRegion', description='The local region where the **local IP address** resides.', example='cn-shanghai', position='Query'),
  topN?: int32(name='TopN', description='Specifies the maximum number of data entries to display. Default value: **10**. Maximum value: 100.', example='20', minimum=1, maximum=100, position='Query'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false', position='Query'),
}

model GetTransitRouterFlowTopNResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  transitRouterFlowTopN?: [ 
    {
      accountId?: string(name='AccountId', description='The account ID.', example='118639953821xxxx'),
      bandwithPackageId?: string(name='BandwithPackageId', description='The ID of the CEN bandwidth plan.', example='cenbwp-ia8kw1zjv4hyal****'),
      bytes?: double(name='Bytes', description='The total volume of traffic in the specified time range.', example='188'),
      cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****'),
      endTime?: string(name='EndTime', description='The end of the time range that you queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-01-31T06:40:00Z'),
      otherIp?: string(name='OtherIp', description='The remote IP address.', example='47.216.XX.XX'),
      otherPort?: string(name='OtherPort', description='The remote port.', example='53470'),
      otherRegion?: string(name='OtherRegion', description='The remote region where the **remote IP address** resides.', example='ap-southeast-1'),
      packets?: double(name='Packets', description='The total number of packets in the specified time range.', example='88'),
      protocol?: string(name='Protocol', description='The protocol number.', example='6'),
      startTime?: string(name='StartTime', description='The beginning of the time range that you queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-01-31T05:40:00Z'),
      thisIp?: string(name='ThisIp', description='The local IP address.', example='1.8.XX.XX'),
      thisPort?: string(name='ThisPort', description='The local port.', example='80'),
      thisRegion?: string(name='ThisRegion', description='The local region where the **local IP address** resides.', example='cn-shanghai'),
    }
  ](name='TransitRouterFlowTopN', description='The ranking result of inter-region traffic data.'),
}

model GetTransitRouterFlowTopNResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTransitRouterFlowTopNResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI GetTransitRouterFlowTopN is deprecated, please use nis::2021-12-16::GetNisNetworkRanking instead.  * @param request  the request parameters of GetTransitRouterFlowTopN  GetTransitRouterFlowTopNRequest
  * @return GetTransitRouterFlowTopNResponse
 */
// Deprecated
async function getTransitRouterFlowTopN(request: GetTransitRouterFlowTopNRequest): GetTransitRouterFlowTopNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTransitRouterFlowTopN', 'POST', '/', 'json', false, 'json', request);
}

model GetVbrFlowTopNRequest {
  accountIds?: [ long ](name='AccountIds', description='The IDs of member accounts.', shrink='json', position='Query'),
  attachmentId?: string(name='AttachmentId', description='The CEN connection ID.', example='tr-attach-dnv870gmqzmb5u****', position='Query'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.

This parameter is required.', example='1638239092000', position='Query'),
  cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-ia8kw1zjv4hyal****', position='Query'),
  cloudIp?: string(name='CloudIp', description='The local IP address.', example='112.74.XX.XX', position='Query'),
  cloudPort?: string(name='CloudPort', description='The local port.

>  This parameter is required only if you set **GroupBy** to **CloudPort**.', example='443', position='Query'),
  direction: string(name='Direction', description='The direction of the hybrid cloud traffic in the local regions or for the local IP addresses. Valid values:

*   **in**: traffic from a data center to Alibaba Cloud
*   **out**: traffic from Alibaba Cloud to a data center

This parameter is required.', example='in', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The maximum time range that you can query is 24 hours.

This parameter is required.', example='1638239093000', position='Query'),
  groupBy: string(name='GroupBy', description='The dimension for ranking hybrid cloud traffic data. The value of this parameter is case-sensitive. Valid values:

*   **1Tuple**: queries the rankings of hybrid cloud traffic data for the Cloud Enterprise Network (CEN) instances, CEN connections, virtual border routers (VBRs), and IP addresses.
*   **2Tuple**: queries the rankings of hybrid cloud traffic data for the local and remote IP addresses.
*   **5Tuple**: queries the rankings of hybrid cloud traffic data for the local and remote IP addresses, local and remote ports, and protocols.
*   **CloudPort**: queries the rankings of hybrid cloud traffic data for the local ports.
*   **OtherPort**: queries the rankings of hybrid cloud traffic data for the remote ports.
*   **Protocol**: queries the rankings of hybrid cloud traffic data for the protocols.

This parameter is required.', example='1Tuple', position='Query'),
  orderBy?: string(name='OrderBy', description='The metric for ranking hybrid cloud traffic data. Default value: Bytes. This value specifies that hybrid cloud traffic data is ranked by traffic volumes.', example='Bytes', position='Query'),
  otherIp?: string(name='OtherIp', description='The remote IP address.', example='122.112.XX.XX', position='Query'),
  otherPort?: string(name='OtherPort', description='The remote port.

>  This parameter is required only if you set **GroupBy** to **OtherPort**.', example='40002', position='Query'),
  protocol?: string(name='Protocol', description='The protocol number.

>  All protocols are supported. This parameter is required only if you set **GroupBy** to **5Tuple** or **Protocol**.', example='6', position='Query'),
  regionId: string(name='RegionId', description='The local region.

This parameter is required.', example='cn-shanghai', position='Query'),
  sort?: string(name='Sort', description='The order for ranking hybrid cloud traffic data. Valid values:

*   **desc**: descending order
*   **asc**: ascending order', example='desc', position='Query'),
  topN?: int32(name='TopN', description='Specifies top-N traffic data to display. Default value: **10**. This value specifies that top-10 traffic data is displayed by default. Maximum value: **100**.', example='10', minimum=1, maximum=100, position='Query'),
  useMultiAccount?: boolean(name='UseMultiAccount', description='Specifies whether to enable the multi-account management feature. Default value: **false**. This value specifies that the multi-account management feature is disabled.

>  By default, the multi-account management feature is not available. If you want to use this feature, contact your account manager to apply for permissions.', example='false', position='Query'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId', description='The ID of the VBR that is associated with the Express Connect circuit.', example='vbr-k1atj46citwuek42j****', position='Query'),
}

model GetVbrFlowTopNResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
  virtualBorderRouterFlowlogTopN?: [ 
    {
      accountId?: string(name='AccountId', description='The account ID.', example='156237031628****'),
      attachmentId?: string(name='AttachmentId', description='The CEN connection ID.', example='tr-attach-u6v1j3jre0fe9h****'),
      bytes?: double(name='Bytes', description='The total volume of traffic in the specified time range.', example='108'),
      cloudIp?: string(name='CloudIp', description='The local IP address.', example='120.24.X.X'),
      cloudPort?: string(name='CloudPort', description='The local port.', example='80'),
      cloudRegion?: string(name='CloudRegion', description='The local region where the local IP address resides.', example='cn-shanghai'),
      otherIp?: string(name='OtherIp', description='The remote IP address.', example='222.85.X.X'),
      otherPort?: string(name='OtherPort', description='The remote port.', example='10965'),
      packets?: double(name='Packets', description='The total number of packets in the specified time range.', example='66'),
      protocol?: string(name='Protocol', description='The protocol number.', example='6'),
      virtualBorderRouterId?: string(name='VirtualBorderRouterId', description='The ID of the VBR that is associated with the Express Connect circuit.', example='vbr-k1atj46citwuek42j****'),
    }
  ](name='VirtualBorderRouterFlowlogTopN', description='The ranking result of hybrid cloud traffic data.'),
}

model GetVbrFlowTopNResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVbrFlowTopNResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI GetVbrFlowTopN is deprecated, please use nis::2021-12-16::GetNisNetworkRanking instead.  * @param request  the request parameters of GetVbrFlowTopN  GetVbrFlowTopNRequest
  * @return GetVbrFlowTopNResponse
 */
// Deprecated
async function getVbrFlowTopN(request: GetVbrFlowTopNRequest): GetVbrFlowTopNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVbrFlowTopN', 'POST', '/', 'json', false, 'json', request);
}

model ListNisInspectionResourceTypeRequest {
}

model ListNisInspectionResourceTypeResponseBody = {
  requestId?: string(name='RequestId', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  resourceTypeList?: [ 
    {
      resourceType?: string(name='ResourceType', example='EIP'),
    }
  ](name='ResourceTypeList'),
}

model ListNisInspectionResourceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNisInspectionResourceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNisInspectionResourceType  ListNisInspectionResourceTypeRequest
  * @return ListNisInspectionResourceTypeResponse
 */
async function listNisInspectionResourceType(request: ListNisInspectionResourceTypeRequest): ListNisInspectionResourceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNisInspectionResourceType', 'POST', '/', 'json', false, 'json', request);
}

model ListNisInspectionTaskReportsRequest {
  inspectionTaskId: string(name='InspectionTaskId', description='This parameter is required.', example='ni-8svmpe0yso2bhzr7fh79', minLength=1, maxLength=23, position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml194Cz/lMNdmr+DEh0th6dVlNEo/F148UPCh2itDku7Qj', position='Query'),
}

model ListNisInspectionTaskReportsResponseBody = {
  inspectionReportList?: [ 
    {
      inspectionReportId?: string(name='InspectionReportId', example='nir-7c3dd178738a429abe6d'),
    }
  ](name='InspectionReportList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml194Cz/lMNdmr+DEh0th6dVlNEo/F148UPCh2itDku7Qj'),
  requestId?: string(name='RequestId', example='0D213AF9-7B8A-51A8-B411-2D797A1A447B'),
  totalCount?: int32(name='TotalCount', example='34'),
}

model ListNisInspectionTaskReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNisInspectionTaskReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNisInspectionTaskReports  ListNisInspectionTaskReportsRequest
  * @return ListNisInspectionTaskReportsResponse
 */
async function listNisInspectionTaskReports(request: ListNisInspectionTaskReportsRequest): ListNisInspectionTaskReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNisInspectionTaskReports', 'POST', '/', 'json', false, 'json', request);
}

model ListNisInspectionTasksRequest {
  inspectionName?: string(name='InspectionName', minLength=1, maxLength=128, position='Query'),
  inspectionProject?: string(name='InspectionProject', example='basic', minLength=1, maxLength=64, position='Query'),
  inspectionTaskId?: string(name='InspectionTaskId', example='ni-8svm******hzr7fh79', minLength=1, maxLength=128, position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml1/R9jhHkiH8eW3CfaOYU0CEL7yiT0zae6J8v1zYNg+d1', position='Query'),
  status?: string(name='Status', example='Active', minLength=1, maxLength=50, position='Query'),
}

model ListNisInspectionTasksResponseBody = {
  inspectionTaskList?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-06-18 00:14:46'),
      inspectionName?: string(name='InspectionName'),
      inspectionProject?: string(name='InspectionProject', example='basic'),
      inspectionTaskId?: string(name='InspectionTaskId', example='ni-8svm******hzr7fh79'),
      lastUpdateReportId?: string(name='LastUpdateReportId', example='nir-b4c4c9******8a25e'),
      status?: string(name='Status', example='Active'),
    }
  ](name='InspectionTaskList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='hKrS+MVXkuOgztXnvdml194Cz/lMNdmr+DEh0th6dVlNEo/F148UPCh2itDku7Qj'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListNisInspectionTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNisInspectionTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNisInspectionTasks  ListNisInspectionTasksRequest
  * @return ListNisInspectionTasksResponse
 */
async function listNisInspectionTasks(request: ListNisInspectionTasksRequest): ListNisInspectionTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNisInspectionTasks', 'POST', '/', 'json', false, 'json', request);
}

model StartNisInspectionTaskRequest {
  inspectionTaskId: string(name='InspectionTaskId', description='This parameter is required.', example='ni-8svmpe0yso****r7fh79', minLength=1, maxLength=128, position='Query'),
}

model StartNisInspectionTaskResponseBody = {
  inspectionReportId?: string(name='InspectionReportId', example='nir-9923e262c106461d86ad'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model StartNisInspectionTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartNisInspectionTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartNisInspectionTask  StartNisInspectionTaskRequest
  * @return StartNisInspectionTaskResponse
 */
async function startNisInspectionTask(request: StartNisInspectionTaskRequest): StartNisInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartNisInspectionTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNisInspectionTaskRequest {
  inspectionTaskId: string(name='InspectionTaskId', description='This parameter is required.', example='ni-8svmpe0yso2bhzr7fh79', minLength=1, maxLength=128, position='Query'),
  status?: string(name='Status', example='Active', position='Query'),
}

model UpdateNisInspectionTaskResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model UpdateNisInspectionTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNisInspectionTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateNisInspectionTask  UpdateNisInspectionTaskRequest
  * @return UpdateNisInspectionTaskResponse
 */
async function updateNisInspectionTask(request: UpdateNisInspectionTaskRequest): UpdateNisInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNisInspectionTask', 'POST', '/', 'json', false, 'json', request);
}

