/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'nis';
  @version = '2021-12-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAndAnalyzeNetworkPathRequest {
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **tcp**: Transmission Control Protocol (TCP)
*   **udp**: User Datagram Protocol (UDP)
*   **icmp**: Internet Control Message Protocol (ICMP)', example='tcp', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to initiate a task for analyzing network reachability.', example='cn-shanghai', position='Query'),
  sourceId: string(name='SourceId', description='The ID of the source resource.', example='i-uf62y8khhbkbdrp6****', position='Query'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='192.168.XX.XX', position='Query'),
  sourcePort?: int32(name='SourcePort', description='The source port.', example='0', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source resource. Valid values:

*   **ecs**: the Elastic Compute Service (ECS) instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the virtual border router (VBR)', example='ecs', position='Query'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-m5eactvw7wtpktv5****', position='Query'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='172.50.XX.XX', position='Query'),
  targetPort?: int32(name='TargetPort', description='The destination port.', example='80', position='Query'),
  targetType?: string(name='TargetType', description='The type of the destination resource. Valid values:

*   **ecs**: the ECS instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the VBR
*   **clb**: the Classic Load Balancer (CLB) instance', example='ecs', position='Query'),
}

model CreateAndAnalyzeNetworkPathResponseBody = {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability that you initiated.', example='nra-dfe9e53d2b524568****'),
  protocol?: string(name='Protocol', description='The protocol type.', example='tcp'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
  sourceId?: string(name='SourceId', description='The ID of the source resource.', example='i-uf62y8khhbkbdrp6****'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='192.168.XX.XX'),
  sourcePort?: string(name='SourcePort', description='The source port.', example='0'),
  sourceType?: string(name='SourceType', description='The type of the source resource.', example='ecs'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-m5eactvw7wtpktv5****'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='172.50.XX.XX'),
  targetPort?: string(name='TargetPort', description='The destination port.', example='80'),
  targetType?: string(name='TargetType', description='The type of the destination resource.', example='ecs'),
}

model CreateAndAnalyzeNetworkPathResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAndAnalyzeNetworkPathResponseBody(name='body'),
}

/**
  * You can call this operation to initiate a task for analyzing network reachability by specifying only the information about the source and destination. You do not need to create a network path for reachability analysis. The analysis result is not recorded in the system. If you want to record the path parameters and analysis result in the Network Intelligence Service (NIS) console, we recommend that you call the **createNetworkReachableAnalysis** operation.
  *
 */
async function createAndAnalyzeNetworkPath(request: CreateAndAnalyzeNetworkPathRequest): CreateAndAnalyzeNetworkPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAndAnalyzeNetworkPath', 'GET', '/', 'json', false, 'json', request);
}

model CreateNetworkPathRequest {
  networkPathDescription?: string(name='NetworkPathDescription', description='The description of the network path.', example='Analyze the path from ECS to ECS', position='Query'),
  networkPathName: string(name='NetworkPathName', description='The name of the network path.', example='ecs2PublicIp', position='Query'),
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **tcp**: Transmission Control Protocol (TCP)
*   **udp**: User Datagram Protocol (UDP)
*   **icmp**: Internet Control Message Protocol (ICMP)', example='tcp', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to create.', example='cn-hangzhou', position='Query'),
  sourceId: string(name='SourceId', description='The ID of the source resource.', example='i-2zef4ngqfarepyun****', position='Query'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The source IP address.', example='172.17.XX.XX', position='Query'),
  sourcePort?: int32(name='SourcePort', description='The source port.', example='443', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source resource. Valid values:

*   **ecs**: the Elastic Compute Service (ECS) instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the virtual border router (VBR)', example='ecs', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  targetId?: string(name='TargetId', description='The ID of the destination resource.', example='i-bp13d0e064gubm****', minimum=0, position='Query'),
  targetIpAddress?: string(name='TargetIpAddress', description='The destination IP address.', example='192.168.0.210', position='Query'),
  targetPort?: int32(name='TargetPort', description='The destination port.', example='80', position='Query'),
  targetType?: string(name='TargetType', description='The type of the destination resource. Valid values:

*   **ecs**: the ECS instance
*   **internetIp**: the public IP address
*   **vsw**: the vSwitch
*   **vpn**: the VPN gateway
*   **vbr**: the VBR
*   **clb**: the Classic Load Balancer (CLB) instance', example='ecs', minimum=0, position='Query'),
}

model CreateNetworkPathResponseBody = {
  networkPathId?: string(name='NetworkPathId', description='The ID of the network path.', example='np-4cbf598673d14d27****'),
  requestId?: string(name='RequestId', description='The request ID.', example='92DD9FFB-06FB-56F7-83EF-5CEF98F5562A'),
}

model CreateNetworkPathResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkPathResponseBody(name='body'),
}

/**
  * *   You can call the **CreateNetworkPath** operation to create network paths in multiple networking scenarios and between multiple resources. After a path is created, the path parameters are saved for repeated analysis.
  * *   You can create up to 100 network paths within one Alibaba Cloud account.
  *
 */
async function createNetworkPath(request: CreateNetworkPathRequest): CreateNetworkPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkPath', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkReachableAnalysisRequest {
  networkPathId: string(name='NetworkPathId', description='The ID of the network path. You can call the **CreateNetworkPath** operation to obtain the ID of the network path.', example='np-b2f618ceb2c84057****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to create a task for analyzing network reachability.', example='cn-shanghai', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model CreateNetworkReachableAnalysisResponseBody = {
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability.', example='nra-2fede05617494417****'),
  requestId?: string(name='RequestId', description='The request ID.', example='A7F0D6EC-E19E-58AC-AC9F-08036763960F'),
}

model CreateNetworkReachableAnalysisResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * *   The **CreateNetworkReachableAnalysis** operation is used to create a task for analyzing the reachability of the network path that is created by calling the **CreateNetworkPath** operation and record the analysis results.
  * *   The **CreateNetworkReachableAnalysis** operation can be called to repeatedly analyze the reachability of a network path.
  * *   You can create up to 1,000 reachability analysis records within one Alibaba Cloud account.
  *
 */
async function createNetworkReachableAnalysis(request: CreateNetworkReachableAnalysisRequest): CreateNetworkReachableAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkReachableAnalysis', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkPathRequest {
  networkPathIds: [ string ](name='NetworkPathIds', description='The IDs of network paths.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the network path that you want to delete.', example='cn-shanghai', position='Query'),
}

model DeleteNetworkPathResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C4331873-C534-590F-A905-F66C53B88A47'),
}

model DeleteNetworkPathResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkPathResponseBody(name='body'),
}

async function deleteNetworkPath(request: DeleteNetworkPathRequest): DeleteNetworkPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkPath', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkReachableAnalysisRequest {
  networkReachableAnalysisIds: [ string ](name='NetworkReachableAnalysisIds', description='The IDs of the tasks for analyzing network reachability.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to delete a task for analyzing network reachability.', example='cn-shanghai', position='Query'),
}

model DeleteNetworkReachableAnalysisResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4838F3F2-30E1-5D82-B25A-B9FE33BC3E25'),
}

model DeleteNetworkReachableAnalysisResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkReachableAnalysisResponseBody(name='body'),
}

async function deleteNetworkReachableAnalysis(request: DeleteNetworkReachableAnalysisRequest): DeleteNetworkReachableAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkReachableAnalysis', 'POST', '/', 'json', false, 'json', request);
}

model GetInternetTupleRequest {
  accountIds?: [ string ](name='AccountIds', position='Query'),
  beginTime: long(name='BeginTime', example='1684373600099', position='Query'),
  cloudIp?: string(name='CloudIp', example='112.74.XX.XX', position='Query'),
  cloudIsp?: string(name='CloudIsp', position='Query'),
  cloudPort?: string(name='CloudPort', example='443', position='Query'),
  direction: string(name='Direction', example='in', position='Query'),
  endTime: long(name='EndTime', example='1684373700099', position='Query'),
  instanceId?: string(name='InstanceId', example='eip-sample*', position='Query'),
  instanceList?: [ string ](name='InstanceList', shrink='json', position='Query'),
  orderBy?: string(name='OrderBy', example='ByteCount', position='Query'),
  otherCity?: string(name='OtherCity', position='Query'),
  otherCountry?: string(name='OtherCountry', position='Query'),
  otherIp?: string(name='OtherIp', example='122.112.XX.XX', position='Query'),
  otherIsp?: string(name='OtherIsp', position='Query'),
  otherPort?: string(name='OtherPort', example='40002', position='Query'),
  protocol?: string(name='Protocol', example='6', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: string(name='Sort', example='desc', position='Query'),
  topN?: int32(name='TopN', example='10', position='Query'),
  tupleType: int32(name='TupleType', example='1', position='Query'),
  useMultiAccount?: boolean(name='UseMultiAccount', example='false', position='Query'),
}

model GetInternetTupleResponseBody = {
  data?: [ 
    {
      accessRegion?: string(name='AccessRegion', example='cn-hongkong-pop'),
      beginTime?: string(name='BeginTime', example='1684373600099'),
      byteCount?: double(name='ByteCount', example='88'),
      cloudCity?: string(name='CloudCity'),
      cloudCountry?: string(name='CloudCountry'),
      cloudIp?: string(name='CloudIp', example='112.74.XX.XX'),
      cloudIsp?: string(name='CloudIsp'),
      cloudPort?: string(name='CloudPort', example='443'),
      cloudProduct?: string(name='CloudProduct', example='EIP'),
      cloudProvince?: string(name='CloudProvince'),
      direction?: string(name='Direction', example='in'),
      inByteCount?: double(name='InByteCount', example='88'),
      inOutOrderCount?: double(name='InOutOrderCount', example='2'),
      inPacketCount?: double(name='InPacketCount', example='33'),
      inRetranCount?: double(name='InRetranCount', example='0'),
      instanceId?: string(name='InstanceId', example='eip-sample*'),
      otherCity?: string(name='OtherCity'),
      otherCountry?: string(name='OtherCountry'),
      otherIp?: string(name='OtherIp', example='122.112.XX.XX'),
      otherIsp?: string(name='OtherIsp', example='amazon.com'),
      otherPort?: string(name='OtherPort', example='40002'),
      otherProduct?: string(name='OtherProduct', example='ECS'),
      otherProvince?: string(name='OtherProvince'),
      outByteCount?: double(name='OutByteCount', example='66'),
      outOrderCount?: double(name='OutOrderCount', example='1'),
      outOutOrderCount?: double(name='OutOutOrderCount', example='1'),
      outPacketCount?: double(name='OutPacketCount', example='22'),
      outRetranCount?: double(name='OutRetranCount', example='1'),
      packetCount?: double(name='PacketCount', example='66'),
      protocol?: string(name='Protocol', example='6'),
      retranCount?: double(name='RetranCount', example='0'),
      rtt?: double(name='Rtt', example='10000'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='D5E98683-355B-5867-8D3D-A24755F6895B'),
}

model GetInternetTupleResponse = {
  headers: map[string]string(name='headers'),
  body: GetInternetTupleResponseBody(name='body'),
}

async function getInternetTuple(request: GetInternetTupleRequest): GetInternetTupleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInternetTuple', 'POST', '/', 'json', false, 'json', request);
}

model GetNatTopNRequest {
  beginTime: long(name='BeginTime', description='The beginning of the time range to query in milliseconds. If you do not specify **EndTime**, the point in time specified by **BeginTime** is queried.', example='1638239092000', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query in milliseconds. The time range specified by **BeginTime** and **EndTime** cannot exceed **86400000** milliseconds (24 hours).', example='1638239093000', position='Query'),
  ip?: string(name='Ip', description='Query ranking statistics for a specific IP address. If you specify this parameter, you do not need to specify **TopN** or **OrderBy**.', example='192.168.156.101', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-sample***', position='Query'),
  orderBy?: string(name='OrderBy', description='The metric that is used for real-time SNAT performance ranking. Valid values:

*   **InBps**: inbound data transfer. Unit: bit/s.
*   **OutBps**: outbound data transfer. Unit: bit/s.
*   **InPps**: inbound packet forwarding rate. Unit: packets per second.
*   **OutPps**: outbound packet forwarding rate. Unit: packets per second.
*   **NewSessionPerSecond**: new connection creation rate. Unit: connections per second.
*   **ActiveSessionCount**: number of concurrent connections. Unit: connections.', example='InBps', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the NAT gateway is deployed.', example='cn-shanghai', position='Query'),
  topN?: int32(name='TopN', description='The number of entries to return for real-time SNAT performance ranking. Valid values: **1 to 100**. Default value: **10**.', example='10', position='Query'),
}

model GetNatTopNResponseBody = {
  isTopNOpen?: boolean(name='IsTopNOpen', description='Indicates whether Network Intelligence Service (NIS) is activated. The NatGatewayTopN parameter returns an empty array when NIS is not activated.

*   **true**: activated
*   **false**: not activated', example='true'),
  natGatewayTopN?: [ 
    {
      activeSessionCount?: float(name='ActiveSessionCount', description='The number of concurrent connections. Unit: connections.', example='8'),
      inBps?: float(name='InBps', description='The inbound data transfer. Unit: bit/s.', example='100'),
      inFlowPerMinute?: float(name='InFlowPerMinute', description='This field is reserved and not in use.', example='10'),
      inPps?: float(name='InPps', description='The inbound packet forwarding rate. Unit: packets per second.', example='10'),
      ip?: string(name='Ip', description='The IP address.', example='192.168.156.101'),
      newSessionPerSecond?: float(name='NewSessionPerSecond', description='The new connection creation rate. Unit: connections per second.', example='2'),
      outBps?: float(name='OutBps', description='The outbound data transfer. Unit: bit/s.', example='200'),
      outFlowPerMinute?: float(name='OutFlowPerMinute', description='This field is reserved and not in use.', example='10'),
      outPps?: float(name='OutPps', description='The outbound packet forwarding rate. Unit: packets per second.', example='20'),
    }
  ](name='NatGatewayTopN', description='An array of statistics about real-time SNAT performance ranking.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='77C512B5-12f3-f892-BD94-88A98271C1A0'),
}

model GetNatTopNResponse = {
  headers: map[string]string(name='headers'),
  body: GetNatTopNResponseBody(name='body'),
}

async function getNatTopN(request: GetNatTopNRequest): GetNatTopNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNatTopN', 'POST', '/', 'json', false, 'json', request);
}

model GetNetworkReachableAnalysisRequest {
  networkReachableAnalysisId: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability. You can call the **CreateNetworkRearchableAnalysis** operation to obtain the ID of the task for analyzing network reachability.', example='nra-90eef36a9e6e4662****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region for which you want to obtain the result of network reachability analysis.', example='cn-shanghai', position='Query'),
}

model GetNetworkReachableAnalysisResponseBody = {
  aliUid?: long(name='AliUid', description='The unique ID (UID) of the Alibaba Cloud account.', example='123147627844****'),
  createTime?: string(name='CreateTime', description='The time when the network path was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-16T07:11:27Z'),
  networkPathId?: string(name='NetworkPathId', description='The network path ID.', example='np-2a1332214fa346b6****'),
  networkPathParameter?: string(name='NetworkPathParameter', description='The parameters of the network path.', example='{
  "sourceId": "i-bp100g5pbp6kj4p9****",
  "sourceType": "ecs",
  "targetId": "i-t4n4ltwgbbomzb0g****",
  "targetType": "ecs"
}'),
  networkReachableAnalysisId?: string(name='NetworkReachableAnalysisId', description='The ID of the task for analyzing network reachability.', example='nra-8607514e71c1484****'),
  networkReachableAnalysisResult?: string(name='NetworkReachableAnalysisResult', description='The result of network reachability analysis, which includes the network topology, error codes of network unreachability, and rules of network unreachability.', example='{
  "errorCode": "",
  "networkAclData": {
    "networkAclItems": [
      
    ]
  },
  "nraId": "nra-f2c8701a36424094****",
  "requestId": "B931F8A0-620E-5230-B77F-3BD7F612****",
  "routeData": {
    "routeItems": [
      
    ]
  },
  "securityGroupData": {
    "policy": "accept",
    "securityGroupItems": [
      {
        "description": "default_sg_access_rule",
        "matchedRule": {
          "bizProtocol": "ALL",
          "creatingTime": "2022-11-10T03:24:49Z",
          "description": "",
          "destinationCidr": "",
          "destinationGroupId": "sg-wz980j96p8y99co5****",
          "direction": "egress",
          "policy": "Accept",
          "portRange": "-1/-1",
          "priority": "1",
          "sourceCidr": "",
          "sourceGroupId": ""
        },
        "policy": "accept",
        "resourceId": "eni-wz92ce4saz1jzazg****",
        "securityGroupId": "sg-wz980j96p8y99co5****"
      },
      {
        "description": "user_acl_drop_rule",
        "matchedRule": {
          "bizProtocol": "",
          "creatingTime": "",
          "description": "",
          "destinationCidr": "",
          "destinationGroupId": "",
          "direction": "",
          "policy": "",
          "portRange": "",
          "priority": "",
          "sourceCidr": "",
          "sourceGroupId": ""
        },
        "policy": "",
        "resourceId": "eni-wz97vry93t6z4lbd****",
        "securityGroupId": "sg-wz980j96p8y99co****"
      }
    ],
    "securityGroupReportId": "sgr-4479d23bb37241aab****"
  },
  "status": "security_group_checking_target",
  "topologyData": {
    "positive": {
      "linkList": [
        {
          "id": "i-wz91dk7bor557hp93zyv-->eni-wz92ce4saz1jzazg****",
          "source": "i-wz91dk7bor557hp9****",
          "target": "eni-wz92ce4saz1jzazg****"
        },
        {
          "id": "eni-wz92ce4saz1jzazgi13d-->vsw-wz9slpwdcppwfrnee****",
          "source": "eni-wz92ce4saz1jzazg****",
          "target": "vsw-wz9slpwdcppwfrnee****"
        },
        {
          "id": "vsw-wz9slpwdcppwfrneebcrp-->eni-wz97vry93t6z4lbd****",
          "source": "vsw-wz9slpwdcppwfrnee****",
          "target": "eni-wz97vry93t6z4lbd****"
        },
        {
          "id": "eni-wz97vry93t6z4lbdgmfi-->i-wz91dk7bor557hp9****",
          "source": "eni-wz97vry93t6z4lbd****",
          "target": "i-wz91dk7bor557hp9****"
        }
      ],
      "nodeList": [
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 1,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 3,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "vsw-wz9slpwdcppwfrnee****",
          "cidr": "192.168.0.0/24",
          "id": "vsw-wz9slpwdcppwfrnee****",
          "level": 2,
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "VSW",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "trafficLogs": [
            
          ]
        },
        {
          "bizInsId": "eni-wz92ce4saz1jzazg****",
          "id": "eni-wz92ce4saz1jzazg****",
          "ip": "192.168.0.33",
          "mac": "00:XXXX:3e:16:7c:50",
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "status": "InUse",
          "trafficLogs": [
            
          ]
        },
        {
          "bizInsId": "eni-wz97vry93t6z4lbd****",
          "id": "eni-wz97vry93t6z4lbd****",
          "ip": "192.168.0.34",
          "mac": "00:XXXX:3e:14:70:c2",
          "matchedRoute": {
            "nextHopSet": [
              
            ]
          },
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "status": "InUse",
          "trafficLogs": [
            
          ]
        }
      ]
    },
    "reverse": {
      "revLinkList": [
        {
          "id": "i-wz91dk7bor557hp93zys-->eni-wz97vry93t6z4lbd****",
          "source": "i-wz91dk7bor557hp9****",
          "target": "eni-wz97vry93t6z4lbd****"
        },
        {
          "id": "eni-wz97vry93t6z4lbdgmfi-->vsw-wz9slpwdcppwfrnee****",
          "source": "eni-wz97vry93t6z4lbd****",
          "target": "vsw-wz9slpwdcppwfrnee****"
        },
        {
          "id": "vsw-wz9slpwdcppwfrneebcrp-->eni-wz92ce4saz1jzazg****",
          "source": "vsw-wz9slpwdcppwfrnee****",
          "target": "eni-wz92ce4saz1jzazg****"
        },
        {
          "id": "eni-wz92ce4saz1jzazgi13d-->i-wz91dk7bor557hp9****",
          "source": "eni-wz92ce4saz1jzazg****",
          "target": "i-wz91dk7bor557hp9****"
        }
      ],
      "revNodeList": [
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 1,
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "i-wz91dk7bor557hp9****",
          "id": "i-wz91dk7bor557hp9****",
          "level": 3,
          "nodeType": "VM",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "aZone": "cn-shenzhen-d",
          "bizInsId": "vsw-wz9slpwdcppwfrnee****",
          "cidr": "192.168.0.0/24",
          "id": "vsw-wz9slpwdcppwfrnee****",
          "level": 2,
          "nodeType": "VSW",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          }
        },
        {
          "bizInsId": "eni-wz97vry93t6z4lbd****",
          "id": "eni-wz97vry93t6z4lbd****",
          "ip": "192.168.0.34",
          "mac": "00:XXXX:3e:14:70:c2",
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          },
          "status": "InUse"
        },
        {
          "bizInsId": "eni-wz92ce4saz1jzazg****",
          "id": "eni-wz92ce4saz1jzazg****",
          "ip": "192.168.0.33",
          "mac": "00:XXXX:3e:16:7c:50",
          "nodeType": "ENI",
          "regionNo": "cn-shenzhen-st3-a01",
          "regionNoAlias": "cn-shenzhen",
          "revMatchedRoute": {
            "revNextHopSet": [
              
            ]
          },
          "status": "InUse"
        }
      ]
    },
    "topologyReportId": "tpr-21cf60002715491b8****"
  }
}'),
  networkReachableAnalysisStatus?: string(name='NetworkReachableAnalysisStatus', description='The state of the task for analyzing network reachability. Valid values:

*   **init**: The task is in progress.
*   **finish**: The task is complete.
*   **error**: An analysis error occurred.
*   **timeout**: The task timed out.', example='finish'),
  reachable?: boolean(name='Reachable', description='Indicates whether the network path is reachable. Valid values:

*   **true**: The network path is reachable.
*   **false**: The network path is unreachable.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='DEE0FEAF-59AE-5CDD-AA07-626BC365D571'),
}

model GetNetworkReachableAnalysisResponse = {
  headers: map[string]string(name='headers'),
  body: GetNetworkReachableAnalysisResponseBody(name='body'),
}

/**
  * **GetNetworkReachableAnalysis** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can query the state of the task for analyzing network reachability.
  * *   The **init** state indicates that the task is in progress.
  * *   The **finish** state indicates that the task is complete. In this state, you can obtain the analysis result.
  *
 */
async function getNetworkReachableAnalysis(request: GetNetworkReachableAnalysisRequest): GetNetworkReachableAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetworkReachableAnalysis', 'POST', '/', 'json', false, 'json', request);
}

