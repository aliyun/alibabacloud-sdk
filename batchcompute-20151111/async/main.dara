/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BatchCompute';
  @version = '2015-11-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelImageRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model CancelImageResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelImage(request: CancelImageRequest): CancelImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelImage', 'PUT', '/images/{ResourceName}', 'none', false, 'json', request);
}

model ChangeJobPriorityRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ChangeJobPriorityResponse = {
  headers: map[string]string(name='headers'),
}

async function changeJobPriority(request: ChangeJobPriorityRequest): ChangeJobPriorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeJobPriority', 'PUT', '/jobs/{ResourceName}', 'none', false, 'json', request);
}

model CreateAppRequest {
  idempotentToken?: string(name='IdempotentToken', position='Query'),
  body?: string(name='body', position='Body'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApp', 'POST', '/apps', 'none', false, 'json', request);
}

model CreateClusterRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/clusters', 'none', false, 'json', request);
}

model CreateImageRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateImage', 'POST', '/images', 'none', false, 'json', request);
}

model CreateJobRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateJob', 'POST', '/jobs', 'none', false, 'json', request);
}

model DeleteAppRequest {
  resourceName: string(name='ResourceName', position='Path'),
  qualifier?: string(name='Qualifier', position='Query'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApp', 'DELETE', '/apps/{ResourceName}', 'none', false, 'json', request);
}

model DeleteClusterRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCluster', 'DELETE', '/clusters/{ResourceName}', 'none', false, 'json', request);
}

model DeleteClusterInstanceRequest {
  clusterId: string(name='ClusterId', position='Path'),
  groupName: string(name='GroupName', position='Path'),
  instanceId: string(name='InstanceId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteClusterInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteClusterInstance(request: DeleteClusterInstanceRequest): DeleteClusterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteClusterInstance', 'DELETE', '/clusters/{ClusterId}/groups/{GroupName}/instances/{InstanceId}', 'none', false, 'json', request);
}

model DeleteImageRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteImage', 'DELETE', '/images/{ResourceName}', 'none', false, 'json', request);
}

model DeleteJobRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteJob', 'DELETE', '/jobs/{ResourceName}', 'none', false, 'json', request);
}

model DeleteProjectRequest {
  projectName: string(name='ProjectName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/projects/{ProjectName}', 'none', false, 'json', request);
}

model GetAppRequest {
  resourceName: string(name='ResourceName', position='Path'),
  detail?: string(name='Detail', position='Query'),
  qualifier?: string(name='Qualifier', position='Query'),
  revisions?: string(name='Revisions', position='Query'),
  scope?: string(name='Scope', position='Query'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
}

async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApp', 'GET', '/apps/{ResourceName}', 'none', false, 'json', request);
}

model GetClusterRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCluster', 'GET', '/clusters/{ResourceName}', 'none', false, 'json', request);
}

model GetClusterInstanceRequest {
  clusterId: string(name='ClusterId', position='Path'),
  groupName: string(name='GroupName', position='Path'),
  instanceId: string(name='InstanceId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetClusterInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function getClusterInstance(request: GetClusterInstanceRequest): GetClusterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetClusterInstance', 'GET', '/clusters/{ClusterId}/groups/{GroupName}/instances/{InstanceId}', 'none', false, 'json', request);
}

model GetImageRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetImageResponse = {
  headers: map[string]string(name='headers'),
}

async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetImage', 'GET', '/images/{ResourceName}', 'none', false, 'json', request);
}

model GetInstanceRequest {
  resourceName: string(name='ResourceName', position='Path'),
  taskName: string(name='TaskName', position='Path'),
  instanceId: string(name='InstanceId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/jobs/{ResourceName}/tasks/{TaskName}/instances/{InstanceId}', 'none', false, 'json', request);
}

model GetJobRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/jobs/{ResourceName}', 'none', false, 'json', request);
}

model GetJobDescriptionRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetJobDescriptionResponse = {
  headers: map[string]string(name='headers'),
}

async function getJobDescription(request: GetJobDescriptionRequest): GetJobDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobDescription', 'GET', '/jobs/{ResourceName}?description', 'none', false, 'json', request);
}

model GetQuotaRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model GetQuotaResponse = {
  headers: map[string]string(name='headers'),
}

async function getQuota(request: GetQuotaRequest): GetQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuota', 'GET', '/quotas', 'none', false, 'json', request);
}

model GetTaskRequest {
  resourceName: string(name='ResourceName', position='Path'),
  taskName: string(name='TaskName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/jobs/{ResourceName}/tasks/{TaskName}', 'none', false, 'json', request);
}

model ListAppsRequest {
  marker?: string(name='Marker', position='Query'),
  maxItemCount?: int32(name='MaxItemCount', position='Query'),
  scope?: string(name='Scope', position='Query'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListApps', 'GET', '/apps', 'none', false, 'json', request);
}

model ListAvailableInstanceTypeRequest {
}

model ListAvailableInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
}

async function listAvailableInstanceType(request: ListAvailableInstanceTypeRequest): ListAvailableInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAvailableInstanceType', 'GET', '/available', 'none', false, 'json', request);
}

model ListClusterInstancesRequest {
  clusterId: string(name='ClusterId', position='Path'),
  groupName: string(name='GroupName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListClusterInstancesResponse = {
  headers: map[string]string(name='headers'),
}

async function listClusterInstances(request: ListClusterInstancesRequest): ListClusterInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterInstances', 'GET', '/clusters/{ClusterId}/groups/{GroupName}/instances', 'none', false, 'json', request);
}

model ListClustersRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusters', 'GET', '/clusters', 'none', false, 'json', request);
}

model ListImagesRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListImages', 'GET', '/images', 'none', false, 'json', request);
}

model ListInstancesRequest {
  resourceName: string(name='ResourceName', position='Path'),
  taskName: string(name='TaskName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/jobs/{ResourceName}/tasks/{TaskName}/instances', 'none', false, 'json', request);
}

model ListJobsRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/jobs', 'none', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegions', 'GET', '/regions', 'none', false, 'json', request);
}

model ListTasksRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/jobs/{ResourceName}/tasks', 'none', false, 'json', request);
}

model ModifyAppRequest {
  resourceName: string(name='ResourceName', position='Path'),
  body?: string(name='body', position='Body'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyApp', 'PUT', '/apps/{ResourceName}', 'none', false, 'json', request);
}

model ModifyClusterRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyCluster(request: ModifyClusterRequest): ModifyClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCluster', 'PUT', '/clusters/{ResourceName}', 'none', false, 'json', request);
}

model PollForTaskRequest {
  clusterId: string(name='ClusterId', position='Path'),
  workerId: string(name='WorkerId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model PollForTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function pollForTask(request: PollForTaskRequest): PollForTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PollForTask', 'POST', '/clusters/{ClusterId}/workers/{WorkerId}/fetchTask', 'none', false, 'json', request);
}

model RecreateClusterInstanceRequest {
  clusterId: string(name='ClusterId', position='Path'),
  groupName: string(name='GroupName', position='Path'),
  instanceId: string(name='InstanceId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model RecreateClusterInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function recreateClusterInstance(request: RecreateClusterInstanceRequest): RecreateClusterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecreateClusterInstance', 'POST', '/clusters/{ClusterId}/groups/{GroupName}/instances/{InstanceId}/recreate', 'none', false, 'json', request);
}

model RenewClusterInstanceRequest {
  clusterId: string(name='ClusterId', position='Path'),
  groupName: string(name='GroupName', position='Path'),
  instanceId: string(name='InstanceId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model RenewClusterInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function renewClusterInstance(request: RenewClusterInstanceRequest): RenewClusterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenewClusterInstance', 'POST', '/clusters/{ClusterId}/groups/{GroupName}/instances/{InstanceId}/renew', 'none', false, 'json', request);
}

model ReportTaskStatusRequest {
  clusterId: string(name='ClusterId', position='Path'),
  workerId: string(name='WorkerId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ReportTaskStatusResponse = {
  headers: map[string]string(name='headers'),
}

async function reportTaskStatus(request: ReportTaskStatusRequest): ReportTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReportTaskStatus', 'POST', '/clusters/{ClusterId}/workers/{WorkerId}/updateTaskStatus', 'none', false, 'json', request);
}

model ReportWorkerStatusRequest {
  clusterId: string(name='ClusterId', position='Path'),
  workerId: string(name='WorkerId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model ReportWorkerStatusResponse = {
  headers: map[string]string(name='headers'),
}

async function reportWorkerStatus(request: ReportWorkerStatusRequest): ReportWorkerStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReportWorkerStatus', 'POST', '/clusters/{ClusterId}/workers/{WorkerId}/updateStatus', 'none', false, 'json', request);
}

model StartJobRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model StartJobResponse = {
  headers: map[string]string(name='headers'),
}

async function startJob(request: StartJobRequest): StartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJob', 'POST', '/jobs/{ResourceName}/start', 'none', false, 'json', request);
}

model StopJobRequest {
  resourceName: string(name='ResourceName', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
}

model StopJobResponse = {
  headers: map[string]string(name='headers'),
}

async function stopJob(request: StopJobRequest): StopJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopJob', 'POST', '/jobs/{ResourceName}/stop', 'none', false, 'json', request);
}

