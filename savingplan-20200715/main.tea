/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('savingplan', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CompleteTradeRequest {
  data?: string(name='data'),
}

model CompleteTradeResponseBody = {
  code?: string(name='code'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  synchro?: boolean(name='synchro'),
  errorInfoList?: [ string ](name='errorInfoList'),
}

model CompleteTradeResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteTradeResponseBody(name='body'),
}

async function completeTradeWithOptions(request: CompleteTradeRequest, runtime: Util.RuntimeOptions): CompleteTradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteTrade', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeTrade(request: CompleteTradeRequest): CompleteTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeTradeWithOptions(request, runtime);
}

model LogicalDeleteResourceActionRequest {
  country?: string(name='Country'),
  hid?: long(name='Hid'),
  success?: boolean(name='Success'),
  gmtWakeup?: string(name='GmtWakeup'),
  interrupt?: boolean(name='Interrupt'),
  pk?: string(name='Pk'),
  taskExtraData?: string(name='TaskExtraData'),
  invoker?: string(name='Invoker'),
  bid?: string(name='Bid'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
}

model LogicalDeleteResourceActionResponseBody = {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  gmtWakeup?: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  hid?: long(name='Hid'),
  message?: string(name='Message'),
  country?: string(name='Country'),
  interrupt?: boolean(name='Interrupt'),
  taskExtraData?: string(name='TaskExtraData'),
  bid?: string(name='Bid'),
  taskIdentifier?: string(name='TaskIdentifier'),
}

model LogicalDeleteResourceActionResponse = {
  headers: map[string]string(name='headers'),
  body: LogicalDeleteResourceActionResponseBody(name='body'),
}

async function logicalDeleteResourceActionWithOptions(request: LogicalDeleteResourceActionRequest, runtime: Util.RuntimeOptions): LogicalDeleteResourceActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LogicalDeleteResourceAction', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function logicalDeleteResourceAction(request: LogicalDeleteResourceActionRequest): LogicalDeleteResourceActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return logicalDeleteResourceActionWithOptions(request, runtime);
}

model QuerySavingPlanInstanceInnerRequest {
  fromAppName?: string(name='FromAppName', description='fromAppName'),
  instanceCode?: string(name='InstanceCode', description='instanceCode'),
  pageSize?: int32(name='PageSize', description='pageSize'),
  spnType?: string(name='SpnType', description='spnType'),
  instanceFamily?: string(name='InstanceFamily', description='instanceFamily'),
  userId?: string(name='UserId', description='userId'),
  requestId?: string(name='RequestId', description='requestId'),
  startTime?: float(name='StartTime', description='startTime'),
  fromAppCode?: string(name='FromAppCode', description='fromAppCode'),
  endTime?: float(name='EndTime', description='endTime'),
  region?: string(name='Region', description='region'),
  currentPage?: int32(name='CurrentPage', description='currentPage'),
}

model QuerySavingPlanInstanceInnerResponseBody = {
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  data?: string(name='Data', description='data'),
  code?: {
    totalCount?: int32(name='TotalCount', description='totalCount'),
    pageSize?: int32(name='PageSize', description='pageSize'),
    currentPage?: int32(name='CurrentPage', description='currentPage'),
    datas?: [ 
      {
        spnInstanceId?: long(name='SpnInstanceId', description='spnInstanceId'),
        spnInstanceCode?: string(name='SpnInstanceCode', description='spnInstanceCode'),
        payMode?: string(name='PayMode', description='payMode'),
        spnType?: string(name='SpnType', description='spnType'),
        instanceFamily?: string(name='InstanceFamily', description='instanceFamily'),
        region?: string(name='Region', description='region'),
        cycle?: string(name='Cycle', description='cycle'),
        startTime?: long(name='StartTime', description='startTime'),
        endTime?: long(name='EndTime', description='endTime'),
        poolValue?: float(name='PoolValue', description='poolValue'),
        userId?: long(name='UserId', description='userId'),
        site?: string(name='Site', description='site'),
        currency?: string(name='Currency', description='currency'),
        commodityCode?: string(name='CommodityCode', description='commodityCode'),
        status?: string(name='Status', description='status'),
      }
    ](name='Datas', description='datas'),
  }(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model QuerySavingPlanInstanceInnerResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingPlanInstanceInnerResponseBody(name='body'),
}

async function querySavingPlanInstanceInnerWithOptions(request: QuerySavingPlanInstanceInnerRequest, runtime: Util.RuntimeOptions): QuerySavingPlanInstanceInnerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySavingPlanInstanceInner', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySavingPlanInstanceInner(request: QuerySavingPlanInstanceInnerRequest): QuerySavingPlanInstanceInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingPlanInstanceInnerWithOptions(request, runtime);
}

model CheckResourceActionRequest {
  country?: string(name='Country'),
  hid?: long(name='Hid'),
  level?: long(name='Level'),
  invoker?: string(name='Invoker'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
  success?: boolean(name='Success'),
  gmtWakeup?: string(name='GmtWakeup'),
  interrupt?: boolean(name='Interrupt'),
  pk?: string(name='Pk'),
  taskExtraData?: string(name='TaskExtraData'),
  bid?: string(name='Bid'),
  prompt?: string(name='Prompt'),
}

model CheckResourceActionResponseBody = {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  success?: boolean(name='Success'),
  gmtWakeup?: string(name='GmtWakeup'),
  message?: string(name='Message'),
  url?: string(name='Url'),
  taskExtraData?: string(name='TaskExtraData'),
  bid?: string(name='Bid'),
  prompt?: string(name='Prompt'),
  taskIdentifier?: string(name='TaskIdentifier'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  interrupt?: boolean(name='Interrupt'),
  level?: long(name='Level'),
}

model CheckResourceActionResponse = {
  headers: map[string]string(name='headers'),
  body: CheckResourceActionResponseBody(name='body'),
}

async function checkResourceActionWithOptions(request: CheckResourceActionRequest, runtime: Util.RuntimeOptions): CheckResourceActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckResourceAction', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkResourceAction(request: CheckResourceActionRequest): CheckResourceActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResourceActionWithOptions(request, runtime);
}

model VerifyTradeRequest {
  data?: string(name='data'),
}

model VerifyTradeResponseBody = {
  code?: string(name='code'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  synchro?: boolean(name='synchro'),
  errorInfoList?: [ string ](name='errorInfoList'),
}

model VerifyTradeResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyTradeResponseBody(name='body'),
}

async function verifyTradeWithOptions(request: VerifyTradeRequest, runtime: Util.RuntimeOptions): VerifyTradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyTrade', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyTrade(request: VerifyTradeRequest): VerifyTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyTradeWithOptions(request, runtime);
}

model ProcessMessageRequest {
  data?: string(name='data'),
}

model ProcessMessageResponseBody = {
  code?: string(name='code'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  synchro?: boolean(name='synchro'),
  errorInfoList?: [ string ](name='errorInfoList'),
}

model ProcessMessageResponse = {
  headers: map[string]string(name='headers'),
  body: ProcessMessageResponseBody(name='body'),
}

async function processMessageWithOptions(request: ProcessMessageRequest, runtime: Util.RuntimeOptions): ProcessMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ProcessMessage', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function processMessage(request: ProcessMessageRequest): ProcessMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return processMessageWithOptions(request, runtime);
}

model CompleteCommodityRequest {
  data?: string(name='data'),
}

model CompleteCommodityResponseBody = {
  code?: string(name='code'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  synchro?: boolean(name='synchro'),
  errorInfoList?: [ string ](name='errorInfoList'),
}

model CompleteCommodityResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteCommodityResponseBody(name='body'),
}

async function completeCommodityWithOptions(request: CompleteCommodityRequest, runtime: Util.RuntimeOptions): CompleteCommodityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteCommodity', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeCommodity(request: CompleteCommodityRequest): CompleteCommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeCommodityWithOptions(request, runtime);
}

model CalculateSavingsPlansRequest {
  fromAppName?: string(name='FromAppName'),
  payMode?: string(name='PayMode'),
  requestId?: string(name='RequestId'),
  spnType?: string(name='SpnType'),
  fromAppCode?: string(name='FromAppCode'),
  cycle?: string(name='Cycle'),
  userId?: string(name='UserId'),
  commodityCode?: string(name='CommodityCode'),
  specCode?: string(name='SpecCode'),
  instance?: [ 
    {
      module?: [ 
        {
          property?: [ 
            {
              value?: string(name='Value'),
              code?: string(name='Code'),
            }
          ](name='Property'),
          componentCode?: string(name='ComponentCode'),
        }
      ](name='Module'),
      specCode?: string(name='SpecCode'),
      commodityCode?: string(name='CommodityCode'),
      quantity?: int32(name='Quantity'),
    }
  ](name='Instance'),
}

model CalculateSavingsPlansResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      instanceFamily?: string(name='InstanceFamily'),
      region?: string(name='Region'),
      cycle?: string(name='Cycle'),
      userId?: long(name='UserId'),
      spnType?: string(name='SpnType'),
      poolValue?: float(name='PoolValue'),
      currency?: string(name='Currency'),
      payMode?: string(name='PayMode'),
    }
  ](name='Data'),
}

model CalculateSavingsPlansResponse = {
  headers: map[string]string(name='headers'),
  body: CalculateSavingsPlansResponseBody(name='body'),
}

async function calculateSavingsPlansWithOptions(request: CalculateSavingsPlansRequest, runtime: Util.RuntimeOptions): CalculateSavingsPlansResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CalculateSavingsPlans', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function calculateSavingsPlans(request: CalculateSavingsPlansRequest): CalculateSavingsPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return calculateSavingsPlansWithOptions(request, runtime);
}

model PayOrderCallbackRequest {
  data?: string(name='data'),
}

model PayOrderCallbackResponseBody = {
  code?: string(name='code'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  synchro?: boolean(name='synchro'),
  errorInfoList?: [ string ](name='errorInfoList'),
}

model PayOrderCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: PayOrderCallbackResponseBody(name='body'),
}

async function payOrderCallbackWithOptions(request: PayOrderCallbackRequest, runtime: Util.RuntimeOptions): PayOrderCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PayOrderCallback', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function payOrderCallback(request: PayOrderCallbackRequest): PayOrderCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return payOrderCallbackWithOptions(request, runtime);
}

model PhysicalDeleteResourceActionRequest {
  country?: string(name='Country'),
  hid?: long(name='Hid'),
  success?: boolean(name='Success'),
  gmtWakeup?: string(name='GmtWakeup'),
  interrupt?: boolean(name='Interrupt'),
  pk?: string(name='Pk'),
  taskExtraData?: string(name='TaskExtraData'),
  invoker?: string(name='Invoker'),
  bid?: string(name='Bid'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
}

model PhysicalDeleteResourceActionResponseBody = {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  gmtWakeup?: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  hid?: long(name='Hid'),
  message?: string(name='Message'),
  country?: string(name='Country'),
  interrupt?: boolean(name='Interrupt'),
  taskExtraData?: string(name='TaskExtraData'),
  bid?: string(name='Bid'),
  taskIdentifier?: string(name='TaskIdentifier'),
}

model PhysicalDeleteResourceActionResponse = {
  headers: map[string]string(name='headers'),
  body: PhysicalDeleteResourceActionResponseBody(name='body'),
}

async function physicalDeleteResourceActionWithOptions(request: PhysicalDeleteResourceActionRequest, runtime: Util.RuntimeOptions): PhysicalDeleteResourceActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PhysicalDeleteResourceAction', '2020-07-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function physicalDeleteResourceAction(request: PhysicalDeleteResourceActionRequest): PhysicalDeleteResourceActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return physicalDeleteResourceActionWithOptions(request, runtime);
}

