/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tdsr';
  @version = '2020-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'lyj.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddHotspotFileRequest {
  fileName: string(name='FileName', description='This parameter is required.', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Query'),
  type: string(name='Type', description='This parameter is required.', position='Query'),
}

model AddHotspotFileResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddHotspotFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddHotspotFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddHotspotFile  AddHotspotFileRequest
  * @return AddHotspotFileResponse
 */
async function addHotspotFile(request: AddHotspotFileRequest): AddHotspotFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddHotspotFile', 'POST', '/', 'json', false, 'json', request);
}

model AddMosaicsRequest {
  markPosition: string(name='MarkPosition', description='This parameter is required.', example='[{"x": 504,"y": 450,"w": 256,"h": 153}]', position='Query'),
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='skjjskjk****', position='Query'),
}

model AddMosaicsResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='3BCAD49D-2AC1-13EB-AC19-8C7A46C****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='OvFuuwhfoAX8uIpxC/GJ****'),
}

model AddMosaicsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMosaicsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddMosaics  AddMosaicsRequest
  * @return AddMosaicsResponse
 */
async function addMosaics(request: AddMosaicsRequest): AddMosaicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMosaics', 'POST', '/', 'json', false, 'json', request);
}

model AddProjectRequest {
  businessId?: long(name='BusinessId', example='5432****', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
}

model AddProjectResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  id?: string(name='Id', example='1234****'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='344794c32937474a9c59eb130936****'),
  success?: boolean(name='Success', example='true'),
}

model AddProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddProject  AddProjectRequest
  * @return AddProjectResponse
 */
async function addProject(request: AddProjectRequest): AddProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddProject', 'POST', '/', 'json', false, 'json', request);
}

model AddRelativePositionRequest {
  relativePosition: string(name='RelativePosition', description='This parameter is required.', example='{"key"："value"}', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model AddRelativePositionResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model AddRelativePositionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRelativePositionResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI AddRelativePosition is deprecated  * @param request  the request parameters of AddRelativePosition  AddRelativePositionRequest
  * @return AddRelativePositionResponse
 */
// Deprecated
async function addRelativePosition(request: AddRelativePositionRequest): AddRelativePositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRelativePosition', 'POST', '/', 'json', false, 'json', request);
}

model AddRoomPlanRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model AddRoomPlanResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    accessId?: string(name='AccessId', example='LTAI5t9kjkiudsnsu****'),
    callback?: string(name='Callback', example='""'),
    dir?: string(name='Dir', example='123/'),
    expire?: string(name='Expire', example='1640315897'),
    host?: string(name='Host', example='oss.aliyun.com'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAy****'),
    signature?: string(name='Signature', example='ngEWGzttc3v2gJWCxEEt****'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model AddRoomPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRoomPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddRoomPlan  AddRoomPlanRequest
  * @return AddRoomPlanResponse
 */
async function addRoomPlan(request: AddRoomPlanRequest): AddRoomPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRoomPlan', 'POST', '/', 'json', false, 'json', request);
}

model AddSceneRequest {
  customerUid?: string(name='CustomerUid', example='2345****', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='测试名称', position='Query'),
  projectId: string(name='ProjectId', description='This parameter is required.', example='1234****', minimum=1, position='Query'),
  type: string(name='Type', description='This parameter is required.', example='MODEL_3D', position='Query'),
}

model AddSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  id?: string(name='Id', example='2345****'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model AddSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddScene  AddSceneRequest
  * @return AddSceneResponse
 */
async function addScene(request: AddSceneRequest): AddSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddScene', 'POST', '/', 'json', false, 'json', request);
}

model AddSubSceneRequest {
  name: string(name='Name', description='This parameter is required.', example='测试', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1234****', position='Query'),
  uploadType?: string(name='UploadType', example='IMAGE', position='Query'),
}

model AddSubSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  id?: string(name='Id', example='234****'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model AddSubSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSubSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSubScene  AddSubSceneRequest
  * @return AddSubSceneResponse
 */
async function addSubScene(request: AddSubSceneRequest): AddSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSubScene', 'POST', '/', 'json', false, 'json', request);
}

model CheckUserPropertyRequest {
  uid: string(name='Uid', description='This parameter is required.', example='2345****', position='Query'),
}

model CheckUserPropertyResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  match?: boolean(name='Match', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='344794c32937474a9c59eb1309366493'),
  success?: boolean(name='Success', example='true'),
}

model CheckUserPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserPropertyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckUserProperty  CheckUserPropertyRequest
  * @return CheckUserPropertyResponse
 */
async function checkUserProperty(request: CheckUserPropertyRequest): CheckUserPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUserProperty', 'POST', '/', 'json', false, 'json', request);
}

model CopySceneRequest {
  projectId?: string(name='ProjectId', example='opwuoieywtyqw****', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='sgyuyewyew****', position='Query'),
  sceneName: string(name='SceneName', description='This parameter is required.', position='Query'),
}

model CopySceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    taskId?: string(name='TaskId', example='yuywey****'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model CopySceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopySceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CopyScene  CopySceneRequest
  * @return CopySceneResponse
 */
async function copyScene(request: CopySceneRequest): CopySceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyScene', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadPolicyRequest {
  option: string(name='Option', description='This parameter is required.', example='{}', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='scene', position='Query'),
}

model CreateUploadPolicyResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    accessId?: string(name='AccessId', description='accessId', example='LTAI5t9k9****'),
    callback?: string(name='Callback', example='""'),
    dir?: string(name='Dir', example='dir/'),
    expire?: string(name='Expire', example='1658812297'),
    host?: string(name='Host', example='oss.aliyun.com'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMj****'),
    signature?: string(name='Signature', example='KdnPJFIG25SM****'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='B28A2ECB-AB29-1E01****'),
  success?: boolean(name='Success', example='true'),
}

model CreateUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUploadPolicy  CreateUploadPolicyRequest
  * @return CreateUploadPolicyResponse
 */
async function createUploadPolicy(request: CreateUploadPolicyRequest): CreateUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DetailProjectRequest {
  id: string(name='Id', description='This parameter is required.', example='1234****', position='Query'),
}

model DetailProjectResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  businessId?: long(name='BusinessId', example='5244****'),
  businessName?: string(name='BusinessName'),
  code?: long(name='Code', example='200'),
  gmtCreate?: long(name='GmtCreate', example='1621236933677'),
  gmtModified?: long(name='GmtModified', example='1621236933677'),
  id?: string(name='Id', example='1234****'),
  message?: string(name='Message', example='success'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
  token?: string(name='Token', description='Token', example='d989623696ab4f87a80b8d5b0b00****'),
}

model DetailProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetailProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetailProject  DetailProjectRequest
  * @return DetailProjectResponse
 */
async function detailProject(request: DetailProjectRequest): DetailProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetailProject', 'POST', '/', 'json', false, 'json', request);
}

model DetailSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='1234***', position='Query'),
}

model DetailSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  captures?: [ 
    {
      title?: string(name='Title'),
      url?: string(name='Url', example='http://www.aliyun.com/test1.jpg'),
    }
  ](name='Captures'),
  code?: long(name='Code', example='200'),
  coverUrl?: string(name='CoverUrl', example='www.example.com/xxx/xxx.jpg'),
  floorPlans?: [ 
    {
      colorMapUrl?: string(name='ColorMapUrl'),
      floorLabel?: string(name='FloorLabel'),
      floorName?: string(name='FloorName'),
      miniMapUrl?: string(name='MiniMapUrl'),
    }
  ](name='FloorPlans'),
  gmtCreate?: long(name='GmtCreate', example='1621236933677'),
  gmtModified?: long(name='GmtModified', example='1621236933677'),
  id?: string(name='Id', example='1234***'),
  message?: string(name='Message', example='success'),
  name?: string(name='Name', example='测试'),
  previewToken?: string(name='PreviewToken', example='d989623696ab4f87a80b8d5b0b0****'),
  published?: boolean(name='Published', example='false'),
  requestId?: string(name='RequestId', example='344794c32937474a9c59eb130936****'),
  sourceNum?: long(name='SourceNum', example='20'),
  status?: string(name='Status', example='init'),
  statusName?: string(name='StatusName'),
  subSceneNum?: long(name='SubSceneNum', example='20'),
  success?: boolean(name='Success', example='true'),
  type?: string(name='Type', example='MODEL_3D'),
}

model DetailSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetailSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetailScene  DetailSceneRequest
  * @return DetailSceneResponse
 */
async function detailScene(request: DetailSceneRequest): DetailSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetailScene', 'POST', '/', 'json', false, 'json', request);
}

model DetailSubSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='F79siXLsJsVVca8Yp4fgPA==', position='Query'),
}

model DetailSubSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  coverUrl?: string(name='CoverUrl', example='https://image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
  cubemapPath?: string(name='CubemapPath', example='https://image-demo.oss-cn-hangzhou.aliyuncs.com/cubemap/****'),
  gmtCreate?: long(name='GmtCreate', example='1621236933677'),
  gmtModified?: long(name='GmtModified', example='1621236933677'),
  id?: string(name='Id', example='1234***'),
  imageUrl?: string(name='ImageUrl', example='http://www.aliyun.com/test1.jpg'),
  layoutData?: string(name='LayoutData', example='{}'),
  message?: string(name='Message', example='success'),
  name?: string(name='Name', example='测试'),
  originUrl?: string(name='OriginUrl', example='http://www.aliyun.com/test.jpg'),
  position?: string(name='Position', example='[-0.8928,-0.21467,0.39603]'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  resourceId?: string(name='ResourceId', example='1234***'),
  status?: long(name='Status', example='1'),
  success?: boolean(name='Success', example='true'),
  type?: string(name='Type', example='IMAGE'),
  url?: string(name='Url', example='https://image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
}

model DetailSubSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetailSubSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetailSubScene  DetailSubSceneRequest
  * @return DetailSubSceneResponse
 */
async function detailSubScene(request: DetailSubSceneRequest): DetailSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetailSubScene', 'POST', '/', 'json', false, 'json', request);
}

model DropProjectRequest {
  projectId: string(name='ProjectId', description='This parameter is required.', example='3242****', position='Query'),
}

model DropProjectResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model DropProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DropProject  DropProjectRequest
  * @return DropProjectResponse
 */
async function dropProject(request: DropProjectRequest): DropProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropProject', 'POST', '/', 'json', false, 'json', request);
}

model DropSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='1234***', position='Query'),
}

model DropSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model DropSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DropScene  DropSceneRequest
  * @return DropSceneResponse
 */
async function dropScene(request: DropSceneRequest): DropSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropScene', 'POST', '/', 'json', false, 'json', request);
}

model DropSubSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='1234****', position='Query'),
}

model DropSubSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model DropSubSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSubSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DropSubScene  DropSubSceneRequest
  * @return DropSubSceneResponse
 */
async function dropSubScene(request: DropSubSceneRequest): DropSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropSubScene', 'POST', '/', 'json', false, 'json', request);
}

model GetConnDataRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetConnDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  extend?: string(name='Extend', example='{}'),
  list?: [ 
    {
      id?: string(name='Id', description='ID', example='1#234#abc'),
      mapId?: string(name='MapId', example='1#456#def'),
      type?: string(name='Type', example='outer'),
    }
  ](name='List'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  version?: string(name='Version', example='2.1'),
}

model GetConnDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConnData  GetConnDataRequest
  * @return GetConnDataResponse
 */
async function getConnData(request: GetConnDataRequest): GetConnDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnData', 'POST', '/', 'json', false, 'json', request);
}

model GetCopySceneTaskStatusRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='yuywey****', position='Query'),
}

model GetCopySceneTaskStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    progress?: long(name='Progress', example='100'),
    status?: string(name='Status', example='succeed'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', example='A8CD0AD9-8A92-455A-A984-A7E4****'),
  success?: boolean(name='Success', example='true'),
}

model GetCopySceneTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCopySceneTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCopySceneTaskStatus  GetCopySceneTaskStatusRequest
  * @return GetCopySceneTaskStatusResponse
 */
async function getCopySceneTaskStatus(request: GetCopySceneTaskStatusRequest): GetCopySceneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCopySceneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetHotspotConfigRequest {
  domain?: string(name='Domain', example='www.aliyundoc.com', position='Query'),
  enabled?: boolean(name='Enabled', example='true/false', position='Query'),
  previewToken: string(name='PreviewToken', description='This parameter is required.', example='344794c32937474a9c59eb130936****', position='Query'),
  type: long(name='Type', description='This parameter is required.', example='0', position='Query'),
}

model GetHotspotConfigResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='config'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model GetHotspotConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotConfig  GetHotspotConfigRequest
  * @return GetHotspotConfigResponse
 */
async function getHotspotConfig(request: GetHotspotConfigRequest): GetHotspotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotspotConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetHotspotSceneDataRequest {
  domain?: string(name='Domain', example='www.aliyundoc.com', position='Query'),
  enabled?: boolean(name='Enabled', example='true', position='Query'),
  previewToken: string(name='PreviewToken', description='This parameter is required.', example='344794c32937474a9c59eb130936****', position='Query'),
  type: long(name='Type', description='This parameter is required.', example='0', minimum=0, maximum=1, position='Query'),
}

model GetHotspotSceneDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    modelToken?: string(name='ModelToken', example='A.e.QRQRLWYEHIUE****'),
    previewData?: string(name='PreviewData'),
    previewToken?: string(name='PreviewToken', example='344794c32937474a9c59eb130936****'),
    sceneType?: string(name='SceneType', example='MODEL_3D'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='A8CD0AD9-8A92-455A-A984-A7E4B76****'),
  success?: boolean(name='Success', example='true/false'),
}

model GetHotspotSceneDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotSceneDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotSceneData  GetHotspotSceneDataRequest
  * @return GetHotspotSceneDataResponse
 */
async function getHotspotSceneData(request: GetHotspotSceneDataRequest): GetHotspotSceneDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotspotSceneData', 'POST', '/', 'json', false, 'json', request);
}

model GetHotspotTagRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain?: string(name='Domain', example='www.aliyundoc.com', position='Query'),
  enabled?: boolean(name='Enabled', example='true/false', position='Query'),
  previewToken?: string(name='PreviewToken', example='344794c32937474a9c59eb130936****', position='Query'),
  subSceneUuid?: string(name='SubSceneUuid', example='123456', position='Query'),
  type?: string(name='Type', example='1', position='Query'),
}

model GetHotspotTagResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  data?: string(name='Data', example='{"watermarkImg":[],"enabledTitleTag":0}'),
  errMessage?: string(name='ErrMessage', example='success'),
  objectString?: string(name='ObjectString', example='"{}"'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model GetHotspotTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotTag  GetHotspotTagRequest
  * @return GetHotspotTagResponse
 */
async function getHotspotTag(request: GetHotspotTagRequest): GetHotspotTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotspotTag', 'POST', '/', 'json', false, 'json', request);
}

model GetLayoutDataRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetLayoutDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='{}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model GetLayoutDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLayoutDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLayoutData  GetLayoutDataRequest
  * @return GetLayoutDataResponse
 */
async function getLayoutData(request: GetLayoutDataRequest): GetLayoutDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLayoutData', 'POST', '/', 'json', false, 'json', request);
}

model GetOriginLayoutDataRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetOriginLayoutDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='{}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model GetOriginLayoutDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginLayoutDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOriginLayoutData  GetOriginLayoutDataRequest
  * @return GetOriginLayoutDataResponse
 */
async function getOriginLayoutData(request: GetOriginLayoutDataRequest): GetOriginLayoutDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOriginLayoutData', 'POST', '/', 'json', false, 'json', request);
}

model GetOssPolicyRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetOssPolicyResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  accessId?: string(name='AccessId', example='abc'),
  callback?: string(name='Callback', example='""'),
  code?: long(name='Code', example='200'),
  dir?: string(name='Dir', example='123/'),
  expire?: string(name='Expire', example='60'),
  host?: string(name='Host', example='oss.aliyun.com'),
  message?: string(name='Message', example='success'),
  policy?: string(name='Policy', example='def'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  signature?: string(name='Signature', example='ghi'),
  success?: boolean(name='Success', example='true'),
}

model GetOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssPolicy  GetOssPolicyRequest
  * @return GetOssPolicyResponse
 */
async function getOssPolicy(request: GetOssPolicyRequest): GetOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPackSceneTaskStatusRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='hjsyuyiuwe7wehg****', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='download', position='Query'),
}

model GetPackSceneTaskStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    progress?: long(name='Progress', example='100'),
    status?: string(name='Status', example='succeed'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', example='A8CD0AD9-8A92-455A-A984-A7E4B****'),
  success?: boolean(name='Success', example='true'),
}

model GetPackSceneTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPackSceneTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPackSceneTaskStatus  GetPackSceneTaskStatusRequest
  * @return GetPackSceneTaskStatusResponse
 */
async function getPackSceneTaskStatus(request: GetPackSceneTaskStatusRequest): GetPackSceneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPackSceneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetRectifyImageRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetRectifyImageResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  url?: string(name='Url', example='https://image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
}

model GetRectifyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRectifyImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRectifyImage  GetRectifyImageRequest
  * @return GetRectifyImageResponse
 */
async function getRectifyImage(request: GetRectifyImageRequest): GetRectifyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRectifyImage', 'POST', '/', 'json', false, 'json', request);
}

model GetSceneBuildTaskStatusRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='m+0cmndEGjg9pv/hy4jh****', position='Query'),
}

model GetSceneBuildTaskStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  errorCode?: string(name='ErrorCode', example='2001'),
  errorMsg?: string(name='ErrorMsg', example='xx'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  sceneId?: string(name='SceneId', example='m+0cmndEGjg9pv/hy4jh****'),
  status?: string(name='Status', example='failed'),
  success?: boolean(name='Success', example='true'),
}

model GetSceneBuildTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneBuildTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSceneBuildTaskStatus  GetSceneBuildTaskStatusRequest
  * @return GetSceneBuildTaskStatusResponse
 */
async function getSceneBuildTaskStatus(request: GetSceneBuildTaskStatusRequest): GetSceneBuildTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneBuildTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePackUrlRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='L2omaCMmQZZkEg4p****', position='Query'),
}

model GetScenePackUrlResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    expire?: string(name='Expire', example='2022-05-17 11:00:17'),
    url?: string(name='Url'),
    valid?: boolean(name='Valid', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', example='A8CD0AD9-8A92-455A-A984-A7E4B76****'),
  success?: boolean(name='Success', example='true'),
}

model GetScenePackUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenePackUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScenePackUrl  GetScenePackUrlRequest
  * @return GetScenePackUrlResponse
 */
async function getScenePackUrl(request: GetScenePackUrlRequest): GetScenePackUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePackUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePreviewDataRequest {
  domain?: string(name='Domain', example='www.example.com', position='Query'),
  enabled?: boolean(name='Enabled', example='true/false', position='Query'),
  previewToken: string(name='PreviewToken', description='This parameter is required.', example='2735913e96da44ea8c86f8e777c8****', position='Query'),
  showTag?: boolean(name='ShowTag', example='true/false', position='Query'),
}

model GetScenePreviewDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='0：成功，其他：失败'),
  data?: {
    model?: {
      modelPath?: string(name='ModelPath'),
      panoList?: [ 
        {
          curRoomPicList?: [ string ](name='CurRoomPicList'),
          enabled?: boolean(name='Enabled', example='true/false'),
          floorIdx?: string(name='FloorIdx', example='1****'),
          id?: string(name='Id', example='1****'),
          mainImage?: boolean(name='MainImage', example='true/false'),
          neighbours?: [ string ](name='Neighbours'),
          position?: {
            rotation?: [ double ](name='Rotation'),
            spot?: [ double ](name='Spot'),
            viewpoint?: [ double ](name='Viewpoint'),
          }(name='Position'),
          rawName?: string(name='RawName', example='location_93132801658010****'),
          resource?: string(name='Resource'),
          roomIdx?: string(name='RoomIdx', example='1****'),
          subSceneId?: string(name='SubSceneId', example='a7RqCd3kLMgglmn****'),
          token?: string(name='Token', description='token', example='sIPGWRGLJHEIQE****'),
          virtualId?: string(name='VirtualId', example='93132801658010****'),
          virtualName?: string(name='VirtualName'),
        }
      ](name='PanoList'),
      textureModelPath?: string(name='TextureModelPath'),
      texturePanoPath?: string(name='TexturePanoPath'),
    }(name='Model'),
    tags?: [ 
      {
        config?: {
          backgroundColor?: string(name='BackgroundColor', example='#00000'),
          buttonConfig?: {
            customText?: string(name='CustomText'),
            type?: string(name='Type', example='CLICK_CHECK'),
          }(name='ButtonConfig'),
          content?: string(name='Content'),
          formImgSize?: [ long ](name='FormImgSize'),
          formJumpType?: boolean(name='FormJumpType', example='true/false'),
          formSelectImgType?: string(name='FormSelectImgType', example='default'),
          images?: [ string ](name='Images'),
          isTagVisibleBy3d?: boolean(name='IsTagVisibleBy3d', example='true/false'),
          link?: string(name='Link', example='http://www.example.com/***'),
          panoId?: string(name='PanoId', example='1****'),
          position?: [ double ](name='Position'),
          positionPanoCube?: [ double ](name='PositionPanoCube'),
          relatedPanoIds?: [ string ](name='RelatedPanoIds'),
          sceneId?: long(name='SceneId', example='323****'),
          title?: string(name='Title'),
          video?: string(name='Video', example='http://www.example.com/****.mp4'),
        }(name='Config'),
        id?: string(name='Id', example='1****'),
        position?: [ double ](name='Position'),
        positionPanoCube?: [ double ](name='PositionPanoCube'),
        type?: string(name='Type', example='IMAGE'),
      }
    ](name='Tags'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='A8CD0AD9-8A92-455A-A984-A7E4B76FF387'),
  success?: boolean(name='Success', example='true/false'),
}

model GetScenePreviewDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenePreviewDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScenePreviewData  GetScenePreviewDataRequest
  * @return GetScenePreviewDataResponse
 */
async function getScenePreviewData(request: GetScenePreviewDataRequest): GetScenePreviewDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePreviewData', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePreviewInfoRequest {
  domain?: string(name='Domain', example='www.aliyundoc.com', position='Query'),
  enabled?: boolean(name='Enabled', example='true', position='Query'),
  modelToken: string(name='ModelToken', description='This parameter is required.', example='A.e.RQJRPYGIJJQP****', position='Query'),
}

model GetScenePreviewInfoResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='0：成功，其他：失败'),
  data?: {
    modelPath?: string(name='ModelPath', example='https://www.aliyundoc.com/sgm/A.e.QRQRLWYEHIUEYLYW/A.e.QRQRLWYEHIUEYLYW****.sgm'),
    panoList?: string(name='PanoList'),
    textureModelPath?: string(name='TextureModelPath'),
    texturePanoPath?: string(name='TexturePanoPath'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true/false'),
}

model GetScenePreviewInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenePreviewInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScenePreviewInfo  GetScenePreviewInfoRequest
  * @return GetScenePreviewInfoResponse
 */
async function getScenePreviewInfo(request: GetScenePreviewInfoRequest): GetScenePreviewInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePreviewInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePreviewResourceRequest {
  draft?: boolean(name='Draft', example='false', position='Query'),
  previewToken: string(name='PreviewToken', description='This parameter is required.', example='2deb941b3e1****', position='Query'),
}

model GetScenePreviewResourceResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='0：成功，其他：失败'),
  data?: {
    name?: string(name='Name'),
    resourceDirectory?: {
      hotspotTagConfig?: string(name='HotspotTagConfig', example='hotspotTag.json'),
      modelConfig?: string(name='ModelConfig', example='config.json'),
      orthomapConfig?: string(name='OrthomapConfig', example='orthomap/orthomap.json'),
      rootPath?: string(name='RootPath', example='A.e.YKPYuuYuituy****'),
    }(name='ResourceDirectory'),
    version?: string(name='Version', example='1.0'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='A8CD0AD9-8A92-455A-A984-A7E4B76*****'),
  success?: boolean(name='Success', example='true/false'),
}

model GetScenePreviewResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenePreviewResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScenePreviewResource  GetScenePreviewResourceRequest
  * @return GetScenePreviewResourceResponse
 */
async function getScenePreviewResource(request: GetScenePreviewResourceRequest): GetScenePreviewResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePreviewResource', 'POST', '/', 'json', false, 'json', request);
}

model GetSingleConnDataRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', minimum=1, position='Query'),
}

model GetSingleConnDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  list?: [ 
    {
      id?: string(name='Id', description='ID', example='1#234@abc'),
      mapId?: string(name='MapId', example='1#567#def'),
      type?: string(name='Type', example='outer'),
    }
  ](name='List'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  version?: string(name='Version', example='2.1'),
}

model GetSingleConnDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSingleConnDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSingleConnData  GetSingleConnDataRequest
  * @return GetSingleConnDataResponse
 */
async function getSingleConnData(request: GetSingleConnDataRequest): GetSingleConnDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSingleConnData', 'POST', '/', 'json', false, 'json', request);
}

model GetSourcePackStatusRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='hjsyuyiuwe7wehg****', position='Query'),
}

model GetSourcePackStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    progress?: long(name='Progress', example='100'),
    status?: string(name='Status', example='succeed'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', example='A8CD0AD9-8A92-455A-A984-A7E4B76****'),
  success?: boolean(name='Success', example='true'),
  url?: string(name='Url'),
}

model GetSourcePackStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSourcePackStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSourcePackStatus  GetSourcePackStatusRequest
  * @return GetSourcePackStatusResponse
 */
async function getSourcePackStatus(request: GetSourcePackStatusRequest): GetSourcePackStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSourcePackStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSubSceneTaskStatusRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetSubSceneTaskStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  list?: [ 
    {
      errorCode?: string(name='ErrorCode', example='2001'),
      errorMsg?: string(name='ErrorMsg', example='xx'),
      id?: string(name='Id', example='4638****'),
      sceneId?: string(name='SceneId', example='2345****'),
      status?: string(name='Status', example='init'),
      subSceneId?: string(name='SubSceneId', example='3456***'),
      type?: string(name='Type', example='cutimage'),
    }
  ](name='List'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model GetSubSceneTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubSceneTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubSceneTaskStatus  GetSubSceneTaskStatusRequest
  * @return GetSubSceneTaskStatusResponse
 */
async function getSubSceneTaskStatus(request: GetSubSceneTaskStatusRequest): GetSubSceneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubSceneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskStatusRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='1234****', position='Query'),
}

model GetTaskStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  errorCode?: string(name='ErrorCode', example='2001'),
  errorMsg?: string(name='ErrorMsg', example='xxx'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  status?: string(name='Status', example='init'),
  success?: boolean(name='Success', example='true'),
  type?: string(name='Type', example='wallline'),
}

model GetTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskStatus  GetTaskStatusRequest
  * @return GetTaskStatusResponse
 */
async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetWindowConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  previewToken?: string(name='PreviewToken', example='5dc5c2dd927e45039dadb312384b****', position='Query'),
}

model GetWindowConfigResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  data?: map[string]any(name='Data', example='2345****'),
  errMessage?: string(name='ErrMessage'),
  objectString?: string(name='ObjectString', example='"{}"'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='success'),
}

model GetWindowConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWindowConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWindowConfig  GetWindowConfigRequest
  * @return GetWindowConfigResponse
 */
async function getWindowConfig(request: GetWindowConfigRequest): GetWindowConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWindowConfig', 'POST', '/', 'json', false, 'json', request);
}

model LabelBuildRequest {
  mode?: string(name='Mode', position='Query'),
  modelStyle?: string(name='ModelStyle', example='PATCH', position='Query'),
  optimizeWallWidth?: string(name='OptimizeWallWidth', example='OFF', position='Query'),
  planStyle?: string(name='PlanStyle', example='DEFAULT', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1234****', position='Query'),
  wallHeight?: long(name='WallHeight', example='0', position='Query'),
}

model LabelBuildResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='234****'),
}

model LabelBuildResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LabelBuildResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LabelBuild  LabelBuildRequest
  * @return LabelBuildResponse
 */
async function labelBuild(request: LabelBuildRequest): LabelBuildResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LabelBuild', 'POST', '/', 'json', false, 'json', request);
}

model LinkImageRequest {
  cameraHeight?: int32(name='CameraHeight', example='160', position='Query'),
  fileName: string(name='FileName', description='This parameter is required.', example='****.jpg', position='Query'),
  platform?: string(name='Platform', example='PC', position='Query'),
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model LinkImageResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  resourceId?: string(name='ResourceId', example='234****'),
  success?: boolean(name='Success', example='true'),
}

model LinkImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LinkImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LinkImage  LinkImageRequest
  * @return LinkImageResponse
 */
async function linkImage(request: LinkImageRequest): LinkImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LinkImage', 'POST', '/', 'json', false, 'json', request);
}

model ListProjectRequest {
  name?: string(name='Name', position='Query'),
  pageNum: long(name='PageNum', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=1000, position='Query'),
}

model ListProjectResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  count?: long(name='Count', description='count', example='100'),
  currentPage?: long(name='CurrentPage', example='1'),
  hasNext?: boolean(name='HasNext', example='true'),
  list?: [ 
    {
      businessId?: long(name='BusinessId', example='5244****'),
      businessName?: string(name='BusinessName'),
      createTime?: long(name='CreateTime', example='123123'),
      id?: string(name='Id', example='1234****'),
      modifiedTime?: long(name='ModifiedTime', example='123214'),
      name?: string(name='Name'),
      token?: string(name='Token', description='Token', example='d989623696ab4f87a80b8d5b0b0****'),
    }
  ](name='List'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
  totalPage?: long(name='TotalPage', example='5'),
}

model ListProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProject  ListProjectRequest
  * @return ListProjectResponse
 */
async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProject', 'POST', '/', 'json', false, 'json', request);
}

model ListSceneRequest {
  name?: string(name='Name', example='厨房', position='Query'),
  pageNum: long(name='PageNum', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  projectId: string(name='ProjectId', description='This parameter is required.', example='1234****', position='Query'),
}

model ListSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  count?: long(name='Count', example='100'),
  currentPage?: long(name='CurrentPage', example='1'),
  hasNext?: boolean(name='HasNext', example='true'),
  list?: [ 
    {
      coverUrl?: string(name='CoverUrl', example='www.example.com/xxxx/xxx.jpg'),
      gmtCreate?: long(name='GmtCreate', example='1621236933677'),
      gmtModified?: long(name='GmtModified', example='1621236933677'),
      id?: string(name='Id', example='1234****'),
      name?: string(name='Name', example='厨房'),
      previewToken?: string(name='PreviewToken', example='d989623696ab4f87a80b8d5b0b00****'),
      published?: boolean(name='Published', example='false'),
      sourceNum?: long(name='SourceNum', example='20'),
      status?: string(name='Status', example='init'),
      statusName?: string(name='StatusName'),
      subSceneNum?: long(name='SubSceneNum', example='20'),
      type?: string(name='Type', example='MODEL_3D'),
    }
  ](name='List'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
  totalPage?: long(name='TotalPage', example='5'),
}

model ListSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScene  ListSceneRequest
  * @return ListSceneResponse
 */
async function listScene(request: ListSceneRequest): ListSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScene', 'POST', '/', 'json', false, 'json', request);
}

model ListSubSceneRequest {
  pageNum: long(name='PageNum', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', minimum=1, position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='L2omaCMmQZZkEg4pE****', position='Query'),
  showLayoutData?: boolean(name='ShowLayoutData', example='true', position='Query'),
  sortField?: string(name='SortField', example='NAME', position='Query'),
}

model ListSubSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  count?: long(name='Count', example='100'),
  currentPage?: long(name='CurrentPage', example='1'),
  hasNext?: boolean(name='HasNext', example='true'),
  list?: [ 
    {
      baseImageUrl?: string(name='BaseImageUrl', example='https:/image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
      coverUrl?: string(name='CoverUrl', example='https:/image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
      cubemapPath?: string(name='CubemapPath'),
      deleted?: boolean(name='Deleted', example='true'),
      gmtCreate?: long(name='GmtCreate', example='1621236933677'),
      gmtModified?: long(name='GmtModified', example='1621236933677'),
      id?: string(name='Id', example='xsfwsddd=='),
      layoutData?: string(name='LayoutData', example='{}'),
      name?: string(name='Name', example='c俄式'),
      originUrl?: string(name='OriginUrl', example='https:/image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
      resourceId?: string(name='ResourceId', example='2345****'),
      resourceName?: string(name='ResourceName', example='xxxx.jpg'),
      status?: long(name='Status', example='1'),
      type?: string(name='Type', example='IMAGE'),
      url?: string(name='Url', example='https:/image-demo.oss-cn-hangzhou.aliyuncs.com/****.jpg'),
    }
  ](name='List'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  totalPage?: long(name='TotalPage', example='5'),
}

model ListSubSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubScene  ListSubSceneRequest
  * @return ListSubSceneResponse
 */
async function listSubScene(request: ListSubSceneRequest): ListSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubScene', 'POST', '/', 'json', false, 'json', request);
}

model OptimizeRightAngleRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model OptimizeRightAngleResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='2345****'),
}

model OptimizeRightAngleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OptimizeRightAngleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OptimizeRightAngle  OptimizeRightAngleRequest
  * @return OptimizeRightAngleResponse
 */
async function optimizeRightAngle(request: OptimizeRightAngleRequest): OptimizeRightAngleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OptimizeRightAngle', 'POST', '/', 'json', false, 'json', request);
}

model PackSceneRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='L2omaCMmQZZkEg4p****', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='download', position='Query'),
}

model PackSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    taskId?: string(name='TaskId', example='hjsyuyiuwe7wehg****'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', example='A8CD0AD9-8A92-455A-A984-A7E4B76****'),
  success?: boolean(name='Success', example='true'),
}

model PackSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PackSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PackScene  PackSceneRequest
  * @return PackSceneResponse
 */
async function packScene(request: PackSceneRequest): PackSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PackScene', 'POST', '/', 'json', false, 'json', request);
}

model PackSourceRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='L2omaCMmQZZkEg4p****', position='Query'),
}

model PackSourceResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  data?: {
    taskId?: string(name='TaskId', example='hjsyuyiuwe7wehg****'),
  }(name='Data'),
  message?: string(name='Message', example='xxxxx'),
  requestId?: string(name='RequestId', example='A8CD0AD9-8A92-455A-A984-A7E4B76F****'),
  success?: boolean(name='Success', example='true'),
}

model PackSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PackSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PackSource  PackSourceRequest
  * @return PackSourceResponse
 */
async function packSource(request: PackSourceRequest): PackSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PackSource', 'POST', '/', 'json', false, 'json', request);
}

model PredImageRequest {
  correctVertical: boolean(name='CorrectVertical', description='This parameter is required.', example='true', position='Query'),
  countDetectDoor?: long(name='CountDetectDoor', example='2', position='Query'),
  detectDoor: boolean(name='DetectDoor', description='This parameter is required.', example='true', position='Query'),
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='2345****', minimum=1, position='Query'),
}

model PredImageResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='1234****'),
}

model PredImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PredImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PredImage  PredImageRequest
  * @return PredImageResponse
 */
async function predImage(request: PredImageRequest): PredImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PredImage', 'POST', '/', 'json', false, 'json', request);
}

model PredictionWallLineRequest {
  cameraHeight?: long(name='CameraHeight', example='160', position='Query'),
  url: string(name='Url', description='This parameter is required.', example='https://www.aliyundoc.com/****.jpg', position='Query'),
}

model PredictionWallLineResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  subSceneId?: string(name='SubSceneId', example='2345****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='1234****'),
}

model PredictionWallLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PredictionWallLineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PredictionWallLine  PredictionWallLineRequest
  * @return PredictionWallLineResponse
 */
async function predictionWallLine(request: PredictionWallLineRequest): PredictionWallLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PredictionWallLine', 'POST', '/', 'json', false, 'json', request);
}

model PublishHotspotRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramTag?: string(name='ParamTag', position='Query'),
  subSceneUuid?: string(name='SubSceneUuid', example='2345****', position='Query'),
}

model PublishHotspotResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  data?: map[string]any(name='Data', example='2345****'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='success'),
}

model PublishHotspotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishHotspotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishHotspot  PublishHotspotRequest
  * @return PublishHotspotResponse
 */
async function publishHotspot(request: PublishHotspotRequest): PublishHotspotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishHotspot', 'POST', '/', 'json', false, 'json', request);
}

model PublishHotspotConfigRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='rteyauiiuw****', position='Query'),
}

model PublishHotspotConfigResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B28A2ECB-AB29-1E01****'),
  success?: boolean(name='Success', example='true'),
}

model PublishHotspotConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishHotspotConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishHotspotConfig  PublishHotspotConfigRequest
  * @return PublishHotspotConfigResponse
 */
async function publishHotspotConfig(request: PublishHotspotConfigRequest): PublishHotspotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishHotspotConfig', 'POST', '/', 'json', false, 'json', request);
}

model PublishSceneRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='m+0cmndEGjg9pv/hy4jh****', position='Query'),
}

model PublishSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  previewUrl?: string(name='PreviewUrl', example='preview-lyj.aliyuncs.com/preview/xxx****'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model PublishSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishScene  PublishSceneRequest
  * @return PublishSceneResponse
 */
async function publishScene(request: PublishSceneRequest): PublishSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishScene', 'POST', '/', 'json', false, 'json', request);
}

model PublishStatusRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='m+0cmndEGjg9pv/hy4jh****', position='Query'),
}

model PublishStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='344794c32937474a9c59eb130936****'),
  status?: string(name='Status', example='succeed'),
  success?: boolean(name='Success', example='true'),
  syncStatus?: string(name='SyncStatus', example='succeed'),
}

model PublishStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishStatus  PublishStatusRequest
  * @return PublishStatusResponse
 */
async function publishStatus(request: PublishStatusRequest): PublishStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishStatus', 'POST', '/', 'json', false, 'json', request);
}

model RecoveryOriginImageRequest {
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='skjjskjk****', position='Query'),
}

model RecoveryOriginImageResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='3BCAD49D-2AC1-13EB-AC19-8C7A46CF****'),
  success?: boolean(name='Success', example='true'),
}

model RecoveryOriginImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoveryOriginImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecoveryOriginImage  RecoveryOriginImageRequest
  * @return RecoveryOriginImageResponse
 */
async function recoveryOriginImage(request: RecoveryOriginImageRequest): RecoveryOriginImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoveryOriginImage', 'POST', '/', 'json', false, 'json', request);
}

model RectVerticalRequest {
  countDetectDoor?: int32(name='CountDetectDoor', example='2', position='Query'),
  detectDoor?: boolean(name='DetectDoor', example='true', position='Query'),
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
  verticalRect: string(name='VerticalRect', description='This parameter is required.', example='{"844946777965268992":[[0.42418407210144654,0.33625107620738004,0.42620819117478337,0.635753199572695],[0.5158627587152769,0.3071978991900134,0.5177513758740194,0.6312118011104786],[0.582693212445534,0.3733969265933281,0.5807612760319687,0.6139402811250833]]}', position='Query'),
}

model RectVerticalResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='syuwoiewyieiyy****'),
}

model RectVerticalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RectVerticalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RectVertical  RectVerticalRequest
  * @return RectVerticalResponse
 */
async function rectVertical(request: RectVerticalRequest): RectVerticalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RectVertical', 'POST', '/', 'json', false, 'json', request);
}

model RectifyImageRequest {
  cameraHeight?: long(name='CameraHeight', example='160', position='Query'),
  url: string(name='Url', description='This parameter is required.', example='https://www.aliyundoc.com/****.jpg', position='Query'),
}

model RectifyImageResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  subSceneId?: string(name='SubSceneId', example='2345****'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='1234****'),
}

model RectifyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RectifyImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RectifyImage  RectifyImageRequest
  * @return RectifyImageResponse
 */
async function rectifyImage(request: RectifyImageRequest): RectifyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RectifyImage', 'POST', '/', 'json', false, 'json', request);
}

model RollbackSubSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='skjjskjk****', position='Query'),
}

model RollbackSubSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='sucess'),
  requestId?: string(name='RequestId', example='3BCAD49D-2AC1-13EB-AC19-8C7A46CF****'),
  success?: boolean(name='Success', example='true'),
}

model RollbackSubSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RollbackSubSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RollbackSubScene  RollbackSubSceneRequest
  * @return RollbackSubSceneResponse
 */
async function rollbackSubScene(request: RollbackSubSceneRequest): RollbackSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackSubScene', 'POST', '/', 'json', false, 'json', request);
}

model SaveHotspotConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramTag?: string(name='ParamTag', example='{enabledTitleTag: 0, watermarkImg: []}', position='Query'),
  previewToken?: string(name='PreviewToken', example='5dc5c2dd927e45039dadb312384b****', position='Query'),
}

model SaveHotspotConfigResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='success'),
}

model SaveHotspotConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveHotspotConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveHotspotConfig  SaveHotspotConfigRequest
  * @return SaveHotspotConfigResponse
 */
async function saveHotspotConfig(request: SaveHotspotConfigRequest): SaveHotspotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveHotspotConfig', 'POST', '/', 'json', false, 'json', request);
}

model SaveHotspotTagRequest {
  regionId?: string(name='RegionId', position='Host'),
  paramTag?: string(name='ParamTag', position='Query'),
  subSceneUuid?: string(name='SubSceneUuid', example='2345****', position='Query'),
}

model SaveHotspotTagResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='success'),
}

model SaveHotspotTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveHotspotTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveHotspotTag  SaveHotspotTagRequest
  * @return SaveHotspotTagResponse
 */
async function saveHotspotTag(request: SaveHotspotTagRequest): SaveHotspotTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveHotspotTag', 'POST', '/', 'json', false, 'json', request);
}

model SaveHotspotTagListRequest {
  hotspotListJson: string(name='HotspotListJson', description='This parameter is required.', example='[{}]', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='tqwiuwetwet****', position='Query'),
}

model SaveHotspotTagListResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B28A2ECB-AB29-1E01****'),
  success?: boolean(name='Success', example='true'),
}

model SaveHotspotTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveHotspotTagListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveHotspotTagList  SaveHotspotTagListRequest
  * @return SaveHotspotTagListResponse
 */
async function saveHotspotTagList(request: SaveHotspotTagListRequest): SaveHotspotTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveHotspotTagList', 'POST', '/', 'json', false, 'json', request);
}

model SaveMinimapRequest {
  data: string(name='Data', description='This parameter is required.', example='1', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', position='Query'),
}

model SaveMinimapResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveMinimapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveMinimapResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveMinimap  SaveMinimapRequest
  * @return SaveMinimapResponse
 */
async function saveMinimap(request: SaveMinimapRequest): SaveMinimapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveMinimap', 'POST', '/', 'json', false, 'json', request);
}

model SaveModelConfigRequest {
  data: string(name='Data', description='This parameter is required.', example='{}', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='iyweyteyue****', position='Query'),
}

model SaveModelConfigResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='B28A2ECB-AB29-1E01****'),
  success?: boolean(name='Success', example='true'),
}

model SaveModelConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveModelConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveModelConfig  SaveModelConfigRequest
  * @return SaveModelConfigResponse
 */
async function saveModelConfig(request: SaveModelConfigRequest): SaveModelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveModelConfig', 'POST', '/', 'json', false, 'json', request);
}

model ScenePublishRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Query'),
}

model ScenePublishResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  previewUrl?: string(name='PreviewUrl', example='https://lyj.aliyun.com/xxx'),
  requestId?: string(name='RequestId', example='344794c32937474a9c59eb1309366493'),
  success?: boolean(name='Success', example='true'),
}

model ScenePublishResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScenePublishResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ScenePublish  ScenePublishRequest
  * @return ScenePublishResponse
 */
async function scenePublish(request: ScenePublishRequest): ScenePublishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScenePublish', 'POST', '/', 'json', false, 'json', request);
}

model TempPreviewRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='m+0cmndEGjg9pv/hy4jh****', position='Query'),
}

model TempPreviewResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  previewUrl?: string(name='PreviewUrl', example='https://preview-lyj.aliyuncs.com/preview/temp/xxx****'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  sceneId?: string(name='SceneId', example='m+0cmndEGjg9pv/hy4jh****'),
  success?: boolean(name='Success', example='true'),
}

model TempPreviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TempPreviewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TempPreview  TempPreviewRequest
  * @return TempPreviewResponse
 */
async function tempPreview(request: TempPreviewRequest): TempPreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempPreview', 'POST', '/', 'json', false, 'json', request);
}

model TempPreviewStatusRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='m+0cmndEGjg9pv/hy4jh****', position='Query'),
}

model TempPreviewStatusResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  status?: string(name='Status', example='processing'),
  success?: boolean(name='Success', example='true'),
}

model TempPreviewStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TempPreviewStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TempPreviewStatus  TempPreviewStatusRequest
  * @return TempPreviewStatusResponse
 */
async function tempPreviewStatus(request: TempPreviewStatusRequest): TempPreviewStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempPreviewStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConnDataRequest {
  connData: string(name='ConnData', description='This parameter is required.', example='{}', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model UpdateConnDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConnDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConnDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateConnData  UpdateConnDataRequest
  * @return UpdateConnDataResponse
 */
async function updateConnData(request: UpdateConnDataRequest): UpdateConnDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConnData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLayoutDataRequest {
  layoutData: string(name='LayoutData', description='This parameter is required.', example='{}', position='Query'),
  subSceneId: string(name='SubSceneId', description='This parameter is required.', example='1234****', position='Query'),
}

model UpdateLayoutDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateLayoutDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLayoutDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLayoutData  UpdateLayoutDataRequest
  * @return UpdateLayoutDataResponse
 */
async function updateLayoutData(request: UpdateLayoutDataRequest): UpdateLayoutDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLayoutData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  businessId?: string(name='BusinessId', example='5432****', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='1234****', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateProjectResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProject  UpdateProjectRequest
  * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProject', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='1234****', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='测试', position='Query'),
}

model UpdateSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4B***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateScene  UpdateSceneRequest
  * @return UpdateSceneResponse
 */
async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScene', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubSceneRequest {
  id: string(name='Id', description='This parameter is required.', example='1234****', position='Query'),
  name?: string(name='Name', example='测试', position='Query'),
  viewPoint?: [ double ](name='ViewPoint', shrink='json', position='Query'),
}

model UpdateSubSceneResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F882EA7-3A1D-0113-94E4-70162C4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSubSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSubSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSubScene  UpdateSubSceneRequest
  * @return UpdateSubSceneResponse
 */
async function updateSubScene(request: UpdateSubSceneRequest): UpdateSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubScene', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubSceneSeqRequest {
  sceneId: string(name='SceneId', description='This parameter is required.', example='sgyuyewyew****', position='Query'),
  sortSubSceneIds: [ string ](name='SortSubSceneIds', description='This parameter is required.', shrink='json', position='Query'),
}

model UpdateSubSceneSeqResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='344794c32937474a9c59eb13093****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSubSceneSeqResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSubSceneSeqResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSubSceneSeq  UpdateSubSceneSeqRequest
  * @return UpdateSubSceneSeqResponse
 */
async function updateSubSceneSeq(request: UpdateSubSceneSeqRequest): UpdateSubSceneSeqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubSceneSeq', 'POST', '/', 'json', false, 'json', request);
}

