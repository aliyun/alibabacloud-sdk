/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tdsr';
  @version = '2020-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'lyj.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddMosaicsRequest {
  markPosition: string(name='MarkPosition', description='马赛克位置数据', position='Query'),
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model AddMosaicsResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model AddMosaicsResponse = {
  headers: map[string]string(name='headers'),
  body: AddMosaicsResponseBody(name='body'),
}

async function addMosaics(request: AddMosaicsRequest): AddMosaicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMosaics', 'POST', '/', 'json', false, 'json', request);
}

model AddProjectRequest {
  businessId?: long(name='BusinessId', description='业务id', position='Query'),
  name: string(name='Name', description='项目名称', position='Query'),
}

model AddProjectResponseBody = {
  code?: long(name='Code', description='返回码'),
  id?: string(name='Id', description='项目ID'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model AddProjectResponse = {
  headers: map[string]string(name='headers'),
  body: AddProjectResponseBody(name='body'),
}

async function addProject(request: AddProjectRequest): AddProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddProject', 'POST', '/', 'json', false, 'json', request);
}

model AddRelativePositionRequest {
  relativePosition: string(name='RelativePosition', description='相对位置信息', position='Query'),
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model AddRelativePositionResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model AddRelativePositionResponse = {
  headers: map[string]string(name='headers'),
  body: AddRelativePositionResponseBody(name='body'),
}

async function addRelativePosition(request: AddRelativePositionRequest): AddRelativePositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRelativePosition', 'POST', '/', 'json', false, 'json', request);
}

model AddRoomPlanRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model AddRoomPlanResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    accessId?: string(name='AccessId', description='accessId'),
    callback?: string(name='Callback', description='上传回调'),
    dir?: string(name='Dir', description='授权路径'),
    expire?: string(name='Expire', description='授权失效时间(s)'),
    host?: string(name='Host', description='上传地址'),
    policy?: string(name='Policy', description='授权'),
    signature?: string(name='Signature', description='签名'),
  }(name='Data', description='文件上传凭据'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model AddRoomPlanResponse = {
  headers: map[string]string(name='headers'),
  body: AddRoomPlanResponseBody(name='body'),
}

async function addRoomPlan(request: AddRoomPlanRequest): AddRoomPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRoomPlan', 'POST', '/', 'json', false, 'json', request);
}

model AddSceneRequest {
  customerUid?: string(name='CustomerUid', position='Query'),
  name: string(name='Name', description='场景名称', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', minimum=1, position='Query'),
  type: string(name='Type', description='场景类型 3D模型：MODEL_3D  全景图片：PIC  全景视频：VIDEO 混合：MIX', position='Query'),
}

model AddSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  id?: string(name='Id', description='场景ID'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model AddSceneResponse = {
  headers: map[string]string(name='headers'),
  body: AddSceneResponseBody(name='body'),
}

async function addScene(request: AddSceneRequest): AddSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddScene', 'POST', '/', 'json', false, 'json', request);
}

model AddSubSceneRequest {
  name: string(name='Name', description='子场景名称', position='Query'),
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
  uploadType?: string(name='UploadType', description='类型 图片：IMAGE 视频：VIDEO', position='Query'),
}

model AddSubSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  id?: string(name='Id', description='子场景ID'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model AddSubSceneResponse = {
  headers: map[string]string(name='headers'),
  body: AddSubSceneResponseBody(name='body'),
}

async function addSubScene(request: AddSubSceneRequest): AddSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSubScene', 'POST', '/', 'json', false, 'json', request);
}

model CheckUserPropertyRequest {
  uid: string(name='Uid', description='用户uid', position='Query'),
}

model CheckUserPropertyResponseBody = {
  code?: long(name='Code', description='返回码'),
  match?: boolean(name='Match', description='用户属性是否匹配'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model CheckUserPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUserPropertyResponseBody(name='body'),
}

async function checkUserProperty(request: CheckUserPropertyRequest): CheckUserPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUserProperty', 'POST', '/', 'json', false, 'json', request);
}

model CopySceneRequest {
  projectId?: string(name='ProjectId', description='复制到的项目Id，默认为空，复制到当前场景所在的项目', position='Query'),
  sceneId: string(name='SceneId', description='场景Id', position='Query'),
  sceneName: string(name='SceneName', description='新场景名称', position='Query'),
}

model CopySceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    taskId?: string(name='TaskId', description='任务ID'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model CopySceneResponse = {
  headers: map[string]string(name='headers'),
  body: CopySceneResponseBody(name='body'),
}

async function copyScene(request: CopySceneRequest): CopySceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyScene', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadPolicyRequest {
  option: string(name='Option', description='不同类型对应的参数', position='Query'),
  type: string(name='Type', description='上传类型，值为：scene（场景）、subScene（子场景）、rooms（rooms文件）、hotspot（后处理相关）', position='Query'),
}

model CreateUploadPolicyResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    accessId?: string(name='AccessId', description='accessId'),
    callback?: string(name='Callback', description='上传回调'),
    dir?: string(name='Dir', description='授权路径'),
    expire?: string(name='Expire', description='授权失效时间(s)'),
    host?: string(name='Host', description='上传地址'),
    policy?: string(name='Policy', description='授权'),
    signature?: string(name='Signature', description='签名'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model CreateUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadPolicyResponseBody(name='body'),
}

async function createUploadPolicy(request: CreateUploadPolicyRequest): CreateUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DetailProjectRequest {
  id: string(name='Id', description='项目Id', position='Query'),
}

model DetailProjectResponseBody = {
  businessId?: long(name='BusinessId', description='业务ID'),
  businessName?: string(name='BusinessName', description='业务名称'),
  code?: long(name='Code', description='返回码'),
  gmtCreate?: long(name='GmtCreate', description='创建时间'),
  gmtModified?: long(name='GmtModified', description='最后修改时间'),
  id?: string(name='Id', description='项目ID'),
  message?: string(name='Message', description='错误消息'),
  name?: string(name='Name', description='项目名称'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  token?: string(name='Token', description='Token'),
}

model DetailProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DetailProjectResponseBody(name='body'),
}

async function detailProject(request: DetailProjectRequest): DetailProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetailProject', 'POST', '/', 'json', false, 'json', request);
}

model DetailSceneRequest {
  id: string(name='Id', description='场景Id', position='Query'),
}

model DetailSceneResponseBody = {
  captures?: [ 
    {
      title?: string(name='Title', description='图片名称'),
      url?: string(name='Url', description='实勘图url'),
    }
  ](name='Captures', description='实勘图列表'),
  code?: long(name='Code', description='返回码'),
  coverUrl?: string(name='CoverUrl', description='封面地址'),
  gmtCreate?: long(name='GmtCreate', description='创建时间'),
  gmtModified?: long(name='GmtModified', description='最后修改时间'),
  id?: string(name='Id', description='主场景Id'),
  message?: string(name='Message', description='错误消息'),
  name?: string(name='Name', description='场景名称'),
  previewToken?: string(name='PreviewToken', description='预览Token'),
  published?: boolean(name='Published', description='是否已发布 true：已发布：false：未发布'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  sourceNum?: long(name='SourceNum', description='资源数'),
  status?: string(name='Status', description='场景状态，init：初始化，published：已发布，publishing：发布中，copying：复制中，making：制作中，publishable：构建成功，makeFailed：制作失败'),
  statusName?: string(name='StatusName', description='状态名称'),
  subSceneNum?: long(name='SubSceneNum', description='子场景数'),
  success?: boolean(name='Success', description='是否请求成功'),
  type?: string(name='Type', description='场景类型'),
}

model DetailSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DetailSceneResponseBody(name='body'),
}

async function detailScene(request: DetailSceneRequest): DetailSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetailScene', 'POST', '/', 'json', false, 'json', request);
}

model DetailSubSceneRequest {
  id: string(name='Id', description='子场景ID', position='Query'),
}

model DetailSubSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  coverUrl?: string(name='CoverUrl', description='图片路径/视频封面路径'),
  cubemapPath?: string(name='CubemapPath', description='切图路径'),
  gmtCreate?: long(name='GmtCreate', description='创建时间'),
  gmtModified?: long(name='GmtModified', description='最后修改时间'),
  id?: string(name='Id', description='子场景id'),
  imageUrl?: string(name='ImageUrl', description='矫正后图的路径'),
  layoutData?: string(name='LayoutData', description='墙线标注数据'),
  message?: string(name='Message', description='错误消息'),
  name?: string(name='Name', description='子场景名称'),
  originUrl?: string(name='OriginUrl', description='原图路径'),
  position?: string(name='Position', description='视角'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  resourceId?: string(name='ResourceId', description='图片ID/视频ID'),
  status?: long(name='Status', description='子场景状态'),
  success?: boolean(name='Success', description='是否请求成功'),
  type?: string(name='Type', description='资源类型，IMAGE：图片，VIDEO：视频'),
  url?: string(name='Url', description='图片路径/视频路径'),
}

model DetailSubSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DetailSubSceneResponseBody(name='body'),
}

async function detailSubScene(request: DetailSubSceneRequest): DetailSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetailSubScene', 'POST', '/', 'json', false, 'json', request);
}

model DropProjectRequest {
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
}

model DropProjectResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID与入参中requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model DropProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DropProjectResponseBody(name='body'),
}

async function dropProject(request: DropProjectRequest): DropProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropProject', 'POST', '/', 'json', false, 'json', request);
}

model DropSceneRequest {
  id: string(name='Id', description='主场景id', position='Query'),
}

model DropSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model DropSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DropSceneResponseBody(name='body'),
}

async function dropScene(request: DropSceneRequest): DropSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropScene', 'POST', '/', 'json', false, 'json', request);
}

model DropSubSceneRequest {
  id: string(name='Id', description='子场景ID', position='Query'),
}

model DropSubSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model DropSubSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DropSubSceneResponseBody(name='body'),
}

async function dropSubScene(request: DropSubSceneRequest): DropSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropSubScene', 'POST', '/', 'json', false, 'json', request);
}

model GetConnDataRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model GetConnDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  extend?: string(name='Extend', description='扩展信息'),
  list?: [ 
    {
      id?: string(name='Id', description='ID'),
      mapId?: string(name='MapId', description='关联的ID'),
      type?: string(name='Type', description='outer:外关联 inner：内关联 stair：楼梯关联'),
    }
  ](name='List', description='关联信息'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
  version?: string(name='Version', description='版本'),
}

model GetConnDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnDataResponseBody(name='body'),
}

async function getConnData(request: GetConnDataRequest): GetConnDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnData', 'POST', '/', 'json', false, 'json', request);
}

model GetCopySceneTaskStatusRequest {
  taskId: string(name='TaskId', description='任务ID', position='Query'),
}

model GetCopySceneTaskStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    progress?: long(name='Progress', description='任务进度'),
    status?: string(name='Status', description='任务状态'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetCopySceneTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetCopySceneTaskStatusResponseBody(name='body'),
}

async function getCopySceneTaskStatus(request: GetCopySceneTaskStatusRequest): GetCopySceneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCopySceneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetHotspotConfigRequest {
  domain?: string(name='Domain', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  previewToken: string(name='PreviewToken', position='Query'),
  type: long(name='Type', position='Query'),
}

model GetHotspotConfigResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: string(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetHotspotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotspotConfigResponseBody(name='body'),
}

async function getHotspotConfig(request: GetHotspotConfigRequest): GetHotspotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotspotConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetHotspotSceneDataRequest {
  domain?: string(name='Domain', description='自定义oss域名（可为cdn域名）', position='Query'),
  enabled?: boolean(name='Enabled', description='是否开启自用资源访问', position='Query'),
  previewToken: string(name='PreviewToken', description='预览token', position='Query'),
  type: long(name='Type', description='0 未发布， 1 已发布', minimum=0, maximum=1, position='Query'),
}

model GetHotspotSceneDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    modelToken?: string(name='ModelToken', description='模型token（sgm token）'),
    previewData?: string(name='PreviewData', description='html转译后的预览数据，包含图片、子场景ID等信息'),
    previewToken?: string(name='PreviewToken', description='预览token'),
    sceneType?: string(name='SceneType', description='3D模型：MODEL_3D 全景图片：PIC 全景视频：VIDEO'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetHotspotSceneDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotspotSceneDataResponseBody(name='body'),
}

async function getHotspotSceneData(request: GetHotspotSceneDataRequest): GetHotspotSceneDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotspotSceneData', 'POST', '/', 'json', false, 'json', request);
}

model GetHotspotTagRequest {
  domain?: string(name='Domain', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  previewToken?: string(name='PreviewToken', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subSceneUuid?: string(name='SubSceneUuid', position='Query'),
  type?: string(name='Type', position='Query'),
}

model GetHotspotTagResponseBody = {
  data?: string(name='Data'),
  errMessage?: string(name='ErrMessage'),
  objectString?: string(name='ObjectString'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHotspotTagResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotspotTagResponseBody(name='body'),
}

async function getHotspotTag(request: GetHotspotTagRequest): GetHotspotTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotspotTag', 'POST', '/', 'json', false, 'json', request);
}

model GetLayoutDataRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model GetLayoutDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: string(name='Data', description='标注信息'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetLayoutDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetLayoutDataResponseBody(name='body'),
}

async function getLayoutData(request: GetLayoutDataRequest): GetLayoutDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLayoutData', 'POST', '/', 'json', false, 'json', request);
}

model GetOriginLayoutDataRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model GetOriginLayoutDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: string(name='Data', description='标注数据'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetOriginLayoutDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetOriginLayoutDataResponseBody(name='body'),
}

async function getOriginLayoutData(request: GetOriginLayoutDataRequest): GetOriginLayoutDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOriginLayoutData', 'POST', '/', 'json', false, 'json', request);
}

model GetOssPolicyRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model GetOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='accessId'),
  callback?: string(name='Callback', description='上传回调'),
  code?: long(name='Code', description='返回码'),
  dir?: string(name='Dir', description='授权路径'),
  expire?: string(name='Expire', description='授权失效时间(s)'),
  host?: string(name='Host', description='上传地址'),
  message?: string(name='Message', description='错误消息'),
  policy?: string(name='Policy', description='授权'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  signature?: string(name='Signature', description='签名'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetOssPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssPolicyResponseBody(name='body'),
}

async function getOssPolicy(request: GetOssPolicyRequest): GetOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPackSceneTaskStatusRequest {
  taskId: string(name='TaskId', description='任务ID', position='Query'),
  type: string(name='Type', description='操作类型：download（下载），sync（同步）', position='Query'),
}

model GetPackSceneTaskStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    progress?: long(name='Progress', description='任务进度'),
    status?: string(name='Status', description='任务状态'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetPackSceneTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPackSceneTaskStatusResponseBody(name='body'),
}

async function getPackSceneTaskStatus(request: GetPackSceneTaskStatusRequest): GetPackSceneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPackSceneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetRectifyImageRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model GetRectifyImageResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  url?: string(name='Url', description='图片地址'),
}

model GetRectifyImageResponse = {
  headers: map[string]string(name='headers'),
  body: GetRectifyImageResponseBody(name='body'),
}

async function getRectifyImage(request: GetRectifyImageRequest): GetRectifyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRectifyImage', 'POST', '/', 'json', false, 'json', request);
}

model GetSceneBuildTaskStatusRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model GetSceneBuildTaskStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  errorCode?: string(name='ErrorCode', description='任务失败错误码'),
  errorMsg?: string(name='ErrorMsg', description='任务失败错误消息'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  sceneId?: string(name='SceneId', description='场景ID'),
  status?: string(name='Status', description='未开始  init 处理中 失败     failed   processing  完成     succeed 取消     canceled'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetSceneBuildTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetSceneBuildTaskStatusResponseBody(name='body'),
}

async function getSceneBuildTaskStatus(request: GetSceneBuildTaskStatusRequest): GetSceneBuildTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneBuildTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePackUrlRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model GetScenePackUrlResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    expire?: string(name='Expire', description='失效日期'),
    url?: string(name='Url', description='打包文件地址'),
    valid?: boolean(name='Valid', description='是否有效'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetScenePackUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetScenePackUrlResponseBody(name='body'),
}

async function getScenePackUrl(request: GetScenePackUrlRequest): GetScenePackUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePackUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePreviewDataRequest {
  domain?: string(name='Domain', description='自定义oss域名（可为cdn域名）', position='Query'),
  enabled?: boolean(name='Enabled', description='是否开启自用资源访问（默认false）', position='Query'),
  previewToken: string(name='PreviewToken', description='预览token', position='Query'),
  showTag?: boolean(name='ShowTag', description='是否返回热点数据（默认false）', position='Query'),
}

model GetScenePreviewDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    model?: {
      modelPath?: string(name='ModelPath', description='模型地址'),
      panoList?: [ 
        {
          curRoomPicList?: [ string ](name='CurRoomPicList', description='当前房间的所有点位'),
          enabled?: boolean(name='Enabled', description='当前点位是否渲染，false不渲染，场景无法跳转'),
          floorIdx?: string(name='FloorIdx', description='楼层号'),
          id?: string(name='Id', description='点位ID'),
          mainImage?: boolean(name='MainImage', description='单房间多图情况下，是否为主图，默认true'),
          neighbours?: [ string ](name='Neighbours', description='当前房间邻近可视的点位id'),
          position?: {
            rotation?: [ double ](name='Rotation', description='当前点位在场景中的旋转四元素'),
            spot?: [ double ](name='Spot', description='当前点位在场景中的坐标'),
            viewpoint?: [ double ](name='Viewpoint', description='当前子场景名标签在场景中的坐标'),
          }(name='Position', description='位置数据'),
          rawName?: string(name='RawName', description='一个名称，无实际意义'),
          resource?: string(name='Resource', description='全景贴图路径'),
          roomIdx?: string(name='RoomIdx', description='房间号'),
          subSceneId?: string(name='SubSceneId', description='子场景ID'),
          token?: string(name='Token', description='token'),
          virtualId?: string(name='VirtualId', description='图片虚拟ID'),
          virtualName?: string(name='VirtualName', description='图片名称'),
        }
      ](name='PanoList', description='点位数据'),
      textureModelPath?: string(name='TextureModelPath', description='模型的贴图路径'),
      texturePanoPath?: string(name='TexturePanoPath', description='漫游后预览图片路径'),
    }(name='Model', description='模型数据'),
    tags?: [ 
      {
        config?: {
          backgroundColor?: string(name='BackgroundColor', description='背景色'),
          buttonConfig?: {
            customText?: string(name='CustomText'),
            type?: string(name='Type'),
          }(name='ButtonConfig', description='按钮配置'),
          content?: string(name='Content', description='内容'),
          formImgSize?: [ long ](name='FormImgSize'),
          formJumpType?: boolean(name='FormJumpType'),
          formSelectImgType?: string(name='FormSelectImgType'),
          images?: [ string ](name='Images', description='图片链接'),
          isTagVisibleBy3d?: boolean(name='IsTagVisibleBy3d', description='是否在鸟瞰模式下显示'),
          link?: string(name='Link', description='超链接'),
          panoId?: string(name='PanoId', description='点位ID'),
          position?: [ double ](name='Position', description='坐标'),
          positionPanoCube?: [ double ](name='PositionPanoCube'),
          relatedPanoIds?: [ string ](name='RelatedPanoIds'),
          sceneId?: long(name='SceneId', description='场景ID'),
          title?: string(name='Title', description='标题'),
          video?: string(name='Video', description='视频链接'),
        }(name='Config', description='配置'),
        id?: string(name='Id', description='标签ID'),
        position?: [ double ](name='Position', description='坐标'),
        positionPanoCube?: [ double ](name='PositionPanoCube'),
        type?: string(name='Type', description='热点类型'),
      }
    ](name='Tags', description='热点数据'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetScenePreviewDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetScenePreviewDataResponseBody(name='body'),
}

async function getScenePreviewData(request: GetScenePreviewDataRequest): GetScenePreviewDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePreviewData', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePreviewInfoRequest {
  domain?: string(name='Domain', description='自定义oss域名（可为cdn域名）', position='Query'),
  enabled?: boolean(name='Enabled', description='是否开启自用资源访问', position='Query'),
  modelToken: string(name='ModelToken', description='模型token', position='Query'),
}

model GetScenePreviewInfoResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    modelPath?: string(name='ModelPath', description='模型地址'),
    panoList?: string(name='PanoList', description='html转译后的预览数据'),
    textureModelPath?: string(name='TextureModelPath', description='模型的贴图路径'),
    texturePanoPath?: string(name='TexturePanoPath', description='漫游后预览图片路径'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetScenePreviewInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetScenePreviewInfoResponseBody(name='body'),
}

async function getScenePreviewInfo(request: GetScenePreviewInfoRequest): GetScenePreviewInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePreviewInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetScenePreviewResourceRequest {
  draft?: boolean(name='Draft', description='是否草稿预览', position='Query'),
  previewToken: string(name='PreviewToken', description='预览token', position='Query'),
}

model GetScenePreviewResourceResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    name?: string(name='Name', description='模型名称'),
    resourceDirectory?: {
      hotspotTagConfig?: string(name='HotspotTagConfig', description='热点文件路径'),
      modelConfig?: string(name='ModelConfig', description='模型配置路径'),
      orthomapConfig?: string(name='OrthomapConfig', description='小地图数据文件路径'),
      rootPath?: string(name='RootPath', description='模型路径'),
    }(name='ResourceDirectory', description='资源路径'),
    version?: string(name='Version', description='版本'),
  }(name='Data', description='模型数据'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetScenePreviewResourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetScenePreviewResourceResponseBody(name='body'),
}

async function getScenePreviewResource(request: GetScenePreviewResourceRequest): GetScenePreviewResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenePreviewResource', 'POST', '/', 'json', false, 'json', request);
}

model GetSingleConnDataRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', minimum=1, position='Query'),
}

model GetSingleConnDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  list?: [ 
    {
      id?: string(name='Id', description='ID'),
      mapId?: string(name='MapId', description='关联ID'),
      type?: string(name='Type', description='outer:外关联 inner：内关联 stair：楼梯关联'),
    }
  ](name='List', description='关联信息'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  version?: string(name='Version', description='版本'),
}

model GetSingleConnDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetSingleConnDataResponseBody(name='body'),
}

async function getSingleConnData(request: GetSingleConnDataRequest): GetSingleConnDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSingleConnData', 'POST', '/', 'json', false, 'json', request);
}

model GetSourcePackStatusRequest {
  taskId: string(name='TaskId', description='任务ID', position='Query'),
}

model GetSourcePackStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    progress?: long(name='Progress', description='任务进度'),
    status?: string(name='Status', description='任务状态'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
  url?: string(name='Url', description='压缩包的地址'),
}

model GetSourcePackStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetSourcePackStatusResponseBody(name='body'),
}

async function getSourcePackStatus(request: GetSourcePackStatusRequest): GetSourcePackStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSourcePackStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSubSceneTaskStatusRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model GetSubSceneTaskStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  list?: [ 
    {
      errorCode?: string(name='ErrorCode', description='任务失败错误码'),
      errorMsg?: string(name='ErrorMsg', description='任务失败错误信息'),
      id?: string(name='Id', description='任务ID'),
      sceneId?: string(name='SceneId', description='场景ID'),
      status?: string(name='Status', description='未开始  init 处理中   processing   失败     failure  完成     succeed  取消     canceled'),
      subSceneId?: string(name='SubSceneId', description='子场景ID'),
      type?: string(name='Type', description='墙线预测: wall_line   切图: cut_image 重建: build  直角优化：right_angle_optimization 其他：other'),
    }
  ](name='List', description='任务信息'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model GetSubSceneTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubSceneTaskStatusResponseBody(name='body'),
}

async function getSubSceneTaskStatus(request: GetSubSceneTaskStatusRequest): GetSubSceneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubSceneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskStatusRequest {
  taskId: string(name='TaskId', description='任务ID', position='Query'),
}

model GetTaskStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  errorCode?: string(name='ErrorCode', description='任务执行失败错误码'),
  errorMsg?: string(name='ErrorMsg', description='任务执行失败错误消息'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  status?: string(name='Status', description='未开始 :init 处理中 : processing    失败 :failure   完成 :succeed  取消 :canceled'),
  success?: boolean(name='Success', description='是否请求成功'),
  type?: string(name='Type', description='墙线预测: wall_line 切图: cut_image   重建: build  直角优化：right_angle_optimization  其他：other'),
}

model GetTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetWindowConfigRequest {
  previewToken?: string(name='PreviewToken', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetWindowConfigResponseBody = {
  data?: map[string]any(name='Data'),
  errMessage?: string(name='ErrMessage'),
  objectString?: string(name='ObjectString'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetWindowConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetWindowConfigResponseBody(name='body'),
}

async function getWindowConfig(request: GetWindowConfigRequest): GetWindowConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWindowConfig', 'POST', '/', 'json', false, 'json', request);
}

model LabelBuildRequest {
  mode?: string(name='Mode', description='重建模式：MANUAL：手动（云端），默认，SEMI_AUTOMATIC：半自动（移动端）', position='Query'),
  modelStyle?: string(name='ModelStyle', description='模型效果 PATCH：切片模型（默认） DEPTH：深度模型 VIRTUAL：虚拟模型 MOBILE：移动重建模型', position='Query'),
  optimizeWallWidth?: string(name='OptimizeWallWidth', description='墙宽优化，OFF:关闭（默认） NORMAL：标准 ENHANCED：加强', position='Query'),
  planStyle?: string(name='PlanStyle', description='户型图，DEFAULT（默认），STANDARD（标准）', position='Query'),
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
  wallHeight?: long(name='WallHeight', description='墙高，默认0不设置，范围200-1000. 单位cm', position='Query'),
}

model LabelBuildResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='重建任务ID'),
}

model LabelBuildResponse = {
  headers: map[string]string(name='headers'),
  body: LabelBuildResponseBody(name='body'),
}

async function labelBuild(request: LabelBuildRequest): LabelBuildResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LabelBuild', 'POST', '/', 'json', false, 'json', request);
}

model LinkImageRequest {
  cameraHeight?: int32(name='CameraHeight', description='相机高度 单位 cm', position='Query'),
  fileName: string(name='FileName', description='图片或者视频名称xxx.jpg', position='Query'),
  platform?: string(name='Platform', description='平台标识，默认PC', position='Query'),
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model LinkImageResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  resourceId?: string(name='ResourceId', description='图片/视频ID'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model LinkImageResponse = {
  headers: map[string]string(name='headers'),
  body: LinkImageResponseBody(name='body'),
}

async function linkImage(request: LinkImageRequest): LinkImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LinkImage', 'POST', '/', 'json', false, 'json', request);
}

model ListProjectRequest {
  name?: string(name='Name', description='项目名称（使用name%搜索）', position='Query'),
  pageNum: long(name='PageNum', description='页码', minimum=1, position='Query'),
  pageSize: long(name='PageSize', description='页长', minimum=1, maximum=1000, position='Query'),
}

model ListProjectResponseBody = {
  code?: long(name='Code', description='返回码'),
  count?: long(name='Count', description='count'),
  currentPage?: long(name='CurrentPage', description='当前页'),
  hasNext?: boolean(name='HasNext', description='是否有下一页'),
  list?: [ 
    {
      businessId?: long(name='BusinessId', description='业务ID'),
      businessName?: string(name='BusinessName', description='业务名称'),
      createTime?: long(name='CreateTime', description='创建时间'),
      id?: string(name='Id', description='项目ID'),
      modifiedTime?: long(name='ModifiedTime', description='最后修改时间'),
      name?: string(name='Name', description='项目名称'),
      token?: string(name='Token', description='Token'),
    }
  ](name='List', description='项目数据'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  totalPage?: long(name='TotalPage', description='总页数'),
}

model ListProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectResponseBody(name='body'),
}

async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProject', 'POST', '/', 'json', false, 'json', request);
}

model ListSceneRequest {
  name?: string(name='Name', description='主场景名称', position='Query'),
  pageNum: long(name='PageNum', description='当前页', position='Query'),
  pageSize: long(name='PageSize', description='页长', position='Query'),
  projectId: string(name='ProjectId', description='所有项目Id', position='Query'),
}

model ListSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  count?: long(name='Count', description='数据总数'),
  currentPage?: long(name='CurrentPage', description='当前页'),
  hasNext?: boolean(name='HasNext', description='是否有下一页'),
  list?: [ 
    {
      coverUrl?: string(name='CoverUrl', description='封面地址'),
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      id?: string(name='Id', description='主场景Id'),
      name?: string(name='Name', description='场景名称'),
      previewToken?: string(name='PreviewToken', description='预览Token'),
      published?: boolean(name='Published', description='是否已发布 true：已发布：false：未发布'),
      sourceNum?: long(name='SourceNum', description='资源数'),
      status?: string(name='Status', description='场景状态，init：初始化，published：已发布，publishing：发布中，copying：复制中，making：制作中，publishable：构建成功，makeFailed：制作失败'),
      statusName?: string(name='StatusName', description='状态名称'),
      subSceneNum?: long(name='SubSceneNum', description='子场景数'),
      type?: string(name='Type', description='场景类型 3D模型：MODEL_3D  全景图片：PIC  全景视频：VIDEO'),
    }
  ](name='List', description='主场景数据'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  totalPage?: long(name='TotalPage', description='总页数'),
}

model ListSceneResponse = {
  headers: map[string]string(name='headers'),
  body: ListSceneResponseBody(name='body'),
}

async function listScene(request: ListSceneRequest): ListSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScene', 'POST', '/', 'json', false, 'json', request);
}

model ListSubSceneRequest {
  pageNum: long(name='PageNum', description='页码', minimum=1, position='Query'),
  pageSize: long(name='PageSize', description='页长', minimum=1, position='Query'),
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
  showLayoutData?: boolean(name='ShowLayoutData', position='Query'),
  sortField?: string(name='SortField', description='排序字段，默认：NAME（名称），SEQUENCE（自定义排序）', position='Query'),
}

model ListSubSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  count?: long(name='Count', description='数据总条数'),
  currentPage?: long(name='CurrentPage', description='当前页'),
  hasNext?: boolean(name='HasNext', description='是否有下一页'),
  list?: [ 
    {
      baseImageUrl?: string(name='BaseImageUrl', description='2k基准图路径'),
      coverUrl?: string(name='CoverUrl', description='图片路径/视频封面路径'),
      cubemapPath?: string(name='CubemapPath', description='切图的路径'),
      deleted?: boolean(name='Deleted', description='是否删除'),
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      id?: string(name='Id', description='子场景ID'),
      layoutData?: string(name='LayoutData', description='标注数据'),
      name?: string(name='Name', description='子场景名称'),
      originUrl?: string(name='OriginUrl', description='原图地址'),
      resourceId?: string(name='ResourceId', description='图片ID/视频ID'),
      resourceName?: string(name='ResourceName', description='资源名称'),
      status?: long(name='Status', description='子场景状态 1.未重建，      * 2.中间模型重建中，      * 3.中间模型重建完成，      * 4.待重建，      * 5.服务商重建中，      * 6.服务商重建完成，      * 7.已发布      * 8.发布中'),
      type?: string(name='Type', description='上传资源类型'),
      url?: string(name='Url', description='图片路径/视频路径'),
    }
  ](name='List', description='子场景列表集'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  totalPage?: long(name='TotalPage', description='总页数'),
}

model ListSubSceneResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubSceneResponseBody(name='body'),
}

async function listSubScene(request: ListSubSceneRequest): ListSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubScene', 'POST', '/', 'json', false, 'json', request);
}

model OptimizeRightAngleRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model OptimizeRightAngleResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model OptimizeRightAngleResponse = {
  headers: map[string]string(name='headers'),
  body: OptimizeRightAngleResponseBody(name='body'),
}

async function optimizeRightAngle(request: OptimizeRightAngleRequest): OptimizeRightAngleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OptimizeRightAngle', 'POST', '/', 'json', false, 'json', request);
}

model PackSceneRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
  type: string(name='Type', description='操作类型：download（下载），sync（同步）', position='Query'),
}

model PackSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    taskId?: string(name='TaskId', description='任务ID'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model PackSceneResponse = {
  headers: map[string]string(name='headers'),
  body: PackSceneResponseBody(name='body'),
}

async function packScene(request: PackSceneRequest): PackSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PackScene', 'POST', '/', 'json', false, 'json', request);
}

model PackSourceRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model PackSourceResponseBody = {
  code?: long(name='Code', description='返回码'),
  data?: {
    taskId?: string(name='TaskId', description='任务ID'),
  }(name='Data'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model PackSourceResponse = {
  headers: map[string]string(name='headers'),
  body: PackSourceResponseBody(name='body'),
}

async function packSource(request: PackSourceRequest): PackSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PackSource', 'POST', '/', 'json', false, 'json', request);
}

model PredImageRequest {
  correctVertical: boolean(name='CorrectVertical', description='是否垂直矫正', position='Query'),
  countDetectDoor?: long(name='CountDetectDoor', description='门数量(DetectDoor为false时，可为0)', position='Query'),
  detectDoor: boolean(name='DetectDoor', description='是否门预测', position='Query'),
  subSceneId: string(name='SubSceneId', description='子场景ID', minimum=1, position='Query'),
}

model PredImageResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model PredImageResponse = {
  headers: map[string]string(name='headers'),
  body: PredImageResponseBody(name='body'),
}

async function predImage(request: PredImageRequest): PredImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PredImage', 'POST', '/', 'json', false, 'json', request);
}

model PredictionWallLineRequest {
  cameraHeight?: long(name='CameraHeight', description='相机高度 单位 cm', position='Query'),
  url: string(name='Url', description='图片地址', position='Query'),
}

model PredictionWallLineResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  subSceneId?: string(name='SubSceneId', description='子场景ID'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model PredictionWallLineResponse = {
  headers: map[string]string(name='headers'),
  body: PredictionWallLineResponseBody(name='body'),
}

async function predictionWallLine(request: PredictionWallLineRequest): PredictionWallLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PredictionWallLine', 'POST', '/', 'json', false, 'json', request);
}

model PublishHotspotRequest {
  paramTag?: string(name='ParamTag', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subSceneUuid?: string(name='SubSceneUuid', position='Query'),
}

model PublishHotspotResponseBody = {
  data?: map[string]any(name='Data'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishHotspotResponse = {
  headers: map[string]string(name='headers'),
  body: PublishHotspotResponseBody(name='body'),
}

async function publishHotspot(request: PublishHotspotRequest): PublishHotspotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishHotspot', 'POST', '/', 'json', false, 'json', request);
}

model PublishHotspotConfigRequest {
  sceneId: string(name='SceneId', description='场景Id', position='Query'),
}

model PublishHotspotConfigResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model PublishHotspotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PublishHotspotConfigResponseBody(name='body'),
}

async function publishHotspotConfig(request: PublishHotspotConfigRequest): PublishHotspotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishHotspotConfig', 'POST', '/', 'json', false, 'json', request);
}

model PublishSceneRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model PublishSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  previewUrl?: string(name='PreviewUrl', description='预览链接'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model PublishSceneResponse = {
  headers: map[string]string(name='headers'),
  body: PublishSceneResponseBody(name='body'),
}

async function publishScene(request: PublishSceneRequest): PublishSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishScene', 'POST', '/', 'json', false, 'json', request);
}

model PublishStatusRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model PublishStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  status?: string(name='Status', description='任务运行状态'),
  success?: boolean(name='Success', description='是否请求成功'),
  syncStatus?: string(name='SyncStatus', description='文件同步状态'),
}

model PublishStatusResponse = {
  headers: map[string]string(name='headers'),
  body: PublishStatusResponseBody(name='body'),
}

async function publishStatus(request: PublishStatusRequest): PublishStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishStatus', 'POST', '/', 'json', false, 'json', request);
}

model RecoveryOriginImageRequest {
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model RecoveryOriginImageResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model RecoveryOriginImageResponse = {
  headers: map[string]string(name='headers'),
  body: RecoveryOriginImageResponseBody(name='body'),
}

async function recoveryOriginImage(request: RecoveryOriginImageRequest): RecoveryOriginImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoveryOriginImage', 'POST', '/', 'json', false, 'json', request);
}

model RectVerticalRequest {
  countDetectDoor?: int32(name='CountDetectDoor', description='需要预测的门的数量', position='Query'),
  detectDoor?: boolean(name='DetectDoor', description='是否开启门预测', position='Query'),
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
  verticalRect: string(name='VerticalRect', description='矫正数据', position='Query'),
}

model RectVerticalResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='错误消息'),
}

model RectVerticalResponse = {
  headers: map[string]string(name='headers'),
  body: RectVerticalResponseBody(name='body'),
}

async function rectVertical(request: RectVerticalRequest): RectVerticalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RectVertical', 'POST', '/', 'json', false, 'json', request);
}

model RectifyImageRequest {
  cameraHeight?: long(name='CameraHeight', description='相机高度 单位 cm', position='Query'),
  url: string(name='Url', description='图片地址', position='Query'),
}

model RectifyImageResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  subSceneId?: string(name='SubSceneId', description='子场景ID'),
  success?: boolean(name='Success', description='是否请求成功'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model RectifyImageResponse = {
  headers: map[string]string(name='headers'),
  body: RectifyImageResponseBody(name='body'),
}

async function rectifyImage(request: RectifyImageRequest): RectifyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RectifyImage', 'POST', '/', 'json', false, 'json', request);
}

model RollbackSubSceneRequest {
  id: string(name='Id', description='子场景ID', position='Query'),
}

model RollbackSubSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model RollbackSubSceneResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackSubSceneResponseBody(name='body'),
}

async function rollbackSubScene(request: RollbackSubSceneRequest): RollbackSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackSubScene', 'POST', '/', 'json', false, 'json', request);
}

model SaveHotspotConfigRequest {
  paramTag?: string(name='ParamTag', position='Query'),
  previewToken?: string(name='PreviewToken', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model SaveHotspotConfigResponseBody = {
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveHotspotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveHotspotConfigResponseBody(name='body'),
}

async function saveHotspotConfig(request: SaveHotspotConfigRequest): SaveHotspotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveHotspotConfig', 'POST', '/', 'json', false, 'json', request);
}

model SaveHotspotTagRequest {
  paramTag?: string(name='ParamTag', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subSceneUuid?: string(name='SubSceneUuid', position='Query'),
}

model SaveHotspotTagResponseBody = {
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveHotspotTagResponse = {
  headers: map[string]string(name='headers'),
  body: SaveHotspotTagResponseBody(name='body'),
}

async function saveHotspotTag(request: SaveHotspotTagRequest): SaveHotspotTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveHotspotTag', 'POST', '/', 'json', false, 'json', request);
}

model SaveHotspotTagListRequest {
  hotspotListJson: string(name='HotspotListJson', description='热点数据，json字符串数组', position='Query'),
  sceneId: string(name='SceneId', description='场景Id', position='Query'),
}

model SaveHotspotTagListResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model SaveHotspotTagListResponse = {
  headers: map[string]string(name='headers'),
  body: SaveHotspotTagListResponseBody(name='body'),
}

async function saveHotspotTagList(request: SaveHotspotTagListRequest): SaveHotspotTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveHotspotTagList', 'POST', '/', 'json', false, 'json', request);
}

model SaveModelConfigRequest {
  data: string(name='Data', description='模型配置，json字符串', position='Query'),
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model SaveModelConfigResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model SaveModelConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveModelConfigResponseBody(name='body'),
}

async function saveModelConfig(request: SaveModelConfigRequest): SaveModelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveModelConfig', 'POST', '/', 'json', false, 'json', request);
}

model ScenePublishRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model ScenePublishResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  previewUrl?: string(name='PreviewUrl', description='预览链接'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model ScenePublishResponse = {
  headers: map[string]string(name='headers'),
  body: ScenePublishResponseBody(name='body'),
}

async function scenePublish(request: ScenePublishRequest): ScenePublishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScenePublish', 'POST', '/', 'json', false, 'json', request);
}

model TempPreviewRequest {
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model TempPreviewResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  previewUrl?: string(name='PreviewUrl', description='预览链接'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  sceneId?: string(name='SceneId', description='场景ID'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model TempPreviewResponse = {
  headers: map[string]string(name='headers'),
  body: TempPreviewResponseBody(name='body'),
}

async function tempPreview(request: TempPreviewRequest): TempPreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempPreview', 'POST', '/', 'json', false, 'json', request);
}

model TempPreviewStatusRequest {
  sceneId: string(name='SceneId', description='任务ID', position='Query'),
}

model TempPreviewStatusResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  status?: string(name='Status', description='状态标识'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model TempPreviewStatusResponse = {
  headers: map[string]string(name='headers'),
  body: TempPreviewStatusResponseBody(name='body'),
}

async function tempPreviewStatus(request: TempPreviewStatusRequest): TempPreviewStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempPreviewStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConnDataRequest {
  connData: string(name='ConnData', description='关联数据', position='Query'),
  sceneId: string(name='SceneId', description='场景ID', position='Query'),
}

model UpdateConnDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model UpdateConnDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConnDataResponseBody(name='body'),
}

async function updateConnData(request: UpdateConnDataRequest): UpdateConnDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConnData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLayoutDataRequest {
  layoutData: string(name='LayoutData', description='标注数据', position='Query'),
  subSceneId: string(name='SubSceneId', description='子场景ID', position='Query'),
}

model UpdateLayoutDataResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model UpdateLayoutDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLayoutDataResponseBody(name='body'),
}

async function updateLayoutData(request: UpdateLayoutDataRequest): UpdateLayoutDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLayoutData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  businessId?: string(name='BusinessId', description='业务Id', position='Query'),
  id: string(name='Id', description='项目id', position='Query'),
  name?: string(name='Name', description='项目名称', position='Query'),
}

model UpdateProjectResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProject', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSceneRequest {
  id: string(name='Id', description='场景Id', position='Query'),
  name: string(name='Name', description='场景名称', position='Query'),
}

model UpdateSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model UpdateSceneResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSceneResponseBody(name='body'),
}

async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScene', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubSceneRequest {
  id: string(name='Id', description='子场景ID', position='Query'),
  name?: string(name='Name', description='子场景名称', position='Query'),
  viewPoint?: [ double ](name='ViewPoint', description='视角坐标，目前支持3元坐标，4元坐标，例如：[0.94005,0.13397,-0.3136,0.782992]', shrink='json', position='Query'),
}

model UpdateSubSceneResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model UpdateSubSceneResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubSceneResponseBody(name='body'),
}

async function updateSubScene(request: UpdateSubSceneRequest): UpdateSubSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubScene', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubSceneSeqRequest {
  sceneId: string(name='SceneId', description='子场景ID', position='Query'),
  sortSubSceneIds: [ string ](name='SortSubSceneIds', shrink='json', position='Query'),
}

model UpdateSubSceneSeqResponseBody = {
  code?: long(name='Code', description='返回码'),
  message?: string(name='Message', description='错误消息'),
  requestId?: string(name='RequestId', description='请求ID，与入参requestId对应'),
  success?: boolean(name='Success', description='是否请求成功'),
}

model UpdateSubSceneSeqResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubSceneSeqResponseBody(name='body'),
}

async function updateSubSceneSeq(request: UpdateSubSceneSeqRequest): UpdateSubSceneSeqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubSceneSeq', 'POST', '/', 'json', false, 'json', request);
}

