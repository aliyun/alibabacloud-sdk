/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'resellertrade.aliyuncs.com',
    ap-northeast-2-pop = 'resellertrade.aliyuncs.com',
    ap-south-1 = 'resellertrade.aliyuncs.com',
    ap-southeast-1 = 'resellertrade.aliyuncs.com',
    ap-southeast-2 = 'resellertrade.aliyuncs.com',
    ap-southeast-3 = 'resellertrade.aliyuncs.com',
    ap-southeast-5 = 'resellertrade.aliyuncs.com',
    cn-beijing = 'resellertrade.aliyuncs.com',
    cn-beijing-finance-1 = 'resellertrade.aliyuncs.com',
    cn-beijing-finance-pop = 'resellertrade.aliyuncs.com',
    cn-beijing-gov-1 = 'resellertrade.aliyuncs.com',
    cn-beijing-nu16-b01 = 'resellertrade.aliyuncs.com',
    cn-chengdu = 'resellertrade.aliyuncs.com',
    cn-edge-1 = 'resellertrade.aliyuncs.com',
    cn-fujian = 'resellertrade.aliyuncs.com',
    cn-haidian-cm12-c01 = 'resellertrade.aliyuncs.com',
    cn-hangzhou = 'resellertrade.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'resellertrade.aliyuncs.com',
    cn-hangzhou-finance = 'resellertrade.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'resellertrade.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'resellertrade.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'resellertrade.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'resellertrade.aliyuncs.com',
    cn-hangzhou-test-306 = 'resellertrade.aliyuncs.com',
    cn-hongkong = 'resellertrade.aliyuncs.com',
    cn-hongkong-finance-pop = 'resellertrade.aliyuncs.com',
    cn-huhehaote = 'resellertrade.aliyuncs.com',
    cn-north-2-gov-1 = 'resellertrade.aliyuncs.com',
    cn-qingdao = 'resellertrade.aliyuncs.com',
    cn-qingdao-nebula = 'resellertrade.aliyuncs.com',
    cn-shanghai = 'resellertrade.aliyuncs.com',
    cn-shanghai-et15-b01 = 'resellertrade.aliyuncs.com',
    cn-shanghai-et2-b01 = 'resellertrade.aliyuncs.com',
    cn-shanghai-finance-1 = 'resellertrade.aliyuncs.com',
    cn-shanghai-inner = 'resellertrade.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'resellertrade.aliyuncs.com',
    cn-shenzhen = 'resellertrade.aliyuncs.com',
    cn-shenzhen-finance-1 = 'resellertrade.aliyuncs.com',
    cn-shenzhen-inner = 'resellertrade.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'resellertrade.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'resellertrade.aliyuncs.com',
    cn-wuhan = 'resellertrade.aliyuncs.com',
    cn-yushanfang = 'resellertrade.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'resellertrade.aliyuncs.com',
    cn-zhangjiakou = 'resellertrade.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'resellertrade.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'resellertrade.aliyuncs.com',
    eu-central-1 = 'resellertrade.aliyuncs.com',
    eu-west-1 = 'resellertrade.aliyuncs.com',
    eu-west-1-oxs = 'resellertrade.aliyuncs.com',
    me-east-1 = 'resellertrade.aliyuncs.com',
    rus-west-1-pop = 'resellertrade.aliyuncs.com',
    us-east-1 = 'resellertrade.aliyuncs.com',
    us-west-1 = 'resellertrade.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('resellertrade', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetCustomerListRequest {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model GetCustomerListResponseBody = {
  code?: string(name='Code'),
  data?: {
    totalSize?: int32(name='TotalSize'),
    uidList?: [ string ](name='UidList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerListResponseBody(name='body'),
}

async function getCustomerListWithOptions(request: GetCustomerListRequest, runtime: Util.RuntimeOptions): GetCustomerListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomerList',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCustomerList(request: GetCustomerListRequest): GetCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerListWithOptions(request, runtime);
}

model GetRelationRequest {
  relationTime?: long(name='RelationTime'),
  uid?: long(name='Uid'),
}

model GetRelationResponseBody = {
  class?: string(name='Class'),
  code?: string(name='Code'),
  data?: {
    canLoginOfficial?: boolean(name='CanLoginOfficial', description='是否可登陆官网
true：可登录
false：不可登陆'),
    class?: string(name='Class'),
    endTime?: long(name='EndTime'),
    resellerProductModeDO?: {
      class?: string(name='Class'),
      isService?: long(name='IsService'),
      productCode?: string(name='ProductCode'),
      productName?: string(name='ProductName'),
    }(name='ResellerProductModeDO'),
    resellerProductRuleDO?: {
      class?: string(name='Class'),
      commodityRoute?: boolean(name='CommodityRoute'),
      multiOrder?: boolean(name='MultiOrder'),
      payMode?: string(name='PayMode'),
    }(name='ResellerProductRuleDO'),
    resellerUid?: long(name='ResellerUid'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
    topReseller?: boolean(name='TopReseller'),
    uid?: long(name='Uid'),
    userType?: string(name='UserType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRelationResponse = {
  headers: map[string]string(name='headers'),
  body: GetRelationResponseBody(name='body'),
}

async function getRelationWithOptions(request: GetRelationRequest, runtime: Util.RuntimeOptions): GetRelationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRelation',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRelation(request: GetRelationRequest): GetRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRelationWithOptions(request, runtime);
}

model GetResellerPayOrderRequest {
  orderId?: string(name='OrderId'),
  uid?: long(name='Uid'),
}

model GetResellerPayOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    buyerId?: string(name='BuyerId'),
    orderId?: string(name='OrderId'),
    orderStatus?: string(name='OrderStatus'),
    payAmount?: string(name='PayAmount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetResellerPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetResellerPayOrderResponseBody(name='body'),
}

async function getResellerPayOrderWithOptions(request: GetResellerPayOrderRequest, runtime: Util.RuntimeOptions): GetResellerPayOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResellerPayOrder',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResellerPayOrder(request: GetResellerPayOrderRequest): GetResellerPayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResellerPayOrderWithOptions(request, runtime);
}

model LabelPartnerUserRequest {
  userPK?: long(name='UserPK'),
  userTag?: string(name='UserTag'),
}

model LabelPartnerUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    userPK?: long(name='UserPK'),
    userTag?: string(name='UserTag'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LabelPartnerUserResponse = {
  headers: map[string]string(name='headers'),
  body: LabelPartnerUserResponseBody(name='body'),
}

async function labelPartnerUserWithOptions(request: LabelPartnerUserRequest, runtime: Util.RuntimeOptions): LabelPartnerUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.userPK)) {
    body['UserPK'] = request.userPK;
  }
  if (!Util.isUnset(request.userTag)) {
    body['UserTag'] = request.userTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LabelPartnerUser',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function labelPartnerUser(request: LabelPartnerUserRequest): LabelPartnerUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return labelPartnerUserWithOptions(request, runtime);
}

model MigrateResourceRequest {
  actionCode?: string(name='ActionCode'),
  content?: string(name='Content'),
}

model MigrateResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    procEnvir?: string(name='ProcEnvir'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MigrateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateResourceResponseBody(name='body'),
}

async function migrateResourceWithOptions(request: MigrateResourceRequest, runtime: Util.RuntimeOptions): MigrateResourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.actionCode)) {
    body['ActionCode'] = request.actionCode;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MigrateResource',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function migrateResource(request: MigrateResourceRequest): MigrateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateResourceWithOptions(request, runtime);
}

model PayResultCallbackRequest {
  orderId?: string(name='OrderId'),
  payStatus?: string(name='PayStatus'),
  payTime?: string(name='PayTime'),
  uid?: long(name='Uid'),
}

model PayResultCallbackResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PayResultCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: PayResultCallbackResponseBody(name='body'),
}

async function payResultCallbackWithOptions(request: PayResultCallbackRequest, runtime: Util.RuntimeOptions): PayResultCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.payStatus)) {
    query['PayStatus'] = request.payStatus;
  }
  if (!Util.isUnset(request.payTime)) {
    query['PayTime'] = request.payTime;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PayResultCallback',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function payResultCallback(request: PayResultCallbackRequest): PayResultCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return payResultCallbackWithOptions(request, runtime);
}

model TransferResourceRequest {
  actionCode?: string(name='ActionCode'),
  content?: string(name='Content'),
}

model TransferResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    procEnv?: string(name='ProcEnv'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferResourceResponse = {
  headers: map[string]string(name='headers'),
  body: TransferResourceResponseBody(name='body'),
}

async function transferResourceWithOptions(request: TransferResourceRequest, runtime: Util.RuntimeOptions): TransferResourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.actionCode)) {
    body['ActionCode'] = request.actionCode;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransferResource',
    version = '2019-12-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferResource(request: TransferResourceRequest): TransferResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferResourceWithOptions(request, runtime);
}

