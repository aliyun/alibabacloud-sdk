/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResellerTrade';
  @version = '2019-12-27';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'resellertrade.aliyuncs.com',
    'ap-northeast-2-pop' = 'resellertrade.aliyuncs.com',
    'ap-south-1' = 'resellertrade.aliyuncs.com',
    'ap-southeast-1' = 'resellertrade.aliyuncs.com',
    'ap-southeast-2' = 'resellertrade.aliyuncs.com',
    'ap-southeast-3' = 'resellertrade.aliyuncs.com',
    'ap-southeast-5' = 'resellertrade.aliyuncs.com',
    'cn-beijing' = 'resellertrade.aliyuncs.com',
    'cn-beijing-finance-1' = 'resellertrade.aliyuncs.com',
    'cn-beijing-finance-pop' = 'resellertrade.aliyuncs.com',
    'cn-beijing-gov-1' = 'resellertrade.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'resellertrade.aliyuncs.com',
    'cn-chengdu' = 'resellertrade.aliyuncs.com',
    'cn-edge-1' = 'resellertrade.aliyuncs.com',
    'cn-fujian' = 'resellertrade.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-finance' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'resellertrade.aliyuncs.com',
    'cn-hangzhou-test-306' = 'resellertrade.aliyuncs.com',
    'cn-hongkong' = 'resellertrade.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'resellertrade.aliyuncs.com',
    'cn-huhehaote' = 'resellertrade.aliyuncs.com',
    'cn-north-2-gov-1' = 'resellertrade.aliyuncs.com',
    'cn-qingdao' = 'resellertrade.aliyuncs.com',
    'cn-qingdao-nebula' = 'resellertrade.aliyuncs.com',
    'cn-shanghai' = 'resellertrade.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'resellertrade.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'resellertrade.aliyuncs.com',
    'cn-shanghai-finance-1' = 'resellertrade.aliyuncs.com',
    'cn-shanghai-inner' = 'resellertrade.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'resellertrade.aliyuncs.com',
    'cn-shenzhen' = 'resellertrade.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'resellertrade.aliyuncs.com',
    'cn-shenzhen-inner' = 'resellertrade.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'resellertrade.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'resellertrade.aliyuncs.com',
    'cn-wuhan' = 'resellertrade.aliyuncs.com',
    'cn-yushanfang' = 'resellertrade.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'resellertrade.aliyuncs.com',
    'cn-zhangjiakou' = 'resellertrade.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'resellertrade.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'resellertrade.aliyuncs.com',
    'eu-central-1' = 'resellertrade.aliyuncs.com',
    'eu-west-1' = 'resellertrade.aliyuncs.com',
    'eu-west-1-oxs' = 'resellertrade.aliyuncs.com',
    'me-east-1' = 'resellertrade.aliyuncs.com',
    'rus-west-1-pop' = 'resellertrade.aliyuncs.com',
    'us-east-1' = 'resellertrade.aliyuncs.com',
    'us-west-1' = 'resellertrade.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateCouponTemplateRequest {
  activitySite?: int32(name='ActivitySite', example='0', position='Body'),
  bid?: long(name='Bid', example='26888', position='Body'),
  certainMoney?: double(name='CertainMoney', example='200', position='Body'),
  clientType?: string(name='ClientType', example='UNIVERSAL', position='Body'),
  commodityType?: string(name='CommodityType', example='FULLSITE_SELF', position='Body'),
  controlType?: string(name='ControlType', example='AMOUNT', position='Body'),
  couponAmount?: double(name='CouponAmount', example='100', position='Body'),
  couponEndTime?: string(name='CouponEndTime', example='1577851200', position='Body'),
  couponFixedType?: string(name='CouponFixedType', example='FIXED', position='Body'),
  couponStartTime?: string(name='CouponStartTime', example='1577851200', position='Body'),
  couponType?: string(name='CouponType', example='VOUCHER', position='Body'),
  currency?: {
    currencyCode?: string(name='CurrencyCode', example='USD'),
    defaultFractionDigits?: int32(name='DefaultFractionDigits'),
    numericCode?: int32(name='NumericCode'),
  }(name='Currency', position='Body'),
  description?: string(name='Description', position='Body'),
  discountRate?: double(name='DiscountRate', example='0.8', position='Body'),
  endTime?: string(name='EndTime', example='1577851200', position='Body'),
  extendsMap?: map[string]string(name='ExtendsMap', position='Body'),
  fromApp?: string(name='FromApp', example='test', position='Body'),
  itemCodeSet?: [ string ](name='ItemCodeSet', position='Body'),
  market?: string(name='Market', example='INTL', position='Body'),
  marketType?: long(name='MarketType', example='9', position='Body'),
  maxRelease?: double(name='MaxRelease', example='100', position='Body'),
  messageId?: string(name='MessageId', position='Body'),
  name?: string(name='Name', position='Body'),
  operator?: string(name='Operator', example='xxx', position='Body'),
  orderTypeSet?: [ string ](name='OrderTypeSet', position='Body'),
  perLimitNum?: int32(name='PerLimitNum', example='1', position='Body'),
  promotionId?: long(name='PromotionId', example='1231', position='Body'),
  reason?: string(name='Reason', position='Body'),
  relativeSecond?: int32(name='RelativeSecond', example='10', position='Body'),
  requestId?: string(name='RequestId', example='vsdvnjwegiq', position='Body'),
  selectionIdSet?: [ string ](name='SelectionIdSet', position='Body'),
  sellerId?: long(name='SellerId', example='123123563464', position='Body'),
  site?: string(name='Site', example='INTL', position='Body'),
  spId?: long(name='SpId', example='123123', position='Body'),
  startTime?: string(name='StartTime', example='1577851200', position='Body'),
  type?: string(name='Type', example='APPLY', position='Body'),
  universalType?: string(name='UniversalType', example='UNIVERSAL', position='Body'),
  upperLimit?: double(name='UpperLimit', example='100', position='Body'),
  usageCount?: int32(name='UsageCount', example='0', position='Body'),
  useScene?: string(name='UseScene', example='TEST', position='Body'),
  userPkAmount?: string(name='UserPkAmount', example='12341234,100', position='Body'),
  validityType?: string(name='ValidityType', example='RELATIVE', position='Body'),
}

model CreateCouponTemplateResponseBody = {
  code?: string(name='Code', example='succecc'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: long(name='Data', description='result data', example='123'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='123fjsj'),
  success?: boolean(name='Success', example='true'),
}

model CreateCouponTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCouponTemplateResponseBody(name='body'),
}

async function createCouponTemplate(request: CreateCouponTemplateRequest): CreateCouponTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCouponTemplate', 'POST', '/', 'json', true, 'form', request);
}

model DiscardCouponListRequest {
  couponList?: [ long ](name='CouponList', position='Body'),
}

model DiscardCouponListResponseBody = {
  code?: string(name='Code', example='true'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: boolean(name='Data', description='result data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='12gmgwhb'),
  success?: boolean(name='Success', example='true'),
}

model DiscardCouponListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DiscardCouponListResponseBody(name='body'),
}

async function discardCouponList(request: DiscardCouponListRequest): DiscardCouponListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiscardCouponList', 'POST', '/', 'json', true, 'form', request);
}

model GetCouponPageRequest {
  fromApp?: string(name='FromApp', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  sellerId?: long(name='SellerId', position='Query'),
  templateId?: long(name='TemplateId', position='Query'),
  uids?: [ long ](name='Uids', position='Query'),
}

model GetCouponPageResponseBody = {
  code?: string(name='Code'),
  contextMap?: map[string]any(name='ContextMap'),
  count?: int32(name='Count'),
  data?: [ 
    {
      amount?: double(name='Amount'),
      certainMoney?: double(name='CertainMoney'),
      couponId?: long(name='CouponId'),
      couponType?: string(name='CouponType'),
      currency?: {
        currencyCode?: string(name='CurrencyCode'),
      }(name='Currency'),
      description?: string(name='Description'),
      discountRate?: double(name='DiscountRate'),
      endTime?: string(name='EndTime'),
      frozenAmount?: double(name='FrozenAmount'),
      frozenCount?: int32(name='FrozenCount'),
      promotionId?: long(name='PromotionId'),
      sellerId?: long(name='SellerId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      templateId?: long(name='TemplateId'),
      universalType?: string(name='UniversalType'),
      upperLimit?: double(name='UpperLimit'),
      usageCount?: int32(name='UsageCount'),
      usedAmount?: double(name='UsedAmount'),
      usedCount?: int32(name='UsedCount'),
      userId?: long(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model GetCouponPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCouponPageResponseBody(name='body'),
}

async function getCouponPage(request: GetCouponPageRequest): GetCouponPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCouponPage', 'GET', '/', 'json', false, 'json', request);
}

model GetCustomerListRequest {
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model GetCustomerListResponseBody = {
  code?: string(name='Code'),
  data?: {
    totalSize?: int32(name='TotalSize'),
    uidList?: [ string ](name='UidList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCustomerListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomerListResponseBody(name='body'),
}

async function getCustomerList(request: GetCustomerListRequest): GetCustomerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerList', 'POST', '/', 'json', false, 'json', request);
}

model GetRelationRequest {
  relationTime?: long(name='RelationTime', minimum=0, maximum=9999956549000, position='Query'),
  uid?: long(name='Uid', minimum=0, maximum=9679594888987473, position='Query'),
}

model GetRelationResponseBody = {
  class?: string(name='Class'),
  code?: string(name='Code'),
  data?: {
    canLoginOfficial?: boolean(name='CanLoginOfficial'),
    class?: string(name='Class'),
    endTime?: long(name='EndTime'),
    resellerProductModeDO?: {
      class?: string(name='Class'),
      isService?: long(name='IsService'),
      productCode?: string(name='ProductCode'),
      productName?: string(name='ProductName'),
    }(name='ResellerProductModeDO'),
    resellerProductRuleDO?: {
      class?: string(name='Class'),
      commodityRoute?: boolean(name='CommodityRoute'),
      multiOrder?: boolean(name='MultiOrder'),
      payMode?: string(name='PayMode'),
    }(name='ResellerProductRuleDO'),
    resellerUid?: long(name='ResellerUid'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
    topReseller?: boolean(name='TopReseller'),
    uid?: long(name='Uid'),
    userType?: string(name='UserType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRelationResponseBody(name='body'),
}

async function getRelation(request: GetRelationRequest): GetRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRelation', 'GET', '/', 'json', false, 'json', request);
}

model GetResellerPayOrderRequest {
  orderId: string(name='OrderId', position='Query'),
  uid: long(name='Uid', position='Query'),
}

model GetResellerPayOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    buyerId?: string(name='BuyerId'),
    orderId?: string(name='OrderId'),
    orderStatus?: string(name='OrderStatus'),
    payAmount?: string(name='PayAmount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetResellerPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResellerPayOrderResponseBody(name='body'),
}

async function getResellerPayOrder(request: GetResellerPayOrderRequest): GetResellerPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResellerPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model LabelPartnerUserRequest {
  userPK: long(name='UserPK', position='Body'),
  userTag: string(name='UserTag', position='Body'),
}

model LabelPartnerUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    userPK?: long(name='UserPK'),
    userTag?: string(name='UserTag'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LabelPartnerUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LabelPartnerUserResponseBody(name='body'),
}

async function labelPartnerUser(request: LabelPartnerUserRequest): LabelPartnerUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LabelPartnerUser', 'POST', '/', 'json', true, 'form', request);
}

model MigrateResourceRequest {
  actionCode: string(name='ActionCode', position='Body'),
  content?: string(name='Content', position='Body'),
}

model MigrateResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    procEnvir?: string(name='ProcEnvir'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MigrateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MigrateResourceResponseBody(name='body'),
}

async function migrateResource(request: MigrateResourceRequest): MigrateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateResource', 'POST', '/', 'json', true, 'form', request);
}

model OfflineActivityRequest {
  activityList?: [ long ](name='ActivityList', position='Body'),
  bizId?: string(name='BizId', position='Body'),
  token?: string(name='Token', position='Body'),
}

model OfflineActivityResponseBody = {
  code?: string(name='Code'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: [ long ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OfflineActivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineActivityResponseBody(name='body'),
}

async function offlineActivity(request: OfflineActivityRequest): OfflineActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineActivity', 'POST', '/', 'json', true, 'form', request);
}

model PayResultCallbackRequest {
  orderId: string(name='OrderId', position='Query'),
  payStatus: string(name='PayStatus', position='Query'),
  payTime: string(name='PayTime', position='Query'),
  uid: long(name='Uid', position='Query'),
}

model PayResultCallbackResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PayResultCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PayResultCallbackResponseBody(name='body'),
}

async function payResultCallback(request: PayResultCallbackRequest): PayResultCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PayResultCallback', 'POST', '/', 'json', false, 'json', request);
}

model PublicActivityRequest {
  activityList?: [ long ](name='ActivityList', position='Body'),
  bizId?: string(name='BizId', position='Body'),
  snapType?: string(name='SnapType', position='Body'),
  token?: string(name='Token', position='Body'),
}

model PublicActivityResponseBody = {
  code?: string(name='Code'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: [ long ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublicActivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublicActivityResponseBody(name='body'),
}

async function publicActivity(request: PublicActivityRequest): PublicActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicActivity', 'POST', '/', 'json', true, 'form', request);
}

model QueryActivityRequest {
  activityId?: long(name='ActivityId', position='Body'),
  bizId: string(name='BizId', position='Body'),
  snapType?: string(name='SnapType', position='Body'),
}

model QueryActivityResponseBody = {
  code?: string(name='Code'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: {
    activityId?: long(name='ActivityId'),
    activityName?: string(name='ActivityName'),
    blackList?: [ long ](name='BlackList'),
    commodityCodeList?: [ string ](name='CommodityCodeList'),
    description?: string(name='Description'),
    endTime?: string(name='EndTime'),
    extMap?: map[string]string(name='ExtMap'),
    promotionDescription?: string(name='PromotionDescription'),
    promotionValue?: double(name='PromotionValue'),
    regionList?: [ string ](name='RegionList'),
    sellerIdList?: [ long ](name='SellerIdList'),
    startTime?: string(name='StartTime'),
    status?: string(name='Status'),
    testAccountList?: [ long ](name='TestAccountList'),
    whiteList?: [ long ](name='WhiteList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryActivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryActivityResponseBody(name='body'),
}

async function queryActivity(request: QueryActivityRequest): QueryActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryActivity', 'POST', '/', 'json', true, 'form', request);
}

model QueryEcoRelationRequest {
  relationTime?: string(name='RelationTime', position='Body'),
  uid?: long(name='Uid', position='Body'),
}

model QueryEcoRelationResponseBody = {
  code?: string(name='Code'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: {
    canLoginOfficial?: boolean(name='CanLoginOfficial'),
    endTime?: string(name='EndTime'),
    isTopReseller?: boolean(name='IsTopReseller'),
    resellerProductModeDO?: {
      isService?: int32(name='IsService'),
      productCode?: string(name='ProductCode'),
      productName?: string(name='ProductName'),
    }(name='ResellerProductModeDO'),
    resellerProductRuleDO?: {
      commodityRoute?: boolean(name='CommodityRoute'),
      multiOrder?: boolean(name='MultiOrder'),
      payMode?: string(name='PayMode'),
    }(name='ResellerProductRuleDO'),
    resellerUid?: long(name='ResellerUid'),
    startTime?: string(name='StartTime'),
    status?: string(name='Status'),
    uid?: long(name='Uid'),
    userType?: string(name='UserType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEcoRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEcoRelationResponseBody(name='body'),
}

async function queryEcoRelation(request: QueryEcoRelationRequest): QueryEcoRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEcoRelation', 'POST', '/', 'json', true, 'form', request);
}

model SaveActivityRequest {
  activityName: string(name='ActivityName', position='Body'),
  bizId: string(name='BizId', position='Body'),
  blackUidList?: [ long ](name='BlackUidList', position='Body'),
  description?: string(name='Description', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  extendMap?: map[string]any(name='ExtendMap', shrink='json', position='Body'),
  fusionPromotionParamList: [ 
    {
      commodityCodeList: [ string ](name='CommodityCodeList'),
      promotionValue: double(name='PromotionValue'),
      restrictedRegionList: [ string ](name='RestrictedRegionList'),
      moduleInfoParamList?: [ 
        {
          componentCode: string(name='componentCode'),
          itemCode: string(name='itemCode'),
          moduleId?: long(name='moduleId'),
          moduleKey: string(name='moduleKey'),
          moduleName: string(name='moduleName'),
          moduleValueList: [ string ](name='moduleValueList'),
          pricePlanId?: long(name='pricePlanId'),
        }
      ](name='moduleInfoParamList'),
    }
  ](name='FusionPromotionParamList', position='Body'),
  publishTag: string(name='PublishTag', position='Body'),
  startTime: string(name='StartTime', position='Body'),
  testAccountUidList?: [ long ](name='TestAccountUidList', position='Body'),
  token: string(name='Token', position='Body'),
  whiteUidList?: [ long ](name='WhiteUidList', position='Body'),
}

model SaveActivityResponseBody = {
  code?: string(name='Code'),
  contextMap?: map[string]any(name='ContextMap'),
  data?: [ long ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveActivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveActivityResponseBody(name='body'),
}

async function saveActivity(request: SaveActivityRequest): SaveActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveActivity', 'POST', '/', 'json', true, 'form', request);
}

model SendCouponRequest {
  bid?: long(name='Bid', example='26888', position='Body'),
  fromApp?: string(name='FromApp', example='xxx', position='Body'),
  operator?: string(name='Operator', example='xxx', position='Body'),
  requestId?: string(name='RequestId', example='vsdjomfjsb', position='Body'),
  sellerId?: long(name='SellerId', example='12348576133', position='Body'),
  templateId?: long(name='TemplateId', example='123', position='Body'),
  userAmountModelList?: [ 
    {
      amount?: double(name='Amount', example='100'),
      uid?: long(name='Uid', example='18284742893'),
      userId?: long(name='UserId'),
      youhuiId?: long(name='YouhuiId', example='39584'),
    }
  ](name='UserAmountModelList', position='Body'),
}

model SendCouponResponseBody = {
  code?: string(name='Code', example='true'),
  contextMap?: map[string]any(name='ContextMap'),
  count?: int32(name='Count', example='10'),
  data?: [ 
    {
      amount?: double(name='Amount', example='100'),
      uid?: long(name='Uid', example='12847473'),
      userId?: long(name='UserId', example='94847372'),
      youhuiId?: long(name='YouhuiId', example='19343'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='djdiwownch'),
  success?: boolean(name='Success', example='ture'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model SendCouponResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendCouponResponseBody(name='body'),
}

async function sendCoupon(request: SendCouponRequest): SendCouponResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCoupon', 'POST', '/', 'json', true, 'form', request);
}

model TransferResourceRequest {
  actionCode: string(name='ActionCode', position='Body'),
  content?: string(name='Content', position='Body'),
}

model TransferResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    procEnv?: string(name='ProcEnv'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferResourceResponseBody(name='body'),
}

async function transferResource(request: TransferResourceRequest): TransferResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferResource', 'POST', '/', 'json', true, 'form', request);
}

