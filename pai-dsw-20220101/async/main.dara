/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'pai-dsw';
  @version = '2022-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DemoCategory {
  categoryCode?: string(name='CategoryCode', description='目录码'),
  categoryName?: string(name='CategoryName', description='目录名'),
  order?: long(name='Order', description='序号'),
  subCategories?: [
    DemoCategory
  ](name='SubCategories', description='目录列表'),
}

model CreateInstanceRequest {
  accessibility?: string(name='Accessibility', description='工作空间内是否他人可见', position='Body'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='数据集Id'),
      mountPath?: string(name='MountPath', description='容器内挂载路径'),
    }
  ](name='Datasets', description='数据集集合', position='Body'),
  ecsSpec?: string(name='EcsSpec', description='实例对应的Ecs规格', position='Body'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', description='环境变量', position='Body'),
  imageId?: string(name='ImageId', description='镜像Id', position='Body'),
  imageUrl?: string(name='ImageUrl', description='镜像地址', position='Body'),
  instanceName?: string(name='InstanceName', description='实例名称', position='Body'),
  priority?: long(name='Priority', description='优先级，在分配资源给实例时，优先级越高的实例越优先', position='Body'),
  requestedResource?: {
    CPU?: string(name='CPU', description='cpu核数'),
    GPU?: string(name='GPU', description='gpu数量'),
    GPUType?: string(name='GPUType', description='gpu显卡类型'),
    memory?: string(name='Memory', description='memory大小'),
    sharedMemory?: string(name='SharedMemory', description='shared memory大小'),
  }(name='RequestedResource', description='资源配置，弹内或者轻量化时使用', position='Body'),
  resourceId?: string(name='ResourceId', description='资源Id,预付费时填写', position='Body'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId', description='Security Group Id'),
    vSwitchId?: string(name='VSwitchId', description='VSwitch Id'),
    vpcId?: string(name='VpcId', description='Vpc Id'),
  }(name='UserVpc', description='user vpc配置', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='工作空间Id', position='Body'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/api/v2/instances', 'json', false, 'json', request);
}

model CreateInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='定时关机任务对应实例的Id', position='Path'),
  dueTime?: string(name='DueTime', description='定时关机设定时间', position='Body'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', description='距离定时关机时间段', position='Body'),
}

model CreateInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceShutdownTimerResponseBody(name='body'),
}

async function createInstanceShutdownTimer(request: CreateInstanceShutdownTimerRequest): CreateInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceShutdownTimer', 'POST', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model CreateInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
  imageUrl?: string(name='ImageUrl', description='镜像地址', position='Body'),
  snapshotDescription?: string(name='SnapshotDescription', description='实例快照描述', position='Body'),
  snapshotName?: string(name='SnapshotName', description='实例快照名称', position='Body'),
}

model CreateInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshotId?: string(name='SnapshotId', description='实例快照Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceSnapshotResponseBody(name='body'),
}

async function createInstanceSnapshot(request: CreateInstanceSnapshotRequest): CreateInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceSnapshot', 'POST', '/api/v2/instances/{InstanceId}/snapshots', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model DeleteInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
}

model DeleteInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model DeleteInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceShutdownTimerResponseBody(name='body'),
}

async function deleteInstanceShutdownTimer(request: DeleteInstanceShutdownTimerRequest): DeleteInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceShutdownTimer', 'DELETE', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model DeleteInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
  snapshotId: string(name='SnapshotId', description='实例快照Id', position='Path'),
}

model DeleteInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshotId?: string(name='SnapshotId', description='实例快照Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model DeleteInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceSnapshotResponseBody(name='body'),
}

async function deleteInstanceSnapshot(request: DeleteInstanceSnapshotRequest): DeleteInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceSnapshot', 'DELETE', '/api/v2/instances/{InstanceId}/snapshots/{SnapshotId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
}

model GetInstanceResponseBody = {
  acceleratorType?: string(name='AcceleratorType', description='实例计算类型'),
  accessibility?: string(name='Accessibility', description='工作空间内是否他人可见'),
  accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', description='累计运行时间（ms）'),
  code?: string(name='Code', description='状态码'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='数据集Id'),
      mountPath?: string(name='MountPath', description='容器内挂载路径'),
    }
  ](name='Datasets', description='数据集集合'),
  ecsSpec?: string(name='EcsSpec', description='实例对应的Ecs规格'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', description='环境变量'),
  gmtCreateTime?: string(name='GmtCreateTime', description='实例创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='实例修改时间'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  imageId?: string(name='ImageId', description='镜像Id'),
  imageName?: string(name='ImageName', description='镜像名称'),
  imageUrl?: string(name='ImageUrl', description='镜像地址'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  instanceShutdownTimer?: {
    dueTime?: string(name='DueTime', description='设定关机时间'),
    gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
    gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
    instanceId?: string(name='InstanceId', description='实例Id'),
    remainingTimeInMs?: long(name='RemainingTimeInMs', description='剩余关机时间（ms）'),
  }(name='InstanceShutdownTimer', description='定时关机任务'),
  instanceUrl?: string(name='InstanceUrl', description='实例Url'),
  jupyterlabUrl?: string(name='JupyterlabUrl', description='Jupyterlab Url'),
  latestSnapshot?: {
    gmtCreateTime?: string(name='GmtCreateTime', description='快照创建时间'),
    gmtModifiedTime?: string(name='GmtModifiedTime', description='快照修改时间'),
    imageId?: string(name='ImageId', description='镜像Id'),
    imageName?: string(name='ImageName', description='镜像名称'),
    imageUrl?: string(name='ImageUrl', description='镜像Url'),
    repositoryUrl?: string(name='RepositoryUrl', description='镜像仓库Url'),
  }(name='LatestSnapshot', description='最新保存的用户镜像'),
  message?: string(name='Message', description='说明'),
  paymentType?: string(name='PaymentType', description='支付类型'),
  priority?: long(name='Priority', description='优先级，在分配资源给实例时，优先级越高的实例越优先'),
  reasonCode?: string(name='ReasonCode', description='实例错误代码'),
  reasonMessage?: string(name='ReasonMessage', description='实例错误原因'),
  requestId?: string(name='RequestId', description='请求Id'),
  requestedResource?: {
    CPU?: string(name='CPU', description='cpu核数'),
    GPU?: string(name='GPU', description='gpu数量'),
    GPUType?: string(name='GPUType', description='gpu显卡类型'),
    memory?: string(name='Memory', description='memory大小'),
    sharedMemory?: string(name='SharedMemory', description='shared memory大小'),
  }(name='RequestedResource', description='资源配置，弹内或者轻量化时使用'),
  resourceId?: string(name='ResourceId', description='资源Id,预付费时填写'),
  resourceName?: string(name='ResourceName'),
  status?: string(name='Status', description='实例状态'),
  success?: boolean(name='Success', description='成功标志'),
  terminalUrl?: string(name='TerminalUrl', description='终端url'),
  userId?: string(name='UserId', description='用户Id'),
  userName?: string(name='UserName', description='用户名称'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId', description='Security Group Id'),
    vSwitchId?: string(name='VSwitchId', description='VSwitch Id'),
    vpcId?: string(name='VpcId', description='Vpc Id'),
  }(name='UserVpc', description='user vpc配置'),
  webIDEUrl?: string(name='WebIDEUrl', description='Web IDE url'),
  workspaceId?: string(name='WorkspaceId', description='工作空间Id'),
  workspaceName?: string(name='WorkspaceName', description='工作空间名称'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model GetInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
}

model GetInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='状态码'),
  dueTime?: string(name='DueTime', description='设定关机时间'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', description='剩余关机时间（ms）'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model GetInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceShutdownTimerResponseBody(name='body'),
}

async function getInstanceShutdownTimer(request: GetInstanceShutdownTimerRequest): GetInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceShutdownTimer', 'GET', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model GetInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
  snapshotId: string(name='SnapshotId', description='实例快照Id', position='Path'),
}

model GetInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  gmtCreateTime?: string(name='GmtCreateTime', description='实例快照创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='实例快照修改时间'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  imageId?: string(name='ImageId', description='实例快照的镜像Id'),
  imageUrl?: string(name='ImageUrl', description='实例快照的镜像地址'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  reasonCode?: string(name='ReasonCode', description='实例快照错误代码'),
  reasonMessage?: string(name='ReasonMessage', description='实例快照错误消息'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshotId?: string(name='SnapshotId', description='实例快照Id'),
  snapshotName?: string(name='SnapshotName', description='实例快照名称'),
  status?: string(name='Status', description='实例快照状态'),
  success?: boolean(name='Success', description='成功标志'),
}

model GetInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceSnapshotResponseBody(name='body'),
}

async function getInstanceSnapshot(request: GetInstanceSnapshotRequest): GetInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceSnapshot', 'GET', '/api/v2/instances/{InstanceId}/snapshots/{SnapshotId}', 'json', false, 'json', request);
}

model GetTokenRequest {
  expireTime?: int32(name='ExpireTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model GetTokenResponseBody = {
  code?: string(name='Code', description='状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
  token?: string(name='Token', description='token'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'GET', '/api/v2/tokens', 'json', false, 'json', request);
}

model GetUserConfigRequest {
}

model GetUserConfigResponseBody = {
  accountSufficient?: boolean(name='AccountSufficient', description='用户账号金额是否充足'),
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model GetUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserConfigResponseBody(name='body'),
}

async function getUserConfig(request: GetUserConfigRequest): GetUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserConfig', 'GET', '/api/v2/userconfig', 'json', false, 'json', request);
}

model ListDemoCategoriesRequest {
}

model ListDemoCategoriesResponseBody = {
  categories?: [
    DemoCategory
  ](name='Categories', description='样例列表'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model ListDemoCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDemoCategoriesResponseBody(name='body'),
}

async function listDemoCategories(request: ListDemoCategoriesRequest): ListDemoCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDemoCategories', 'GET', '/api/v2/democategories', 'json', false, 'json', request);
}

model ListDemosRequest {
  category?: string(name='Category', description='目录', position='Query'),
  demoName?: string(name='DemoName', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model ListDemosResponseBody = {
  demos?: [ 
    {
      categories?: [ string ](name='Categories', description='所在目录'),
      demoDescription?: string(name='DemoDescription', description='样例描述'),
      demoName?: string(name='DemoName', description='样例名称'),
      demoUrl?: string(name='DemoUrl', description='样例地址'),
      order?: long(name='Order', description='序号'),
      size?: long(name='Size', description='大小'),
    }
  ](name='Demos', description='样例列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='总数'),
}

model ListDemosResponse = {
  headers: map[string]string(name='headers'),
  body: ListDemosResponseBody(name='body'),
}

async function listDemos(request: ListDemosRequest): ListDemosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDemos', 'GET', '/api/v2/demos', 'json', false, 'json', request);
}

model ListEcsSpecsRequest {
  acceleratorType: string(name='AcceleratorType', description='加速类型', position='Query'),
  order?: string(name='Order', description='排序顺序', position='Query'),
  pageNumber?: long(name='PageNumber', description='页数', position='Query'),
  pageSize?: long(name='PageSize', description='每页大小', position='Query'),
  sortBy?: string(name='SortBy', description='排序字段', position='Query'),
}

model ListEcsSpecsResponseBody = {
  code?: string(name='Code', description='状态码'),
  ecsSpecs?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', description='资源类型'),
      CPU?: long(name='CPU', description='CPU核数'),
      currency?: string(name='Currency', description='货币单位'),
      GPU?: long(name='GPU', description='GPU卡数'),
      GPUType?: string(name='GPUType', description='显卡类型'),
      instanceBandwidthRx?: long(name='InstanceBandwidthRx', description='实例接收带宽'),
      instanceType?: string(name='InstanceType', description='实例规格'),
      memory?: float(name='Memory', description='内存大小(GB)'),
      price?: double(name='Price', description='价格'),
      systemDiskCapacity?: long(name='SystemDiskCapacity', description='系统盘大小(GB)'),
    }
  ](name='EcsSpecs', description='本分页中请求的实例列表'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
  totalCount?: long(name='TotalCount', description='实例总数'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEcsSpecs', 'GET', '/api/v2/ecsspecs', 'json', false, 'json', request);
}

model ListInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', position='Path'),
  order?: string(name='Order', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
}

model ListInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshots?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='实例快照创建时间'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='实例快照修改时间'),
      imageId?: string(name='ImageId', description='实例快照的镜像Id'),
      imageUrl?: string(name='ImageUrl', description='实例快照的镜像地址'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      reasonCode?: string(name='ReasonCode', description='实例快照错误代码'),
      reasonMessage?: string(name='ReasonMessage', description='实例快照错误消息'),
      snapshotId?: string(name='SnapshotId', description='实例快照Id'),
      snapshotName?: string(name='SnapshotName', description='实例快照名称'),
      status?: string(name='Status', description='实例快照状态'),
    }
  ](name='Snapshots', description='本分页中请求的实例镜像列表'),
  success?: boolean(name='Success', description='成功标志'),
  totalCount?: long(name='TotalCount', description='实例总数'),
}

model ListInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceSnapshotResponseBody(name='body'),
}

async function listInstanceSnapshot(request: ListInstanceSnapshotRequest): ListInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceSnapshot', 'GET', '/api/v2/instances/{InstanceId}/snapshots', 'json', false, 'json', request);
}

model ListInstanceStatisticsRequest {
  workspaceIds: string(name='WorkspaceIds', description='工作空间列表', position='Query'),
}

model ListInstanceStatisticsResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  statistics?: map[string]map[string]any(name='Statistics', description='统计信息'),
  success?: boolean(name='Success', description='成功标志'),
}

model ListInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceStatisticsResponseBody(name='body'),
}

async function listInstanceStatistics(request: ListInstanceStatisticsRequest): ListInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceStatistics', 'GET', '/api/v2/instancestatistics', 'json', false, 'json', request);
}

model ListInstancesRequest {
  acceleratorType?: string(name='AcceleratorType', position='Query'),
  accessibility?: string(name='Accessibility', position='Query'),
  instanceName?: string(name='InstanceName', description='实例名称', position='Query'),
  order?: string(name='Order', description='排列顺序', position='Query'),
  pageNumber?: long(name='PageNumber', description='页码', position='Query'),
  pageSize?: long(name='PageSize', description='分页数量大小', position='Query'),
  paymentType?: string(name='PaymentType', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  sortBy?: string(name='SortBy', description='排序字段', position='Query'),
  status?: string(name='Status', description='实例状态', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='工作空间Id', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instances?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', description='实例计算类型'),
      accessibility?: string(name='Accessibility', description='工作空间内是否他人可见'),
      accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', description='累计运行时间（ms）'),
      datasets?: [ 
        {
          datasetId?: string(name='DatasetId', description='数据集Id'),
          mountPath?: string(name='MountPath', description='容器内挂载路径'),
        }
      ](name='Datasets', description='数据集集合'),
      ecsSpec?: string(name='EcsSpec', description='实例对应的Ecs规格'),
      environmentVariables?: map[string]string(name='EnvironmentVariables', description='环境变量'),
      gmtCreateTime?: string(name='GmtCreateTime', description='实例创建时间'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='实例修改时间'),
      imageId?: string(name='ImageId', description='镜像Id'),
      imageName?: string(name='ImageName', description='镜像名称'),
      imageUrl?: string(name='ImageUrl', description='镜像地址'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      instanceName?: string(name='InstanceName', description='实例名称'),
      instanceShutdownTimer?: {
        dueTime?: string(name='DueTime', description='设定关机时间'),
        gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
        gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
        instanceId?: string(name='InstanceId', description='实例Id'),
        remainingTimeInMs?: long(name='RemainingTimeInMs', description='剩余关机时间（ms）'),
      }(name='InstanceShutdownTimer', description='定时关机任务'),
      instanceUrl?: string(name='InstanceUrl', description='实例Url'),
      jupyterlabUrl?: string(name='JupyterlabUrl', description='Jupyterlab Url'),
      latestSnapshot?: {
        gmtCreateTime?: string(name='GmtCreateTime', description='快照创建时间'),
        gmtModifiedTime?: string(name='GmtModifiedTime', description='快照修改时间'),
        imageId?: string(name='ImageId', description='镜像Id'),
        imageName?: string(name='ImageName', description='镜像名称'),
        imageUrl?: string(name='ImageUrl', description='镜像Url'),
        repositoryUrl?: string(name='RepositoryUrl', description='镜像仓库Url'),
      }(name='LatestSnapshot', description='最新保存的用户镜像'),
      paymentType?: string(name='PaymentType', description='支付类型'),
      priority?: long(name='Priority', description='优先级，在分配资源给实例时，优先级越高的实例越优先'),
      reasonCode?: string(name='ReasonCode', description='实例错误代码'),
      reasonMessage?: string(name='ReasonMessage', description='实例错误原因'),
      requestedResource?: {
        CPU?: string(name='CPU', description='cpu核数'),
        GPU?: string(name='GPU', description='gpu数量'),
        GPUType?: string(name='GPUType', description='gpu显卡类型'),
        memory?: string(name='Memory', description='memory大小'),
        sharedMemory?: string(name='SharedMemory', description='shared memory大小'),
      }(name='RequestedResource', description='资源配置，弹内或者轻量化时使用'),
      resourceId?: string(name='ResourceId', description='资源Id,预付费时填写'),
      resourceName?: string(name='ResourceName'),
      status?: string(name='Status', description='实例状态'),
      terminalUrl?: string(name='TerminalUrl', description='终端url'),
      userId?: string(name='UserId', description='用户Id'),
      userName?: string(name='UserName', description='用户名称'),
      userVpc?: {
        securityGroupId?: string(name='SecurityGroupId', description='Security Group Id'),
        vSwitchId?: string(name='VSwitchId', description='VSwitch Id'),
        vpcId?: string(name='VpcId', description='Vpc Id'),
      }(name='UserVpc', description='user vpc配置'),
      webIDEUrl?: string(name='WebIDEUrl', description='Web IDE url'),
      workspaceId?: string(name='WorkspaceId', description='工作空间Id'),
      workspaceName?: string(name='WorkspaceName', description='工作空间名称'),
    }
  ](name='Instances', description='本分页中请求的实例列表'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
  totalCount?: long(name='TotalCount', description='实例总数'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v2/instances', 'json', false, 'json', request);
}

model StartInstanceRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartInstance', 'PUT', '/api/v2/instances/{InstanceId}/start', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
  saveImage?: boolean(name='SaveImage', description='是否保存环境后再关闭实例', position='Query'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopInstance', 'PUT', '/api/v2/instances/{InstanceId}/stop', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='InstanceId', description='实例Id', position='Path'),
  instanceName?: string(name='InstanceName', description='实例名称', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PUT', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

