/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'pai-dsw';
  @version = '2022-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BandwidthLimit {
  egressRate?: string(name='EgressRate'),
  egressWhitelists?: [ string ](name='EgressWhitelists'),
  ingressRate?: string(name='IngressRate'),
  ingressWhitelists?: [ string ](name='IngressWhitelists'),
}

model CredentialConfig {
  aliyunEnvRoleKey?: string(name='AliyunEnvRoleKey', example='0'),
  configs?: [ 
    {
      key: string(name='Key', description='This parameter is required.', example='0'),
      roles?: [ 
        {
          assumeRoleFor?: string(name='AssumeRoleFor', example='123******'),
          policy?: string(name='Policy', example='{}'),
          roleArn: string(name='RoleArn', description='This parameter is required.', example='acs:ram::123******:role/****'),
          roleType: string(name='RoleType', description='This parameter is required.', example='service'),
          userInfo?: {
            accessKeyId?: string(name='AccessKeyId', example='LT********'),
            id?: string(name='Id', example='456******'),
            securityToken?: string(name='SecurityToken', example='********'),
            type?: string(name='Type', example='sub'),
          }(name='UserInfo'),
        }
      ](name='Roles'),
      type: string(name='Type', description='This parameter is required.', example='Role'),
    }
  ](name='Configs'),
  enable?: boolean(name='Enable', example='true'),
}

model DemoCategory {
  categoryCode?: string(name='CategoryCode', example='sdk'),
  categoryName?: string(name='CategoryName', example='SDK Usage'),
  order?: long(name='Order', example='12'),
  subCategories?: [
    DemoCategory
  ](name='SubCategories'),
}

model DynamicMount {
  enable?: boolean(name='Enable'),
  mountPoints?: [
    DynamicMountPoint
  ](name='MountPoints'),
}

model DynamicMountPoint {
  options?: string(name='Options'),
  rootPath: string(name='RootPath', description='This parameter is required.'),
}

model ForwardInfo {
  accessType?: [ string ](name='AccessType'),
  containerName?: string(name='ContainerName', example='dsw-notebook'),
  eipAllocationId?: string(name='EipAllocationId', example='eip-25877c70gddh****'),
  enable?: boolean(name='Enable', example='true'),
  externalPort?: string(name='ExternalPort', example='10086'),
  forwardPort?: string(name='ForwardPort', example='22'),
  name?: string(name='Name', example='ssh'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  SSHPublicKey?: string(name='SSHPublicKey'),
}

model ForwardInfoResponse {
  accessType?: [ string ](name='AccessType'),
  connectInfo?: {
    internet?: {
      endpoint?: string(name='Endpoint', example='47.111.119.114'),
      port?: string(name='Port', example='22'),
    }(name='Internet'),
    intranet?: {
      endpoint?: string(name='Endpoint', example='dsw-notebook-22-urz3u6cnu0uts7ej9r.dsw-5cc6083084818f60.dsw.pai.alibaba.com'),
      port?: string(name='Port', example='22'),
    }(name='Intranet'),
    message?: string(name='Message', example='DNAT and privateZone are both ready.'),
    phase?: string(name='Phase', example='Ready'),
  }(name='ConnectInfo'),
  containerName?: string(name='ContainerName', example='dsw-notebook'),
  eipAllocationId?: string(name='EipAllocationId', example='eip-25877c70gddh****'),
  enable?: boolean(name='Enable', example='true'),
  externalPort?: string(name='ExternalPort', example='1024'),
  forwardPort?: string(name='ForwardPort', example='22'),
  name?: string(name='Name', example='ssh'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  SSHPublicKey?: string(name='SSHPublicKey'),
}

model CreateIdleInstanceCullerRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  cpuPercentThreshold?: int32(name='CpuPercentThreshold', description='The CPU utilization threshold. Unit: percentage. Valid values: 1 to 100. If the CPU utilization of the instance is lower than this threshold, the instance is considered idle.', example='20', position='Body'),
  gpuPercentThreshold?: int32(name='GpuPercentThreshold', description='The GPU utilization threshold. Unit: percentage. Valid values: 1 to 100. This parameter takes effect only if the instance is of the GPU instance type. If both CPU and GPU utilization is lower than the thresholds, the instance is considered idle.', example='10', position='Body'),
  maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', description='The maximum time duration for which the instance is idle. Unit: minutes. If the time duration for which the instance is idle exceeds this value, the system automatically stops the instance.', example='60', position='Body'),
}

model CreateIdleInstanceCullerResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The error message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateIdleInstanceCullerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIdleInstanceCullerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateIdleInstanceCuller  CreateIdleInstanceCullerRequest
  * @return CreateIdleInstanceCullerResponse
 */
async function createIdleInstanceCuller(request: CreateIdleInstanceCullerRequest): CreateIdleInstanceCullerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIdleInstanceCuller', 'POST', '/api/v2/instances/{InstanceId}/idleinstanceculler', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  accessibility?: string(name='Accessibility', description='The instance accessibility.

Valid values:

*   PUBLIC: The instances are accessible to all members in the workspace.
*   PRIVATE: The instances are accessible only to you and the administrator of the workspace.', example='PRIVATE', position='Body'),
  affinity?: {
    CPU?: {
      enable?: boolean(name='Enable', description='Specifies whether to enable the CPU affinity feature.

*   false
*   true', example='true'),
    }(name='CPU', description='The CPU affinity configuration. Only subscription instances that use general-purpose computing resources support CPU affinity configuration.'),
  }(name='Affinity', description='The affinity configuration.', position='Body'),
  cloudDisks?: [ 
    {
      capacity?: string(name='Capacity', description='If **Resource Type** is **Public Resource** or if **Resource Quota** is subscription-based general-purpose computing resources (CPU cores ≥ 2 and memory ≥ 4 GB, or configured with GPU):

Each instance has a free system disk of 100 GiB for persistent storage. **If the DSW instance is stopped and not launched for more than 15 days, the disk is cleared**. The disk can be expanded. For specific pricing, refer to the console.

**

**Warning**

*   After the expansion, you cannot reduce the storage space. Proceed with caution.

*   After the expansion, the disk is not cleared if the instance is stopped for more than 15 days. However, it will continue to incur fees.

*   If you delete the instance, the system disk is also released and the data stored in the disk is deleted. Make sure that you have backed up your data before you delete the instance.

If you need persistent storage, you can **mount a dataset** or add the OSS, NAS, or CPFS path to the **storage path**.', example='100Gi'),
      mountPath?: string(name='MountPath', description='The mount path of the cloud disk.', example='/mnt/systemDisk'),
      path?: string(name='Path', description='The subpath of the cloud disk that is mounted to the instance.', example='workspace'),
      status?: {
        available?: long(name='Available', description='The available capacity. Unit: bytes.', example='31841058816'),
        capacity?: long(name='Capacity', description='The capacity. Unit: bytes.', example='32212254720'),
        usage?: long(name='Usage', description='The used capacity. Unit: bytes.', example='371195904'),
      }(name='Status', description='The disk or snapshot usage.'),
      subType?: string(name='SubType', description='The cloud disk type.

*   rootfs: Mounts the disk as a system disk. The system environment is stored on the disk.', example='rootfs'),
    }
  ](name='CloudDisks', description='The cloud disks.', example='[]', position='Body'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', description='The credential configuration.', position='Body'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='The dataset ID. If the dataset is read-only, you cannot change the dataset permission from read-only to read and write by using MountAccess.

You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID. If you configure the dataset ID, you cannot configure the dataset URI.', example='d-vsqjvsjp4orp5l206u'),
      datasetVersion?: string(name='DatasetVersion', description='The dataset version. You must also configure DatasetId. If you leave this parameter empty, the value v1 is used by default.', example='v1'),
      dynamic?: boolean(name='Dynamic', description='Specifies whether to enable dynamic mounting. Default value: false.

*   Currently, only instances using general-purpose computing resources are supported.
*   Currently, only OSS datasets are supported. The mounted datasets are read-only.
*   The mount path of the dynamically mounted dataset must be a subpath of the root path. Example: /mnt/dynamic/data1/
*   A dynamically mounted dataset must be after non-dynamic datasets.', example='true'),
      mountAccess?: string(name='MountAccess', description='The read and write permissions of the dataset. If the dataset is read-only, it cannot be changed to read and write.', example='RW'),
      mountPath?: string(name='MountPath', description='The mount path of the dataset.', example='/mnt/data'),
      optionType?: string(name='OptionType', description='The mount type. You cannot specify Options at the same time. This is deprecated, and you can use Options instead.', example='ReadOnly', deprecated='true'),
      options?: string(name='Options', description='The custom dataset mount options. Only OSS is supported. You cannot specify OptionType at the same time. For more information, see [DSW mount configurations](https://www.alibabacloud.com/help/en/pai/user-guide/read-and-write-dataset-data).', example='{
  "fs.oss.download.thread.concurrency": "10",
  "fs.oss.upload.thread.concurrency": "10",
  "fs.jindo.args": "-oattr_timeout=3 -oentry_timeout=0 -onegative_timeout=0 -oauto_cache -ono_symlink"
}'),
      uri?: string(name='Uri', description='The URI of the storage service directory, which can be directly mounted. This parameter is mutually exclusive with DatasetId.

URI formats of different types of storage:

*   OSS: oss://bucket-name.oss-cn-shanghai-internal.aliyuncs.com/data/path/
*   NAS: nas://29\\*\\*d-b12\\*\\*\\*\\*446.cn-hangzhou.nas.aliyuncs.com/data/path/
*   Extreme NAS: nas://29\\*\\*\\*\\*123-y\\*\\*r.cn-hangzhou.extreme.nas.aliyuncs.com/data/path/
*   CPFS: cpfs://cpfs-213\\*\\*\\*\\*87.cn-wulanchabu/ptc-292\\*\\*\\*\\*\\*cbb/exp-290\\*\\*\\*\\*\\*\\*\\*\\*03e/data/path/
*   Lingjun CPFS: bmcpfs://cpfs-290\\*\\*\\*\\*\\*\\*foflh-vpc-x\\*\\*\\*\\*8r.cn-wulanchabu.cpfs.aliyuncs.com/data/path/', example='oss://bucket-name.oss-cn-shanghai-internal.aliyuncs.com/data/path/'),
    }
  ](name='Datasets', description='The datasets.', position='Body'),
  driver?: string(name='Driver', description='The NVIDIA driver configuration.', example='535.54.03', position='Body'),
  dynamicMount?: DynamicMount(name='DynamicMount', description='The dynamic mount configuration.', position='Body'),
  ecsSpec?: string(name='EcsSpec', description='The ECS instance type of the instance. You can call [ListEcsSpecs](https://help.aliyun.com/document_detail/470423.html) to obtain the ECS instance type.', example='ecs.c6.large', position='Body'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', description='The environment variables.', example='{userName: "Chris"}', position='Body'),
  imageAuth?: string(name='ImageAuth', description='The Base64-encoded account and password for the user\\"s private image. The password will be hidden.', example='****', position='Body'),
  imageId?: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.', example='image-05cefd0be2exxxx', position='Body'),
  imageUrl?: string(name='ImageUrl', description='The image address. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image address.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu', position='Body'),
  instanceName?: string(name='InstanceName', description='The instance name. The name must meet the following requirements:

*   The name can contain only letters, digits, and underscores (_).
*   The name can be up to 27 characters in length.', example='training_data', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', description='The custom label key.', example='stsTokenOwner'),
      value?: string(name='Value', description='The custom label value.', example='123xxxxxxxx'),
    }
  ](name='Labels', description='The custom labels.', example='{\\"foo\\": \\"bar\\"}', position='Body'),
  oversoldType?: string(name='OversoldType', position='Body'),
  priority?: long(name='Priority', description='The priority based on which resources are allocated to instances. Valid values: 1 to 9.

*   1: the lowest priority.
*   9: the highest priority.', example='1', position='Body'),
  requestedResource?: {
    CPU?: string(name='CPU', description='The number of CPU cores.', example='32'),
    GPU?: string(name='GPU', description='The number of GPUs.', example='4'),
    GPUType?: string(name='GPUType', description='The GPU memory type. Valid values:

*   V100
*   A100
*   T4
*   A10
*   P100', example='v100'),
    memory?: string(name='Memory', description='The memory size. Unit: GB.', example='32'),
    sharedMemory?: string(name='SharedMemory', description='The size of the shared memory. Unit: GB.', example='32'),
  }(name='RequestedResource', description='The resource configurations.', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}', position='Body'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group. This parameter is configured during prepayment. For information about how to create a dedicated resource group, see [Create a dedicated resource group and purchase general computing resources](https://help.aliyun.com/document_detail/202827.html).', example='dsw-123456789', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tag', description='The tags.', position='Body'),
  userCommand?: {
    onStart?: {
      content?: string(name='Content'),
    }(name='OnStart'),
  }(name='UserCommand', position='Body'),
  userId?: string(name='UserId', description='The ID of the instance owner. Valid values: Alibaba Cloud account and RAM user.', example='161228528250****', position='Body'),
  userVpc?: {
    bandwidthLimit?: BandwidthLimit(name='BandwidthLimit'),
    defaultRoute?: string(name='DefaultRoute', description='The default route. Valid values:

*   eth0: The default network interface is used to access the Internet through the public gateway.
*   eth1: The user\\"s elastic network interface (ENI) is used to access the Internet through the private gateway. For more information about the configuration method, see [Enable Internet access for a DSW instance by using a private Internet NAT gateway](https://help.aliyun.com/document_detail/2525343.html).', example='eth0'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='The extended CIDR blocks.

*   If you leave the SwitchId and ExtendedCIDRs parameters empty, the system automatically obtains all CIDR blocks in a VPC.
*   If you configure the SwitchId and ExtendedCIDRs parameters, we recommend that you specify all CIDR blocks in a VPC.', example='["192.168.0.1/24", "192.168.1.1/24"]'),
    forwardInfos?: [
      ForwardInfo
    ](name='ForwardInfos', description='The forward information.'),
    securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-xxxxxx'),
    vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-xxxxx'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-xxxxx'),
  }(name='UserVpc', description='The virtual private cloud (VPC) configurations.', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='40823', position='Body'),
  workspaceSource?: string(name='WorkspaceSource', description='The storage corresponding to the working directory. You can mount disks or datasets to /mnt/workspace at the same time. OSS datasets and dynamically mounted datasets are not supported.

Valid values:

*   rootfsCloudDisk: Mount the disk to the working directory.
*   Mount path of the dataset, such as /mnt/data: Datasets in URI format only support this method.
*   Dataset ID, such as d-vsqjvs\\*\\*\\*\\*rp5l206u: If a single dataset is mounted to multiple paths, the first path is selected. We recommend that you do not use this method, use the mount path instead.

If you leave this parameter empty:

*   If the instance uses cloud disks, cloud disks are selected by default.
*   if no cloud disks are available, the first NAS or CPFS dataset is selected as the working directory.
*   If no cloud disks, and NAS or CPFS datasets are available, the host space is used.', example='rootfsCloudDisk', position='Body'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404
*   200', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/api/v2/instances', 'json', false, 'json', request);
}

model CreateInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  dueTime?: string(name='DueTime', description='The scheduled stop time.', example='2021-01-12T14:36:01Z', position='Body'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', description='The time duration before the instance is stopped. Unit: milliseconds.', example='3600000', position='Body'),
}

model CreateInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateInstanceShutdownTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceShutdownTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceShutdownTimer  CreateInstanceShutdownTimerRequest
  * @return CreateInstanceShutdownTimerResponse
 */
async function createInstanceShutdownTimer(request: CreateInstanceShutdownTimerRequest): CreateInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceShutdownTimer', 'POST', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model CreateInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  excludePaths?: [ string ](name='ExcludePaths', position='Body'),
  imageUrl: string(name='ImageUrl', description='This parameter is required.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', example='stsTokenOwner'),
      value?: string(name='Value', example='123xxxxxxxx'),
    }
  ](name='Labels', example='{\\"foo\\": \\"bar\\"}', position='Body'),
  overwrite?: boolean(name='Overwrite', position='Body'),
  snapshotDescription?: string(name='SnapshotDescription', example='training_data_env', position='Body'),
  snapshotName: string(name='SnapshotName', description='This parameter is required.', example='training_data_env', position='Body'),
}

model CreateInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceSnapshot  CreateInstanceSnapshotRequest
  * @return CreateInstanceSnapshotResponse
 */
async function createInstanceSnapshot(request: CreateInstanceSnapshotRequest): CreateInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceSnapshot', 'POST', '/api/v2/instances/{InstanceId}/snapshots', 'json', false, 'json', request);
}

model DeleteIdleInstanceCullerRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model DeleteIdleInstanceCullerResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='ValidationError'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.

*   If the request is successful, null is returned.
*   If the request fails, the failure cause is returned.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteIdleInstanceCullerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIdleInstanceCullerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIdleInstanceCuller  DeleteIdleInstanceCullerRequest
  * @return DeleteIdleInstanceCullerResponse
 */
async function deleteIdleInstanceCuller(request: DeleteIdleInstanceCullerRequest): DeleteIdleInstanceCullerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIdleInstanceCuller', 'DELETE', '/api/v2/instances/{InstanceId}/idleinstanceculler', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404
*   200', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model DeleteInstanceLabelsRequest {
  instanceId: string(name='InstanceId', description='The ID of the DSW instance.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  labelKeys: string(name='LabelKeys', description='The keys of the tags that you want to delete. Separate multiple tags with commas (,).

This parameter is required.', example='labelKey1,labelKey2,labelKey3', position='Query'),
}

model DeleteInstanceLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DeleteInstanceLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceLabels  DeleteInstanceLabelsRequest
  * @return DeleteInstanceLabelsResponse
 */
async function deleteInstanceLabels(request: DeleteInstanceLabelsRequest): DeleteInstanceLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceLabels', 'DELETE', '/api/v2/instances/{InstanceId}/labels', 'json', false, 'json', request);
}

model DeleteInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model DeleteInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteInstanceShutdownTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceShutdownTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceShutdownTimer  DeleteInstanceShutdownTimerRequest
  * @return DeleteInstanceShutdownTimerResponse
 */
async function deleteInstanceShutdownTimer(request: DeleteInstanceShutdownTimerRequest): DeleteInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceShutdownTimer', 'DELETE', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model DeleteInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  snapshotId: string(name='SnapshotId', description='This parameter is required.', example='snp-05cexxxxxxxxx', position='Path'),
}

model DeleteInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceSnapshot  DeleteInstanceSnapshotRequest
  * @return DeleteInstanceSnapshotResponse
 */
async function deleteInstanceSnapshot(request: DeleteInstanceSnapshotRequest): DeleteInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceSnapshot', 'DELETE', '/api/v2/instances/{InstanceId}/snapshots/{SnapshotId}', 'json', false, 'json', request);
}

model GetIdleInstanceCullerRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model GetIdleInstanceCullerResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='ValidationError'),
  cpuPercentThreshold?: int32(name='CpuPercentThreshold', description='The CPU utilization threshold. Unit: percentage. Valid values: 1 to 100. If the CPU utilization of the instance is lower than this threshold, the instance is considered idle.', example='20'),
  gpuPercentThreshold?: int32(name='GpuPercentThreshold', description='The GPU utilization threshold. Unit: percentage. Valid values: 1 to 100. This parameter takes effect only if the instance is of the GPU instance type. If both CPU and GPU utilization is lower than the thresholds, the instance is considered idle.', example='10'),
  idleTimeInMinutes?: int32(name='IdleTimeInMinutes', description='The time duration for which the instance is idle. Unit: minutes.', example='30'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', description='The maximum time duration for which the instance is idle. Unit: minutes. If the time duration for which the instance is idle exceeds this value, the system automatically stops the instance.', example='60'),
  message?: string(name='Message', description='The error message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model GetIdleInstanceCullerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIdleInstanceCullerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIdleInstanceCuller  GetIdleInstanceCullerRequest
  * @return GetIdleInstanceCullerResponse
 */
async function getIdleInstanceCuller(request: GetIdleInstanceCullerRequest): GetIdleInstanceCullerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIdleInstanceCuller', 'GET', '/api/v2/instances/{InstanceId}/idleinstanceculler', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  token?: string(name='Token', description='The sharing token information.', example='WUzWCMr325LV0bH2JH4C4HoDaKIU6C4S', position='Query'),
}

model GetInstanceResponseBody = {
  acceleratorType?: string(name='AcceleratorType', description='The accelerator type of the instance.

Valid values:

*   CPU
*   GPU', example='CPU'),
  accessibility?: string(name='Accessibility', description='The accessibility. Valid values:

*   PRIVATE: Accessible only to you and the administrator of the workspace.
*   PUBLIC: Accessible to all members in the workspace.', example='PRIVATE'),
  accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', description='The accumulated running duration. Unit: milliseconds.', example='3600000'),
  affinity?: {
    CPU?: {
      enable?: boolean(name='Enable', description='Indicates whether CPU affinity is enabled.

true false', example='true'),
    }(name='CPU', description='The CPU affinity configuration. Only subscription instances that use general-purpose computing resources support CPU affinity configuration.'),
  }(name='Affinity', description='The affinity configuration.'),
  cloudDisks?: [ 
    {
      capacity?: string(name='Capacity', description='Disk Capacity', example='30Gi'),
      mountPath?: string(name='MountPath', description='The mount path of the cloud disk in the container.', example='/mmt/workspace'),
      path?: string(name='Path', description='The directory on the cloud disk that is mounted to the container.', example='/workspace'),
      subType?: string(name='SubType', description='The usage mode of the cloud disk. The value rootfs indicates that the cloud disk is used as the root file system.', example='rootfs'),
    }
  ](name='CloudDisks', description='The cloud disks of the instance.', example='[]'),
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: All errors, except for parameter validation errors, are internal errors.
*   ValidationError: A parameter validation error.', example='null'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', description='The credential injection configuration.'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-vsqjvsjp4orp5l206u'),
      datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1'),
      dynamic?: boolean(name='Dynamic', description='Indicates whether dynamic mounting is enabled. Default value: false.', example='false'),
      mountAccess?: string(name='MountAccess', description='The read and write permissions. Valid values: RW and RO.', example='RW'),
      mountPath?: string(name='MountPath', description='The mount path in the container.', example='/mnt/data'),
      optionType?: string(name='OptionType', description='The mount type of the dataset (deprecated).', example='FastReadWrite'),
      options?: string(name='Options', description='The mount type of the dataset.', example='{
  "fs.oss.download.thread.concurrency": "10",
  "fs.oss.upload.thread.concurrency": "10",
  "fs.jindo.args": "-oattr_timeout=3 -oentry_timeout=0 -onegative_timeout=0 -oauto_cache -ono_symlink"
}'),
      uri?: string(name='Uri', description='The dataset URI.', example='oss://bucket-name.oss-cn-shanghai-internal.aliyuncs.com/data/path/'),
    }
  ](name='Datasets', description='The datasets.'),
  driver?: string(name='Driver', description='The NVIDIA driver configuration.', example='535.54.03'),
  dynamicMount?: DynamicMount(name='DynamicMount', description='The dynamic mount configuration.'),
  ecsSpec?: string(name='EcsSpec', description='The ECS instance type of the instance.', example='ecs.c6.large'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', description='The environment variables.', example='{userName: "Chris"}'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The creation time of the instance.', example='2021-01-12T14:36:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The last modified time of the instance.', example='2021-01-12T14:36:01Z'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  idleInstanceCuller?: {
    cpuPercentThreshold?: int32(name='CpuPercentThreshold', description='The CPU utilization threshold. Unit: percentage. Valid values: 1 to 100. If the CPU utilization of the instance is lower than this threshold, the instance is considered idle.', example='20'),
    gpuPercentThreshold?: int32(name='GpuPercentThreshold', description='The GPU utilization threshold. Unit: percentage. Valid values: 1 to 100. This parameter takes effect only if the instance is of the GPU instance type. If both CPU and GPU utilization is lower than the thresholds, the instance is considered idle.', example='10'),
    idleTimeInMinutes?: int32(name='IdleTimeInMinutes', description='The current time duration for which the instance is idle. Unit: minutes.', example='30'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
    maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', description='The maximum time duration for which the instance is idle. Unit: minutes. If the time duration for which the instance is idle exceeds this value, the system automatically stops the instance.', example='60'),
  }(name='IdleInstanceCuller', description='The automatic shutdown settings.', example='{"InstanceId":"dsw-05cefd0be2e5a278","CpuPercentThreshold":20,"GpuPercentThreshold":10,"MaxIdleTimeInMinutes":120,"IdleTimeInMinutes":30}'),
  imageAuth?: string(name='ImageAuth', description='The Base64-encoded account and password for the user‘s private image. The password will be hidden.', example='YWxpeXVuNjUzMzM5MjIwMzoqKioqKio='),
  imageId?: string(name='ImageId', description='The image ID.', example='image-05cefd0be2exxxx'),
  imageName?: string(name='ImageName', description='The image name.', example='py36_cpu_tf1.12_ubuntu'),
  imageUrl?: string(name='ImageUrl', description='The image address.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  instanceName?: string(name='InstanceName', description='The instance name.', example='training_data'),
  instanceShutdownTimer?: {
    dueTime?: string(name='DueTime', description='The scheduled stop time.', example='2021-01-12T14:36:01Z'),
    gmtCreateTime?: string(name='GmtCreateTime', description='The creation time.', example='2021-01-12T14:36:01Z'),
    gmtModifiedTime?: string(name='GmtModifiedTime', description='The modified time.', example='2021-01-12T14:36:01Z'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
    remainingTimeInMs?: long(name='RemainingTimeInMs', description='The remaining time before the instance is stopped. Unit: milliseconds.', example='3600000'),
  }(name='InstanceShutdownTimer', description='The scheduled stop tasks.'),
  instanceSnapshotList?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='The time when the snapshot was created.', example='2021-01-12T14:36:01Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the snapshot was modified.', example='2021-01-12T14:36:01Z'),
      imageId?: string(name='ImageId', description='The image ID.', example='image-05cefd0be2exxxx'),
      imageName?: string(name='ImageName', description='The image name.', example='py36_cpu_tf1.12_ubuntu'),
      imageUrl?: string(name='ImageUrl', description='The image URL.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
      reasonCode?: string(name='ReasonCode', description='The error code of the instance snapshot.', example='Internal Error'),
      reasonMessage?: string(name='ReasonMessage', description='The error message of the instance snapshot.', example='ImagePullBackOff'),
      repositoryUrl?: string(name='RepositoryUrl', description='The image repository URL.', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
      status?: string(name='Status', description='The instance snapshot status.', example='Pushing'),
    }
  ](name='InstanceSnapshotList', description='The instance snapshots.', example='[]'),
  instanceUrl?: string(name='InstanceUrl', description='The instance URL.', example='https://dsw-cn-shanghai.data.aliyun.com/notebook.htm?instance=39772#/'),
  jupyterlabUrl?: string(name='JupyterlabUrl', description='The JupyterLab URL.', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/lab/'),
  labels?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='stsTokenOwner'),
      value?: string(name='Value', description='The tag value.', example='123xxxxxxxx'),
    }
  ](name='Labels', description='The custom tags.', example='{\\"foo\\": \\"bar\\"}'),
  latestSnapshot?: {
    gmtCreateTime?: string(name='GmtCreateTime', description='The time when the snapshot was created.', example='2021-01-12T14:36:01Z'),
    gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the snapshot was modified.', example='2021-01-12T14:36:01Z'),
    imageId?: string(name='ImageId', description='The image ID.', example='image-05cefd0be2exxxx'),
    imageName?: string(name='ImageName', description='The image name.', example='py36_cpu_tf1.12_ubuntu'),
    imageUrl?: string(name='ImageUrl', description='The image URL.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
    reasonCode?: string(name='ReasonCode', description='The error code of the instance snapshot.', example='Internal Error'),
    reasonMessage?: string(name='ReasonMessage', description='The error message of the instance snapshot.', example='ImagePullBackOff'),
    repositoryUrl?: string(name='RepositoryUrl', description='The image repository URL.', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
    status?: string(name='Status', description='The instance snapshot status.

Valid values:

*   Committing
*   Pushing
*   Failed
*   Saved', example='Pushing'),
  }(name='LatestSnapshot', description='The latest user image saved.'),
  message?: string(name='Message', description='The error message. Valid values:

*   If the request is successful, null is returned.
*   If the request fails, the cause for the failure is returned.', example='"XXX"'),
  nodeErrorRecovery?: {
    autoSwitchCountdownSeconds?: long(name='autoSwitchCountdownSeconds', description='The number of seconds to wait before automatic switchover.', example='30'),
    enableAutoSwitchOnNodeError?: boolean(name='enableAutoSwitchOnNodeError', description='Indicates whether to enable automatic switchover when a node error occurs.', example='true'),
    hasNodeError?: boolean(name='hasNodeError', description='Indicates whether the node has an error.', example='false'),
  }(name='NodeErrorRecovery', description='The error recovery configuration of the node.'),
  paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   PayAsYouGo
*   Subscription', example='PayAsYouGo'),
  priority?: long(name='Priority', description='The priority based on which resources are allocated to instances.', example='1'),
  proxyPath?: string(name='ProxyPath', description='The proxy path.', example='dsw-170197/proxy/'),
  reasonCode?: string(name='ReasonCode', description='The error code of the instance.', example='Internal Error'),
  reasonMessage?: string(name='ReasonMessage', description='The cause of the instance error.', example='ImagePullBackOff'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  requestedResource?: {
    CPU?: string(name='CPU', description='The number of CPU cores.', example='32'),
    GPU?: string(name='GPU', description='The number of GPUs.', example='4'),
    GPUType?: string(name='GPUType', description='The GPU type. Valid values:

*   V100
*   A100
*   T4
*   A10
*   P100', example='v100'),
    memory?: string(name='Memory', description='The memory size. Unit: GB.', example='32'),
    sharedMemory?: string(name='SharedMemory', description='The shared memory size. Unit: GB.', example='32'),
  }(name='RequestedResource', description='The resource configurations in subscription scenarios.', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}'),
  resourceId?: string(name='ResourceId', description='The resource ID. This parameter is available if the billing method is subscription.', example='dsw-123456789'),
  resourceName?: string(name='ResourceName', description='The specification type.

*   For subscription, this is the requested CPU and memory size.
*   For pay-as-you-go, this is the selected ECS instance type.', example='ecs.g7.xlarge'),
  status?: string(name='Status', description='The instance status.

Valid values:

*   Creating
*   SaveFailed
*   Stopped
*   Failed
*   ResourceAllocating
*   Stopping
*   Updating
*   Saving
*   Queuing
*   Recovering
*   Starting
*   Running
*   Saved
*   Deleting
*   EnvPreparing', example='Running'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
      tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
    }
  ](name='Tags', description='The tags.'),
  terminalUrl?: string(name='TerminalUrl', description='The terminal URL.', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/tty/'),
  userCommandId?: string(name='UserCommandId'),
  userId?: string(name='UserId', description='The user ID.', example='1612285282502324'),
  userName?: string(name='UserName', description='The username.', example='测试用户'),
  userVpc?: {
    bandwidthLimit?: BandwidthLimit(name='BandwidthLimit'),
    defaultRoute?: string(name='DefaultRoute', description='Default Route', example='eth0 | eth1'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='The extended CIDR block.

*   If you leave VSwitchId empty, this parameter is not required and the system automatically obtains all CIDR blocks in the VPC.
*   If VSwitchId is not empty, this parameter is required. Specify all CIDR blocks in the VPC.', example='["192.168.0.1/24", "192.168.1.1/24"]'),
    forwardInfos?: [
      ForwardInfoResponse
    ](name='ForwardInfos', description='The forward information.'),
    securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-xxxxxx'),
    vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-xxxxx'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-xxxxx'),
  }(name='UserVpc', description='The virtual private cloud (VPC) configurations.'),
  webIDEUrl?: string(name='WebIDEUrl', description='The Web IDE URL.', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/ide/'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='40823'),
  workspaceName?: string(name='WorkspaceName', description='The workspace name.', example='training_data'),
  workspaceSource?: string(name='WorkspaceSource', description='The storage for the workspace. If you leave this parameter empty, the workspace uses File Storage NAS (NAS) storage, cloud disks, or local disks in sequence.', example='d-123456789'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model GetInstanceEventsRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2020-11-08T15:00:00Z', position='Query'),
  maxEventsNum?: int32(name='MaxEventsNum', description='The maximum number of events. Default value: 2000.', example='2000', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2020-11-08T15:00:00Z', position='Query'),
  token?: string(name='Token', description='The token used to share the URL.', position='Query'),
}

model GetInstanceEventsResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='None'),
  events?: [ string ](name='Events', description='The events.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400: One or more parameters are invalid.
*   404: The instance does not exist.
*   200: The request is normal.', example='200'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='XXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model GetInstanceEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceEvents  GetInstanceEventsRequest
  * @return GetInstanceEventsResponse
 */
async function getInstanceEvents(request: GetInstanceEventsRequest): GetInstanceEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceEvents', 'GET', '/api/v2/instances/{InstanceId}/events', 'json', false, 'json', request);
}

model GetInstanceMetricsRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2020-11-08T15:00:00Z', position='Query'),
  metricType: string(name='MetricType', description='The metric type. Valid values:

*   GpuCoreUsage: the GPU utilization.
*   GpuMemoryUsage: the GPU memory utilization.
*   CpuCoreUsage: the CPU utilization.
*   MemoryUsage: the memory utilization.
*   NetworkInputRate: the network ingress rate.
*   NetworkOutputRate: the network egress rate.
*   DiskReadRate: the disk read rate.
*   DiskWriteRate: the disk write rate.

This parameter is required.', example='GpuCoreUsage', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2020-11-08T15:00:00Z', position='Query'),
  timeStep?: string(name='TimeStep', description='The interval at which metrics are returned. Unit: minutes.', example='15m', position='Query'),
}

model GetInstanceMetricsResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  podMetrics?: [ 
    {
      metrics?: [ 
        {
          time?: long(name='Time', description='The timestamp corresponding to the metric.', example='1670890560'),
          value?: float(name='Value', description='The metric value.', example='25.901031'),
        }
      ](name='Metrics', description='The metrics of the pod that corresponds to the instance.'),
      podId?: string(name='PodId', description='The ID of the pod that corresponds to the instance.', example='dsw-15870-695f44c5bc-hd6xm'),
    }
  ](name='PodMetrics', description='The information about the metrics of the pod that corresponds to the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model GetInstanceMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceMetrics  GetInstanceMetricsRequest
  * @return GetInstanceMetricsResponse
 */
async function getInstanceMetrics(request: GetInstanceMetricsRequest): GetInstanceMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceMetrics', 'GET', '/api/v2/instance/{InstanceId}/metrics', 'json', false, 'json', request);
}

model GetInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model GetInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', example='null'),
  dueTime?: string(name='DueTime', example='2021-01-12T14:36:01Z'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', example='3600000'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceShutdownTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceShutdownTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceShutdownTimer  GetInstanceShutdownTimerRequest
  * @return GetInstanceShutdownTimerResponse
 */
async function getInstanceShutdownTimer(request: GetInstanceShutdownTimerRequest): GetInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceShutdownTimer', 'GET', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model GetInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  snapshotId: string(name='SnapshotId', description='This parameter is required.', example='snp-05cexxxxxxxxx', position='Path'),
}

model GetInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  excludePaths?: [ string ](name='ExcludePaths'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
  imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  labels?: [ 
    {
      key?: string(name='Key', example='stsTokenOwner'),
      value?: string(name='Value', example='123xxxxxxxx'),
    }
  ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
  message?: string(name='Message', example='"XXX"'),
  reasonCode?: string(name='ReasonCode', example='Internal Error'),
  reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
  snapshotName?: string(name='SnapshotName', example='training_data_env'),
  status?: string(name='Status', example='Pushing'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceSnapshot  GetInstanceSnapshotRequest
  * @return GetInstanceSnapshotResponse
 */
async function getInstanceSnapshot(request: GetInstanceSnapshotRequest): GetInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceSnapshot', 'GET', '/api/v2/instances/{InstanceId}/snapshots/{SnapshotId}', 'json', false, 'json', request);
}

model GetLifecycleRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-9698d842b6***', position='Path'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2020-11-08T15:00:00Z', position='Query'),
  limit?: int32(name='Limit', description='The number of sessions to query.', example='1', position='Query'),
  order?: string(name='Order', description='The sorting order of the results. Valid values:

*   ASC: sorted by time in ascending order.
*   DESC: sorted by time in descending order.', example='DESC', position='Query'),
  sessionNumber?: int32(name='SessionNumber', description='A session refers to the process of an instance from startup to failure or shutdown. The sessionNumber indicates the offset value for the instance\\"s session sequence.', example='1', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2020-11-08T15:00:00Z', position='Query'),
  token?: string(name='Token', description='The token used to share the URL.', position='Query'),
}

model GetLifecycleResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: All errors, except for parameter validation errors, are internal errors.
*   ValidationError: A parameter validation error.', example='null'),
  lifecycle?: [[ 
    {
      status?: string(name='Status', description='The status of the instance. Valid values:

*   Creating
*   SaveFailed: The instance image failed to be saved.
*   Stopped
*   Failed
*   ResourceAllocating
*   Stopping
*   Updating
*   Saving
*   Starting
*   Running
*   Saved
*   EnvPreparing: Preparing environment.
*   ArrearStopping: The service is being stopped due to overdue payments.
*   Arrearge: The service is stopped due to overdue payments.
*   Queuing
*   Recovering', example='Starting'),
      reasonCode?: string(name='ReasonCode', description='The reason code that corresponds to an event.', example='“”'),
      reasonMessage?: string(name='ReasonMessage', description='The reason message that corresponds to an event.', example='“”'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The time the status was created, specifically the time the instance transitioned to this status (in GMT).', example='2022-10-21T07:27:44Z'),
      gmtEndTime?: string(name='GmtEndTime'),
    }
  ]  ](name='Lifecycle', description='The lifecycle details.', example='[[{"Status":"Creating","GmtCreateTime":"2022-09-19T22:38:00Z","Reason":"","ReasonCode":""}]]'),
  message?: string(name='Message', description='The returned message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of queried sessions.', example='35'),
}

model GetLifecycleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLifecycleResponseBody(name='body'),
}

/**
  * @description Obtains the lifecycle transition information for an instance, including details on the status an instance transitions to at a specific point in time.
  * @param request  the request parameters of GetLifecycle  GetLifecycleRequest
  * @return GetLifecycleResponse
 */
async function getLifecycle(request: GetLifecycleRequest): GetLifecycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLifecycle', 'GET', '/api/v2/instances/{InstanceId}/lifecycle', 'json', false, 'json', request);
}

model GetMetricsRequest {
  instanceId?: string(name='InstanceId', example='dsw-328d2bbf605*****', position='Path'),
  dimensions?: string(name='Dimensions', example='{"userId":"16122852825*****","jobId":"dsw-328d2bbf605*****","regionId":"cn-wulanchabu","pod":"dsw-45680-76766f8778-95gxh"}', position='Query'),
  endTime?: string(name='EndTime', example='2020-11-08T16:00:00Z', position='Query'),
  length?: string(name='Length', example='10', position='Query'),
  metricName?: string(name='MetricName', example='INSTANCE_SPEC_MEMORY_SWAP', position='Query'),
  namespace?: string(name='Namespace', example='acs_pai_dsw', position='Query'),
  nextToken?: string(name='NextToken', example='15761485350009dd70bb64cff1f0fff750b08ffff073be5fb1e785e2b020f1a949d5ea14aea7fed82f01dd8****', position='Query'),
  period?: string(name='Period', example='60', position='Query'),
  startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z', position='Query'),
}

model GetMetricsResponseBody = {
  code?: string(name='Code', example='200'),
  datapoints?: string(name='Datapoints'),
  message?: string(name='Message', example='Succeed'),
  nextToken?: string(name='NextToken', example='15761485350009dd70bb64cff1f0fff750b08ffff073be5fb1e785e2b020f1a949d5ea14aea7fed82f01dd8****'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
}

model GetMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMetrics  GetMetricsRequest
  * @return GetMetricsResponse
 */
async function getMetrics(request: GetMetricsRequest): GetMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetrics', 'GET', '/api/v2/instance/{InstanceId}/cms/metrics', 'json', false, 'json', request);
}

model GetResourceGroupStatisticsRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='2020-11-08T15:00:00Z', position='Query'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='rg-123456789', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2020-11-08T15:00:00Z', position='Query'),
  workspaceIds: string(name='WorkspaceIds', description='This parameter is required.', example='27218,34956', position='Query'),
}

model GetResourceGroupStatisticsResponseBody = {
  code?: string(name='Code', example='InternalError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  statistics?: map[string]map[string]any(name='Statistics'),
  success?: boolean(name='Success', example='true'),
}

model GetResourceGroupStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceGroupStatistics  GetResourceGroupStatisticsRequest
  * @return GetResourceGroupStatisticsResponse
 */
async function getResourceGroupStatistics(request: GetResourceGroupStatisticsRequest): GetResourceGroupStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceGroupStatistics', 'GET', '/api/v2/resourcegroupstatistics', 'json', false, 'json', request);
}

model GetTokenRequest {
  expireTime?: int32(name='ExpireTime', description='The validity period. Unit: seconds.', example='60', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Query'),
}

model GetTokenResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: All errors, except for parameter validation errors, are internal errors.
*   ValidationError: A parameter validation error.', example='ValidationError'),
  message?: string(name='Message', description='The error message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  token?: string(name='Token', description='The temporary authentication information of the DSW instance.', example='*******'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetToken  GetTokenRequest
  * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'GET', '/api/v2/tokens', 'json', false, 'json', request);
}

model GetUserCommandRequest {
  userCommandId?: string(name='UserCommandId', example='1900', position='Path'),
  instanceId?: string(name='InstanceId', position='Query'),
  token?: string(name='Token', position='Query'),
}

model GetUserCommandResponseBody = {
  code?: string(name='Code', example='ValidationError'),
  message?: string(name='Message', example='null'),
  onStart?: {
    content?: string(name='Content', example='apt update'),
  }(name='OnStart'),
  requestId?: string(name='RequestId', example='BEBDF2EE-642E-5992-8907-D2011A7ACEFE'),
  success?: boolean(name='Success', example='true'),
  userCommandId?: string(name='UserCommandId', example='1900'),
  accessDeniedDetail?: map[string]any(name='accessDeniedDetail', example='"AccessDeniedDetail": {
    "PolicyType": "AccountLevelIdentityBasedPolicy",
    "AuthPrincipalOwnerId": "xxx",
    "EncodedDiagnosticMessage": "AQIBIAAAA....bwhg==",
    "AuthPrincipalType": "SubUser",
    "AuthPrincipalDisplayName": "xxx",
    "NoPermissionType": "ImplicitDeny",
    "AuthAction": "ram:GetUserCommand"
  }'),
}

model GetUserCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserCommand  GetUserCommandRequest
  * @return GetUserCommandResponse
 */
async function getUserCommand(request: GetUserCommandRequest): GetUserCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserCommand', 'GET', '/api/v2/usercommands/{UserCommandId}', 'json', false, 'json', request);
}

model GetUserConfigRequest {
}

model GetUserConfigResponseBody = {
  accountSufficient?: boolean(name='AccountSufficient', example='false'),
  code?: string(name='Code', example='null'),
  enableEciDisk?: boolean(name='EnableEciDisk', example='true'),
  freeTier?: {
    endTime?: string(name='EndTime', example='2020-11-08T15:00:00Z'),
    initBaseUnit?: string(name='InitBaseUnit', example='个'),
    initBaseValue?: double(name='InitBaseValue', example='5000'),
    initShowUnit?: string(name='InitShowUnit', example='个'),
    initShowValue?: string(name='InitShowValue', example='5000'),
    isFreeTierUser?: boolean(name='IsFreeTierUser', example='true'),
    periodBaseUnit?: string(name='PeriodBaseUnit', example='个'),
    periodBaseValue?: double(name='PeriodBaseValue', example='3000'),
    periodShowUnit?: string(name='PeriodShowUnit', example='个'),
    periodShowValue?: string(name='PeriodShowValue', example='3000'),
    startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z'),
    status?: string(name='Status', example='valid'),
  }(name='FreeTier'),
  freeTierSpecAvailable?: boolean(name='FreeTierSpecAvailable', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  message?: string(name='Message', example='"Access denied"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserConfig  GetUserConfigRequest
  * @return GetUserConfigResponse
 */
async function getUserConfig(request: GetUserConfigRequest): GetUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserConfig', 'GET', '/api/v2/userconfig', 'json', false, 'json', request);
}

model ListEcsSpecsRequest {
  acceleratorType: string(name='AcceleratorType', description='The accelerator type.

*   CPU: Only CPU computing is used.
*   GPU: GPUs are used to accelerate computing.

This parameter is required.', example='CPU', position='Query'),
  order?: string(name='Order', description='The sorting order. Valid values:

*   ASC
*   DESC', example='DESC', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  sortBy?: string(name='SortBy', description='The field by which the query results are sorted. Set the value to gmtCreate.', example='gmtCreate', position='Query'),
}

model ListEcsSpecsResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  ecsSpecs?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', description='The accelerator type.', example='CPU'),
      CPU?: long(name='CPU', description='The number of vCPUs.', example='32'),
      currency?: string(name='Currency', description='The currency unit.', example='CNY'),
      GPU?: long(name='GPU', description='The number of GPUs.', example='4'),
      GPUMemorySize?: float(name='GPUMemorySize'),
      GPUType?: string(name='GPUType', description='The GPU type. Valid values:

*   V100
*   A100
*   A10
*   T4
*   P100', example='v100'),
      instanceBandwidthRx?: long(name='InstanceBandwidthRx', description='The inbound bandwidth of the instance.', example='5120000'),
      instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.gn5-c28g1.7xlarge'),
      isAvailable?: boolean(name='IsAvailable', description='Indicates whether the resource was available.', example='True'),
      labels?: [ 
        {
          key?: string(name='Key', description='The label key added to the ECS specification.', example='SupportResourcePackDeduction'),
          value?: string(name='Value', description='The label value added to the ECS specification.', example='true'),
        }
      ](name='Labels', description='The labels of the ECS specification.', example='{\\"foo\\": \\"bar\\"}'),
      memory?: float(name='Memory', description='The memory size. Unit: GB.', example='32'),
      price?: double(name='Price', description='The price.', example='22.8'),
      spotStockStatus?: string(name='SpotStockStatus'),
      systemDiskCapacity?: long(name='SystemDiskCapacity', description='The size of the system disk. Unit: GB.', example='500'),
    }
  ](name='EcsSpecs', description='The specifications of the ECS instances returned on this page.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of ECS instances.', example='35'),
}

model ListEcsSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEcsSpecsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEcsSpecs  ListEcsSpecsRequest
  * @return ListEcsSpecsResponse
 */
async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEcsSpecs', 'GET', '/api/v2/ecsspecs', 'json', false, 'json', request);
}

model ListInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='gmtCreate', position='Query'),
}

model ListInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshots?: [ 
    {
      excludePaths?: [ string ](name='ExcludePaths', example='["/path1","/path2"]'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
      imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
      imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
      instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
      labels?: [ 
        {
          key?: string(name='Key', example='stsTokenOwner'),
          value?: string(name='Value', example='123xxxxxxxx'),
        }
      ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
      reasonCode?: string(name='ReasonCode', example='Internal Error'),
      reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
      snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
      snapshotName?: string(name='SnapshotName', example='training_data_env'),
      status?: string(name='Status', example='Pushing'),
    }
  ](name='Snapshots'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='35'),
}

model ListInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceSnapshot  ListInstanceSnapshotRequest
  * @return ListInstanceSnapshotResponse
 */
async function listInstanceSnapshot(request: ListInstanceSnapshotRequest): ListInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceSnapshot', 'GET', '/api/v2/instances/{InstanceId}/snapshots', 'json', false, 'json', request);
}

model ListInstanceStatisticsRequest {
  workspaceIds: string(name='WorkspaceIds', description='This parameter is required.', example='27218,34956', position='Query'),
}

model ListInstanceStatisticsResponseBody = {
  code?: string(name='Code', example='InternalError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  statistics?: map[string]map[string]any(name='Statistics'),
  success?: boolean(name='Success', example='true'),
}

model ListInstanceStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceStatistics  ListInstanceStatisticsRequest
  * @return ListInstanceStatisticsResponse
 */
async function listInstanceStatistics(request: ListInstanceStatisticsRequest): ListInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceStatistics', 'GET', '/api/v2/instancestatistics', 'json', false, 'json', request);
}

model ListInstancesRequest {
  acceleratorType?: string(name='AcceleratorType', description='The accelerator type.

*   CPU: Only CPU computing is used.
*   GPU: GPUs are used to accelerate computing.', example='CPU', position='Query'),
  accessibility?: string(name='Accessibility', description='The accessibility. Valid values:

*   PRIVATE (default): The instances are accessible only to you and the administrator of the workspace.
*   PUBLIC: The instances are accessible only to all members in the workspace.', example='PRIVATE', position='Query'),
  createUserId?: string(name='CreateUserId', description='The UID of the creator.', example='12345*****67890', position='Query'),
  gpuType?: string(name='GpuType', description='The GPU type.', example='NVIDIA A10', position='Query'),
  imageName?: string(name='ImageName', description='The image name.', example='modelscope:1.9.4-pytorch2.0.1tensorflow2.13.0-cpu-py38-ubuntu20.04', position='Query'),
  instanceId?: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.', example='dsw-730xxxxxxxxxx', position='Query'),
  instanceName?: string(name='InstanceName', description='The instance name.', example='training_data', position='Query'),
  labels?: map[string]any(name='Labels', description='The labels. A maximum of four labels are supported.', example='{
  "key1": "value1",
  "key2": "value2",
  "key3": "value3"
}', shrink='json', position='Query'),
  maxCpu?: string(name='MaxCpu', description='The maximum number of CPUs. Unit: 0.001 CPU. The value 1000 indicates one CPU.', example='30000', position='Query'),
  maxGpu?: string(name='MaxGpu', description='The maximum number of GPUs. Unit: 0.001 GPU. The value 1000 indicates one GPU.', example='8000', position='Query'),
  maxGpuMemory?: string(name='MaxGpuMemory', description='The maximum memory size per GPU card. Unit: GB.', example='16', position='Query'),
  maxMemory?: string(name='MaxMemory', description='The maximum memory size. Unit: GB.', example='48', position='Query'),
  minCpu?: string(name='MinCpu', description='The minimum number of CPUs. Unit: 0.001 CPU. The value 1000 indicates one CPU.', example='2000', position='Query'),
  minGpu?: string(name='MinGpu', description='The minimum number of GPUs. Unit: 0.001 GPU. The value 1000 indicates one GPU.', example='100', position='Query'),
  minGpuMemory?: string(name='MinGpuMemory', description='The minimum memory size per GPU card. Unit: GB.', example='8', position='Query'),
  minMemory?: string(name='MinMemory', description='The minimum memory size. Unit: GB.', example='4', position='Query'),
  order?: string(name='Order', description='The order that you use to sort the query results.

Valid values:

*   ASC
*   DESC', example='DESC', position='Query'),
  oversoldInfo?: string(name='OversoldInfo', position='Query'),
  oversoldType?: string(name='OversoldType', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  paymentType?: string(name='PaymentType', description='The billing method.

Valid values:

*   PayAsYouGo
*   Subscription', example='PayAsYouGo', position='Query'),
  resourceId?: string(name='ResourceId', description='The resource group ID. If you leave this parameter empty, the instances in the pay-as-you-go resource group are queried. If you set this parameter to ALL, all instances are queried.', example='rg-123456789', position='Query'),
  sortBy?: string(name='SortBy', description='The field that you use to sort the query results.

Valid values:

*   Priority
*   GmtCreateTime
*   GmtModifiedTime', example='gmtCreate', position='Query'),
  status?: string(name='Status', description='The instance status.

Valid values:

*   Creating
*   SaveFailed
*   Stopped
*   Failed
*   ResourceAllocating
*   Stopping
*   Updating
*   Saving
*   Queuing
*   Recovering
*   Starting
*   Running
*   Saved
*   Deleting
*   EnvPreparing', example='Running', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tag', description='The tags.', shrink='json', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='40823', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  instances?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', description='The accelerator type of the instance. Valid values:

*   CPU
*   GPU', example='CPU'),
      accessibility?: string(name='Accessibility', description='The accessibility. Valid values:

*   PRIVATE (default): The instances are accessible only to you and the administrator of the workspace.
*   PUBLIC: The instances are accessible only to all members in the workspace.', example='PRIVATE'),
      accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', description='The accumulated running duration. Unit: milliseconds.', example='3600000'),
      affinity?: {
        CPU?: {
          enable?: boolean(name='Enable', description='Indicates whether the CPU affinity feature was enabled.

true false', example='true'),
        }(name='CPU', description='The CPU affinity configuration. Only subscription instances that use general-purpose computing resources support CPU affinity configuration.'),
      }(name='Affinity', description='The affinity configuration.'),
      cloudDisks?: [ 
        {
          capacity?: string(name='Capacity', description='The cloud disk capacity.', example='30Gi'),
          mountPath?: string(name='MountPath', description='The mount path of the cloud disk in the container.', example='/mmt/workspace'),
          path?: string(name='Path', description='The directory on the cloud disk that is mounted to the container.', example='/workspace'),
          subType?: string(name='SubType', description='The cloud disk type. The value rootfs indicates that the cloud disk is used as the root file system (rootfs).', example='rootfs'),
        }
      ](name='CloudDisks', description='The cloud disks of the instance.', example='[]'),
      credentialConfig?: CredentialConfig(name='CredentialConfig', description='The credential configuration.'),
      datasets?: [ 
        {
          datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-vsqjvsjp4orp5l206u'),
          datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1'),
          dynamic?: boolean(name='Dynamic', description='Indicates whether dynamic mounting was enabled. Default value: false.', example='false'),
          mountAccess?: string(name='MountAccess', description='The read and write permissions. Valid values: RW and RO.', example='RW'),
          mountPath?: string(name='MountPath', description='The mount path in the container.', example='/mnt/data'),
          optionType?: string(name='OptionType', description='The type of the mount option.', example='FastReadWrite'),
          options?: string(name='Options', description='The mount type of the dataset.', example='{
  "fs.oss.download.thread.concurrency": "10",
  "fs.oss.upload.thread.concurrency": "10",
  "fs.jindo.args": "-oattr_timeout=3 -oentry_timeout=0 -onegative_timeout=0 -oauto_cache -ono_symlink"
}'),
          uri?: string(name='Uri', description='The dataset URI.', example='oss://bucket-name.oss-cn-shanghai-internal.aliyuncs.com/data/path/'),
        }
      ](name='Datasets', description='The datasets.'),
      driver?: string(name='Driver', description='The NVIDIA driver configuration.', example='535.54.03'),
      dynamicMount?: DynamicMount(name='DynamicMount', description='The dynamic mount configurations.'),
      ecsSpec?: string(name='EcsSpec', description='The ECS instance type of the instance.', example='ecs.c6.large'),
      environmentVariables?: map[string]string(name='EnvironmentVariables', description='The environment variables.', example='{userName: "Chris"}'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The time when the instance was created.', example='2021-01-12T14:36:01Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the instance was modified.', example='2021-01-12T14:36:01Z'),
      idleInstanceCuller?: {
        cpuPercentThreshold?: int32(name='CpuPercentThreshold', description='The CPU utilization threshold. Unit: percentage. Valid values: 1 to 100. If the CPU utilization of the instance is lower than this threshold, the instance is considered idle.', example='20'),
        gpuPercentThreshold?: int32(name='GpuPercentThreshold', description='The GPU utilization threshold. Unit: percentage. Valid values: 1 to 100. This parameter takes effect only if the instance is of the GPU instance type. If both CPU and GPU utilization is lower than the thresholds, the instance is considered idle.', example='10'),
        idleTimeInMinutes?: int32(name='IdleTimeInMinutes', description='The time duration for which the instance is idle. Unit: minutes.', example='30'),
        instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
        maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', description='The maximum time duration for which the instance is idle. Unit: minutes. If the time duration for which the instance is idle exceeds this value, the system automatically stops the instance.', example='60'),
      }(name='IdleInstanceCuller', description='The rule for stopping idle instances.', example='{"InstanceId":"dsw-05cefd0be2e5a278","CpuPercentThreshold":20,"GpuPercentThreshold":10,"MaxIdleTimeInMinutes":120,"IdleTimeInMinutes":30}'),
      imageAuth?: string(name='ImageAuth', description='The Base64-encoded account and password for the user\\"s private image. The password will be hidden.', example='aGFyYm9yYWlAeGltYWxheWE6KioqKioq'),
      imageId?: string(name='ImageId', description='The image ID.', example='image-05cefd0be2exxxx'),
      imageName?: string(name='ImageName', description='The image name.', example='py36_cpu_tf1.12_ubuntu'),
      imageUrl?: string(name='ImageUrl', description='The image address.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
      instanceName?: string(name='InstanceName', description='The instance name.', example='training_data'),
      instanceShutdownTimer?: {
        dueTime?: string(name='DueTime', description='The scheduled stop time.', example='2021-01-12T14:36:01Z'),
        gmtCreateTime?: string(name='GmtCreateTime', description='The time when the instance was created.', example='2021-01-12T14:36:01Z'),
        gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the instance was modified.', example='2021-01-12T14:36:01Z'),
        instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
        remainingTimeInMs?: long(name='RemainingTimeInMs', description='The remaining time before the instance is stopped.', example='3600000'),
      }(name='InstanceShutdownTimer', description='The scheduled stop task.'),
      instanceSnapshotList?: [ 
        {
          gmtCreateTime?: string(name='GmtCreateTime', description='The time when the snapshot was created.', example='2021-01-12T14:36:01Z'),
          gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the snapshot was modified.', example='2021-01-12T14:36:01Z'),
          imageId?: string(name='ImageId', description='The image ID.', example='image-05cefd0be2exxxx'),
          imageName?: string(name='ImageName', description='The image name.', example='py36_cpu_tf1.12_ubuntu'),
          imageUrl?: string(name='ImageUrl', description='The image URL.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
          reasonCode?: string(name='ReasonCode', description='The error code of the instance snapshot.', example='Internal Error'),
          reasonMessage?: string(name='ReasonMessage', description='The error message of the instance snapshot.', example='ImagePullBackOff'),
          repositoryUrl?: string(name='RepositoryUrl', description='The URL of the image repository.', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
          status?: string(name='Status', description='The status of the instance snapshot.', example='Pushing'),
        }
      ](name='InstanceSnapshotList', description='The instance snapshots.', example='[]'),
      instanceUrl?: string(name='InstanceUrl', description='The instance URL.', example='https://dsw-cn-shanghai.data.aliyun.com/notebook.htm?instance=39772#/'),
      jupyterlabUrl?: string(name='JupyterlabUrl', description='The JupyterLab URL.', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/lab/'),
      labels?: [ 
        {
          key?: string(name='Key', description='The custom label key.', example='stsTokenOwner'),
          value?: string(name='Value', description='The custom label value.', example='123xxxxxxxx'),
        }
      ](name='Labels', description='The custom labels.', example='{\\"foo\\": \\"bar\\"}'),
      latestSnapshot?: {
        gmtCreateTime?: string(name='GmtCreateTime', description='The time when the snapshot was created.', example='2021-01-12T14:36:01Z'),
        gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the snapshot was modified.', example='2021-01-12T14:36:01Z'),
        imageId?: string(name='ImageId', description='The image ID.', example='image-05cefd0be2exxxx'),
        imageName?: string(name='ImageName', description='The image name.', example='py36_cpu_tf1.12_ubuntu'),
        imageUrl?: string(name='ImageUrl', description='The image URL.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
        reasonCode?: string(name='ReasonCode', description='The error code of the instance snapshot.', example='Internal Error'),
        reasonMessage?: string(name='ReasonMessage', description='The error message of the instance snapshot.', example='ImagePullBackOff'),
        repositoryUrl?: string(name='RepositoryUrl', description='The URL of the image repository.', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
        status?: string(name='Status', description='The status of the instance snapshot.', example='Pushing'),
      }(name='LatestSnapshot', description='The user image that was latest saved.'),
      oversoldInfo?: string(name='OversoldInfo'),
      oversoldType?: string(name='OversoldType'),
      paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   PayAsYouGo
*   Subscription', example='PayAsYouGo'),
      priority?: long(name='Priority', description='The priority based on which resources are allocated to instances. Resources are preferentially allocated to instances with higher priorities.', example='1'),
      reasonCode?: string(name='ReasonCode', description='The error code of the instance.', example='Internal Error'),
      reasonMessage?: string(name='ReasonMessage', description='The cause of the instance error.', example='ImagePullBackOff'),
      requestedResource?: {
        CPU?: string(name='CPU', description='The number of CPU cores.', example='32'),
        GPU?: string(name='GPU', description='The number of GPUs.', example='4'),
        GPUType?: string(name='GPUType', description='The GPU memory type.', example='v100'),
        memory?: string(name='Memory', description='The memory size.', example='32'),
        sharedMemory?: string(name='SharedMemory', description='The size of the shared memory.', example='32'),
      }(name='RequestedResource', description='The resource configurations.', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}'),
      resourceId?: string(name='ResourceId', description='The resource ID. This parameter is valid only if you set PaymentType to Subscription.', example='dsw-123456789'),
      resourceName?: string(name='ResourceName', description='The specifications.

*   In pay-as-you-go scenarios, the value is the specifications of the purchased ECS instance type.
*   In subscription scenarios, the value is the requested number of CPU cores and memory size.', example='resource_group'),
      status?: string(name='Status', description='The instance status.', example='Running'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
          tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
        }
      ](name='Tags', description='The tags.'),
      terminalUrl?: string(name='TerminalUrl', description='The terminal URL.', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/tty/'),
      userId?: string(name='UserId', description='The user ID.', example='1612285282502324'),
      userName?: string(name='UserName', description='The username.', example='测试用户'),
      userVpc?: {
        bandwidthLimit?: BandwidthLimit(name='BandwidthLimit'),
        defaultRoute?: string(name='DefaultRoute', description='The default route.', example='eth0 | eth1'),
        extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='The extended CIDR blocks.', example='["192.168.0.1/24", "192.168.1.1/24"]'),
        forwardInfos?: [
          ForwardInfoResponse
        ](name='ForwardInfos', description='The forward information.'),
        securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-xxxxxx'),
        vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-xxxxx'),
        vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-xxxxx'),
      }(name='UserVpc', description='The virtual private cloud (VPC) configurations.'),
      webIDEUrl?: string(name='WebIDEUrl', description='The Web IDE URL.', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/ide/'),
      workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='40823'),
      workspaceName?: string(name='WorkspaceName', description='The workspace name.', example='training_data'),
      workspaceSource?: string(name='WorkspaceSource', description='The storage for the workspace. If you leave this parameter empty, the workspace uses File Storage NAS (NAS) storage, cloud disks, or local disks in sequence.', example='d-123456789'),
    }
  ](name='Instances', description='The instances returned on this page.'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of instances.', example='35'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v2/instances', 'json', false, 'json', request);
}

model ListSystemLogsRequest {
  gmtEndTime?: string(name='GmtEndTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2020-12-08T16:00:00Z', position='Query'),
  gmtStartTime?: string(name='GmtStartTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2020-11-08T16:00:00Z', position='Query'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx', position='Query'),
  logLevel?: string(name='LogLevel', example='Error', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='100', position='Query'),
  problemCategory?: string(name='ProblemCategory', example='InstanceStartFailed', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  sourceRequestId?: string(name='SourceRequestId', example='473469C7-******5-B3DB-A3DC0DE3C83E', position='Query'),
  sourceType?: string(name='SourceType', example='NotebookMainContainerLogs', position='Query'),
}

model ListSystemLogsResponseBody = {
  systemLogs?: [ 
    {
      content?: string(name='Content', example='You are using******'),
      gmtCreateTime?: string(name='GmtCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2020-10-08T16:00:00Z'),
      level?: string(name='Level', example='Error。'),
    }
  ](name='SystemLogs'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListSystemLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSystemLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSystemLogs  ListSystemLogsRequest
  * @return ListSystemLogsResponse
 */
async function listSystemLogs(request: ListSystemLogsRequest): ListSystemLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSystemLogs', 'GET', '/api/v2/systemlogs', 'json', false, 'json', request);
}

model StartInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartInstance  StartInstanceRequest
  * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartInstance', 'PUT', '/api/v2/instances/{InstanceId}/start', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  saveImage?: boolean(name='SaveImage', example='false', position='Query'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopInstance  StopInstanceRequest
  * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopInstance', 'PUT', '/api/v2/instances/{InstanceId}/stop', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='InstanceId', description='The instance ID. You can call [ListInstances](https://help.aliyun.com/document_detail/470439.html) to obtain the instance ID.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  accessibility?: string(name='Accessibility', description='The visibility of the instance.

Valid values:

*   PUBLIC: Accessible to all members in the workspace.
*   PRIVATE: Accessible only to you and the administrator of the workspace.', example='PRIVATE', position='Body'),
  affinity?: {
    CPU?: {
      enable?: boolean(name='Enable', description='Specifies whether CPU affinity is enabled.

*   true
*   false', example='true'),
    }(name='CPU', description='The CPU affinity configuration. Only subscription instances that use general-purpose computing resources support CPU affinity configuration.'),
  }(name='Affinity', description='The affinity configuration.', position='Body'),
  cloudDisks?: [ 
    {
      capacity?: string(name='Capacity', description='If **Resource Type** is **Public Resource** or if **Resource Quota** is subscription-based general-purpose computing resources (CPU cores ≥ 2 and memory ≥ 4 GB, or configured with GPU):

Each instance has a free system disk quota of 100 GiB for persistent storage. **If the DSW instance is stopped and not launched for more than 15 days, the disk is cleared**. The disk can be expanded. For specific pricing, refer to the console.

**

**Warning**

*   After the expansion, you cannot reduce the storage space. Proceed with caution.

*   After the expansion, the disk is not cleared if the instance is stopped for more than 15 days. However, it will continue to incur fees.

*   If you delete the instance, the system disk is also released and the data stored in the disk is deleted. Make sure that you have backed up your data before you delete the instance.

If you need persistent storage, you can **mount a dataset** or add the OSS, NAS, or CPFS path to the **storage path**.', example='100Gi'),
      subType?: string(name='SubType', description='Disk type:

*   rootfs: Mounts the disk as a system disk. The system environment is stored on the disk.', example='rootfs'),
    }
  ](name='CloudDisks', description='The cloud disks.', example='[]', position='Body'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', description='The credential configuration.', position='Body'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='The dataset ID. If the dataset is read-only, you cannot change the dataset pemission from read-only to read and write by using MountAccess.

You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID. If you configure the dataset ID, you cannot configure the dataset URI.', example='d-vsqjvsjp4orp5l206u'),
      datasetVersion?: string(name='DatasetVersion', description='The dataset version. You must also configure DatasetId. If you leave this parameter empty, the value v1 is used by default.', example='v1'),
      dynamic?: boolean(name='Dynamic', description='Specifies whether dynamic mounting is enabled. Default value: false.

*   Currently, only instances using general-purpose computing resources are supported.
*   Currently, only OSS datasets are supported. The mounted datasets are read-only.
*   The MountPath of the dynamically mounted dataset must be a subpath of the root path. Example: /mnt/dynamic/data1/
*   A dynamically mounted dataset must be after non-dynamic datasets.', example='false'),
      mountAccess?: string(name='MountAccess', description='The read and write permissions of the dataset. If the dataset is read-only, it cannot be changed to read and write.', example='RW'),
      mountPath?: string(name='MountPath', description='The mount path of the dataset.', example='/mnt/data'),
      optionType?: string(name='OptionType', description='The mount type. You cannot specify Options at the same time. This is deprecated, you can use Options instead.', example='ReadOnly', deprecated='true'),
      options?: string(name='Options', description='The custom dataset mount options. Only OSS is supported. You cannot specify OptionType at the same time. For more information, see [DSW mount configurations](https://www.alibabacloud.com/help/en/pai/user-guide/read-and-write-dataset-data).', example='{
  "fs.oss.download.thread.concurrency": "10",
  "fs.oss.upload.thread.concurrency": "10",
  "fs.jindo.args": "-oattr_timeout=3 -oentry_timeout=0 -onegative_timeout=0 -oauto_cache -ono_symlink"
}'),
      uri?: string(name='Uri', description='The URI of the storage service directory, which can be directly mounted. This parameter is mutually exclusive with DatasetId.

URI formats of different types of storage:

*   OSS: oss://bucket-name.oss-cn-shanghai-internal.aliyuncs.com/data/path/
*   NAS: nas://29\\*\\*d-b12\\*\\*\\*\\*446.cn-hangzhou.nas.aliyuncs.com/data/path/
*   Extreme NAS: nas://29\\*\\*\\*\\*123-y\\*\\*r.cn-hangzhou.extreme.nas.aliyuncs.com/data/path/
*   CPFS: cpfs://cpfs-213\\*\\*\\*\\*87.cn-wulanchabu/ptc-292\\*\\*\\*\\*\\*cbb/exp-290\\*\\*\\*\\*\\*\\*\\*\\*03e/data/path/
*   Lingjun CPFS: bmcpfs://cpfs-290\\*\\*\\*\\*\\*\\*foflh-vpc-x\\*\\*\\*\\*8r.cn-wulanchabu.cpfs.aliyuncs.com/data/path/', example='oss://bucket-name.oss-cn-shanghai-internal.aliyuncs.com/data/path/'),
    }
  ](name='Datasets', description='The datasets.', position='Body'),
  disassociateCredential?: boolean(name='DisassociateCredential', description='Specifies whether to delete the credential injection information.', example='false', position='Body'),
  disassociateDatasets?: boolean(name='DisassociateDatasets', description='Specifies whether to delete the associated datasets.

*   true
*   false', example='false', position='Body'),
  disassociateDriver?: boolean(name='DisassociateDriver', description='Specifies whether to delete the NVIDIA driver configuration.', example='false', position='Body'),
  disassociateEnvironmentVariables?: boolean(name='DisassociateEnvironmentVariables', position='Body'),
  disassociateForwardInfos?: boolean(name='DisassociateForwardInfos', description='Specifies whether to delete the associated forward information.', example='false', position='Body'),
  disassociateUserCommand?: boolean(name='DisassociateUserCommand', position='Body'),
  disassociateVpc?: boolean(name='DisassociateVpc', description='Specifies whether to delete the associated user VPC.', example='false', position='Body'),
  driver?: string(name='Driver', description='The NVIDIA driver configuration.', example='535.54.03', position='Body'),
  dynamicMount?: DynamicMount(name='DynamicMount', description='The dynamic mount configuration.', position='Body'),
  ecsSpec?: string(name='EcsSpec', description='The ECS instance type of the instance. You can call [ListEcsSpecs](https://help.aliyun.com/document_detail/470423.html) to obtain the ECS instance type.', example='ecs.c6.large', position='Body'),
  environmentVariables?: map[string]any(name='EnvironmentVariables', position='Body'),
  imageAuth?: string(name='ImageAuth', description='The Base64-encoded account and password for the user‘s private image. The password will be hidden.', example='****', position='Body'),
  imageId?: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.', example='image-05cefd0be2exxxx', position='Body'),
  imageUrl?: string(name='ImageUrl', description='The image address. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image address.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu', position='Body'),
  instanceName?: string(name='InstanceName', description='The instance name. Format requirements:

*   The name can contain only letters, digits, and underscores (_).
*   The name can be up to 27 characters in length.', example='training_data', position='Body'),
  oversoldType?: string(name='OversoldType', position='Body'),
  priority?: long(name='Priority', description='The priority based on which resources are allocated to instances. Valid values: 1 to 9.

*   1: the lowest priority.
*   9 is the highest priority.', example='1', position='Body'),
  requestedResource?: {
    CPU?: string(name='CPU', description='The number of vCPU cores.', example='32'),
    GPU?: string(name='GPU', description='The number of GPUs.', example='4'),
    GPUType?: string(name='GPUType', description='The GPU type.', example='v100'),
    memory?: string(name='Memory', description='The memory size. Unit: GB.', example='32'),
    sharedMemory?: string(name='SharedMemory', description='The shared memory size. Unit: GB.', example='32'),
  }(name='RequestedResource', description='The resource configurations.', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}', position='Body'),
  userCommand?: {
    onStart?: {
      content?: string(name='Content'),
    }(name='OnStart'),
  }(name='UserCommand', position='Body'),
  userId?: string(name='UserId', description='the User ID of the instance.', example='16122**********', position='Body'),
  userVpc?: {
    bandwidthLimit?: BandwidthLimit(name='BandwidthLimit'),
    defaultRoute?: string(name='DefaultRoute', description='The default route. Valid values:

*   eth0: The default network interface is used to access the Internet through the public gateway.
*   eth1: The user\\"s Elastic Network Interface is used to access the Internet through the private gateway.', example='eth0'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='The extended CIDR blocks.

*   If you leave VSwitchId empty, this parameter is not required and the system automatically obtains all CIDR blocks in the VPC.
*   If VSwitchId is not empty, this parameter is required. Specify all CIDR blocks in the VPC.', example='["192.168.0.1/24", "192.168.1.1/24"]'),
    forwardInfos?: [
      ForwardInfo
    ](name='ForwardInfos', description='The forward configuration of the instance.'),
    securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-xxxxxx'),
    vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-xxxxx'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-xxxxx'),
  }(name='UserVpc', description='The virtual private cloud (VPC) configurations.', position='Body'),
  workspaceSource?: string(name='WorkspaceSource', description='Specifies the storage corresponding to the working directory. You can mount disks or datasets to /mnt/workspace at the same time. OSS datasets and dynamically mounted datasets are not supported.

Valid values:

*   rootfsCloudDisk: Mount disk to the working directory.
*   Mount path of the dataset, such as /mnt/data: Datasets in URI format only support this method.
*   Dataset ID, such as d-vsqjvs\\*\\*\\*\\*rp5l206u: If a single dataset is mounted to multiple paths, the first path is selected. We recommend that you do not use this method, use the mount path instead.

If you leave this parameter empty:

*   If the instance uses cloud disks, cloud disks are selected by default.
*   if no disks are available, the first NAS or CPFS dataset is selected as the working directory.
*   If no disk, NAS, or CPFS datasets is available, the host space is used.', example='/mnt/data', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='Code', description='The status code. Valid values:

*   InternalError: an internal error. All errors, except for parameter validation errors, are classified as internal errors.
*   ValidationError: a parameter validation error.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. Valid values:

*   400
*   404', example='null'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', description='The response message.', example='"XXX"'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstance  UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PUT', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model UpdateInstanceLabelsRequest {
  instanceId: string(name='InstanceId', description='The ID of the DSW instance.

This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  labels: [ 
    {
      key: string(name='Key', description='The key of the custom tag.

This parameter is required.', example='customLabelKey'),
      value: string(name='Value', description='The value of the custom tag.

This parameter is required.', example='labelValue'),
    }
  ](name='Labels', description='The tags that you want to update.

This parameter is required.', position='Body'),
}

model UpdateInstanceLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
}

model UpdateInstanceLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceLabels  UpdateInstanceLabelsRequest
  * @return UpdateInstanceLabelsResponse
 */
async function updateInstanceLabels(request: UpdateInstanceLabelsRequest): UpdateInstanceLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceLabels', 'PUT', '/api/v2/instances/{InstanceId}/labels', 'json', false, 'json', request);
}

