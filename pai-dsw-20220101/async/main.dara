/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'pai-dsw';
  @version = '2022-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CredentialConfig {
  aliyunEnvRoleKey?: string(name='AliyunEnvRoleKey', example='0'),
  configs?: [ 
    {
      key: string(name='Key', description='This parameter is required.', example='0'),
      roles?: [ 
        {
          assumeRoleFor?: string(name='AssumeRoleFor', example='123******'),
          policy?: string(name='Policy', example='{}'),
          roleArn: string(name='RoleArn', description='This parameter is required.', example='acs:ram::123******:role/****'),
          roleType: string(name='RoleType', description='This parameter is required.', example='service'),
          userInfo?: {
            accessKeyId?: string(name='AccessKeyId', example='LT********'),
            id?: string(name='Id', example='456******'),
            securityToken?: string(name='SecurityToken', example='********'),
            type?: string(name='Type', example='S'),
          }(name='UserInfo'),
        }
      ](name='Roles'),
      type: string(name='Type', description='This parameter is required.', example='Role'),
    }
  ](name='Configs'),
  enable?: boolean(name='Enable', example='true'),
}

model DemoCategory {
  categoryCode?: string(name='CategoryCode', example='sdk'),
  categoryName?: string(name='CategoryName', example='SDK Usage'),
  order?: long(name='Order', example='12'),
  subCategories?: [
    DemoCategory
  ](name='SubCategories'),
}

model ForwardInfo {
  containerName?: string(name='ContainerName', example='dsw-notebook'),
  eipAllocationId?: string(name='EipAllocationId', example='eip-25877c70gddh****'),
  enable?: boolean(name='Enable', example='true'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  port?: string(name='Port', example='22'),
  SSHPublicKey?: string(name='SSHPublicKey'),
}

model ForwardInfoResponse {
  connectInfo?: {
    internet?: {
      endpoint?: string(name='Endpoint', example='47.111.119.114'),
      port?: string(name='Port', example='22'),
    }(name='Internet'),
    intranet?: {
      endpoint?: string(name='Endpoint', example='dsw-notebook-22-urz3u6cnu0uts7ej9r.dsw-5cc6083084818f60.dsw.pai.alibaba.com'),
      port?: string(name='Port', example='22'),
    }(name='Intranet'),
    message?: string(name='Message', example='DNAT and privateZone are both ready.'),
    phase?: string(name='Phase', example='Ready'),
  }(name='ConnectInfo'),
  containerName?: string(name='ContainerName', example='dsw-notebook'),
  eipAllocationId?: string(name='EipAllocationId', example='eip-25877c70gddh****'),
  enable?: boolean(name='Enable', example='true'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  port?: string(name='Port', example='22'),
  SSHPublicKey?: string(name='SSHPublicKey'),
}

model CreateIdleInstanceCullerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  cpuPercentThreshold?: int32(name='CpuPercentThreshold', example='20', position='Body'),
  gpuPercentThreshold?: int32(name='GpuPercentThreshold', example='10', position='Body'),
  maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', example='60', position='Body'),
}

model CreateIdleInstanceCullerResponseBody = {
  code?: string(name='Code', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model CreateIdleInstanceCullerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIdleInstanceCullerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateIdleInstanceCuller  CreateIdleInstanceCullerRequest
  * @return CreateIdleInstanceCullerResponse
 */
async function createIdleInstanceCuller(request: CreateIdleInstanceCullerRequest): CreateIdleInstanceCullerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIdleInstanceCuller', 'POST', '/api/v2/instances/{InstanceId}/idleinstanceculler', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  affinity?: {
    CPU?: {
      enable?: boolean(name='Enable'),
    }(name='CPU'),
  }(name='Affinity', position='Body'),
  cloudDisks?: [ 
    {
      capacity?: string(name='Capacity', example='30Gi'),
      mountPath?: string(name='MountPath', example='/mmt/workspace'),
      path?: string(name='Path', example='workspace'),
      status?: {
        available?: long(name='Available'),
        capacity?: long(name='Capacity'),
        usage?: long(name='Usage'),
      }(name='Status'),
      subType?: string(name='SubType', example='rootfs'),
    }
  ](name='CloudDisks', example='[]', position='Body'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', position='Body'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', example='d-vsqjvsjp4orp5l206u'),
      mountPath?: string(name='MountPath', example='/mnt/data'),
      optionType?: string(name='OptionType', deprecated='true'),
      options?: string(name='Options'),
      uri?: string(name='Uri', example='oss://bucket.oss-cn-shanghai.aliyuncs.com/data/path/'),
    }
  ](name='Datasets', position='Body'),
  driver?: string(name='Driver', example='535.54.03', position='Body'),
  ecsSpec?: string(name='EcsSpec', example='ecs.c6.large', position='Body'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', example='{userName: "Chris"}', position='Body'),
  imageAuth?: string(name='ImageAuth', position='Body'),
  imageId?: string(name='ImageId', example='image-05cefd0be2exxxx', position='Body'),
  imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu', position='Body'),
  instanceName?: string(name='InstanceName', example='training_data', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', example='stsTokenOwner'),
      value?: string(name='Value', example='123xxxxxxxx'),
    }
  ](name='Labels', example='{\\"foo\\": \\"bar\\"}', position='Body'),
  priority?: long(name='Priority', example='1', position='Body'),
  requestedResource?: {
    CPU?: string(name='CPU', example='32'),
    GPU?: string(name='GPU', example='4'),
    GPUType?: string(name='GPUType', example='v100'),
    memory?: string(name='Memory', example='32'),
    sharedMemory?: string(name='SharedMemory', example='32'),
  }(name='RequestedResource', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}', position='Body'),
  resourceId?: string(name='ResourceId', example='dsw-123456789', position='Body'),
  userId?: string(name='UserId', example='1612285282502324', position='Body'),
  userVpc?: {
    defaultRoute?: string(name='DefaultRoute', example='eth0 | eth1'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', example='["192.168.0.1/24", "192.168.1.1/24"]'),
    forwardInfos?: [
      ForwardInfo
    ](name='ForwardInfos'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-xxxxxx'),
    vSwitchId?: string(name='VSwitchId', example='vsw-xxxxx'),
    vpcId?: string(name='VpcId', example='vpc-xxxxx'),
  }(name='UserVpc', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='40823', position='Body'),
  workspaceSource?: string(name='WorkspaceSource', example='d-123456789', position='Body'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/api/v2/instances', 'json', false, 'json', request);
}

model CreateInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  dueTime?: string(name='DueTime', example='2021-01-12T14:36:01Z', position='Body'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', example='3600000', position='Body'),
}

model CreateInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceShutdownTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceShutdownTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceShutdownTimer  CreateInstanceShutdownTimerRequest
  * @return CreateInstanceShutdownTimerResponse
 */
async function createInstanceShutdownTimer(request: CreateInstanceShutdownTimerRequest): CreateInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceShutdownTimer', 'POST', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model CreateInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  excludePaths?: [ string ](name='ExcludePaths', position='Body'),
  imageUrl: string(name='ImageUrl', description='This parameter is required.', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', example='stsTokenOwner'),
      value?: string(name='Value', example='123xxxxxxxx'),
    }
  ](name='Labels', example='{\\"foo\\": \\"bar\\"}', position='Body'),
  overwrite?: boolean(name='Overwrite', position='Body'),
  snapshotDescription?: string(name='SnapshotDescription', example='training_data_env', position='Body'),
  snapshotName: string(name='SnapshotName', description='This parameter is required.', example='training_data_env', position='Body'),
}

model CreateInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceSnapshot  CreateInstanceSnapshotRequest
  * @return CreateInstanceSnapshotResponse
 */
async function createInstanceSnapshot(request: CreateInstanceSnapshotRequest): CreateInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceSnapshot', 'POST', '/api/v2/instances/{InstanceId}/snapshots', 'json', false, 'json', request);
}

model DeleteIdleInstanceCullerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model DeleteIdleInstanceCullerResponseBody = {
  code?: string(name='Code', example='ValidationError'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model DeleteIdleInstanceCullerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIdleInstanceCullerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIdleInstanceCuller  DeleteIdleInstanceCullerRequest
  * @return DeleteIdleInstanceCullerResponse
 */
async function deleteIdleInstanceCuller(request: DeleteIdleInstanceCullerRequest): DeleteIdleInstanceCullerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIdleInstanceCuller', 'DELETE', '/api/v2/instances/{InstanceId}/idleinstanceculler', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model DeleteInstanceLabelsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  labelKeys: string(name='LabelKeys', description='This parameter is required.', example='labelKey1,labelKey2,labelKey3', position='Query'),
}

model DeleteInstanceLabelsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DeleteInstanceLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceLabels  DeleteInstanceLabelsRequest
  * @return DeleteInstanceLabelsResponse
 */
async function deleteInstanceLabels(request: DeleteInstanceLabelsRequest): DeleteInstanceLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceLabels', 'DELETE', '/api/v2/instances/{InstanceId}/labels', 'json', false, 'json', request);
}

model DeleteInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model DeleteInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceShutdownTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceShutdownTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceShutdownTimer  DeleteInstanceShutdownTimerRequest
  * @return DeleteInstanceShutdownTimerResponse
 */
async function deleteInstanceShutdownTimer(request: DeleteInstanceShutdownTimerRequest): DeleteInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceShutdownTimer', 'DELETE', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model DeleteInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  snapshotId: string(name='SnapshotId', description='This parameter is required.', example='snp-05cexxxxxxxxx', position='Path'),
}

model DeleteInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceSnapshot  DeleteInstanceSnapshotRequest
  * @return DeleteInstanceSnapshotResponse
 */
async function deleteInstanceSnapshot(request: DeleteInstanceSnapshotRequest): DeleteInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceSnapshot', 'DELETE', '/api/v2/instances/{InstanceId}/snapshots/{SnapshotId}', 'json', false, 'json', request);
}

model GetIdleInstanceCullerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model GetIdleInstanceCullerResponseBody = {
  code?: string(name='Code', example='ValidationError'),
  cpuPercentThreshold?: int32(name='CpuPercentThreshold', example='20'),
  gpuPercentThreshold?: int32(name='GpuPercentThreshold', example='10'),
  idleTimeInMinutes?: int32(name='IdleTimeInMinutes', example='30'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', example='60'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetIdleInstanceCullerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIdleInstanceCullerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIdleInstanceCuller  GetIdleInstanceCullerRequest
  * @return GetIdleInstanceCullerResponse
 */
async function getIdleInstanceCuller(request: GetIdleInstanceCullerRequest): GetIdleInstanceCullerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIdleInstanceCuller', 'GET', '/api/v2/instances/{InstanceId}/idleinstanceculler', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  token?: string(name='Token', position='Query'),
}

model GetInstanceResponseBody = {
  acceleratorType?: string(name='AcceleratorType', example='CPU'),
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', example='3600000'),
  affinity?: {
    CPU?: {
      enable?: boolean(name='Enable'),
    }(name='CPU'),
  }(name='Affinity'),
  cloudDisks?: [ 
    {
      capacity?: string(name='Capacity', example='30Gi'),
      mountPath?: string(name='MountPath', example='/mmt/workspace'),
      path?: string(name='Path', example='/workspace'),
      subType?: string(name='SubType', example='rootfs'),
    }
  ](name='CloudDisks', example='[]'),
  code?: string(name='Code', example='null'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', example='d-vsqjvsjp4orp5l206u'),
      mountPath?: string(name='MountPath', example='/mnt/data'),
      optionType?: string(name='OptionType'),
      options?: string(name='Options'),
      uri?: string(name='Uri', example='oss://bucket.oss-cn-shanghai.aliyuncs.com/data/path/'),
    }
  ](name='Datasets'),
  driver?: string(name='Driver', example='535.54.03'),
  ecsSpec?: string(name='EcsSpec', example='ecs.c6.large'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', example='{userName: "Chris"}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  idleInstanceCuller?: {
    cpuPercentThreshold?: int32(name='CpuPercentThreshold', example='20'),
    gpuPercentThreshold?: int32(name='GpuPercentThreshold', example='10'),
    idleTimeInMinutes?: int32(name='IdleTimeInMinutes', example='30'),
    instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
    maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', example='60'),
  }(name='IdleInstanceCuller', example='{"InstanceId":"dsw-05cefd0be2e5a278","CpuPercentThreshold":20,"GpuPercentThreshold":10,"MaxIdleTimeInMinutes":120,"IdleTimeInMinutes":30}'),
  imageAuth?: string(name='ImageAuth'),
  imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
  imageName?: string(name='ImageName', example='py36_cpu_tf1.12_ubuntu'),
  imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  instanceName?: string(name='InstanceName', example='training_data'),
  instanceShutdownTimer?: {
    dueTime?: string(name='DueTime', example='2021-01-12T14:36:01Z'),
    gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
    gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
    instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
    remainingTimeInMs?: long(name='RemainingTimeInMs', example='3600000'),
  }(name='InstanceShutdownTimer'),
  instanceSnapshotList?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='快照创建时间', example='2021-01-12T14:36:01Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='快照修改时间', example='2021-01-12T14:36:01Z'),
      imageId?: string(name='ImageId', description='镜像Id', example='image-05cefd0be2exxxx'),
      imageName?: string(name='ImageName', description='镜像名称', example='py36_cpu_tf1.12_ubuntu'),
      imageUrl?: string(name='ImageUrl', description='镜像Url', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
      reasonCode?: string(name='ReasonCode', description='实例快照错误代码', example='Internal Error'),
      reasonMessage?: string(name='ReasonMessage', description='实例快照错误消息', example='ImagePullBackOff'),
      repositoryUrl?: string(name='RepositoryUrl', description='镜像仓库Url', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
      status?: string(name='Status', description='实例快照状态', example='Pushing'),
    }
  ](name='InstanceSnapshotList', example='[]'),
  instanceUrl?: string(name='InstanceUrl', example='https://dsw-cn-shanghai.data.aliyun.com/notebook.htm?instance=39772#/'),
  jupyterlabUrl?: string(name='JupyterlabUrl', description='Jupyterlab Url。', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/lab/'),
  labels?: [ 
    {
      key?: string(name='Key', example='stsTokenOwner'),
      value?: string(name='Value', example='123xxxxxxxx'),
    }
  ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
  latestSnapshot?: {
    gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
    gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
    imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
    imageName?: string(name='ImageName', example='py36_cpu_tf1.12_ubuntu'),
    imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
    reasonCode?: string(name='ReasonCode', description='实例快照错误代码', example='Internal Error'),
    reasonMessage?: string(name='ReasonMessage', description='实例快照错误消息', example='ImagePullBackOff'),
    repositoryUrl?: string(name='RepositoryUrl', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
    status?: string(name='Status', description='实例快照状态', example='Pushing'),
  }(name='LatestSnapshot'),
  message?: string(name='Message', example='"XXX"'),
  nodeErrorRecovery?: {
    autoSwitchCountdownSeconds?: long(name='autoSwitchCountdownSeconds'),
    enableAutoSwitchOnNodeError?: boolean(name='enableAutoSwitchOnNodeError'),
    hasNodeError?: boolean(name='hasNodeError'),
  }(name='NodeErrorRecovery'),
  paymentType?: string(name='PaymentType', example='PayAsYouGo'),
  priority?: long(name='Priority', example='1'),
  reasonCode?: string(name='ReasonCode', example='Internal Error'),
  reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  requestedResource?: {
    CPU?: string(name='CPU', example='32'),
    GPU?: string(name='GPU', example='4'),
    GPUType?: string(name='GPUType', example='v100'),
    memory?: string(name='Memory', example='32'),
    sharedMemory?: string(name='SharedMemory', example='32'),
  }(name='RequestedResource', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}'),
  resourceId?: string(name='ResourceId', example='dsw-123456789'),
  resourceName?: string(name='ResourceName', example='ecs.g7.xlarge'),
  status?: string(name='Status', example='Running'),
  success?: boolean(name='Success', example='true'),
  terminalUrl?: string(name='TerminalUrl', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/tty/'),
  userId?: string(name='UserId', example='1612285282502324'),
  userName?: string(name='UserName', example='测试用户'),
  userVpc?: {
    defaultRoute?: string(name='DefaultRoute', example='eth0 | eth1'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', example='["192.168.0.1/24", "192.168.1.1/24"]'),
    forwardInfos?: [
      ForwardInfoResponse
    ](name='ForwardInfos'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-xxxxxx'),
    vSwitchId?: string(name='VSwitchId', example='vsw-xxxxx'),
    vpcId?: string(name='VpcId', description='Vpc Id。', example='vpc-xxxxx'),
  }(name='UserVpc'),
  webIDEUrl?: string(name='WebIDEUrl', description='Web IDE url。', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/ide/'),
  workspaceId?: string(name='WorkspaceId', example='40823'),
  workspaceName?: string(name='WorkspaceName', example='training_data'),
  workspaceSource?: string(name='WorkspaceSource', example='d-123456789'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model GetInstanceEventsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  endTime?: string(name='EndTime', example='2020-11-08T15:00:00Z', position='Query'),
  maxEventsNum?: int32(name='MaxEventsNum', example='2000', position='Query'),
  startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z', position='Query'),
  token?: string(name='Token', position='Query'),
}

model GetInstanceEventsResponseBody = {
  code?: string(name='Code', example='None'),
  events?: [ string ](name='Events'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='XXX'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceEvents  GetInstanceEventsRequest
  * @return GetInstanceEventsResponse
 */
async function getInstanceEvents(request: GetInstanceEventsRequest): GetInstanceEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceEvents', 'GET', '/api/v2/instances/{InstanceId}/events', 'json', false, 'json', request);
}

model GetInstanceMetricsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  endTime?: string(name='EndTime', example='2020-11-08T15:00:00Z', position='Query'),
  metricType: string(name='MetricType', description='This parameter is required.', example='GpuCoreUsage', position='Query'),
  startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z', position='Query'),
  timeStep?: string(name='TimeStep', example='15m', position='Query'),
}

model GetInstanceMetricsResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  podMetrics?: [ 
    {
      metrics?: [ 
        {
          time?: long(name='Time', example='1670890560'),
          value?: float(name='Value', example='25.901031'),
        }
      ](name='Metrics'),
      podId?: string(name='PodId', example='dsw-15870-695f44c5bc-hd6xm'),
    }
  ](name='PodMetrics'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceMetrics  GetInstanceMetricsRequest
  * @return GetInstanceMetricsResponse
 */
async function getInstanceMetrics(request: GetInstanceMetricsRequest): GetInstanceMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceMetrics', 'GET', '/api/v2/instance/{InstanceId}/metrics', 'json', false, 'json', request);
}

model GetInstanceShutdownTimerRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model GetInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', example='null'),
  dueTime?: string(name='DueTime', example='2021-01-12T14:36:01Z'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', example='3600000'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceShutdownTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceShutdownTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceShutdownTimer  GetInstanceShutdownTimerRequest
  * @return GetInstanceShutdownTimerResponse
 */
async function getInstanceShutdownTimer(request: GetInstanceShutdownTimerRequest): GetInstanceShutdownTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceShutdownTimer', 'GET', '/api/v2/instances/{InstanceId}/shutdowntimer', 'json', false, 'json', request);
}

model GetInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  snapshotId: string(name='SnapshotId', description='This parameter is required.', example='snp-05cexxxxxxxxx', position='Path'),
}

model GetInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  excludePaths?: [ string ](name='ExcludePaths'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
  imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  labels?: [ 
    {
      key?: string(name='Key', example='stsTokenOwner'),
      value?: string(name='Value', example='123xxxxxxxx'),
    }
  ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
  message?: string(name='Message', example='"XXX"'),
  reasonCode?: string(name='ReasonCode', example='Internal Error'),
  reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
  snapshotName?: string(name='SnapshotName', example='training_data_env'),
  status?: string(name='Status', example='Pushing'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceSnapshot  GetInstanceSnapshotRequest
  * @return GetInstanceSnapshotResponse
 */
async function getInstanceSnapshot(request: GetInstanceSnapshotRequest): GetInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceSnapshot', 'GET', '/api/v2/instances/{InstanceId}/snapshots/{SnapshotId}', 'json', false, 'json', request);
}

model GetLifecycleRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-9698d842b6***', position='Path'),
  endTime?: string(name='EndTime', example='2020-11-08T15:00:00Z', position='Query'),
  limit?: int32(name='Limit', example='1', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  sessionNumber?: int32(name='SessionNumber', example='1', position='Query'),
  startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z', position='Query'),
  token?: string(name='Token', position='Query'),
}

model GetLifecycleResponseBody = {
  code?: string(name='Code', example='null'),
  lifecycle?: [[ 
    {
      status?: string(name='Status', example='Starting'),
      reasonCode?: string(name='ReasonCode', example='“”'),
      reasonMessage?: string(name='ReasonMessage', example='“”'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-21T07:27:44Z'),
    }
  ]  ](name='Lifecycle', example='[[{"Status":"Creating","GmtCreateTime":"2022-09-19T22:38:00Z","Reason":"","ReasonCode":""}]]'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='35'),
}

model GetLifecycleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLifecycleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLifecycle  GetLifecycleRequest
  * @return GetLifecycleResponse
 */
async function getLifecycle(request: GetLifecycleRequest): GetLifecycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLifecycle', 'GET', '/api/v2/instances/{InstanceId}/lifecycle', 'json', false, 'json', request);
}

model GetMetricsRequest {
  instanceId?: string(name='InstanceId', example='dsw-328d2bbf605*****', position='Path'),
  dimensions?: string(name='Dimensions', example='{"userId":"16122852825*****","jobId":"dsw-328d2bbf605*****","regionId":"cn-wulanchabu","pod":"dsw-45680-76766f8778-95gxh"}', position='Query'),
  endTime?: string(name='EndTime', example='2020-11-08T16:00:00Z', position='Query'),
  length?: string(name='Length', example='10', position='Query'),
  metricName?: string(name='MetricName', example='INSTANCE_SPEC_MEMORY_SWAP', position='Query'),
  namespace?: string(name='Namespace', example='acs_pai_dsw', position='Query'),
  nextToken?: string(name='NextToken', example='15761485350009dd70bb64cff1f0fff750b08ffff073be5fb1e785e2b020f1a949d5ea14aea7fed82f01dd8****', position='Query'),
  period?: string(name='Period', example='60', position='Query'),
  startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z', position='Query'),
}

model GetMetricsResponseBody = {
  code?: string(name='Code', example='200'),
  datapoints?: string(name='Datapoints'),
  message?: string(name='Message', example='Succeed'),
  nextToken?: string(name='NextToken', example='15761485350009dd70bb64cff1f0fff750b08ffff073be5fb1e785e2b020f1a949d5ea14aea7fed82f01dd8****'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  success?: boolean(name='Success', example='true'),
}

model GetMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMetrics  GetMetricsRequest
  * @return GetMetricsResponse
 */
async function getMetrics(request: GetMetricsRequest): GetMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetrics', 'GET', '/api/v2/instance/{InstanceId}/cms/metrics', 'json', false, 'json', request);
}

model GetResourceGroupStatisticsRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='2020-11-08T15:00:00Z', position='Query'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='rg-123456789', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2020-11-08T15:00:00Z', position='Query'),
  workspaceIds: string(name='WorkspaceIds', description='This parameter is required.', example='27218,34956', position='Query'),
}

model GetResourceGroupStatisticsResponseBody = {
  code?: string(name='Code', example='InternalError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  statistics?: map[string]map[string]any(name='Statistics'),
  success?: boolean(name='Success', example='true'),
}

model GetResourceGroupStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceGroupStatistics  GetResourceGroupStatisticsRequest
  * @return GetResourceGroupStatisticsResponse
 */
async function getResourceGroupStatistics(request: GetResourceGroupStatisticsRequest): GetResourceGroupStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceGroupStatistics', 'GET', '/api/v2/resourcegroupstatistics', 'json', false, 'json', request);
}

model GetTokenRequest {
  expireTime?: int32(name='ExpireTime', example='60', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Query'),
}

model GetTokenResponseBody = {
  code?: string(name='Code', example='ValidationError'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
  token?: string(name='Token', example='*******'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetToken  GetTokenRequest
  * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'GET', '/api/v2/tokens', 'json', false, 'json', request);
}

model GetUserConfigRequest {
}

model GetUserConfigResponseBody = {
  accountSufficient?: boolean(name='AccountSufficient', example='false'),
  code?: string(name='Code', example='null'),
  enableEciDisk?: boolean(name='EnableEciDisk', example='true'),
  freeTier?: {
    endTime?: string(name='EndTime', example='2020-11-08T15:00:00Z'),
    initBaseUnit?: string(name='InitBaseUnit', example='个'),
    initBaseValue?: double(name='InitBaseValue', example='5000'),
    initShowUnit?: string(name='InitShowUnit', example='个'),
    initShowValue?: string(name='InitShowValue', example='5000'),
    isFreeTierUser?: boolean(name='IsFreeTierUser', example='true'),
    periodBaseUnit?: string(name='PeriodBaseUnit', example='个'),
    periodBaseValue?: double(name='PeriodBaseValue', example='3000'),
    periodShowUnit?: string(name='PeriodShowUnit', example='个'),
    periodShowValue?: string(name='PeriodShowValue', example='3000'),
    startTime?: string(name='StartTime', example='2020-11-08T15:00:00Z'),
    status?: string(name='Status', example='valid'),
  }(name='FreeTier'),
  freeTierSpecAvailable?: boolean(name='FreeTierSpecAvailable', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  message?: string(name='Message', example='"Access denied"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model GetUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserConfig  GetUserConfigRequest
  * @return GetUserConfigResponse
 */
async function getUserConfig(request: GetUserConfigRequest): GetUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserConfig', 'GET', '/api/v2/userconfig', 'json', false, 'json', request);
}

model ListEcsSpecsRequest {
  acceleratorType: string(name='AcceleratorType', description='This parameter is required.', example='PRIVATE', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='gmtCreate', position='Query'),
}

model ListEcsSpecsResponseBody = {
  code?: string(name='Code', example='null'),
  ecsSpecs?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', example='CPU'),
      CPU?: long(name='CPU', example='32'),
      currency?: string(name='Currency', example='CNY'),
      GPU?: long(name='GPU', example='4'),
      GPUType?: string(name='GPUType', example='v100'),
      instanceBandwidthRx?: long(name='InstanceBandwidthRx', example='5120000'),
      instanceType?: string(name='InstanceType', example='ecs.gn5-c28g1.7xlarge'),
      isAvailable?: boolean(name='IsAvailable', example='True'),
      labels?: [ 
        {
          key?: string(name='Key', example='stsTokenOwner'),
          value?: string(name='Value'),
        }
      ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
      memory?: float(name='Memory', example='32'),
      price?: double(name='Price', example='22.8'),
      systemDiskCapacity?: long(name='SystemDiskCapacity', example='500'),
    }
  ](name='EcsSpecs'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='35'),
}

model ListEcsSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEcsSpecsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEcsSpecs  ListEcsSpecsRequest
  * @return ListEcsSpecsResponse
 */
async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEcsSpecs', 'GET', '/api/v2/ecsspecs', 'json', false, 'json', request);
}

model ListInstanceSnapshotRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='gmtCreate', position='Query'),
}

model ListInstanceSnapshotResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  snapshots?: [ 
    {
      excludePaths?: [ string ](name='ExcludePaths', example='["/path1","/path2"]'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
      imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
      imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
      instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
      labels?: [ 
        {
          key?: string(name='Key', example='stsTokenOwner'),
          value?: string(name='Value', example='123xxxxxxxx'),
        }
      ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
      reasonCode?: string(name='ReasonCode', example='Internal Error'),
      reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
      snapshotId?: string(name='SnapshotId', example='snp-05cexxxxxxxxx'),
      snapshotName?: string(name='SnapshotName', example='training_data_env'),
      status?: string(name='Status', example='Pushing'),
    }
  ](name='Snapshots'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='35'),
}

model ListInstanceSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceSnapshot  ListInstanceSnapshotRequest
  * @return ListInstanceSnapshotResponse
 */
async function listInstanceSnapshot(request: ListInstanceSnapshotRequest): ListInstanceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceSnapshot', 'GET', '/api/v2/instances/{InstanceId}/snapshots', 'json', false, 'json', request);
}

model ListInstanceStatisticsRequest {
  workspaceIds: string(name='WorkspaceIds', description='This parameter is required.', example='27218,34956', position='Query'),
}

model ListInstanceStatisticsResponseBody = {
  code?: string(name='Code', example='InternalError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  statistics?: map[string]map[string]any(name='Statistics'),
  success?: boolean(name='Success', example='true'),
}

model ListInstanceStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceStatistics  ListInstanceStatisticsRequest
  * @return ListInstanceStatisticsResponse
 */
async function listInstanceStatistics(request: ListInstanceStatisticsRequest): ListInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceStatistics', 'GET', '/api/v2/instancestatistics', 'json', false, 'json', request);
}

model ListInstancesRequest {
  acceleratorType?: string(name='AcceleratorType', example='AcceleratorType', position='Query'),
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Query'),
  createUserId?: string(name='CreateUserId', position='Query'),
  gpuType?: string(name='GpuType', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx', position='Query'),
  instanceName?: string(name='InstanceName', example='training_data', position='Query'),
  labels?: map[string]any(name='Labels', shrink='json', position='Query'),
  maxCpu?: string(name='MaxCpu', position='Query'),
  maxGpu?: string(name='MaxGpu', position='Query'),
  maxGpuMemory?: string(name='MaxGpuMemory', position='Query'),
  maxMemory?: string(name='MaxMemory', position='Query'),
  minCpu?: string(name='MinCpu', position='Query'),
  minGpu?: string(name='MinGpu', position='Query'),
  minGpuMemory?: string(name='MinGpuMemory', position='Query'),
  minMemory?: string(name='MinMemory', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  paymentType?: string(name='PaymentType', example='PayAsYouGo', position='Query'),
  resourceId?: string(name='ResourceId', example='rg-123456789', position='Query'),
  sortBy?: string(name='SortBy', example='gmtCreate', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='40823', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instances?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', example='CPU'),
      accessibility?: string(name='Accessibility', example='PRIVATE'),
      accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', example='3600000'),
      affinity?: {
        CPU?: {
          enable?: boolean(name='Enable'),
        }(name='CPU'),
      }(name='Affinity'),
      cloudDisks?: [ 
        {
          capacity?: string(name='Capacity', example='30Gi'),
          mountPath?: string(name='MountPath', example='/mmt/workspace'),
          path?: string(name='Path', example='/workspace'),
          subType?: string(name='SubType', example='rootfs'),
        }
      ](name='CloudDisks', example='[]'),
      credentialConfig?: CredentialConfig(name='CredentialConfig'),
      datasets?: [ 
        {
          datasetId?: string(name='DatasetId', example='d-vsqjvsjp4orp5l206u'),
          mountPath?: string(name='MountPath', example='/mnt/data'),
          optionType?: string(name='OptionType'),
          options?: string(name='Options'),
          uri?: string(name='Uri'),
        }
      ](name='Datasets'),
      driver?: string(name='Driver', example='535.54.03'),
      ecsSpec?: string(name='EcsSpec', example='ecs.c6.large'),
      environmentVariables?: map[string]string(name='EnvironmentVariables', example='{userName: "Chris"}'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
      idleInstanceCuller?: {
        cpuPercentThreshold?: int32(name='CpuPercentThreshold', example='20'),
        gpuPercentThreshold?: int32(name='GpuPercentThreshold', example='10'),
        idleTimeInMinutes?: int32(name='IdleTimeInMinutes', example='30'),
        instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
        maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes', example='60'),
      }(name='IdleInstanceCuller', example='{"InstanceId":"dsw-05cefd0be2e5a278","CpuPercentThreshold":20,"GpuPercentThreshold":10,"MaxIdleTimeInMinutes":120,"IdleTimeInMinutes":30}'),
      imageAuth?: string(name='ImageAuth'),
      imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
      imageName?: string(name='ImageName', example='py36_cpu_tf1.12_ubuntu'),
      imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
      instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
      instanceName?: string(name='InstanceName', example='training_data'),
      instanceShutdownTimer?: {
        dueTime?: string(name='DueTime', example='2021-01-12T14:36:01Z'),
        gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
        gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
        instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
        remainingTimeInMs?: long(name='RemainingTimeInMs', example='3600000'),
      }(name='InstanceShutdownTimer'),
      instanceSnapshotList?: [ 
        {
          gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
          gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
          imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
          imageName?: string(name='ImageName', example='py36_cpu_tf1.12_ubuntu'),
          imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
          reasonCode?: string(name='ReasonCode', example='Internal Error'),
          reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
          repositoryUrl?: string(name='RepositoryUrl', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
          status?: string(name='Status', example='Pushing'),
        }
      ](name='InstanceSnapshotList', example='[]'),
      instanceUrl?: string(name='InstanceUrl', example='https://dsw-cn-shanghai.data.aliyun.com/notebook.htm?instance=39772#/'),
      jupyterlabUrl?: string(name='JupyterlabUrl', description='Jupyterlab Url。', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/lab/'),
      labels?: [ 
        {
          key?: string(name='Key', example='stsTokenOwner'),
          value?: string(name='Value', example='123xxxxxxxx'),
        }
      ](name='Labels', example='{\\"foo\\": \\"bar\\"}'),
      latestSnapshot?: {
        gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
        gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T14:36:01Z'),
        imageId?: string(name='ImageId', example='image-05cefd0be2exxxx'),
        imageName?: string(name='ImageName', example='py36_cpu_tf1.12_ubuntu'),
        imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu'),
        reasonCode?: string(name='ReasonCode', example='Internal Error'),
        reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
        repositoryUrl?: string(name='RepositoryUrl', example='https://cr.console.aliyun.com/repository/cn-hangzhou/zouxu/kf/images'),
        status?: string(name='Status', example='Pushing'),
      }(name='LatestSnapshot'),
      paymentType?: string(name='PaymentType', example='PayAsYouGo'),
      priority?: long(name='Priority', example='1'),
      reasonCode?: string(name='ReasonCode', example='Internal Error'),
      reasonMessage?: string(name='ReasonMessage', example='ImagePullBackOff'),
      requestedResource?: {
        CPU?: string(name='CPU', example='32'),
        GPU?: string(name='GPU', example='4'),
        GPUType?: string(name='GPUType', example='v100'),
        memory?: string(name='Memory', example='32'),
        sharedMemory?: string(name='SharedMemory', example='32'),
      }(name='RequestedResource', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}'),
      resourceId?: string(name='ResourceId', example='dsw-123456789'),
      resourceName?: string(name='ResourceName', example='resource_group'),
      status?: string(name='Status', example='Running'),
      terminalUrl?: string(name='TerminalUrl', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/tty/'),
      userId?: string(name='UserId', example='1612285282502324'),
      userName?: string(name='UserName', example='测试用户'),
      userVpc?: {
        defaultRoute?: string(name='DefaultRoute', example='eth0 | eth1'),
        extendedCIDRs?: [ string ](name='ExtendedCIDRs', example='["192.168.0.1/24", "192.168.1.1/24"]'),
        forwardInfos?: [
          ForwardInfoResponse
        ](name='ForwardInfos'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-xxxxxx'),
        vSwitchId?: string(name='VSwitchId', example='vsw-xxxxx'),
        vpcId?: string(name='VpcId', example='vpc-xxxxx'),
      }(name='UserVpc'),
      webIDEUrl?: string(name='WebIDEUrl', description='Web IDE url。', example='https://dsw-gateway-cn-shanghai.aliyun.com/dsw-39772/ide/'),
      workspaceId?: string(name='WorkspaceId', example='40823'),
      workspaceName?: string(name='WorkspaceName', example='training_data'),
      workspaceSource?: string(name='WorkspaceSource', example='d-123456789'),
    }
  ](name='Instances'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='35'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v2/instances', 'json', false, 'json', request);
}

model StartInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartInstance  StartInstanceRequest
  * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartInstance', 'PUT', '/api/v2/instances/{InstanceId}/start', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  saveImage?: boolean(name='SaveImage', example='false', position='Query'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopInstance  StopInstanceRequest
  * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopInstance', 'PUT', '/api/v2/instances/{InstanceId}/stop', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  affinity?: {
    CPU?: {
      enable?: boolean(name='Enable'),
    }(name='CPU'),
  }(name='Affinity', position='Body'),
  cloudDisks?: [ 
    {
      capacity?: string(name='Capacity', example='30Gi'),
      subType?: string(name='SubType', example='rootfs'),
    }
  ](name='CloudDisks', example='[]', position='Body'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', position='Body'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', example='d-vsqjvsjp4orp5l206u'),
      mountPath?: string(name='MountPath', example='/mnt/data'),
      optionType?: string(name='OptionType', deprecated='true'),
      options?: string(name='Options'),
      uri?: string(name='Uri', example='oss://bucket.oss-cn-shanghai.aliyuncs.com/data/path/'),
    }
  ](name='Datasets', position='Body'),
  disassociateCredential?: boolean(name='DisassociateCredential', position='Body'),
  disassociateDatasets?: boolean(name='DisassociateDatasets', example='false', position='Body'),
  disassociateDriver?: boolean(name='DisassociateDriver', example='false', position='Body'),
  disassociateForwardInfos?: boolean(name='DisassociateForwardInfos', example='false', position='Body'),
  disassociateVpc?: boolean(name='DisassociateVpc', example='false', position='Body'),
  driver?: string(name='Driver', example='535.54.03', position='Body'),
  ecsSpec?: string(name='EcsSpec', example='ecs.c6.large', position='Body'),
  imageAuth?: string(name='ImageAuth', position='Body'),
  imageId?: string(name='ImageId', example='image-05cefd0be2exxxx', position='Body'),
  imageUrl?: string(name='ImageUrl', example='registry.cn-shanghai.aliyuncs.com/pai_product/tensorflow:py36_cpu_tf1.12_ubuntu', position='Body'),
  instanceName?: string(name='InstanceName', example='training_data', position='Body'),
  priority?: long(name='Priority', example='1', position='Body'),
  requestedResource?: {
    CPU?: string(name='CPU', example='32'),
    GPU?: string(name='GPU', example='4'),
    GPUType?: string(name='GPUType', example='v100'),
    memory?: string(name='Memory', example='32'),
    sharedMemory?: string(name='SharedMemory', example='32'),
  }(name='RequestedResource', example='{"CPU":"4","Memory":"8Gi","SharedMemory":"4Gi","GPU":"1","GPUType":"Tesla-V100-16G"}', position='Body'),
  userId?: string(name='UserId', example='1612285282502324', position='Body'),
  userVpc?: {
    defaultRoute?: string(name='DefaultRoute', example='eth0 | eth1'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', example='["192.168.0.1/24", "192.168.1.1/24"]'),
    forwardInfos?: [
      ForwardInfo
    ](name='ForwardInfos'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-xxxxxx'),
    vSwitchId?: string(name='VSwitchId', example='vsw-xxxxx'),
    vpcId?: string(name='VpcId', example='vpc-xxxxx'),
  }(name='UserVpc', position='Body'),
  workspaceSource?: string(name='WorkspaceSource', example='d-123456789', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='Code', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='null'),
  instanceId?: string(name='InstanceId', example='dsw-730xxxxxxxxxx'),
  message?: string(name='Message', example='"XXX"'),
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
  success?: boolean(name='Success', example='true'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstance  UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PUT', '/api/v2/instances/{InstanceId}', 'json', false, 'json', request);
}

model UpdateInstanceLabelsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dsw-730xxxxxxxxxx', position='Path'),
  labels: [ 
    {
      key: string(name='Key', description='This parameter is required.', example='customLabelKey'),
      value: string(name='Value', description='This parameter is required.', example='labelValue'),
    }
  ](name='Labels', description='This parameter is required.', position='Body'),
}

model UpdateInstanceLabelsResponseBody = {
  requestId?: string(name='RequestId', example='E7D55162-4489-1619-AAF5-3F97D5FCA948'),
}

model UpdateInstanceLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceLabels  UpdateInstanceLabelsRequest
  * @return UpdateInstanceLabelsResponse
 */
async function updateInstanceLabels(request: UpdateInstanceLabelsRequest): UpdateInstanceLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceLabels', 'PUT', '/api/v2/instances/{InstanceId}/labels', 'json', false, 'json', request);
}

