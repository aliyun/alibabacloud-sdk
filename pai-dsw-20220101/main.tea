/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('pai-dsw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DemoCategory {
  categoryCode?: string(name='CategoryCode', description='目录码'),
  categoryName?: string(name='CategoryName', description='目录名'),
  order?: long(name='Order', description='序号'),
  subCategories?: [
    DemoCategory
  ](name='SubCategories', description='目录列表'),
}

model CreateInstanceRequest {
  accessibility?: string(name='Accessibility', description='工作空间内是否他人可见'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='数据集Id'),
      mountPath?: string(name='MountPath', description='容器内挂载路径'),
    }
  ](name='Datasets', description='数据集集合'),
  ecsSpec?: string(name='EcsSpec', description='实例对应的Ecs规格'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', description='环境变量'),
  imageId?: string(name='ImageId', description='镜像Id'),
  imageUrl?: string(name='ImageUrl', description='镜像地址'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId', description='Security Group Id'),
    vSwitchId?: string(name='VSwitchId', description='VSwitch Id'),
    vpcId?: string(name='VpcId', description='Vpc Id'),
  }(name='UserVpc', description='user vpc配置'),
  workspaceId?: string(name='WorkspaceId', description='工作空间Id'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.datasets)) {
    body['Datasets'] = request.datasets;
  }
  if (!Util.isUnset(request.ecsSpec)) {
    body['EcsSpec'] = request.ecsSpec;
  }
  if (!Util.isUnset(request.environmentVariables)) {
    body['EnvironmentVariables'] = request.environmentVariables;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.userVpc)) {
    body['UserVpc'] = request.userVpc;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInstanceShutdownTimerRequest {
  dueTime?: string(name='DueTime', description='定时关机设定时间'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', description='距离定时关机时间段'),
}

model CreateInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceShutdownTimerResponseBody(name='body'),
}

async function createInstanceShutdownTimer(InstanceId: string, request: CreateInstanceShutdownTimerRequest): CreateInstanceShutdownTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceShutdownTimerWithOptions(InstanceId, request, headers, runtime);
}

async function createInstanceShutdownTimerWithOptions(InstanceId: string, request: CreateInstanceShutdownTimerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceShutdownTimerResponse {
  Util.validateModel(request);
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.dueTime)) {
    body['DueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.remainingTimeInMs)) {
    body['RemainingTimeInMs'] = request.remainingTimeInMs;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceShutdownTimer',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/shutdowntimer`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInstanceSnapshotRequest {
  imageUrl?: string(name='ImageUrl', description='镜像地址'),
  snapshotDescription?: string(name='SnapshotDescription', description='实例快照描述'),
  snapshotName?: string(name='SnapshotName', description='实例快照名称'),
}

model CreateInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshotId?: string(name='SnapshotId', description='实例快照Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceSnapshotResponseBody(name='body'),
}

async function createInstanceSnapshot(InstanceId: string, request: CreateInstanceSnapshotRequest): CreateInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceSnapshotWithOptions(InstanceId, request, headers, runtime);
}

async function createInstanceSnapshotWithOptions(InstanceId: string, request: CreateInstanceSnapshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceSnapshotResponse {
  Util.validateModel(request);
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.snapshotDescription)) {
    body['SnapshotDescription'] = request.snapshotDescription;
  }
  if (!Util.isUnset(request.snapshotName)) {
    body['SnapshotName'] = request.snapshotName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/snapshots`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(InstanceId: string): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceWithOptions(InstanceId, headers, runtime);
}

async function deleteInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model DeleteInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceShutdownTimerResponseBody(name='body'),
}

async function deleteInstanceShutdownTimer(InstanceId: string): DeleteInstanceShutdownTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceShutdownTimerWithOptions(InstanceId, headers, runtime);
}

async function deleteInstanceShutdownTimerWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceShutdownTimerResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstanceShutdownTimer',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/shutdowntimer`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshotId?: string(name='SnapshotId', description='实例快照Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model DeleteInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceSnapshotResponseBody(name='body'),
}

async function deleteInstanceSnapshot(InstanceId: string, SnapshotId: string): DeleteInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceSnapshotWithOptions(InstanceId, SnapshotId, headers, runtime);
}

async function deleteInstanceSnapshotWithOptions(InstanceId: string, SnapshotId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceSnapshotResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  SnapshotId = OpenApiUtil.getEncodeParam(SnapshotId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/snapshots/${SnapshotId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceResponseBody = {
  acceleratorType?: string(name='AcceleratorType', description='实例计算类型'),
  accessibility?: string(name='Accessibility', description='工作空间内是否他人可见'),
  accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', description='累计运行时间（ms）'),
  code?: string(name='Code', description='状态码'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId', description='数据集Id'),
      mountPath?: string(name='MountPath', description='容器内挂载路径'),
    }
  ](name='Datasets', description='数据集集合'),
  ecsSpec?: string(name='EcsSpec', description='实例对应的Ecs规格'),
  environmentVariables?: map[string]string(name='EnvironmentVariables', description='环境变量'),
  gmtCreateTime?: string(name='GmtCreateTime', description='实例创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='实例修改时间'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  imageId?: string(name='ImageId', description='镜像Id'),
  imageName?: string(name='ImageName', description='镜像名称'),
  imageUrl?: string(name='ImageUrl', description='镜像地址'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  instanceShutdownTimer?: {
    dueTime?: string(name='DueTime', description='设定关机时间'),
    gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
    gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
    instanceId?: string(name='InstanceId', description='实例Id'),
    remainingTimeInMs?: long(name='RemainingTimeInMs', description='剩余关机时间（ms）'),
  }(name='InstanceShutdownTimer', description='定时关机任务'),
  instanceUrl?: string(name='InstanceUrl', description='实例Url'),
  jupyterlabUrl?: string(name='JupyterlabUrl', description='Jupyterlab Url'),
  latestSnapshot?: {
    gmtCreateTime?: string(name='GmtCreateTime', description='快照创建时间'),
    gmtModifiedTime?: string(name='GmtModifiedTime', description='快照修改时间'),
    imageId?: string(name='ImageId', description='镜像Id'),
    imageName?: string(name='ImageName', description='镜像名称'),
    imageUrl?: string(name='ImageUrl', description='镜像Url'),
    repositoryUrl?: string(name='RepositoryUrl', description='镜像仓库Url'),
  }(name='LatestSnapshot', description='最新保存的用户镜像'),
  message?: string(name='Message', description='说明'),
  paymentType?: string(name='PaymentType', description='支付类型'),
  reasonCode?: string(name='ReasonCode', description='实例错误代码'),
  reasonMessage?: string(name='ReasonMessage', description='实例错误原因'),
  requestId?: string(name='RequestId', description='请求Id'),
  status?: string(name='Status', description='实例状态'),
  success?: boolean(name='Success', description='成功标志'),
  terminalUrl?: string(name='TerminalUrl', description='终端url'),
  userId?: string(name='UserId', description='用户Id'),
  userName?: string(name='UserName', description='用户名称'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId', description='Security Group Id'),
    vSwitchId?: string(name='VSwitchId', description='VSwitch Id'),
    vpcId?: string(name='VpcId', description='Vpc Id'),
  }(name='UserVpc', description='user vpc配置'),
  webIDEUrl?: string(name='WebIDEUrl', description='Web IDE url'),
  workspaceId?: string(name='WorkspaceId', description='工作空间Id'),
  workspaceName?: string(name='WorkspaceName', description='工作空间名称'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(InstanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(InstanceId, headers, runtime);
}

async function getInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceShutdownTimerResponseBody = {
  code?: string(name='Code', description='状态码'),
  dueTime?: string(name='DueTime', description='设定关机时间'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  remainingTimeInMs?: long(name='RemainingTimeInMs', description='剩余关机时间（ms）'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model GetInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceShutdownTimerResponseBody(name='body'),
}

async function getInstanceShutdownTimer(InstanceId: string): GetInstanceShutdownTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceShutdownTimerWithOptions(InstanceId, headers, runtime);
}

async function getInstanceShutdownTimerWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceShutdownTimerResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceShutdownTimer',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/shutdowntimer`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  gmtCreateTime?: string(name='GmtCreateTime', description='实例快照创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='实例快照修改时间'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  imageId?: string(name='ImageId', description='实例快照的镜像Id'),
  imageUrl?: string(name='ImageUrl', description='实例快照的镜像地址'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  reasonCode?: string(name='ReasonCode', description='实例快照错误代码'),
  reasonMessage?: string(name='ReasonMessage', description='实例快照错误消息'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshotId?: string(name='SnapshotId', description='实例快照Id'),
  snapshotName?: string(name='SnapshotName', description='实例快照名称'),
  status?: string(name='Status', description='实例快照状态'),
  success?: boolean(name='Success', description='成功标志'),
}

model GetInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceSnapshotResponseBody(name='body'),
}

async function getInstanceSnapshot(InstanceId: string, SnapshotId: string): GetInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceSnapshotWithOptions(InstanceId, SnapshotId, headers, runtime);
}

async function getInstanceSnapshotWithOptions(InstanceId: string, SnapshotId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceSnapshotResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  SnapshotId = OpenApiUtil.getEncodeParam(SnapshotId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/snapshots/${SnapshotId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserConfigResponseBody = {
  accountSufficient?: boolean(name='AccountSufficient', description='用户账号金额是否充足'),
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model GetUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserConfigResponseBody(name='body'),
}

async function getUserConfig(): GetUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserConfigWithOptions(headers, runtime);
}

async function getUserConfigWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetUserConfigResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUserConfig',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/userconfig`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDemoCategoriesResponseBody = {
  categories?: [
    DemoCategory
  ](name='Categories', description='样例列表'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model ListDemoCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDemoCategoriesResponseBody(name='body'),
}

async function listDemoCategories(): ListDemoCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDemoCategoriesWithOptions(headers, runtime);
}

async function listDemoCategoriesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListDemoCategoriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDemoCategories',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/democategories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDemosRequest {
  category?: string(name='Category', description='目录'),
  demoName?: string(name='DemoName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListDemosResponseBody = {
  demos?: [ 
    {
      categories?: [ string ](name='Categories', description='所在目录'),
      demoDescription?: string(name='DemoDescription', description='样例描述'),
      demoName?: string(name='DemoName', description='样例名称'),
      demoUrl?: string(name='DemoUrl', description='样例地址'),
      order?: long(name='Order', description='序号'),
      size?: long(name='Size', description='大小'),
    }
  ](name='Demos', description='样例列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='总数'),
}

model ListDemosResponse = {
  headers: map[string]string(name='headers'),
  body: ListDemosResponseBody(name='body'),
}

async function listDemos(request: ListDemosRequest): ListDemosResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDemosWithOptions(request, headers, runtime);
}

async function listDemosWithOptions(request: ListDemosRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDemosResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.demoName)) {
    query['DemoName'] = request.demoName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDemos',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/demos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListEcsSpecsRequest {
  acceleratorType?: string(name='AcceleratorType', description='加速类型'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: long(name='PageNumber', description='页数'),
  pageSize?: long(name='PageSize', description='每页大小'),
  sortBy?: string(name='SortBy', description='排序字段'),
}

model ListEcsSpecsResponseBody = {
  code?: string(name='Code', description='状态码'),
  ecsSpecs?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', description='资源类型'),
      CPU?: long(name='CPU', description='CPU核数'),
      currency?: string(name='Currency', description='货币单位'),
      GPU?: long(name='GPU', description='GPU卡数'),
      GPUType?: string(name='GPUType', description='显卡类型'),
      instanceBandwidthRx?: long(name='InstanceBandwidthRx', description='实例接收带宽'),
      instanceType?: string(name='InstanceType', description='实例规格'),
      memory?: float(name='Memory', description='内存大小(GB)'),
      price?: double(name='Price', description='价格'),
      systemDiskCapacity?: long(name='SystemDiskCapacity', description='系统盘大小(GB)'),
    }
  ](name='EcsSpecs', description='本分页中请求的实例列表'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
  totalCount?: long(name='TotalCount', description='实例总数'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEcsSpecsWithOptions(request, headers, runtime);
}

async function listEcsSpecsWithOptions(request: ListEcsSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcsSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEcsSpecs',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/ecsspecs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInstanceSnapshotRequest {
  order?: string(name='Order'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
}

model ListInstanceSnapshotResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  snapshots?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='实例快照创建时间'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='实例快照修改时间'),
      imageId?: string(name='ImageId', description='实例快照的镜像Id'),
      imageUrl?: string(name='ImageUrl', description='实例快照的镜像地址'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      reasonCode?: string(name='ReasonCode', description='实例快照错误代码'),
      reasonMessage?: string(name='ReasonMessage', description='实例快照错误消息'),
      snapshotId?: string(name='SnapshotId', description='实例快照Id'),
      snapshotName?: string(name='SnapshotName', description='实例快照名称'),
      status?: string(name='Status', description='实例快照状态'),
    }
  ](name='Snapshots', description='本分页中请求的实例镜像列表'),
  success?: boolean(name='Success', description='成功标志'),
  totalCount?: long(name='TotalCount', description='实例总数'),
}

model ListInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceSnapshotResponseBody(name='body'),
}

async function listInstanceSnapshot(InstanceId: string, request: ListInstanceSnapshotRequest): ListInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceSnapshotWithOptions(InstanceId, request, headers, runtime);
}

async function listInstanceSnapshotWithOptions(InstanceId: string, request: ListInstanceSnapshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceSnapshotResponse {
  Util.validateModel(request);
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/snapshots`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInstanceStatisticsRequest {
  workspaceIds?: string(name='WorkspaceIds', description='工作空间列表'),
}

model ListInstanceStatisticsResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  statistics?: map[string]object(name='Statistics', description='统计信息'),
  success?: boolean(name='Success', description='成功标志'),
}

model ListInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceStatisticsResponseBody(name='body'),
}

async function listInstanceStatistics(request: ListInstanceStatisticsRequest): ListInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceStatisticsWithOptions(request, headers, runtime);
}

async function listInstanceStatisticsWithOptions(request: ListInstanceStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceStatistics',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instancestatistics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInstancesRequest {
  acceleratorType?: string(name='AcceleratorType'),
  accessibility?: string(name='Accessibility'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  order?: string(name='Order', description='排列顺序'),
  pageNumber?: long(name='PageNumber', description='页码'),
  pageSize?: long(name='PageSize', description='分页数量大小'),
  paymentType?: string(name='PaymentType'),
  sortBy?: string(name='SortBy', description='排序字段'),
  status?: string(name='Status', description='实例状态'),
  workspaceId?: string(name='WorkspaceId', description='工作空间Id'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instances?: [ 
    {
      acceleratorType?: string(name='AcceleratorType', description='实例计算类型'),
      accessibility?: string(name='Accessibility', description='工作空间内是否他人可见'),
      accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs', description='累计运行时间（ms）'),
      datasets?: [ 
        {
          datasetId?: string(name='DatasetId', description='数据集Id'),
          mountPath?: string(name='MountPath', description='容器内挂载路径'),
        }
      ](name='Datasets', description='数据集集合'),
      ecsSpec?: string(name='EcsSpec', description='实例对应的Ecs规格'),
      environmentVariables?: map[string]string(name='EnvironmentVariables', description='环境变量'),
      gmtCreateTime?: string(name='GmtCreateTime', description='实例创建时间'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='实例修改时间'),
      imageId?: string(name='ImageId', description='镜像Id'),
      imageName?: string(name='ImageName', description='镜像名称'),
      imageUrl?: string(name='ImageUrl', description='镜像地址'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      instanceName?: string(name='InstanceName', description='实例名称'),
      instanceShutdownTimer?: {
        dueTime?: string(name='DueTime', description='设定关机时间'),
        gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
        gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
        instanceId?: string(name='InstanceId', description='实例Id'),
        remainingTimeInMs?: long(name='RemainingTimeInMs', description='剩余关机时间（ms）'),
      }(name='InstanceShutdownTimer', description='定时关机任务'),
      instanceUrl?: string(name='InstanceUrl', description='实例Url'),
      jupyterlabUrl?: string(name='JupyterlabUrl', description='Jupyterlab Url'),
      latestSnapshot?: {
        gmtCreateTime?: string(name='GmtCreateTime', description='快照创建时间'),
        gmtModifiedTime?: string(name='GmtModifiedTime', description='快照修改时间'),
        imageId?: string(name='ImageId', description='镜像Id'),
        imageName?: string(name='ImageName', description='镜像名称'),
        imageUrl?: string(name='ImageUrl', description='镜像Url'),
        repositoryUrl?: string(name='RepositoryUrl', description='镜像仓库Url'),
      }(name='LatestSnapshot', description='最新保存的用户镜像'),
      paymentType?: string(name='PaymentType', description='支付类型'),
      reasonCode?: string(name='ReasonCode', description='实例错误代码'),
      reasonMessage?: string(name='ReasonMessage', description='实例错误原因'),
      status?: string(name='Status', description='实例状态'),
      terminalUrl?: string(name='TerminalUrl', description='终端url'),
      userId?: string(name='UserId', description='用户Id'),
      userName?: string(name='UserName', description='用户名称'),
      userVpc?: {
        securityGroupId?: string(name='SecurityGroupId', description='Security Group Id'),
        vSwitchId?: string(name='VSwitchId', description='VSwitch Id'),
        vpcId?: string(name='VpcId', description='Vpc Id'),
      }(name='UserVpc', description='user vpc配置'),
      webIDEUrl?: string(name='WebIDEUrl', description='Web IDE url'),
      workspaceId?: string(name='WorkspaceId', description='工作空间Id'),
      workspaceName?: string(name='WorkspaceName', description='工作空间名称'),
    }
  ](name='Instances', description='本分页中请求的实例列表'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
  totalCount?: long(name='TotalCount', description='实例总数'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(InstanceId: string): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startInstanceWithOptions(InstanceId, headers, runtime);
}

async function startInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartInstanceResponse {
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopInstanceRequest {
  saveImage?: boolean(name='SaveImage', description='是否保存环境后再关闭实例'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(InstanceId: string, request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopInstanceWithOptions(InstanceId, request, headers, runtime);
}

async function stopInstanceWithOptions(InstanceId: string, request: StopInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.saveImage)) {
    query['SaveImage'] = request.saveImage;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateInstanceRequest {
  instanceName?: string(name='InstanceName', description='实例名称'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='Code', description='状态码'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  instanceId?: string(name='InstanceId', description='实例Id'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求Id'),
  success?: boolean(name='Success', description='成功标志'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(InstanceId: string, request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceWithOptions(InstanceId, request, headers, runtime);
}

async function updateInstanceWithOptions(InstanceId: string, request: UpdateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  InstanceId = OpenApiUtil.getEncodeParam(InstanceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${InstanceId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

