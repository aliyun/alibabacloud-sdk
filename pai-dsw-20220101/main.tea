/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('pai-dsw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DemoCategory {
  categoryCode?: string(name='CategoryCode'),
  categoryName?: string(name='CategoryName'),
  order?: long(name='Order'),
  subCategories?: [
    DemoCategory
  ](name='SubCategories'),
}

model CreateIdleInstanceCullerRequest {
  cpuPercentThreshold?: int32(name='CpuPercentThreshold'),
  gpuPercentThreshold?: int32(name='GpuPercentThreshold'),
  maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes'),
}

model CreateIdleInstanceCullerResponseBody = {
  code?: string(name='Code'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateIdleInstanceCullerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIdleInstanceCullerResponseBody(name='body'),
}

async function createIdleInstanceCuller(InstanceId: string, request: CreateIdleInstanceCullerRequest): CreateIdleInstanceCullerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIdleInstanceCullerWithOptions(InstanceId, request, headers, runtime);
}

async function createIdleInstanceCullerWithOptions(InstanceId: string, request: CreateIdleInstanceCullerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIdleInstanceCullerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cpuPercentThreshold)) {
    body['CpuPercentThreshold'] = request.cpuPercentThreshold;
  }
  if (!Util.isUnset(request.gpuPercentThreshold)) {
    body['GpuPercentThreshold'] = request.gpuPercentThreshold;
  }
  if (!Util.isUnset(request.maxIdleTimeInMinutes)) {
    body['MaxIdleTimeInMinutes'] = request.maxIdleTimeInMinutes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIdleInstanceCuller',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/idleinstanceculler`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInstanceRequest {
  accessibility?: string(name='Accessibility'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId'),
      mountPath?: string(name='MountPath'),
    }
  ](name='Datasets'),
  ecsSpec?: string(name='EcsSpec'),
  environmentVariables?: map[string]string(name='EnvironmentVariables'),
  imageId?: string(name='ImageId'),
  imageUrl?: string(name='ImageUrl'),
  instanceName?: string(name='InstanceName'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  priority?: long(name='Priority'),
  requestedResource?: {
    CPU?: string(name='CPU'),
    GPU?: string(name='GPU'),
    GPUType?: string(name='GPUType'),
    memory?: string(name='Memory'),
    sharedMemory?: string(name='SharedMemory'),
  }(name='RequestedResource'),
  resourceId?: string(name='ResourceId'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
  }(name='UserVpc'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.datasets)) {
    body['Datasets'] = request.datasets;
  }
  if (!Util.isUnset(request.ecsSpec)) {
    body['EcsSpec'] = request.ecsSpec;
  }
  if (!Util.isUnset(request.environmentVariables)) {
    body['EnvironmentVariables'] = request.environmentVariables;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.requestedResource)) {
    body['RequestedResource'] = request.requestedResource;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.userVpc)) {
    body['UserVpc'] = request.userVpc;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInstanceShutdownTimerRequest {
  dueTime?: string(name='DueTime'),
  remainingTimeInMs?: long(name='RemainingTimeInMs'),
}

model CreateInstanceShutdownTimerResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceShutdownTimerResponseBody(name='body'),
}

async function createInstanceShutdownTimer(InstanceId: string, request: CreateInstanceShutdownTimerRequest): CreateInstanceShutdownTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceShutdownTimerWithOptions(InstanceId, request, headers, runtime);
}

async function createInstanceShutdownTimerWithOptions(InstanceId: string, request: CreateInstanceShutdownTimerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceShutdownTimerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dueTime)) {
    body['DueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.remainingTimeInMs)) {
    body['RemainingTimeInMs'] = request.remainingTimeInMs;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceShutdownTimer',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/shutdowntimer`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInstanceSnapshotRequest {
  imageUrl?: string(name='ImageUrl'),
  snapshotDescription?: string(name='SnapshotDescription'),
  snapshotName?: string(name='SnapshotName'),
}

model CreateInstanceSnapshotResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
  success?: boolean(name='Success'),
}

model CreateInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceSnapshotResponseBody(name='body'),
}

async function createInstanceSnapshot(InstanceId: string, request: CreateInstanceSnapshotRequest): CreateInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceSnapshotWithOptions(InstanceId, request, headers, runtime);
}

async function createInstanceSnapshotWithOptions(InstanceId: string, request: CreateInstanceSnapshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceSnapshotResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.snapshotDescription)) {
    body['SnapshotDescription'] = request.snapshotDescription;
  }
  if (!Util.isUnset(request.snapshotName)) {
    body['SnapshotName'] = request.snapshotName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/snapshots`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteIdleInstanceCullerResponseBody = {
  code?: string(name='Code'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteIdleInstanceCullerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIdleInstanceCullerResponseBody(name='body'),
}

async function deleteIdleInstanceCuller(InstanceId: string): DeleteIdleInstanceCullerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIdleInstanceCullerWithOptions(InstanceId, headers, runtime);
}

async function deleteIdleInstanceCullerWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIdleInstanceCullerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteIdleInstanceCuller',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/idleinstanceculler`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(InstanceId: string): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceWithOptions(InstanceId, headers, runtime);
}

async function deleteInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInstanceShutdownTimerResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceShutdownTimerResponseBody(name='body'),
}

async function deleteInstanceShutdownTimer(InstanceId: string): DeleteInstanceShutdownTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceShutdownTimerWithOptions(InstanceId, headers, runtime);
}

async function deleteInstanceShutdownTimerWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceShutdownTimerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstanceShutdownTimer',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/shutdowntimer`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInstanceSnapshotResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
  success?: boolean(name='Success'),
}

model DeleteInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceSnapshotResponseBody(name='body'),
}

async function deleteInstanceSnapshot(InstanceId: string, SnapshotId: string): DeleteInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceSnapshotWithOptions(InstanceId, SnapshotId, headers, runtime);
}

async function deleteInstanceSnapshotWithOptions(InstanceId: string, SnapshotId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceSnapshotResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/snapshots/${OpenApiUtil.getEncodeParam(SnapshotId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetIdleInstanceCullerResponseBody = {
  code?: string(name='Code'),
  cpuPercentThreshold?: int32(name='CpuPercentThreshold'),
  gpuPercentThreshold?: int32(name='GpuPercentThreshold'),
  idleTimeInMinutes?: int32(name='IdleTimeInMinutes'),
  instanceId?: string(name='InstanceId'),
  maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetIdleInstanceCullerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIdleInstanceCullerResponseBody(name='body'),
}

async function getIdleInstanceCuller(InstanceId: string): GetIdleInstanceCullerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIdleInstanceCullerWithOptions(InstanceId, headers, runtime);
}

async function getIdleInstanceCullerWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIdleInstanceCullerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIdleInstanceCuller',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/idleinstanceculler`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceResponseBody = {
  acceleratorType?: string(name='AcceleratorType'),
  accessibility?: string(name='Accessibility'),
  accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs'),
  code?: string(name='Code'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId'),
      mountPath?: string(name='MountPath'),
    }
  ](name='Datasets'),
  ecsSpec?: string(name='EcsSpec'),
  environmentVariables?: map[string]string(name='EnvironmentVariables'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  idleInstanceCuller?: {
    cpuPercentThreshold?: int32(name='CpuPercentThreshold'),
    gpuPercentThreshold?: int32(name='GpuPercentThreshold'),
    idleTimeInMinutes?: int32(name='IdleTimeInMinutes'),
    instanceId?: string(name='InstanceId'),
    maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes'),
  }(name='IdleInstanceCuller'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  imageUrl?: string(name='ImageUrl'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  instanceShutdownTimer?: {
    dueTime?: string(name='DueTime'),
    gmtCreateTime?: string(name='GmtCreateTime'),
    gmtModifiedTime?: string(name='GmtModifiedTime'),
    instanceId?: string(name='InstanceId'),
    remainingTimeInMs?: long(name='RemainingTimeInMs'),
  }(name='InstanceShutdownTimer'),
  instanceUrl?: string(name='InstanceUrl'),
  jupyterlabUrl?: string(name='JupyterlabUrl'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  latestSnapshot?: {
    gmtCreateTime?: string(name='GmtCreateTime'),
    gmtModifiedTime?: string(name='GmtModifiedTime'),
    imageId?: string(name='ImageId'),
    imageName?: string(name='ImageName'),
    imageUrl?: string(name='ImageUrl'),
    repositoryUrl?: string(name='RepositoryUrl'),
  }(name='LatestSnapshot'),
  message?: string(name='Message'),
  paymentType?: string(name='PaymentType'),
  priority?: long(name='Priority'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  requestId?: string(name='RequestId'),
  requestedResource?: {
    CPU?: string(name='CPU'),
    GPU?: string(name='GPU'),
    GPUType?: string(name='GPUType'),
    memory?: string(name='Memory'),
    sharedMemory?: string(name='SharedMemory'),
  }(name='RequestedResource'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  terminalUrl?: string(name='TerminalUrl'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
  }(name='UserVpc'),
  webIDEUrl?: string(name='WebIDEUrl'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(InstanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(InstanceId, headers, runtime);
}

async function getInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceMetricsRequest {
  endTime?: string(name='EndTime'),
  metricType?: string(name='MetricType'),
  startTime?: string(name='StartTime'),
  timeStep?: string(name='TimeStep'),
}

model GetInstanceMetricsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  podMetrics?: [ 
    {
      metrics?: [ 
        {
          time?: long(name='Time'),
          value?: float(name='Value'),
        }
      ](name='Metrics'),
      podId?: string(name='PodId'),
    }
  ](name='PodMetrics'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceMetricsResponseBody(name='body'),
}

async function getInstanceMetrics(InstanceId: string, request: GetInstanceMetricsRequest): GetInstanceMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceMetricsWithOptions(InstanceId, request, headers, runtime);
}

async function getInstanceMetricsWithOptions(InstanceId: string, request: GetInstanceMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeStep)) {
    query['TimeStep'] = request.timeStep;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceMetrics',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instance/${OpenApiUtil.getEncodeParam(InstanceId)}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceShutdownTimerResponseBody = {
  code?: string(name='Code'),
  dueTime?: string(name='DueTime'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  remainingTimeInMs?: long(name='RemainingTimeInMs'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceShutdownTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceShutdownTimerResponseBody(name='body'),
}

async function getInstanceShutdownTimer(InstanceId: string): GetInstanceShutdownTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceShutdownTimerWithOptions(InstanceId, headers, runtime);
}

async function getInstanceShutdownTimerWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceShutdownTimerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceShutdownTimer',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/shutdowntimer`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInstanceSnapshotResponseBody = {
  code?: string(name='Code'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  imageId?: string(name='ImageId'),
  imageUrl?: string(name='ImageUrl'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
  snapshotName?: string(name='SnapshotName'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model GetInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceSnapshotResponseBody(name='body'),
}

async function getInstanceSnapshot(InstanceId: string, SnapshotId: string): GetInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceSnapshotWithOptions(InstanceId, SnapshotId, headers, runtime);
}

async function getInstanceSnapshotWithOptions(InstanceId: string, SnapshotId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceSnapshotResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/snapshots/${OpenApiUtil.getEncodeParam(SnapshotId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetLifecycleRequest {
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  order?: string(name='Order'),
  sessionNumber?: int32(name='SessionNumber'),
  startTime?: string(name='StartTime'),
}

model GetLifecycleResponseBody = {
  code?: string(name='Code'),
  lifecycle?: [[ 
    {
      status?: string(name='Status'),
      reasonCode?: string(name='ReasonCode'),
      reasonMessage?: string(name='ReasonMessage'),
      gmtCreateTime?: string(name='GmtCreateTime'),
    }
  ]  ](name='Lifecycle'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model GetLifecycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLifecycleResponseBody(name='body'),
}

async function getLifecycle(InstanceId: string, request: GetLifecycleRequest): GetLifecycleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLifecycleWithOptions(InstanceId, request, headers, runtime);
}

async function getLifecycleWithOptions(InstanceId: string, request: GetLifecycleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLifecycleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.sessionNumber)) {
    query['SessionNumber'] = request.sessionNumber;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLifecycle',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/lifecycle`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTokenRequest {
  expireTime?: int32(name='ExpireTime'),
  instanceId?: string(name='InstanceId'),
}

model GetTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  token?: string(name='Token'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTokenWithOptions(request, headers, runtime);
}

async function getTokenWithOptions(request: GetTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/tokens`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserConfigResponseBody = {
  accountSufficient?: boolean(name='AccountSufficient'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetUserConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserConfigResponseBody(name='body'),
}

async function getUserConfig(): GetUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserConfigWithOptions(headers, runtime);
}

async function getUserConfigWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetUserConfigResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUserConfig',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/userconfig`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDemoCategoriesResponseBody = {
  categories?: [
    DemoCategory
  ](name='Categories'),
  requestId?: string(name='RequestId'),
}

model ListDemoCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDemoCategoriesResponseBody(name='body'),
}

async function listDemoCategories(): ListDemoCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDemoCategoriesWithOptions(headers, runtime);
}

async function listDemoCategoriesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListDemoCategoriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDemoCategories',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/democategories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDemosRequest {
  category?: string(name='Category'),
  demoName?: string(name='DemoName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListDemosResponseBody = {
  demos?: [ 
    {
      categories?: [ string ](name='Categories'),
      demoDescription?: string(name='DemoDescription'),
      demoName?: string(name='DemoName'),
      demoUrl?: string(name='DemoUrl'),
      order?: long(name='Order'),
      size?: long(name='Size'),
    }
  ](name='Demos'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDemosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDemosResponseBody(name='body'),
}

async function listDemos(request: ListDemosRequest): ListDemosResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDemosWithOptions(request, headers, runtime);
}

async function listDemosWithOptions(request: ListDemosRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDemosResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.demoName)) {
    query['DemoName'] = request.demoName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDemos',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/demos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListEcsSpecsRequest {
  acceleratorType?: string(name='AcceleratorType'),
  order?: string(name='Order'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
}

model ListEcsSpecsResponseBody = {
  code?: string(name='Code'),
  ecsSpecs?: [ 
    {
      acceleratorType?: string(name='AcceleratorType'),
      CPU?: long(name='CPU'),
      currency?: string(name='Currency'),
      GPU?: long(name='GPU'),
      GPUType?: string(name='GPUType'),
      instanceBandwidthRx?: long(name='InstanceBandwidthRx'),
      instanceType?: string(name='InstanceType'),
      memory?: float(name='Memory'),
      price?: double(name='Price'),
      systemDiskCapacity?: long(name='SystemDiskCapacity'),
    }
  ](name='EcsSpecs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEcsSpecsWithOptions(request, headers, runtime);
}

async function listEcsSpecsWithOptions(request: ListEcsSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcsSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEcsSpecs',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/ecsspecs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInstanceSnapshotRequest {
  order?: string(name='Order'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
}

model ListInstanceSnapshotResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      imageId?: string(name='ImageId'),
      imageUrl?: string(name='ImageUrl'),
      instanceId?: string(name='InstanceId'),
      reasonCode?: string(name='ReasonCode'),
      reasonMessage?: string(name='ReasonMessage'),
      snapshotId?: string(name='SnapshotId'),
      snapshotName?: string(name='SnapshotName'),
      status?: string(name='Status'),
    }
  ](name='Snapshots'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListInstanceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceSnapshotResponseBody(name='body'),
}

async function listInstanceSnapshot(InstanceId: string, request: ListInstanceSnapshotRequest): ListInstanceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceSnapshotWithOptions(InstanceId, request, headers, runtime);
}

async function listInstanceSnapshotWithOptions(InstanceId: string, request: ListInstanceSnapshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceSnapshotResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceSnapshot',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/snapshots`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInstanceStatisticsRequest {
  workspaceIds?: string(name='WorkspaceIds'),
}

model ListInstanceStatisticsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  statistics?: map[string]object(name='Statistics'),
  success?: boolean(name='Success'),
}

model ListInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceStatisticsResponseBody(name='body'),
}

async function listInstanceStatistics(request: ListInstanceStatisticsRequest): ListInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceStatisticsWithOptions(request, headers, runtime);
}

async function listInstanceStatisticsWithOptions(request: ListInstanceStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceStatistics',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instancestatistics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInstancesRequest {
  acceleratorType?: string(name='AcceleratorType'),
  accessibility?: string(name='Accessibility'),
  instanceName?: string(name='InstanceName'),
  order?: string(name='Order'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  paymentType?: string(name='PaymentType'),
  resourceId?: string(name='ResourceId'),
  sortBy?: string(name='SortBy'),
  status?: string(name='Status'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instances?: [ 
    {
      acceleratorType?: string(name='AcceleratorType'),
      accessibility?: string(name='Accessibility'),
      accumulatedRunningTimeInMs?: long(name='AccumulatedRunningTimeInMs'),
      datasets?: [ 
        {
          datasetId?: string(name='DatasetId'),
          mountPath?: string(name='MountPath'),
        }
      ](name='Datasets'),
      ecsSpec?: string(name='EcsSpec'),
      environmentVariables?: map[string]string(name='EnvironmentVariables'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      idleInstanceCuller?: {
        cpuPercentThreshold?: int32(name='CpuPercentThreshold'),
        gpuPercentThreshold?: int32(name='GpuPercentThreshold'),
        idleTimeInMinutes?: int32(name='IdleTimeInMinutes'),
        instanceId?: string(name='InstanceId'),
        maxIdleTimeInMinutes?: int32(name='MaxIdleTimeInMinutes'),
      }(name='IdleInstanceCuller'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageUrl?: string(name='ImageUrl'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceShutdownTimer?: {
        dueTime?: string(name='DueTime'),
        gmtCreateTime?: string(name='GmtCreateTime'),
        gmtModifiedTime?: string(name='GmtModifiedTime'),
        instanceId?: string(name='InstanceId'),
        remainingTimeInMs?: long(name='RemainingTimeInMs'),
      }(name='InstanceShutdownTimer'),
      instanceUrl?: string(name='InstanceUrl'),
      jupyterlabUrl?: string(name='JupyterlabUrl'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      latestSnapshot?: {
        gmtCreateTime?: string(name='GmtCreateTime'),
        gmtModifiedTime?: string(name='GmtModifiedTime'),
        imageId?: string(name='ImageId'),
        imageName?: string(name='ImageName'),
        imageUrl?: string(name='ImageUrl'),
        repositoryUrl?: string(name='RepositoryUrl'),
      }(name='LatestSnapshot'),
      paymentType?: string(name='PaymentType'),
      priority?: long(name='Priority'),
      reasonCode?: string(name='ReasonCode'),
      reasonMessage?: string(name='ReasonMessage'),
      requestedResource?: {
        CPU?: string(name='CPU'),
        GPU?: string(name='GPU'),
        GPUType?: string(name='GPUType'),
        memory?: string(name='Memory'),
        sharedMemory?: string(name='SharedMemory'),
      }(name='RequestedResource'),
      resourceId?: string(name='ResourceId'),
      resourceName?: string(name='ResourceName'),
      status?: string(name='Status'),
      terminalUrl?: string(name='TerminalUrl'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
      userVpc?: {
        securityGroupId?: string(name='SecurityGroupId'),
        vSwitchId?: string(name='VSwitchId'),
        vpcId?: string(name='VpcId'),
      }(name='UserVpc'),
      webIDEUrl?: string(name='WebIDEUrl'),
      workspaceId?: string(name='WorkspaceId'),
      workspaceName?: string(name='WorkspaceName'),
    }
  ](name='Instances'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(InstanceId: string): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startInstanceWithOptions(InstanceId, headers, runtime);
}

async function startInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopInstanceRequest {
  saveImage?: boolean(name='SaveImage'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(InstanceId: string, request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopInstanceWithOptions(InstanceId, request, headers, runtime);
}

async function stopInstanceWithOptions(InstanceId: string, request: StopInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.saveImage)) {
    query['SaveImage'] = request.saveImage;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateInstanceRequest {
  accessibility?: string(name='Accessibility'),
  datasets?: [ 
    {
      datasetId?: string(name='DatasetId'),
      mountPath?: string(name='MountPath'),
    }
  ](name='Datasets'),
  disassociateDatasets?: boolean(name='DisassociateDatasets'),
  disassociateVpc?: boolean(name='DisassociateVpc'),
  ecsSpec?: string(name='EcsSpec'),
  imageId?: string(name='ImageId'),
  imageUrl?: string(name='ImageUrl'),
  instanceName?: string(name='InstanceName'),
  requestedResource?: {
    CPU?: string(name='CPU'),
    GPU?: string(name='GPU'),
    GPUType?: string(name='GPUType'),
    memory?: string(name='Memory'),
    sharedMemory?: string(name='SharedMemory'),
  }(name='RequestedResource'),
  userVpc?: {
    securityGroupId?: string(name='SecurityGroupId'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
  }(name='UserVpc'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(InstanceId: string, request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceWithOptions(InstanceId, request, headers, runtime);
}

async function updateInstanceWithOptions(InstanceId: string, request: UpdateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.datasets)) {
    body['Datasets'] = request.datasets;
  }
  if (!Util.isUnset(request.disassociateDatasets)) {
    body['DisassociateDatasets'] = request.disassociateDatasets;
  }
  if (!Util.isUnset(request.disassociateVpc)) {
    body['DisassociateVpc'] = request.disassociateVpc;
  }
  if (!Util.isUnset(request.ecsSpec)) {
    body['EcsSpec'] = request.ecsSpec;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.requestedResource)) {
    body['RequestedResource'] = request.requestedResource;
  }
  if (!Util.isUnset(request.userVpc)) {
    body['UserVpc'] = request.userVpc;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = `/api/v2/instances/${OpenApiUtil.getEncodeParam(InstanceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

