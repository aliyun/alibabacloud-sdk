/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dataphin-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataSourceInfo {
  configs?: map[string]string(name='Configs'),
  createTime?: long(name='CreateTime'),
  creator?: string(name='Creator'),
  creatorName?: string(name='CreatorName'),
  description?: string(name='Description'),
  env?: string(name='Env'),
  id?: long(name='Id'),
  modifyTime?: long(name='ModifyTime'),
  name?: string(name='Name'),
  owner?: string(name='Owner'),
  ownerName?: string(name='OwnerName'),
  scope?: string(name='Scope'),
  tenantId?: long(name='TenantId'),
  type?: string(name='Type'),
}

model DatasourceCreate {
  checkActivity?: boolean(name='CheckActivity'),
  configs?: map[string]string(name='Configs'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model AddTenantMembersRequest {
  addCommand?: {
    userList?: [ 
      {
        id?: string(name='Id', example='1323241'),
        roleList?: [ string ](name='RoleList'),
      }
    ](name='UserList', description='This parameter is required.'),
  }(name='AddCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model AddTenantMembersShrinkRequest {
  addCommandShrink?: string(name='AddCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model AddTenantMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddTenantMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTenantMembersResponseBody(name='body'),
}

/**
 * @summary 新增租户成员
 *
 * @param tmpReq AddTenantMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddTenantMembersResponse
 */
async function addTenantMembersWithOptions(tmpReq: AddTenantMembersRequest, runtime: Util.RuntimeOptions): AddTenantMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddTenantMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addCommand)) {
    request.addCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addCommand, 'AddCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addCommandShrink)) {
    body['AddCommand'] = request.addCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddTenantMembers',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增租户成员
 *
 * @param request AddTenantMembersRequest
 * @return AddTenantMembersResponse
 */
async function addTenantMembers(request: AddTenantMembersRequest): AddTenantMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTenantMembersWithOptions(request, runtime);
}

model AddTenantMembersBySourceUserRequest {
  addCommand?: {
    sourceUserList?: [ 
      {
        accountName?: string(name='AccountName', example='123@xx.com'),
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        displayName?: string(name='DisplayName'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        sourceId?: string(name='SourceId', example='2323131'),
      }
    ](name='SourceUserList'),
  }(name='AddCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model AddTenantMembersBySourceUserShrinkRequest {
  addCommandShrink?: string(name='AddCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model AddTenantMembersBySourceUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddTenantMembersBySourceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTenantMembersBySourceUserResponseBody(name='body'),
}

/**
 * @summary 通过原始用户添加租户成员.
 *
 * @param tmpReq AddTenantMembersBySourceUserRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddTenantMembersBySourceUserResponse
 */
async function addTenantMembersBySourceUserWithOptions(tmpReq: AddTenantMembersBySourceUserRequest, runtime: Util.RuntimeOptions): AddTenantMembersBySourceUserResponse {
  Util.validateModel(tmpReq);
  var request = new AddTenantMembersBySourceUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addCommand)) {
    request.addCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addCommand, 'AddCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addCommandShrink)) {
    body['AddCommand'] = request.addCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddTenantMembersBySourceUser',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过原始用户添加租户成员.
 *
 * @param request AddTenantMembersBySourceUserRequest
 * @return AddTenantMembersBySourceUserResponse
 */
async function addTenantMembersBySourceUser(request: AddTenantMembersBySourceUserRequest): AddTenantMembersBySourceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTenantMembersBySourceUserWithOptions(request, runtime);
}

model AddUserGroupMemberRequest {
  addCommand?: {
    userGroupId?: string(name='UserGroupId', description='This parameter is required.', example='132331'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='AddCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model AddUserGroupMemberShrinkRequest {
  addCommandShrink?: string(name='AddCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model AddUserGroupMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserGroupMemberResponseBody(name='body'),
}

/**
 * @summary 添加用户组成员.
 *
 * @param tmpReq AddUserGroupMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddUserGroupMemberResponse
 */
async function addUserGroupMemberWithOptions(tmpReq: AddUserGroupMemberRequest, runtime: Util.RuntimeOptions): AddUserGroupMemberResponse {
  Util.validateModel(tmpReq);
  var request = new AddUserGroupMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addCommand)) {
    request.addCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addCommand, 'AddCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addCommandShrink)) {
    body['AddCommand'] = request.addCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddUserGroupMember',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加用户组成员.
 *
 * @param request AddUserGroupMemberRequest
 * @return AddUserGroupMemberResponse
 */
async function addUserGroupMember(request: AddUserGroupMemberRequest): AddUserGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserGroupMemberWithOptions(request, runtime);
}

model CheckDataSourceConnectivityRequest {
  checkCommand?: {
    configItemList?: [ 
      {
        key?: string(name='Key', description='This parameter is required.', example='k1'),
        value?: string(name='Value', description='This parameter is required.', example='v1'),
      }
    ](name='ConfigItemList', description='This parameter is required.'),
    type?: string(name='Type', description='This parameter is required.', example='MAX_COMPUTE'),
  }(name='CheckCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CheckDataSourceConnectivityShrinkRequest {
  checkCommandShrink?: string(name='CheckCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CheckDataSourceConnectivityResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CheckDataSourceConnectivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceConnectivityResponseBody(name='body'),
}

/**
 * @summary 检查数据源连通性
 *
 * @param tmpReq CheckDataSourceConnectivityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckDataSourceConnectivityResponse
 */
async function checkDataSourceConnectivityWithOptions(tmpReq: CheckDataSourceConnectivityRequest, runtime: Util.RuntimeOptions): CheckDataSourceConnectivityResponse {
  Util.validateModel(tmpReq);
  var request = new CheckDataSourceConnectivityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.checkCommand)) {
    request.checkCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkCommand, 'CheckCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkCommandShrink)) {
    body['CheckCommand'] = request.checkCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckDataSourceConnectivity',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查数据源连通性
 *
 * @param request CheckDataSourceConnectivityRequest
 * @return CheckDataSourceConnectivityResponse
 */
async function checkDataSourceConnectivity(request: CheckDataSourceConnectivityRequest): CheckDataSourceConnectivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDataSourceConnectivityWithOptions(request, runtime);
}

model CheckDataSourceConnectivityByIdRequest {
  id?: long(name='Id', description='This parameter is required.', example='123'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CheckDataSourceConnectivityByIdResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CheckDataSourceConnectivityByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceConnectivityByIdResponseBody(name='body'),
}

/**
 * @summary 检查已创建的数据源是否正常连通
 *
 * @param request CheckDataSourceConnectivityByIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckDataSourceConnectivityByIdResponse
 */
async function checkDataSourceConnectivityByIdWithOptions(request: CheckDataSourceConnectivityByIdRequest, runtime: Util.RuntimeOptions): CheckDataSourceConnectivityByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckDataSourceConnectivityById',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查已创建的数据源是否正常连通
 *
 * @param request CheckDataSourceConnectivityByIdRequest
 * @return CheckDataSourceConnectivityByIdResponse
 */
async function checkDataSourceConnectivityById(request: CheckDataSourceConnectivityByIdRequest): CheckDataSourceConnectivityByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDataSourceConnectivityByIdWithOptions(request, runtime);
}

model CheckResourcePermissionRequest {
  checkCommand?: {
    operate?: string(name='Operate', description='This parameter is required.', example='UPDATE'),
    resourceList?: [ 
      {
        resourceId?: string(name='ResourceId', description='This parameter is required.', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType?: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userId?: string(name='UserId', description='This parameter is required.', example='323231'),
  }(name='CheckCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CheckResourcePermissionShrinkRequest {
  checkCommandShrink?: string(name='CheckCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CheckResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  resourcePermissionList?: [ 
    {
      hasPermission?: boolean(name='HasPermission', example='true'),
      resourceId?: string(name='ResourceId', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
    }
  ](name='ResourcePermissionList'),
  success?: boolean(name='Success', example='true'),
}

model CheckResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResourcePermissionResponseBody(name='body'),
}

/**
 * @summary 校验用户是否有指定资源权限点.
 *
 * @param tmpReq CheckResourcePermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckResourcePermissionResponse
 */
async function checkResourcePermissionWithOptions(tmpReq: CheckResourcePermissionRequest, runtime: Util.RuntimeOptions): CheckResourcePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new CheckResourcePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.checkCommand)) {
    request.checkCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkCommand, 'CheckCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkCommandShrink)) {
    body['CheckCommand'] = request.checkCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckResourcePermission',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 校验用户是否有指定资源权限点.
 *
 * @param request CheckResourcePermissionRequest
 * @return CheckResourcePermissionResponse
 */
async function checkResourcePermission(request: CheckResourcePermissionRequest): CheckResourcePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResourcePermissionWithOptions(request, runtime);
}

model CreateAdHocFileRequest {
  createCommand?: {
    content?: string(name='Content', description='This parameter is required.', example='select 1;'),
    directory?: string(name='Directory', description='This parameter is required.', example='/xx1/xx2/'),
    name?: string(name='Name', description='This parameter is required.', example='test_xx'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='11212133'),
  }(name='CreateCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateAdHocFileShrinkRequest {
  createCommandShrink?: string(name='CreateCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  fileId?: long(name='FileId', example='1212313222'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAdHocFileResponseBody(name='body'),
}

/**
 * @summary 创建即席查询文件
 *
 * @param tmpReq CreateAdHocFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAdHocFileResponse
 */
async function createAdHocFileWithOptions(tmpReq: CreateAdHocFileRequest, runtime: Util.RuntimeOptions): CreateAdHocFileResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAdHocFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createCommand)) {
    request.createCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createCommand, 'CreateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createCommandShrink)) {
    body['CreateCommand'] = request.createCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAdHocFile',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建即席查询文件
 *
 * @param request CreateAdHocFileRequest
 * @return CreateAdHocFileResponse
 */
async function createAdHocFile(request: CreateAdHocFileRequest): CreateAdHocFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAdHocFileWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  createCommand?: {
    devDataSourceCreate?: {
      dataSourceCreate?: {
        checkActivity?: boolean(name='CheckActivity', example='true'),
        configItemList?: [ 
          {
            key?: string(name='Key', description='This parameter is required.', example='k1'),
            value?: string(name='Value', description='This parameter is required.', example='v1'),
          }
        ](name='ConfigItemList', description='This parameter is required.'),
        description?: string(name='Description', example='datasource for xxx in dev'),
        name?: string(name='Name', example='dp_test_dev'),
        type?: string(name='Type', example='MAX_COMPUTE'),
      }(name='DataSourceCreate', description='数据源创建结构体'),
      prodDataSourceId?: long(name='ProdDataSourceId', example='1011'),
    }(name='DevDataSourceCreate'),
    prodDataSourceCreate?: {
      checkActivity?: boolean(name='CheckActivity', example='true'),
      configItemList?: [ 
        {
          key?: string(name='Key', description='This parameter is required.', example='k1'),
          value?: string(name='Value', description='This parameter is required.', example='v1'),
        }
      ](name='ConfigItemList', description='This parameter is required.'),
      description?: string(name='Description', example='datasource for xx'),
      name?: string(name='Name', example='dp_test'),
      type?: string(name='Type', example='MAX_COMPUTE'),
    }(name='ProdDataSourceCreate', description='数据源创建结构体'),
  }(name='CreateCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateDataSourceShrinkRequest {
  createCommandShrink?: string(name='CreateCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateDataSourceResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    devDataSourceId?: long(name='DevDataSourceId', example='123'),
    prodDataSourceId?: long(name='ProdDataSourceId', example='12345'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary 新建数据源
 *
 * @param tmpReq CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
async function createDataSourceWithOptions(tmpReq: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createCommand)) {
    request.createCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createCommand, 'CreateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createCommandShrink)) {
    body['CreateCommand'] = request.createCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建数据源
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateDirectoryRequest {
  createCommand?: {
    category?: string(name='Category', description='This parameter is required.', example='tempCode'),
    directory?: string(name='Directory', description='This parameter is required.', example='/'),
    name?: string(name='Name', description='This parameter is required.', example='test_xx'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='1212344'),
  }(name='CreateCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateDirectoryShrinkRequest {
  createCommandShrink?: string(name='CreateCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  fileId?: long(name='FileId', example='1311113211'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDirectoryResponseBody(name='body'),
}

/**
 * @summary 创建菜单树文件目录
 *
 * @param tmpReq CreateDirectoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDirectoryResponse
 */
async function createDirectoryWithOptions(tmpReq: CreateDirectoryRequest, runtime: Util.RuntimeOptions): CreateDirectoryResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDirectoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createCommand)) {
    request.createCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createCommand, 'CreateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createCommandShrink)) {
    body['CreateCommand'] = request.createCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDirectory',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建菜单树文件目录
 *
 * @param request CreateDirectoryRequest
 * @return CreateDirectoryResponse
 */
async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDirectoryWithOptions(request, runtime);
}

model CreateNodeSupplementRequest {
  createCommand?: {
    containAllDownStream?: boolean(name='ContainAllDownStream'),
    downStreamNodeIdList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id'),
      }
    ](name='DownStreamNodeIdList'),
    endBizDate?: string(name='EndBizDate', description='This parameter is required.', example='2021-06-01'),
    filterList?: [ 
      {
        exclude?: boolean(name='Exclude'),
        key?: string(name='Key'),
        valueList?: [ string ](name='ValueList'),
      }
    ](name='FilterList'),
    globalParamList?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='GlobalParamList'),
    maxDueTime?: string(name='MaxDueTime'),
    minDueTime?: string(name='MinDueTime'),
    name?: string(name='Name', example='xx测试'),
    nodeIdList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', description='This parameter is required.'),
      }
    ](name='NodeIdList', description='This parameter is required.'),
    nodeParamsList?: [ 
      {
        nodeId?: string(name='NodeId'),
        paramList?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='ParamList'),
      }
    ](name='NodeParamsList'),
    parallelism?: int32(name='Parallelism'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='101121'),
    startBizDate?: string(name='StartBizDate', description='This parameter is required.', example='2021-06-01'),
  }(name='CreateCommand', description='This parameter is required.'),
  env?: string(name='Env', example='DEV/PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateNodeSupplementShrinkRequest {
  createCommandShrink?: string(name='CreateCommand', description='This parameter is required.'),
  env?: string(name='Env', example='DEV/PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateNodeSupplementResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitId?: string(name='SubmitId', example='f_2264518792396800000_20210223_2329354897145659392'),
  success?: boolean(name='Success', example='true/false'),
}

model CreateNodeSupplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeSupplementResponseBody(name='body'),
}

/**
 * @summary 通用补数据接口 1.会生成补数据实例运行：影响相关产产出表数据 2.会进行任务运行：造成计算的费用以及存储的费用
 *
 * @param tmpReq CreateNodeSupplementRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNodeSupplementResponse
 */
async function createNodeSupplementWithOptions(tmpReq: CreateNodeSupplementRequest, runtime: Util.RuntimeOptions): CreateNodeSupplementResponse {
  Util.validateModel(tmpReq);
  var request = new CreateNodeSupplementShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createCommand)) {
    request.createCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createCommand, 'CreateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createCommandShrink)) {
    body['CreateCommand'] = request.createCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNodeSupplement',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通用补数据接口 1.会生成补数据实例运行：影响相关产产出表数据 2.会进行任务运行：造成计算的费用以及存储的费用
 *
 * @param request CreateNodeSupplementRequest
 * @return CreateNodeSupplementResponse
 */
async function createNodeSupplement(request: CreateNodeSupplementRequest): CreateNodeSupplementResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNodeSupplementWithOptions(request, runtime);
}

model CreateUserGroupRequest {
  createCommand?: {
    active?: boolean(name='Active', example='true'),
    adminUserIdList?: [ string ](name='AdminUserIdList'),
    description?: string(name='Description', example='xx'),
    name?: string(name='Name'),
  }(name='CreateCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateUserGroupShrinkRequest {
  createCommandShrink?: string(name='CreateCommand'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model CreateUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userGroupId?: string(name='UserGroupId', example='2313131'),
}

model CreateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupResponseBody(name='body'),
}

/**
 * @summary 新建用户组.
 *
 * @param tmpReq CreateUserGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUserGroupResponse
 */
async function createUserGroupWithOptions(tmpReq: CreateUserGroupRequest, runtime: Util.RuntimeOptions): CreateUserGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createCommand)) {
    request.createCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createCommand, 'CreateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createCommandShrink)) {
    body['CreateCommand'] = request.createCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserGroup',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建用户组.
 *
 * @param request CreateUserGroupRequest
 * @return CreateUserGroupResponse
 */
async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserGroupWithOptions(request, runtime);
}

model DeleteAdHocFileRequest {
  fileId?: long(name='FileId', description='This parameter is required.', example='12121111'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='12132323'),
}

model DeleteAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAdHocFileResponseBody(name='body'),
}

/**
 * @summary 删除菜单树即席查询文件
 *
 * @param request DeleteAdHocFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAdHocFileResponse
 */
async function deleteAdHocFileWithOptions(request: DeleteAdHocFileRequest, runtime: Util.RuntimeOptions): DeleteAdHocFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAdHocFile',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除菜单树即席查询文件
 *
 * @param request DeleteAdHocFileRequest
 * @return DeleteAdHocFileResponse
 */
async function deleteAdHocFile(request: DeleteAdHocFileRequest): DeleteAdHocFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAdHocFileWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  deleteCommand?: {
    mode?: string(name='Mode', description='This parameter is required.', example='DEV'),
    prodDataSourceId?: long(name='ProdDataSourceId', description='This parameter is required.', example='13121'),
  }(name='DeleteCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model DeleteDataSourceShrinkRequest {
  deleteCommandShrink?: string(name='DeleteCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model DeleteDataSourceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary 删除数据源
 *
 * @param tmpReq DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
async function deleteDataSourceWithOptions(tmpReq: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteDataSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deleteCommand)) {
    request.deleteCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deleteCommand, 'DeleteCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deleteCommandShrink)) {
    body['DeleteCommand'] = request.deleteCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据源
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteDirectoryRequest {
  fileId?: long(name='FileId', description='This parameter is required.', example='12121111'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='12132323'),
}

model DeleteDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDirectoryResponseBody(name='body'),
}

/**
 * @summary 删除菜单树文件目录
 *
 * @param request DeleteDirectoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDirectoryResponse
 */
async function deleteDirectoryWithOptions(request: DeleteDirectoryRequest, runtime: Util.RuntimeOptions): DeleteDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDirectory',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除菜单树文件目录
 *
 * @param request DeleteDirectoryRequest
 * @return DeleteDirectoryResponse
 */
async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoryWithOptions(request, runtime);
}

model DeleteUserGroupRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  userGroupId?: string(name='UserGroupId', description='This parameter is required.', example='232131'),
}

model DeleteUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupResponseBody(name='body'),
}

/**
 * @summary 删除用户组.
 *
 * @param request DeleteUserGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUserGroupResponse
 */
async function deleteUserGroupWithOptions(request: DeleteUserGroupRequest, runtime: Util.RuntimeOptions): DeleteUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.userGroupId)) {
    query['UserGroupId'] = request.userGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserGroup',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除用户组.
 *
 * @param request DeleteUserGroupRequest
 * @return DeleteUserGroupResponse
 */
async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserGroupWithOptions(request, runtime);
}

model ExecuteManualNodeRequest {
  env?: string(name='Env', example='PROD'),
  executeCommand?: {
    endBizDate?: string(name='EndBizDate', description='This parameter is required.', example='2024-05-07'),
    flowName?: string(name='FlowName', example='xx测试'),
    nodeId?: string(name='NodeId', description='This parameter is required.', example='n_12132'),
    paramList?: [ 
      {
        key?: string(name='Key', example='param1'),
        value?: string(name='Value', example='1'),
      }
    ](name='ParamList'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='123324'),
    startBizDate?: string(name='StartBizDate', description='This parameter is required.', example='2024-05-01'),
  }(name='ExecuteCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ExecuteManualNodeShrinkRequest {
  env?: string(name='Env', example='PROD'),
  executeCommandShrink?: string(name='ExecuteCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ExecuteManualNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  flowId?: string(name='FlowId', example='f_1231_121324'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ExecuteManualNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteManualNodeResponseBody(name='body'),
}

/**
 * @summary 运行手动调度节点。
 *
 * @param tmpReq ExecuteManualNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteManualNodeResponse
 */
async function executeManualNodeWithOptions(tmpReq: ExecuteManualNodeRequest, runtime: Util.RuntimeOptions): ExecuteManualNodeResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteManualNodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.executeCommand)) {
    request.executeCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executeCommand, 'ExecuteCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.executeCommandShrink)) {
    body['ExecuteCommand'] = request.executeCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteManualNode',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 运行手动调度节点。
 *
 * @param request ExecuteManualNodeRequest
 * @return ExecuteManualNodeResponse
 */
async function executeManualNode(request: ExecuteManualNodeRequest): ExecuteManualNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeManualNodeWithOptions(request, runtime);
}

model FixDataRequest {
  env?: string(name='Env', example='PROD'),
  fixDataCommand?: {
    containRootInstance?: boolean(name='ContainRootInstance', example='false'),
    downStreamInstanceIdList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_2323421'),
      }
    ](name='DownStreamInstanceIdList'),
    downstreamRange?: string(name='DownstreamRange', example='ALL_INSTANCE'),
    forceRerun?: boolean(name='ForceRerun', example='false'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='132344'),
    rootInstanceId?: {
      fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
      id?: string(name='Id', description='This parameter is required.', example='t_2323111'),
    }(name='RootInstanceId', description='This parameter is required.'),
  }(name='FixDataCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model FixDataShrinkRequest {
  env?: string(name='Env', example='PROD'),
  fixDataCommandShrink?: string(name='FixDataCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model FixDataResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitId?: string(name='SubmitId', example='12324234'),
  success?: boolean(name='Success'),
}

model FixDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FixDataResponseBody(name='body'),
}

/**
 * @summary 重跑下游(修复链路数据), 支持强制重跑下游。影响范围: 1. 会产生计算成本；2. 会影响数据产出
 *
 * @param tmpReq FixDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FixDataResponse
 */
async function fixDataWithOptions(tmpReq: FixDataRequest, runtime: Util.RuntimeOptions): FixDataResponse {
  Util.validateModel(tmpReq);
  var request = new FixDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fixDataCommand)) {
    request.fixDataCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fixDataCommand, 'FixDataCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.fixDataCommandShrink)) {
    body['FixDataCommand'] = request.fixDataCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FixData',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重跑下游(修复链路数据), 支持强制重跑下游。影响范围: 1. 会产生计算成本；2. 会影响数据产出
 *
 * @param request FixDataRequest
 * @return FixDataResponse
 */
async function fixData(request: FixDataRequest): FixDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return fixDataWithOptions(request, runtime);
}

model GetAdHocFileRequest {
  fileId?: long(name='FileId', description='This parameter is required.', example='12121111'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='12132323'),
}

model GetAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  fileInfo?: {
    content?: string(name='Content', example='select 1;'),
    creator?: string(name='Creator', example='12121'),
    directory?: string(name='Directory', example='/xx1/xx2/'),
    id?: long(name='Id', example='12121111'),
    lastModifier?: string(name='LastModifier', example='12121'),
    name?: string(name='Name', example='xx测试'),
    projectId?: long(name='ProjectId', example='12132323'),
  }(name='FileInfo'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdHocFileResponseBody(name='body'),
}

/**
 * @summary 查询即席查询文件。
 *
 * @param request GetAdHocFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAdHocFileResponse
 */
async function getAdHocFileWithOptions(request: GetAdHocFileRequest, runtime: Util.RuntimeOptions): GetAdHocFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAdHocFile',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询即席查询文件。
 *
 * @param request GetAdHocFileRequest
 * @return GetAdHocFileResponse
 */
async function getAdHocFile(request: GetAdHocFileRequest): GetAdHocFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAdHocFileWithOptions(request, runtime);
}

model GetDevObjectDependencyRequest {
  objectFrom?: string(name='ObjectFrom', description='This parameter is required.', example='DATA_PROCESS'),
  objectId?: string(name='ObjectId', description='This parameter is required.', example='7026498387616064'),
  objectType?: string(name='ObjectType', description='This parameter is required.', example='7026498387616064'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='7021037162911616L'),
}

model GetDevObjectDependencyResponseBody = {
  code?: string(name='Code', example='OK'),
  devObjectDependencyList?: [ 
    {
      autoParse?: boolean(name='AutoParse', example='true'),
      bizType?: string(name='BizType', example='SCRIPT'),
      bizUnitId?: string(name='BizUnitId', example='13111'),
      bizUnitName?: string(name='BizUnitName'),
      cronExpression?: string(name='CronExpression', example='0 0 0 * * ?'),
      customCronExpression?: boolean(name='CustomCronExpression', example='true'),
      dependFieldList?: [ string ](name='DependFieldList'),
      dependencyPeriod?: {
        periodOffset?: int32(name='PeriodOffset', example='1'),
        periodType?: string(name='PeriodType', example='CURRENT_PERIOD'),
      }(name='DependencyPeriod'),
      dependencyStrategy?: string(name='DependencyStrategy', example='ALL'),
      dimMidNode?: boolean(name='DimMidNode', example='true'),
      effectFieldList?: [ string ](name='EffectFieldList'),
      externalBizInfo?: string(name='ExternalBizInfo'),
      manuallyAdd?: boolean(name='ManuallyAdd', example='false'),
      nodeId?: string(name='NodeId', example='n_13211'),
      nodeName?: string(name='NodeName'),
      nodeOutputName?: string(name='NodeOutputName', example='n_xx'),
      nodeOutputTableName?: string(name='NodeOutputTableName', example='t_xx'),
      nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      outputContextParamList?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='v1'),
          description?: string(name='Description', example='xxtest'),
          key?: string(name='Key', example='v1'),
        }
      ](name='OutputContextParamList'),
      ownerList?: [ 
        {
          id?: string(name='Id', example='11123'),
          name?: string(name='Name'),
        }
      ](name='OwnerList'),
      periodDiff?: int32(name='PeriodDiff', example='1'),
      projectId?: long(name='ProjectId', example='123131'),
      projectName?: string(name='ProjectName'),
      scheduleType?: string(name='ScheduleType', example='DAILY'),
      selfDepend?: boolean(name='SelfDepend', example='true'),
      subBizType?: string(name='SubBizType', example='SHELL'),
      valid?: boolean(name='Valid', example='true'),
    }
  ](name='DevObjectDependencyList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetDevObjectDependencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDevObjectDependencyResponseBody(name='body'),
}

/**
 * @summary 查询开发态对象上游依赖。
 *
 * @param request GetDevObjectDependencyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDevObjectDependencyResponse
 */
async function getDevObjectDependencyWithOptions(request: GetDevObjectDependencyRequest, runtime: Util.RuntimeOptions): GetDevObjectDependencyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.objectFrom)) {
    query['ObjectFrom'] = request.objectFrom;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDevObjectDependency',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询开发态对象上游依赖。
 *
 * @param request GetDevObjectDependencyRequest
 * @return GetDevObjectDependencyResponse
 */
async function getDevObjectDependency(request: GetDevObjectDependencyRequest): GetDevObjectDependencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDevObjectDependencyWithOptions(request, runtime);
}

model GetInstanceDownStreamRequest {
  downStreamDepth?: int32(name='DownStreamDepth', description='This parameter is required.', example='1'),
  env?: string(name='Env', example='PROD'),
  instanceGet?: {
    instanceId?: string(name='InstanceId', description='This parameter is required.', example='t_5929472_20210411_9577721'),
    nodeType?: string(name='NodeType', description='This parameter is required.', example='DATA_PROCESS'),
  }(name='InstanceGet', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  runStatus?: string(name='RunStatus', example='SUCCESS'),
}

model GetInstanceDownStreamShrinkRequest {
  downStreamDepth?: int32(name='DownStreamDepth', description='This parameter is required.', example='1'),
  env?: string(name='Env', example='PROD'),
  instanceGetShrink?: string(name='InstanceGet', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  runStatus?: string(name='RunStatus', example='SUCCESS'),
}

model GetInstanceDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceRelationList?: [ 
    {
      downStreamDepth?: int32(name='DownStreamDepth', example='1'),
      extendInfo?: string(name='ExtendInfo', example='{"a":"x"}'),
      fieldInstanceList?: [ 
        {
          fieldInstanceId?: string(name='FieldInstanceId', example='t_23211'),
          runStatus?: string(name='RunStatus', example='SUCCESS'),
          selectStatus?: string(name='SelectStatus', example='OPTIONAL'),
        }
      ](name='FieldInstanceList'),
      instanceInfo?: {
        id?: string(name='Id', example='t_232411'),
        name?: string(name='Name'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }(name='InstanceInfo'),
      runStatus?: string(name='RunStatus', example='RUNNING'),
      selectStatus?: string(name='SelectStatus', example='OPTIONAL'),
      selectStatusCause?: string(name='SelectStatusCause', example='FIELD_DELETED'),
    }
  ](name='InstanceRelationList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceDownStreamResponseBody(name='body'),
}

/**
 * @summary 根据起始的实例查询该实例的下游
 *
 * @param tmpReq GetInstanceDownStreamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceDownStreamResponse
 */
async function getInstanceDownStreamWithOptions(tmpReq: GetInstanceDownStreamRequest, runtime: Util.RuntimeOptions): GetInstanceDownStreamResponse {
  Util.validateModel(tmpReq);
  var request = new GetInstanceDownStreamShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceGet)) {
    request.instanceGetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceGet, 'InstanceGet', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.downStreamDepth)) {
    query['DownStreamDepth'] = request.downStreamDepth;
  }
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.runStatus)) {
    query['RunStatus'] = request.runStatus;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceGetShrink)) {
    body['InstanceGet'] = request.instanceGetShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceDownStream',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据起始的实例查询该实例的下游
 *
 * @param request GetInstanceDownStreamRequest
 * @return GetInstanceDownStreamResponse
 */
async function getInstanceDownStream(request: GetInstanceDownStreamRequest): GetInstanceDownStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceDownStreamWithOptions(request, runtime);
}

model GetInstanceUpDownStreamRequest {
  downStreamDepth?: int32(name='DownStreamDepth', example='1'),
  env?: string(name='Env', example='PROD'),
  instanceId?: {
    fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
    id?: string(name='Id', description='This parameter is required.', example='t_123456'),
  }(name='InstanceId', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='1001121'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1'),
}

model GetInstanceUpDownStreamShrinkRequest {
  downStreamDepth?: int32(name='DownStreamDepth', example='1'),
  env?: string(name='Env', example='PROD'),
  instanceIdShrink?: string(name='InstanceId', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='1001121'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1'),
}

model GetInstanceUpDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceDagInfo?: {
    downInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='DownInstanceList'),
    startInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='StartInstanceList'),
    upInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='UpInstanceList'),
  }(name='InstanceDagInfo'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceUpDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceUpDownStreamResponseBody(name='body'),
}

/**
 * @summary 查询实例的上下游，支持逻辑表和代码任务。
 *
 * @param tmpReq GetInstanceUpDownStreamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceUpDownStreamResponse
 */
async function getInstanceUpDownStreamWithOptions(tmpReq: GetInstanceUpDownStreamRequest, runtime: Util.RuntimeOptions): GetInstanceUpDownStreamResponse {
  Util.validateModel(tmpReq);
  var request = new GetInstanceUpDownStreamShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceId)) {
    request.instanceIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceId, 'InstanceId', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.downStreamDepth)) {
    query['DownStreamDepth'] = request.downStreamDepth;
  }
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.upStreamDepth)) {
    query['UpStreamDepth'] = request.upStreamDepth;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceIdShrink)) {
    body['InstanceId'] = request.instanceIdShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceUpDownStream',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例的上下游，支持逻辑表和代码任务。
 *
 * @param request GetInstanceUpDownStreamRequest
 * @return GetInstanceUpDownStreamResponse
 */
async function getInstanceUpDownStream(request: GetInstanceUpDownStreamRequest): GetInstanceUpDownStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceUpDownStreamWithOptions(request, runtime);
}

model GetMyRolesRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetMyRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  roleList?: [ 
    {
      description?: string(name='Description'),
      id?: long(name='Id', example='300047957'),
      name?: string(name='Name', example='dataphinAdmin'),
    }
  ](name='RoleList'),
  success?: boolean(name='Success', example='true'),
}

model GetMyRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyRolesResponseBody(name='body'),
}

/**
 * @summary 获取用户角色列表
 *
 * @param request GetMyRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMyRolesResponse
 */
async function getMyRolesWithOptions(request: GetMyRolesRequest, runtime: Util.RuntimeOptions): GetMyRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMyRoles',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户角色列表
 *
 * @param request GetMyRolesRequest
 * @return GetMyRolesResponse
 */
async function getMyRoles(request: GetMyRolesRequest): GetMyRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMyRolesWithOptions(request, runtime);
}

model GetMyTenantsRequest {
  featureCodeList?: [ string ](name='FeatureCodeList'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetMyTenantsShrinkRequest {
  featureCodeListShrink?: string(name='FeatureCodeList'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetMyTenantsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  tenantList?: [ 
    {
      deleteTime?: long(name='DeleteTime', example='1717343597000'),
      deleted?: boolean(name='Deleted', example='false'),
      description?: string(name='Description'),
      id?: long(name='Id', example='132311'),
      name?: string(name='Name'),
      opsTenant?: boolean(name='OpsTenant', example='false'),
      ownerId?: string(name='OwnerId', example='21323231'),
      resourceLimited?: boolean(name='ResourceLimited', example='false'),
      tenantTypeList?: [ string ](name='TenantTypeList'),
      titleType?: string(name='TitleType', example='icon'),
      visible?: boolean(name='Visible', example='true'),
    }
  ](name='TenantList'),
}

model GetMyTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyTenantsResponseBody(name='body'),
}

/**
 * @summary 获取当前用户归属租户.
 *
 * @param tmpReq GetMyTenantsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMyTenantsResponse
 */
async function getMyTenantsWithOptions(tmpReq: GetMyTenantsRequest, runtime: Util.RuntimeOptions): GetMyTenantsResponse {
  Util.validateModel(tmpReq);
  var request = new GetMyTenantsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.featureCodeList)) {
    request.featureCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.featureCodeList, 'FeatureCodeList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.featureCodeListShrink)) {
    body['FeatureCodeList'] = request.featureCodeListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMyTenants',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取当前用户归属租户.
 *
 * @param request GetMyTenantsRequest
 * @return GetMyTenantsResponse
 */
async function getMyTenants(request: GetMyTenantsRequest): GetMyTenantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMyTenantsWithOptions(request, runtime);
}

model GetNodeUpDownStreamRequest {
  downStreamDepth?: int32(name='DownStreamDepth', example='1'),
  env?: string(name='Env', example='DEV'),
  nodeId?: {
    fieldIdList?: string(name='FieldIdList', example='12'),
    id?: string(name='Id', description='This parameter is required.', example='11313'),
  }(name='NodeId', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', example='113123'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1'),
}

model GetNodeUpDownStreamShrinkRequest {
  downStreamDepth?: int32(name='DownStreamDepth', example='1'),
  env?: string(name='Env', example='DEV'),
  nodeIdShrink?: string(name='NodeId', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', example='113123'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1'),
}

model GetNodeUpDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeDagInfo?: {
    downStreamNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='DownStreamNodeList'),
    startNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='StartNodeList'),
    upStreamNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='UpStreamNodeList'),
  }(name='NodeDagInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeUpDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeUpDownStreamResponseBody(name='body'),
}

/**
 * @summary 通用查询节点上下游接口
 *
 * @param tmpReq GetNodeUpDownStreamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeUpDownStreamResponse
 */
async function getNodeUpDownStreamWithOptions(tmpReq: GetNodeUpDownStreamRequest, runtime: Util.RuntimeOptions): GetNodeUpDownStreamResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodeUpDownStreamShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodeId)) {
    request.nodeIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodeId, 'NodeId', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.downStreamDepth)) {
    query['DownStreamDepth'] = request.downStreamDepth;
  }
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.upStreamDepth)) {
    query['UpStreamDepth'] = request.upStreamDepth;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeIdShrink)) {
    body['NodeId'] = request.nodeIdShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeUpDownStream',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通用查询节点上下游接口
 *
 * @param request GetNodeUpDownStreamRequest
 * @return GetNodeUpDownStreamResponse
 */
async function getNodeUpDownStream(request: GetNodeUpDownStreamRequest): GetNodeUpDownStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeUpDownStreamWithOptions(request, runtime);
}

model GetOperationSubmitStatusRequest {
  env?: string(name='Env', example='PROD'),
  jobId?: string(name='JobId', description='This parameter is required.', example='1324444131'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetOperationSubmitStatusResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  operationSubmitJob?: {
    externalBizId?: string(name='ExternalBizId', example='f_122_232342'),
    jobId?: string(name='JobId', example='123456'),
    operation?: string(name='Operation', example='SUPPLY_DATA'),
    operationStatus?: string(name='OperationStatus', example='SUCCESS'),
    operator?: string(name='Operator', example='132344'),
    progress?: string(name='Progress', example='80'),
  }(name='OperationSubmitJob'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetOperationSubmitStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOperationSubmitStatusResponseBody(name='body'),
}

/**
 * @summary 查询补数据提交的状态
 *
 * @param request GetOperationSubmitStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOperationSubmitStatusResponse
 */
async function getOperationSubmitStatusWithOptions(request: GetOperationSubmitStatusRequest, runtime: Util.RuntimeOptions): GetOperationSubmitStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOperationSubmitStatus',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询补数据提交的状态
 *
 * @param request GetOperationSubmitStatusRequest
 * @return GetOperationSubmitStatusResponse
 */
async function getOperationSubmitStatus(request: GetOperationSubmitStatusRequest): GetOperationSubmitStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOperationSubmitStatusWithOptions(request, runtime);
}

model GetPhysicalInstanceRequest {
  env?: string(name='Env', example='PROD'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='t_23231'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='2323131'),
}

model GetPhysicalInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instance?: {
    bizDate?: string(name='BizDate', example='2023-06-25'),
    dueTime?: string(name='DueTime', example='2023-06-27 00:30:00'),
    duration?: string(name='Duration', example='3600s'),
    endExecuteTime?: long(name='EndExecuteTime', example='2023-06-27 02:30:00'),
    extendInfo?: string(name='ExtendInfo', example='xx'),
    id?: string(name='Id', example='t_23231'),
    index?: int32(name='Index', example='1'),
    nodeInfo?: {
      bizUnitName?: string(name='BizUnitName', example='xx'),
      createTime?: string(name='CreateTime', example='2023-02-02 23:53:17'),
      creator?: {
        id?: string(name='Id', example='2323111'),
        name?: string(name='Name', example='zhangsan'),
      }(name='Creator'),
      description?: string(name='Description'),
      dryRun?: boolean(name='DryRun', example='false'),
      from?: string(name='From', example='DATA_PROCESS'),
      hasDev?: boolean(name='HasDev', example='true'),
      hasProd?: boolean(name='HasProd', example='true'),
      id?: string(name='Id', example='n_3232312'),
      lastModifiedTime?: string(name='LastModifiedTime', example='2024-02-02 23:53:17'),
      modifier?: {
        id?: string(name='Id', example='2323111'),
        name?: string(name='Name', example='zhangsan'),
      }(name='Modifier'),
      name?: string(name='Name'),
      ownerList?: [ 
        {
          id?: string(name='Id', example='2323111'),
          name?: string(name='Name', example='zhangsan'),
        }
      ](name='OwnerList'),
      priorityList?: [ string ](name='PriorityList'),
      resourceGroupList?: [ string ](name='ResourceGroupList'),
      schedulePaused?: boolean(name='SchedulePaused', example='false'),
      schedulePeriodList?: [ string ](name='SchedulePeriodList'),
      subDetailType?: string(name='SubDetailType', example='SHELL'),
      type?: string(name='Type', example='DATA_PROCESS'),
    }(name='NodeInfo'),
    startExecuteTime?: long(name='StartExecuteTime', example='2023-06-27 01:30:00'),
    statusList?: [ string ](name='StatusList'),
  }(name='Instance'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalInstanceResponseBody(name='body'),
}

/**
 * @summary 查询脚本的实例信息, 包括实例状态、运行时间等信息.
 *
 * @param request GetPhysicalInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhysicalInstanceResponse
 */
async function getPhysicalInstanceWithOptions(request: GetPhysicalInstanceRequest, runtime: Util.RuntimeOptions): GetPhysicalInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalInstance',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询脚本的实例信息, 包括实例状态、运行时间等信息.
 *
 * @param request GetPhysicalInstanceRequest
 * @return GetPhysicalInstanceResponse
 */
async function getPhysicalInstance(request: GetPhysicalInstanceRequest): GetPhysicalInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalInstanceWithOptions(request, runtime);
}

model GetPhysicalInstanceLogRequest {
  env?: string(name='Env', example='PROD'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='t_5929472_20210411_9577721'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='123131'),
}

model GetPhysicalInstanceLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  taskrunLogList?: [ 
    {
      duration?: string(name='Duration', example='60s'),
      endTime?: string(name='EndTime', example='2024-05-30 16:48:13'),
      logContent?: string(name='LogContent', example='xx'),
      startTime?: string(name='StartTime', example='2024-05-30 16:47:13'),
      status?: string(name='Status', example='SUCCESS'),
      taskrunId?: string(name='TaskrunId', example='tr_23231'),
    }
  ](name='TaskrunLogList'),
}

model GetPhysicalInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalInstanceLogResponseBody(name='body'),
}

/**
 * @summary 获取实例执行的日志，如果实例重跑了多次，则会有多条日志
 *
 * @param request GetPhysicalInstanceLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhysicalInstanceLogResponse
 */
async function getPhysicalInstanceLogWithOptions(request: GetPhysicalInstanceLogRequest, runtime: Util.RuntimeOptions): GetPhysicalInstanceLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalInstanceLog',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取实例执行的日志，如果实例重跑了多次，则会有多条日志
 *
 * @param request GetPhysicalInstanceLogRequest
 * @return GetPhysicalInstanceLogResponse
 */
async function getPhysicalInstanceLog(request: GetPhysicalInstanceLogRequest): GetPhysicalInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalInstanceLogWithOptions(request, runtime);
}

model GetPhysicalNodeRequest {
  env?: string(name='Env', example='PROD'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='n_232132'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetPhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfo?: {
    createTime?: long(name='CreateTime', example='1717343597000'),
    creator?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Creator'),
    cronExpression?: string(name='CronExpression', example='0 0 10 * * *'),
    dataSourceId?: long(name='DataSourceId', example='123456789'),
    dataSourceSchema?: string(name='DataSourceSchema', example='null'),
    description?: string(name='Description'),
    from?: string(name='From', example='DATA_PROCESS'),
    id?: string(name='Id', example='n_232132'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1717343597000'),
    modifier?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Modifier'),
    name?: string(name='Name'),
    operatorType?: string(name='OperatorType', example='SHELL'),
    outputNameList?: [ string ](name='OutputNameList'),
    owner?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Owner'),
    priority?: string(name='Priority', example='MIDDLE'),
    projectInfo?: {
      id?: string(name='Id', example='102132'),
      name?: string(name='Name'),
    }(name='ProjectInfo'),
    scheduleType?: string(name='ScheduleType', example='DAILY'),
    status?: string(name='Status', example='SUCCESS'),
    triggerConfig?: string(name='TriggerConfig', example='{"expression":"any_success"}'),
  }(name='NodeInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeResponseBody(name='body'),
}

/**
 * @summary 查询物理调度节点。
 *
 * @param request GetPhysicalNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhysicalNodeResponse
 */
async function getPhysicalNodeWithOptions(request: GetPhysicalNodeRequest, runtime: Util.RuntimeOptions): GetPhysicalNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalNode',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询物理调度节点。
 *
 * @param request GetPhysicalNodeRequest
 * @return GetPhysicalNodeResponse
 */
async function getPhysicalNode(request: GetPhysicalNodeRequest): GetPhysicalNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalNodeWithOptions(request, runtime);
}

model GetPhysicalNodeByOutputNameRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  outputName?: string(name='OutputName', description='This parameter is required.', example='t_test'),
}

model GetPhysicalNodeByOutputNameResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfo?: {
    createTime?: long(name='CreateTime', example='1717343597000'),
    creator?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Creator'),
    description?: string(name='Description'),
    from?: string(name='From', example='DATA_PROCESS'),
    id?: string(name='Id', example='n_2321'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1717343597000'),
    modifier?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Modifier'),
    name?: string(name='Name'),
    operatorType?: string(name='OperatorType', example='SHELL'),
    owner?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Owner'),
    priority?: string(name='Priority', example='MIDDLE'),
    projectInfo?: {
      id?: string(name='Id', example='1324211'),
      name?: string(name='Name'),
    }(name='ProjectInfo'),
    scheduleType?: string(name='ScheduleType', example='DAILY'),
    status?: string(name='Status', example='SUCCESS'),
    triggerConfig?: string(name='TriggerConfig', example='{"expression":"any_success"}'),
  }(name='NodeInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeByOutputNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeByOutputNameResponseBody(name='body'),
}

/**
 * @summary 根据输出名查询对应的物理节点。
 *
 * @param request GetPhysicalNodeByOutputNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhysicalNodeByOutputNameResponse
 */
async function getPhysicalNodeByOutputNameWithOptions(request: GetPhysicalNodeByOutputNameRequest, runtime: Util.RuntimeOptions): GetPhysicalNodeByOutputNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.outputName)) {
    query['OutputName'] = request.outputName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalNodeByOutputName',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据输出名查询对应的物理节点。
 *
 * @param request GetPhysicalNodeByOutputNameRequest
 * @return GetPhysicalNodeByOutputNameResponse
 */
async function getPhysicalNodeByOutputName(request: GetPhysicalNodeByOutputNameRequest): GetPhysicalNodeByOutputNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalNodeByOutputNameWithOptions(request, runtime);
}

model GetPhysicalNodeContentRequest {
  env?: string(name='Env', example='PROD'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='n_232411'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetPhysicalNodeContentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    codeContent?: string(name='CodeContent', example='select 1;'),
    nodeId?: string(name='NodeId', example='n_232411'),
    nodeName?: string(name='NodeName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeContentResponseBody(name='body'),
}

/**
 * @summary 查询调度节点代码内容。
 *
 * @param request GetPhysicalNodeContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhysicalNodeContentResponse
 */
async function getPhysicalNodeContentWithOptions(request: GetPhysicalNodeContentRequest, runtime: Util.RuntimeOptions): GetPhysicalNodeContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalNodeContent',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询调度节点代码内容。
 *
 * @param request GetPhysicalNodeContentRequest
 * @return GetPhysicalNodeContentResponse
 */
async function getPhysicalNodeContent(request: GetPhysicalNodeContentRequest): GetPhysicalNodeContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalNodeContentWithOptions(request, runtime);
}

model GetPhysicalNodeOperationLogRequest {
  env?: string(name='Env', example='PROD'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='n_231131'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetPhysicalNodeOperationLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  operationLogList?: [ 
    {
      context?: string(name='Context', example='xx'),
      operationTime?: string(name='OperationTime', example='2024-05-30 16:47:13'),
      operationType?: string(name='OperationType', example='PAUSE_TASK'),
      operator?: string(name='Operator', example='132222'),
      operatorName?: string(name='OperatorName'),
    }
  ](name='OperationLogList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeOperationLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeOperationLogResponseBody(name='body'),
}

/**
 * @summary 查询节点的操作日志。
 *
 * @param request GetPhysicalNodeOperationLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhysicalNodeOperationLogResponse
 */
async function getPhysicalNodeOperationLogWithOptions(request: GetPhysicalNodeOperationLogRequest, runtime: Util.RuntimeOptions): GetPhysicalNodeOperationLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalNodeOperationLog',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询节点的操作日志。
 *
 * @param request GetPhysicalNodeOperationLogRequest
 * @return GetPhysicalNodeOperationLogResponse
 */
async function getPhysicalNodeOperationLog(request: GetPhysicalNodeOperationLogRequest): GetPhysicalNodeOperationLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalNodeOperationLogWithOptions(request, runtime);
}

model GetProjectProduceUserRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='131311111321'),
}

model GetProjectProduceUserResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  user?: {
    id?: string(name='Id', example='123131'),
  }(name='User'),
}

model GetProjectProduceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectProduceUserResponseBody(name='body'),
}

/**
 * @summary 获取项目生产账号
 *
 * @param request GetProjectProduceUserRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectProduceUserResponse
 */
async function getProjectProduceUserWithOptions(request: GetProjectProduceUserRequest, runtime: Util.RuntimeOptions): GetProjectProduceUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectProduceUser',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取项目生产账号
 *
 * @param request GetProjectProduceUserRequest
 * @return GetProjectProduceUserResponse
 */
async function getProjectProduceUser(request: GetProjectProduceUserRequest): GetProjectProduceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectProduceUserWithOptions(request, runtime);
}

model GetSupplementDagrunRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  supplementId?: string(name='SupplementId', description='This parameter is required.', example='f_8241792_20201202_2099680'),
}

model GetSupplementDagrunResponseBody = {
  code?: string(name='Code', example='OK'),
  dagrunList?: [ 
    {
      bizDate?: string(name='BizDate', example='2024-04-01'),
      duration?: string(name='Duration', example='60s'),
      endExecuteTime?: long(name='EndExecuteTime', example='1717081789000'),
      id?: string(name='Id', description='Dagrun ID', example='dr_2242792_14542'),
      startExecuteTime?: long(name='StartExecuteTime', example='1717081729000'),
      status?: string(name='Status', example='RUNNING'),
      supplementId?: string(name='SupplementId', example='f_8241792_20201202_2099680'),
    }
  ](name='DagrunList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetSupplementDagrunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSupplementDagrunResponseBody(name='body'),
}

/**
 * @summary 获取补数据工作流所有业务日期的Dagrun信息。
 *
 * @param request GetSupplementDagrunRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSupplementDagrunResponse
 */
async function getSupplementDagrunWithOptions(request: GetSupplementDagrunRequest, runtime: Util.RuntimeOptions): GetSupplementDagrunResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.supplementId)) {
    query['SupplementId'] = request.supplementId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSupplementDagrun',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取补数据工作流所有业务日期的Dagrun信息。
 *
 * @param request GetSupplementDagrunRequest
 * @return GetSupplementDagrunResponse
 */
async function getSupplementDagrun(request: GetSupplementDagrunRequest): GetSupplementDagrunResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSupplementDagrunWithOptions(request, runtime);
}

model GetSupplementDagrunInstanceRequest {
  dagrunId?: string(name='DagrunId', description='Dagrun ID

This parameter is required.', example='dr_2242792_14542'),
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GetSupplementDagrunInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceList?: [ 
    {
      bizDate?: long(name='BizDate', example='2024-04-01'),
      dueTime?: long(name='DueTime', example='2024-04-02'),
      duration?: string(name='Duration', example='60'),
      endExecuteTime?: long(name='EndExecuteTime', example='2024-04-12 00:25:02'),
      extendInfo?: string(name='ExtendInfo', example='{"a":"b"}'),
      id?: string(name='Id', example='t_239496_20210411_246982077481'),
      index?: int32(name='Index', example='1'),
      nodeInfo?: {
        bizUnitName?: string(name='BizUnitName', example='xx测试'),
        createTime?: string(name='CreateTime', example='2024-01-30 10:08:49'),
        creator?: {
          id?: string(name='Id', example='1001012'),
          name?: string(name='Name', example='xx测试'),
        }(name='Creator'),
        description?: string(name='Description', example='xx测试'),
        dryRun?: boolean(name='DryRun', example='true'),
        from?: string(name='From', example='DATA_PROCESS'),
        hasDev?: boolean(name='HasDev', example='true'),
        hasProd?: boolean(name='HasProd', example='true'),
        id?: string(name='Id', example='n_239496'),
        lastModifiedTime?: string(name='LastModifiedTime', example='2024-01-30 10:08:49'),
        modifier?: {
          id?: string(name='Id', example='1001012'),
          name?: string(name='Name', example='xx测试'),
        }(name='Modifier'),
        name?: string(name='Name', example='xx测试'),
        ownerList?: [ 
          {
            id?: string(name='Id', example='1001012'),
            name?: string(name='Name', example='xx测试'),
          }
        ](name='OwnerList'),
        priorityList?: [ string ](name='PriorityList'),
        resourceGroupList?: [ string ](name='ResourceGroupList'),
        schedulePaused?: boolean(name='SchedulePaused', example='true'),
        schedulePeriodList?: [ string ](name='SchedulePeriodList'),
        subDetailType?: string(name='SubDetailType', example='SHELL'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }(name='NodeInfo'),
      startExecuteTime?: long(name='StartExecuteTime', example='2024-04-12 00:00:00'),
      statusList?: [ string ](name='StatusList'),
      type?: string(name='Type', example='SUPPLEMENT'),
    }
  ](name='InstanceList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetSupplementDagrunInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSupplementDagrunInstanceResponseBody(name='body'),
}

/**
 * @summary 列出补数据工作流下具体一个业务日期的所有节点的实例。
 *
 * @param request GetSupplementDagrunInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSupplementDagrunInstanceResponse
 */
async function getSupplementDagrunInstanceWithOptions(request: GetSupplementDagrunInstanceRequest, runtime: Util.RuntimeOptions): GetSupplementDagrunInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagrunId)) {
    query['DagrunId'] = request.dagrunId;
  }
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSupplementDagrunInstance',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出补数据工作流下具体一个业务日期的所有节点的实例。
 *
 * @param request GetSupplementDagrunInstanceRequest
 * @return GetSupplementDagrunInstanceResponse
 */
async function getSupplementDagrunInstance(request: GetSupplementDagrunInstanceRequest): GetSupplementDagrunInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSupplementDagrunInstanceWithOptions(request, runtime);
}

model GetUserBySourceIdRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  sourceId?: string(name='SourceId', description='This parameter is required.', example='323131'),
}

model GetUserBySourceIdResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  user?: {
    displayName?: string(name='DisplayName'),
    id?: string(name='Id', example='23231231'),
  }(name='User'),
}

model GetUserBySourceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserBySourceIdResponseBody(name='body'),
}

/**
 * @summary 通过用户原始Id（如阿里云Id）获取用户详情
 *
 * @param request GetUserBySourceIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserBySourceIdResponse
 */
async function getUserBySourceIdWithOptions(request: GetUserBySourceIdRequest, runtime: Util.RuntimeOptions): GetUserBySourceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserBySourceId',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过用户原始Id（如阿里云Id）获取用户详情
 *
 * @param request GetUserBySourceIdRequest
 * @return GetUserBySourceIdResponse
 */
async function getUserBySourceId(request: GetUserBySourceIdRequest): GetUserBySourceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserBySourceIdWithOptions(request, runtime);
}

model GetUserGroupRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  userGroupId?: string(name='UserGroupId', description='This parameter is required.', example='1313213'),
}

model GetUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userGroupInfo?: {
    active?: boolean(name='Active', example='true'),
    adminList?: [ 
      {
        accountName?: string(name='AccountName', example='xx'),
        displayName?: string(name='DisplayName'),
        id?: string(name='Id', example='131313'),
      }
    ](name='AdminList'),
    description?: string(name='Description', example='xx'),
    id?: string(name='Id', example='1313213'),
    myRole?: string(name='MyRole', example='xx'),
    name?: string(name='Name'),
  }(name='UserGroupInfo'),
}

model GetUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGroupResponseBody(name='body'),
}

/**
 * @summary 获取用户组详情.
 *
 * @param request GetUserGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserGroupResponse
 */
async function getUserGroupWithOptions(request: GetUserGroupRequest, runtime: Util.RuntimeOptions): GetUserGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.userGroupId)) {
    query['UserGroupId'] = request.userGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserGroup',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户组详情.
 *
 * @param request GetUserGroupRequest
 * @return GetUserGroupResponse
 */
async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserGroupWithOptions(request, runtime);
}

model GetUsersRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  userIdList?: [ string ](name='UserIdList', description='This parameter is required.'),
}

model GetUsersShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  userIdListShrink?: string(name='UserIdList', description='This parameter is required.'),
}

model GetUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userList?: [ 
    {
      accountName?: string(name='AccountName', example='123@xx.com'),
      dingNumber?: string(name='DingNumber', example='123@dingding'),
      displayName?: string(name='DisplayName'),
      displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus'),
      enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
      feiShuRobot?: string(name='FeiShuRobot', example='xx'),
      gmtCreate?: long(name='GmtCreate', example='1717343597000'),
      gmtModified?: long(name='GmtModified', example='1717343597000'),
      id?: string(name='Id', example='1233121'),
      mail?: string(name='Mail', example='123@xx.com'),
      mobilePhone?: string(name='MobilePhone', example='1388888888'),
      name?: string(name='Name'),
      nickName?: string(name='NickName'),
      parentId?: string(name='ParentId', example='231231'),
      realName?: string(name='RealName'),
      sourceId?: string(name='SourceId', example='123@xx.com'),
      sourceType?: string(name='SourceType', example='ALIYUN'),
      weChatRobot?: string(name='WeChatRobot', example='xx'),
      whiteIp?: string(name='WhiteIp', example='*'),
    }
  ](name='UserList'),
}

model GetUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUsersResponseBody(name='body'),
}

/**
 * @summary 获取用户详情
 *
 * @param tmpReq GetUsersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUsersResponse
 */
async function getUsersWithOptions(tmpReq: GetUsersRequest, runtime: Util.RuntimeOptions): GetUsersResponse {
  Util.validateModel(tmpReq);
  var request = new GetUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userIdList)) {
    request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, 'UserIdList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.userIdListShrink)) {
    body['UserIdList'] = request.userIdListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUsers',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户详情
 *
 * @param request GetUsersRequest
 * @return GetUsersResponse
 */
async function getUsers(request: GetUsersRequest): GetUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUsersWithOptions(request, runtime);
}

model GrantResourcePermissionRequest {
  grantCommand?: {
    effectiveEnd?: string(name='EffectiveEnd', description='This parameter is required.', example='1717343597000'),
    operateList?: [ string ](name='OperateList', description='This parameter is required.'),
    reason?: string(name='Reason', example='xx'),
    resourceList?: [ 
      {
        resourceId?: string(name='ResourceId', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType?: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userIdList?: [ string ](name='UserIdList', description='This parameter is required.'),
  }(name='GrantCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GrantResourcePermissionShrinkRequest {
  grantCommandShrink?: string(name='GrantCommand', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model GrantResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GrantResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantResourcePermissionResponseBody(name='body'),
}

/**
 * @summary 通过资源点对用户授权
 *
 * @param tmpReq GrantResourcePermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantResourcePermissionResponse
 */
async function grantResourcePermissionWithOptions(tmpReq: GrantResourcePermissionRequest, runtime: Util.RuntimeOptions): GrantResourcePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new GrantResourcePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.grantCommand)) {
    request.grantCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.grantCommand, 'GrantCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.grantCommandShrink)) {
    body['GrantCommand'] = request.grantCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantResourcePermission',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过资源点对用户授权
 *
 * @param request GrantResourcePermissionRequest
 * @return GrantResourcePermissionResponse
 */
async function grantResourcePermission(request: GrantResourcePermissionRequest): GrantResourcePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantResourcePermissionWithOptions(request, runtime);
}

model ListAddableRolesRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListAddableRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  roleList?: [ 
    {
      code?: string(name='Code', example='SECURITY_ADMIN'),
      name?: string(name='Name'),
    }
  ](name='RoleList'),
  success?: boolean(name='Success', example='true'),
}

model ListAddableRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddableRolesResponseBody(name='body'),
}

/**
 * @summary 获取用户角色列表
 *
 * @param request ListAddableRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAddableRolesResponse
 */
async function listAddableRolesWithOptions(request: ListAddableRolesRequest, runtime: Util.RuntimeOptions): ListAddableRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAddableRoles',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户角色列表
 *
 * @param request ListAddableRolesRequest
 * @return ListAddableRolesResponse
 */
async function listAddableRoles(request: ListAddableRolesRequest): ListAddableRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAddableRolesWithOptions(request, runtime);
}

model ListAddableUsersRequest {
  listQuery?: {
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    searchText?: string(name='SearchText', example='xx'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListAddableUsersShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListAddableUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='66'),
    userList?: [ 
      {
        accountName?: string(name='AccountName', example='123@xx.com'),
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        displayName?: string(name='DisplayName', example='xx'),
        displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus', example='xx'),
        enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
        feiShuRobot?: string(name='FeiShuRobot', example='xx'),
        gmtCreate?: long(name='GmtCreate', example='1717343597000'),
        gmtModified?: long(name='GmtModified', example='1717343597000'),
        id?: string(name='Id', example='123231'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        name?: string(name='Name', example='xx'),
        nickName?: string(name='NickName', example='xx'),
        parentId?: string(name='ParentId', example='231313'),
        realName?: string(name='RealName', example='xx'),
        sourceId?: string(name='SourceId', example='123@xx.com'),
        sourceType?: string(name='SourceType', example='aliyun'),
        weChatRobot?: string(name='WeChatRobot', example='xx'),
        whiteIp?: string(name='WhiteIp', example='*'),
      }
    ](name='UserList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListAddableUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddableUsersResponseBody(name='body'),
}

/**
 * @summary 获取可加入租户成员列表的用户
 *
 * @param tmpReq ListAddableUsersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAddableUsersResponse
 */
async function listAddableUsersWithOptions(tmpReq: ListAddableUsersRequest, runtime: Util.RuntimeOptions): ListAddableUsersResponse {
  Util.validateModel(tmpReq);
  var request = new ListAddableUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAddableUsers',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取可加入租户成员列表的用户
 *
 * @param request ListAddableUsersRequest
 * @return ListAddableUsersResponse
 */
async function listAddableUsers(request: ListAddableUsersRequest): ListAddableUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAddableUsersWithOptions(request, runtime);
}

model ListDataSourceWithConfigRequest {
  listQuery?: {
    name?: string(name='Name', example='vcns-test'),
    ownerList?: [ string ](name='OwnerList'),
    page?: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
    scopeList?: [ string ](name='ScopeList'),
    tag?: string(name='Tag'),
    typeList?: [ string ](name='TypeList'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListDataSourceWithConfigShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListDataSourceWithConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    dataSourceList?: [ 
      {
        devDataSourceInfo?: {
          configItemList?: [ 
            {
              key?: string(name='Key', example='param1'),
              value?: string(name='Value', example='value1'),
            }
          ](name='ConfigItemList'),
          createTime?: long(name='CreateTime', example='1710209552704'),
          creator?: string(name='Creator', example='212211111'),
          creatorName?: string(name='CreatorName'),
          description?: string(name='Description'),
          env?: string(name='Env', example='DEV'),
          id?: long(name='Id', example='12313123131'),
          modifyTime?: long(name='ModifyTime', example='1710209552704'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='212211111'),
          ownerName?: string(name='OwnerName'),
          scope?: string(name='Scope', example='ALL'),
          type?: string(name='Type', example='MAX_COMPUTE'),
        }(name='DevDataSourceInfo', description='开发环境数据源信息'),
        prodDataSourceInfo?: {
          configItemList?: [ 
            {
              key?: string(name='Key', example='param1'),
              value?: string(name='Value', example='value1'),
            }
          ](name='ConfigItemList'),
          createTime?: long(name='CreateTime', example='1708303959000'),
          creator?: string(name='Creator', example='212211111'),
          creatorName?: string(name='CreatorName'),
          description?: string(name='Description'),
          env?: string(name='Env', example='PROD'),
          id?: long(name='Id', example='300000028799'),
          modifyTime?: long(name='ModifyTime', example='1708303959000'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='212211111'),
          ownerName?: string(name='OwnerName'),
          scope?: string(name='Scope', example='ALL'),
          type?: string(name='Type', example='MAX_COMPUTE'),
        }(name='ProdDataSourceInfo', description='生产环境数据源'),
      }
    ](name='DataSourceList'),
    totalCount?: long(name='TotalCount', example='39'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListDataSourceWithConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceWithConfigResponseBody(name='body'),
}

/**
 * @summary 搜索数据源，所属结果包含数据源配置项
 *
 * @param tmpReq ListDataSourceWithConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceWithConfigResponse
 */
async function listDataSourceWithConfigWithOptions(tmpReq: ListDataSourceWithConfigRequest, runtime: Util.RuntimeOptions): ListDataSourceWithConfigResponse {
  Util.validateModel(tmpReq);
  var request = new ListDataSourceWithConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceWithConfig',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 搜索数据源，所属结果包含数据源配置项
 *
 * @param request ListDataSourceWithConfigRequest
 * @return ListDataSourceWithConfigResponse
 */
async function listDataSourceWithConfig(request: ListDataSourceWithConfigRequest): ListDataSourceWithConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceWithConfigWithOptions(request, runtime);
}

model ListFilesRequest {
  listQuery?: {
    category?: string(name='Category', description='This parameter is required.', example='tempCode'),
    directory?: string(name='Directory', description='This parameter is required.', example='/xx/x'),
    env?: string(name='Env', description='This parameter is required.', example='DEV'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='11112311'),
    recursive?: boolean(name='Recursive', description='This parameter is required.', example='true'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListFilesShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListFilesResponseBody = {
  code?: string(name='Code', example='OK'),
  fileList?: [ 
    {
      category?: string(name='Category', example='tempCode'),
      content?: string(name='Content', example='select 1;'),
      creator?: string(name='Creator', example='1212111'),
      directory?: string(name='Directory', example='/xx/x'),
      fileType?: string(name='FileType', example='directory'),
      gmtCreate?: long(name='GmtCreate', example='1717483193830'),
      gmtModified?: long(name='GmtModified', example='1717483193830'),
      id?: long(name='Id', example='111231112'),
      lastModifier?: string(name='LastModifier', example='1212111'),
      name?: string(name='Name', example='xx测试'),
      projectId?: long(name='ProjectId', example='312112121'),
    }
  ](name='FileList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

/**
 * @summary 遍历菜单树目录文件。
 *
 * @param tmpReq ListFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFilesResponse
 */
async function listFilesWithOptions(tmpReq: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(tmpReq);
  var request = new ListFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 遍历菜单树目录文件。
 *
 * @param request ListFilesRequest
 * @return ListFilesResponse
 */
async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListInstancesRequest {
  env?: string(name='Env', example='PROD'),
  listQuery?: {
    bizType?: string(name='BizType', example='SCRIPT'),
    bizUnitId?: long(name='BizUnitId'),
    maxBizDate?: string(name='MaxBizDate', example='2024-05-31'),
    maxRunDate?: string(name='MaxRunDate', example='2024-05-31'),
    minBizDate?: string(name='MinBizDate', example='2024-05-30'),
    minRunDate?: string(name='MinRunDate', example='2024-05-30'),
    nodeId?: string(name='NodeId', example='n_23131'),
    ownerList?: [ string ](name='OwnerList'),
    page?: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
    priorityList?: [ string ](name='PriorityList'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='131311111321'),
    runStatusList?: [ string ](name='RunStatusList'),
    schedulePaused?: boolean(name='SchedulePaused'),
    schedulePeriodList?: [ string ](name='SchedulePeriodList'),
    scheduleType?: string(name='ScheduleType', description='This parameter is required.', example='NORMAL'),
    searchText?: string(name='SearchText', example='xx'),
    subBizTypeList?: [ string ](name='SubBizTypeList'),
  }(name='ListQuery'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListInstancesShrinkRequest {
  env?: string(name='Env', example='PROD'),
  listQueryShrink?: string(name='ListQuery'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        bizDate?: string(name='BizDate', example='2024-05-30'),
        dueTime?: string(name='DueTime', example='2024-05-30 16:47:13'),
        duration?: string(name='Duration', example='60s'),
        endExecuteTime?: long(name='EndExecuteTime', example='2024-05-30 16:47:13'),
        extendInfo?: string(name='ExtendInfo', example='xx'),
        id?: string(name='Id', example='t_23231'),
        index?: int32(name='Index', example='1'),
        nodeInfo?: {
          bizUnitName?: string(name='BizUnitName'),
          createTime?: string(name='CreateTime', example='2024-05-30 16:47:13'),
          creator?: {
            id?: string(name='Id', example='21313112'),
            name?: string(name='Name'),
          }(name='Creator'),
          description?: string(name='Description'),
          dryRun?: boolean(name='DryRun', example='false'),
          from?: string(name='From', example='DATA_PROCES'),
          hasDev?: boolean(name='HasDev', example='false'),
          hasProd?: boolean(name='HasProd', example='true'),
          id?: string(name='Id', example='n_132331'),
          lastModifiedTime?: string(name='LastModifiedTime', example='2024-05-30 16:47:13'),
          modifier?: {
            id?: string(name='Id', example='21313112'),
            name?: string(name='Name'),
          }(name='Modifier'),
          name?: string(name='Name'),
          ownerList?: [ 
            {
              id?: string(name='Id', example='21313112'),
              name?: string(name='Name'),
            }
          ](name='OwnerList'),
          priorityList?: [ string ](name='PriorityList'),
          resourceGroupList?: [ string ](name='ResourceGroupList'),
          schedulePaused?: boolean(name='SchedulePaused', example='false'),
          schedulePeriodList?: [ string ](name='SchedulePeriodList'),
          subDetailType?: string(name='SubDetailType', example='SHELL'),
          type?: string(name='Type', example='DATA_PROCES'),
        }(name='NodeInfo'),
        startExecuteTime?: long(name='StartExecuteTime', example='2024-05-30 16:46:13'),
        statusList?: [ string ](name='StatusList'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='107'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
 * @summary 分页查询实例。
 *
 * @param tmpReq ListInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstancesResponse
 */
async function listInstancesWithOptions(tmpReq: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new ListInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询实例。
 *
 * @param request ListInstancesRequest
 * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListNodeDownStreamRequest {
  env?: string(name='Env', example='PROD'),
  listQuery?: {
    downStreamDepth?: int32(name='DownStreamDepth', example='1'),
    filterList?: [ 
      {
        exclude?: boolean(name='Exclude', example='false'),
        key?: string(name='Key', example='PROJECT'),
        valueList?: [ string ](name='ValueList'),
      }
    ](name='FilterList'),
    nodeIdList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList', example='112'),
        id?: string(name='Id', example='n_23431'),
      }
    ](name='NodeIdList', description='This parameter is required.'),
    projectId?: long(name='ProjectId', example='123011'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListNodeDownStreamShrinkRequest {
  env?: string(name='Env', example='PROD'),
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListNodeDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfoList?: [ 
    {
      depth?: int32(name='Depth', example='1'),
      fieldIdList?: [ string ](name='FieldIdList'),
      id?: string(name='Id', example='n_2423351'),
      name?: string(name='Name'),
      type?: string(name='Type', example='DATA_PROCESS'),
    }
  ](name='NodeInfoList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListNodeDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDownStreamResponseBody(name='body'),
}

/**
 * @summary 查询节点下游，创建补数据工作流时可以作为数据参考
 *
 * @param tmpReq ListNodeDownStreamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeDownStreamResponse
 */
async function listNodeDownStreamWithOptions(tmpReq: ListNodeDownStreamRequest, runtime: Util.RuntimeOptions): ListNodeDownStreamResponse {
  Util.validateModel(tmpReq);
  var request = new ListNodeDownStreamShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeDownStream',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询节点下游，创建补数据工作流时可以作为数据参考
 *
 * @param request ListNodeDownStreamRequest
 * @return ListNodeDownStreamResponse
 */
async function listNodeDownStream(request: ListNodeDownStreamRequest): ListNodeDownStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeDownStreamWithOptions(request, runtime);
}

model ListNodesRequest {
  env?: string(name='Env', example='PROD'),
  listQuery?: {
    dryRun?: boolean(name='DryRun', example='false'),
    nodeBizType?: string(name='NodeBizType', description='This parameter is required.', example='SCRIPT'),
    nodeSubBizTypeList?: [ string ](name='NodeSubBizTypeList', description='This parameter is required.'),
    ownerList?: [ string ](name='OwnerList'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    priorityList?: [ string ](name='PriorityList'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='12111'),
    schedulePaused?: boolean(name='SchedulePaused', example='true'),
    schedulePeriodList?: [ string ](name='SchedulePeriodList'),
    scheduleType?: string(name='ScheduleType', example='NORMAL'),
    searchText?: string(name='SearchText', example='xx'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListNodesShrinkRequest {
  env?: string(name='Env', example='PROD'),
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListNodesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    nodeList?: [ 
      {
        bizUnitName?: string(name='BizUnitName'),
        createTime?: string(name='CreateTime', example='2024-05-30 16:47:13'),
        creator?: {
          id?: string(name='Id', example='23222'),
          name?: string(name='Name'),
        }(name='Creator'),
        description?: string(name='Description', example='xx test'),
        dryRun?: boolean(name='DryRun', example='true'),
        extendInfo?: string(name='ExtendInfo', example='{"xx":"zz"}'),
        from?: string(name='From', example='DATA_PROCESS'),
        hasDev?: boolean(name='HasDev', example='true'),
        hasProd?: boolean(name='HasProd', example='true'),
        id?: string(name='Id', example='n_31111'),
        lastModifiedTime?: string(name='LastModifiedTime', example='2024-05-30 16:47:13'),
        modifier?: {
          id?: string(name='Id', example='311131'),
          name?: string(name='Name'),
        }(name='Modifier'),
        name?: string(name='Name'),
        ownerList?: [ 
          {
            id?: string(name='Id', example='23222'),
            name?: string(name='Name'),
          }
        ](name='OwnerList'),
        priorityList?: [ string ](name='PriorityList'),
        projectInfo?: {
          id?: string(name='Id', example='1121321'),
          name?: string(name='Name'),
        }(name='ProjectInfo'),
        schedulePaused?: boolean(name='SchedulePaused', example='true'),
        schedulePeriodList?: [ string ](name='SchedulePeriodList'),
        subDetailType?: string(name='SubDetailType', example='SHELL'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='NodeList'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary 查询调度节点列表。
 *
 * @param tmpReq ListNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(tmpReq: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(tmpReq);
  var request = new ListNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询调度节点列表。
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListResourcePermissionOperationLogRequest {
  listQuery?: {
    page?: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
    searchText?: string(name='SearchText', example='xx测试'),
    tabType?: string(name='TabType', description='This parameter is required.', example='TABLE'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListResourcePermissionOperationLogShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListResourcePermissionOperationLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        account?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='Account'),
        authScope?: string(name='AuthScope', example='selectTable'),
        operateId?: long(name='OperateId', example='123133'),
        operateTime?: long(name='OperateTime', example='1710012121000'),
        operateType?: string(name='OperateType', example='APPLY'),
        period?: {
          endTime?: string(name='EndTime', example='1712000000000'),
          type?: string(name='Type', example='CUSTOM'),
        }(name='Period'),
        reason?: string(name='Reason', example='xx测试'),
        resourceInfo?: {
          bizUnitInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: string(name='Id', description='Id', example='121323'),
            name?: string(name='Name', example='xx'),
          }(name='BizUnitInfo'),
          displayName?: string(name='DisplayName', example='tb1'),
          env?: string(name='Env', example='DEV'),
          id?: string(name='Id', example='a.tb1'),
          name?: string(name='Name', example='tb1'),
          projectInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: long(name='Id', example='1123131'),
            name?: string(name='Name', example='xx'),
          }(name='ProjectInfo'),
          type?: string(name='Type', example='PHYSICAL_TABLE'),
        }(name='ResourceInfo'),
        targetAccount?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='TargetAccount'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='121'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListResourcePermissionOperationLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcePermissionOperationLogResponseBody(name='body'),
}

/**
 * @summary 分页获取权限操作列表
 *
 * @param tmpReq ListResourcePermissionOperationLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcePermissionOperationLogResponse
 */
async function listResourcePermissionOperationLogWithOptions(tmpReq: ListResourcePermissionOperationLogRequest, runtime: Util.RuntimeOptions): ListResourcePermissionOperationLogResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourcePermissionOperationLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListResourcePermissionOperationLog',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页获取权限操作列表
 *
 * @param request ListResourcePermissionOperationLogRequest
 * @return ListResourcePermissionOperationLogResponse
 */
async function listResourcePermissionOperationLog(request: ListResourcePermissionOperationLogRequest): ListResourcePermissionOperationLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcePermissionOperationLogWithOptions(request, runtime);
}

model ListResourcePermissionsRequest {
  listQuery?: {
    page?: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
    searchText?: string(name='SearchText', example='xx测试'),
    tabType?: string(name='TabType', description='This parameter is required.', example='TABLE'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListResourcePermissionsShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListResourcePermissionsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        authScope?: string(name='AuthScope', example='selectTable'),
        period?: {
          endTime?: string(name='EndTime', example='1712000000000'),
          type?: string(name='Type', example='CUSTOM'),
        }(name='Period'),
        permissionPeriodList?: [ 
          {
            period?: {
              endTime?: string(name='EndTime', example='1712000000000'),
              type?: string(name='Type', example='CUSTOM'),
            }(name='Period'),
            permissionType?: string(name='PermissionType', example='SELECT'),
          }
        ](name='PermissionPeriodList'),
        recordId?: string(name='RecordId', example='12123111'),
        resourceInfo?: {
          bizUnitInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: string(name='Id', description='Id', example='121323'),
            name?: string(name='Name', example='xx'),
          }(name='BizUnitInfo'),
          displayName?: string(name='DisplayName', example='tb1'),
          env?: string(name='Env', example='DEV'),
          id?: string(name='Id', example='a.tb1'),
          name?: string(name='Name', example='tb1'),
          projectInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: long(name='Id', example='1123131'),
            name?: string(name='Name', example='xx'),
          }(name='ProjectInfo'),
          type?: string(name='Type', example='PHYSICAL_TABLE'),
        }(name='ResourceInfo'),
        targetAccount?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='TargetAccount'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='121'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListResourcePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcePermissionsResponseBody(name='body'),
}

/**
 * @summary 分页获取权限记录列表
 *
 * @param tmpReq ListResourcePermissionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcePermissionsResponse
 */
async function listResourcePermissionsWithOptions(tmpReq: ListResourcePermissionsRequest, runtime: Util.RuntimeOptions): ListResourcePermissionsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourcePermissionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListResourcePermissions',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页获取权限记录列表
 *
 * @param request ListResourcePermissionsRequest
 * @return ListResourcePermissionsResponse
 */
async function listResourcePermissions(request: ListResourcePermissionsRequest): ListResourcePermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcePermissionsWithOptions(request, runtime);
}

model ListTenantMembersRequest {
  listQuery?: {
    page?: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
    roleList?: [ string ](name='RoleList'),
    searchText?: string(name='SearchText'),
    userGroupIdList?: [ string ](name='UserGroupIdList'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListTenantMembersShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListTenantMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='110'),
    userList?: [ 
      {
        accountName?: string(name='AccountName', example='zhangsan'),
        dingNumber?: string(name='DingNumber', example='dd123123'),
        displayName?: string(name='DisplayName', example='zhangsan'),
        displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus', example='zhangsan'),
        enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
        gmtCreate?: long(name='GmtCreate', example='1730000000000'),
        gmtModified?: long(name='GmtModified', example='1730000000000'),
        id?: string(name='Id', example='132321'),
        mail?: string(name='Mail', example='123@aliyun.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        name?: string(name='Name', example='zhangsan'),
        nickName?: string(name='NickName', example='susan'),
        realName?: string(name='RealName'),
        roleList?: [ string ](name='RoleList'),
        sourceId?: string(name='SourceId', example='213213232422222'),
        sourceType?: string(name='SourceType', example='aliyun'),
        userGroupList?: [ 
          {
            active?: boolean(name='Active', example='true'),
            description?: string(name='Description'),
            id?: string(name='Id', example='121313'),
            name?: string(name='Name'),
          }
        ](name='UserGroupList'),
        whiteIp?: string(name='WhiteIp', example='0.0.0.0/0'),
      }
    ](name='UserList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListTenantMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantMembersResponseBody(name='body'),
}

/**
 * @summary 查询租户成员列表
 *
 * @param tmpReq ListTenantMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTenantMembersResponse
 */
async function listTenantMembersWithOptions(tmpReq: ListTenantMembersRequest, runtime: Util.RuntimeOptions): ListTenantMembersResponse {
  Util.validateModel(tmpReq);
  var request = new ListTenantMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTenantMembers',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询租户成员列表
 *
 * @param request ListTenantMembersRequest
 * @return ListTenantMembersResponse
 */
async function listTenantMembers(request: ListTenantMembersRequest): ListTenantMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTenantMembersWithOptions(request, runtime);
}

model ListUserGroupMembersRequest {
  listQuery?: {
    keyword?: string(name='Keyword', example='a'),
    pageNo?: int32(name='PageNo', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
    userGroupId?: string(name='UserGroupId', example='232231'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListUserGroupMembersShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListUserGroupMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    memberList?: [ 
      {
        creator?: {
          accountName?: string(name='AccountName', example='12121111'),
          displayName?: string(name='DisplayName', example='zhangsan'),
          id?: string(name='Id', example='12121111'),
        }(name='Creator'),
        gmtCreate?: long(name='GmtCreate', example='zhangsan'),
        id?: string(name='Id', example='2324211'),
        userGroupId?: string(name='UserGroupId', example='231111'),
        userInfo?: {
          accountName?: string(name='AccountName', example='atest'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='13232'),
        }(name='UserInfo'),
        userRole?: string(name='UserRole', example='SECURITY_ADMIN'),
      }
    ](name='MemberList'),
    totalCount?: int32(name='TotalCount', example='217'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListUserGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupMembersResponseBody(name='body'),
}

/**
 * @summary 用户组成员列表分页查询.
 *
 * @param tmpReq ListUserGroupMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserGroupMembersResponse
 */
async function listUserGroupMembersWithOptions(tmpReq: ListUserGroupMembersRequest, runtime: Util.RuntimeOptions): ListUserGroupMembersResponse {
  Util.validateModel(tmpReq);
  var request = new ListUserGroupMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUserGroupMembers',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 用户组成员列表分页查询.
 *
 * @param request ListUserGroupMembersRequest
 * @return ListUserGroupMembersResponse
 */
async function listUserGroupMembers(request: ListUserGroupMembersRequest): ListUserGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupMembersWithOptions(request, runtime);
}

model ListUserGroupsRequest {
  listQuery?: {
    active?: boolean(name='Active', example='true'),
    adminIdList?: [ string ](name='AdminIdList'),
    filterMine?: boolean(name='FilterMine', example='false'),
    keyword?: string(name='Keyword'),
    pageNo?: int32(name='PageNo', description='This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  }(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListUserGroupsShrinkRequest {
  listQueryShrink?: string(name='ListQuery', description='This parameter is required.'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
}

model ListUserGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='49'),
    userGroupList?: [ 
      {
        active?: boolean(name='Active', example='true'),
        adminList?: [ 
          {
            accountName?: string(name='AccountName', example='zhangsan'),
            displayName?: string(name='DisplayName'),
            id?: string(name='Id', example='32313131'),
          }
        ](name='AdminList'),
        description?: string(name='Description'),
        id?: string(name='Id', example='31313232'),
        myRole?: string(name='MyRole', example='SECURITY_ADMIN'),
        name?: string(name='Name'),
      }
    ](name='UserGroupList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsResponseBody(name='body'),
}

/**
 * @summary 用户组列表分页查询.
 *
 * @param tmpReq ListUserGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserGroupsResponse
 */
async function listUserGroupsWithOptions(tmpReq: ListUserGroupsRequest, runtime: Util.RuntimeOptions): ListUserGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListUserGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listQuery)) {
    request.listQueryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listQuery, 'ListQuery', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.listQueryShrink)) {
    body['ListQuery'] = request.listQueryShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUserGroups',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 用户组列表分页查询.
 *
 * @param request ListUserGroupsRequest
 * @return ListUserGroupsResponse
 */
async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsWithOptions(request, runtime);
}

model OperateInstanceRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  operateCommand?: {
    instanceIdList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', description='This parameter is required.', example='t_32111312'),
      }
    ](name='InstanceIdList', description='This parameter is required.'),
    operation?: string(name='Operation', description='This parameter is required.', example='RERUN'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='132311'),
  }(name='OperateCommand', description='This parameter is required.'),
}

model OperateInstanceShrinkRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  operateCommandShrink?: string(name='OperateCommand', description='This parameter is required.'),
}

model OperateInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceStatusList?: [ 
    {
      displayName?: string(name='DisplayName'),
      errorMessage?: string(name='ErrorMessage', example='xx'),
      id?: string(name='Id', example='t_132435'),
      name?: string(name='Name'),
      ownerId?: string(name='OwnerId', example='121311'),
      ownerName?: string(name='OwnerName'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='InstanceStatusList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model OperateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateInstanceResponseBody(name='body'),
}

/**
 * @summary 运维实例。
 *
 * @param tmpReq OperateInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateInstanceResponse
 */
async function operateInstanceWithOptions(tmpReq: OperateInstanceRequest, runtime: Util.RuntimeOptions): OperateInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new OperateInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.operateCommand)) {
    request.operateCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operateCommand, 'OperateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.operateCommandShrink)) {
    body['OperateCommand'] = request.operateCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OperateInstance',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 运维实例。
 *
 * @param request OperateInstanceRequest
 * @return OperateInstanceResponse
 */
async function operateInstance(request: OperateInstanceRequest): OperateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateInstanceWithOptions(request, runtime);
}

model PausePhysicalNodeRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  pauseCommand?: {
    nodeIdList?: [ string ](name='NodeIdList', description='This parameter is required.'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='13222210'),
  }(name='PauseCommand', description='This parameter is required.'),
}

model PausePhysicalNodeShrinkRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  pauseCommandShrink?: string(name='PauseCommand', description='This parameter is required.'),
}

model PausePhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeOperateResultList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='xx'),
      nodeId?: string(name='NodeId', example='n_123456'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='NodeOperateResultList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model PausePhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PausePhysicalNodeResponseBody(name='body'),
}

/**
 * @summary 暂停物理节点调度。
 *
 * @param tmpReq PausePhysicalNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PausePhysicalNodeResponse
 */
async function pausePhysicalNodeWithOptions(tmpReq: PausePhysicalNodeRequest, runtime: Util.RuntimeOptions): PausePhysicalNodeResponse {
  Util.validateModel(tmpReq);
  var request = new PausePhysicalNodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.pauseCommand)) {
    request.pauseCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pauseCommand, 'PauseCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pauseCommandShrink)) {
    body['PauseCommand'] = request.pauseCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PausePhysicalNode',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 暂停物理节点调度。
 *
 * @param request PausePhysicalNodeRequest
 * @return PausePhysicalNodeResponse
 */
async function pausePhysicalNode(request: PausePhysicalNodeRequest): PausePhysicalNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return pausePhysicalNodeWithOptions(request, runtime);
}

model RemoveTenantMemberRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  removeCommand?: {
    sourceId?: string(name='SourceId', description='This parameter is required.', example='123@xx.com'),
  }(name='RemoveCommand', description='This parameter is required.'),
}

model RemoveTenantMemberShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  removeCommandShrink?: string(name='RemoveCommand', description='This parameter is required.'),
}

model RemoveTenantMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RemoveTenantMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTenantMemberResponseBody(name='body'),
}

/**
 * @summary 删除租户成员
 *
 * @param tmpReq RemoveTenantMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveTenantMemberResponse
 */
async function removeTenantMemberWithOptions(tmpReq: RemoveTenantMemberRequest, runtime: Util.RuntimeOptions): RemoveTenantMemberResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveTenantMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.removeCommand)) {
    request.removeCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.removeCommand, 'RemoveCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.removeCommandShrink)) {
    body['RemoveCommand'] = request.removeCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTenantMember',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除租户成员
 *
 * @param request RemoveTenantMemberRequest
 * @return RemoveTenantMemberResponse
 */
async function removeTenantMember(request: RemoveTenantMemberRequest): RemoveTenantMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTenantMemberWithOptions(request, runtime);
}

model RemoveUserGroupMemberRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  removeCommand?: {
    userGroupId?: string(name='UserGroupId', description='This parameter is required.', example='2311'),
    userIdList?: [ string ](name='UserIdList', description='This parameter is required.'),
  }(name='RemoveCommand', description='This parameter is required.'),
}

model RemoveUserGroupMemberShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  removeCommandShrink?: string(name='RemoveCommand', description='This parameter is required.'),
}

model RemoveUserGroupMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RemoveUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserGroupMemberResponseBody(name='body'),
}

/**
 * @summary 移除用户组成员.
 *
 * @param tmpReq RemoveUserGroupMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveUserGroupMemberResponse
 */
async function removeUserGroupMemberWithOptions(tmpReq: RemoveUserGroupMemberRequest, runtime: Util.RuntimeOptions): RemoveUserGroupMemberResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveUserGroupMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.removeCommand)) {
    request.removeCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.removeCommand, 'RemoveCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.removeCommandShrink)) {
    body['RemoveCommand'] = request.removeCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserGroupMember',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 移除用户组成员.
 *
 * @param request RemoveUserGroupMemberRequest
 * @return RemoveUserGroupMemberResponse
 */
async function removeUserGroupMember(request: RemoveUserGroupMemberRequest): RemoveUserGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserGroupMemberWithOptions(request, runtime);
}

model ResumePhysicalNodeRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  resumeCommand?: {
    nodeIdList?: [ string ](name='NodeIdList', description='This parameter is required.'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='102011'),
  }(name='ResumeCommand', description='This parameter is required.'),
}

model ResumePhysicalNodeShrinkRequest {
  env?: string(name='Env', example='PROD'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  resumeCommandShrink?: string(name='ResumeCommand', description='This parameter is required.'),
}

model ResumePhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeOperateResultList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='xx'),
      nodeId?: string(name='NodeId', example='n_123456'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='NodeOperateResultList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ResumePhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumePhysicalNodeResponseBody(name='body'),
}

/**
 * @summary 恢复物理节点调度。
 *
 * @param tmpReq ResumePhysicalNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResumePhysicalNodeResponse
 */
async function resumePhysicalNodeWithOptions(tmpReq: ResumePhysicalNodeRequest, runtime: Util.RuntimeOptions): ResumePhysicalNodeResponse {
  Util.validateModel(tmpReq);
  var request = new ResumePhysicalNodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resumeCommand)) {
    request.resumeCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resumeCommand, 'ResumeCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resumeCommandShrink)) {
    body['ResumeCommand'] = request.resumeCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumePhysicalNode',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 恢复物理节点调度。
 *
 * @param request ResumePhysicalNodeRequest
 * @return ResumePhysicalNodeResponse
 */
async function resumePhysicalNode(request: ResumePhysicalNodeRequest): ResumePhysicalNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumePhysicalNodeWithOptions(request, runtime);
}

model RevokeResourcePermissionRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  revokeCommand?: {
    operateList?: [ string ](name='OperateList'),
    reason?: string(name='Reason', example='xx'),
    resourceList?: [ 
      {
        resourceId?: string(name='ResourceId', example='odps.300002102.beginner_test.amin_table'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType?: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userId?: string(name='UserId', description='This parameter is required.', example='13131'),
  }(name='RevokeCommand', description='This parameter is required.'),
}

model RevokeResourcePermissionShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  revokeCommandShrink?: string(name='RevokeCommand', description='This parameter is required.'),
}

model RevokeResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RevokeResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeResourcePermissionResponseBody(name='body'),
}

/**
 * @summary 回收用户资源授权
 *
 * @param tmpReq RevokeResourcePermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeResourcePermissionResponse
 */
async function revokeResourcePermissionWithOptions(tmpReq: RevokeResourcePermissionRequest, runtime: Util.RuntimeOptions): RevokeResourcePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new RevokeResourcePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.revokeCommand)) {
    request.revokeCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.revokeCommand, 'RevokeCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.revokeCommandShrink)) {
    body['RevokeCommand'] = request.revokeCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevokeResourcePermission',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 回收用户资源授权
 *
 * @param request RevokeResourcePermissionRequest
 * @return RevokeResourcePermissionResponse
 */
async function revokeResourcePermission(request: RevokeResourcePermissionRequest): RevokeResourcePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeResourcePermissionWithOptions(request, runtime);
}

model UpdateAdHocFileRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommand?: {
    content?: string(name='Content', description='This parameter is required.', example='select 1;'),
    fileId?: long(name='FileId', description='This parameter is required.', example='2311113'),
    projectId?: long(name='ProjectId', description='This parameter is required.', example='1212313'),
  }(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateAdHocFileShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommandShrink?: string(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAdHocFileResponseBody(name='body'),
}

/**
 * @summary 编辑即席查询文件。
 *
 * @param tmpReq UpdateAdHocFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAdHocFileResponse
 */
async function updateAdHocFileWithOptions(tmpReq: UpdateAdHocFileRequest, runtime: Util.RuntimeOptions): UpdateAdHocFileResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAdHocFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateCommand)) {
    request.updateCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateCommand, 'UpdateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.updateCommandShrink)) {
    body['UpdateCommand'] = request.updateCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAdHocFile',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑即席查询文件。
 *
 * @param request UpdateAdHocFileRequest
 * @return UpdateAdHocFileResponse
 */
async function updateAdHocFile(request: UpdateAdHocFileRequest): UpdateAdHocFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAdHocFileWithOptions(request, runtime);
}

model UpdateDataSourceBasicInfoRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommand?: {
    description?: string(name='Description', description='This parameter is required.', example='xx'),
    id?: long(name='Id', description='This parameter is required.', example='23231'),
    name?: string(name='Name', description='This parameter is required.'),
  }(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateDataSourceBasicInfoShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommandShrink?: string(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateDataSourceBasicInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceBasicInfoResponseBody(name='body'),
}

/**
 * @summary 编辑数据源基本信息
 *
 * @param tmpReq UpdateDataSourceBasicInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceBasicInfoResponse
 */
async function updateDataSourceBasicInfoWithOptions(tmpReq: UpdateDataSourceBasicInfoRequest, runtime: Util.RuntimeOptions): UpdateDataSourceBasicInfoResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataSourceBasicInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateCommand)) {
    request.updateCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateCommand, 'UpdateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.updateCommandShrink)) {
    body['UpdateCommand'] = request.updateCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSourceBasicInfo',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑数据源基本信息
 *
 * @param request UpdateDataSourceBasicInfoRequest
 * @return UpdateDataSourceBasicInfoResponse
 */
async function updateDataSourceBasicInfo(request: UpdateDataSourceBasicInfoRequest): UpdateDataSourceBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceBasicInfoWithOptions(request, runtime);
}

model UpdateDataSourceConfigRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommand?: {
    configItemList?: [ 
      {
        key?: string(name='Key', description='This parameter is required.', example='k1'),
        value?: string(name='Value', description='This parameter is required.', example='v1'),
      }
    ](name='ConfigItemList', description='This parameter is required.'),
    id?: long(name='Id', description='This parameter is required.', example='13231313'),
  }(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateDataSourceConfigShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommandShrink?: string(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateDataSourceConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceConfigResponseBody(name='body'),
}

/**
 * @summary 编辑数据源连接配置项
 *
 * @param tmpReq UpdateDataSourceConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceConfigResponse
 */
async function updateDataSourceConfigWithOptions(tmpReq: UpdateDataSourceConfigRequest, runtime: Util.RuntimeOptions): UpdateDataSourceConfigResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataSourceConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateCommand)) {
    request.updateCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateCommand, 'UpdateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.updateCommandShrink)) {
    body['UpdateCommand'] = request.updateCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSourceConfig',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑数据源连接配置项
 *
 * @param request UpdateDataSourceConfigRequest
 * @return UpdateDataSourceConfigResponse
 */
async function updateDataSourceConfig(request: UpdateDataSourceConfigRequest): UpdateDataSourceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceConfigWithOptions(request, runtime);
}

model UpdateFileDirectoryRequest {
  directory?: string(name='Directory', description='This parameter is required.', example='/xx测试/目录new'),
  fileId?: long(name='FileId', description='This parameter is required.', example='12121111'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='12132323'),
}

model UpdateFileDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateFileDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileDirectoryResponseBody(name='body'),
}

/**
 * @summary 修改菜单树文件所在目录
 *
 * @param request UpdateFileDirectoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFileDirectoryResponse
 */
async function updateFileDirectoryWithOptions(request: UpdateFileDirectoryRequest, runtime: Util.RuntimeOptions): UpdateFileDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directory)) {
    query['Directory'] = request.directory;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFileDirectory',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改菜单树文件所在目录
 *
 * @param request UpdateFileDirectoryRequest
 * @return UpdateFileDirectoryResponse
 */
async function updateFileDirectory(request: UpdateFileDirectoryRequest): UpdateFileDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileDirectoryWithOptions(request, runtime);
}

model UpdateFileNameRequest {
  fileId?: long(name='FileId', description='This parameter is required.', example='12121111'),
  name?: string(name='Name', description='This parameter is required.', example='xxNew'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='12132323'),
}

model UpdateFileNameResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateFileNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileNameResponseBody(name='body'),
}

/**
 * @summary 修改菜单树文件名称
 *
 * @param request UpdateFileNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFileNameResponse
 */
async function updateFileNameWithOptions(request: UpdateFileNameRequest, runtime: Util.RuntimeOptions): UpdateFileNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFileName',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改菜单树文件名称
 *
 * @param request UpdateFileNameRequest
 * @return UpdateFileNameResponse
 */
async function updateFileName(request: UpdateFileNameRequest): UpdateFileNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileNameWithOptions(request, runtime);
}

model UpdateTenantMemberRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommand?: {
    memberList?: [ 
      {
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        roleList?: [ string ](name='RoleList'),
        userId?: string(name='UserId', example='2331'),
      }
    ](name='MemberList', description='This parameter is required.'),
  }(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateTenantMemberShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommandShrink?: string(name='UpdateCommand', description='This parameter is required.'),
}

model UpdateTenantMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTenantMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTenantMemberResponseBody(name='body'),
}

/**
 * @summary 编辑租户成员
 *
 * @param tmpReq UpdateTenantMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTenantMemberResponse
 */
async function updateTenantMemberWithOptions(tmpReq: UpdateTenantMemberRequest, runtime: Util.RuntimeOptions): UpdateTenantMemberResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTenantMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateCommand)) {
    request.updateCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateCommand, 'UpdateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.updateCommandShrink)) {
    body['UpdateCommand'] = request.updateCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTenantMember',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑租户成员
 *
 * @param request UpdateTenantMemberRequest
 * @return UpdateTenantMemberResponse
 */
async function updateTenantMember(request: UpdateTenantMemberRequest): UpdateTenantMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTenantMemberWithOptions(request, runtime);
}

model UpdateUserGroupRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommand?: {
    adminUserIdList?: [ string ](name='AdminUserIdList'),
    description?: string(name='Description', example='xx'),
    id?: string(name='Id', description='This parameter is required.', example='13423'),
    name?: string(name='Name'),
  }(name='UpdateCommand'),
}

model UpdateUserGroupShrinkRequest {
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  updateCommandShrink?: string(name='UpdateCommand'),
}

model UpdateUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupResponseBody(name='body'),
}

/**
 * @summary 编辑用户组.
 *
 * @param tmpReq UpdateUserGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserGroupResponse
 */
async function updateUserGroupWithOptions(tmpReq: UpdateUserGroupRequest, runtime: Util.RuntimeOptions): UpdateUserGroupResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateUserGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateCommand)) {
    request.updateCommandShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateCommand, 'UpdateCommand', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.updateCommandShrink)) {
    body['UpdateCommand'] = request.updateCommandShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserGroup',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑用户组.
 *
 * @param request UpdateUserGroupRequest
 * @return UpdateUserGroupResponse
 */
async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserGroupWithOptions(request, runtime);
}

model UpdateUserGroupSwitchRequest {
  active?: boolean(name='Active', description='This parameter is required.', example='true'),
  opTenantId?: long(name='OpTenantId', description='This parameter is required.', example='30001011'),
  userGroupId?: string(name='UserGroupId', description='This parameter is required.', example='31323'),
}

model UpdateUserGroupSwitchResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserGroupSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupSwitchResponseBody(name='body'),
}

/**
 * @summary 编辑用户组启用开关.
 *
 * @param request UpdateUserGroupSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserGroupSwitchResponse
 */
async function updateUserGroupSwitchWithOptions(request: UpdateUserGroupSwitchRequest, runtime: Util.RuntimeOptions): UpdateUserGroupSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.active)) {
    query['Active'] = request.active;
  }
  if (!Util.isUnset(request.opTenantId)) {
    query['OpTenantId'] = request.opTenantId;
  }
  if (!Util.isUnset(request.userGroupId)) {
    query['UserGroupId'] = request.userGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserGroupSwitch',
    version = '2023-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑用户组启用开关.
 *
 * @param request UpdateUserGroupSwitchRequest
 * @return UpdateUserGroupSwitchResponse
 */
async function updateUserGroupSwitch(request: UpdateUserGroupSwitchRequest): UpdateUserGroupSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserGroupSwitchWithOptions(request, runtime);
}

