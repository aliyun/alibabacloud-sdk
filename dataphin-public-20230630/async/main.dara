/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dataphin-public';
  @version = '2023-06-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DataSourceInfo {
  configs?: map[string]string(name='Configs'),
  createTime?: long(name='CreateTime'),
  creator?: string(name='Creator'),
  creatorName?: string(name='CreatorName'),
  description?: string(name='Description'),
  env?: string(name='Env'),
  id?: long(name='Id'),
  modifyTime?: long(name='ModifyTime'),
  name?: string(name='Name'),
  owner?: string(name='Owner'),
  ownerName?: string(name='OwnerName'),
  scope?: string(name='Scope'),
  tenantId?: long(name='TenantId'),
  type?: string(name='Type'),
}

model DatasourceCreate {
  checkActivity?: boolean(name='CheckActivity'),
  configs?: map[string]string(name='Configs'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model AddTenantMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  addCommand: {
    userList: [ 
      {
        id?: string(name='Id', example='1323241'),
        roleList?: [ string ](name='RoleList'),
      }
    ](name='UserList', description='This parameter is required.'),
  }(name='AddCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model AddTenantMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddTenantMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTenantMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTenantMembers  AddTenantMembersRequest
  * @return AddTenantMembersResponse
 */
async function addTenantMembers(request: AddTenantMembersRequest): AddTenantMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTenantMembers', 'POST', '/', 'json', true, 'form', request);
}

model AddTenantMembersBySourceUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  addCommand?: {
    sourceUserList?: [ 
      {
        accountName?: string(name='AccountName', example='123@xx.com'),
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        displayName?: string(name='DisplayName'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        sourceId?: string(name='SourceId', example='2323131'),
      }
    ](name='SourceUserList'),
  }(name='AddCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model AddTenantMembersBySourceUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddTenantMembersBySourceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTenantMembersBySourceUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTenantMembersBySourceUser  AddTenantMembersBySourceUserRequest
  * @return AddTenantMembersBySourceUserResponse
 */
async function addTenantMembersBySourceUser(request: AddTenantMembersBySourceUserRequest): AddTenantMembersBySourceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTenantMembersBySourceUser', 'POST', '/', 'json', true, 'form', request);
}

model AddUserGroupMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  addCommand?: {
    userGroupId: string(name='UserGroupId', description='This parameter is required.', example='132331'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='AddCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model AddUserGroupMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserGroupMember  AddUserGroupMemberRequest
  * @return AddUserGroupMemberResponse
 */
async function addUserGroupMember(request: AddUserGroupMemberRequest): AddUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserGroupMember', 'POST', '/', 'json', true, 'form', request);
}

model CheckDataSourceConnectivityRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkCommand: {
    configItemList: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='k1'),
        value: string(name='Value', description='This parameter is required.', example='v1'),
      }
    ](name='ConfigItemList', description='This parameter is required.'),
    type: string(name='Type', description='This parameter is required.', example='MAX_COMPUTE'),
  }(name='CheckCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CheckDataSourceConnectivityResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CheckDataSourceConnectivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceConnectivityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDataSourceConnectivity  CheckDataSourceConnectivityRequest
  * @return CheckDataSourceConnectivityResponse
 */
async function checkDataSourceConnectivity(request: CheckDataSourceConnectivityRequest): CheckDataSourceConnectivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDataSourceConnectivity', 'POST', '/', 'json', true, 'form', request);
}

model CheckDataSourceConnectivityByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='123', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CheckDataSourceConnectivityByIdResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CheckDataSourceConnectivityByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceConnectivityByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDataSourceConnectivityById  CheckDataSourceConnectivityByIdRequest
  * @return CheckDataSourceConnectivityByIdResponse
 */
async function checkDataSourceConnectivityById(request: CheckDataSourceConnectivityByIdRequest): CheckDataSourceConnectivityByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDataSourceConnectivityById', 'POST', '/', 'json', false, 'json', request);
}

model CheckResourcePermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkCommand: {
    operate: string(name='Operate', description='This parameter is required.', example='UPDATE'),
    resourceList: [ 
      {
        resourceId: string(name='ResourceId', description='This parameter is required.', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userId: string(name='UserId', description='This parameter is required.', example='323231'),
  }(name='CheckCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CheckResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  resourcePermissionList?: [ 
    {
      hasPermission?: boolean(name='HasPermission', example='true'),
      resourceId?: string(name='ResourceId', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
    }
  ](name='ResourcePermissionList'),
  success?: boolean(name='Success', example='true'),
}

model CheckResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResourcePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckResourcePermission  CheckResourcePermissionRequest
  * @return CheckResourcePermissionResponse
 */
async function checkResourcePermission(request: CheckResourcePermissionRequest): CheckResourcePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckResourcePermission', 'POST', '/', 'json', true, 'form', request);
}

model CreateAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    content: string(name='Content', description='This parameter is required.', example='select 1;'),
    directory: string(name='Directory', description='This parameter is required.', example='/xx1/xx2/'),
    name: string(name='Name', description='This parameter is required.', example='test_xx'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='11212133'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  fileId?: long(name='FileId', example='1212313222'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAdHocFile  CreateAdHocFileRequest
  * @return CreateAdHocFileResponse
 */
async function createAdHocFile(request: CreateAdHocFileRequest): CreateAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAdHocFile', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand?: {
    devDataSourceCreate?: {
      dataSourceCreate?: {
        checkActivity?: boolean(name='CheckActivity', example='true'),
        configItemList: [ 
          {
            key: string(name='Key', description='This parameter is required.', example='k1'),
            value: string(name='Value', description='This parameter is required.', example='v1'),
          }
        ](name='ConfigItemList', description='This parameter is required.'),
        description?: string(name='Description', example='datasource for xxx in dev'),
        name?: string(name='Name', example='dp_test_dev'),
        type?: string(name='Type', example='MAX_COMPUTE'),
      }(name='DataSourceCreate', description='数据源创建结构体'),
      prodDataSourceId?: long(name='ProdDataSourceId', example='1011'),
    }(name='DevDataSourceCreate'),
    prodDataSourceCreate?: {
      checkActivity?: boolean(name='CheckActivity', example='true'),
      configItemList: [ 
        {
          key: string(name='Key', description='This parameter is required.', example='k1'),
          value: string(name='Value', description='This parameter is required.', example='v1'),
        }
      ](name='ConfigItemList', description='This parameter is required.'),
      description?: string(name='Description', example='datasource for xx'),
      name?: string(name='Name', example='dp_test'),
      type?: string(name='Type', example='MAX_COMPUTE'),
    }(name='ProdDataSourceCreate', description='数据源创建结构体'),
  }(name='CreateCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateDataSourceResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    devDataSourceId?: long(name='DevDataSourceId', example='123'),
    prodDataSourceId?: long(name='ProdDataSourceId', example='12345'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSource  CreateDataSourceRequest
  * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateDirectoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    category: string(name='Category', description='This parameter is required.', example='tempCode'),
    directory: string(name='Directory', description='This parameter is required.', example='/'),
    name: string(name='Name', description='This parameter is required.', example='test_xx'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='1212344'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  fileId?: long(name='FileId', example='1311113211'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDirectory  CreateDirectoryRequest
  * @return CreateDirectoryResponse
 */
async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDirectory', 'POST', '/', 'json', true, 'form', request);
}

model CreateNodeSupplementRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    containAllDownStream?: boolean(name='ContainAllDownStream'),
    downStreamNodeIdList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id'),
      }
    ](name='DownStreamNodeIdList'),
    endBizDate: string(name='EndBizDate', description='This parameter is required.', example='2021-06-01'),
    filterList?: [ 
      {
        exclude?: boolean(name='Exclude'),
        key?: string(name='Key'),
        valueList?: [ string ](name='ValueList'),
      }
    ](name='FilterList'),
    globalParamList?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='GlobalParamList'),
    maxDueTime?: string(name='MaxDueTime'),
    minDueTime?: string(name='MinDueTime'),
    name?: string(name='Name', example='xx测试'),
    nodeIdList: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id: string(name='Id', description='This parameter is required.'),
      }
    ](name='NodeIdList', description='This parameter is required.'),
    nodeParamsList?: [ 
      {
        nodeId?: string(name='NodeId'),
        paramList?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='ParamList'),
      }
    ](name='NodeParamsList'),
    parallelism?: int32(name='Parallelism'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='101121'),
    startBizDate: string(name='StartBizDate', description='This parameter is required.', example='2021-06-01'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  env?: string(name='Env', example='DEV/PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateNodeSupplementResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitId?: string(name='SubmitId', example='f_2264518792396800000_20210223_2329354897145659392'),
  success?: boolean(name='Success', example='true/false'),
}

model CreateNodeSupplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeSupplementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNodeSupplement  CreateNodeSupplementRequest
  * @return CreateNodeSupplementResponse
 */
async function createNodeSupplement(request: CreateNodeSupplementRequest): CreateNodeSupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNodeSupplement', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand?: {
    active?: boolean(name='Active', example='true'),
    adminUserIdList?: [ string ](name='AdminUserIdList'),
    description?: string(name='Description', example='xx'),
    name?: string(name='Name'),
  }(name='CreateCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userGroupId?: string(name='UserGroupId', example='2313131'),
}

model CreateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserGroup  CreateUserGroupRequest
  * @return CreateUserGroupResponse
 */
async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model DeleteAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAdHocFile  DeleteAdHocFileRequest
  * @return DeleteAdHocFileResponse
 */
async function deleteAdHocFile(request: DeleteAdHocFileRequest): DeleteAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAdHocFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  deleteCommand: {
    mode: string(name='Mode', description='This parameter is required.', example='DEV'),
    prodDataSourceId: long(name='ProdDataSourceId', description='This parameter is required.', example='13121'),
  }(name='DeleteCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model DeleteDataSourceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSource  DeleteDataSourceRequest
  * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDirectoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model DeleteDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDirectory  DeleteDirectoryRequest
  * @return DeleteDirectoryResponse
 */
async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='232131', position='Query'),
}

model DeleteUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroup  DeleteUserGroupRequest
  * @return DeleteUserGroupResponse
 */
async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteManualNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  executeCommand: {
    endBizDate: string(name='EndBizDate', description='This parameter is required.', example='2024-05-07'),
    flowName?: string(name='FlowName', example='xx测试'),
    nodeId: string(name='NodeId', description='This parameter is required.', example='n_12132'),
    paramList?: [ 
      {
        key?: string(name='Key', example='param1'),
        value?: string(name='Value', example='1'),
      }
    ](name='ParamList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='123324'),
    startBizDate: string(name='StartBizDate', description='This parameter is required.', example='2024-05-01'),
  }(name='ExecuteCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ExecuteManualNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  flowId?: string(name='FlowId', example='f_1231_121324'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ExecuteManualNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteManualNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteManualNode  ExecuteManualNodeRequest
  * @return ExecuteManualNodeResponse
 */
async function executeManualNode(request: ExecuteManualNodeRequest): ExecuteManualNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteManualNode', 'POST', '/', 'json', true, 'form', request);
}

model FixDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  fixDataCommand: {
    containRootInstance?: boolean(name='ContainRootInstance', example='false'),
    downStreamInstanceIdList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_2323421'),
      }
    ](name='DownStreamInstanceIdList'),
    downstreamRange?: string(name='DownstreamRange', example='ALL_INSTANCE'),
    forceRerun?: boolean(name='ForceRerun', example='false'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='132344'),
    rootInstanceId: {
      fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
      id: string(name='Id', description='This parameter is required.', example='t_2323111'),
    }(name='RootInstanceId', description='This parameter is required.'),
  }(name='FixDataCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model FixDataResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitId?: string(name='SubmitId', example='12324234'),
  success?: boolean(name='Success'),
}

model FixDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FixDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FixData  FixDataRequest
  * @return FixDataResponse
 */
async function fixData(request: FixDataRequest): FixDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FixData', 'POST', '/', 'json', true, 'form', request);
}

model GetAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model GetAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  fileInfo?: {
    content?: string(name='Content', example='select 1;'),
    creator?: string(name='Creator', example='12121'),
    directory?: string(name='Directory', example='/xx1/xx2/'),
    id?: long(name='Id', example='12121111'),
    lastModifier?: string(name='LastModifier', example='12121'),
    name?: string(name='Name', example='xx测试'),
    projectId?: long(name='ProjectId', example='12132323'),
  }(name='FileInfo'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAdHocFile  GetAdHocFileRequest
  * @return GetAdHocFileResponse
 */
async function getAdHocFile(request: GetAdHocFileRequest): GetAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAdHocFile', 'POST', '/', 'json', false, 'json', request);
}

model GetDevObjectDependencyRequest {
  regionId?: string(name='RegionId', position='Host'),
  objectFrom: string(name='ObjectFrom', description='This parameter is required.', example='DATA_PROCESS', position='Query'),
  objectId: string(name='ObjectId', description='This parameter is required.', example='7026498387616064', position='Query'),
  objectType: string(name='ObjectType', description='This parameter is required.', example='7026498387616064', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='7021037162911616L', position='Query'),
}

model GetDevObjectDependencyResponseBody = {
  code?: string(name='Code', example='OK'),
  devObjectDependencyList?: [ 
    {
      autoParse?: boolean(name='AutoParse', example='true'),
      bizType?: string(name='BizType', example='SCRIPT'),
      bizUnitId?: string(name='BizUnitId', example='13111'),
      bizUnitName?: string(name='BizUnitName'),
      cronExpression?: string(name='CronExpression', example='0 0 0 * * ?'),
      customCronExpression?: boolean(name='CustomCronExpression', example='true'),
      dependFieldList?: [ string ](name='DependFieldList'),
      dependencyPeriod?: {
        periodOffset?: int32(name='PeriodOffset', example='1'),
        periodType?: string(name='PeriodType', example='CURRENT_PERIOD'),
      }(name='DependencyPeriod'),
      dependencyStrategy?: string(name='DependencyStrategy', example='ALL'),
      dimMidNode?: boolean(name='DimMidNode', example='true'),
      effectFieldList?: [ string ](name='EffectFieldList'),
      externalBizInfo?: string(name='ExternalBizInfo'),
      manuallyAdd?: boolean(name='ManuallyAdd', example='false'),
      nodeId?: string(name='NodeId', example='n_13211'),
      nodeName?: string(name='NodeName'),
      nodeOutputName?: string(name='NodeOutputName', example='n_xx'),
      nodeOutputTableName?: string(name='NodeOutputTableName', example='t_xx'),
      nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      outputContextParamList?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='v1'),
          description?: string(name='Description', example='xxtest'),
          key?: string(name='Key', example='v1'),
        }
      ](name='OutputContextParamList'),
      ownerList?: [ 
        {
          id?: string(name='Id', example='11123'),
          name?: string(name='Name'),
        }
      ](name='OwnerList'),
      periodDiff?: int32(name='PeriodDiff', example='1'),
      projectId?: long(name='ProjectId', example='123131'),
      projectName?: string(name='ProjectName'),
      scheduleType?: string(name='ScheduleType', example='DAILY'),
      selfDepend?: boolean(name='SelfDepend', example='true'),
      subBizType?: string(name='SubBizType', example='SHELL'),
      valid?: boolean(name='Valid', example='true'),
    }
  ](name='DevObjectDependencyList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetDevObjectDependencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDevObjectDependencyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDevObjectDependency  GetDevObjectDependencyRequest
  * @return GetDevObjectDependencyResponse
 */
async function getDevObjectDependency(request: GetDevObjectDependencyRequest): GetDevObjectDependencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevObjectDependency', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  downStreamDepth: int32(name='DownStreamDepth', description='This parameter is required.', example='1', position='Query'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceGet: {
    instanceId: string(name='InstanceId', description='This parameter is required.', example='t_5929472_20210411_9577721'),
    nodeType: string(name='NodeType', description='This parameter is required.', example='DATA_PROCESS'),
  }(name='InstanceGet', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  runStatus?: string(name='RunStatus', example='SUCCESS', position='Query'),
}

model GetInstanceDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceRelationList?: [ 
    {
      downStreamDepth?: int32(name='DownStreamDepth', example='1'),
      extendInfo?: string(name='ExtendInfo', example='{"a":"x"}'),
      fieldInstanceList?: [ 
        {
          fieldInstanceId?: string(name='FieldInstanceId', example='t_23211'),
          runStatus?: string(name='RunStatus', example='SUCCESS'),
          selectStatus?: string(name='SelectStatus', example='OPTIONAL'),
        }
      ](name='FieldInstanceList'),
      instanceInfo?: {
        id?: string(name='Id', example='t_232411'),
        name?: string(name='Name'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }(name='InstanceInfo'),
      runStatus?: string(name='RunStatus', example='RUNNING'),
      selectStatus?: string(name='SelectStatus', example='OPTIONAL'),
      selectStatusCause?: string(name='SelectStatusCause', example='FIELD_DELETED'),
    }
  ](name='InstanceRelationList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceDownStream  GetInstanceDownStreamRequest
  * @return GetInstanceDownStreamResponse
 */
async function getInstanceDownStream(request: GetInstanceDownStreamRequest): GetInstanceDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceDownStream', 'POST', '/', 'json', true, 'form', request);
}

model GetInstanceUpDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  downStreamDepth?: int32(name='DownStreamDepth', example='1', position='Query'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceId: {
    fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
    id: string(name='Id', description='This parameter is required.', example='t_123456'),
  }(name='InstanceId', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='1001121', position='Query'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1', position='Query'),
}

model GetInstanceUpDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceDagInfo?: {
    downInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='DownInstanceList'),
    startInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='StartInstanceList'),
    upInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='UpInstanceList'),
  }(name='InstanceDagInfo'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceUpDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceUpDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceUpDownStream  GetInstanceUpDownStreamRequest
  * @return GetInstanceUpDownStreamResponse
 */
async function getInstanceUpDownStream(request: GetInstanceUpDownStreamRequest): GetInstanceUpDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceUpDownStream', 'POST', '/', 'json', true, 'form', request);
}

model GetMyRolesRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetMyRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  roleList?: [ 
    {
      description?: string(name='Description'),
      id?: long(name='Id', example='300047957'),
      name?: string(name='Name', example='dataphinAdmin'),
    }
  ](name='RoleList'),
  success?: boolean(name='Success', example='true'),
}

model GetMyRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMyRoles  GetMyRolesRequest
  * @return GetMyRolesResponse
 */
async function getMyRoles(request: GetMyRolesRequest): GetMyRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMyRoles', 'POST', '/', 'json', false, 'json', request);
}

model GetMyTenantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  featureCodeList?: [ string ](name='FeatureCodeList', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetMyTenantsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  tenantList?: [ 
    {
      deleteTime?: long(name='DeleteTime', example='1717343597000'),
      deleted?: boolean(name='Deleted', example='false'),
      description?: string(name='Description'),
      id?: long(name='Id', example='132311'),
      name?: string(name='Name'),
      opsTenant?: boolean(name='OpsTenant', example='false'),
      ownerId?: string(name='OwnerId', example='21323231'),
      resourceLimited?: boolean(name='ResourceLimited', example='false'),
      tenantTypeList?: [ string ](name='TenantTypeList'),
      titleType?: string(name='TitleType', example='icon'),
      visible?: boolean(name='Visible', example='true'),
    }
  ](name='TenantList'),
}

model GetMyTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyTenantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMyTenants  GetMyTenantsRequest
  * @return GetMyTenantsResponse
 */
async function getMyTenants(request: GetMyTenantsRequest): GetMyTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMyTenants', 'POST', '/', 'json', true, 'form', request);
}

model GetNodeUpDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  downStreamDepth?: int32(name='DownStreamDepth', example='1', position='Query'),
  env?: string(name='Env', example='DEV', position='Query'),
  nodeId: {
    fieldIdList?: string(name='FieldIdList', example='12'),
    id: string(name='Id', description='This parameter is required.', example='11313'),
  }(name='NodeId', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId?: long(name='ProjectId', example='113123', position='Query'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1', position='Query'),
}

model GetNodeUpDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeDagInfo?: {
    downStreamNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='DownStreamNodeList'),
    startNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='StartNodeList'),
    upStreamNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='UpStreamNodeList'),
  }(name='NodeDagInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeUpDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeUpDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNodeUpDownStream  GetNodeUpDownStreamRequest
  * @return GetNodeUpDownStreamResponse
 */
async function getNodeUpDownStream(request: GetNodeUpDownStreamRequest): GetNodeUpDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodeUpDownStream', 'POST', '/', 'json', true, 'form', request);
}

model GetOperationSubmitStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='1324444131', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetOperationSubmitStatusResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  operationSubmitJob?: {
    externalBizId?: string(name='ExternalBizId', example='f_122_232342'),
    jobId?: string(name='JobId', example='123456'),
    operation?: string(name='Operation', example='SUPPLY_DATA'),
    operationStatus?: string(name='OperationStatus', example='SUCCESS'),
    operator?: string(name='Operator', example='132344'),
    progress?: string(name='Progress', example='80'),
  }(name='OperationSubmitJob'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetOperationSubmitStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOperationSubmitStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOperationSubmitStatus  GetOperationSubmitStatusRequest
  * @return GetOperationSubmitStatusResponse
 */
async function getOperationSubmitStatus(request: GetOperationSubmitStatusRequest): GetOperationSubmitStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOperationSubmitStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='t_23231', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='2323131', position='Query'),
}

model GetPhysicalInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instance?: {
    bizDate?: string(name='BizDate', example='2023-06-25'),
    dueTime?: string(name='DueTime', example='2023-06-27 00:30:00'),
    duration?: string(name='Duration', example='3600s'),
    endExecuteTime?: long(name='EndExecuteTime', example='2023-06-27 02:30:00'),
    extendInfo?: string(name='ExtendInfo', example='xx'),
    id?: string(name='Id', example='t_23231'),
    index?: int32(name='Index', example='1'),
    nodeInfo?: {
      bizUnitName?: string(name='BizUnitName', example='xx'),
      createTime?: string(name='CreateTime', example='2023-02-02 23:53:17'),
      creator?: {
        id?: string(name='Id', example='2323111'),
        name?: string(name='Name', example='zhangsan'),
      }(name='Creator'),
      description?: string(name='Description'),
      dryRun?: boolean(name='DryRun', example='false'),
      from?: string(name='From', example='DATA_PROCESS'),
      hasDev?: boolean(name='HasDev', example='true'),
      hasProd?: boolean(name='HasProd', example='true'),
      id?: string(name='Id', example='n_3232312'),
      lastModifiedTime?: string(name='LastModifiedTime', example='2024-02-02 23:53:17'),
      modifier?: {
        id?: string(name='Id', example='2323111'),
        name?: string(name='Name', example='zhangsan'),
      }(name='Modifier'),
      name?: string(name='Name'),
      ownerList?: [ 
        {
          id?: string(name='Id', example='2323111'),
          name?: string(name='Name', example='zhangsan'),
        }
      ](name='OwnerList'),
      priorityList?: [ string ](name='PriorityList'),
      resourceGroupList?: [ string ](name='ResourceGroupList'),
      schedulePaused?: boolean(name='SchedulePaused', example='false'),
      schedulePeriodList?: [ string ](name='SchedulePeriodList'),
      subDetailType?: string(name='SubDetailType', example='SHELL'),
      type?: string(name='Type', example='DATA_PROCESS'),
    }(name='NodeInfo'),
    startExecuteTime?: long(name='StartExecuteTime', example='2023-06-27 01:30:00'),
    statusList?: [ string ](name='StatusList'),
  }(name='Instance'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalInstance  GetPhysicalInstanceRequest
  * @return GetPhysicalInstanceResponse
 */
async function getPhysicalInstance(request: GetPhysicalInstanceRequest): GetPhysicalInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalInstanceLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='t_5929472_20210411_9577721', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='123131', position='Query'),
}

model GetPhysicalInstanceLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  taskrunLogList?: [ 
    {
      duration?: string(name='Duration', example='60s'),
      endTime?: string(name='EndTime', example='2024-05-30 16:48:13'),
      logContent?: string(name='LogContent', example='xx'),
      startTime?: string(name='StartTime', example='2024-05-30 16:47:13'),
      status?: string(name='Status', example='SUCCESS'),
      taskrunId?: string(name='TaskrunId', example='tr_23231'),
    }
  ](name='TaskrunLogList'),
}

model GetPhysicalInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalInstanceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalInstanceLog  GetPhysicalInstanceLogRequest
  * @return GetPhysicalInstanceLogResponse
 */
async function getPhysicalInstanceLog(request: GetPhysicalInstanceLogRequest): GetPhysicalInstanceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalInstanceLog', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='n_232132', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetPhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfo?: {
    createTime?: long(name='CreateTime', example='1717343597000'),
    creator?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Creator'),
    cronExpression?: string(name='CronExpression', example='0 0 10 * * *'),
    dataSourceId?: long(name='DataSourceId', example='123456789'),
    dataSourceSchema?: string(name='DataSourceSchema', example='null'),
    description?: string(name='Description'),
    from?: string(name='From', example='DATA_PROCESS'),
    id?: string(name='Id', example='n_232132'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1717343597000'),
    modifier?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Modifier'),
    name?: string(name='Name'),
    operatorType?: string(name='OperatorType', example='SHELL'),
    outputNameList?: [ string ](name='OutputNameList'),
    owner?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Owner'),
    priority?: string(name='Priority', example='MIDDLE'),
    projectInfo?: {
      id?: string(name='Id', example='102132'),
      name?: string(name='Name'),
    }(name='ProjectInfo'),
    scheduleType?: string(name='ScheduleType', example='DAILY'),
    status?: string(name='Status', example='SUCCESS'),
    triggerConfig?: string(name='TriggerConfig', example='{"expression":"any_success"}'),
  }(name='NodeInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNode  GetPhysicalNodeRequest
  * @return GetPhysicalNodeResponse
 */
async function getPhysicalNode(request: GetPhysicalNodeRequest): GetPhysicalNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNode', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeByOutputNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  outputName: string(name='OutputName', description='This parameter is required.', example='t_test', position='Query'),
}

model GetPhysicalNodeByOutputNameResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfo?: {
    createTime?: long(name='CreateTime', example='1717343597000'),
    creator?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Creator'),
    description?: string(name='Description'),
    from?: string(name='From', example='DATA_PROCESS'),
    id?: string(name='Id', example='n_2321'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1717343597000'),
    modifier?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Modifier'),
    name?: string(name='Name'),
    operatorType?: string(name='OperatorType', example='SHELL'),
    owner?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Owner'),
    priority?: string(name='Priority', example='MIDDLE'),
    projectInfo?: {
      id?: string(name='Id', example='1324211'),
      name?: string(name='Name'),
    }(name='ProjectInfo'),
    scheduleType?: string(name='ScheduleType', example='DAILY'),
    status?: string(name='Status', example='SUCCESS'),
    triggerConfig?: string(name='TriggerConfig', example='{"expression":"any_success"}'),
  }(name='NodeInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeByOutputNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeByOutputNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNodeByOutputName  GetPhysicalNodeByOutputNameRequest
  * @return GetPhysicalNodeByOutputNameResponse
 */
async function getPhysicalNodeByOutputName(request: GetPhysicalNodeByOutputNameRequest): GetPhysicalNodeByOutputNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNodeByOutputName', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='n_232411', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetPhysicalNodeContentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    codeContent?: string(name='CodeContent', example='select 1;'),
    nodeId?: string(name='NodeId', example='n_232411'),
    nodeName?: string(name='NodeName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNodeContent  GetPhysicalNodeContentRequest
  * @return GetPhysicalNodeContentResponse
 */
async function getPhysicalNodeContent(request: GetPhysicalNodeContentRequest): GetPhysicalNodeContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNodeContent', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeOperationLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='n_231131', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetPhysicalNodeOperationLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  operationLogList?: [ 
    {
      context?: string(name='Context', example='xx'),
      operationTime?: string(name='OperationTime', example='2024-05-30 16:47:13'),
      operationType?: string(name='OperationType', example='PAUSE_TASK'),
      operator?: string(name='Operator', example='132222'),
      operatorName?: string(name='OperatorName'),
    }
  ](name='OperationLogList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeOperationLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeOperationLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNodeOperationLog  GetPhysicalNodeOperationLogRequest
  * @return GetPhysicalNodeOperationLogResponse
 */
async function getPhysicalNodeOperationLog(request: GetPhysicalNodeOperationLogRequest): GetPhysicalNodeOperationLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNodeOperationLog', 'POST', '/', 'json', false, 'json', request);
}

model GetProjectProduceUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131311111321', position='Query'),
}

model GetProjectProduceUserResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  user?: {
    id?: string(name='Id', example='123131'),
  }(name='User'),
}

model GetProjectProduceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectProduceUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProjectProduceUser  GetProjectProduceUserRequest
  * @return GetProjectProduceUserResponse
 */
async function getProjectProduceUser(request: GetProjectProduceUserRequest): GetProjectProduceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectProduceUser', 'POST', '/', 'json', false, 'json', request);
}

model GetSupplementDagrunRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  supplementId: string(name='SupplementId', description='This parameter is required.', example='f_8241792_20201202_2099680', position='Query'),
}

model GetSupplementDagrunResponseBody = {
  code?: string(name='Code', example='OK'),
  dagrunList?: [ 
    {
      bizDate?: string(name='BizDate', example='2024-04-01'),
      duration?: string(name='Duration', example='60s'),
      endExecuteTime?: long(name='EndExecuteTime', example='1717081789000'),
      id?: string(name='Id', description='Dagrun ID', example='dr_2242792_14542'),
      startExecuteTime?: long(name='StartExecuteTime', example='1717081729000'),
      status?: string(name='Status', example='RUNNING'),
      supplementId?: string(name='SupplementId', example='f_8241792_20201202_2099680'),
    }
  ](name='DagrunList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetSupplementDagrunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSupplementDagrunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSupplementDagrun  GetSupplementDagrunRequest
  * @return GetSupplementDagrunResponse
 */
async function getSupplementDagrun(request: GetSupplementDagrunRequest): GetSupplementDagrunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSupplementDagrun', 'POST', '/', 'json', false, 'json', request);
}

model GetSupplementDagrunInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagrunId: string(name='DagrunId', description='Dagrun ID

This parameter is required.', example='dr_2242792_14542', position='Query'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetSupplementDagrunInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceList?: [ 
    {
      bizDate?: long(name='BizDate', example='2024-04-01'),
      dueTime?: long(name='DueTime', example='2024-04-02'),
      duration?: string(name='Duration', example='60'),
      endExecuteTime?: long(name='EndExecuteTime', example='2024-04-12 00:25:02'),
      extendInfo?: string(name='ExtendInfo', example='{"a":"b"}'),
      id?: string(name='Id', example='t_239496_20210411_246982077481'),
      index?: int32(name='Index', example='1'),
      nodeInfo?: {
        bizUnitName?: string(name='BizUnitName', example='xx测试'),
        createTime?: string(name='CreateTime', example='2024-01-30 10:08:49'),
        creator?: {
          id?: string(name='Id', example='1001012'),
          name?: string(name='Name', example='xx测试'),
        }(name='Creator'),
        description?: string(name='Description', example='xx测试'),
        dryRun?: boolean(name='DryRun', example='true'),
        from?: string(name='From', example='DATA_PROCESS'),
        hasDev?: boolean(name='HasDev', example='true'),
        hasProd?: boolean(name='HasProd', example='true'),
        id?: string(name='Id', example='n_239496'),
        lastModifiedTime?: string(name='LastModifiedTime', example='2024-01-30 10:08:49'),
        modifier?: {
          id?: string(name='Id', example='1001012'),
          name?: string(name='Name', example='xx测试'),
        }(name='Modifier'),
        name?: string(name='Name', example='xx测试'),
        ownerList?: [ 
          {
            id?: string(name='Id', example='1001012'),
            name?: string(name='Name', example='xx测试'),
          }
        ](name='OwnerList'),
        priorityList?: [ string ](name='PriorityList'),
        resourceGroupList?: [ string ](name='ResourceGroupList'),
        schedulePaused?: boolean(name='SchedulePaused', example='true'),
        schedulePeriodList?: [ string ](name='SchedulePeriodList'),
        subDetailType?: string(name='SubDetailType', example='SHELL'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }(name='NodeInfo'),
      startExecuteTime?: long(name='StartExecuteTime', example='2024-04-12 00:00:00'),
      statusList?: [ string ](name='StatusList'),
      type?: string(name='Type', example='SUPPLEMENT'),
    }
  ](name='InstanceList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetSupplementDagrunInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSupplementDagrunInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSupplementDagrunInstance  GetSupplementDagrunInstanceRequest
  * @return GetSupplementDagrunInstanceResponse
 */
async function getSupplementDagrunInstance(request: GetSupplementDagrunInstanceRequest): GetSupplementDagrunInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSupplementDagrunInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetUserBySourceIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  sourceId: string(name='SourceId', description='This parameter is required.', example='323131', position='Query'),
}

model GetUserBySourceIdResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  user?: {
    displayName?: string(name='DisplayName'),
    id?: string(name='Id', example='23231231'),
  }(name='User'),
}

model GetUserBySourceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserBySourceIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserBySourceId  GetUserBySourceIdRequest
  * @return GetUserBySourceIdResponse
 */
async function getUserBySourceId(request: GetUserBySourceIdRequest): GetUserBySourceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserBySourceId', 'POST', '/', 'json', false, 'json', request);
}

model GetUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='1313213', position='Query'),
}

model GetUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userGroupInfo?: {
    active?: boolean(name='Active', example='true'),
    adminList?: [ 
      {
        accountName?: string(name='AccountName', example='xx'),
        displayName?: string(name='DisplayName'),
        id?: string(name='Id', example='131313'),
      }
    ](name='AdminList'),
    description?: string(name='Description', example='xx'),
    id?: string(name='Id', example='1313213'),
    myRole?: string(name='MyRole', example='xx'),
    name?: string(name='Name'),
  }(name='UserGroupInfo'),
}

model GetUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserGroup  GetUserGroupRequest
  * @return GetUserGroupResponse
 */
async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userIdList: [ string ](name='UserIdList', description='This parameter is required.', shrink='json', position='Body'),
}

model GetUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userList?: [ 
    {
      accountName?: string(name='AccountName', example='123@xx.com'),
      dingNumber?: string(name='DingNumber', example='123@dingding'),
      displayName?: string(name='DisplayName'),
      displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus'),
      enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
      feiShuRobot?: string(name='FeiShuRobot', example='xx'),
      gmtCreate?: long(name='GmtCreate', example='1717343597000'),
      gmtModified?: long(name='GmtModified', example='1717343597000'),
      id?: string(name='Id', example='1233121'),
      mail?: string(name='Mail', example='123@xx.com'),
      mobilePhone?: string(name='MobilePhone', example='1388888888'),
      name?: string(name='Name'),
      nickName?: string(name='NickName'),
      parentId?: string(name='ParentId', example='231231'),
      realName?: string(name='RealName'),
      sourceId?: string(name='SourceId', example='123@xx.com'),
      sourceType?: string(name='SourceType', example='ALIYUN'),
      weChatRobot?: string(name='WeChatRobot', example='xx'),
      whiteIp?: string(name='WhiteIp', example='*'),
    }
  ](name='UserList'),
}

model GetUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUsers  GetUsersRequest
  * @return GetUsersResponse
 */
async function getUsers(request: GetUsersRequest): GetUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUsers', 'POST', '/', 'json', true, 'form', request);
}

model GrantResourcePermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  grantCommand: {
    effectiveEnd: string(name='EffectiveEnd', description='This parameter is required.', example='1717343597000'),
    operateList: [ string ](name='OperateList', description='This parameter is required.'),
    reason?: string(name='Reason', example='xx'),
    resourceList: [ 
      {
        resourceId?: string(name='ResourceId', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userIdList: [ string ](name='UserIdList', description='This parameter is required.'),
  }(name='GrantCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GrantResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GrantResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantResourcePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantResourcePermission  GrantResourcePermissionRequest
  * @return GrantResourcePermissionResponse
 */
async function grantResourcePermission(request: GrantResourcePermissionRequest): GrantResourcePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantResourcePermission', 'POST', '/', 'json', true, 'form', request);
}

model ListAddableRolesRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAddableRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  roleList?: [ 
    {
      code?: string(name='Code', example='SECURITY_ADMIN'),
      name?: string(name='Name'),
    }
  ](name='RoleList'),
  success?: boolean(name='Success', example='true'),
}

model ListAddableRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddableRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAddableRoles  ListAddableRolesRequest
  * @return ListAddableRolesResponse
 */
async function listAddableRoles(request: ListAddableRolesRequest): ListAddableRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddableRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListAddableUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    searchText?: string(name='SearchText', example='xx'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAddableUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='66'),
    userList?: [ 
      {
        accountName?: string(name='AccountName', example='123@xx.com'),
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        displayName?: string(name='DisplayName', example='xx'),
        displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus', example='xx'),
        enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
        feiShuRobot?: string(name='FeiShuRobot', example='xx'),
        gmtCreate?: long(name='GmtCreate', example='1717343597000'),
        gmtModified?: long(name='GmtModified', example='1717343597000'),
        id?: string(name='Id', example='123231'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        name?: string(name='Name', example='xx'),
        nickName?: string(name='NickName', example='xx'),
        parentId?: string(name='ParentId', example='231313'),
        realName?: string(name='RealName', example='xx'),
        sourceId?: string(name='SourceId', example='123@xx.com'),
        sourceType?: string(name='SourceType', example='aliyun'),
        weChatRobot?: string(name='WeChatRobot', example='xx'),
        whiteIp?: string(name='WhiteIp', example='*'),
      }
    ](name='UserList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListAddableUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddableUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAddableUsers  ListAddableUsersRequest
  * @return ListAddableUsersResponse
 */
async function listAddableUsers(request: ListAddableUsersRequest): ListAddableUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddableUsers', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceWithConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    name?: string(name='Name', example='vcns-test'),
    ownerList?: [ string ](name='OwnerList'),
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    scopeList?: [ string ](name='ScopeList'),
    tag?: string(name='Tag'),
    typeList?: [ string ](name='TypeList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListDataSourceWithConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    dataSourceList?: [ 
      {
        devDataSourceInfo?: {
          configItemList?: [ 
            {
              key?: string(name='Key', example='param1'),
              value?: string(name='Value', example='value1'),
            }
          ](name='ConfigItemList'),
          createTime?: long(name='CreateTime', example='1710209552704'),
          creator?: string(name='Creator', example='212211111'),
          creatorName?: string(name='CreatorName'),
          description?: string(name='Description'),
          env?: string(name='Env', example='DEV'),
          id?: long(name='Id', example='12313123131'),
          modifyTime?: long(name='ModifyTime', example='1710209552704'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='212211111'),
          ownerName?: string(name='OwnerName'),
          scope?: string(name='Scope', example='ALL'),
          type?: string(name='Type', example='MAX_COMPUTE'),
        }(name='DevDataSourceInfo', description='开发环境数据源信息'),
        prodDataSourceInfo?: {
          configItemList?: [ 
            {
              key?: string(name='Key', example='param1'),
              value?: string(name='Value', example='value1'),
            }
          ](name='ConfigItemList'),
          createTime?: long(name='CreateTime', example='1708303959000'),
          creator?: string(name='Creator', example='212211111'),
          creatorName?: string(name='CreatorName'),
          description?: string(name='Description'),
          env?: string(name='Env', example='PROD'),
          id?: long(name='Id', example='300000028799'),
          modifyTime?: long(name='ModifyTime', example='1708303959000'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='212211111'),
          ownerName?: string(name='OwnerName'),
          scope?: string(name='Scope', example='ALL'),
          type?: string(name='Type', example='MAX_COMPUTE'),
        }(name='ProdDataSourceInfo', description='生产环境数据源'),
      }
    ](name='DataSourceList'),
    totalCount?: long(name='TotalCount', example='39'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListDataSourceWithConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceWithConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSourceWithConfig  ListDataSourceWithConfigRequest
  * @return ListDataSourceWithConfigResponse
 */
async function listDataSourceWithConfig(request: ListDataSourceWithConfigRequest): ListDataSourceWithConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceWithConfig', 'POST', '/', 'json', true, 'form', request);
}

model ListFilesRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    category: string(name='Category', description='This parameter is required.', example='tempCode'),
    directory: string(name='Directory', description='This parameter is required.', example='/xx/x'),
    env: string(name='Env', description='This parameter is required.', example='DEV'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='11112311'),
    recursive: boolean(name='Recursive', description='This parameter is required.', example='true'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListFilesResponseBody = {
  code?: string(name='Code', example='OK'),
  fileList?: [ 
    {
      category?: string(name='Category', example='tempCode'),
      content?: string(name='Content', example='select 1;'),
      creator?: string(name='Creator', example='1212111'),
      directory?: string(name='Directory', example='/xx/x'),
      fileType?: string(name='FileType', example='directory'),
      gmtCreate?: long(name='GmtCreate', example='1717483193830'),
      gmtModified?: long(name='GmtModified', example='1717483193830'),
      id?: long(name='Id', example='111231112'),
      lastModifier?: string(name='LastModifier', example='1212111'),
      name?: string(name='Name', example='xx测试'),
      projectId?: long(name='ProjectId', example='312112121'),
    }
  ](name='FileList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFiles  ListFilesRequest
  * @return ListFilesResponse
 */
async function listFiles(request: ListFilesRequest): ListFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFiles', 'POST', '/', 'json', true, 'form', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  listQuery?: {
    bizType?: string(name='BizType', example='SCRIPT'),
    bizUnitId?: long(name='BizUnitId'),
    maxBizDate?: string(name='MaxBizDate', example='2024-05-31'),
    maxRunDate?: string(name='MaxRunDate', example='2024-05-31'),
    minBizDate?: string(name='MinBizDate', example='2024-05-30'),
    minRunDate?: string(name='MinRunDate', example='2024-05-30'),
    nodeId?: string(name='NodeId', example='n_23131'),
    ownerList?: [ string ](name='OwnerList'),
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    priorityList?: [ string ](name='PriorityList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='131311111321'),
    runStatusList?: [ string ](name='RunStatusList'),
    schedulePaused?: boolean(name='SchedulePaused'),
    schedulePeriodList?: [ string ](name='SchedulePeriodList'),
    scheduleType: string(name='ScheduleType', description='This parameter is required.', example='NORMAL'),
    searchText?: string(name='SearchText', example='xx'),
    subBizTypeList?: [ string ](name='SubBizTypeList'),
  }(name='ListQuery', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        bizDate?: string(name='BizDate', example='2024-05-30'),
        dueTime?: string(name='DueTime', example='2024-05-30 16:47:13'),
        duration?: string(name='Duration', example='60s'),
        endExecuteTime?: long(name='EndExecuteTime', example='2024-05-30 16:47:13'),
        extendInfo?: string(name='ExtendInfo', example='xx'),
        id?: string(name='Id', example='t_23231'),
        index?: int32(name='Index', example='1'),
        nodeInfo?: {
          bizUnitName?: string(name='BizUnitName'),
          createTime?: string(name='CreateTime', example='2024-05-30 16:47:13'),
          creator?: {
            id?: string(name='Id', example='21313112'),
            name?: string(name='Name'),
          }(name='Creator'),
          description?: string(name='Description'),
          dryRun?: boolean(name='DryRun', example='false'),
          from?: string(name='From', example='DATA_PROCES'),
          hasDev?: boolean(name='HasDev', example='false'),
          hasProd?: boolean(name='HasProd', example='true'),
          id?: string(name='Id', example='n_132331'),
          lastModifiedTime?: string(name='LastModifiedTime', example='2024-05-30 16:47:13'),
          modifier?: {
            id?: string(name='Id', example='21313112'),
            name?: string(name='Name'),
          }(name='Modifier'),
          name?: string(name='Name'),
          ownerList?: [ 
            {
              id?: string(name='Id', example='21313112'),
              name?: string(name='Name'),
            }
          ](name='OwnerList'),
          priorityList?: [ string ](name='PriorityList'),
          resourceGroupList?: [ string ](name='ResourceGroupList'),
          schedulePaused?: boolean(name='SchedulePaused', example='false'),
          schedulePeriodList?: [ string ](name='SchedulePeriodList'),
          subDetailType?: string(name='SubDetailType', example='SHELL'),
          type?: string(name='Type', example='DATA_PROCES'),
        }(name='NodeInfo'),
        startExecuteTime?: long(name='StartExecuteTime', example='2024-05-30 16:46:13'),
        statusList?: [ string ](name='StatusList'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='107'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  listQuery: {
    downStreamDepth?: int32(name='DownStreamDepth', example='1'),
    filterList?: [ 
      {
        exclude?: boolean(name='Exclude', example='false'),
        key?: string(name='Key', example='PROJECT'),
        valueList?: [ string ](name='ValueList'),
      }
    ](name='FilterList'),
    nodeIdList: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList', example='112'),
        id?: string(name='Id', example='n_23431'),
      }
    ](name='NodeIdList', description='This parameter is required.'),
    projectId?: long(name='ProjectId', example='123011'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListNodeDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfoList?: [ 
    {
      depth?: int32(name='Depth', example='1'),
      fieldIdList?: [ string ](name='FieldIdList'),
      id?: string(name='Id', example='n_2423351'),
      name?: string(name='Name'),
      type?: string(name='Type', example='DATA_PROCESS'),
    }
  ](name='NodeInfoList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListNodeDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodeDownStream  ListNodeDownStreamRequest
  * @return ListNodeDownStreamResponse
 */
async function listNodeDownStream(request: ListNodeDownStreamRequest): ListNodeDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeDownStream', 'POST', '/', 'json', true, 'form', request);
}

model ListNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  listQuery: {
    dryRun?: boolean(name='DryRun', example='false'),
    nodeBizType: string(name='NodeBizType', description='This parameter is required.', example='SCRIPT'),
    nodeSubBizTypeList: [ string ](name='NodeSubBizTypeList', description='This parameter is required.'),
    ownerList?: [ string ](name='OwnerList'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    priorityList?: [ string ](name='PriorityList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='12111'),
    schedulePaused?: boolean(name='SchedulePaused', example='true'),
    schedulePeriodList?: [ string ](name='SchedulePeriodList'),
    scheduleType?: string(name='ScheduleType', example='NORMAL'),
    searchText?: string(name='SearchText', example='xx'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListNodesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    nodeList?: [ 
      {
        bizUnitName?: string(name='BizUnitName'),
        createTime?: string(name='CreateTime', example='2024-05-30 16:47:13'),
        creator?: {
          id?: string(name='Id', example='23222'),
          name?: string(name='Name'),
        }(name='Creator'),
        description?: string(name='Description', example='xx test'),
        dryRun?: boolean(name='DryRun', example='true'),
        extendInfo?: string(name='ExtendInfo', example='{"xx":"zz"}'),
        from?: string(name='From', example='DATA_PROCESS'),
        hasDev?: boolean(name='HasDev', example='true'),
        hasProd?: boolean(name='HasProd', example='true'),
        id?: string(name='Id', example='n_31111'),
        lastModifiedTime?: string(name='LastModifiedTime', example='2024-05-30 16:47:13'),
        modifier?: {
          id?: string(name='Id', example='311131'),
          name?: string(name='Name'),
        }(name='Modifier'),
        name?: string(name='Name'),
        ownerList?: [ 
          {
            id?: string(name='Id', example='23222'),
            name?: string(name='Name'),
          }
        ](name='OwnerList'),
        priorityList?: [ string ](name='PriorityList'),
        projectInfo?: {
          id?: string(name='Id', example='1121321'),
          name?: string(name='Name'),
        }(name='ProjectInfo'),
        schedulePaused?: boolean(name='SchedulePaused', example='true'),
        schedulePeriodList?: [ string ](name='SchedulePeriodList'),
        subDetailType?: string(name='SubDetailType', example='SHELL'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='NodeList'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodes  ListNodesRequest
  * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'POST', '/', 'json', true, 'form', request);
}

model ListResourcePermissionOperationLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    searchText?: string(name='SearchText', example='xx测试'),
    tabType: string(name='TabType', description='This parameter is required.', example='TABLE'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListResourcePermissionOperationLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        account?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='Account'),
        authScope?: string(name='AuthScope', example='selectTable'),
        operateId?: long(name='OperateId', example='123133'),
        operateTime?: long(name='OperateTime', example='1710012121000'),
        operateType?: string(name='OperateType', example='APPLY'),
        period?: {
          endTime?: string(name='EndTime', example='1712000000000'),
          type?: string(name='Type', example='CUSTOM'),
        }(name='Period'),
        reason?: string(name='Reason', example='xx测试'),
        resourceInfo?: {
          bizUnitInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: string(name='Id', description='Id', example='121323'),
            name?: string(name='Name', example='xx'),
          }(name='BizUnitInfo'),
          displayName?: string(name='DisplayName', example='tb1'),
          env?: string(name='Env', example='DEV'),
          id?: string(name='Id', example='a.tb1'),
          name?: string(name='Name', example='tb1'),
          projectInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: long(name='Id', example='1123131'),
            name?: string(name='Name', example='xx'),
          }(name='ProjectInfo'),
          type?: string(name='Type', example='PHYSICAL_TABLE'),
        }(name='ResourceInfo'),
        targetAccount?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='TargetAccount'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='121'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListResourcePermissionOperationLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcePermissionOperationLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourcePermissionOperationLog  ListResourcePermissionOperationLogRequest
  * @return ListResourcePermissionOperationLogResponse
 */
async function listResourcePermissionOperationLog(request: ListResourcePermissionOperationLogRequest): ListResourcePermissionOperationLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcePermissionOperationLog', 'POST', '/', 'json', true, 'form', request);
}

model ListResourcePermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    searchText?: string(name='SearchText', example='xx测试'),
    tabType: string(name='TabType', description='This parameter is required.', example='TABLE'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListResourcePermissionsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        authScope?: string(name='AuthScope', example='selectTable'),
        period?: {
          endTime?: string(name='EndTime', example='1712000000000'),
          type?: string(name='Type', example='CUSTOM'),
        }(name='Period'),
        permissionPeriodList?: [ 
          {
            period?: {
              endTime?: string(name='EndTime', example='1712000000000'),
              type?: string(name='Type', example='CUSTOM'),
            }(name='Period'),
            permissionType?: string(name='PermissionType', example='SELECT'),
          }
        ](name='PermissionPeriodList'),
        recordId?: string(name='RecordId', example='12123111'),
        resourceInfo?: {
          bizUnitInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: string(name='Id', description='Id', example='121323'),
            name?: string(name='Name', example='xx'),
          }(name='BizUnitInfo'),
          displayName?: string(name='DisplayName', example='tb1'),
          env?: string(name='Env', example='DEV'),
          id?: string(name='Id', example='a.tb1'),
          name?: string(name='Name', example='tb1'),
          projectInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: long(name='Id', example='1123131'),
            name?: string(name='Name', example='xx'),
          }(name='ProjectInfo'),
          type?: string(name='Type', example='PHYSICAL_TABLE'),
        }(name='ResourceInfo'),
        targetAccount?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='TargetAccount'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='121'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListResourcePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcePermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourcePermissions  ListResourcePermissionsRequest
  * @return ListResourcePermissionsResponse
 */
async function listResourcePermissions(request: ListResourcePermissionsRequest): ListResourcePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcePermissions', 'POST', '/', 'json', true, 'form', request);
}

model ListTenantMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    roleList?: [ string ](name='RoleList'),
    searchText?: string(name='SearchText'),
    userGroupIdList?: [ string ](name='UserGroupIdList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListTenantMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='110'),
    userList?: [ 
      {
        accountName?: string(name='AccountName', example='zhangsan'),
        dingNumber?: string(name='DingNumber', example='dd123123'),
        displayName?: string(name='DisplayName', example='zhangsan'),
        displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus', example='zhangsan'),
        enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
        gmtCreate?: long(name='GmtCreate', example='1730000000000'),
        gmtModified?: long(name='GmtModified', example='1730000000000'),
        id?: string(name='Id', example='132321'),
        mail?: string(name='Mail', example='123@aliyun.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        name?: string(name='Name', example='zhangsan'),
        nickName?: string(name='NickName', example='susan'),
        realName?: string(name='RealName'),
        roleList?: [ string ](name='RoleList'),
        sourceId?: string(name='SourceId', example='213213232422222'),
        sourceType?: string(name='SourceType', example='aliyun'),
        userGroupList?: [ 
          {
            active?: boolean(name='Active', example='true'),
            description?: string(name='Description'),
            id?: string(name='Id', example='121313'),
            name?: string(name='Name'),
          }
        ](name='UserGroupList'),
        whiteIp?: string(name='WhiteIp', example='0.0.0.0/0'),
      }
    ](name='UserList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListTenantMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTenantMembers  ListTenantMembersRequest
  * @return ListTenantMembersResponse
 */
async function listTenantMembers(request: ListTenantMembersRequest): ListTenantMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTenantMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListUserGroupMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    keyword?: string(name='Keyword', example='a'),
    pageNo: int32(name='PageNo', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    userGroupId?: string(name='UserGroupId', example='232231'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListUserGroupMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    memberList?: [ 
      {
        creator?: {
          accountName?: string(name='AccountName', example='12121111'),
          displayName?: string(name='DisplayName', example='zhangsan'),
          id?: string(name='Id', example='12121111'),
        }(name='Creator'),
        gmtCreate?: long(name='GmtCreate', example='zhangsan'),
        id?: string(name='Id', example='2324211'),
        userGroupId?: string(name='UserGroupId', example='231111'),
        userInfo?: {
          accountName?: string(name='AccountName', example='atest'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='13232'),
        }(name='UserInfo'),
        userRole?: string(name='UserRole', example='SECURITY_ADMIN'),
      }
    ](name='MemberList'),
    totalCount?: int32(name='TotalCount', example='217'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListUserGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroupMembers  ListUserGroupMembersRequest
  * @return ListUserGroupMembersResponse
 */
async function listUserGroupMembers(request: ListUserGroupMembersRequest): ListUserGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListUserGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    active?: boolean(name='Active', example='true'),
    adminIdList?: [ string ](name='AdminIdList'),
    filterMine?: boolean(name='FilterMine', example='false'),
    keyword?: string(name='Keyword'),
    pageNo: int32(name='PageNo', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListUserGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='49'),
    userGroupList?: [ 
      {
        active?: boolean(name='Active', example='true'),
        adminList?: [ 
          {
            accountName?: string(name='AccountName', example='zhangsan'),
            displayName?: string(name='DisplayName'),
            id?: string(name='Id', example='32313131'),
          }
        ](name='AdminList'),
        description?: string(name='Description'),
        id?: string(name='Id', example='31313232'),
        myRole?: string(name='MyRole', example='SECURITY_ADMIN'),
        name?: string(name='Name'),
      }
    ](name='UserGroupList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroups  ListUserGroupsRequest
  * @return ListUserGroupsResponse
 */
async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroups', 'POST', '/', 'json', true, 'form', request);
}

model OperateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  operateCommand: {
    instanceIdList: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id: string(name='Id', description='This parameter is required.', example='t_32111312'),
      }
    ](name='InstanceIdList', description='This parameter is required.'),
    operation: string(name='Operation', description='This parameter is required.', example='RERUN'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='132311', maximum=132324),
  }(name='OperateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model OperateInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceStatusList?: [ 
    {
      displayName?: string(name='DisplayName'),
      errorMessage?: string(name='ErrorMessage', example='xx'),
      id?: string(name='Id', example='t_132435'),
      name?: string(name='Name'),
      ownerId?: string(name='OwnerId', example='121311'),
      ownerName?: string(name='OwnerName'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='InstanceStatusList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model OperateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateInstance  OperateInstanceRequest
  * @return OperateInstanceResponse
 */
async function operateInstance(request: OperateInstanceRequest): OperateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateInstance', 'POST', '/', 'json', true, 'form', request);
}

model PausePhysicalNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  pauseCommand: {
    nodeIdList: [ string ](name='NodeIdList', description='This parameter is required.'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='13222210'),
  }(name='PauseCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model PausePhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeOperateResultList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='xx'),
      nodeId?: string(name='NodeId', example='n_123456'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='NodeOperateResultList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model PausePhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PausePhysicalNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PausePhysicalNode  PausePhysicalNodeRequest
  * @return PausePhysicalNodeResponse
 */
async function pausePhysicalNode(request: PausePhysicalNodeRequest): PausePhysicalNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PausePhysicalNode', 'POST', '/', 'json', true, 'form', request);
}

model RemoveTenantMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  removeCommand: {
    sourceId: string(name='SourceId', description='This parameter is required.', example='123@xx.com'),
  }(name='RemoveCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model RemoveTenantMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RemoveTenantMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTenantMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveTenantMember  RemoveTenantMemberRequest
  * @return RemoveTenantMemberResponse
 */
async function removeTenantMember(request: RemoveTenantMemberRequest): RemoveTenantMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTenantMember', 'POST', '/', 'json', true, 'form', request);
}

model RemoveUserGroupMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  removeCommand: {
    userGroupId: string(name='UserGroupId', description='This parameter is required.', example='2311'),
    userIdList: [ string ](name='UserIdList', description='This parameter is required.'),
  }(name='RemoveCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model RemoveUserGroupMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RemoveUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserGroupMember  RemoveUserGroupMemberRequest
  * @return RemoveUserGroupMemberResponse
 */
async function removeUserGroupMember(request: RemoveUserGroupMemberRequest): RemoveUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserGroupMember', 'POST', '/', 'json', true, 'form', request);
}

model ResumePhysicalNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  resumeCommand: {
    nodeIdList: [ string ](name='NodeIdList', description='This parameter is required.'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='102011'),
  }(name='ResumeCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model ResumePhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeOperateResultList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='xx'),
      nodeId?: string(name='NodeId', example='n_123456'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='NodeOperateResultList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ResumePhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumePhysicalNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumePhysicalNode  ResumePhysicalNodeRequest
  * @return ResumePhysicalNodeResponse
 */
async function resumePhysicalNode(request: ResumePhysicalNodeRequest): ResumePhysicalNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumePhysicalNode', 'POST', '/', 'json', true, 'form', request);
}

model RevokeResourcePermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  revokeCommand: {
    operateList?: [ string ](name='OperateList'),
    reason?: string(name='Reason', example='xx'),
    resourceList: [ 
      {
        resourceId?: string(name='ResourceId', example='odps.300002102.beginner_test.amin_table'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userId: string(name='UserId', description='This parameter is required.', example='13131'),
  }(name='RevokeCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model RevokeResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RevokeResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeResourcePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeResourcePermission  RevokeResourcePermissionRequest
  * @return RevokeResourcePermissionResponse
 */
async function revokeResourcePermission(request: RevokeResourcePermissionRequest): RevokeResourcePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeResourcePermission', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    content: string(name='Content', description='This parameter is required.', example='select 1;'),
    fileId: long(name='FileId', description='This parameter is required.', example='2311113'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='1212313'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAdHocFile  UpdateAdHocFileRequest
  * @return UpdateAdHocFileResponse
 */
async function updateAdHocFile(request: UpdateAdHocFileRequest): UpdateAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAdHocFile', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceBasicInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    description: string(name='Description', description='This parameter is required.', example='xx'),
    id: long(name='Id', description='This parameter is required.', example='23231'),
    name: string(name='Name', description='This parameter is required.'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateDataSourceBasicInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSourceBasicInfo  UpdateDataSourceBasicInfoRequest
  * @return UpdateDataSourceBasicInfoResponse
 */
async function updateDataSourceBasicInfo(request: UpdateDataSourceBasicInfoRequest): UpdateDataSourceBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSourceBasicInfo', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    configItemList: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='k1'),
        value: string(name='Value', description='This parameter is required.', example='v1'),
      }
    ](name='ConfigItemList', description='This parameter is required.'),
    id: long(name='Id', description='This parameter is required.', example='13231313'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateDataSourceConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSourceConfig  UpdateDataSourceConfigRequest
  * @return UpdateDataSourceConfigResponse
 */
async function updateDataSourceConfig(request: UpdateDataSourceConfigRequest): UpdateDataSourceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSourceConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFileDirectoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  directory: string(name='Directory', description='This parameter is required.', example='/xx测试/目录new', position='Query'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model UpdateFileDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateFileDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFileDirectory  UpdateFileDirectoryRequest
  * @return UpdateFileDirectoryResponse
 */
async function updateFileDirectory(request: UpdateFileDirectoryRequest): UpdateFileDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileDirectory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='xxNew', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model UpdateFileNameResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateFileNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFileName  UpdateFileNameRequest
  * @return UpdateFileNameResponse
 */
async function updateFileName(request: UpdateFileNameRequest): UpdateFileNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTenantMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    memberList: [ 
      {
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        roleList?: [ string ](name='RoleList'),
        userId?: string(name='UserId', example='2331'),
      }
    ](name='MemberList', description='This parameter is required.'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateTenantMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTenantMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTenantMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTenantMember  UpdateTenantMemberRequest
  * @return UpdateTenantMemberResponse
 */
async function updateTenantMember(request: UpdateTenantMemberRequest): UpdateTenantMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTenantMember', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand?: {
    adminUserIdList?: [ string ](name='AdminUserIdList'),
    description?: string(name='Description', example='xx'),
    id: string(name='Id', description='This parameter is required.', example='13423'),
    name?: string(name='Name'),
  }(name='UpdateCommand', shrink='json', position='Body'),
}

model UpdateUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserGroup  UpdateUserGroupRequest
  * @return UpdateUserGroupResponse
 */
async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupSwitchRequest {
  regionId?: string(name='RegionId', position='Host'),
  active: boolean(name='Active', description='This parameter is required.', example='true', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='31323', position='Query'),
}

model UpdateUserGroupSwitchResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserGroupSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupSwitchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserGroupSwitch  UpdateUserGroupSwitchRequest
  * @return UpdateUserGroupSwitchResponse
 */
async function updateUserGroupSwitch(request: UpdateUserGroupSwitchRequest): UpdateUserGroupSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroupSwitch', 'POST', '/', 'json', false, 'json', request);
}

