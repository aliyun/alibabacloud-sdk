/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dataphin-public';
  @version = '2023-06-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddTenantMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  addCommand: {
    userList: [ 
      {
        id?: string(name='Id', example='1323241'),
        roleList?: [ string ](name='RoleList'),
      }
    ](name='UserList', description='This parameter is required.'),
  }(name='AddCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model AddTenantMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddTenantMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTenantMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTenantMembers  AddTenantMembersRequest
  * @return AddTenantMembersResponse
 */
async function addTenantMembers(request: AddTenantMembersRequest): AddTenantMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTenantMembers', 'POST', '/', 'json', true, 'form', request);
}

model AddTenantMembersBySourceUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  addCommand?: {
    sourceUserList?: [ 
      {
        accountName?: string(name='AccountName', example='123@xx.com'),
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        displayName?: string(name='DisplayName'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        sourceId?: string(name='SourceId', example='2323131'),
      }
    ](name='SourceUserList'),
  }(name='AddCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model AddTenantMembersBySourceUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddTenantMembersBySourceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTenantMembersBySourceUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTenantMembersBySourceUser  AddTenantMembersBySourceUserRequest
  * @return AddTenantMembersBySourceUserResponse
 */
async function addTenantMembersBySourceUser(request: AddTenantMembersBySourceUserRequest): AddTenantMembersBySourceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTenantMembersBySourceUser', 'POST', '/', 'json', true, 'form', request);
}

model AddUserGroupMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  addCommand?: {
    userGroupId: string(name='UserGroupId', description='This parameter is required.', example='132331'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='AddCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model AddUserGroupMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model AddUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserGroupMember  AddUserGroupMemberRequest
  * @return AddUserGroupMemberResponse
 */
async function addUserGroupMember(request: AddUserGroupMemberRequest): AddUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserGroupMember', 'POST', '/', 'json', true, 'form', request);
}

model CheckDataSourceConnectivityRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkCommand: {
    configItemList: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='k1'),
        value: string(name='Value', description='This parameter is required.', example='v1'),
      }
    ](name='ConfigItemList', description='This parameter is required.'),
    type: string(name='Type', description='This parameter is required.', example='MAX_COMPUTE'),
  }(name='CheckCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CheckDataSourceConnectivityResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CheckDataSourceConnectivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceConnectivityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDataSourceConnectivity  CheckDataSourceConnectivityRequest
  * @return CheckDataSourceConnectivityResponse
 */
async function checkDataSourceConnectivity(request: CheckDataSourceConnectivityRequest): CheckDataSourceConnectivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDataSourceConnectivity', 'POST', '/', 'json', true, 'form', request);
}

model CheckDataSourceConnectivityByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='123', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CheckDataSourceConnectivityByIdResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CheckDataSourceConnectivityByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceConnectivityByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDataSourceConnectivityById  CheckDataSourceConnectivityByIdRequest
  * @return CheckDataSourceConnectivityByIdResponse
 */
async function checkDataSourceConnectivityById(request: CheckDataSourceConnectivityByIdRequest): CheckDataSourceConnectivityByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDataSourceConnectivityById', 'POST', '/', 'json', false, 'json', request);
}

model CheckResourcePermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkCommand: {
    operate: string(name='Operate', description='This parameter is required.', example='UPDATE'),
    resourceList: [ 
      {
        resourceId: string(name='ResourceId', description='This parameter is required.', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userId: string(name='UserId', description='This parameter is required.', example='323231'),
  }(name='CheckCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CheckResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  resourcePermissionList?: [ 
    {
      hasPermission?: boolean(name='HasPermission', example='true'),
      resourceId?: string(name='ResourceId', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
    }
  ](name='ResourcePermissionList'),
  success?: boolean(name='Success', example='true'),
}

model CheckResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResourcePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckResourcePermission  CheckResourcePermissionRequest
  * @return CheckResourcePermissionResponse
 */
async function checkResourcePermission(request: CheckResourcePermissionRequest): CheckResourcePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckResourcePermission', 'POST', '/', 'json', true, 'form', request);
}

model CreateAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    content: string(name='Content', description='This parameter is required.', example='select 1;'),
    directory: string(name='Directory', description='This parameter is required.', example='/xx1/xx2/'),
    name: string(name='Name', description='This parameter is required.', example='test_xx'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='11212133'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  fileId?: long(name='FileId', example='1212313222'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAdHocFile  CreateAdHocFileRequest
  * @return CreateAdHocFileResponse
 */
async function createAdHocFile(request: CreateAdHocFileRequest): CreateAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAdHocFile', 'POST', '/', 'json', true, 'form', request);
}

model CreateBatchTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    dataSourceCatalog?: string(name='DataSourceCatalog', example='mysql_catalog'),
    dataSourceId?: string(name='DataSourceId', example='12131111'),
    dataSourceSchema?: string(name='DataSourceSchema', example='erp'),
    description: string(name='Description', description='This parameter is required.', example='xx test.'),
    directory: string(name='Directory', description='This parameter is required.', example='/a/b'),
    engine?: string(name='Engine', example='PYTHON3_7'),
    name: string(name='Name', description='This parameter is required.', example='test111'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='10121101'),
    pythonModuleList?: [ string ](name='PythonModuleList'),
    scheduleType: int32(name='ScheduleType', description='This parameter is required.', example='3'),
    taskType: int32(name='TaskType', description='This parameter is required.', example='5'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateBatchTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    fileId?: long(name='FileId', example='12113111'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model CreateBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBatchTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBatchTask  CreateBatchTaskRequest
  * @return CreateBatchTaskResponse
 */
async function createBatchTask(request: CreateBatchTaskRequest): CreateBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBatchTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateBizEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    bizObject?: {
      description?: string(name='Description', example='test'),
      displayName: string(name='DisplayName', description='This parameter is required.', example='create_object_name'),
      name: string(name='Name', description='This parameter is required.', example='create_object_code_name'),
      ownerUserId?: string(name='OwnerUserId', example='30010010'),
      parentId?: long(name='ParentId', example='116306'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
      type: string(name='Type', description='This parameter is required.', example='NORMAL'),
    }(name='BizObject'),
    bizProcess?: {
      bizEventEntityIdList?: [ long ](name='BizEventEntityIdList'),
      description?: string(name='Description', example='test'),
      displayName: string(name='DisplayName', description='This parameter is required.', example='create_process_name'),
      name: string(name='Name', description='This parameter is required.', example='create_process_code_name'),
      ownerUserId?: string(name='OwnerUserId', example='30010010'),
      preBizProcessIdList?: [ long ](name='PreBizProcessIdList'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
      type: string(name='Type', description='This parameter is required.', example='BIZ_EVENT'),
    }(name='BizProcess'),
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='6798087749072704'),
    dataDomainId: long(name='DataDomainId', description='This parameter is required.', example='20101011'),
    type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateBizEntityResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    bizEntityId?: long(name='BizEntityId', example='12113111'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model CreateBizEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBizEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBizEntity  CreateBizEntityRequest
  * @return CreateBizEntityResponse
 */
async function createBizEntity(request: CreateBizEntityRequest): CreateBizEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBizEntity', 'POST', '/', 'json', true, 'form', request);
}

model CreateBizUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    bizUnitAccountList: [ 
      {
        userId: string(name='UserId', description='This parameter is required.', example='20001201'),
      }
    ](name='BizUnitAccountList', description='This parameter is required.'),
    description?: string(name='Description', example='test'),
    displayName: string(name='DisplayName', description='This parameter is required.', example='create_object_name'),
    icon: string(name='Icon', description='This parameter is required.', example='icon-environment'),
    mode?: string(name='Mode', example='DEV_PROD'),
    name: string(name='Name', description='This parameter is required.', example='create_object_code_name'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateBizUnitResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    bizUnitId?: long(name='BizUnitId', example='545844456'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model CreateBizUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBizUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBizUnit  CreateBizUnitRequest
  * @return CreateBizUnitResponse
 */
async function createBizUnit(request: CreateBizUnitRequest): CreateBizUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBizUnit', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    abbreviation: string(name='Abbreviation', description='This parameter is required.', example='dm_code_name'),
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='545844456'),
    description?: string(name='Description', example='test'),
    displayName: string(name='DisplayName', description='This parameter is required.', example='主题域测试'),
    name: string(name='Name', description='This parameter is required.', example='dm_code_name'),
    parentId?: long(name='ParentId', example='10232311'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateDataDomainResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    dataDomainId?: long(name='DataDomainId', example='1241844456'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model CreateDataDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataDomain  CreateDataDomainRequest
  * @return CreateDataDomainResponse
 */
async function createDataDomain(request: CreateDataDomainRequest): CreateDataDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataDomain', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand?: {
    devDataSourceCreate?: {
      dataSourceCreate?: {
        checkActivity?: boolean(name='CheckActivity', example='true'),
        configItemList: [ 
          {
            key: string(name='Key', description='This parameter is required.', example='k1'),
            value: string(name='Value', description='This parameter is required.', example='v1'),
          }
        ](name='ConfigItemList', description='This parameter is required.'),
        description?: string(name='Description', example='datasource for xxx in dev'),
        name: string(name='Name', description='This parameter is required.', example='dp_test_dev'),
        type: string(name='Type', description='This parameter is required.', example='MAX_COMPUTE'),
      }(name='DataSourceCreate', description='数据源创建结构体'),
      prodDataSourceId?: long(name='ProdDataSourceId', example='1011'),
    }(name='DevDataSourceCreate'),
    prodDataSourceCreate?: {
      checkActivity?: boolean(name='CheckActivity', example='true'),
      configItemList: [ 
        {
          key: string(name='Key', description='This parameter is required.', example='k1'),
          value: string(name='Value', description='This parameter is required.', example='v1'),
        }
      ](name='ConfigItemList', description='This parameter is required.'),
      description?: string(name='Description', example='datasource for xx'),
      name: string(name='Name', description='This parameter is required.', example='dp_test'),
      type: string(name='Type', description='This parameter is required.', example='MAX_COMPUTE'),
    }(name='ProdDataSourceCreate', description='数据源创建结构体'),
  }(name='CreateCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateDataSourceResponseBody = {
  code?: string(name='Code', example='OK'),
  createResult?: {
    devDataSourceId?: long(name='DevDataSourceId', example='123'),
    prodDataSourceId?: long(name='ProdDataSourceId', example='12345'),
  }(name='CreateResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSource  CreateDataSourceRequest
  * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateDirectoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    category: string(name='Category', description='This parameter is required.', example='tempCode'),
    directory: string(name='Directory', description='This parameter is required.', example='/'),
    name: string(name='Name', description='This parameter is required.', example='test_xx'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='1212344'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  fileId?: long(name='FileId', example='1311113211'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model CreateDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDirectory  CreateDirectoryRequest
  * @return CreateDirectoryResponse
 */
async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDirectory', 'POST', '/', 'json', true, 'form', request);
}

model CreateNodeSupplementRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand: {
    containAllDownStream?: boolean(name='ContainAllDownStream'),
    downStreamNodeIdList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id'),
      }
    ](name='DownStreamNodeIdList'),
    endBizDate: string(name='EndBizDate', description='This parameter is required.', example='2021-06-01'),
    filterList?: [ 
      {
        exclude?: boolean(name='Exclude'),
        key?: string(name='Key'),
        valueList?: [ string ](name='ValueList'),
      }
    ](name='FilterList'),
    globalParamList?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='GlobalParamList'),
    maxDueTime?: string(name='MaxDueTime'),
    minDueTime?: string(name='MinDueTime'),
    name?: string(name='Name', example='xx测试'),
    nodeIdList: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id: string(name='Id', description='This parameter is required.'),
      }
    ](name='NodeIdList', description='This parameter is required.'),
    nodeParamsList?: [ 
      {
        nodeId?: string(name='NodeId'),
        paramList?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='ParamList'),
      }
    ](name='NodeParamsList'),
    parallelism?: int32(name='Parallelism'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='101121'),
    startBizDate: string(name='StartBizDate', description='This parameter is required.', example='2021-06-01'),
  }(name='CreateCommand', description='This parameter is required.', shrink='json', position='Body'),
  env?: string(name='Env', example='DEV/PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateNodeSupplementResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitId?: string(name='SubmitId', example='f_2264518792396800000_20210223_2329354897145659392'),
  success?: boolean(name='Success', example='true/false'),
}

model CreateNodeSupplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeSupplementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNodeSupplement  CreateNodeSupplementRequest
  * @return CreateNodeSupplementResponse
 */
async function createNodeSupplement(request: CreateNodeSupplementRequest): CreateNodeSupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNodeSupplement', 'POST', '/', 'json', true, 'form', request);
}

model CreatePipelineNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  createPipelineNodeCommand: {
    fileInfo: {
      description?: string(name='Description', example='desc'),
      directory?: string(name='Directory', example='test'),
      fileName: string(name='FileName', description='This parameter is required.', example='test_pipeline'),
    }(name='FileInfo', description='This parameter is required.'),
    nodeType: string(name='NodeType', description='This parameter is required.', example='REAL_TIME'),
    pipelineName: string(name='PipelineName', description='This parameter is required.', example='test_pipeline'),
    pipelineType: string(name='PipelineType', description='This parameter is required.', example='REAL_TIME_PIPELINE'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='7091124176569088'),
  }(name='CreatePipelineNodeCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreatePipelineNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    errorCodeList?: [ string ](name='ErrorCodeList'),
    errorMessageList?: [ string ](name='ErrorMessageList'),
    pipelineId?: long(name='PipelineId', example='33749'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model CreatePipelineNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePipelineNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePipelineNode  CreatePipelineNodeRequest
  * @return CreatePipelineNodeResponse
 */
async function createPipelineNode(request: CreatePipelineNodeRequest): CreatePipelineNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePipelineNode', 'POST', '/', 'json', true, 'form', request);
}

model CreateStreamBatchJobMappingRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  streamBatchJobMappingCreateCommand: {
    clusterId: string(name='ClusterId', description='This parameter is required.', example='61187014-a3ba-4cdd-8609-1f0aa3df4a3d'),
    description?: string(name='Description', example='这是一段任务的描述信息'),
    directory: string(name='Directory', description='This parameter is required.', example='/karel'),
    engineVersion: string(name='EngineVersion', description='This parameter is required.', example='vvr-8.0.9-flink-1.17'),
    env: string(name='Env', description='This parameter is required.', example='DEV'),
    fileName: string(name='FileName', description='This parameter is required.', example='karel_hover_3'),
    fileType: string(name='FileType', description='This parameter is required.', example='FLINK_SQL'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='7081229106458752'),
    queueName: string(name='QueueName', description='This parameter is required.', example='default-queue'),
    vvpClusterType: string(name='VvpClusterType', description='This parameter is required.', example='PREJOB'),
  }(name='StreamBatchJobMappingCreateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model CreateStreamBatchJobMappingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    fileId?: string(name='FileId', example='7083701105376640'),
    url?: string(name='Url', example='/dev/streamJob/7083701105376640?env=DEV&projectId=7081229106458752&tenantId=300001420'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model CreateStreamBatchJobMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStreamBatchJobMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateStreamBatchJobMapping  CreateStreamBatchJobMappingRequest
  * @return CreateStreamBatchJobMappingResponse
 */
async function createStreamBatchJobMapping(request: CreateStreamBatchJobMappingRequest): CreateStreamBatchJobMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStreamBatchJobMapping', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  createCommand?: {
    active?: boolean(name='Active', example='true'),
    adminUserIdList?: [ string ](name='AdminUserIdList'),
    description?: string(name='Description', example='xx'),
    name?: string(name='Name'),
  }(name='CreateCommand', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model CreateUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userGroupId?: string(name='UserGroupId', example='2313131'),
}

model CreateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserGroup  CreateUserGroupRequest
  * @return CreateUserGroupResponse
 */
async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model DeleteAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAdHocFile  DeleteAdHocFileRequest
  * @return DeleteAdHocFileResponse
 */
async function deleteAdHocFile(request: DeleteAdHocFileRequest): DeleteAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAdHocFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBatchTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  deleteCommand: {
    comment: string(name='Comment', description='This parameter is required.', example='test task'),
    fileId: long(name='FileId', description='This parameter is required.', example='12113111'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='131211211'),
  }(name='DeleteCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model DeleteBatchTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='True'),
}

model DeleteBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBatchTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBatchTask  DeleteBatchTaskRequest
  * @return DeleteBatchTaskResponse
 */
async function deleteBatchTask(request: DeleteBatchTaskRequest): DeleteBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBatchTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteBizEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='6798087749072704', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='101001201', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT', position='Query'),
}

model DeleteBizEntityResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteBizEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBizEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBizEntity  DeleteBizEntityRequest
  * @return DeleteBizEntityResponse
 */
async function deleteBizEntity(request: DeleteBizEntityRequest): DeleteBizEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBizEntity', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBizUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='6798087749072704', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model DeleteBizUnitResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteBizUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBizUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBizUnit  DeleteBizUnitRequest
  * @return DeleteBizUnitResponse
 */
async function deleteBizUnit(request: DeleteBizUnitRequest): DeleteBizUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBizUnit', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='6798087749072704', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='1241844456', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model DeleteDataDomainResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteDataDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataDomain  DeleteDataDomainRequest
  * @return DeleteDataDomainResponse
 */
async function deleteDataDomain(request: DeleteDataDomainRequest): DeleteDataDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  deleteCommand: {
    mode: string(name='Mode', description='This parameter is required.', example='DEV'),
    prodDataSourceId: long(name='ProdDataSourceId', description='This parameter is required.', example='13121'),
  }(name='DeleteCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model DeleteDataSourceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSource  DeleteDataSourceRequest
  * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDirectoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model DeleteDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model DeleteDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDirectory  DeleteDirectoryRequest
  * @return DeleteDirectoryResponse
 */
async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='232131', position='Query'),
}

model DeleteUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroup  DeleteUserGroupRequest
  * @return DeleteUserGroupResponse
 */
async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteAdHocTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  executeCommand: {
    code: string(name='Code', description='This parameter is required.', example='show tables;'),
    dataSourceCatalog?: string(name='DataSourceCatalog', example='mysql_catalog'),
    dataSourceId?: long(name='DataSourceId', example='12131111'),
    dataSourceSchema?: string(name='DataSourceSchema', example='erp'),
    operatorType: string(name='OperatorType', description='This parameter is required.', example='MaxCompute_SQL'),
    paramList?: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='param1'),
        value: string(name='Value', description='This parameter is required.', example='value1'),
      }
    ](name='ParamList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='123222121'),
  }(name='ExecuteCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ExecuteAdHocTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  executeResult?: {
    subTaskCount?: int32(name='SubTaskCount', example='1'),
    taskId?: string(name='TaskId', example='MaxCompute_SQL_300000843_1611548758327'),
  }(name='ExecuteResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ExecuteAdHocTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAdHocTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAdHocTask  ExecuteAdHocTaskRequest
  * @return ExecuteAdHocTaskResponse
 */
async function executeAdHocTask(request: ExecuteAdHocTaskRequest): ExecuteAdHocTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteAdHocTask', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteManualNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  executeCommand: {
    endBizDate: string(name='EndBizDate', description='This parameter is required.', example='2024-05-07'),
    flowName?: string(name='FlowName', example='xx测试'),
    nodeId: string(name='NodeId', description='This parameter is required.', example='n_12132'),
    paramList?: [ 
      {
        key?: string(name='Key', example='param1'),
        value?: string(name='Value', example='1'),
      }
    ](name='ParamList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='123324'),
    startBizDate: string(name='StartBizDate', description='This parameter is required.', example='2024-05-01'),
  }(name='ExecuteCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ExecuteManualNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  flowId?: string(name='FlowId', example='f_1231_121324'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ExecuteManualNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteManualNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteManualNode  ExecuteManualNodeRequest
  * @return ExecuteManualNodeResponse
 */
async function executeManualNode(request: ExecuteManualNodeRequest): ExecuteManualNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteManualNode', 'POST', '/', 'json', true, 'form', request);
}

model FixDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  fixDataCommand: {
    containRootInstance?: boolean(name='ContainRootInstance', example='false'),
    downStreamInstanceIdList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_2323421'),
      }
    ](name='DownStreamInstanceIdList'),
    downstreamRange?: string(name='DownstreamRange', example='ALL_INSTANCE'),
    forceRerun?: boolean(name='ForceRerun', example='false'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='132344'),
    rootInstanceId: {
      fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
      id: string(name='Id', description='This parameter is required.', example='t_2323111'),
    }(name='RootInstanceId', description='This parameter is required.'),
  }(name='FixDataCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model FixDataResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitId?: string(name='SubmitId', example='12324234'),
  success?: boolean(name='Success'),
}

model FixDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FixDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FixData  FixDataRequest
  * @return FixDataResponse
 */
async function fixData(request: FixDataRequest): FixDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FixData', 'POST', '/', 'json', true, 'form', request);
}

model GetAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model GetAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  fileInfo?: {
    content?: string(name='Content', example='select 1;'),
    creator?: string(name='Creator', example='12121'),
    directory?: string(name='Directory', example='/xx1/xx2/'),
    id?: long(name='Id', example='12121111'),
    lastModifier?: string(name='LastModifier', example='12121'),
    name?: string(name='Name', example='xx测试'),
    projectId?: long(name='ProjectId', example='12132323'),
  }(name='FileInfo'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAdHocFile  GetAdHocFileRequest
  * @return GetAdHocFileResponse
 */
async function getAdHocFile(request: GetAdHocFileRequest): GetAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAdHocFile', 'POST', '/', 'json', false, 'json', request);
}

model GetAdHocTaskLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  offset: int32(name='Offset', description='This parameter is required.', example='1021', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
  subTaskId: int32(name='SubTaskId', description='This parameter is required.', example='0', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='MaxCompute_SQL_300000843_1611548758327', position='Query'),
}

model GetAdHocTaskLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  logInfo?: {
    content?: string(name='Content', example='test'),
    hasNext?: boolean(name='HasNext'),
    hasResult?: boolean(name='HasResult'),
    nextOffset?: int32(name='NextOffset', example='2021'),
    subTaskId?: int32(name='SubTaskId', example='0'),
    taskId?: string(name='TaskId', example='MaxCompute_SQL_300000843_1611548758327'),
    taskStatus?: string(name='TaskStatus', example='WAIT_RESOURCE'),
  }(name='LogInfo'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetAdHocTaskLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdHocTaskLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAdHocTaskLog  GetAdHocTaskLogRequest
  * @return GetAdHocTaskLogResponse
 */
async function getAdHocTaskLog(request: GetAdHocTaskLogRequest): GetAdHocTaskLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAdHocTaskLog', 'POST', '/', 'json', false, 'json', request);
}

model GetAdHocTaskResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
  subTaskId: int32(name='SubTaskId', description='This parameter is required.', example='0', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='MaxCompute_SQL_300000843_1611548758327', position='Query'),
}

model GetAdHocTaskResultResponseBody = {
  code?: string(name='Code', example='OK'),
  executeResult?: {
    result?: string(name='Result', example='1'),
    scheduleTaskId?: string(name='ScheduleTaskId', example='t_2242892326444990464_20210125_2242892326444990465'),
    taskId?: string(name='TaskId', example='MaxCompute_SQL_300000843_1611548758327'),
  }(name='ExecuteResult'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetAdHocTaskResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdHocTaskResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAdHocTaskResult  GetAdHocTaskResultRequest
  * @return GetAdHocTaskResultResponse
 */
async function getAdHocTaskResult(request: GetAdHocTaskResultRequest): GetAdHocTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAdHocTaskResult', 'POST', '/', 'json', false, 'json', request);
}

model GetAlertEventRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='12345', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetAlertEventResponseBody = {
  alertEventInfo?: {
    alertFrequency?: string(name='AlertFrequency', example='ONCE'),
    alertObject?: {
      name?: string(name='Name', example='test'),
      sourceSystemType?: string(name='SourceSystemType', example='ALL'),
      type?: string(name='Type', example='VDM_BATCH_PYTHON37'),
    }(name='AlertObject'),
    alertReason?: {
      alertReasonParamList?: [ 
        {
          key?: string(name='Key', example='biz_date'),
          value?: string(name='Value', example='2024-11-04 00:00:00'),
        }
      ](name='AlertReasonParamList'),
      bizDate?: string(name='BizDate', example='2024-11-05 16:19:32'),
      type?: string(name='Type', example='VDM_BATCH_FINISH'),
      uniqueKey?: string(name='UniqueKey', example='t_6340131422711644160_20241104_6340142'),
    }(name='AlertReason'),
    alertReceiverList?: [ 
      {
        alertChannelTypeList?: [ string ](name='AlertChannelTypeList'),
        customAlertChannelIdList?: [ string ](name='CustomAlertChannelIdList'),
        onCallTableName?: string(name='OnCallTableName', example='test'),
        type?: string(name='Type', example='OWNER'),
        userList?: [ 
          {
            name?: string(name='Name', example='Admin'),
          }
        ](name='UserList'),
      }
    ](name='AlertReceiverList'),
    belongProject?: {
      bizName?: string(name='BizName', example='biz_1'),
      projectName?: string(name='ProjectName', example='project_1'),
    }(name='BelongProject'),
    doNotDisturbEndTime?: string(name='DoNotDisturbEndTime', example='2024-11-05 00:00:00'),
    firstAlertTime?: string(name='FirstAlertTime', example='2024-11-05 16:19:33'),
    id?: long(name='Id', example='12345'),
    latestAlertTime?: string(name='LatestAlertTime', example='2024-11-05 16:19:33'),
    status?: string(name='Status', example='FINISH'),
    totalAlertTimes?: long(name='TotalAlertTimes', example='1'),
    urlConfig?: {
      alertConfigUrl?: string(name='AlertConfigUrl', example='https://dataphin.com/ops/test3'),
      logUrl?: string(name='LogUrl', example='https://dataphin.com/ops/test2'),
      objectUrl?: string(name='ObjectUrl', example='https://dataphin.com/ops/test1'),
    }(name='UrlConfig'),
  }(name='AlertEventInfo'),
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='True'),
}

model GetAlertEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlertEvent  GetAlertEventRequest
  * @return GetAlertEventResponse
 */
async function getAlertEvent(request: GetAlertEventRequest): GetAlertEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertEvent', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchTaskInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='dev', position='Query'),
  fileId: long(name='FileId', description='This parameter is required.', example='12113111', position='Query'),
  includeAllUpStreams?: boolean(name='IncludeAllUpStreams', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
}

model GetBatchTaskInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
  taskInfo?: {
    code?: string(name='Code', example='show tables;'),
    cronExpression?: string(name='CronExpression', example='0 0 1 * * ?'),
    customScheduleConfig?: {
      endTime?: string(name='EndTime', example='20:59'),
      interval?: int32(name='Interval', example='1'),
      intervalUnit?: string(name='IntervalUnit', example='HOUR'),
      schedulePeriod?: string(name='SchedulePeriod', example='DAILY'),
      startTime?: string(name='StartTime', example='08:00'),
    }(name='CustomScheduleConfig'),
    dagId?: string(name='DagId', example='dag_102121211'),
    dataSourceCatalog?: string(name='DataSourceCatalog', example='mysql_catalog'),
    dataSourceId?: string(name='DataSourceId', example='12131111'),
    dataSourceSchema?: string(name='DataSourceSchema', example='erp'),
    fileId?: long(name='FileId', example='12113111'),
    hasDevNode?: boolean(name='HasDevNode'),
    name?: string(name='Name', example='测试任务1'),
    needPublish?: boolean(name='NeedPublish'),
    nodeDescription?: string(name='NodeDescription', example='xx测试'),
    nodeFrom?: string(name='NodeFrom', example='openapi'),
    nodeId?: string(name='NodeId', example='n_1011_21232132322'),
    nodeName?: string(name='NodeName', example='测试任务1'),
    nodeOutputNameList?: [ string ](name='NodeOutputNameList'),
    nodeStatus?: int32(name='NodeStatus', example='1'),
    operatorUserId?: string(name='OperatorUserId', example='30231123'),
    ownerName?: string(name='OwnerName', example='张三'),
    ownerUserId?: string(name='OwnerUserId', example='30231123'),
    paramList?: [ 
      {
        key?: string(name='Key', example='key'),
        value?: string(name='Value', example='Value'),
      }
    ](name='ParamList'),
    paused?: boolean(name='Paused'),
    priority?: int32(name='Priority', example='1'),
    projectId?: long(name='ProjectId', example='131211211'),
    published?: boolean(name='Published'),
    remark?: string(name='Remark', example='test xx'),
    rerunable?: boolean(name='Rerunable'),
    schedulePeriod?: string(name='SchedulePeriod', example='DAILY'),
    scheduleType?: int32(name='ScheduleType', example='3'),
    sparkClientInfo?: {
      sparkClientVersion?: string(name='SparkClientVersion', example='abc'),
    }(name='SparkClientInfo'),
    status?: string(name='Status', example='测试任务1'),
    taskType?: int32(name='TaskType', example='21'),
    upStreamList?: [ 
      {
        dependPeriod?: {
          periodOffset?: int32(name='PeriodOffset', example='1'),
          periodType?: string(name='PeriodType', example='CURRENT_PERIOD'),
        }(name='DependPeriod'),
        dependStrategy?: string(name='DependStrategy', example='LAST'),
        fieldList?: [ string ](name='FieldList'),
        nodeType?: string(name='NodeType', example='PHYSICAL'),
        periodDiff?: int32(name='PeriodDiff', example='1'),
        sourceNodeEnabled?: boolean(name='SourceNodeEnabled'),
        sourceNodeId?: string(name='SourceNodeId', example='n_2001'),
        sourceNodeName?: string(name='SourceNodeName', example='t_input1'),
        sourceNodeOutputName?: string(name='SourceNodeOutputName', example='t_input1'),
        sourceNodeUserName?: string(name='SourceNodeUserName', example='张三'),
        sourceTableName?: string(name='SourceTableName', example='t_input1'),
      }
    ](name='UpStreamList'),
  }(name='TaskInfo'),
}

model GetBatchTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchTaskInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBatchTaskInfo  GetBatchTaskInfoRequest
  * @return GetBatchTaskInfoResponse
 */
async function getBatchTaskInfo(request: GetBatchTaskInfoRequest): GetBatchTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchTaskInfoByVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12113111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
  versionId: long(name='VersionId', description='This parameter is required.', example='1', position='Query'),
}

model GetBatchTaskInfoByVersionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
  taskInfo?: {
    code?: string(name='Code', example='show tables;'),
    cronExpression?: string(name='CronExpression', example='0 0 1 * * ?'),
    customScheduleConfig?: {
      endTime?: string(name='EndTime', example='20:59'),
      interval?: int32(name='Interval', example='1'),
      intervalUnit?: string(name='IntervalUnit', example='HOUR'),
      schedulePeriod?: string(name='SchedulePeriod', example='DAILY'),
      startTime?: string(name='StartTime', example='08:00'),
    }(name='CustomScheduleConfig'),
    dagId?: string(name='DagId', example='dag_102121211'),
    dataSourceCatalog?: string(name='DataSourceCatalog', example='mysql_catalog'),
    dataSourceId?: string(name='DataSourceId', example='12131111'),
    dataSourceSchema?: string(name='DataSourceSchema', example='erp'),
    fileId?: long(name='FileId', example='12113111'),
    hasDevNode?: boolean(name='HasDevNode'),
    name?: string(name='Name', example='测试任务1'),
    needPublish?: boolean(name='NeedPublish'),
    nodeDescription?: string(name='NodeDescription', example='xx测试'),
    nodeFrom?: string(name='NodeFrom', example='openapi'),
    nodeId?: string(name='NodeId', example='n_1011_21232132322'),
    nodeName?: string(name='NodeName', example='测试任务1'),
    nodeOutputNameList?: [ string ](name='NodeOutputNameList'),
    nodeStatus?: int32(name='NodeStatus', example='1'),
    operatorUserId?: string(name='OperatorUserId', example='30231123'),
    ownerName?: string(name='OwnerName', example='张三'),
    ownerUserId?: string(name='OwnerUserId', example='30231123'),
    paramList?: [ 
      {
        key?: string(name='Key', example='key'),
        value?: string(name='Value', example='Value'),
      }
    ](name='ParamList'),
    paused?: boolean(name='Paused'),
    priority?: int32(name='Priority', example='1'),
    projectId?: long(name='ProjectId', example='131211211'),
    published?: boolean(name='Published'),
    remark?: string(name='Remark', example='test xx'),
    rerunable?: boolean(name='Rerunable'),
    schedulePeriod?: string(name='SchedulePeriod', example='DAILY'),
    scheduleType?: int32(name='ScheduleType', example='3'),
    sparkClientInfo?: {
      sparkClientVersion?: string(name='SparkClientVersion', example='abc'),
    }(name='SparkClientInfo'),
    status?: string(name='Status', example='测试任务1'),
    taskType?: int32(name='TaskType', example='21'),
    upStreamList?: [ 
      {
        dependPeriod?: {
          periodOffset?: int32(name='PeriodOffset', example='1'),
          periodType?: string(name='PeriodType', example='CURRENT_PERIOD'),
        }(name='DependPeriod'),
        dependStrategy?: string(name='DependStrategy', example='LAST'),
        fieldList?: [ string ](name='FieldList'),
        nodeType?: string(name='NodeType', example='PHYSICAL'),
        periodDiff?: int32(name='PeriodDiff', example='1'),
        sourceNodeEnabled?: boolean(name='SourceNodeEnabled'),
        sourceNodeId?: string(name='SourceNodeId', example='n_2001'),
        sourceNodeName?: string(name='SourceNodeName', example='t_input1'),
        sourceNodeOutputName?: string(name='SourceNodeOutputName', example='t_input1'),
        sourceNodeUserName?: string(name='SourceNodeUserName', example='张三'),
        sourceTableName?: string(name='SourceTableName', example='t_input1'),
      }
    ](name='UpStreamList'),
  }(name='TaskInfo'),
}

model GetBatchTaskInfoByVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchTaskInfoByVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBatchTaskInfoByVersion  GetBatchTaskInfoByVersionRequest
  * @return GetBatchTaskInfoByVersionResponse
 */
async function getBatchTaskInfoByVersion(request: GetBatchTaskInfoByVersionRequest): GetBatchTaskInfoByVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchTaskInfoByVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchTaskUdfLineagesRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12113111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
}

model GetBatchTaskUdfLineagesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    lineageGroupList?: [ 
      {
        inputLineageList?: [ 
          {
            bizUnitId?: string(name='BizUnitId', example='103111231'),
            bizUnitName?: string(name='BizUnitName', example='xx测试'),
            columnList?: [ 
              {
                dataType?: string(name='DataType', example='varchar'),
                description?: string(name='Description', example='xx'),
                id?: string(name='Id', example='c011'),
                name?: string(name='Name', example='c011'),
                partitionKey?: boolean(name='PartitionKey'),
                primaryKey?: boolean(name='PrimaryKey'),
              }
            ](name='ColumnList'),
            description?: string(name='Description', example='test xx'),
            displayName?: string(name='DisplayName', example='t_input'),
            env?: string(name='Env', example='dev'),
            fullTable?: boolean(name='FullTable'),
            guid?: string(name='Guid', example='Guid_101121'),
            name?: string(name='Name', example='t_input'),
            ownerName?: string(name='OwnerName', example='张三'),
            ownerUserId?: string(name='OwnerUserId', example='20112101'),
            projectId?: string(name='ProjectId', example='131211211'),
            projectName?: string(name='ProjectName', example='prj_test'),
            subType?: string(name='SubType', example='dim'),
          }
        ](name='InputLineageList'),
        outputLineageList?: [ 
          {
            bizUnitId?: string(name='BizUnitId', example='103111231'),
            bizUnitName?: string(name='BizUnitName', example='xx测试'),
            columnList?: [ 
              {
                dataType?: string(name='DataType', example='varchar'),
                description?: string(name='Description', example='xx'),
                id?: string(name='Id', example='c011'),
                name?: string(name='Name', example='c011'),
                partitionKey?: boolean(name='PartitionKey'),
                primaryKey?: boolean(name='PrimaryKey'),
              }
            ](name='ColumnList'),
            description?: string(name='Description', example='test xx'),
            displayName?: string(name='DisplayName', example='t_input'),
            env?: string(name='Env', example='dev'),
            fullTable?: boolean(name='FullTable'),
            guid?: string(name='Guid', example='Guid_101121'),
            name?: string(name='Name', example='t_input'),
            ownerName?: string(name='OwnerName', example='张三'),
            ownerUserId?: string(name='OwnerUserId', example='20112101'),
            projectId?: string(name='ProjectId', example='131211211'),
            projectName?: string(name='ProjectName', example='prj_test'),
            subType?: string(name='SubType', example='dim'),
          }
        ](name='OutputLineageList'),
      }
    ](name='LineageGroupList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetBatchTaskUdfLineagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchTaskUdfLineagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBatchTaskUdfLineages  GetBatchTaskUdfLineagesRequest
  * @return GetBatchTaskUdfLineagesResponse
 */
async function getBatchTaskUdfLineages(request: GetBatchTaskUdfLineagesRequest): GetBatchTaskUdfLineagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchTaskUdfLineages', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchTaskVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12113111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
}

model GetBatchTaskVersionsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    batchTaskVersionList?: [ 
      {
        comment?: string(name='Comment', example='test'),
        gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:10:10'),
        gmtModified?: string(name='GmtModified', example='2024-10-10 10:10:10'),
        nodeId?: string(name='NodeId', example='n_10231001'),
        projectId?: long(name='ProjectId', example='10232111011'),
        published?: boolean(name='Published'),
        userId?: string(name='UserId', example='20110110'),
        userName?: string(name='UserName', example='张三'),
        version?: string(name='Version', example='1'),
      }
    ](name='BatchTaskVersionList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetBatchTaskVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchTaskVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBatchTaskVersions  GetBatchTaskVersionsRequest
  * @return GetBatchTaskVersionsResponse
 */
async function getBatchTaskVersions(request: GetBatchTaskVersionsRequest): GetBatchTaskVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchTaskVersions', 'POST', '/', 'json', false, 'json', request);
}

model GetBizEntityInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='101001201', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT', position='Query'),
}

model GetBizEntityInfoResponseBody = {
  bizEntityInfo?: {
    bizObject?: {
      approvalId?: string(name='ApprovalId', example='221323121212'),
      approvalStatus?: string(name='ApprovalStatus', example='APPROVING'),
      childBizEntityIdList?: [ long ](name='ChildBizEntityIdList'),
      description?: string(name='Description', example='test'),
      displayName?: string(name='DisplayName', example='create_object_name'),
      gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
      gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
      id?: long(name='Id', example='1011'),
      lastModifier?: string(name='LastModifier', example='30010010'),
      lastModifierName?: string(name='LastModifierName', example='张三'),
      name?: string(name='Name', example='create_object_code_name'),
      onlineStatus?: string(name='OnlineStatus', example='SUBMITTED'),
      ownerName?: string(name='OwnerName', example='张三'),
      ownerUserId?: string(name='OwnerUserId', example='30010010'),
      parentId?: long(name='ParentId', example='116306'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
      refDimTableCount?: int32(name='RefDimTableCount', example='1'),
      refSummaryTableCount?: int32(name='RefSummaryTableCount', example='1'),
      status?: string(name='Status', example='SUBMITTED'),
      type?: string(name='Type', example='NORMAL'),
    }(name='BizObject'),
    bizProcess?: {
      approvalId?: string(name='ApprovalId', example='221323121212'),
      approvalStatus?: string(name='ApprovalStatus', example='APPROVING'),
      bizEventEntityIdList?: [ long ](name='BizEventEntityIdList'),
      description?: string(name='Description', example='test'),
      displayName?: string(name='DisplayName', example='业务活动测试'),
      gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
      gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
      hasDependent?: boolean(name='HasDependent'),
      id?: long(name='Id', example='1011'),
      lastModifier?: string(name='LastModifier', example='30010010'),
      lastModifierName?: string(name='LastModifierName', example='张三'),
      name?: string(name='Name', example='create_process_code_name'),
      onlineStatus?: string(name='OnlineStatus', example='SUBMITTED'),
      ownerName?: string(name='OwnerName', example='张三'),
      ownerUserId?: string(name='OwnerUserId', example='30010010'),
      preBizProcessIdList?: [ long ](name='PreBizProcessIdList'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
      refFactTableCount?: int32(name='RefFactTableCount', example='1'),
      status?: string(name='Status', example='SUBMITTED'),
      type?: string(name='Type', example='BIZ_EVENT'),
    }(name='BizProcess'),
    bizUnitId?: long(name='BizUnitId', example='6798087749072704'),
    dataDomainId?: long(name='DataDomainId', example='20101011'),
    type?: string(name='Type', example='BIZ_OBJECT'),
  }(name='BizEntityInfo'),
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetBizEntityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBizEntityInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBizEntityInfo  GetBizEntityInfoRequest
  * @return GetBizEntityInfoResponse
 */
async function getBizEntityInfo(request: GetBizEntityInfoRequest): GetBizEntityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBizEntityInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetBizEntityInfoByVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='101001201', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT', position='Query'),
  versionId: long(name='VersionId', description='This parameter is required.', example='1', position='Query'),
}

model GetBizEntityInfoByVersionResponseBody = {
  bizEntityInfo?: {
    bizObject?: {
      approvalId?: string(name='ApprovalId', example='221323121212'),
      approvalStatus?: string(name='ApprovalStatus', example='APPROVING'),
      childBizEntityIdList?: [ long ](name='ChildBizEntityIdList'),
      description?: string(name='Description', example='test'),
      displayName?: string(name='DisplayName', example='create_object_name'),
      gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
      gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
      id?: long(name='Id', example='1011'),
      lastModifier?: string(name='LastModifier', example='30010010'),
      lastModifierName?: string(name='LastModifierName', example='张三'),
      name?: string(name='Name', example='create_object_code_name'),
      onlineStatus?: string(name='OnlineStatus', example='1'),
      ownerName?: string(name='OwnerName', example='张三'),
      ownerUserId?: string(name='OwnerUserId', example='30010010'),
      parentId?: long(name='ParentId', example='116306'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
      refDimTableCount?: int32(name='RefDimTableCount', example='1'),
      refSummaryTableCount?: int32(name='RefSummaryTableCount', example='1'),
      status?: string(name='Status', example='100'),
      type?: string(name='Type', example='NORMAL'),
    }(name='BizObject'),
    bizProcess?: {
      approvalId?: string(name='ApprovalId', example='221323121212'),
      approvalStatus?: string(name='ApprovalStatus', example='APPROVING'),
      bizEventEntityIdList?: [ long ](name='BizEventEntityIdList'),
      description?: string(name='Description', example='test'),
      displayName?: string(name='DisplayName', example='业务活动测试'),
      gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
      gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
      hasDependent?: boolean(name='HasDependent'),
      id?: long(name='Id', example='1011'),
      lastModifier?: string(name='LastModifier', example='30010010'),
      lastModifierName?: string(name='LastModifierName', example='张三'),
      name?: string(name='Name', example='create_process_code_name'),
      onlineStatus?: string(name='OnlineStatus', example='1'),
      ownerName?: string(name='OwnerName', example='张三'),
      ownerUserId?: string(name='OwnerUserId', example='30010010'),
      preBizProcessIdList?: [ long ](name='PreBizProcessIdList'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
      refFactTableCount?: int32(name='RefFactTableCount', example='1'),
      status?: string(name='Status', example='100'),
      type?: string(name='Type', example='BIZ_EVENT'),
    }(name='BizProcess'),
    bizUnitId?: long(name='BizUnitId', example='6798087749072704'),
    dataDomainId?: long(name='DataDomainId', example='20101011'),
    type?: string(name='Type', example='BIZ_OBJECT'),
  }(name='BizEntityInfo'),
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetBizEntityInfoByVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBizEntityInfoByVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBizEntityInfoByVersion  GetBizEntityInfoByVersionRequest
  * @return GetBizEntityInfoByVersionResponse
 */
async function getBizEntityInfoByVersion(request: GetBizEntityInfoByVersionRequest): GetBizEntityInfoByVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBizEntityInfoByVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetBizUnitInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='101001201', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetBizUnitInfoResponseBody = {
  bizUnitInfo?: {
    accountList?: [ 
      {
        id?: string(name='Id', example='20001201'),
      }
    ](name='AccountList'),
    bizObjectCount?: int32(name='BizObjectCount', example='1'),
    bizProcessCount?: int32(name='BizProcessCount', example='1'),
    businessLeaderList?: [ 
      {
        id?: string(name='Id', example='20001201'),
      }
    ](name='BusinessLeaderList'),
    dataDomainCount?: int32(name='DataDomainCount', example='1'),
    dataLeaderList?: [ 
      {
        id?: string(name='Id', example='20001201'),
      }
    ](name='DataLeaderList'),
    description?: string(name='Description', example='test'),
    displayName?: string(name='DisplayName', example='测试'),
    envList?: [ 
      {
        displayName?: string(name='DisplayName', example='测试数据板块001_开发'),
        envName?: string(name='EnvName', example='DEV'),
        name?: string(name='Name', example='LD_test001_dev'),
      }
    ](name='EnvList'),
    gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
    gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
    icon?: string(name='Icon', example='icon-e-commerce'),
    id?: long(name='Id', example='101001201'),
    lastModifier?: string(name='LastModifier', example='30010010'),
    lastModifierName?: string(name='LastModifierName', example='张三'),
    mode?: string(name='Mode', example='DEV_PROD'),
    name?: string(name='Name', example='test01'),
    ownerName?: string(name='OwnerName', example='张三'),
    ownerUserId?: string(name='OwnerUserId', example='30010010'),
  }(name='BizUnitInfo'),
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetBizUnitInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBizUnitInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBizUnitInfo  GetBizUnitInfoRequest
  * @return GetBizUnitInfoResponse
 */
async function getBizUnitInfo(request: GetBizUnitInfoRequest): GetBizUnitInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBizUnitInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterQueueInfoByEnvRequest {
  regionId?: string(name='RegionId', position='Host'),
  env: string(name='Env', description='This parameter is required.', example='DEV', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='7081229106458752', position='Query'),
  streamBatchMode: string(name='StreamBatchMode', description='This parameter is required.', example='BOTH', position='Query'),
}

model GetClusterQueueInfoByEnvResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      annotations?: string(name='Annotations', example='{  "creator": "new_datasource@test.aliyunid.com",  "modifier": "new_datasource@test.aliyunid.com" }'),
      clusterId?: string(name='ClusterId', example='61187014-a3ba-4cdd-8609-1f0aa3df4a3d'),
      createAt?: string(name='CreateAt', example='2024-10-31 10:29:17'),
      flinkImageRegistry?: string(name='FlinkImageRegistry', example='xxxx-registry-vpc.cn-shanghai.cr.aliyuncs.com/xxxx/flink:1.15.4-scala_2.12'),
      flinkImageRepository?: string(name='FlinkImageRepository', example='xxxx-registry-vpc.cn-shanghai.cr.aliyuncs.com'),
      flinkImageTag?: string(name='FlinkImageTag', example='1.15.4'),
      flinkVersion?: string(name='FlinkVersion', example='1.15'),
      labels?: string(name='Labels', example='cdh'),
      maxVcore?: string(name='MaxVcore', example='10'),
      modifiedAt?: string(name='ModifiedAt', example='2024-10-31 10:29:17'),
      namespace?: string(name='Namespace', example='dataphinv45prod'),
      queueName?: string(name='QueueName', example='default-queue'),
      resourceVersion?: string(name='ResourceVersion', example='1'),
      spec?: string(name='Spec', example='{\\n  \\"kind\\" : \\"kubernetes\\",\\n  \\"kubernetes\\{"namespace" : "n1730341728989z7",    "clusterName" : "a51578bdcce145"  },  "state" : "ONLINE"}'),
      vvpClusterType?: string(name='VvpClusterType', example='PREJOB'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetClusterQueueInfoByEnvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterQueueInfoByEnvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetClusterQueueInfoByEnv  GetClusterQueueInfoByEnvRequest
  * @return GetClusterQueueInfoByEnvResponse
 */
async function getClusterQueueInfoByEnv(request: GetClusterQueueInfoByEnvRequest): GetClusterQueueInfoByEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterQueueInfoByEnv', 'POST', '/', 'json', false, 'json', request);
}

model GetDataDomainInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1241844456', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetDataDomainInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  dataDomainInfo?: {
    abbreviation?: string(name='Abbreviation', example='dm_code_name'),
    bizUnitId?: long(name='BizUnitId', example='545844456'),
    description?: string(name='Description', example='test'),
    displayName?: string(name='DisplayName', example='测试'),
    gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
    gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
    id?: long(name='Id', example='1241844456'),
    lastModifier?: string(name='LastModifier', example='30010010'),
    lastModifierName?: string(name='LastModifierName', example='张三'),
    name?: string(name='Name', example='dm_code_name'),
    ownerName?: string(name='OwnerName', example='张三'),
    ownerUserId?: string(name='OwnerUserId', example='30010010'),
    parentId?: long(name='ParentId', example='10232311'),
  }(name='DataDomainInfo'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetDataDomainInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataDomainInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataDomainInfo  GetDataDomainInfoRequest
  * @return GetDataDomainInfoResponse
 */
async function getDataDomainInfo(request: GetDataDomainInfoRequest): GetDataDomainInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataDomainInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetDevObjectDependencyRequest {
  regionId?: string(name='RegionId', position='Host'),
  objectFrom: string(name='ObjectFrom', description='This parameter is required.', example='DATA_PROCESS', position='Query'),
  objectId: string(name='ObjectId', description='This parameter is required.', example='7026498387616064', position='Query'),
  objectType: string(name='ObjectType', description='This parameter is required.', example='7026498387616064', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='7021037162911616L', position='Query'),
}

model GetDevObjectDependencyResponseBody = {
  code?: string(name='Code', example='OK'),
  devObjectDependencyList?: [ 
    {
      autoParse?: boolean(name='AutoParse', example='true'),
      bizType?: string(name='BizType', example='SCRIPT'),
      bizUnitId?: string(name='BizUnitId', example='13111'),
      bizUnitName?: string(name='BizUnitName'),
      cronExpression?: string(name='CronExpression', example='0 0 0 * * ?'),
      customCronExpression?: boolean(name='CustomCronExpression', example='true'),
      dependFieldList?: [ string ](name='DependFieldList'),
      dependencyPeriod?: {
        periodOffset?: int32(name='PeriodOffset', example='1'),
        periodType?: string(name='PeriodType', example='CURRENT_PERIOD'),
      }(name='DependencyPeriod'),
      dependencyStrategy?: string(name='DependencyStrategy', example='ALL'),
      dimMidNode?: boolean(name='DimMidNode', example='true'),
      effectFieldList?: [ string ](name='EffectFieldList'),
      externalBizInfo?: string(name='ExternalBizInfo'),
      manuallyAdd?: boolean(name='ManuallyAdd', example='false'),
      nodeId?: string(name='NodeId', example='n_13211'),
      nodeName?: string(name='NodeName'),
      nodeOutputName?: string(name='NodeOutputName', example='n_xx'),
      nodeOutputTableName?: string(name='NodeOutputTableName', example='t_xx'),
      nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      outputContextParamList?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='v1'),
          description?: string(name='Description', example='xxtest'),
          key?: string(name='Key', example='v1'),
        }
      ](name='OutputContextParamList'),
      ownerList?: [ 
        {
          id?: string(name='Id', example='11123'),
          name?: string(name='Name'),
        }
      ](name='OwnerList'),
      periodDiff?: int32(name='PeriodDiff', example='1'),
      projectId?: long(name='ProjectId', example='123131'),
      projectName?: string(name='ProjectName'),
      scheduleType?: string(name='ScheduleType', example='DAILY'),
      selfDepend?: boolean(name='SelfDepend', example='true'),
      subBizType?: string(name='SubBizType', example='SHELL'),
      valid?: boolean(name='Valid', example='true'),
    }
  ](name='DevObjectDependencyList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetDevObjectDependencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDevObjectDependencyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDevObjectDependency  GetDevObjectDependencyRequest
  * @return GetDevObjectDependencyResponse
 */
async function getDevObjectDependency(request: GetDevObjectDependencyRequest): GetDevObjectDependencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevObjectDependency', 'POST', '/', 'json', false, 'json', request);
}

model GetDirectoryTreeRequest {
  regionId?: string(name='RegionId', position='Host'),
  category: string(name='Category', description='This parameter is required.', example='codeManage', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='7081229106458752', position='Query'),
}

model GetDirectoryTreeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      children?: {
        categoryType?: string(name='CategoryType', example='codeManage'),
        creator?: string(name='Creator', example='300000907'),
        creatorName?: string(name='CreatorName', example='John'),
        dataCellId?: long(name='DataCellId', example='41342'),
        dirName?: string(name='DirName', example='/'),
        gmtCreate?: string(name='GmtCreate', example='2024-11-01 18:08:17'),
        gmtModified?: string(name='GmtModified', example='2024-11-01 18:08:17'),
        id?: long(name='Id', example='3'),
        lastModifier?: string(name='LastModifier', example='300000907'),
        lastModifierName?: string(name='LastModifierName', example='John'),
        name?: string(name='Name', example='代码管理'),
        projectId?: long(name='ProjectId', example='7081229106458752'),
        stringId?: string(name='StringId', example='3'),
        type?: string(name='Type', example='codeManage'),
      }(name='Children'),
      parent?: {
        categoryType?: string(name='CategoryType', example='codeManage'),
        creator?: string(name='Creator', example='300000907'),
        creatorName?: string(name='CreatorName', example='John'),
        dataCellId?: long(name='DataCellId', example='3213'),
        dirName?: string(name='DirName', example='/'),
        gmtCreate?: string(name='GmtCreate', example='2024-11-01 18:08:17'),
        gmtModified?: string(name='GmtModified', example='2024-11-01 18:08:17'),
        id?: long(name='Id', example='3'),
        lastModifier?: string(name='LastModifier', example='300000907'),
        lastModifierName?: string(name='LastModifierName', example='John'),
        name?: string(name='Name', example='代码管理'),
        projectId?: long(name='ProjectId', example='7081229106458752'),
        stringId?: string(name='StringId', example='3'),
        type?: string(name='Type', example='codeManage'),
      }(name='Parent'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetDirectoryTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDirectoryTreeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDirectoryTree  GetDirectoryTreeRequest
  * @return GetDirectoryTreeResponse
 */
async function getDirectoryTree(request: GetDirectoryTreeRequest): GetDirectoryTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDirectoryTree', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  downStreamDepth: int32(name='DownStreamDepth', description='This parameter is required.', example='1', position='Query'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceGet: {
    instanceId: string(name='InstanceId', description='This parameter is required.', example='t_5929472_20210411_9577721'),
    nodeType: string(name='NodeType', description='This parameter is required.', example='DATA_PROCESS'),
  }(name='InstanceGet', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  runStatus?: string(name='RunStatus', example='SUCCESS', position='Query'),
}

model GetInstanceDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceRelationList?: [ 
    {
      downStreamDepth?: int32(name='DownStreamDepth', example='1'),
      extendInfo?: string(name='ExtendInfo', example='{"a":"x"}'),
      fieldInstanceList?: [ 
        {
          fieldInstanceId?: string(name='FieldInstanceId', example='t_23211'),
          runStatus?: string(name='RunStatus', example='SUCCESS'),
          selectStatus?: string(name='SelectStatus', example='OPTIONAL'),
        }
      ](name='FieldInstanceList'),
      instanceInfo?: {
        id?: string(name='Id', example='t_232411'),
        name?: string(name='Name'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }(name='InstanceInfo'),
      runStatus?: string(name='RunStatus', example='RUNNING'),
      selectStatus?: string(name='SelectStatus', example='OPTIONAL'),
      selectStatusCause?: string(name='SelectStatusCause', example='FIELD_DELETED'),
    }
  ](name='InstanceRelationList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceDownStream  GetInstanceDownStreamRequest
  * @return GetInstanceDownStreamResponse
 */
async function getInstanceDownStream(request: GetInstanceDownStreamRequest): GetInstanceDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceDownStream', 'POST', '/', 'json', true, 'form', request);
}

model GetInstanceUpDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  downStreamDepth?: int32(name='DownStreamDepth', example='1', position='Query'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceId: {
    fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
    id: string(name='Id', description='This parameter is required.', example='t_123456'),
  }(name='InstanceId', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='1001121', position='Query'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1', position='Query'),
}

model GetInstanceUpDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceDagInfo?: {
    downInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='DownInstanceList'),
    startInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='StartInstanceList'),
    upInstanceList?: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id?: string(name='Id', example='t_1234567'),
        name?: string(name='Name', example='xx测试'),
        nodeId?: string(name='NodeId', example='n_1234567'),
        nodeType?: string(name='NodeType', example='DATA_PROCESS'),
      }
    ](name='UpInstanceList'),
  }(name='InstanceDagInfo'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceUpDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceUpDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceUpDownStream  GetInstanceUpDownStreamRequest
  * @return GetInstanceUpDownStreamResponse
 */
async function getInstanceUpDownStream(request: GetInstanceUpDownStreamRequest): GetInstanceUpDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceUpDownStream', 'POST', '/', 'json', true, 'form', request);
}

model GetLatestSubmitDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  submitDetailQuery: {
    objectId: string(name='ObjectId', description='This parameter is required.', example='12345'),
    objectType: string(name='ObjectType', description='This parameter is required.', example='MAX_COMPUTE_SQL'),
  }(name='SubmitDetailQuery', description='This parameter is required.', shrink='json', position='Body'),
}

model GetLatestSubmitDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitDetailResult?: {
    id?: long(name='Id', example='1234'),
    publishStatus?: string(name='PublishStatus', example='SUCCESS'),
    releaseObject?: {
      changeType?: string(name='ChangeType', example='DELETE'),
      nodeId?: string(name='NodeId', example='n_1234'),
      objectVersion?: string(name='ObjectVersion', example='1'),
      projectId?: long(name='ProjectId', example='1234'),
      submitComment?: string(name='SubmitComment', example='提交说明'),
      submitObject?: {
        objectId?: string(name='ObjectId', example='1234'),
        objectName?: string(name='ObjectName', example='abc'),
        objectType?: string(name='ObjectType', example='MAX_COMPUTE_SQL'),
      }(name='SubmitObject'),
    }(name='ReleaseObject'),
    submitStatus?: string(name='SubmitStatus', example='TO_BE_PUBLISHED'),
    tag?: string(name='Tag', example='tag'),
  }(name='SubmitDetailResult'),
  success?: boolean(name='Success'),
}

model GetLatestSubmitDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLatestSubmitDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLatestSubmitDetail  GetLatestSubmitDetailRequest
  * @return GetLatestSubmitDetailResponse
 */
async function getLatestSubmitDetail(request: GetLatestSubmitDetailRequest): GetLatestSubmitDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLatestSubmitDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetMyRolesRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetMyRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  roleList?: [ 
    {
      description?: string(name='Description'),
      id?: long(name='Id', example='300047957'),
      name?: string(name='Name', example='dataphinAdmin'),
    }
  ](name='RoleList'),
  success?: boolean(name='Success', example='true'),
}

model GetMyRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMyRoles  GetMyRolesRequest
  * @return GetMyRolesResponse
 */
async function getMyRoles(request: GetMyRolesRequest): GetMyRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMyRoles', 'POST', '/', 'json', false, 'json', request);
}

model GetMyTenantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  featureCodeList?: [ string ](name='FeatureCodeList', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetMyTenantsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  tenantList?: [ 
    {
      deleteTime?: long(name='DeleteTime', example='1717343597000'),
      deleted?: boolean(name='Deleted', example='false'),
      description?: string(name='Description'),
      id?: long(name='Id', example='132311'),
      name?: string(name='Name'),
      opsTenant?: boolean(name='OpsTenant', example='false'),
      ownerId?: string(name='OwnerId', example='21323231'),
      resourceLimited?: boolean(name='ResourceLimited', example='false'),
      tenantTypeList?: [ string ](name='TenantTypeList'),
      titleType?: string(name='TitleType', example='icon'),
      visible?: boolean(name='Visible', example='true'),
    }
  ](name='TenantList'),
}

model GetMyTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyTenantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMyTenants  GetMyTenantsRequest
  * @return GetMyTenantsResponse
 */
async function getMyTenants(request: GetMyTenantsRequest): GetMyTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMyTenants', 'POST', '/', 'json', true, 'form', request);
}

model GetNodeUpDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  downStreamDepth?: int32(name='DownStreamDepth', example='1', position='Query'),
  env?: string(name='Env', example='DEV', position='Query'),
  nodeId: {
    fieldIdList?: string(name='FieldIdList', example='12'),
    id: string(name='Id', description='This parameter is required.', example='11313'),
  }(name='NodeId', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId?: long(name='ProjectId', example='113123', position='Query'),
  upStreamDepth?: int32(name='UpStreamDepth', example='1', position='Query'),
}

model GetNodeUpDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeDagInfo?: {
    downStreamNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='DownStreamNodeList'),
    startNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='StartNodeList'),
    upStreamNodeList?: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList'),
        id?: string(name='Id', example='n_123456'),
        name?: string(name='Name', example='xx测试'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='UpStreamNodeList'),
  }(name='NodeDagInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeUpDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeUpDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNodeUpDownStream  GetNodeUpDownStreamRequest
  * @return GetNodeUpDownStreamResponse
 */
async function getNodeUpDownStream(request: GetNodeUpDownStreamRequest): GetNodeUpDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodeUpDownStream', 'POST', '/', 'json', true, 'form', request);
}

model GetOperationSubmitStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='1324444131', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetOperationSubmitStatusResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  operationSubmitJob?: {
    externalBizId?: string(name='ExternalBizId', example='f_122_232342'),
    jobId?: string(name='JobId', example='123456'),
    operation?: string(name='Operation', example='SUPPLY_DATA'),
    operationStatus?: string(name='OperationStatus', example='SUCCESS'),
    operator?: string(name='Operator', example='132344'),
    progress?: string(name='Progress', example='80'),
  }(name='OperationSubmitJob'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetOperationSubmitStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOperationSubmitStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOperationSubmitStatus  GetOperationSubmitStatusRequest
  * @return GetOperationSubmitStatusResponse
 */
async function getOperationSubmitStatus(request: GetOperationSubmitStatusRequest): GetOperationSubmitStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOperationSubmitStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='t_23231', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='2323131', position='Query'),
}

model GetPhysicalInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instance?: {
    bizDate?: string(name='BizDate', example='2023-06-25'),
    dueTime?: string(name='DueTime', example='2023-06-27 00:30:00'),
    duration?: string(name='Duration', example='3600s'),
    endExecuteTime?: long(name='EndExecuteTime', example='2023-06-27 02:30:00'),
    extendInfo?: string(name='ExtendInfo', example='xx'),
    id?: string(name='Id', example='t_23231'),
    index?: int32(name='Index', example='1'),
    nodeInfo?: {
      bizUnitName?: string(name='BizUnitName', example='xx'),
      createTime?: string(name='CreateTime', example='2023-02-02 23:53:17'),
      creator?: {
        id?: string(name='Id', example='2323111'),
        name?: string(name='Name', example='zhangsan'),
      }(name='Creator'),
      description?: string(name='Description'),
      dryRun?: boolean(name='DryRun', example='false'),
      from?: string(name='From', example='DATA_PROCESS'),
      hasDev?: boolean(name='HasDev', example='true'),
      hasProd?: boolean(name='HasProd', example='true'),
      id?: string(name='Id', example='n_3232312'),
      lastModifiedTime?: string(name='LastModifiedTime', example='2024-02-02 23:53:17'),
      modifier?: {
        id?: string(name='Id', example='2323111'),
        name?: string(name='Name', example='zhangsan'),
      }(name='Modifier'),
      name?: string(name='Name'),
      ownerList?: [ 
        {
          id?: string(name='Id', example='2323111'),
          name?: string(name='Name', example='zhangsan'),
        }
      ](name='OwnerList'),
      priorityList?: [ string ](name='PriorityList'),
      resourceGroupList?: [ string ](name='ResourceGroupList'),
      schedulePaused?: boolean(name='SchedulePaused', example='false'),
      schedulePeriodList?: [ string ](name='SchedulePeriodList'),
      subDetailType?: string(name='SubDetailType', example='SHELL'),
      type?: string(name='Type', example='DATA_PROCESS'),
    }(name='NodeInfo'),
    startExecuteTime?: long(name='StartExecuteTime', example='2023-06-27 01:30:00'),
    statusList?: [ string ](name='StatusList'),
  }(name='Instance'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalInstance  GetPhysicalInstanceRequest
  * @return GetPhysicalInstanceResponse
 */
async function getPhysicalInstance(request: GetPhysicalInstanceRequest): GetPhysicalInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalInstanceLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='t_5929472_20210411_9577721', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='123131', position='Query'),
}

model GetPhysicalInstanceLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  taskrunLogList?: [ 
    {
      duration?: string(name='Duration', example='60s'),
      endTime?: string(name='EndTime', example='2024-05-30 16:48:13'),
      logContent?: string(name='LogContent', example='xx'),
      startTime?: string(name='StartTime', example='2024-05-30 16:47:13'),
      status?: string(name='Status', example='SUCCESS'),
      taskrunId?: string(name='TaskrunId', example='tr_23231'),
    }
  ](name='TaskrunLogList'),
}

model GetPhysicalInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalInstanceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalInstanceLog  GetPhysicalInstanceLogRequest
  * @return GetPhysicalInstanceLogResponse
 */
async function getPhysicalInstanceLog(request: GetPhysicalInstanceLogRequest): GetPhysicalInstanceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalInstanceLog', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='n_232132', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetPhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfo?: {
    createTime?: long(name='CreateTime', example='1717343597000'),
    creator?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Creator'),
    cronExpression?: string(name='CronExpression', example='0 0 10 * * *'),
    dataSourceId?: long(name='DataSourceId', example='123456789'),
    dataSourceSchema?: string(name='DataSourceSchema', example='null'),
    description?: string(name='Description'),
    from?: string(name='From', example='DATA_PROCESS'),
    id?: string(name='Id', example='n_232132'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1717343597000'),
    modifier?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Modifier'),
    name?: string(name='Name'),
    operatorType?: string(name='OperatorType', example='SHELL'),
    outputNameList?: [ string ](name='OutputNameList'),
    owner?: {
      id?: string(name='Id', example='101312'),
      name?: string(name='Name'),
    }(name='Owner'),
    priority?: string(name='Priority', example='MIDDLE'),
    projectInfo?: {
      id?: string(name='Id', example='102132'),
      name?: string(name='Name'),
    }(name='ProjectInfo'),
    scheduleType?: string(name='ScheduleType', example='DAILY'),
    status?: string(name='Status', example='SUCCESS'),
    triggerConfig?: string(name='TriggerConfig', example='{"expression":"any_success"}'),
  }(name='NodeInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNode  GetPhysicalNodeRequest
  * @return GetPhysicalNodeResponse
 */
async function getPhysicalNode(request: GetPhysicalNodeRequest): GetPhysicalNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNode', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeByOutputNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  outputName: string(name='OutputName', description='This parameter is required.', example='t_test', position='Query'),
}

model GetPhysicalNodeByOutputNameResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfo?: {
    createTime?: long(name='CreateTime', example='1717343597000'),
    creator?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Creator'),
    description?: string(name='Description'),
    from?: string(name='From', example='DATA_PROCESS'),
    id?: string(name='Id', example='n_2321'),
    lastModifiedTime?: long(name='LastModifiedTime', example='1717343597000'),
    modifier?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Modifier'),
    name?: string(name='Name'),
    operatorType?: string(name='OperatorType', example='SHELL'),
    owner?: {
      id?: string(name='Id', example='1311131'),
      name?: string(name='Name'),
    }(name='Owner'),
    priority?: string(name='Priority', example='MIDDLE'),
    projectInfo?: {
      id?: string(name='Id', example='1324211'),
      name?: string(name='Name'),
    }(name='ProjectInfo'),
    scheduleType?: string(name='ScheduleType', example='DAILY'),
    status?: string(name='Status', example='SUCCESS'),
    triggerConfig?: string(name='TriggerConfig', example='{"expression":"any_success"}'),
  }(name='NodeInfo'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeByOutputNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeByOutputNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNodeByOutputName  GetPhysicalNodeByOutputNameRequest
  * @return GetPhysicalNodeByOutputNameResponse
 */
async function getPhysicalNodeByOutputName(request: GetPhysicalNodeByOutputNameRequest): GetPhysicalNodeByOutputNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNodeByOutputName', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='n_232411', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetPhysicalNodeContentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    codeContent?: string(name='CodeContent', example='select 1;'),
    nodeId?: string(name='NodeId', example='n_232411'),
    nodeName?: string(name='NodeName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNodeContent  GetPhysicalNodeContentRequest
  * @return GetPhysicalNodeContentResponse
 */
async function getPhysicalNodeContent(request: GetPhysicalNodeContentRequest): GetPhysicalNodeContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNodeContent', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalNodeOperationLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='n_231131', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetPhysicalNodeOperationLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  operationLogList?: [ 
    {
      context?: string(name='Context', example='xx'),
      operationTime?: string(name='OperationTime', example='2024-05-30 16:47:13'),
      operationType?: string(name='OperationType', example='PAUSE_TASK'),
      operator?: string(name='Operator', example='132222'),
      operatorName?: string(name='OperatorName'),
    }
  ](name='OperationLogList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalNodeOperationLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalNodeOperationLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalNodeOperationLog  GetPhysicalNodeOperationLogRequest
  * @return GetPhysicalNodeOperationLogResponse
 */
async function getPhysicalNodeOperationLog(request: GetPhysicalNodeOperationLogRequest): GetPhysicalNodeOperationLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalNodeOperationLog', 'POST', '/', 'json', false, 'json', request);
}

model GetProjectProduceUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131311111321', position='Query'),
}

model GetProjectProduceUserResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  user?: {
    id?: string(name='Id', example='123131'),
  }(name='User'),
}

model GetProjectProduceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectProduceUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProjectProduceUser  GetProjectProduceUserRequest
  * @return GetProjectProduceUserResponse
 */
async function getProjectProduceUser(request: GetProjectProduceUserRequest): GetProjectProduceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectProduceUser', 'POST', '/', 'json', false, 'json', request);
}

model GetQueueEngineVersionByEnvRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='61187014-a3ba-4cdd-8609-1f0aa3df4a3d', position='Query'),
  env: string(name='Env', description='This parameter is required.', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='7081229106458752', position='Query'),
  queueName: string(name='QueueName', description='This parameter is required.', example='default-queue', position='Query'),
  streamBatchMode: string(name='StreamBatchMode', description='This parameter is required.', example='BOTH', position='Query'),
}

model GetQueueEngineVersionByEnvResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetQueueEngineVersionByEnvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueueEngineVersionByEnvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQueueEngineVersionByEnv  GetQueueEngineVersionByEnvRequest
  * @return GetQueueEngineVersionByEnvResponse
 */
async function getQueueEngineVersionByEnv(request: GetQueueEngineVersionByEnvRequest): GetQueueEngineVersionByEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQueueEngineVersionByEnv', 'POST', '/', 'json', false, 'json', request);
}

model GetSparkLocalClientInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  envEnum: string(name='EnvEnum', description='This parameter is required.', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: string(name='ProjectId', description='This parameter is required.', position='Query'),
}

model GetSparkLocalClientInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      clientFileResourceId?: string(name='ClientFileResourceId', example='XXXX-XXXX-XXXX-XXXX'),
      clientFileResourceName?: string(name='ClientFileResourceName', example='spark-cleint.zip'),
      clientName?: string(name='ClientName', example='spark-clinet'),
      editable?: boolean(name='Editable', example='true/false'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model GetSparkLocalClientInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSparkLocalClientInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSparkLocalClientInfo  GetSparkLocalClientInfoRequest
  * @return GetSparkLocalClientInfoResponse
 */
async function getSparkLocalClientInfo(request: GetSparkLocalClientInfoRequest): GetSparkLocalClientInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSparkLocalClientInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetSupplementDagrunRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  supplementId: string(name='SupplementId', description='This parameter is required.', example='f_8241792_20201202_2099680', position='Query'),
}

model GetSupplementDagrunResponseBody = {
  code?: string(name='Code', example='OK'),
  dagrunList?: [ 
    {
      bizDate?: string(name='BizDate', example='2024-04-01'),
      duration?: string(name='Duration', example='60s'),
      endExecuteTime?: long(name='EndExecuteTime', example='1717081789000'),
      id?: string(name='Id', description='Dagrun ID', example='dr_2242792_14542'),
      startExecuteTime?: long(name='StartExecuteTime', example='1717081729000'),
      status?: string(name='Status', example='RUNNING'),
      supplementId?: string(name='SupplementId', example='f_8241792_20201202_2099680'),
    }
  ](name='DagrunList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetSupplementDagrunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSupplementDagrunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSupplementDagrun  GetSupplementDagrunRequest
  * @return GetSupplementDagrunResponse
 */
async function getSupplementDagrun(request: GetSupplementDagrunRequest): GetSupplementDagrunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSupplementDagrun', 'POST', '/', 'json', false, 'json', request);
}

model GetSupplementDagrunInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagrunId: string(name='DagrunId', description='Dagrun ID

This parameter is required.', example='dr_2242792_14542', position='Query'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GetSupplementDagrunInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceList?: [ 
    {
      bizDate?: long(name='BizDate', example='2024-04-01'),
      dueTime?: long(name='DueTime', example='2024-04-02'),
      duration?: string(name='Duration', example='60'),
      endExecuteTime?: long(name='EndExecuteTime', example='2024-04-12 00:25:02'),
      extendInfo?: string(name='ExtendInfo', example='{"a":"b"}'),
      id?: string(name='Id', example='t_239496_20210411_246982077481'),
      index?: int32(name='Index', example='1'),
      nodeInfo?: {
        bizUnitName?: string(name='BizUnitName', example='xx测试'),
        createTime?: string(name='CreateTime', example='2024-01-30 10:08:49'),
        creator?: {
          id?: string(name='Id', example='1001012'),
          name?: string(name='Name', example='xx测试'),
        }(name='Creator'),
        description?: string(name='Description', example='xx测试'),
        dryRun?: boolean(name='DryRun', example='true'),
        from?: string(name='From', example='DATA_PROCESS'),
        hasDev?: boolean(name='HasDev', example='true'),
        hasProd?: boolean(name='HasProd', example='true'),
        id?: string(name='Id', example='n_239496'),
        lastModifiedTime?: string(name='LastModifiedTime', example='2024-01-30 10:08:49'),
        modifier?: {
          id?: string(name='Id', example='1001012'),
          name?: string(name='Name', example='xx测试'),
        }(name='Modifier'),
        name?: string(name='Name', example='xx测试'),
        ownerList?: [ 
          {
            id?: string(name='Id', example='1001012'),
            name?: string(name='Name', example='xx测试'),
          }
        ](name='OwnerList'),
        priorityList?: [ string ](name='PriorityList'),
        resourceGroupList?: [ string ](name='ResourceGroupList'),
        schedulePaused?: boolean(name='SchedulePaused', example='true'),
        schedulePeriodList?: [ string ](name='SchedulePeriodList'),
        subDetailType?: string(name='SubDetailType', example='SHELL'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }(name='NodeInfo'),
      startExecuteTime?: long(name='StartExecuteTime', example='2024-04-12 00:00:00'),
      statusList?: [ string ](name='StatusList'),
      type?: string(name='Type', example='SUPPLEMENT'),
    }
  ](name='InstanceList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GetSupplementDagrunInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSupplementDagrunInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSupplementDagrunInstance  GetSupplementDagrunInstanceRequest
  * @return GetSupplementDagrunInstanceResponse
 */
async function getSupplementDagrunInstance(request: GetSupplementDagrunInstanceRequest): GetSupplementDagrunInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSupplementDagrunInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetUserBySourceIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  sourceId: string(name='SourceId', description='This parameter is required.', example='323131', position='Query'),
}

model GetUserBySourceIdResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  user?: {
    displayName?: string(name='DisplayName'),
    id?: string(name='Id', example='23231231'),
  }(name='User'),
}

model GetUserBySourceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserBySourceIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserBySourceId  GetUserBySourceIdRequest
  * @return GetUserBySourceIdResponse
 */
async function getUserBySourceId(request: GetUserBySourceIdRequest): GetUserBySourceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserBySourceId', 'POST', '/', 'json', false, 'json', request);
}

model GetUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='1313213', position='Query'),
}

model GetUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userGroupInfo?: {
    active?: boolean(name='Active', example='true'),
    adminList?: [ 
      {
        accountName?: string(name='AccountName', example='xx'),
        displayName?: string(name='DisplayName'),
        id?: string(name='Id', example='131313'),
      }
    ](name='AdminList'),
    description?: string(name='Description', example='xx'),
    id?: string(name='Id', example='1313213'),
    myRole?: string(name='MyRole', example='xx'),
    name?: string(name='Name'),
  }(name='UserGroupInfo'),
}

model GetUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserGroup  GetUserGroupRequest
  * @return GetUserGroupResponse
 */
async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userIdList: [ string ](name='UserIdList', description='This parameter is required.', shrink='json', position='Body'),
}

model GetUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
  userList?: [ 
    {
      accountName?: string(name='AccountName', example='123@xx.com'),
      dingNumber?: string(name='DingNumber', example='123@dingding'),
      displayName?: string(name='DisplayName'),
      displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus'),
      enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
      feiShuRobot?: string(name='FeiShuRobot', example='xx'),
      gmtCreate?: long(name='GmtCreate', example='1717343597000'),
      gmtModified?: long(name='GmtModified', example='1717343597000'),
      id?: string(name='Id', example='1233121'),
      mail?: string(name='Mail', example='123@xx.com'),
      mobilePhone?: string(name='MobilePhone', example='1388888888'),
      name?: string(name='Name'),
      nickName?: string(name='NickName'),
      parentId?: string(name='ParentId', example='231231'),
      realName?: string(name='RealName'),
      sourceId?: string(name='SourceId', example='123@xx.com'),
      sourceType?: string(name='SourceType', example='ALIYUN'),
      weChatRobot?: string(name='WeChatRobot', example='xx'),
      whiteIp?: string(name='WhiteIp', example='*'),
    }
  ](name='UserList'),
}

model GetUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUsers  GetUsersRequest
  * @return GetUsersResponse
 */
async function getUsers(request: GetUsersRequest): GetUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUsers', 'POST', '/', 'json', true, 'form', request);
}

model GrantResourcePermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  grantCommand: {
    effectiveEnd: string(name='EffectiveEnd', description='This parameter is required.', example='1717343597000'),
    operateList: [ string ](name='OperateList', description='This parameter is required.'),
    reason?: string(name='Reason', example='xx'),
    resourceList: [ 
      {
        resourceId?: string(name='ResourceId', example='hadoop.300000806.data_distill.behavior_gameinfor_01'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userIdList: [ string ](name='UserIdList', description='This parameter is required.'),
  }(name='GrantCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model GrantResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model GrantResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantResourcePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantResourcePermission  GrantResourcePermissionRequest
  * @return GrantResourcePermissionResponse
 */
async function grantResourcePermission(request: GrantResourcePermissionRequest): GrantResourcePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantResourcePermission', 'POST', '/', 'json', true, 'form', request);
}

model ListAddableRolesRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAddableRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  roleList?: [ 
    {
      code?: string(name='Code', example='SECURITY_ADMIN'),
      name?: string(name='Name'),
    }
  ](name='RoleList'),
  success?: boolean(name='Success', example='true'),
}

model ListAddableRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddableRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAddableRoles  ListAddableRolesRequest
  * @return ListAddableRolesResponse
 */
async function listAddableRoles(request: ListAddableRolesRequest): ListAddableRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddableRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListAddableUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    searchText?: string(name='SearchText', example='xx'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAddableUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='66'),
    userList?: [ 
      {
        accountName?: string(name='AccountName', example='123@xx.com'),
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        displayName?: string(name='DisplayName', example='xx'),
        displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus', example='xx'),
        enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
        feiShuRobot?: string(name='FeiShuRobot', example='xx'),
        gmtCreate?: long(name='GmtCreate', example='1717343597000'),
        gmtModified?: long(name='GmtModified', example='1717343597000'),
        id?: string(name='Id', example='123231'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        name?: string(name='Name', example='xx'),
        nickName?: string(name='NickName', example='xx'),
        parentId?: string(name='ParentId', example='231313'),
        realName?: string(name='RealName', example='xx'),
        sourceId?: string(name='SourceId', example='123@xx.com'),
        sourceType?: string(name='SourceType', example='aliyun'),
        weChatRobot?: string(name='WeChatRobot', example='xx'),
        whiteIp?: string(name='WhiteIp', example='*'),
      }
    ](name='UserList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListAddableUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddableUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAddableUsers  ListAddableUsersRequest
  * @return ListAddableUsersResponse
 */
async function listAddableUsers(request: ListAddableUsersRequest): ListAddableUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddableUsers', 'POST', '/', 'json', true, 'form', request);
}

model ListAlertEventsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    alertEndTime: string(name='AlertEndTime', description='This parameter is required.', example='2024-11-27 13:47:00'),
    alertObjectTypeList?: [ string ](name='AlertObjectTypeList'),
    alertReasonList?: [ string ](name='AlertReasonList'),
    alertStartTime: string(name='AlertStartTime', description='This parameter is required.', example='2024-11-16 00:00:00'),
    bizNameList?: [ string ](name='BizNameList'),
    keyword?: string(name='Keyword', example='test'),
    monitoredItemIdList?: [ string ](name='MonitoredItemIdList'),
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    projectNameList?: [ string ](name='ProjectNameList'),
    sourceSystem: string(name='SourceSystem', description='This parameter is required.', example='ALL'),
    statusList?: [ string ](name='StatusList'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAlertEventsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  listResult?: {
    data?: [ 
      {
        alertFrequency?: string(name='AlertFrequency', example='ONCE'),
        alertObject?: {
          name?: string(name='Name', example='test'),
          sourceSystemType?: string(name='SourceSystemType', example='VDM_BATCH'),
          type?: string(name='Type', example='STREAM_TASK'),
        }(name='AlertObject'),
        alertReason?: {
          alertReasonParamList?: [ 
            {
              key?: string(name='Key', example='biz_date'),
              value?: string(name='Value', example='2024-11-24 00:00:00'),
            }
          ](name='AlertReasonParamList'),
          bizDate?: string(name='BizDate', example='2024-11-25 10:02:47'),
          type?: string(name='Type', example='VDM_BATCH_FINISH'),
          uniqueKey?: string(name='UniqueKey', example='t_6340134343289405440_20241124_639873707610'),
        }(name='AlertReason'),
        alertReceiverList?: [ 
          {
            alertChannelTypeList?: [ string ](name='AlertChannelTypeList'),
            customAlertChannelIdList?: [ string ](name='CustomAlertChannelIdList'),
            onCallTableName?: string(name='OnCallTableName', example='test'),
            type?: string(name='Type', example='OWNER'),
            userList?: [ 
              {
                name?: string(name='Name', example='ADMIN'),
              }
            ](name='UserList'),
          }
        ](name='AlertReceiverList'),
        belongProject?: {
          bizName?: string(name='BizName', example='biz_1'),
          projectName?: string(name='ProjectName', example='project_1'),
        }(name='BelongProject'),
        doNotDisturbEndTime?: string(name='DoNotDisturbEndTime', example='2024-11-25 00:00:00'),
        firstAlertTime?: string(name='FirstAlertTime', example='2024-11-25 10:02:47'),
        id?: string(name='Id', example='12345'),
        latestAlertTime?: string(name='LatestAlertTime', example='2024-11-25 10:02:47'),
        status?: string(name='Status', example='FINISH'),
        totalAlertTimes?: long(name='TotalAlertTimes', example='1'),
        urlConfig?: {
          alertConfigUrl?: string(name='AlertConfigUrl', example='https://dataphin.com/ops/test3'),
          logUrl?: string(name='LogUrl', example='https://dataphin.com/ops/test2'),
          objectUrl?: string(name='ObjectUrl', example='https://dataphin.com/ops/test1'),
        }(name='UrlConfig'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='ListResult'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='True'),
}

model ListAlertEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlertEvents  ListAlertEventsRequest
  * @return ListAlertEventsResponse
 */
async function listAlertEvents(request: ListAlertEventsRequest): ListAlertEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlertEvents', 'POST', '/', 'json', true, 'form', request);
}

model ListAlertNotificationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery?: {
    alertReasonList?: [ string ](name='AlertReasonList'),
    channelTypeList?: [ string ](name='ChannelTypeList'),
    customChannelIdList?: [ string ](name='CustomChannelIdList'),
    keyword?: string(name='Keyword', example='test'),
    monitoredItemIdList?: [ string ](name='MonitoredItemIdList'),
    notifyEndTime: string(name='NotifyEndTime', description='This parameter is required.', example='2024-11-27 13:47:00'),
    notifyStartTime: string(name='NotifyStartTime', description='This parameter is required.', example='2024-11-16 00:00:00'),
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    sourceSystem: string(name='SourceSystem', description='This parameter is required.', example='ALL'),
    statusList?: [ string ](name='StatusList'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='ListQuery', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAlertNotificationsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  listResult?: {
    data?: [ 
      {
        alertEventId?: string(name='AlertEventId', example='12345'),
        alertObject?: {
          name?: string(name='Name', example='test'),
          sourceSystemType?: string(name='SourceSystemType', example='VDM_BATCH'),
          type?: string(name='Type', example='VDM_BATCH_SHELL'),
        }(name='AlertObject'),
        alertReason?: {
          alertReasonParamList?: [ 
            {
              key?: string(name='Key', example='biz_date'),
              value?: string(name='Value', example='2024-11-24 00:00:00'),
            }
          ](name='AlertReasonParamList'),
          bizDate?: string(name='BizDate', example='20241125'),
          type?: string(name='Type', example='VDM_BATCH_FINISH'),
          uniqueKey?: string(name='UniqueKey', example='123456'),
        }(name='AlertReason'),
        alertReceiver?: {
          alertChannelType?: string(name='AlertChannelType', example='SMS'),
          customAlertChannelId?: string(name='CustomAlertChannelId', example='123456'),
          onCallTableId?: string(name='OnCallTableId', example='12345'),
          onCallTableName?: string(name='OnCallTableName', example='test'),
          type?: string(name='Type', example='OWNER'),
          user?: {
            name?: string(name='Name', example='ADMIN'),
          }(name='User'),
        }(name='AlertReceiver'),
        alertSend?: {
          failReason?: string(name='FailReason'),
          sendContent?: string(name='SendContent', example='test'),
          sendTime?: string(name='SendTime', example='2024-11-25 10:02:47'),
          status?: string(name='Status', example='SUCCESS'),
        }(name='AlertSend'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='ListResult'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='True'),
}

model ListAlertNotificationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertNotificationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlertNotifications  ListAlertNotificationsRequest
  * @return ListAlertNotificationsResponse
 */
async function listAlertNotifications(request: ListAlertNotificationsRequest): ListAlertNotificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlertNotifications', 'POST', '/', 'json', true, 'form', request);
}

model ListAuthorizedDataServiceApiDetailsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    appKey: long(name='AppKey', description='AppKey

This parameter is required.', example='200000000'),
    page: int32(name='Page', description='This parameter is required.', example='1', minimum=1),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=100),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListAuthorizedDataServiceApiDetailsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='非法入参'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  result?: {
    data?: [ 
      {
        apiId?: long(name='ApiId', description='API_ID', example='12345'),
        apiName?: string(name='ApiName', example='GetData'),
        appId?: long(name='AppId', example='12345'),
        authType?: string(name='AuthType', example='使用权限'),
        authorizedDevReturnParameters?: [ 
          {
            exampleValue?: string(name='ExampleValue', example='example1'),
            isAuthorized?: int32(name='IsAuthorized', example='1'),
            parameterDataType?: int32(name='ParameterDataType', example='0'),
            parameterDescription?: string(name='ParameterDescription', example='description1'),
            parameterName?: string(name='ParameterName', example='param1'),
          }
        ](name='AuthorizedDevReturnParameters'),
        authorizedProdReturnParameters?: [ 
          {
            exampleValue?: string(name='ExampleValue', example='example1'),
            isAuthorized?: int32(name='IsAuthorized', example='1'),
            parameterDataType?: int32(name='ParameterDataType', example='0'),
            parameterDescription?: string(name='ParameterDescription', example='description1'),
            parameterName?: string(name='ParameterName', example='param1'),
          }
        ](name='AuthorizedProdReturnParameters'),
        description?: string(name='Description', example='Description1'),
        devAuthPeriod?: string(name='DevAuthPeriod', example='2035-12-31'),
        prodAuthPeriod?: string(name='ProdAuthPeriod', example='2035-12-31'),
        projectId?: long(name='ProjectId', example='10000'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ListAuthorizedDataServiceApiDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedDataServiceApiDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedDataServiceApiDetails  ListAuthorizedDataServiceApiDetailsRequest
  * @return ListAuthorizedDataServiceApiDetailsResponse
 */
async function listAuthorizedDataServiceApiDetails(request: ListAuthorizedDataServiceApiDetailsRequest): ListAuthorizedDataServiceApiDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedDataServiceApiDetails', 'POST', '/', 'json', true, 'form', request);
}

model ListBizEntitiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    filterCriteria?: {
      bizUnitIdList?: [ long ](name='BizUnitIdList'),
      bizUnitNameList?: [ string ](name='BizUnitNameList'),
      dataDomainIdList?: [ long ](name='DataDomainIdList'),
      dataDomainNameList?: [ string ](name='DataDomainNameList'),
      hasTableRef?: boolean(name='HasTableRef'),
      ownerUserIdList?: [ string ](name='OwnerUserIdList'),
      statusList?: [ string ](name='StatusList'),
      subTypeList?: [ string ](name='SubTypeList'),
    }(name='FilterCriteria'),
    keyword?: string(name='Keyword', example='object_'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListBizEntitiesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    bizEntityList?: [ 
      {
        belongToBizEntityIdList?: [ long ](name='BelongToBizEntityIdList'),
        bizUnitId?: long(name='BizUnitId', example='6798087749072704'),
        childBizEntityIdList?: [ long ](name='ChildBizEntityIdList'),
        dataDomainId?: long(name='DataDomainId', example='20101011'),
        description?: string(name='Description', example='test'),
        displayName?: string(name='DisplayName', example='业务活动测试'),
        gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
        gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
        hasChildBizEntity?: boolean(name='HasChildBizEntity'),
        id?: long(name='Id', example='12121111'),
        lastModifier?: string(name='LastModifier', example='30010010'),
        lastModifierName?: string(name='LastModifierName', example='张三'),
        levelSubBizObject?: boolean(name='LevelSubBizObject'),
        name?: string(name='Name', example='create_process_code_name'),
        onlineStatus?: string(name='OnlineStatus', example='SUBMITTED'),
        ownerName?: string(name='OwnerName', example='张三'),
        ownerUserId?: string(name='OwnerUserId', example='30010010'),
        refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
        refTableCount?: int32(name='RefTableCount', example='1'),
        status?: string(name='Status', example='SUBMITTED'),
        subType?: string(name='SubType', example='NORMAL'),
        suffixBizEntityIdList?: [ long ](name='SuffixBizEntityIdList'),
        type?: string(name='Type', example='BIZ_OBJECT'),
      }
    ](name='BizEntityList'),
    totalCount?: int32(name='TotalCount', example='66'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListBizEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBizEntitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBizEntities  ListBizEntitiesRequest
  * @return ListBizEntitiesResponse
 */
async function listBizEntities(request: ListBizEntitiesRequest): ListBizEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBizEntities', 'POST', '/', 'json', true, 'form', request);
}

model ListBizUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListBizUnitsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizUnitList?: [ 
      {
        accountList?: [ 
          {
            id?: string(name='Id', example='20001201'),
          }
        ](name='AccountList'),
        description?: string(name='Description', example='test'),
        displayName?: string(name='DisplayName', example='测试'),
        env?: string(name='Env', example='DEV'),
        gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
        gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
        icon?: string(name='Icon', example='icon-e-commerce'),
        id?: long(name='Id', example='101001201'),
        lastModifier?: string(name='LastModifier', example='30010010'),
        lastModifierName?: string(name='LastModifierName', example='张三'),
        mode?: string(name='Mode', example='DEV_PROD'),
        name?: string(name='Name', example='test01'),
        ownerName?: string(name='OwnerName', example='张三'),
        ownerUserId?: string(name='OwnerUserId', example='30010010'),
      }
    ](name='BizUnitList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListBizUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBizUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBizUnits  ListBizUnitsRequest
  * @return ListBizUnitsResponse
 */
async function listBizUnits(request: ListBizUnitsRequest): ListBizUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBizUnits', 'POST', '/', 'json', false, 'json', request);
}

model ListDataDomainsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    bizUnitIdList?: [ long ](name='BizUnitIdList'),
    keyword?: string(name='Keyword', example='test'),
    parentIdList?: [ long ](name='ParentIdList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListDataDomainsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    dataDomainList?: [ 
      {
        abbreviation?: string(name='Abbreviation', example='dm_code_name'),
        bizUnitId?: long(name='BizUnitId', example='545844456'),
        description?: string(name='Description', example='test'),
        displayName?: string(name='DisplayName', example='测试'),
        gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
        gmtModified?: string(name='GmtModified', example='2024-10-10 10:00:00'),
        id?: long(name='Id', example='1241844456'),
        lastModifier?: string(name='LastModifier', example='30010010'),
        lastModifierName?: string(name='LastModifierName', example='张三'),
        name?: string(name='Name', example='dm_code_name'),
        ownerName?: string(name='OwnerName', example='张三'),
        ownerUserId?: string(name='OwnerUserId', example='30010010'),
        parentId?: long(name='ParentId', example='10232311'),
      }
    ](name='DataDomainList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListDataDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataDomains  ListDataDomainsRequest
  * @return ListDataDomainsResponse
 */
async function listDataDomains(request: ListDataDomainsRequest): ListDataDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataDomains', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceWithConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    name?: string(name='Name', example='vcns-test'),
    ownerList?: [ string ](name='OwnerList'),
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    scopeList?: [ string ](name='ScopeList'),
    tag?: string(name='Tag'),
    typeList?: [ string ](name='TypeList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListDataSourceWithConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    dataSourceList?: [ 
      {
        devDataSourceInfo?: {
          configItemList?: [ 
            {
              key?: string(name='Key', example='param1'),
              value?: string(name='Value', example='value1'),
            }
          ](name='ConfigItemList'),
          createTime?: long(name='CreateTime', example='1710209552704'),
          creator?: string(name='Creator', example='212211111'),
          creatorName?: string(name='CreatorName'),
          description?: string(name='Description'),
          env?: string(name='Env', example='DEV'),
          id?: long(name='Id', example='12313123131'),
          modifyTime?: long(name='ModifyTime', example='1710209552704'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='212211111'),
          ownerName?: string(name='OwnerName'),
          scope?: string(name='Scope', example='ALL'),
          type?: string(name='Type', example='MAX_COMPUTE'),
        }(name='DevDataSourceInfo', description='开发环境数据源信息'),
        prodDataSourceInfo?: {
          configItemList?: [ 
            {
              key?: string(name='Key', example='param1'),
              value?: string(name='Value', example='value1'),
            }
          ](name='ConfigItemList'),
          createTime?: long(name='CreateTime', example='1708303959000'),
          creator?: string(name='Creator', example='212211111'),
          creatorName?: string(name='CreatorName'),
          description?: string(name='Description'),
          env?: string(name='Env', example='PROD'),
          id?: long(name='Id', example='300000028799'),
          modifyTime?: long(name='ModifyTime', example='1708303959000'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='212211111'),
          ownerName?: string(name='OwnerName'),
          scope?: string(name='Scope', example='ALL'),
          type?: string(name='Type', example='MAX_COMPUTE'),
        }(name='ProdDataSourceInfo', description='生产环境数据源'),
      }
    ](name='DataSourceList'),
    totalCount?: long(name='TotalCount', example='39'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListDataSourceWithConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceWithConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSourceWithConfig  ListDataSourceWithConfigRequest
  * @return ListDataSourceWithConfigResponse
 */
async function listDataSourceWithConfig(request: ListDataSourceWithConfigRequest): ListDataSourceWithConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceWithConfig', 'POST', '/', 'json', true, 'form', request);
}

model ListFilesRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    category: string(name='Category', description='This parameter is required.', example='tempCode'),
    directory: string(name='Directory', description='This parameter is required.', example='/xx/x'),
    env: string(name='Env', description='This parameter is required.', example='DEV'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='11112311'),
    recursive: boolean(name='Recursive', description='This parameter is required.', example='true'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListFilesResponseBody = {
  code?: string(name='Code', example='OK'),
  fileList?: [ 
    {
      category?: string(name='Category', example='tempCode'),
      content?: string(name='Content', example='select 1;'),
      creator?: string(name='Creator', example='1212111'),
      directory?: string(name='Directory', example='/xx/x'),
      fileType?: string(name='FileType', example='directory'),
      gmtCreate?: long(name='GmtCreate', example='1717483193830'),
      gmtModified?: long(name='GmtModified', example='1717483193830'),
      id?: long(name='Id', example='111231112'),
      lastModifier?: string(name='LastModifier', example='1212111'),
      name?: string(name='Name', example='xx测试'),
      projectId?: long(name='ProjectId', example='312112121'),
    }
  ](name='FileList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFiles  ListFilesRequest
  * @return ListFilesResponse
 */
async function listFiles(request: ListFilesRequest): ListFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFiles', 'POST', '/', 'json', true, 'form', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  listQuery?: {
    bizType?: string(name='BizType', example='SCRIPT'),
    bizUnitId?: long(name='BizUnitId'),
    maxBizDate?: string(name='MaxBizDate', example='2024-05-31'),
    maxRunDate?: string(name='MaxRunDate', example='2024-05-31'),
    minBizDate?: string(name='MinBizDate', example='2024-05-30'),
    minRunDate?: string(name='MinRunDate', example='2024-05-30'),
    nodeId?: string(name='NodeId', example='n_23131'),
    ownerList?: [ string ](name='OwnerList'),
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    priorityList?: [ string ](name='PriorityList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='131311111321'),
    runStatusList?: [ string ](name='RunStatusList'),
    schedulePaused?: boolean(name='SchedulePaused'),
    schedulePeriodList?: [ string ](name='SchedulePeriodList'),
    scheduleType: string(name='ScheduleType', description='This parameter is required.', example='NORMAL'),
    searchText?: string(name='SearchText', example='xx'),
    subBizTypeList?: [ string ](name='SubBizTypeList'),
  }(name='ListQuery', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        bizDate?: string(name='BizDate', example='2024-05-30'),
        dueTime?: string(name='DueTime', example='2024-05-30 16:47:13'),
        duration?: string(name='Duration', example='60s'),
        endExecuteTime?: long(name='EndExecuteTime', example='2024-05-30 16:47:13'),
        extendInfo?: string(name='ExtendInfo', example='xx'),
        id?: string(name='Id', example='t_23231'),
        index?: int32(name='Index', example='1'),
        nodeInfo?: {
          bizUnitName?: string(name='BizUnitName'),
          createTime?: string(name='CreateTime', example='2024-05-30 16:47:13'),
          creator?: {
            id?: string(name='Id', example='21313112'),
            name?: string(name='Name'),
          }(name='Creator'),
          description?: string(name='Description'),
          dryRun?: boolean(name='DryRun', example='false'),
          from?: string(name='From', example='DATA_PROCES'),
          hasDev?: boolean(name='HasDev', example='false'),
          hasProd?: boolean(name='HasProd', example='true'),
          id?: string(name='Id', example='n_132331'),
          lastModifiedTime?: string(name='LastModifiedTime', example='2024-05-30 16:47:13'),
          modifier?: {
            id?: string(name='Id', example='21313112'),
            name?: string(name='Name'),
          }(name='Modifier'),
          name?: string(name='Name'),
          ownerList?: [ 
            {
              id?: string(name='Id', example='21313112'),
              name?: string(name='Name'),
            }
          ](name='OwnerList'),
          priorityList?: [ string ](name='PriorityList'),
          resourceGroupList?: [ string ](name='ResourceGroupList'),
          schedulePaused?: boolean(name='SchedulePaused', example='false'),
          schedulePeriodList?: [ string ](name='SchedulePeriodList'),
          subDetailType?: string(name='SubDetailType', example='SHELL'),
          type?: string(name='Type', example='DATA_PROCES'),
        }(name='NodeInfo'),
        startExecuteTime?: long(name='StartExecuteTime', example='2024-05-30 16:46:13'),
        statusList?: [ string ](name='StatusList'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='107'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeDownStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  listQuery: {
    downStreamDepth?: int32(name='DownStreamDepth', example='1'),
    filterList?: [ 
      {
        exclude?: boolean(name='Exclude', example='false'),
        key?: string(name='Key', example='PROJECT'),
        valueList?: [ string ](name='ValueList'),
      }
    ](name='FilterList'),
    nodeIdList: [ 
      {
        fieldIdList?: [ string ](name='FieldIdList', example='112'),
        id?: string(name='Id', example='n_23431'),
      }
    ](name='NodeIdList', description='This parameter is required.'),
    projectId?: long(name='ProjectId', example='123011'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListNodeDownStreamResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeInfoList?: [ 
    {
      depth?: int32(name='Depth', example='1'),
      fieldIdList?: [ string ](name='FieldIdList'),
      id?: string(name='Id', example='n_2423351'),
      name?: string(name='Name'),
      type?: string(name='Type', example='DATA_PROCESS'),
    }
  ](name='NodeInfoList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListNodeDownStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDownStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodeDownStream  ListNodeDownStreamRequest
  * @return ListNodeDownStreamResponse
 */
async function listNodeDownStream(request: ListNodeDownStreamRequest): ListNodeDownStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeDownStream', 'POST', '/', 'json', true, 'form', request);
}

model ListNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  listQuery: {
    dryRun?: boolean(name='DryRun', example='false'),
    nodeBizType: string(name='NodeBizType', description='This parameter is required.', example='SCRIPT'),
    nodeSubBizTypeList: [ string ](name='NodeSubBizTypeList', description='This parameter is required.'),
    ownerList?: [ string ](name='OwnerList'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    priorityList?: [ string ](name='PriorityList'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='12111'),
    schedulePaused?: boolean(name='SchedulePaused', example='true'),
    schedulePeriodList?: [ string ](name='SchedulePeriodList'),
    scheduleType?: string(name='ScheduleType', example='NORMAL'),
    searchText?: string(name='SearchText', example='xx'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListNodesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    nodeList?: [ 
      {
        bizUnitName?: string(name='BizUnitName'),
        createTime?: string(name='CreateTime', example='2024-05-30 16:47:13'),
        creator?: {
          id?: string(name='Id', example='23222'),
          name?: string(name='Name'),
        }(name='Creator'),
        description?: string(name='Description', example='xx test'),
        dryRun?: boolean(name='DryRun', example='true'),
        extendInfo?: string(name='ExtendInfo', example='{"xx":"zz"}'),
        from?: string(name='From', example='DATA_PROCESS'),
        hasDev?: boolean(name='HasDev', example='true'),
        hasProd?: boolean(name='HasProd', example='true'),
        id?: string(name='Id', example='n_31111'),
        lastModifiedTime?: string(name='LastModifiedTime', example='2024-05-30 16:47:13'),
        modifier?: {
          id?: string(name='Id', example='311131'),
          name?: string(name='Name'),
        }(name='Modifier'),
        name?: string(name='Name'),
        ownerList?: [ 
          {
            id?: string(name='Id', example='23222'),
            name?: string(name='Name'),
          }
        ](name='OwnerList'),
        priorityList?: [ string ](name='PriorityList'),
        projectInfo?: {
          id?: string(name='Id', example='1121321'),
          name?: string(name='Name'),
        }(name='ProjectInfo'),
        schedulePaused?: boolean(name='SchedulePaused', example='true'),
        schedulePeriodList?: [ string ](name='SchedulePeriodList'),
        subDetailType?: string(name='SubDetailType', example='SHELL'),
        type?: string(name='Type', example='DATA_PROCESS'),
      }
    ](name='NodeList'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodes  ListNodesRequest
  * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'POST', '/', 'json', true, 'form', request);
}

model ListPublishRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    keyword?: string(name='Keyword', example='abc'),
    searchFilter: {
      changeTypeList?: [ int32 ](name='ChangeTypeList'),
      page: int32(name='Page', description='This parameter is required.', example='1'),
      pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
      projectIdList: [ long ](name='ProjectIdList', description='This parameter is required.'),
      publishEndTime?: string(name='PublishEndTime', example='2024-10-10 10:00:00'),
      publishStartTime?: string(name='PublishStartTime', example='2024-10-10 10:00:00'),
      publishStatusList?: [ int32 ](name='PublishStatusList'),
      submitterList?: [ string ](name='SubmitterList'),
    }(name='SearchFilter', description='This parameter is required.'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListPublishRecordsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  listResult?: {
    data?: [ 
      {
        changeType?: int32(name='ChangeType', example='0'),
        errorMessage?: string(name='ErrorMessage', example='error'),
        finishTime?: string(name='FinishTime', example='2024-10-10 10:10:10'),
        gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
        gmtModify?: string(name='GmtModify', example='2024-10-10 10:00:00'),
        id?: long(name='Id', example='1241844456'),
        nodeId?: string(name='NodeId', example='n_123456'),
        objectId?: string(name='ObjectId', example='1234567'),
        objectName?: string(name='ObjectName', example='对象A'),
        objectType?: string(name='ObjectType', example='2024-10-10 10:00:00'),
        objectVersion?: string(name='ObjectVersion', example='1'),
        projectId?: string(name='ProjectId', example='1241844456'),
        publishName?: string(name='PublishName', example='test_lc__20241118171502'),
        publishStatus?: int32(name='PublishStatus', example='1'),
        publisher?: string(name='Publisher', example='307999999'),
        publisherName?: string(name='PublisherName', example='张三'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='ListResult'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListPublishRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublishRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublishRecords  ListPublishRecordsRequest
  * @return ListPublishRecordsResponse
 */
async function listPublishRecords(request: ListPublishRecordsRequest): ListPublishRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublishRecords', 'POST', '/', 'json', true, 'form', request);
}

model ListResourcePermissionOperationLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    searchText?: string(name='SearchText', example='xx测试'),
    tabType: string(name='TabType', description='This parameter is required.', example='TABLE'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListResourcePermissionOperationLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        account?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='Account'),
        authScope?: string(name='AuthScope', example='selectTable'),
        operateId?: long(name='OperateId', example='123133'),
        operateTime?: long(name='OperateTime', example='1710012121000'),
        operateType?: string(name='OperateType', example='APPLY'),
        period?: {
          endTime?: string(name='EndTime', example='1712000000000'),
          type?: string(name='Type', example='CUSTOM'),
        }(name='Period'),
        reason?: string(name='Reason', example='xx测试'),
        resourceInfo?: {
          bizUnitInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: string(name='Id', description='Id', example='121323'),
            name?: string(name='Name', example='xx'),
          }(name='BizUnitInfo'),
          displayName?: string(name='DisplayName', example='tb1'),
          env?: string(name='Env', example='DEV'),
          id?: string(name='Id', example='a.tb1'),
          name?: string(name='Name', example='tb1'),
          projectInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: long(name='Id', example='1123131'),
            name?: string(name='Name', example='xx'),
          }(name='ProjectInfo'),
          type?: string(name='Type', example='PHYSICAL_TABLE'),
        }(name='ResourceInfo'),
        targetAccount?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='TargetAccount'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='121'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListResourcePermissionOperationLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcePermissionOperationLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourcePermissionOperationLog  ListResourcePermissionOperationLogRequest
  * @return ListResourcePermissionOperationLogResponse
 */
async function listResourcePermissionOperationLog(request: ListResourcePermissionOperationLogRequest): ListResourcePermissionOperationLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcePermissionOperationLog', 'POST', '/', 'json', true, 'form', request);
}

model ListResourcePermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    searchText?: string(name='SearchText', example='xx测试'),
    tabType: string(name='TabType', description='This parameter is required.', example='TABLE'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListResourcePermissionsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    data?: [ 
      {
        authScope?: string(name='AuthScope', example='selectTable'),
        period?: {
          endTime?: string(name='EndTime', example='1712000000000'),
          type?: string(name='Type', example='CUSTOM'),
        }(name='Period'),
        permissionPeriodList?: [ 
          {
            period?: {
              endTime?: string(name='EndTime', example='1712000000000'),
              type?: string(name='Type', example='CUSTOM'),
            }(name='Period'),
            permissionType?: string(name='PermissionType', example='SELECT'),
          }
        ](name='PermissionPeriodList'),
        recordId?: string(name='RecordId', example='12123111'),
        resourceInfo?: {
          bizUnitInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: string(name='Id', description='Id', example='121323'),
            name?: string(name='Name', example='xx'),
          }(name='BizUnitInfo'),
          displayName?: string(name='DisplayName', example='tb1'),
          env?: string(name='Env', example='DEV'),
          id?: string(name='Id', example='a.tb1'),
          name?: string(name='Name', example='tb1'),
          projectInfo?: {
            displayName?: string(name='DisplayName', example='xx'),
            env?: string(name='Env', example='DEV'),
            id?: long(name='Id', example='1123131'),
            name?: string(name='Name', example='xx'),
          }(name='ProjectInfo'),
          type?: string(name='Type', example='PHYSICAL_TABLE'),
        }(name='ResourceInfo'),
        targetAccount?: {
          id?: string(name='Id', example='1212131'),
          name?: string(name='Name', example='xx'),
          type?: string(name='Type', example='PERSONAL'),
        }(name='TargetAccount'),
      }
    ](name='Data'),
    totalCount?: long(name='TotalCount', example='121'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListResourcePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcePermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourcePermissions  ListResourcePermissionsRequest
  * @return ListResourcePermissionsResponse
 */
async function listResourcePermissions(request: ListResourcePermissionsRequest): ListResourcePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcePermissions', 'POST', '/', 'json', true, 'form', request);
}

model ListSubmitRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    keyword?: string(name='Keyword', example='abc'),
    searchFilter: {
      changeTypeList?: [ int32 ](name='ChangeTypeList'),
      page: int32(name='Page', description='This parameter is required.', example='1'),
      pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
      projectIdList: [ long ](name='ProjectIdList', description='This parameter is required.'),
      submitEndTime?: string(name='SubmitEndTime', example='2024-10-10 10:00:00'),
      submitStartTime?: string(name='SubmitStartTime', example='2024-10-10 10:00:00'),
      submitterList?: [ string ](name='SubmitterList'),
    }(name='SearchFilter', description='This parameter is required.'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListSubmitRecordsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  listResult?: {
    data?: [ 
      {
        changeType?: int32(name='ChangeType', example='0'),
        gmtCreate?: string(name='GmtCreate', example='2024-10-10 10:00:00'),
        gmtModify?: string(name='GmtModify', example='2024-10-10 10:00:00'),
        id?: long(name='Id', example='1241844456'),
        nodeId?: string(name='NodeId', example='n_123456'),
        objectId?: string(name='ObjectId', example='1234567'),
        objectName?: string(name='ObjectName', example='对象A'),
        objectType?: string(name='ObjectType', example='2024-10-10 10:00:00'),
        objectVersion?: string(name='ObjectVersion', example='1'),
        projectId?: string(name='ProjectId', example='1241844456'),
        submitComment?: string(name='SubmitComment', example='提交信息'),
        submitter?: string(name='Submitter', example='307999999'),
        submitterName?: string(name='SubmitterName', example='张三'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='ListResult'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ListSubmitRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubmitRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubmitRecords  ListSubmitRecordsRequest
  * @return ListSubmitRecordsResponse
 */
async function listSubmitRecords(request: ListSubmitRecordsRequest): ListSubmitRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubmitRecords', 'POST', '/', 'json', true, 'form', request);
}

model ListTenantMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    page: int32(name='Page', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    roleList?: [ string ](name='RoleList'),
    searchText?: string(name='SearchText'),
    userGroupIdList?: [ string ](name='UserGroupIdList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListTenantMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='110'),
    userList?: [ 
      {
        accountName?: string(name='AccountName', example='zhangsan'),
        dingNumber?: string(name='DingNumber', example='dd123123'),
        displayName?: string(name='DisplayName', example='zhangsan'),
        displayNameWithoutStatus?: string(name='DisplayNameWithoutStatus', example='zhangsan'),
        enableWhiteIp?: string(name='EnableWhiteIp', example='true'),
        gmtCreate?: long(name='GmtCreate', example='1730000000000'),
        gmtModified?: long(name='GmtModified', example='1730000000000'),
        id?: string(name='Id', example='132321'),
        mail?: string(name='Mail', example='123@aliyun.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        name?: string(name='Name', example='zhangsan'),
        nickName?: string(name='NickName', example='susan'),
        realName?: string(name='RealName'),
        roleList?: [ string ](name='RoleList'),
        sourceId?: string(name='SourceId', example='213213232422222'),
        sourceType?: string(name='SourceType', example='aliyun'),
        userGroupList?: [ 
          {
            active?: boolean(name='Active', example='true'),
            description?: string(name='Description'),
            id?: string(name='Id', example='121313'),
            name?: string(name='Name'),
          }
        ](name='UserGroupList'),
        whiteIp?: string(name='WhiteIp', example='0.0.0.0/0'),
      }
    ](name='UserList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListTenantMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTenantMembers  ListTenantMembersRequest
  * @return ListTenantMembersResponse
 */
async function listTenantMembers(request: ListTenantMembersRequest): ListTenantMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTenantMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListUserGroupMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    keyword?: string(name='Keyword', example='a'),
    pageNo: int32(name='PageNo', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
    userGroupId?: string(name='UserGroupId', example='232231'),
    userIdList?: [ string ](name='UserIdList'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListUserGroupMembersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    memberList?: [ 
      {
        creator?: {
          accountName?: string(name='AccountName', example='12121111'),
          displayName?: string(name='DisplayName', example='zhangsan'),
          id?: string(name='Id', example='12121111'),
        }(name='Creator'),
        gmtCreate?: long(name='GmtCreate', example='zhangsan'),
        id?: string(name='Id', example='2324211'),
        userGroupId?: string(name='UserGroupId', example='231111'),
        userInfo?: {
          accountName?: string(name='AccountName', example='atest'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='13232'),
        }(name='UserInfo'),
        userRole?: string(name='UserRole', example='SECURITY_ADMIN'),
      }
    ](name='MemberList'),
    totalCount?: int32(name='TotalCount', example='217'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListUserGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroupMembers  ListUserGroupMembersRequest
  * @return ListUserGroupMembersResponse
 */
async function listUserGroupMembers(request: ListUserGroupMembersRequest): ListUserGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListUserGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  listQuery: {
    active?: boolean(name='Active', example='true'),
    adminIdList?: [ string ](name='AdminIdList'),
    filterMine?: boolean(name='FilterMine', example='false'),
    keyword?: string(name='Keyword'),
    pageNo: int32(name='PageNo', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
  }(name='ListQuery', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model ListUserGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageResult?: {
    totalCount?: int32(name='TotalCount', example='49'),
    userGroupList?: [ 
      {
        active?: boolean(name='Active', example='true'),
        adminList?: [ 
          {
            accountName?: string(name='AccountName', example='zhangsan'),
            displayName?: string(name='DisplayName'),
            id?: string(name='Id', example='32313131'),
          }
        ](name='AdminList'),
        description?: string(name='Description'),
        id?: string(name='Id', example='31313232'),
        myRole?: string(name='MyRole', example='SECURITY_ADMIN'),
        name?: string(name='Name'),
      }
    ](name='UserGroupList'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ListUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroups  ListUserGroupsRequest
  * @return ListUserGroupsResponse
 */
async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroups', 'POST', '/', 'json', true, 'form', request);
}

model OfflineBatchTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment: string(name='Comment', description='This parameter is required.', example='test xx', position='Query'),
  fileId: long(name='FileId', description='This parameter is required.', example='12113111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
}

model OfflineBatchTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  offlineResult?: {
    publishObjectId?: long(name='PublishObjectId', example='10211123'),
  }(name='OfflineResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model OfflineBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineBatchTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineBatchTask  OfflineBatchTaskRequest
  * @return OfflineBatchTaskResponse
 */
async function offlineBatchTask(request: OfflineBatchTaskRequest): OfflineBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineBatchTask', 'POST', '/', 'json', false, 'json', request);
}

model OfflineBizEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  offlineCommand: {
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='6798087749072704'),
    comment: string(name='Comment', description='This parameter is required.', example='test'),
    id: long(name='Id', description='This parameter is required.', example='101001201'),
    type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT'),
  }(name='OfflineCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model OfflineBizEntityResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model OfflineBizEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineBizEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineBizEntity  OfflineBizEntityRequest
  * @return OfflineBizEntityResponse
 */
async function offlineBizEntity(request: OfflineBizEntityRequest): OfflineBizEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineBizEntity', 'POST', '/', 'json', true, 'form', request);
}

model OnlineBizEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  onlineCommand: {
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='6798087749072704'),
    comment: string(name='Comment', description='This parameter is required.', example='test'),
    id: long(name='Id', description='This parameter is required.', example='101001201'),
    type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT'),
  }(name='OnlineCommand', description='This parameter is required.', shrink='json', position='Body'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
}

model OnlineBizEntityResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model OnlineBizEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OnlineBizEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OnlineBizEntity  OnlineBizEntityRequest
  * @return OnlineBizEntityResponse
 */
async function onlineBizEntity(request: OnlineBizEntityRequest): OnlineBizEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OnlineBizEntity', 'POST', '/', 'json', true, 'form', request);
}

model OperateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  operateCommand: {
    instanceIdList: [ 
      {
        fieldInstanceIdList?: [ string ](name='FieldInstanceIdList'),
        id: string(name='Id', description='This parameter is required.', example='t_32111312'),
      }
    ](name='InstanceIdList', description='This parameter is required.'),
    operation: string(name='Operation', description='This parameter is required.', example='RERUN'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='132311'),
  }(name='OperateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model OperateInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceStatusList?: [ 
    {
      displayName?: string(name='DisplayName'),
      errorMessage?: string(name='ErrorMessage', example='xx'),
      id?: string(name='Id', example='t_132435'),
      name?: string(name='Name'),
      ownerId?: string(name='OwnerId', example='121311'),
      ownerName?: string(name='OwnerName'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='InstanceStatusList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model OperateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateInstance  OperateInstanceRequest
  * @return OperateInstanceResponse
 */
async function operateInstance(request: OperateInstanceRequest): OperateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateInstance', 'POST', '/', 'json', true, 'form', request);
}

model ParseBatchTaskDependencyRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  parseCommand: {
    code: string(name='Code', description='This parameter is required.', example='select * from t_test limit 1;'),
    dataSourceCatalog?: string(name='DataSourceCatalog', example='mysql_catalog'),
    dataSourceId?: long(name='DataSourceId', example='12131111'),
    dataSourceSchema?: string(name='DataSourceSchema', example='erp'),
    includeAllInputTables?: boolean(name='IncludeAllInputTables'),
    needQueryLineages?: boolean(name='NeedQueryLineages'),
    operatorType: string(name='OperatorType', description='This parameter is required.', example='MaxCompute_SQL'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='131211211'),
  }(name='ParseCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model ParseBatchTaskDependencyResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  parseResult?: {
    dependNodeList?: [ 
      {
        nodeIoType?: string(name='NodeIoType', example='input'),
        scheduleNodeInfoList?: [ 
          {
            fieldList?: [ string ](name='FieldList'),
            nodeId?: string(name='NodeId', example='n_11013121'),
            nodeName?: string(name='NodeName', example='test11'),
            outputName?: string(name='OutputName', example='t_test'),
            ownerName?: string(name='OwnerName', example='张三'),
            ownerUserId?: string(name='OwnerUserId', example='201122301'),
            tableName?: string(name='TableName', example='t_test'),
          }
        ](name='ScheduleNodeInfoList'),
      }
    ](name='DependNodeList'),
  }(name='ParseResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model ParseBatchTaskDependencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ParseBatchTaskDependencyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ParseBatchTaskDependency  ParseBatchTaskDependencyRequest
  * @return ParseBatchTaskDependencyResponse
 */
async function parseBatchTaskDependency(request: ParseBatchTaskDependencyRequest): ParseBatchTaskDependencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ParseBatchTaskDependency', 'POST', '/', 'json', true, 'form', request);
}

model PausePhysicalNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  pauseCommand: {
    nodeIdList: [ string ](name='NodeIdList', description='This parameter is required.'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='13222210'),
  }(name='PauseCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model PausePhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeOperateResultList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='xx'),
      nodeId?: string(name='NodeId', example='n_123456'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='NodeOperateResultList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model PausePhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PausePhysicalNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PausePhysicalNode  PausePhysicalNodeRequest
  * @return PausePhysicalNodeResponse
 */
async function pausePhysicalNode(request: PausePhysicalNodeRequest): PausePhysicalNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PausePhysicalNode', 'POST', '/', 'json', true, 'form', request);
}

model PublishObjectListRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  publishCommand: {
    comment: string(name='Comment', description='This parameter is required.', example='发布'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='1234567'),
    submitIdList: [ long ](name='SubmitIdList', description='This parameter is required.'),
  }(name='PublishCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model PublishObjectListResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  publishResult?: {
    submitIdList?: [ long ](name='SubmitIdList'),
  }(name='PublishResult'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model PublishObjectListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishObjectListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishObjectList  PublishObjectListRequest
  * @return PublishObjectListResponse
 */
async function publishObjectList(request: PublishObjectListRequest): PublishObjectListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishObjectList', 'POST', '/', 'json', true, 'form', request);
}

model RemoveTenantMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  removeCommand: {
    sourceId: string(name='SourceId', description='This parameter is required.', example='123@xx.com'),
  }(name='RemoveCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model RemoveTenantMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RemoveTenantMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTenantMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveTenantMember  RemoveTenantMemberRequest
  * @return RemoveTenantMemberResponse
 */
async function removeTenantMember(request: RemoveTenantMemberRequest): RemoveTenantMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTenantMember', 'POST', '/', 'json', true, 'form', request);
}

model RemoveUserGroupMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  removeCommand: {
    userGroupId: string(name='UserGroupId', description='This parameter is required.', example='2311'),
    userIdList: [ string ](name='UserIdList', description='This parameter is required.'),
  }(name='RemoveCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model RemoveUserGroupMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RemoveUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserGroupMember  RemoveUserGroupMemberRequest
  * @return RemoveUserGroupMemberResponse
 */
async function removeUserGroupMember(request: RemoveUserGroupMemberRequest): RemoveUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserGroupMember', 'POST', '/', 'json', true, 'form', request);
}

model ResumePhysicalNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  env?: string(name='Env', example='PROD', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  resumeCommand: {
    nodeIdList: [ string ](name='NodeIdList', description='This parameter is required.'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='102011'),
  }(name='ResumeCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model ResumePhysicalNodeResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  nodeOperateResultList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='xx'),
      nodeId?: string(name='NodeId', example='n_123456'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='NodeOperateResultList'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model ResumePhysicalNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumePhysicalNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumePhysicalNode  ResumePhysicalNodeRequest
  * @return ResumePhysicalNodeResponse
 */
async function resumePhysicalNode(request: ResumePhysicalNodeRequest): ResumePhysicalNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumePhysicalNode', 'POST', '/', 'json', true, 'form', request);
}

model RevokeResourcePermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  revokeCommand: {
    operateList?: [ string ](name='OperateList'),
    reason?: string(name='Reason', example='xx'),
    resourceList: [ 
      {
        resourceId?: string(name='ResourceId', example='odps.300002102.beginner_test.amin_table'),
      }
    ](name='ResourceList', description='This parameter is required.'),
    resourceType: string(name='ResourceType', description='This parameter is required.', example='PHYSICAL_TABLE'),
    userId: string(name='UserId', description='This parameter is required.', example='13131'),
  }(name='RevokeCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model RevokeResourcePermissionResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model RevokeResourcePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeResourcePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeResourcePermission  RevokeResourcePermissionRequest
  * @return RevokeResourcePermissionResponse
 */
async function revokeResourcePermission(request: RevokeResourcePermissionRequest): RevokeResourcePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeResourcePermission', 'POST', '/', 'json', true, 'form', request);
}

model StopAdHocTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='131211211', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='MaxCompute_SQL_300000843_1611548758327', position='Query'),
}

model StopAdHocTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model StopAdHocTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAdHocTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopAdHocTask  StopAdHocTaskRequest
  * @return StopAdHocTaskResponse
 */
async function stopAdHocTask(request: StopAdHocTaskRequest): StopAdHocTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAdHocTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitBatchTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  submitCommand: {
    code: string(name='Code', description='This parameter is required.', example='show tables;'),
    comment: string(name='Comment', description='This parameter is required.', example='test'),
    cronExpression?: string(name='CronExpression', example='0 0 1 * * ?'),
    customScheduleConfig?: {
      endTime: string(name='EndTime', description='This parameter is required.', example='10:00'),
      interval: int32(name='Interval', description='This parameter is required.', example='1'),
      intervalUnit: string(name='IntervalUnit', description='This parameter is required.', example='HOUR'),
      schedulePeriod: string(name='SchedulePeriod', description='This parameter is required.', example='DAILY'),
      startTime: string(name='StartTime', description='This parameter is required.', example='10:00'),
    }(name='CustomScheduleConfig'),
    engine?: string(name='Engine', example='PYTHON3_7'),
    fileId: long(name='FileId', description='This parameter is required.', example='12113111'),
    name: string(name='Name', description='This parameter is required.', example='test111'),
    nodeDescription?: string(name='NodeDescription', example='xx测试'),
    nodeOutputNameList?: [ string ](name='NodeOutputNameList'),
    nodeStatus?: int32(name='NodeStatus', example='1'),
    paramList?: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='key'),
        value: string(name='Value', description='This parameter is required.', example='key'),
      }
    ](name='ParamList'),
    priority?: int32(name='Priority', example='1'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='10121101'),
    pythonModuleList?: [ string ](name='PythonModuleList'),
    schedulePeriod?: string(name='SchedulePeriod', example='DAILY'),
    sparkClientInfo?: {
      sparkClientVersion: string(name='SparkClientVersion', description='This parameter is required.', example='abc'),
    }(name='SparkClientInfo'),
    upStreamList?: [ 
      {
        dependPeriod?: {
          periodOffset?: int32(name='PeriodOffset', example='1'),
          periodType: string(name='PeriodType', description='This parameter is required.', example='CURRENT_PERIOD'),
        }(name='DependPeriod'),
        dependStrategy?: string(name='DependStrategy', example='ALL'),
        fieldList?: [ string ](name='FieldList'),
        nodeType?: string(name='NodeType', example='PHYSICAL'),
        periodDiff: int32(name='PeriodDiff', description='This parameter is required.', example='1'),
        sourceNodeEnabled?: boolean(name='SourceNodeEnabled'),
        sourceNodeId?: string(name='SourceNodeId', example='n_2001'),
        sourceNodeOutputName: string(name='SourceNodeOutputName', description='This parameter is required.', example='t_input1'),
        sourceTableName?: string(name='SourceTableName', example='t_input1'),
      }
    ](name='UpStreamList'),
  }(name='SubmitCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model SubmitBatchTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  submitResult?: {
    nodeId?: string(name='NodeId', example='n_12113111'),
    submitId?: long(name='SubmitId', example='1010312911'),
  }(name='SubmitResult'),
  success?: boolean(name='Success'),
}

model SubmitBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitBatchTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitBatchTask  SubmitBatchTaskRequest
  * @return SubmitBatchTaskResponse
 */
async function submitBatchTask(request: SubmitBatchTaskRequest): SubmitBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitBatchTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAdHocFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    content: string(name='Content', description='This parameter is required.', example='select 1;'),
    fileId: long(name='FileId', description='This parameter is required.', example='2311113'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='1212313'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateAdHocFileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateAdHocFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAdHocFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAdHocFile  UpdateAdHocFileRequest
  * @return UpdateAdHocFileResponse
 */
async function updateAdHocFile(request: UpdateAdHocFileRequest): UpdateAdHocFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAdHocFile', 'POST', '/', 'json', true, 'form', request);
}

model UpdateBatchTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    code: string(name='Code', description='This parameter is required.', example='show tables;'),
    cronExpression?: string(name='CronExpression', example='0 0 1 * * ?'),
    customScheduleConfig?: {
      endTime: string(name='EndTime', description='This parameter is required.', example='20:59'),
      interval: int32(name='Interval', description='This parameter is required.', example='1'),
      intervalUnit: string(name='IntervalUnit', description='This parameter is required.', example='HOUR'),
      schedulePeriod: string(name='SchedulePeriod', description='This parameter is required.', example='DAILY'),
      startTime: string(name='StartTime', description='This parameter is required.', example='08:00'),
    }(name='CustomScheduleConfig'),
    dataSourceCatalog?: string(name='DataSourceCatalog', example='mysql_catalog'),
    dataSourceId?: string(name='DataSourceId', example='12131111'),
    dataSourceSchema?: string(name='DataSourceSchema', example='erp'),
    engine?: string(name='Engine', example='PYTHON3_7'),
    fileId: long(name='FileId', description='This parameter is required.', example='12113111'),
    name: string(name='Name', description='This parameter is required.', example='test111'),
    nodeDescription?: string(name='NodeDescription', example='xx测试'),
    nodeOutputNameList?: [ string ](name='NodeOutputNameList'),
    nodeStatus?: int32(name='NodeStatus', example='1'),
    paramList?: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='key'),
        value: string(name='Value', description='This parameter is required.', example='value'),
      }
    ](name='ParamList'),
    priority?: int32(name='Priority', example='1'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='10121101'),
    pythonModuleList?: [ string ](name='PythonModuleList'),
    schedulePeriod?: string(name='SchedulePeriod', example='DAILY'),
    sparkClientInfo?: {
      sparkClientVersion: string(name='SparkClientVersion', description='This parameter is required.', example='abc'),
    }(name='SparkClientInfo'),
    taskType: int32(name='TaskType', description='This parameter is required.', example='21'),
    upStreamList?: [ 
      {
        dependPeriod?: {
          periodOffset?: int32(name='PeriodOffset', example='1'),
          periodType: string(name='PeriodType', description='This parameter is required.', example='CURRENT_PERIOD'),
        }(name='DependPeriod'),
        dependStrategy?: string(name='DependStrategy', example='LAST'),
        fieldList?: [ string ](name='FieldList'),
        nodeType?: string(name='NodeType', example='PHYSICAL'),
        periodDiff: int32(name='PeriodDiff', description='This parameter is required.', example='1'),
        sourceNodeEnabled?: boolean(name='SourceNodeEnabled'),
        sourceNodeId?: string(name='SourceNodeId', example='n_2001'),
        sourceNodeOutputName: string(name='SourceNodeOutputName', description='This parameter is required.', example='t_input1'),
        sourceTableName?: string(name='SourceTableName', example='t_input1'),
      }
    ](name='UpStreamList'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateBatchTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
  updateResult?: {
    fileId?: long(name='FileId', example='12113111'),
  }(name='UpdateResult'),
}

model UpdateBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBatchTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBatchTask  UpdateBatchTaskRequest
  * @return UpdateBatchTaskResponse
 */
async function updateBatchTask(request: UpdateBatchTaskRequest): UpdateBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBatchTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateBatchTaskUdfLineagesRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    fileId: long(name='FileId', description='This parameter is required.', example='12113111'),
    lineageGroupList: [ 
      {
        inputLineageList: [ 
          {
            columnList: [ string ](name='ColumnList', description='This parameter is required.'),
            env: string(name='Env', description='This parameter is required.', example='dev'),
            fullTable: boolean(name='FullTable', description='This parameter is required.'),
            name: string(name='Name', description='This parameter is required.', example='t_input'),
          }
        ](name='InputLineageList', description='This parameter is required.'),
        outputLineageList: [ 
          {
            columnList: [ string ](name='ColumnList', description='This parameter is required.'),
            env: string(name='Env', description='This parameter is required.', example='dev'),
            fullTable: boolean(name='FullTable', description='This parameter is required.'),
            name: string(name='Name', description='This parameter is required.', example='t_output'),
          }
        ](name='OutputLineageList', description='This parameter is required.'),
      }
    ](name='LineageGroupList', description='This parameter is required.'),
    projectId: long(name='ProjectId', description='This parameter is required.', example='131211211'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateBatchTaskUdfLineagesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateBatchTaskUdfLineagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBatchTaskUdfLineagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBatchTaskUdfLineages  UpdateBatchTaskUdfLineagesRequest
  * @return UpdateBatchTaskUdfLineagesResponse
 */
async function updateBatchTaskUdfLineages(request: UpdateBatchTaskUdfLineagesRequest): UpdateBatchTaskUdfLineagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBatchTaskUdfLineages', 'POST', '/', 'json', true, 'form', request);
}

model UpdateBizEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    bizObject?: {
      description?: string(name='Description', example='test'),
      displayName: string(name='DisplayName', description='This parameter is required.', example='create_object_name'),
      name: string(name='Name', description='This parameter is required.', example='create_object_code_name'),
      ownerUserId: string(name='OwnerUserId', description='This parameter is required.', example='30010010'),
      parentId?: long(name='ParentId', example='116306'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
    }(name='BizObject'),
    bizProcess?: {
      bizEventEntityIdList?: [ long ](name='BizEventEntityIdList'),
      description?: string(name='Description', example='test'),
      displayName: string(name='DisplayName', description='This parameter is required.', example='create_process_name'),
      name: string(name='Name', description='This parameter is required.', example='create_process_code_name'),
      ownerUserId: string(name='OwnerUserId', description='This parameter is required.', example='30010010'),
      preBizProcessIdList?: [ long ](name='PreBizProcessIdList'),
      refBizEntityIdList?: [ long ](name='RefBizEntityIdList'),
    }(name='BizProcess'),
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='6798087749072704'),
    dataDomainId: long(name='DataDomainId', description='This parameter is required.', example='20101011'),
    id: long(name='Id', description='This parameter is required.', example='101001201'),
    type: string(name='Type', description='This parameter is required.', example='BIZ_OBJECT'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateBizEntityResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateBizEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBizEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBizEntity  UpdateBizEntityRequest
  * @return UpdateBizEntityResponse
 */
async function updateBizEntity(request: UpdateBizEntityRequest): UpdateBizEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizEntity', 'POST', '/', 'json', true, 'form', request);
}

model UpdateBizUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    bizUnitAccountList: [ 
      {
        userId: string(name='UserId', description='This parameter is required.', example='20001201'),
      }
    ](name='BizUnitAccountList', description='This parameter is required.'),
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='545844456'),
    description?: string(name='Description', example='test'),
    displayName: string(name='DisplayName', description='This parameter is required.', example='测试'),
    icon: string(name='Icon', description='This parameter is required.', example='icon-environment'),
    name: string(name='Name', description='This parameter is required.', example='bz_code_name'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateBizUnitResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateBizUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBizUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBizUnit  UpdateBizUnitRequest
  * @return UpdateBizUnitResponse
 */
async function updateBizUnit(request: UpdateBizUnitRequest): UpdateBizUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizUnit', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    abbreviation: string(name='Abbreviation', description='This parameter is required.', example='dm_code_name'),
    bizUnitId: long(name='BizUnitId', description='This parameter is required.', example='545844456'),
    dataDomainId: long(name='DataDomainId', description='This parameter is required.', example='1241844456'),
    description?: string(name='Description', example='test'),
    displayName: string(name='DisplayName', description='This parameter is required.', example='主题域测试'),
    name: string(name='Name', description='This parameter is required.', example='dm_code_name'),
    parentId?: long(name='ParentId', example='10232311'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateDataDomainResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateDataDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataDomain  UpdateDataDomainRequest
  * @return UpdateDataDomainResponse
 */
async function updateDataDomain(request: UpdateDataDomainRequest): UpdateDataDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataDomain', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceBasicInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    description: string(name='Description', description='This parameter is required.', example='xx'),
    id: long(name='Id', description='This parameter is required.', example='23231'),
    name: string(name='Name', description='This parameter is required.'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateDataSourceBasicInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSourceBasicInfo  UpdateDataSourceBasicInfoRequest
  * @return UpdateDataSourceBasicInfoResponse
 */
async function updateDataSourceBasicInfo(request: UpdateDataSourceBasicInfoRequest): UpdateDataSourceBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSourceBasicInfo', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    configItemList: [ 
      {
        key: string(name='Key', description='This parameter is required.', example='k1'),
        value: string(name='Value', description='This parameter is required.', example='v1'),
      }
    ](name='ConfigItemList', description='This parameter is required.'),
    id: long(name='Id', description='This parameter is required.', example='13231313'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateDataSourceConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSourceConfig  UpdateDataSourceConfigRequest
  * @return UpdateDataSourceConfigResponse
 */
async function updateDataSourceConfig(request: UpdateDataSourceConfigRequest): UpdateDataSourceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSourceConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFileDirectoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  directory: string(name='Directory', description='This parameter is required.', example='/xx测试/目录new', position='Query'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model UpdateFileDirectoryResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateFileDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFileDirectory  UpdateFileDirectoryRequest
  * @return UpdateFileDirectoryResponse
 */
async function updateFileDirectory(request: UpdateFileDirectoryRequest): UpdateFileDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileDirectory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', example='12121111', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='xxNew', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='12132323', position='Query'),
}

model UpdateFileNameResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success'),
}

model UpdateFileNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFileName  UpdateFileNameRequest
  * @return UpdateFileNameResponse
 */
async function updateFileName(request: UpdateFileNameRequest): UpdateFileNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTenantMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand: {
    memberList: [ 
      {
        dingNumber?: string(name='DingNumber', example='123@dingding'),
        mail?: string(name='Mail', example='123@xx.com'),
        mobilePhone?: string(name='MobilePhone', example='13888888888'),
        roleList?: [ string ](name='RoleList'),
        userId?: string(name='UserId', example='2331'),
      }
    ](name='MemberList', description='This parameter is required.'),
  }(name='UpdateCommand', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateTenantMemberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTenantMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTenantMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTenantMember  UpdateTenantMemberRequest
  * @return UpdateTenantMemberResponse
 */
async function updateTenantMember(request: UpdateTenantMemberRequest): UpdateTenantMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTenantMember', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  updateCommand?: {
    adminUserIdList?: [ string ](name='AdminUserIdList'),
    description?: string(name='Description', example='xx'),
    id: string(name='Id', description='This parameter is required.', example='13423'),
    name?: string(name='Name'),
  }(name='UpdateCommand', shrink='json', position='Body'),
}

model UpdateUserGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserGroup  UpdateUserGroupRequest
  * @return UpdateUserGroupResponse
 */
async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupSwitchRequest {
  regionId?: string(name='RegionId', position='Host'),
  active: boolean(name='Active', description='This parameter is required.', example='true', position='Query'),
  opTenantId: long(name='OpTenantId', description='This parameter is required.', example='30001011', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='31323', position='Query'),
}

model UpdateUserGroupSwitchResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='75DD06F8-1661-5A6E-B0A6-7E23133BDC60'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserGroupSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupSwitchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserGroupSwitch  UpdateUserGroupSwitchRequest
  * @return UpdateUserGroupSwitchResponse
 */
async function updateUserGroupSwitch(request: UpdateUserGroupSwitchRequest): UpdateUserGroupSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroupSwitch', 'POST', '/', 'json', false, 'json', request);
}

