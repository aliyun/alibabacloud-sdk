/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('rtc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddRecordTemplateRequest {
  appId?: string(name='AppId'),
  backgroundColor?: int32(name='BackgroundColor'),
  backgrounds?: [ 
    {
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  delayStopTime?: int32(name='DelayStopTime'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime'),
  fileSplitInterval?: int32(name='FileSplitInterval'),
  formats?: [ string ](name='Formats'),
  httpCallbackUrl?: string(name='HttpCallbackUrl'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: int32(name='MediaEncode'),
  mnsQueue?: string(name='MnsQueue'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  ownerId?: long(name='OwnerId'),
  taskProfile?: string(name='TaskProfile'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Watermarks'),
}

model AddRecordTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model AddRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddRecordTemplateResponseBody(name='body'),
}

async function addRecordTemplateWithOptions(request: AddRecordTemplateRequest, runtime: Util.RuntimeOptions): AddRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.delayStopTime)) {
    query['DelayStopTime'] = request.delayStopTime;
  }
  if (!Util.isUnset(request.enableM3u8DateTime)) {
    query['EnableM3u8DateTime'] = request.enableM3u8DateTime;
  }
  if (!Util.isUnset(request.fileSplitInterval)) {
    query['FileSplitInterval'] = request.fileSplitInterval;
  }
  if (!Util.isUnset(request.formats)) {
    query['Formats'] = request.formats;
  }
  if (!Util.isUnset(request.httpCallbackUrl)) {
    query['HttpCallbackUrl'] = request.httpCallbackUrl;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mnsQueue)) {
    query['MnsQueue'] = request.mnsQueue;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!Util.isUnset(request.ossFilePrefix)) {
    query['OssFilePrefix'] = request.ossFilePrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRecordTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRecordTemplate(request: AddRecordTemplateRequest): AddRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecordTemplateWithOptions(request, runtime);
}

model CreateAutoLiveStreamRuleRequest {
  appId?: string(name='AppId'),
  callBack?: string(name='CallBack'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
  channelIds?: [ string ](name='ChannelIds'),
  mediaEncode?: int32(name='MediaEncode'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
  ruleName?: string(name='RuleName'),
}

model CreateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: long(name='RuleId'),
}

model CreateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoLiveStreamRuleResponseBody(name='body'),
}

async function createAutoLiveStreamRuleWithOptions(request: CreateAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): CreateAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callBack)) {
    query['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.channelIdPrefixes)) {
    query['ChannelIdPrefixes'] = request.channelIdPrefixes;
  }
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAutoLiveStreamRule(request: CreateAutoLiveStreamRuleRequest): CreateAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoLiveStreamRuleWithOptions(request, runtime);
}

model CreateEventSubscribeRequest {
  appId?: string(name='AppId'),
  callbackUrl?: string(name='CallbackUrl'),
  channelId?: string(name='ChannelId'),
  clientToken?: string(name='ClientToken'),
  events?: [ string ](name='Events'),
  needCallbackAuth?: boolean(name='NeedCallbackAuth'),
  ownerId?: long(name='OwnerId'),
  role?: long(name='Role'),
  users?: [ string ](name='Users'),
}

model CreateEventSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
  subscribeId?: string(name='SubscribeId'),
}

model CreateEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventSubscribeResponseBody(name='body'),
}

async function createEventSubscribeWithOptions(request: CreateEventSubscribeRequest, runtime: Util.RuntimeOptions): CreateEventSubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.events)) {
    query['Events'] = request.events;
  }
  if (!Util.isUnset(request.needCallbackAuth)) {
    query['NeedCallbackAuth'] = request.needCallbackAuth;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.users)) {
    query['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEventSubscribe',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEventSubscribe(request: CreateEventSubscribeRequest): CreateEventSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventSubscribeWithOptions(request, runtime);
}

model CreateMPULayoutRequest {
  appId?: string(name='AppId'),
  audioMixCount?: int32(name='AudioMixCount'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  panes?: [ 
    {
      height?: float(name='Height'),
      majorPane?: int32(name='MajorPane'),
      paneId?: int32(name='PaneId'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Panes'),
}

model CreateMPULayoutResponseBody = {
  layoutId?: long(name='LayoutId'),
  requestId?: string(name='RequestId'),
}

model CreateMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMPULayoutResponseBody(name='body'),
}

async function createMPULayoutWithOptions(request: CreateMPULayoutRequest, runtime: Util.RuntimeOptions): CreateMPULayoutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.audioMixCount)) {
    query['AudioMixCount'] = request.audioMixCount;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.panes)) {
    query['Panes'] = request.panes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMPULayout',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMPULayout(request: CreateMPULayoutRequest): CreateMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMPULayoutWithOptions(request, runtime);
}

model DeleteAutoLiveStreamRuleRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId'),
}

model DeleteAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoLiveStreamRuleResponseBody(name='body'),
}

async function deleteAutoLiveStreamRuleWithOptions(request: DeleteAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DeleteAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoLiveStreamRule(request: DeleteAutoLiveStreamRuleRequest): DeleteAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoLiveStreamRuleWithOptions(request, runtime);
}

model DeleteChannelRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  ownerId?: long(name='OwnerId'),
}

model DeleteChannelResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChannelResponseBody(name='body'),
}

async function deleteChannelWithOptions(request: DeleteChannelRequest, runtime: Util.RuntimeOptions): DeleteChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChannel',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChannelWithOptions(request, runtime);
}

model DeleteEventSubscribeRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  subscribeId?: string(name='SubscribeId'),
}

model DeleteEventSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventSubscribeResponseBody(name='body'),
}

async function deleteEventSubscribeWithOptions(request: DeleteEventSubscribeRequest, runtime: Util.RuntimeOptions): DeleteEventSubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.subscribeId)) {
    query['SubscribeId'] = request.subscribeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventSubscribe',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventSubscribe(request: DeleteEventSubscribeRequest): DeleteEventSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventSubscribeWithOptions(request, runtime);
}

model DeleteMPULayoutRequest {
  appId?: string(name='AppId'),
  layoutId?: long(name='LayoutId'),
  ownerId?: long(name='OwnerId'),
}

model DeleteMPULayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMPULayoutResponseBody(name='body'),
}

async function deleteMPULayoutWithOptions(request: DeleteMPULayoutRequest, runtime: Util.RuntimeOptions): DeleteMPULayoutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.layoutId)) {
    query['LayoutId'] = request.layoutId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMPULayout',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMPULayout(request: DeleteMPULayoutRequest): DeleteMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMPULayoutWithOptions(request, runtime);
}

model DeleteRecordTemplateRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  templateId?: string(name='TemplateId'),
}

model DeleteRecordTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRecordTemplateResponseBody(name='body'),
}

async function deleteRecordTemplateWithOptions(request: DeleteRecordTemplateRequest, runtime: Util.RuntimeOptions): DeleteRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecordTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRecordTemplate(request: DeleteRecordTemplateRequest): DeleteRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordTemplateWithOptions(request, runtime);
}

model DescribeAppKeyRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeAppKeyResponseBody = {
  appKey?: string(name='AppKey'),
  requestId?: string(name='RequestId'),
}

model DescribeAppKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppKeyResponseBody(name='body'),
}

async function describeAppKeyWithOptions(request: DescribeAppKeyRequest, runtime: Util.RuntimeOptions): DescribeAppKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppKey',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppKey(request: DescribeAppKeyRequest): DescribeAppKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppKeyWithOptions(request, runtime);
}

model DescribeAppsRequest {
  appId?: string(name='AppId'),
  order?: string(name='Order'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeAppsResponseBody = {
  appList?: {
    app?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      appType?: string(name='AppType'),
      billType?: string(name='BillType'),
      createTime?: string(name='CreateTime'),
      region?: string(name='Region'),
      serviceAreas?: {
        serviceArea?: [ string ](name='ServiceArea')
      }(name='ServiceAreas'),
      status?: int32(name='Status'),
    }
  ](name='App')
  }(name='AppList'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApps',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAutoLiveStreamRuleRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      callBack?: string(name='CallBack'),
      channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
      channelIds?: [ string ](name='ChannelIds'),
      createTime?: string(name='CreateTime'),
      mediaEncode?: int32(name='MediaEncode'),
      playDomain?: string(name='PlayDomain'),
      ruleId?: long(name='RuleId'),
      ruleName?: string(name='RuleName'),
      status?: string(name='Status'),
    }
  ](name='Rules'),
}

model DescribeAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoLiveStreamRuleResponseBody(name='body'),
}

async function describeAutoLiveStreamRuleWithOptions(request: DescribeAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DescribeAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoLiveStreamRule(request: DescribeAutoLiveStreamRuleRequest): DescribeAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoLiveStreamRuleWithOptions(request, runtime);
}

model DescribeChannelParticipantsRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  order?: string(name='Order'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeChannelParticipantsResponseBody = {
  requestId?: string(name='RequestId'),
  timestamp?: int32(name='Timestamp'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  userList?: {
    user?: [ string ](name='User')
  }(name='UserList'),
}

model DescribeChannelParticipantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelParticipantsResponseBody(name='body'),
}

async function describeChannelParticipantsWithOptions(request: DescribeChannelParticipantsRequest, runtime: Util.RuntimeOptions): DescribeChannelParticipantsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelParticipants',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelParticipants(request: DescribeChannelParticipantsRequest): DescribeChannelParticipantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelParticipantsWithOptions(request, runtime);
}

model DescribeChannelUsersRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeChannelUsersResponseBody = {
  channelProfile?: int32(name='ChannelProfile'),
  commTotalNum?: int32(name='CommTotalNum'),
  interactiveUserList?: [ string ](name='InteractiveUserList'),
  interactiveUserNum?: int32(name='InteractiveUserNum'),
  isChannelExist?: boolean(name='IsChannelExist'),
  liveUserList?: [ string ](name='LiveUserList'),
  liveUserNum?: int32(name='LiveUserNum'),
  requestId?: string(name='RequestId'),
  timestamp?: int32(name='Timestamp'),
  userList?: [ string ](name='UserList'),
}

model DescribeChannelUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelUsersResponseBody(name='body'),
}

async function describeChannelUsersWithOptions(request: DescribeChannelUsersRequest, runtime: Util.RuntimeOptions): DescribeChannelUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelUsers',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelUsers(request: DescribeChannelUsersRequest): DescribeChannelUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelUsersWithOptions(request, runtime);
}

model DescribeMPULayoutInfoListRequest {
  appId?: string(name='AppId'),
  layoutId?: long(name='LayoutId'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model DescribeMPULayoutInfoListResponseBody = {
  layouts?: {
    layout?: [ 
    {
      audioMixCount?: int32(name='AudioMixCount'),
      layoutId?: long(name='LayoutId'),
      name?: string(name='Name'),
      panes?: {
        panes?: [ 
        {
          height?: float(name='Height'),
          majorPane?: int32(name='MajorPane'),
          paneId?: int32(name='PaneId'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Panes')
      }(name='Panes'),
    }
  ](name='Layout')
  }(name='Layouts'),
  requestId?: string(name='RequestId'),
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
}

model DescribeMPULayoutInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMPULayoutInfoListResponseBody(name='body'),
}

async function describeMPULayoutInfoListWithOptions(request: DescribeMPULayoutInfoListRequest, runtime: Util.RuntimeOptions): DescribeMPULayoutInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.layoutId)) {
    query['LayoutId'] = request.layoutId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMPULayoutInfoList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMPULayoutInfoList(request: DescribeMPULayoutInfoListRequest): DescribeMPULayoutInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMPULayoutInfoListWithOptions(request, runtime);
}

model DescribeRecordFilesRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  taskIds?: [ string ](name='TaskIds'),
}

model DescribeRecordFilesResponseBody = {
  recordFiles?: [ 
    {
      appId?: string(name='AppId'),
      channelId?: string(name='ChannelId'),
      createTime?: string(name='CreateTime'),
      duration?: float(name='Duration'),
      startTime?: string(name='StartTime'),
      stopTime?: string(name='StopTime'),
      taskId?: string(name='TaskId'),
      url?: string(name='Url'),
    }
  ](name='RecordFiles'),
  requestId?: string(name='RequestId'),
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
}

model DescribeRecordFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecordFilesResponseBody(name='body'),
}

async function describeRecordFilesWithOptions(request: DescribeRecordFilesRequest, runtime: Util.RuntimeOptions): DescribeRecordFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecordFiles',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecordFiles(request: DescribeRecordFilesRequest): DescribeRecordFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordFilesWithOptions(request, runtime);
}

model DescribeRecordTemplatesRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  templateIds?: [ string ](name='TemplateIds'),
}

model DescribeRecordTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  templates?: [ 
    {
      backgroundColor?: int32(name='BackgroundColor'),
      backgrounds?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Backgrounds'),
      clockWidgets?: [ 
        {
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='ClockWidgets'),
      createTime?: string(name='CreateTime'),
      delayStopTime?: int32(name='DelayStopTime'),
      enableM3u8DateTime?: boolean(name='EnableM3u8DateTime'),
      fileSplitInterval?: int32(name='FileSplitInterval'),
      formats?: [ string ](name='Formats'),
      httpCallbackUrl?: string(name='HttpCallbackUrl'),
      layoutIds?: [ long ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode'),
      mnsQueue?: string(name='MnsQueue'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket'),
      ossFilePrefix?: string(name='OssFilePrefix'),
      taskProfile?: string(name='TaskProfile'),
      templateId?: string(name='TemplateId'),
      watermarks?: [ 
        {
          alpha?: float(name='Alpha'),
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Watermarks'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
}

model DescribeRecordTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecordTemplatesResponseBody(name='body'),
}

async function describeRecordTemplatesWithOptions(request: DescribeRecordTemplatesRequest, runtime: Util.RuntimeOptions): DescribeRecordTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.templateIds)) {
    query['TemplateIds'] = request.templateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecordTemplates',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecordTemplates(request: DescribeRecordTemplatesRequest): DescribeRecordTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordTemplatesWithOptions(request, runtime);
}

model DescribeRtcChannelListRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  serviceArea?: string(name='ServiceArea'),
  sortType?: string(name='SortType'),
  timePoint?: string(name='TimePoint'),
  userId?: string(name='UserId'),
}

model DescribeRtcChannelListResponseBody = {
  channelList?: {
    channelList?: [ 
    {
      callArea?: {
        callArea?: [ string ](name='CallArea')
      }(name='CallArea'),
      channelId?: string(name='ChannelId'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      totalUserCnt?: long(name='TotalUserCnt'),
    }
  ](name='ChannelList')
  }(name='ChannelList'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCnt?: long(name='TotalCnt'),
}

model DescribeRtcChannelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcChannelListResponseBody(name='body'),
}

async function describeRtcChannelListWithOptions(request: DescribeRtcChannelListRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcChannelList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcChannelList(request: DescribeRtcChannelListRequest): DescribeRtcChannelListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelListWithOptions(request, runtime);
}

model DescribeRtcChannelMetricRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  ownerId?: long(name='OwnerId'),
  timePoint?: string(name='TimePoint'),
}

model DescribeRtcChannelMetricResponseBody = {
  channelMetricInfo?: {
    channelMetric?: {
      channelId?: string(name='ChannelId'),
      endTime?: string(name='EndTime'),
      pubUserCount?: int32(name='PubUserCount'),
      startTime?: string(name='StartTime'),
      subUserCount?: int32(name='SubUserCount'),
      userCount?: int32(name='UserCount'),
    }(name='ChannelMetric'),
    duration?: {
      pubDuration?: {
        audio?: int32(name='Audio'),
        content?: int32(name='Content'),
        video1080?: int32(name='Video1080'),
        video360?: int32(name='Video360'),
        video720?: int32(name='Video720'),
      }(name='PubDuration'),
      subDuration?: {
        audio?: int32(name='Audio'),
        content?: int32(name='Content'),
        video1080?: int32(name='Video1080'),
        video360?: int32(name='Video360'),
        video720?: int32(name='Video720'),
      }(name='SubDuration'),
    }(name='Duration'),
  }(name='ChannelMetricInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeRtcChannelMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcChannelMetricResponseBody(name='body'),
}

async function describeRtcChannelMetricWithOptions(request: DescribeRtcChannelMetricRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcChannelMetric',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcChannelMetric(request: DescribeRtcChannelMetricRequest): DescribeRtcChannelMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelMetricWithOptions(request, runtime);
}

model DescribeRtcDurationDataRequest {
  appId?: string(name='AppId'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  serviceArea?: string(name='ServiceArea'),
  startTime?: string(name='StartTime'),
}

model DescribeRtcDurationDataResponseBody = {
  durationDataPerInterval?: {
    durationModule?: [ 
    {
      audioDuration?: long(name='AudioDuration'),
      contentDuration?: long(name='ContentDuration'),
      timeStamp?: string(name='TimeStamp'),
      totalDuration?: long(name='TotalDuration'),
      v1080Duration?: long(name='V1080Duration'),
      v360Duration?: long(name='V360Duration'),
      v720Duration?: long(name='V720Duration'),
    }
  ](name='DurationModule')
  }(name='DurationDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeRtcDurationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcDurationDataResponseBody(name='body'),
}

async function describeRtcDurationDataWithOptions(request: DescribeRtcDurationDataRequest, runtime: Util.RuntimeOptions): DescribeRtcDurationDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcDurationData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcDurationData(request: DescribeRtcDurationDataRequest): DescribeRtcDurationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcDurationDataWithOptions(request, runtime);
}

model DescribeRtcPeakChannelCntDataRequest {
  appId?: string(name='AppId'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  serviceArea?: string(name='ServiceArea'),
  startTime?: string(name='StartTime'),
}

model DescribeRtcPeakChannelCntDataResponseBody = {
  peakChannelCntDataPerInterval?: {
    peakChannelCntModule?: [ 
    {
      activeChannelPeak?: long(name='ActiveChannelPeak'),
      activeChannelPeakTime?: string(name='ActiveChannelPeakTime'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='PeakChannelCntModule')
  }(name='PeakChannelCntDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeRtcPeakChannelCntDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcPeakChannelCntDataResponseBody(name='body'),
}

async function describeRtcPeakChannelCntDataWithOptions(request: DescribeRtcPeakChannelCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcPeakChannelCntDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcPeakChannelCntData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcPeakChannelCntData(request: DescribeRtcPeakChannelCntDataRequest): DescribeRtcPeakChannelCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcPeakChannelCntDataWithOptions(request, runtime);
}

model DescribeRtcUserCntDataRequest {
  appId?: string(name='AppId'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  serviceArea?: string(name='ServiceArea'),
  startTime?: string(name='StartTime'),
}

model DescribeRtcUserCntDataResponseBody = {
  requestId?: string(name='RequestId'),
  userCntDataPerInterval?: {
    userCntModule?: [ 
    {
      activeUserCnt?: long(name='ActiveUserCnt'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UserCntModule')
  }(name='UserCntDataPerInterval'),
}

model DescribeRtcUserCntDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcUserCntDataResponseBody(name='body'),
}

async function describeRtcUserCntDataWithOptions(request: DescribeRtcUserCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcUserCntDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcUserCntData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcUserCntData(request: DescribeRtcUserCntDataRequest): DescribeRtcUserCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcUserCntDataWithOptions(request, runtime);
}

model DescribeUserInfoInChannelRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  ownerId?: long(name='OwnerId'),
  userId?: string(name='UserId'),
}

model DescribeUserInfoInChannelResponseBody = {
  isChannelExist?: boolean(name='IsChannelExist'),
  isInChannel?: boolean(name='IsInChannel'),
  property?: [ 
    {
      join?: int32(name='Join'),
      role?: int32(name='Role'),
      session?: string(name='Session'),
    }
  ](name='Property'),
  requestId?: string(name='RequestId'),
  timestamp?: int32(name='Timestamp'),
}

model DescribeUserInfoInChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserInfoInChannelResponseBody(name='body'),
}

async function describeUserInfoInChannelWithOptions(request: DescribeUserInfoInChannelRequest, runtime: Util.RuntimeOptions): DescribeUserInfoInChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserInfoInChannel',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserInfoInChannel(request: DescribeUserInfoInChannelRequest): DescribeUserInfoInChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserInfoInChannelWithOptions(request, runtime);
}

model DisableAutoLiveStreamRuleRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId'),
}

model DisableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAutoLiveStreamRuleResponseBody(name='body'),
}

async function disableAutoLiveStreamRuleWithOptions(request: DisableAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DisableAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableAutoLiveStreamRule(request: DisableAutoLiveStreamRuleRequest): DisableAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAutoLiveStreamRuleWithOptions(request, runtime);
}

model EnableAutoLiveStreamRuleRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId'),
}

model EnableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAutoLiveStreamRuleResponseBody(name='body'),
}

async function enableAutoLiveStreamRuleWithOptions(request: EnableAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): EnableAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableAutoLiveStreamRule(request: EnableAutoLiveStreamRuleRequest): EnableAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAutoLiveStreamRuleWithOptions(request, runtime);
}

model GetMPUTaskStatusRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model GetMPUTaskStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
}

model GetMPUTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMPUTaskStatusResponseBody(name='body'),
}

async function getMPUTaskStatusWithOptions(request: GetMPUTaskStatusRequest, runtime: Util.RuntimeOptions): GetMPUTaskStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMPUTaskStatus',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMPUTaskStatus(request: GetMPUTaskStatusRequest): GetMPUTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMPUTaskStatusWithOptions(request, runtime);
}

model ModifyAppRequest {
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
  ownerId?: long(name='OwnerId'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyMPULayoutRequest {
  appId?: string(name='AppId'),
  audioMixCount?: int32(name='AudioMixCount'),
  layoutId?: long(name='LayoutId'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  panes?: [ 
    {
      height?: float(name='Height'),
      majorPane?: int32(name='MajorPane'),
      paneId?: int32(name='PaneId'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Panes'),
}

model ModifyMPULayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMPULayoutResponseBody(name='body'),
}

async function modifyMPULayoutWithOptions(request: ModifyMPULayoutRequest, runtime: Util.RuntimeOptions): ModifyMPULayoutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.audioMixCount)) {
    query['AudioMixCount'] = request.audioMixCount;
  }
  if (!Util.isUnset(request.layoutId)) {
    query['LayoutId'] = request.layoutId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.panes)) {
    query['Panes'] = request.panes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMPULayout',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMPULayout(request: ModifyMPULayoutRequest): ModifyMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMPULayoutWithOptions(request, runtime);
}

model RemoveTerminalsRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  ownerId?: long(name='OwnerId'),
  terminalIds?: [ string ](name='TerminalIds'),
}

model RemoveTerminalsResponseBody = {
  requestId?: string(name='RequestId'),
  terminals?: {
    terminal?: [ 
    {
      code?: int32(name='Code'),
      id?: string(name='Id'),
      message?: string(name='Message'),
    }
  ](name='Terminal')
  }(name='Terminals'),
}

model RemoveTerminalsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTerminalsResponseBody(name='body'),
}

async function removeTerminalsWithOptions(request: RemoveTerminalsRequest, runtime: Util.RuntimeOptions): RemoveTerminalsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.terminalIds)) {
    query['TerminalIds'] = request.terminalIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTerminals',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeTerminals(request: RemoveTerminalsRequest): RemoveTerminalsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTerminalsWithOptions(request, runtime);
}

model StartMPUTaskRequest {
  appId?: string(name='AppId'),
  backgroundColor?: int32(name='BackgroundColor'),
  backgrounds?: [ 
    {
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Backgrounds'),
  channelId?: string(name='ChannelId'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha'),
      borderColor?: long(name='BorderColor'),
      borderWidth?: int32(name='BorderWidth'),
      box?: boolean(name='Box'),
      boxBorderWidth?: int32(name='BoxBorderWidth'),
      boxColor?: long(name='BoxColor'),
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  cropMode?: int32(name='CropMode'),
  enhancedParam?: {
    enablePortraitSegmentation?: boolean(name='EnablePortraitSegmentation'),
  }(name='EnhancedParam'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: int32(name='MediaEncode'),
  mixMode?: int32(name='MixMode'),
  ownerId?: long(name='OwnerId'),
  payloadType?: int32(name='PayloadType'),
  reportVad?: int32(name='ReportVad'),
  rtpExtInfo?: int32(name='RtpExtInfo'),
  sourceType?: string(name='SourceType'),
  streamType?: int32(name='StreamType'),
  streamURL?: string(name='StreamURL'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  taskId?: string(name='TaskId'),
  taskType?: int32(name='TaskType'),
  timeStampRef?: long(name='TimeStampRef'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId'),
      segmentType?: int32(name='SegmentType'),
      sourceType?: string(name='SourceType'),
      texts?: [ 
        {
          alpha?: float(name='Alpha'),
          borderColor?: long(name='BorderColor'),
          borderWidth?: int32(name='BorderWidth'),
          box?: boolean(name='Box'),
          boxBorderWidth?: int32(name='BoxBorderWidth'),
          boxColor?: long(name='BoxColor'),
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          text?: string(name='Text'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Texts'),
      userId?: string(name='UserId'),
    }
  ](name='UserPanes'),
  vadInterval?: long(name='VadInterval'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Watermarks'),
}

model StartMPUTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartMPUTaskResponseBody(name='body'),
}

async function startMPUTaskWithOptions(request: StartMPUTaskRequest, runtime: Util.RuntimeOptions): StartMPUTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mixMode)) {
    query['MixMode'] = request.mixMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payloadType)) {
    query['PayloadType'] = request.payloadType;
  }
  if (!Util.isUnset(request.reportVad)) {
    query['ReportVad'] = request.reportVad;
  }
  if (!Util.isUnset(request.rtpExtInfo)) {
    query['RtpExtInfo'] = request.rtpExtInfo;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  if (!Util.isUnset(request.streamURL)) {
    query['StreamURL'] = request.streamURL;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.timeStampRef)) {
    query['TimeStampRef'] = request.timeStampRef;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  if (!Util.isUnset(request.vadInterval)) {
    query['VadInterval'] = request.vadInterval;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.enhancedParam)) {
    bodyFlat['EnhancedParam'] = request.enhancedParam;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMPUTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startMPUTask(request: StartMPUTaskRequest): StartMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMPUTaskWithOptions(request, runtime);
}

model StartRecordTaskRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  cropMode?: long(name='CropMode'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: int32(name='MediaEncode'),
  mixMode?: int32(name='MixMode'),
  ownerId?: long(name='OwnerId'),
  sourceType?: string(name='SourceType'),
  streamType?: int32(name='StreamType'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  taskId?: string(name='TaskId'),
  taskProfile?: string(name='TaskProfile'),
  templateId?: string(name='TemplateId'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId'),
      sourceType?: string(name='SourceType'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          text?: string(name='Text'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Texts'),
      userId?: string(name='UserId'),
    }
  ](name='UserPanes'),
}

model StartRecordTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRecordTaskResponseBody(name='body'),
}

async function startRecordTaskWithOptions(request: StartRecordTaskRequest, runtime: Util.RuntimeOptions): StartRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mixMode)) {
    query['MixMode'] = request.mixMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRecordTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRecordTask(request: StartRecordTaskRequest): StartRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRecordTaskWithOptions(request, runtime);
}

model StopMPUTaskRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model StopMPUTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopMPUTaskResponseBody(name='body'),
}

async function stopMPUTaskWithOptions(request: StopMPUTaskRequest, runtime: Util.RuntimeOptions): StopMPUTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopMPUTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopMPUTask(request: StopMPUTaskRequest): StopMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMPUTaskWithOptions(request, runtime);
}

model StopRecordTaskRequest {
  appId?: string(name='AppId'),
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model StopRecordTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopRecordTaskResponseBody(name='body'),
}

async function stopRecordTaskWithOptions(request: StopRecordTaskRequest, runtime: Util.RuntimeOptions): StopRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRecordTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopRecordTask(request: StopRecordTaskRequest): StopRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRecordTaskWithOptions(request, runtime);
}

model UpdateAutoLiveStreamRuleRequest {
  appId?: string(name='AppId'),
  callBack?: string(name='CallBack'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
  channelIds?: [ string ](name='ChannelIds'),
  mediaEncode?: int32(name='MediaEncode'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
  ruleId?: int32(name='RuleId'),
  ruleName?: string(name='RuleName'),
}

model UpdateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutoLiveStreamRuleResponseBody(name='body'),
}

async function updateAutoLiveStreamRuleWithOptions(request: UpdateAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): UpdateAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callBack)) {
    query['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.channelIdPrefixes)) {
    query['ChannelIdPrefixes'] = request.channelIdPrefixes;
  }
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutoLiveStreamRule(request: UpdateAutoLiveStreamRuleRequest): UpdateAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutoLiveStreamRuleWithOptions(request, runtime);
}

model UpdateMPUTaskRequest {
  appId?: string(name='AppId'),
  backgroundColor?: int32(name='BackgroundColor'),
  backgrounds?: [ 
    {
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha'),
      borderColor?: long(name='BorderColor'),
      borderWidth?: int32(name='BorderWidth'),
      box?: boolean(name='Box'),
      boxBorderWidth?: int32(name='BoxBorderWidth'),
      boxColor?: long(name='BoxColor'),
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  cropMode?: int32(name='CropMode'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: int32(name='MediaEncode'),
  mixMode?: int32(name='MixMode'),
  ownerId?: long(name='OwnerId'),
  sourceType?: string(name='SourceType'),
  streamType?: int32(name='StreamType'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  taskId?: string(name='TaskId'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId'),
      segmentType?: int32(name='SegmentType'),
      sourceType?: string(name='SourceType'),
      texts?: [ 
        {
          alpha?: float(name='Alpha'),
          borderColor?: long(name='BorderColor'),
          borderWidth?: int32(name='BorderWidth'),
          box?: boolean(name='Box'),
          boxBorderWidth?: int32(name='BoxBorderWidth'),
          boxColor?: long(name='BoxColor'),
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          text?: string(name='Text'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Texts'),
      userId?: string(name='UserId'),
    }
  ](name='UserPanes'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Watermarks'),
}

model UpdateMPUTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMPUTaskResponseBody(name='body'),
}

async function updateMPUTaskWithOptions(request: UpdateMPUTaskRequest, runtime: Util.RuntimeOptions): UpdateMPUTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mixMode)) {
    query['MixMode'] = request.mixMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMPUTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMPUTask(request: UpdateMPUTaskRequest): UpdateMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMPUTaskWithOptions(request, runtime);
}

model UpdateRecordTaskRequest {
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  cropMode?: long(name='CropMode'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: long(name='MediaEncode'),
  ownerId?: long(name='OwnerId'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  taskId?: string(name='TaskId'),
  taskProfile?: string(name='TaskProfile'),
  templateId?: string(name='TemplateId'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId'),
      sourceType?: string(name='SourceType'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          text?: string(name='Text'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Texts'),
      userId?: string(name='UserId'),
    }
  ](name='UserPanes'),
}

model UpdateRecordTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordTaskResponseBody(name='body'),
}

async function updateRecordTaskWithOptions(request: UpdateRecordTaskRequest, runtime: Util.RuntimeOptions): UpdateRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordTask(request: UpdateRecordTaskRequest): UpdateRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordTaskWithOptions(request, runtime);
}

model UpdateRecordTemplateRequest {
  appId?: string(name='AppId'),
  backgroundColor?: int32(name='BackgroundColor'),
  backgrounds?: [ 
    {
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  delayStopTime?: int32(name='DelayStopTime'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime'),
  fileSplitInterval?: int32(name='FileSplitInterval'),
  formats?: [ string ](name='Formats'),
  httpCallbackUrl?: string(name='HttpCallbackUrl'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: int32(name='MediaEncode'),
  mnsQueue?: string(name='MnsQueue'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  ownerId?: long(name='OwnerId'),
  taskProfile?: string(name='TaskProfile'),
  templateId?: string(name='TemplateId'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Watermarks'),
}

model UpdateRecordTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model UpdateRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordTemplateResponseBody(name='body'),
}

async function updateRecordTemplateWithOptions(request: UpdateRecordTemplateRequest, runtime: Util.RuntimeOptions): UpdateRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.delayStopTime)) {
    query['DelayStopTime'] = request.delayStopTime;
  }
  if (!Util.isUnset(request.enableM3u8DateTime)) {
    query['EnableM3u8DateTime'] = request.enableM3u8DateTime;
  }
  if (!Util.isUnset(request.fileSplitInterval)) {
    query['FileSplitInterval'] = request.fileSplitInterval;
  }
  if (!Util.isUnset(request.formats)) {
    query['Formats'] = request.formats;
  }
  if (!Util.isUnset(request.httpCallbackUrl)) {
    query['HttpCallbackUrl'] = request.httpCallbackUrl;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mnsQueue)) {
    query['MnsQueue'] = request.mnsQueue;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!Util.isUnset(request.ossFilePrefix)) {
    query['OssFilePrefix'] = request.ossFilePrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordTemplate(request: UpdateRecordTemplateRequest): UpdateRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordTemplateWithOptions(request, runtime);
}

