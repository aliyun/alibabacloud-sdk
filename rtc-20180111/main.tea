/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('rtc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddRecordTemplateRequest {
  appId?: string(name='AppId', example='yourAppId'),
  backgroundColor?: int32(name='BackgroundColor', example='0'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets'),
  delayStopTime?: int32(name='DelayStopTime', example='180'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false'),
  fileSplitInterval?: int32(name='FileSplitInterval', example='1800'),
  formats?: [ string ](name='Formats', example='mp4'),
  httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback'),
  layoutIds?: [ long ](name='LayoutIds', example='2'),
  mediaEncode?: int32(name='MediaEncode', example='20'),
  mnsQueue?: string(name='MnsQueue', example='record-callback-queue'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket', example='rtc-record-oss'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
  ownerId?: long(name='OwnerId'),
  taskProfile?: string(name='TaskProfile', example='4IN_1080P'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks'),
}

model AddRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model AddRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddRecordTemplateResponseBody(name='body'),
}

async function addRecordTemplateWithOptions(request: AddRecordTemplateRequest, runtime: Util.RuntimeOptions): AddRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.delayStopTime)) {
    query['DelayStopTime'] = request.delayStopTime;
  }
  if (!Util.isUnset(request.enableM3u8DateTime)) {
    query['EnableM3u8DateTime'] = request.enableM3u8DateTime;
  }
  if (!Util.isUnset(request.fileSplitInterval)) {
    query['FileSplitInterval'] = request.fileSplitInterval;
  }
  if (!Util.isUnset(request.formats)) {
    query['Formats'] = request.formats;
  }
  if (!Util.isUnset(request.httpCallbackUrl)) {
    query['HttpCallbackUrl'] = request.httpCallbackUrl;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mnsQueue)) {
    query['MnsQueue'] = request.mnsQueue;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!Util.isUnset(request.ossFilePrefix)) {
    query['OssFilePrefix'] = request.ossFilePrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRecordTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRecordTemplate(request: AddRecordTemplateRequest): AddRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecordTemplateWithOptions(request, runtime);
}

model CreateAppStreamingOutTemplateRequest {
  appId?: string(name='AppId', example='ac7N****'),
  streamingOutTemplate?: {
    enableVad?: boolean(name='EnableVad'),
    layoutIds?: [ string ](name='LayoutIds'),
    mediaEncode?: int32(name='MediaEncode', example='1'),
    name?: string(name='Name', example='模版'),
  }(name='StreamingOutTemplate'),
}

model CreateAppStreamingOutTemplateShrinkRequest {
  appId?: string(name='AppId', example='ac7N****'),
  streamingOutTemplateShrink?: string(name='StreamingOutTemplate'),
}

model CreateAppStreamingOutTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30D41049-D02D-1C21-86AE-B3E5FD805C27'),
  templateId?: string(name='TemplateId', example='bc5v****'),
}

model CreateAppStreamingOutTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppStreamingOutTemplateResponseBody(name='body'),
}

async function createAppStreamingOutTemplateWithOptions(tmpReq: CreateAppStreamingOutTemplateRequest, runtime: Util.RuntimeOptions): CreateAppStreamingOutTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppStreamingOutTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.streamingOutTemplate)) {
    request.streamingOutTemplateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamingOutTemplate, 'StreamingOutTemplate', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.streamingOutTemplateShrink)) {
    query['StreamingOutTemplate'] = request.streamingOutTemplateShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppStreamingOutTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppStreamingOutTemplate(request: CreateAppStreamingOutTemplateRequest): CreateAppStreamingOutTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppStreamingOutTemplateWithOptions(request, runtime);
}

model CreateAutoLiveStreamRuleRequest {
  appId?: string(name='AppId', example='eo85****'),
  callBack?: string(name='CallBack', example='http://example.com/callback'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
  channelIds?: [ string ](name='ChannelIds'),
  mediaEncode?: int32(name='MediaEncode', example='20'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}'),
  ruleName?: string(name='RuleName', example='testRule'),
}

model CreateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  ruleId?: long(name='RuleId', example='12'),
}

model CreateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoLiveStreamRuleResponseBody(name='body'),
}

async function createAutoLiveStreamRuleWithOptions(request: CreateAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): CreateAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callBack)) {
    query['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.channelIdPrefixes)) {
    query['ChannelIdPrefixes'] = request.channelIdPrefixes;
  }
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAutoLiveStreamRule(request: CreateAutoLiveStreamRuleRequest): CreateAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoLiveStreamRuleWithOptions(request, runtime);
}

model CreateEventSubscribeRequest {
  appId?: string(name='AppId', example='9qb1****'),
  callbackUrl?: string(name='CallbackUrl', example='http://****.com/callback'),
  channelId?: string(name='ChannelId', example='123333'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  events?: [ string ](name='Events', example='ChannelEvent'),
  needCallbackAuth?: boolean(name='NeedCallbackAuth', example='false'),
  ownerId?: long(name='OwnerId'),
  role?: long(name='Role', example='1'),
  users?: [ string ](name='Users', example='user1'),
}

model CreateEventSubscribeResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  subscribeId?: string(name='SubscribeId', example='ad53276431c****'),
}

model CreateEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventSubscribeResponseBody(name='body'),
}

async function createEventSubscribeWithOptions(request: CreateEventSubscribeRequest, runtime: Util.RuntimeOptions): CreateEventSubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.events)) {
    query['Events'] = request.events;
  }
  if (!Util.isUnset(request.needCallbackAuth)) {
    query['NeedCallbackAuth'] = request.needCallbackAuth;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.users)) {
    query['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEventSubscribe',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEventSubscribe(request: CreateEventSubscribeRequest): CreateEventSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventSubscribeWithOptions(request, runtime);
}

model CreateMPULayoutRequest {
  appId?: string(name='AppId', example='yourAppId'),
  audioMixCount?: int32(name='AudioMixCount', example='3'),
  name?: string(name='Name', example='LayoutName'),
  ownerId?: long(name='OwnerId'),
  panes?: [ 
    {
      height?: float(name='Height', example='0.25'),
      majorPane?: int32(name='MajorPane', example='1'),
      paneId?: int32(name='PaneId', example='0'),
      width?: float(name='Width', example='0.25'),
      x?: float(name='X', example='0.25'),
      y?: float(name='Y', example='0.25'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Panes'),
}

model CreateMPULayoutResponseBody = {
  layoutId?: long(name='LayoutId', example='2'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model CreateMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMPULayoutResponseBody(name='body'),
}

async function createMPULayoutWithOptions(request: CreateMPULayoutRequest, runtime: Util.RuntimeOptions): CreateMPULayoutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.audioMixCount)) {
    query['AudioMixCount'] = request.audioMixCount;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.panes)) {
    query['Panes'] = request.panes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMPULayout',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMPULayout(request: CreateMPULayoutRequest): CreateMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMPULayoutWithOptions(request, runtime);
}

model DeleteAppStreamingOutTemplateRequest {
  appId?: string(name='AppId', example='wv7N****'),
  streamingOutTemplate?: {
    templateId?: string(name='TemplateId', example='xd4c****'),
  }(name='StreamingOutTemplate'),
}

model DeleteAppStreamingOutTemplateShrinkRequest {
  appId?: string(name='AppId', example='wv7N****'),
  streamingOutTemplateShrink?: string(name='StreamingOutTemplate'),
}

model DeleteAppStreamingOutTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30D41049-D02D-1C21-86AE-B3E5FD825C17'),
}

model DeleteAppStreamingOutTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppStreamingOutTemplateResponseBody(name='body'),
}

async function deleteAppStreamingOutTemplateWithOptions(tmpReq: DeleteAppStreamingOutTemplateRequest, runtime: Util.RuntimeOptions): DeleteAppStreamingOutTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteAppStreamingOutTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.streamingOutTemplate)) {
    request.streamingOutTemplateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamingOutTemplate, 'StreamingOutTemplate', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.streamingOutTemplateShrink)) {
    query['StreamingOutTemplate'] = request.streamingOutTemplateShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppStreamingOutTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAppStreamingOutTemplate(request: DeleteAppStreamingOutTemplateRequest): DeleteAppStreamingOutTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppStreamingOutTemplateWithOptions(request, runtime);
}

model DeleteAutoLiveStreamRuleRequest {
  appId?: string(name='AppId', example='eo85****'),
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId', example='12'),
}

model DeleteAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoLiveStreamRuleResponseBody(name='body'),
}

async function deleteAutoLiveStreamRuleWithOptions(request: DeleteAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DeleteAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoLiveStreamRule(request: DeleteAutoLiveStreamRuleRequest): DeleteAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoLiveStreamRuleWithOptions(request, runtime);
}

model DeleteChannelRequest {
  appId?: string(name='AppId', example='eo85****'),
  channelId?: string(name='ChannelId', example='testid'),
  ownerId?: long(name='OwnerId'),
}

model DeleteChannelResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
}

model DeleteChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChannelResponseBody(name='body'),
}

async function deleteChannelWithOptions(request: DeleteChannelRequest, runtime: Util.RuntimeOptions): DeleteChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChannel',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChannelWithOptions(request, runtime);
}

model DeleteEventSubscribeRequest {
  appId?: string(name='AppId', example='9qb1****'),
  ownerId?: long(name='OwnerId'),
  subscribeId?: string(name='SubscribeId', example='ad53276431c****'),
}

model DeleteEventSubscribeResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventSubscribeResponseBody(name='body'),
}

async function deleteEventSubscribeWithOptions(request: DeleteEventSubscribeRequest, runtime: Util.RuntimeOptions): DeleteEventSubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.subscribeId)) {
    query['SubscribeId'] = request.subscribeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventSubscribe',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventSubscribe(request: DeleteEventSubscribeRequest): DeleteEventSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventSubscribeWithOptions(request, runtime);
}

model DeleteMPULayoutRequest {
  appId?: string(name='AppId', example='yourAppId'),
  layoutId?: long(name='LayoutId', example='2'),
  ownerId?: long(name='OwnerId'),
}

model DeleteMPULayoutResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMPULayoutResponseBody(name='body'),
}

async function deleteMPULayoutWithOptions(request: DeleteMPULayoutRequest, runtime: Util.RuntimeOptions): DeleteMPULayoutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.layoutId)) {
    query['LayoutId'] = request.layoutId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMPULayout',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMPULayout(request: DeleteMPULayoutRequest): DeleteMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMPULayoutWithOptions(request, runtime);
}

model DeleteRecordTemplateRequest {
  appId?: string(name='AppId', example='yourAppId'),
  ownerId?: long(name='OwnerId', description='1'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model DeleteRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRecordTemplateResponseBody(name='body'),
}

async function deleteRecordTemplateWithOptions(request: DeleteRecordTemplateRequest, runtime: Util.RuntimeOptions): DeleteRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecordTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRecordTemplate(request: DeleteRecordTemplateRequest): DeleteRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordTemplateWithOptions(request, runtime);
}

model DescribeAppKeyRequest {
  appId?: string(name='AppId', example='0cho****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='AppKey。', example='ba133b2cee4ab9be424674892c33****'),
  requestId?: string(name='RequestId', example='154EF5DE-3D08-1F2C-A482-281F78D74B7C'),
}

model DescribeAppKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppKeyResponseBody(name='body'),
}

async function describeAppKeyWithOptions(request: DescribeAppKeyRequest, runtime: Util.RuntimeOptions): DescribeAppKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppKey',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppKey(request: DescribeAppKeyRequest): DescribeAppKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppKeyWithOptions(request, runtime);
}

model DescribeAppStreamingOutTemplatesRequest {
  appId?: string(name='AppId', example='ioeh****'),
  condition?: {
    name?: string(name='Name', example='测试'),
    templateId?: string(name='TemplateId', example='Bj6D****'),
  }(name='Condition'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model DescribeAppStreamingOutTemplatesShrinkRequest {
  appId?: string(name='AppId', example='ioeh****'),
  conditionShrink?: string(name='Condition'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model DescribeAppStreamingOutTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B0A2FCBC-43A4-428F-BC1D-3F4F85837F76'),
  templates?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-09-04T06:22:15Z'),
      enableVad?: boolean(name='EnableVad'),
      layoutIds?: [ string ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode', example='1'),
      name?: string(name='Name', example='模版名称'),
      templateId?: string(name='TemplateId', example='Bj6D****'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum', example='10'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeAppStreamingOutTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppStreamingOutTemplatesResponseBody(name='body'),
}

async function describeAppStreamingOutTemplatesWithOptions(tmpReq: DescribeAppStreamingOutTemplatesRequest, runtime: Util.RuntimeOptions): DescribeAppStreamingOutTemplatesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeAppStreamingOutTemplatesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.condition)) {
    request.conditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.condition, 'Condition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.conditionShrink)) {
    query['Condition'] = request.conditionShrink;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppStreamingOutTemplates',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppStreamingOutTemplates(request: DescribeAppStreamingOutTemplatesRequest): DescribeAppStreamingOutTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppStreamingOutTemplatesWithOptions(request, runtime);
}

model DescribeAppsRequest {
  appId?: string(name='AppId', example='yourAppId'),
  order?: string(name='Order', example='asc'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  status?: string(name='Status', example='1'),
}

model DescribeAppsResponseBody = {
  appList?: {
    app?: [ 
    {
      appId?: string(name='AppId', example='rgf1****"'),
      appName?: string(name='AppName', example='Default AppName'),
      appType?: string(name='AppType', example='universal'),
      billType?: string(name='BillType', example='paybyduration'),
      createTime?: string(name='CreateTime', example='2020-01-09T02:02:29Z'),
      region?: string(name='Region'),
      serviceAreas?: {
        serviceArea?: [ string ](name='ServiceArea')
      }(name='ServiceAreas'),
      status?: int32(name='Status', example='1'),
    }
  ](name='App')
  }(name='AppList'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  totalNum?: int32(name='TotalNum', example='1'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApps',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAutoLiveStreamRuleRequest {
  appId?: string(name='AppId', example='eo85****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='069BCB66-CD80-11E8-A82B-A70F78BBDC00'),
  rules?: [ 
    {
      callBack?: string(name='CallBack', example='http://example.com/callBack'),
      channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
      channelIds?: [ string ](name='ChannelIds'),
      createTime?: string(name='CreateTime', example='2021-08-19T02:53:07Z'),
      mediaEncode?: int32(name='MediaEncode', example='20'),
      playDomain?: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}'),
      ruleId?: long(name='RuleId', example='12'),
      ruleName?: string(name='RuleName', example='testRule'),
      status?: string(name='Status', example='disable'),
    }
  ](name='Rules'),
}

model DescribeAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoLiveStreamRuleResponseBody(name='body'),
}

async function describeAutoLiveStreamRuleWithOptions(request: DescribeAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DescribeAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoLiveStreamRule(request: DescribeAutoLiveStreamRuleRequest): DescribeAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoLiveStreamRuleWithOptions(request, runtime);
}

model DescribeCallRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  extDataType?: string(name='ExtDataType', example='USER_DURATION_STAT'),
  queryExpInfo?: boolean(name='QueryExpInfo', example='false'),
}

model DescribeCallResponseBody = {
  callInfo?: {
    appId?: string(name='AppId', description='App ID。', example='xxxxxxxx'),
    callStatus?: string(name='CallStatus', example='IN'),
    channelId?: string(name='ChannelId', example='123456'),
    createdTs?: long(name='CreatedTs', example='1615860711'),
    destroyedTs?: long(name='DestroyedTs', example='1615860811'),
    duration?: long(name='Duration', example='100'),
  }(name='CallInfo'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  userDetailList?: [ 
    {
      callExp?: string(name='CallExp', example='GOOD'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      durMetricStatData?: {
        pubAudio?: long(name='PubAudio', example='0'),
        pubVideo1080?: long(name='PubVideo1080', example='0'),
        pubVideo360?: long(name='PubVideo360', example='0'),
        pubVideo720?: long(name='PubVideo720', example='0'),
        pubVideoScreenShare?: long(name='PubVideoScreenShare', example='0'),
        subAudio?: long(name='SubAudio', example='0'),
        subVideo1080?: long(name='SubVideo1080', example='0'),
        subVideo360?: long(name='SubVideo360', example='0'),
        subVideo720?: long(name='SubVideo720', example='0'),
        subVideoScreenShare?: long(name='SubVideoScreenShare', example='0'),
      }(name='DurMetricStatData'),
      duration?: long(name='Duration', example='0'),
      location?: string(name='Location', example='浙江省-杭州市'),
      network?: string(name='Network', example='4G'),
      networkList?: [ string ](name='NetworkList'),
      onlineDuration?: long(name='OnlineDuration', example='0'),
      onlinePeriods?: [ 
        {
          joinTs?: long(name='JoinTs', example='1614936817'),
          leaveTs?: long(name='LeaveTs', example='1614936817'),
        }
      ](name='OnlinePeriods'),
      os?: string(name='Os', example='iOS'),
      osList?: [ string ](name='OsList'),
      roles?: [ string ](name='Roles'),
      sdkVersion?: string(name='SdkVersion', example='1.0.0'),
      sdkVersionList?: [ string ](name='SdkVersionList'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='UserDetailList'),
}

model DescribeCallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCallResponseBody(name='body'),
}

async function describeCallWithOptions(request: DescribeCallRequest, runtime: Util.RuntimeOptions): DescribeCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.extDataType)) {
    query['ExtDataType'] = request.extDataType;
  }
  if (!Util.isUnset(request.queryExpInfo)) {
    query['QueryExpInfo'] = request.queryExpInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCall',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCall(request: DescribeCallRequest): DescribeCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCallWithOptions(request, runtime);
}

model DescribeCallListRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  callStatus?: string(name='CallStatus', example='OUT'),
  channelId?: string(name='ChannelId', example='311'),
  endTs?: long(name='EndTs', example='1615892596'),
  orderBy?: string(name='OrderBy', example='BAD_EXP_USER_COUNT_DESC'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  queryMode?: string(name='QueryMode', example='ALL'),
  startTs?: long(name='StartTs', example='1615806196'),
  userId?: string(name='UserId', example='c906531af5f9****'),
}

model DescribeCallListResponseBody = {
  callList?: [ 
    {
      appId?: string(name='AppId', description='App ID。', example='9qb1****'),
      badExpUserCnt?: int32(name='BadExpUserCnt', example='0'),
      callStatus?: string(name='CallStatus', example='OUT'),
      channelId?: string(name='ChannelId', example='904'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      duration?: long(name='Duration', example='10'),
      userCnt?: int32(name='UserCnt', example='5'),
    }
  ](name='CallList'),
  pageNo?: int32(name='PageNo', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  totalCnt?: int32(name='TotalCnt', example='20'),
}

model DescribeCallListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCallListResponseBody(name='body'),
}

async function describeCallListWithOptions(request: DescribeCallListRequest, runtime: Util.RuntimeOptions): DescribeCallListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callStatus)) {
    query['CallStatus'] = request.callStatus;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryMode)) {
    query['QueryMode'] = request.queryMode;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCallList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCallList(request: DescribeCallListRequest): DescribeCallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCallListWithOptions(request, runtime);
}

model DescribeChannelAreaDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  parentArea?: string(name='ParentArea'),
}

model DescribeChannelAreaDistributionStatDataResponseBody = {
  areaStatList?: [ 
    {
      areaName?: string(name='AreaName', example='浙江省'),
      callUserCount?: int32(name='CallUserCount', example='1'),
      highQualityTransmissionRate?: string(name='HighQualityTransmissionRate', example='0.9999'),
      pubUserCount?: int32(name='PubUserCount', example='1'),
      subUserCount?: int32(name='SubUserCount', example='1'),
    }
  ](name='AreaStatList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeChannelAreaDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelAreaDistributionStatDataResponseBody(name='body'),
}

async function describeChannelAreaDistributionStatDataWithOptions(request: DescribeChannelAreaDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeChannelAreaDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.parentArea)) {
    query['ParentArea'] = request.parentArea;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelAreaDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelAreaDistributionStatData(request: DescribeChannelAreaDistributionStatDataRequest): DescribeChannelAreaDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelAreaDistributionStatDataWithOptions(request, runtime);
}

model DescribeChannelDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  statDim?: string(name='StatDim', example='OS'),
}

model DescribeChannelDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  statList?: [ 
    {
      callUserCount?: int32(name='CallUserCount', example='1'),
      callUserRatio?: string(name='CallUserRatio', example='1.0000'),
      name?: string(name='Name', example='OS'),
    }
  ](name='StatList'),
}

model DescribeChannelDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelDistributionStatDataResponseBody(name='body'),
}

async function describeChannelDistributionStatDataWithOptions(request: DescribeChannelDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeChannelDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.statDim)) {
    query['StatDim'] = request.statDim;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelDistributionStatData(request: DescribeChannelDistributionStatDataRequest): DescribeChannelDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelDistributionStatDataWithOptions(request, runtime);
}

model DescribeChannelOverallDataRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1615893133'),
  destroyedTs?: long(name='DestroyedTs', example='1615893757'),
}

model DescribeChannelOverallDataResponseBody = {
  callInfo?: {
    appId?: string(name='AppId', example='rjdhtnqy'),
    callStatus?: string(name='CallStatus', example='IN'),
    channelId?: string(name='ChannelId', example='123456'),
    createdTs?: long(name='CreatedTs', example='1615860711'),
    destroyedTs?: long(name='DestroyedTs', example='1615860811'),
    duration?: long(name='Duration', example='100'),
  }(name='CallInfo'),
  metricDatas?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1612418625'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='CALL_QUALITY'),
    }
  ](name='MetricDatas'),
  overallData?: {
    connAvgTime?: float(name='ConnAvgTime', example='0.5'),
    fiveSecJoinRate?: float(name='FiveSecJoinRate', example='0.91'),
    totalAudioStuckRate?: float(name='TotalAudioStuckRate', example='0.02'),
    totalVideoStuckRate?: float(name='TotalVideoStuckRate', example='0.02'),
    totalVideoVagueRate?: float(name='TotalVideoVagueRate', example='0.02'),
  }(name='OverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeChannelOverallDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelOverallDataResponseBody(name='body'),
}

async function describeChannelOverallDataWithOptions(request: DescribeChannelOverallDataRequest, runtime: Util.RuntimeOptions): DescribeChannelOverallDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelOverallData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelOverallData(request: DescribeChannelOverallDataRequest): DescribeChannelOverallDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelOverallDataWithOptions(request, runtime);
}

model DescribeChannelParticipantsRequest {
  appId?: string(name='AppId', example='aec****'),
  channelId?: string(name='ChannelId', example='testId'),
  order?: string(name='Order', example='asc'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model DescribeChannelParticipantsResponseBody = {
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
  totalNum?: int32(name='TotalNum', example='3'),
  totalPage?: int32(name='TotalPage', example='1'),
  userList?: {
    user?: [ string ](name='User')
  }(name='UserList'),
}

model DescribeChannelParticipantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelParticipantsResponseBody(name='body'),
}

async function describeChannelParticipantsWithOptions(request: DescribeChannelParticipantsRequest, runtime: Util.RuntimeOptions): DescribeChannelParticipantsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelParticipants',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelParticipants(request: DescribeChannelParticipantsRequest): DescribeChannelParticipantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelParticipantsWithOptions(request, runtime);
}

model DescribeChannelTopPubUserListRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1615893133'),
  destroyedTs?: long(name='DestroyedTs', example='1615893757'),
}

model DescribeChannelTopPubUserListResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  topPubUserDetailList?: [ 
    {
      createdTs?: long(name='CreatedTs', example='1615893327'),
      destroyedTs?: long(name='DestroyedTs', example='1615893442'),
      duration?: long(name='Duration', example='0'),
      location?: string(name='Location', example='浙江省-杭州市'),
      onlineDuration?: long(name='OnlineDuration', example='0'),
      onlinePeriods?: [ 
        {
          joinTs?: long(name='JoinTs', example='1615893327'),
          leaveTs?: long(name='LeaveTs', example='1615893442'),
        }
      ](name='OnlinePeriods'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='TopPubUserDetailList'),
}

model DescribeChannelTopPubUserListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelTopPubUserListResponseBody(name='body'),
}

async function describeChannelTopPubUserListWithOptions(request: DescribeChannelTopPubUserListRequest, runtime: Util.RuntimeOptions): DescribeChannelTopPubUserListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelTopPubUserList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelTopPubUserList(request: DescribeChannelTopPubUserListRequest): DescribeChannelTopPubUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelTopPubUserListWithOptions(request, runtime);
}

model DescribeChannelUserMetricsRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
}

model DescribeChannelUserMetricsResponseBody = {
  metricDatas?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1612418625'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='ALL_NUM'),
    }
  ](name='MetricDatas'),
  overallData?: {
    totalBadExpNum?: long(name='TotalBadExpNum', example='0'),
    totalJoinFailNum?: long(name='TotalJoinFailNum', example='0'),
    totalPubUserNum?: long(name='TotalPubUserNum', example='1'),
    totalSubUserNum?: long(name='TotalSubUserNum', example='3'),
    totalUserNum?: long(name='TotalUserNum', example='5'),
  }(name='OverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeChannelUserMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelUserMetricsResponseBody(name='body'),
}

async function describeChannelUserMetricsWithOptions(request: DescribeChannelUserMetricsRequest, runtime: Util.RuntimeOptions): DescribeChannelUserMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelUserMetrics',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelUserMetrics(request: DescribeChannelUserMetricsRequest): DescribeChannelUserMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelUserMetricsWithOptions(request, runtime);
}

model DescribeChannelUsersRequest {
  appId?: string(name='AppId', example='a2hz****'),
  channelId?: string(name='ChannelId', example='testId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeChannelUsersResponseBody = {
  channelProfile?: int32(name='ChannelProfile', example='1'),
  commTotalNum?: int32(name='CommTotalNum', example='100'),
  interactiveUserList?: [ string ](name='InteractiveUserList'),
  interactiveUserNum?: int32(name='InteractiveUserNum', example='0'),
  isChannelExist?: boolean(name='IsChannelExist', example='true'),
  liveUserList?: [ string ](name='LiveUserList'),
  liveUserNum?: int32(name='LiveUserNum', example='0'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
  userList?: [ string ](name='UserList'),
}

model DescribeChannelUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelUsersResponseBody(name='body'),
}

async function describeChannelUsersWithOptions(request: DescribeChannelUsersRequest, runtime: Util.RuntimeOptions): DescribeChannelUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChannelUsers',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChannelUsers(request: DescribeChannelUsersRequest): DescribeChannelUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelUsersWithOptions(request, runtime);
}

model DescribeEndPointEventListRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  userIdList?: string(name='UserIdList', example='testuserid1,testuserid2'),
}

model DescribeEndPointEventListResponseBody = {
  nodes?: [ 
    {
      eventDataItems?: [ 
        {
          eventList?: [ 
            {
              eventName?: string(name='EventName', example='开始发布'),
              eventType?: string(name='EventType', example='USER'),
              ts?: long(name='Ts', example='1614936817'),
              tsInMs?: string(name='TsInMs', example='1614936817123'),
            }
          ](name='EventList'),
          ts?: long(name='Ts', example='1614936817'),
        }
      ](name='EventDataItems'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeEndPointEventListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEndPointEventListResponseBody(name='body'),
}

async function describeEndPointEventListWithOptions(request: DescribeEndPointEventListRequest, runtime: Util.RuntimeOptions): DescribeEndPointEventListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.userIdList)) {
    query['UserIdList'] = request.userIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEndPointEventList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEndPointEventList(request: DescribeEndPointEventListRequest): DescribeEndPointEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEndPointEventListWithOptions(request, runtime);
}

model DescribeEndPointMetricDataRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  metrics?: string(name='Metrics', example='VIDEO_STUCK_CAMERA'),
  pubCallIdList?: string(name='PubCallIdList', example='testcall1,testcall2'),
  pubUserId?: string(name='PubUserId', example='testuserid'),
  subUserId?: string(name='SubUserId', example='testuserid'),
}

model DescribeEndPointMetricDataResponseBody = {
  pubMetrics?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1548670257'),
          y?: string(name='Y', example='230100'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='VIDEO_STUCK_CAMERA'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='PubMetrics'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  subMetrics?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1548670257'),
          y?: string(name='Y', example='230100'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='VIDEO_STUCK_CAMERA'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='SubMetrics'),
}

model DescribeEndPointMetricDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEndPointMetricDataResponseBody(name='body'),
}

async function describeEndPointMetricDataWithOptions(request: DescribeEndPointMetricDataRequest, runtime: Util.RuntimeOptions): DescribeEndPointMetricDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.metrics)) {
    query['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.pubCallIdList)) {
    query['PubCallIdList'] = request.pubCallIdList;
  }
  if (!Util.isUnset(request.pubUserId)) {
    query['PubUserId'] = request.pubUserId;
  }
  if (!Util.isUnset(request.subUserId)) {
    query['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEndPointMetricData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEndPointMetricData(request: DescribeEndPointMetricDataRequest): DescribeEndPointMetricDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEndPointMetricDataWithOptions(request, runtime);
}

model DescribeFaultDiagnosisFactorDistributionStatRequest {
  appId?: string(name='AppId', description='APP ID。', example='0rbd****'),
  endTs?: long(name='EndTs', example='1615892596****'),
  startTs?: long(name='StartTs', example='1615892596'),
}

model DescribeFaultDiagnosisFactorDistributionStatResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  statList?: [ 
    {
      factorId?: string(name='FactorId', example='1'),
      userCount?: int32(name='UserCount', example='100'),
      userRatio?: float(name='UserRatio', example='0.9239'),
    }
  ](name='StatList'),
}

model DescribeFaultDiagnosisFactorDistributionStatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFaultDiagnosisFactorDistributionStatResponseBody(name='body'),
}

async function describeFaultDiagnosisFactorDistributionStatWithOptions(request: DescribeFaultDiagnosisFactorDistributionStatRequest, runtime: Util.RuntimeOptions): DescribeFaultDiagnosisFactorDistributionStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFaultDiagnosisFactorDistributionStat',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFaultDiagnosisFactorDistributionStat(request: DescribeFaultDiagnosisFactorDistributionStatRequest): DescribeFaultDiagnosisFactorDistributionStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaultDiagnosisFactorDistributionStatWithOptions(request, runtime);
}

model DescribeFaultDiagnosisOverallDataRequest {
  appId?: string(name='AppId', description='APP ID', example='4eah****'),
  endTs?: long(name='EndTs', example='1615910399'),
  startTs?: long(name='StartTs', example='1615824000'),
  statDim?: string(name='StatDim', example='JOIN_SLOW_USER'),
}

model DescribeFaultDiagnosisOverallDataResponseBody = {
  metricData?: {
    nodes?: [ 
      {
        ext?: map[string]any(name='Ext'),
        x?: string(name='X', example='1615824000'),
        y?: string(name='Y', example='1'),
      }
    ](name='Nodes'),
  }(name='MetricData'),
  overallData?: {
    faultUserCount?: int32(name='FaultUserCount', example='20'),
    faultUserRatio?: float(name='FaultUserRatio', example='0.1'),
    totalUserCount?: int32(name='TotalUserCount', example='40'),
  }(name='OverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeFaultDiagnosisOverallDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFaultDiagnosisOverallDataResponseBody(name='body'),
}

async function describeFaultDiagnosisOverallDataWithOptions(request: DescribeFaultDiagnosisOverallDataRequest, runtime: Util.RuntimeOptions): DescribeFaultDiagnosisOverallDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  if (!Util.isUnset(request.statDim)) {
    query['StatDim'] = request.statDim;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFaultDiagnosisOverallData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFaultDiagnosisOverallData(request: DescribeFaultDiagnosisOverallDataRequest): DescribeFaultDiagnosisOverallDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaultDiagnosisOverallDataWithOptions(request, runtime);
}

model DescribeFaultDiagnosisUserDetailRequest {
  appId?: string(name='AppId', description='APP ID。', example='0rbd****'),
  channelId?: string(name='ChannelId', example='311'),
  createdTs?: long(name='CreatedTs', example='1615892596'),
  faultType?: string(name='FaultType', example='JOIN_SLOW'),
  queryCallUserInfo?: boolean(name='QueryCallUserInfo', example='true'),
  userId?: string(name='UserId', example='c906531af5f9****'),
}

model DescribeFaultDiagnosisUserDetailResponseBody = {
  callInfo?: {
    appId?: string(name='AppId', description='App ID。', example='0rbd****'),
    callStatus?: string(name='CallStatus', example='IN'),
    channelId?: string(name='ChannelId', example='311'),
    createdTs?: long(name='CreatedTs', example='1620957905'),
    destroyedTs?: long(name='DestroyedTs', example='1620958150'),
    duration?: long(name='Duration', example='100'),
  }(name='CallInfo'),
  factorList?: [ 
    {
      factorId?: string(name='FactorId', example='1'),
      faultSource?: string(name='FaultSource', example='LOCAL'),
      relatedEventDatas?: [ 
        {
          eventDataItems?: [ 
            {
              eventList?: [ 
                {
                  eventName?: string(name='EventName', example='开始发布'),
                  eventType?: string(name='EventType', example='USER'),
                  ts?: long(name='Ts', example='1614936817'),
                }
              ](name='EventList'),
              ts?: long(name='Ts', example='1614936817'),
            }
          ](name='EventDataItems'),
          role?: string(name='Role', example='SENDER'),
          userId?: string(name='UserId', example='0a497933****'),
        }
      ](name='RelatedEventDatas'),
      relatedMetricDatas?: [ 
        {
          nodes?: [ 
            {
              ext?: map[string]any(name='Ext'),
              x?: string(name='X', example='1615892596'),
              y?: string(name='Y', example='20'),
            }
          ](name='Nodes'),
          role?: string(name='Role', example='SENDER'),
          type?: string(name='Type', example='AUDIO_STUCK'),
          userId?: string(name='UserId', example='0a497933****'),
        }
      ](name='RelatedMetricDatas'),
    }
  ](name='FactorList'),
  faultMetricData?: {
    nodes?: [ 
      {
        x?: string(name='X', example='1620957900'),
        y?: string(name='Y', example='0.4540'),
      }
    ](name='Nodes'),
  }(name='FaultMetricData'),
  networkOperators?: [ string ](name='NetworkOperators'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  userDetail?: {
    createdTs?: long(name='CreatedTs', example='1620957919'),
    destroyedTs?: long(name='DestroyedTs', example='1620958150'),
    duration?: long(name='Duration', example='231'),
    location?: string(name='Location', example='浙江省-杭州市'),
    network?: string(name='Network', example='4G'),
    onlineDuration?: long(name='OnlineDuration', example='231'),
    onlinePeriods?: [ 
      {
        joinTs?: long(name='JoinTs', example='1620957919'),
        leaveTs?: long(name='LeaveTs', example='1620958150'),
      }
    ](name='OnlinePeriods'),
    os?: string(name='Os', example='iOS'),
    sdkVersion?: string(name='SdkVersion', example='1.0.0'),
    userId?: string(name='UserId', example='0a497933****'),
  }(name='UserDetail'),
}

model DescribeFaultDiagnosisUserDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFaultDiagnosisUserDetailResponseBody(name='body'),
}

async function describeFaultDiagnosisUserDetailWithOptions(request: DescribeFaultDiagnosisUserDetailRequest, runtime: Util.RuntimeOptions): DescribeFaultDiagnosisUserDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.faultType)) {
    query['FaultType'] = request.faultType;
  }
  if (!Util.isUnset(request.queryCallUserInfo)) {
    query['QueryCallUserInfo'] = request.queryCallUserInfo;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFaultDiagnosisUserDetail',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFaultDiagnosisUserDetail(request: DescribeFaultDiagnosisUserDetailRequest): DescribeFaultDiagnosisUserDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaultDiagnosisUserDetailWithOptions(request, runtime);
}

model DescribeFaultDiagnosisUserListRequest {
  appId?: string(name='AppId', description='APP ID。', example='0rbd****'),
  channelId?: string(name='ChannelId', example='311'),
  endTs?: long(name='EndTs', example='1615892596'),
  faultTypes?: string(name='FaultTypes', example='JOIN_SLOW,AUDIO_STUCK'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  startTs?: long(name='StartTs', example='1615806196'),
  userId?: string(name='UserId', example='c906531af5f9****'),
}

model DescribeFaultDiagnosisUserListResponseBody = {
  pageNo?: int32(name='PageNo', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  totalCnt?: int32(name='TotalCnt', example='20'),
  userList?: [ 
    {
      channelCreatedTs?: long(name='ChannelCreatedTs', example='1614936817'),
      channelId?: string(name='ChannelId', example='904'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      faultList?: [ 
        {
          faultType?: string(name='FaultType', example='JOIN_SLOW'),
        }
      ](name='FaultList'),
      userId?: string(name='UserId', example='123456'),
    }
  ](name='UserList'),
}

model DescribeFaultDiagnosisUserListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFaultDiagnosisUserListResponseBody(name='body'),
}

async function describeFaultDiagnosisUserListWithOptions(request: DescribeFaultDiagnosisUserListRequest, runtime: Util.RuntimeOptions): DescribeFaultDiagnosisUserListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.faultTypes)) {
    query['FaultTypes'] = request.faultTypes;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFaultDiagnosisUserList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFaultDiagnosisUserList(request: DescribeFaultDiagnosisUserListRequest): DescribeFaultDiagnosisUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaultDiagnosisUserListWithOptions(request, runtime);
}

model DescribeMPULayoutInfoListRequest {
  appId?: string(name='AppId', example='yourAppId'),
  layoutId?: long(name='LayoutId', example='2'),
  name?: string(name='Name', example='LayoutName'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='10'),
}

model DescribeMPULayoutInfoListResponseBody = {
  layouts?: {
    layout?: [ 
    {
      audioMixCount?: int32(name='AudioMixCount', example='3'),
      layoutId?: long(name='LayoutId', example='2'),
      name?: string(name='Name', example='LayoutName'),
      panes?: {
        panes?: [ 
        {
          height?: float(name='Height', example='0.5'),
          majorPane?: int32(name='MajorPane', example='0'),
          paneId?: int32(name='PaneId', example='0'),
          width?: float(name='Width', example='0.5'),
          x?: float(name='X', example='0.5'),
          y?: float(name='Y', example='0.5'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Panes')
      }(name='Panes'),
    }
  ](name='Layout')
  }(name='Layouts'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeMPULayoutInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMPULayoutInfoListResponseBody(name='body'),
}

async function describeMPULayoutInfoListWithOptions(request: DescribeMPULayoutInfoListRequest, runtime: Util.RuntimeOptions): DescribeMPULayoutInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.layoutId)) {
    query['LayoutId'] = request.layoutId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMPULayoutInfoList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMPULayoutInfoList(request: DescribeMPULayoutInfoListRequest): DescribeMPULayoutInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMPULayoutInfoListWithOptions(request, runtime);
}

model DescribePubUserListBySubUserRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  subUserId?: string(name='SubUserId', example='testuserid'),
}

model DescribePubUserListBySubUserResponseBody = {
  callStatus?: string(name='CallStatus', example='IN'),
  pubUserDetailList?: [ 
    {
      callIdList?: [ string ](name='CallIdList'),
      clientType?: string(name='ClientType', example='NATIVE'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      duration?: long(name='Duration', example='0'),
      location?: string(name='Location', example='浙江省-杭州市'),
      network?: string(name='Network', example='4G'),
      networkList?: [ string ](name='NetworkList'),
      onlineDuration?: long(name='OnlineDuration', example='0'),
      onlinePeriods?: [ 
        {
          joinTs?: long(name='JoinTs', example='1614936817'),
          leaveTs?: long(name='LeaveTs', example='1614936817'),
        }
      ](name='OnlinePeriods'),
      os?: string(name='Os', example='iOS'),
      osList?: [ string ](name='OsList'),
      roles?: [ string ](name='Roles'),
      sdkVersion?: string(name='SdkVersion', example='1.0.0'),
      sdkVersionList?: [ string ](name='SdkVersionList'),
      userId?: string(name='UserId', example='testuserid'),
      userIdAlias?: string(name='UserIdAlias', example='旁路转推'),
    }
  ](name='PubUserDetailList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  subUserDetail?: {
    clientType?: string(name='ClientType', example='NATIVE'),
    createdTs?: long(name='CreatedTs', example='1614936817'),
    destroyedTs?: long(name='DestroyedTs', example='1614936817'),
    duration?: long(name='Duration', example='0'),
    location?: string(name='Location', example='浙江省-杭州市'),
    network?: string(name='Network', example='4G'),
    networkList?: [ string ](name='NetworkList'),
    onlineDuration?: long(name='OnlineDuration', example='0'),
    onlinePeriods?: [ 
      {
        joinTs?: long(name='JoinTs', example='1614936817'),
        leaveTs?: long(name='LeaveTs', example='1614936817'),
      }
    ](name='OnlinePeriods'),
    os?: string(name='Os', example='iOS'),
    osList?: [ string ](name='OsList'),
    roles?: [ string ](name='Roles'),
    sdkVersion?: string(name='SdkVersion', example='1.0.0'),
    sdkVersionList?: [ string ](name='SdkVersionList'),
    userId?: string(name='UserId', example='testuserid'),
    userIdAlias?: string(name='UserIdAlias', example='旁路转推'),
  }(name='SubUserDetail'),
}

model DescribePubUserListBySubUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePubUserListBySubUserResponseBody(name='body'),
}

async function describePubUserListBySubUserWithOptions(request: DescribePubUserListBySubUserRequest, runtime: Util.RuntimeOptions): DescribePubUserListBySubUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.subUserId)) {
    query['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePubUserListBySubUser',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePubUserListBySubUser(request: DescribePubUserListBySubUserRequest): DescribePubUserListBySubUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePubUserListBySubUserWithOptions(request, runtime);
}

model DescribeQoeMetricDataRequest {
  appId?: string(name='AppId', description='APP ID。', example='testappid'),
  channelId?: string(name='ChannelId', example='testid'),
  createdTs?: long(name='CreatedTs', example='1614936817'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817'),
  userId?: string(name='UserId', example='testuserid'),
}

model DescribeQoeMetricDataResponseBody = {
  audioData?: [ 
    {
      nodes?: [ 
        {
          x?: string(name='X', example='1548670256'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='AUDIO'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='AudioData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  videoData?: [ 
    {
      nodes?: [ 
        {
          x?: string(name='X', example='1548670256'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='VIDEO_CAMERA'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='VideoData'),
}

model DescribeQoeMetricDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQoeMetricDataResponseBody(name='body'),
}

async function describeQoeMetricDataWithOptions(request: DescribeQoeMetricDataRequest, runtime: Util.RuntimeOptions): DescribeQoeMetricDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.createdTs)) {
    query['CreatedTs'] = request.createdTs;
  }
  if (!Util.isUnset(request.destroyedTs)) {
    query['DestroyedTs'] = request.destroyedTs;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQoeMetricData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQoeMetricData(request: DescribeQoeMetricDataRequest): DescribeQoeMetricDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQoeMetricDataWithOptions(request, runtime);
}

model DescribeQualityAreaDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID', example='0rbd****'),
  endDate?: long(name='EndDate', example='1615910399'),
  parentArea?: string(name='ParentArea', example='中国'),
  startDate?: long(name='StartDate', example='1615824000'),
}

model DescribeQualityAreaDistributionStatDataResponseBody = {
  qualityStatDataList?: [ 
    {
      audioDelay?: long(name='AudioDelay', example='347'),
      audioHighQualityTransmissionRate?: string(name='AudioHighQualityTransmissionRate', example='0.9933'),
      audioStuckRate?: string(name='AudioStuckRate', example='0.0021'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.6654'),
      joinChannelSucFiveSecRate?: string(name='JoinChannelSucFiveSecRate', example='0.9338'),
      joinChannelSucRate?: string(name='JoinChannelSucRate', example='0.9356'),
      name?: string(name='Name', example='中国_浙江省'),
      videoDelay?: long(name='VideoDelay', example='291'),
      videoFirstPicDuration?: long(name='VideoFirstPicDuration', example='1363'),
      videoHighQualityTransmissionRate?: string(name='VideoHighQualityTransmissionRate', example='0.9967'),
      videoStuckRate?: string(name='VideoStuckRate', example='0.0058'),
    }
  ](name='QualityStatDataList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityAreaDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQualityAreaDistributionStatDataResponseBody(name='body'),
}

async function describeQualityAreaDistributionStatDataWithOptions(request: DescribeQualityAreaDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeQualityAreaDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.parentArea)) {
    query['ParentArea'] = request.parentArea;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQualityAreaDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQualityAreaDistributionStatData(request: DescribeQualityAreaDistributionStatDataRequest): DescribeQualityAreaDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQualityAreaDistributionStatDataWithOptions(request, runtime);
}

model DescribeQualityDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID', example='0rbd****'),
  endDate?: long(name='EndDate', example='1615910399'),
  startDate?: long(name='StartDate', example='1615824000'),
  statDim?: string(name='StatDim', example='CHANNEL_ONLINE'),
}

model DescribeQualityDistributionStatDataResponseBody = {
  qualityStatDataList?: [ 
    {
      audioDelay?: long(name='AudioDelay', example='554'),
      audioHighQualityTransmissionRate?: string(name='AudioHighQualityTransmissionRate', example='0.9953'),
      audioStuckRate?: string(name='AudioStuckRate', example='0.0014'),
      callDurationRatio?: string(name='CallDurationRatio', example='1.0000'),
      joinChannelSucFiveSecRate?: string(name='JoinChannelSucFiveSecRate', example='0.9560'),
      joinChannelSucRate?: string(name='JoinChannelSucRate', example='0.9575'),
      name?: string(name='Name', example='ONE_TO_FIVE'),
      videoDelay?: long(name='VideoDelay', example='517'),
      videoFirstPicDuration?: long(name='VideoFirstPicDuration', example='1299'),
      videoHighQualityTransmissionRate?: string(name='VideoHighQualityTransmissionRate', example='0.9981'),
      videoStuckRate?: string(name='VideoStuckRate', example='0.0264'),
    }
  ](name='QualityStatDataList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQualityDistributionStatDataResponseBody(name='body'),
}

async function describeQualityDistributionStatDataWithOptions(request: DescribeQualityDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeQualityDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.statDim)) {
    query['StatDim'] = request.statDim;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQualityDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQualityDistributionStatData(request: DescribeQualityDistributionStatDataRequest): DescribeQualityDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQualityDistributionStatDataWithOptions(request, runtime);
}

model DescribeQualityOsSdkVersionDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID', example='0rbd****'),
  endDate?: long(name='EndDate', example='1615910399'),
  startDate?: long(name='StartDate', example='1615824000'),
}

model DescribeQualityOsSdkVersionDistributionStatDataResponseBody = {
  qualityOsSdkVersionStatDataList?: [ 
    {
      audioDelay?: long(name='AudioDelay', example='248'),
      audioHighQualityTransmissionRate?: string(name='AudioHighQualityTransmissionRate', example='0.9987'),
      audioStuckRate?: string(name='AudioStuckRate', example='0.0011'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.0984'),
      joinChannelSucFiveSecRate?: string(name='JoinChannelSucFiveSecRate', example='0.8276'),
      joinChannelSucRate?: string(name='JoinChannelSucRate', example='0.8276'),
      name?: string(name='Name', example='2.1.0.210316.dev--release/rtcsdk_v2.1'),
      os?: string(name='Os', example='macOS'),
      videoDelay?: long(name='VideoDelay', example='333'),
      videoFirstPicDuration?: long(name='VideoFirstPicDuration', example='5643'),
      videoHighQualityTransmissionRate?: string(name='VideoHighQualityTransmissionRate', example='0.9997'),
      videoStuckRate?: string(name='VideoStuckRate', example='0.0054'),
    }
  ](name='QualityOsSdkVersionStatDataList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityOsSdkVersionDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQualityOsSdkVersionDistributionStatDataResponseBody(name='body'),
}

async function describeQualityOsSdkVersionDistributionStatDataWithOptions(request: DescribeQualityOsSdkVersionDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeQualityOsSdkVersionDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQualityOsSdkVersionDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQualityOsSdkVersionDistributionStatData(request: DescribeQualityOsSdkVersionDistributionStatDataRequest): DescribeQualityOsSdkVersionDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQualityOsSdkVersionDistributionStatDataWithOptions(request, runtime);
}

model DescribeQualityOverallDataRequest {
  appId?: string(name='AppId', description='APP ID', example='0rbd****'),
  endDate?: long(name='EndDate', example='1615910399'),
  startDate?: long(name='StartDate', example='1615824000'),
  types?: string(name='Types', example='JOIN_CHANNEL_SUC_RATE'),
}

model DescribeQualityOverallDataResponseBody = {
  qualityOverallData?: [ 
    {
      average?: string(name='Average', example='0.9376'),
      nodes?: [ 
        {
          x?: string(name='X', example='1615831200'),
          y?: string(name='Y', example='1.0000'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='JOIN_CHANNEL_SUC_RATE'),
    }
  ](name='QualityOverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityOverallDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQualityOverallDataResponseBody(name='body'),
}

async function describeQualityOverallDataWithOptions(request: DescribeQualityOverallDataRequest, runtime: Util.RuntimeOptions): DescribeQualityOverallDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQualityOverallData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQualityOverallData(request: DescribeQualityOverallDataRequest): DescribeQualityOverallDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQualityOverallDataWithOptions(request, runtime);
}

model DescribeRecordFilesRequest {
  appId?: string(name='AppId', example='yourAppId'),
  channelId?: string(name='ChannelId', example='yourChannelId'),
  endTime?: string(name='EndTime', example='2020-11-02T17:36:00Z'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  startTime?: string(name='StartTime', example='2020-11-01T17:36:00Z'),
  taskIds?: [ string ](name='TaskIds', example='yourTaskId'),
}

model DescribeRecordFilesResponseBody = {
  recordFiles?: [ 
    {
      appId?: string(name='AppId', example='yourAppId'),
      channelId?: string(name='ChannelId', example='yourChannelId'),
      createTime?: string(name='CreateTime', example='2020-10-02T17:36:00Z'),
      duration?: float(name='Duration', example='1800'),
      startTime?: string(name='StartTime', example='2020-11-01T17:36:00Z'),
      stopTime?: string(name='StopTime', example='2020-11-02T17:36:00Z'),
      taskId?: string(name='TaskId', example='yourTaskId'),
      url?: string(name='Url', example='http://rtc-demo.oss-cn-****.aliyuncs.com/record/10-15-1/****/record-002_yourTaskId/example.m3u8'),
    }
  ](name='RecordFiles'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b****'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeRecordFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecordFilesResponseBody(name='body'),
}

async function describeRecordFilesWithOptions(request: DescribeRecordFilesRequest, runtime: Util.RuntimeOptions): DescribeRecordFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecordFiles',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecordFiles(request: DescribeRecordFilesRequest): DescribeRecordFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordFilesWithOptions(request, runtime);
}

model DescribeRecordTemplatesRequest {
  appId?: string(name='AppId', example='yourAppId'),
  ownerId?: long(name='OwnerId', description='1'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  templateIds?: [ string ](name='TemplateIds', example='76dasgb****'),
}

model DescribeRecordTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='C292B80E-5175-4BA4-8CC292B80E-5175-4BA4-8C1E-2ABEC4D7C2FE1E-2ABEC4D7****'),
  templates?: [ 
    {
      backgroundColor?: int32(name='BackgroundColor', example='0'),
      backgrounds?: [ 
        {
          display?: int32(name='Display', example='0'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Backgrounds'),
      clockWidgets?: [ 
        {
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='ClockWidgets'),
      createTime?: string(name='CreateTime', example='2020-09-04T06:22:15Z'),
      delayStopTime?: int32(name='DelayStopTime', example='180'),
      enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false'),
      fileSplitInterval?: int32(name='FileSplitInterval', example='1800'),
      formats?: [ string ](name='Formats'),
      httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback'),
      layoutIds?: [ long ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode', example='50'),
      mnsQueue?: string(name='MnsQueue', example='record-callback-queue'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket', example='rtc-record-oss'),
      ossFilePrefix?: string(name='OssFilePrefix', example='record/pre/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
      taskProfile?: string(name='TaskProfile', example='4IN_1080P'),
      templateId?: string(name='TemplateId', example='1ca698e2-57fa-4314-8e11-00d950d4****'),
      watermarks?: [ 
        {
          alpha?: float(name='Alpha', example='0'),
          display?: int32(name='Display', example='0'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Watermarks'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeRecordTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecordTemplatesResponseBody(name='body'),
}

async function describeRecordTemplatesWithOptions(request: DescribeRecordTemplatesRequest, runtime: Util.RuntimeOptions): DescribeRecordTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.templateIds)) {
    query['TemplateIds'] = request.templateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecordTemplates',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecordTemplates(request: DescribeRecordTemplatesRequest): DescribeRecordTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordTemplatesWithOptions(request, runtime);
}

model DescribeRtcChannelListRequest {
  appId?: string(name='AppId', example='aoe****'),
  channelId?: string(name='ChannelId', example='testChannel'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  serviceArea?: string(name='ServiceArea', example='cn'),
  sortType?: string(name='SortType', example='desc'),
  timePoint?: string(name='TimePoint', example='2018-01-29T00:00:00Z'),
  userId?: string(name='UserId', example='testUser'),
}

model DescribeRtcChannelListResponseBody = {
  channelList?: {
    channelList?: [ 
    {
      callArea?: {
        callArea?: [ string ](name='CallArea')
      }(name='CallArea'),
      channelId?: string(name='ChannelId', example='testChannel'),
      endTime?: string(name='EndTime', example='2018-01-29T02:00:00Z'),
      startTime?: string(name='StartTime', example='2018-01-29T01:00:00Z'),
      totalUserCnt?: long(name='TotalUserCnt', example='2'),
    }
  ](name='ChannelList')
  }(name='ChannelList'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  totalCnt?: long(name='TotalCnt', example='1000'),
}

model DescribeRtcChannelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcChannelListResponseBody(name='body'),
}

async function describeRtcChannelListWithOptions(request: DescribeRtcChannelListRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcChannelList',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcChannelList(request: DescribeRtcChannelListRequest): DescribeRtcChannelListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelListWithOptions(request, runtime);
}

model DescribeRtcChannelMetricRequest {
  appId?: string(name='AppId', example='aoe****'),
  channelId?: string(name='ChannelId', example='testId'),
  ownerId?: long(name='OwnerId'),
  timePoint?: string(name='TimePoint', example='2018-01-29T00:00:00Z'),
}

model DescribeRtcChannelMetricResponseBody = {
  channelMetricInfo?: {
    channelMetric?: {
      channelId?: string(name='ChannelId', example='example_channel'),
      endTime?: string(name='EndTime', example='2019-06-06T18:57:00Z'),
      pubUserCount?: int32(name='PubUserCount', example='10'),
      startTime?: string(name='StartTime', example='2019-06-06T17:57:00Z'),
      subUserCount?: int32(name='SubUserCount', example='25'),
      userCount?: int32(name='UserCount', example='30'),
    }(name='ChannelMetric'),
    duration?: {
      pubDuration?: {
        audio?: int32(name='Audio', example='100'),
        content?: int32(name='Content', example='100'),
        video1080?: int32(name='Video1080', example='100'),
        video360?: int32(name='Video360', example='100'),
        video720?: int32(name='Video720', example='100'),
      }(name='PubDuration'),
      subDuration?: {
        audio?: int32(name='Audio', example='100'),
        content?: int32(name='Content', example='100'),
        video1080?: int32(name='Video1080', example='100'),
        video360?: int32(name='Video360', example='100'),
        video720?: int32(name='Video720', example='100'),
      }(name='SubDuration'),
    }(name='Duration'),
  }(name='ChannelMetricInfo'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcChannelMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcChannelMetricResponseBody(name='body'),
}

async function describeRtcChannelMetricWithOptions(request: DescribeRtcChannelMetricRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcChannelMetric',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcChannelMetric(request: DescribeRtcChannelMetricRequest): DescribeRtcChannelMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelMetricWithOptions(request, runtime);
}

model DescribeRtcDurationDataRequest {
  appId?: string(name='AppId', example='yourAppId'),
  endTime?: string(name='EndTime', example='2020-02-04T07:00:00Z'),
  interval?: string(name='Interval', example='3600'),
  ownerId?: long(name='OwnerId'),
  serviceArea?: string(name='ServiceArea', example='CN'),
  startTime?: string(name='StartTime', example='2020-02-04T05:00:00Z'),
}

model DescribeRtcDurationDataResponseBody = {
  durationDataPerInterval?: {
    durationModule?: [ 
    {
      audioDuration?: long(name='AudioDuration', example='200'),
      contentDuration?: long(name='ContentDuration', example='200'),
      timeStamp?: string(name='TimeStamp', example='2020-02-04T05:00:00Z'),
      totalDuration?: long(name='TotalDuration', example='1000'),
      v1080Duration?: long(name='V1080Duration', example='300'),
      v360Duration?: long(name='V360Duration', example='300'),
      v720Duration?: long(name='V720Duration', example='200'),
    }
  ](name='DurationModule')
  }(name='DurationDataPerInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcDurationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcDurationDataResponseBody(name='body'),
}

async function describeRtcDurationDataWithOptions(request: DescribeRtcDurationDataRequest, runtime: Util.RuntimeOptions): DescribeRtcDurationDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcDurationData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcDurationData(request: DescribeRtcDurationDataRequest): DescribeRtcDurationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcDurationDataWithOptions(request, runtime);
}

model DescribeRtcPeakChannelCntDataRequest {
  appId?: string(name='AppId', example='yourAppId'),
  endTime?: string(name='EndTime', example='2018-01-29T00:00:00Z'),
  interval?: string(name='Interval', example='3600'),
  ownerId?: long(name='OwnerId'),
  serviceArea?: string(name='ServiceArea', example='CN'),
  startTime?: string(name='StartTime', example='2018-01-29T00:00:00Z'),
}

model DescribeRtcPeakChannelCntDataResponseBody = {
  peakChannelCntDataPerInterval?: {
    peakChannelCntModule?: [ 
    {
      activeChannelPeak?: long(name='ActiveChannelPeak', example='10'),
      activeChannelPeakTime?: string(name='ActiveChannelPeakTime', example='2018-01-29T00:01:00Z'),
      timeStamp?: string(name='TimeStamp', example='2018-01-29T00:00:00Z'),
    }
  ](name='PeakChannelCntModule')
  }(name='PeakChannelCntDataPerInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcPeakChannelCntDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcPeakChannelCntDataResponseBody(name='body'),
}

async function describeRtcPeakChannelCntDataWithOptions(request: DescribeRtcPeakChannelCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcPeakChannelCntDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcPeakChannelCntData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcPeakChannelCntData(request: DescribeRtcPeakChannelCntDataRequest): DescribeRtcPeakChannelCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcPeakChannelCntDataWithOptions(request, runtime);
}

model DescribeRtcUserCntDataRequest {
  appId?: string(name='AppId', example='yourAppId'),
  endTime?: string(name='EndTime', example='2018-01-29T01:00:00Z'),
  interval?: string(name='Interval', example='3600'),
  ownerId?: long(name='OwnerId'),
  serviceArea?: string(name='ServiceArea', example='CN'),
  startTime?: string(name='StartTime', example='2018-01-29T00:00:00Z'),
}

model DescribeRtcUserCntDataResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  userCntDataPerInterval?: {
    userCntModule?: [ 
    {
      activeUserCnt?: long(name='ActiveUserCnt', example='10'),
      timeStamp?: string(name='TimeStamp', example='2018-01-29T00:00:00Z'),
    }
  ](name='UserCntModule')
  }(name='UserCntDataPerInterval'),
}

model DescribeRtcUserCntDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcUserCntDataResponseBody(name='body'),
}

async function describeRtcUserCntDataWithOptions(request: DescribeRtcUserCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcUserCntDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serviceArea)) {
    query['ServiceArea'] = request.serviceArea;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcUserCntData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRtcUserCntData(request: DescribeRtcUserCntDataRequest): DescribeRtcUserCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcUserCntDataWithOptions(request, runtime);
}

model DescribeUsageAreaDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID', example='0rbd****'),
  endDate?: string(name='EndDate', example='1615910399'),
  parentArea?: string(name='ParentArea'),
  startDate?: string(name='StartDate', example='1615824000'),
}

model DescribeUsageAreaDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageAreaStatList?: [ 
    {
      audioCallDuration?: int32(name='AudioCallDuration', example='45'),
      name?: string(name='Name', example='中国'),
      totalCallDuration?: int32(name='TotalCallDuration', example='4821'),
      videoCallDuration?: int32(name='VideoCallDuration', example='4776'),
    }
  ](name='UsageAreaStatList'),
}

model DescribeUsageAreaDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsageAreaDistributionStatDataResponseBody(name='body'),
}

async function describeUsageAreaDistributionStatDataWithOptions(request: DescribeUsageAreaDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeUsageAreaDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.parentArea)) {
    query['ParentArea'] = request.parentArea;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsageAreaDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsageAreaDistributionStatData(request: DescribeUsageAreaDistributionStatDataRequest): DescribeUsageAreaDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsageAreaDistributionStatDataWithOptions(request, runtime);
}

model DescribeUsageDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID'),
  endDate?: long(name='EndDate', example='1615910399'),
  startDate?: long(name='StartDate', example='1615824000'),
  statDim?: string(name='StatDim', example='CHANNEL_ONLINE'),
}

model DescribeUsageDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageStatList?: [ 
    {
      audioCallDuration?: long(name='AudioCallDuration', example='51'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.9782'),
      name?: string(name='Name', example='ONE_TO_FIVE'),
      totalCallDuration?: long(name='TotalCallDuration', example='10636'),
      videoCallDuration?: long(name='VideoCallDuration', example='10585'),
    }
  ](name='UsageStatList'),
}

model DescribeUsageDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsageDistributionStatDataResponseBody(name='body'),
}

async function describeUsageDistributionStatDataWithOptions(request: DescribeUsageDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeUsageDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.statDim)) {
    query['StatDim'] = request.statDim;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsageDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsageDistributionStatData(request: DescribeUsageDistributionStatDataRequest): DescribeUsageDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsageDistributionStatDataWithOptions(request, runtime);
}

model DescribeUsageOsSdkVersionDistributionStatDataRequest {
  appId?: string(name='AppId', description='APP ID', example='0rbd****'),
  endDate?: long(name='EndDate', example='1615910399'),
  startDate?: long(name='StartDate', example='1615824000'),
}

model DescribeUsageOsSdkVersionDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageOsSdkVersionStatList?: [ 
    {
      audioCallDuration?: long(name='AudioCallDuration', example='3'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.0984'),
      name?: string(name='Name', example='1.0.0'),
      os?: string(name='Os', example='macOS'),
      totalCallDuration?: long(name='TotalCallDuration', example='476'),
      videoCallDuration?: long(name='VideoCallDuration', example='473'),
    }
  ](name='UsageOsSdkVersionStatList'),
}

model DescribeUsageOsSdkVersionDistributionStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsageOsSdkVersionDistributionStatDataResponseBody(name='body'),
}

async function describeUsageOsSdkVersionDistributionStatDataWithOptions(request: DescribeUsageOsSdkVersionDistributionStatDataRequest, runtime: Util.RuntimeOptions): DescribeUsageOsSdkVersionDistributionStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsageOsSdkVersionDistributionStatData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsageOsSdkVersionDistributionStatData(request: DescribeUsageOsSdkVersionDistributionStatDataRequest): DescribeUsageOsSdkVersionDistributionStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsageOsSdkVersionDistributionStatDataWithOptions(request, runtime);
}

model DescribeUsageOverallDataRequest {
  appId?: string(name='AppId', description='APP ID', example='a2hz****'),
  endDate?: long(name='EndDate', example='1615910399'),
  startDate?: long(name='StartDate', example='1615824000'),
  types?: string(name='Types', example='ONLINE_USER_PEAK'),
}

model DescribeUsageOverallDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageOverallData?: [ 
    {
      nodes?: [ 
        {
          x?: string(name='X', example='1615824000'),
          y?: string(name='Y', example='1'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='ONLINE_USER_PEAK'),
    }
  ](name='UsageOverallData'),
}

model DescribeUsageOverallDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsageOverallDataResponseBody(name='body'),
}

async function describeUsageOverallDataWithOptions(request: DescribeUsageOverallDataRequest, runtime: Util.RuntimeOptions): DescribeUsageOverallDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsageOverallData',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsageOverallData(request: DescribeUsageOverallDataRequest): DescribeUsageOverallDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsageOverallDataWithOptions(request, runtime);
}

model DescribeUserInfoInChannelRequest {
  appId?: string(name='AppId', example='4eah****'),
  channelId?: string(name='ChannelId', example='1234'),
  ownerId?: long(name='OwnerId'),
  userId?: string(name='UserId', example='testId'),
}

model DescribeUserInfoInChannelResponseBody = {
  isChannelExist?: boolean(name='IsChannelExist', example='true'),
  isInChannel?: boolean(name='IsInChannel', example='true'),
  property?: [ 
    {
      join?: int32(name='Join', example='1557909133'),
      role?: int32(name='Role', example='1'),
      session?: string(name='Session', example='xa744sxx8rtobgj****'),
    }
  ](name='Property'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
}

model DescribeUserInfoInChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserInfoInChannelResponseBody(name='body'),
}

async function describeUserInfoInChannelWithOptions(request: DescribeUserInfoInChannelRequest, runtime: Util.RuntimeOptions): DescribeUserInfoInChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserInfoInChannel',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserInfoInChannel(request: DescribeUserInfoInChannelRequest): DescribeUserInfoInChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserInfoInChannelWithOptions(request, runtime);
}

model DisableAutoLiveStreamRuleRequest {
  appId?: string(name='AppId', example='eo85****'),
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId', example='12'),
}

model DisableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DisableAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAutoLiveStreamRuleResponseBody(name='body'),
}

async function disableAutoLiveStreamRuleWithOptions(request: DisableAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DisableAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableAutoLiveStreamRule(request: DisableAutoLiveStreamRuleRequest): DisableAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAutoLiveStreamRuleWithOptions(request, runtime);
}

model EnableAutoLiveStreamRuleRequest {
  appId?: string(name='AppId', example='eo85****'),
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId', example='12'),
}

model EnableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model EnableAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAutoLiveStreamRuleResponseBody(name='body'),
}

async function enableAutoLiveStreamRuleWithOptions(request: EnableAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): EnableAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableAutoLiveStreamRule(request: EnableAutoLiveStreamRuleRequest): EnableAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAutoLiveStreamRuleWithOptions(request, runtime);
}

model GetMPUTaskStatusRequest {
  appId?: string(name='AppId', example='yourAppId'),
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId', example='yourTaskId'),
}

model GetMPUTaskStatusResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  status?: int32(name='Status', example='0'),
}

model GetMPUTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMPUTaskStatusResponseBody(name='body'),
}

async function getMPUTaskStatusWithOptions(request: GetMPUTaskStatusRequest, runtime: Util.RuntimeOptions): GetMPUTaskStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMPUTaskStatus',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMPUTaskStatus(request: GetMPUTaskStatusRequest): GetMPUTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMPUTaskStatusWithOptions(request, runtime);
}

model ModifyAppRequest {
  appId?: string(name='AppId', example='ioeh****'),
  appName?: string(name='AppName', example='defaultName'),
  ownerId?: long(name='OwnerId'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyAppStreamingOutTemplateRequest {
  appId?: string(name='AppId', example='wv7N****'),
  streamingOutTemplate?: {
    enableVad?: boolean(name='EnableVad'),
    layoutIds?: [ string ](name='LayoutIds'),
    mediaEncode?: int32(name='MediaEncode', example='1'),
    name?: string(name='Name', example='模版'),
    templateId?: string(name='TemplateId', example='ac7N****'),
  }(name='StreamingOutTemplate'),
}

model ModifyAppStreamingOutTemplateShrinkRequest {
  appId?: string(name='AppId', example='wv7N****'),
  streamingOutTemplateShrink?: string(name='StreamingOutTemplate'),
}

model ModifyAppStreamingOutTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30D41049-D02D-1C21-86AE-B3E5FD805C27'),
  templateId?: string(name='TemplateId', example='ac7N****'),
}

model ModifyAppStreamingOutTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppStreamingOutTemplateResponseBody(name='body'),
}

async function modifyAppStreamingOutTemplateWithOptions(tmpReq: ModifyAppStreamingOutTemplateRequest, runtime: Util.RuntimeOptions): ModifyAppStreamingOutTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyAppStreamingOutTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.streamingOutTemplate)) {
    request.streamingOutTemplateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamingOutTemplate, 'StreamingOutTemplate', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.streamingOutTemplateShrink)) {
    query['StreamingOutTemplate'] = request.streamingOutTemplateShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppStreamingOutTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppStreamingOutTemplate(request: ModifyAppStreamingOutTemplateRequest): ModifyAppStreamingOutTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppStreamingOutTemplateWithOptions(request, runtime);
}

model ModifyMPULayoutRequest {
  appId?: string(name='AppId', example='yourAppId'),
  audioMixCount?: int32(name='AudioMixCount', example='3'),
  layoutId?: long(name='LayoutId', example='10117'),
  name?: string(name='Name', example='LayoutName'),
  ownerId?: long(name='OwnerId'),
  panes?: [ 
    {
      height?: float(name='Height', example='0.2456'),
      majorPane?: int32(name='MajorPane', example='0'),
      paneId?: int32(name='PaneId', example='0'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Panes'),
}

model ModifyMPULayoutResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model ModifyMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMPULayoutResponseBody(name='body'),
}

async function modifyMPULayoutWithOptions(request: ModifyMPULayoutRequest, runtime: Util.RuntimeOptions): ModifyMPULayoutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.audioMixCount)) {
    query['AudioMixCount'] = request.audioMixCount;
  }
  if (!Util.isUnset(request.layoutId)) {
    query['LayoutId'] = request.layoutId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.panes)) {
    query['Panes'] = request.panes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMPULayout',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMPULayout(request: ModifyMPULayoutRequest): ModifyMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMPULayoutWithOptions(request, runtime);
}

model RemoveTerminalsRequest {
  appId?: string(name='AppId', example='yourAppId'),
  channelId?: string(name='ChannelId', example='yourChannelId'),
  ownerId?: long(name='OwnerId'),
  terminalIds?: [ string ](name='TerminalIds', example='1811xxxx'),
}

model RemoveTerminalsResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  terminals?: {
    terminal?: [ 
    {
      code?: int32(name='Code', example='0'),
      id?: string(name='Id', example='1811****'),
      message?: string(name='Message', example='Success'),
    }
  ](name='Terminal')
  }(name='Terminals'),
}

model RemoveTerminalsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTerminalsResponseBody(name='body'),
}

async function removeTerminalsWithOptions(request: RemoveTerminalsRequest, runtime: Util.RuntimeOptions): RemoveTerminalsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.terminalIds)) {
    query['TerminalIds'] = request.terminalIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTerminals',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeTerminals(request: RemoveTerminalsRequest): RemoveTerminalsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTerminalsWithOptions(request, runtime);
}

model StartMPUTaskRequest {
  appId?: string(name='AppId', example='yourAppId'),
  backgroundColor?: int32(name='BackgroundColor', example='0'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds'),
  channelId?: string(name='ChannelId', example='yourChannelId'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      borderColor?: long(name='BorderColor', example='0'),
      borderWidth?: int32(name='BorderWidth', example='1'),
      box?: boolean(name='Box', example='false'),
      boxBorderWidth?: int32(name='BoxBorderWidth', example='0'),
      boxColor?: long(name='BoxColor', example='0'),
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets'),
  cropMode?: int32(name='CropMode', example='1'),
  enhancedParam?: {
    enablePortraitSegmentation?: boolean(name='EnablePortraitSegmentation', example='false'),
  }(name='EnhancedParam'),
  layoutIds?: [ long ](name='LayoutIds', example='1'),
  mediaEncode?: int32(name='MediaEncode', example='2'),
  mixMode?: int32(name='MixMode', example='0'),
  ownerId?: long(name='OwnerId'),
  payloadType?: int32(name='PayloadType', example='0'),
  reportVad?: int32(name='ReportVad', example='0'),
  rtpExtInfo?: int32(name='RtpExtInfo', example='0'),
  sourceType?: string(name='SourceType', example='camera'),
  streamType?: int32(name='StreamType', example='0'),
  streamURL?: string(name='StreamURL', example='rtmp://example.com/live/stream'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', example='audioUserID'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID'),
  taskId?: string(name='TaskId', example='yourTaskId'),
  taskType?: int32(name='TaskType', example='0'),
  timeStampRef?: long(name='TimeStampRef', example='15273582735'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      segmentType?: int32(name='SegmentType', example='0'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          alpha?: float(name='Alpha', example='0'),
          borderColor?: long(name='BorderColor', example='0'),
          borderWidth?: int32(name='BorderWidth', example='1'),
          box?: boolean(name='Box', example='false'),
          boxBorderWidth?: int32(name='BoxBorderWidth', example='0'),
          boxColor?: long(name='BoxColor', example='0'),
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.2456'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes'),
  vadInterval?: long(name='VadInterval', example='86400'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks'),
}

model StartMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StartMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartMPUTaskResponseBody(name='body'),
}

async function startMPUTaskWithOptions(request: StartMPUTaskRequest, runtime: Util.RuntimeOptions): StartMPUTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mixMode)) {
    query['MixMode'] = request.mixMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payloadType)) {
    query['PayloadType'] = request.payloadType;
  }
  if (!Util.isUnset(request.reportVad)) {
    query['ReportVad'] = request.reportVad;
  }
  if (!Util.isUnset(request.rtpExtInfo)) {
    query['RtpExtInfo'] = request.rtpExtInfo;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  if (!Util.isUnset(request.streamURL)) {
    query['StreamURL'] = request.streamURL;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.timeStampRef)) {
    query['TimeStampRef'] = request.timeStampRef;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  if (!Util.isUnset(request.vadInterval)) {
    query['VadInterval'] = request.vadInterval;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.enhancedParam)) {
    bodyFlat['EnhancedParam'] = request.enhancedParam;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMPUTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startMPUTask(request: StartMPUTaskRequest): StartMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMPUTaskWithOptions(request, runtime);
}

model StartRecordTaskRequest {
  appId?: string(name='AppId', example='yourAppId'),
  channelId?: string(name='ChannelId', example='yourChannelId'),
  cropMode?: long(name='CropMode', example='1'),
  layoutIds?: [ long ](name='LayoutIds', example='1111'),
  mediaEncode?: int32(name='MediaEncode', example='20'),
  mixMode?: int32(name='MixMode', example='1'),
  ownerId?: long(name='OwnerId'),
  sourceType?: string(name='SourceType', example='camera'),
  streamType?: int32(name='StreamType', example='0'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', example='1'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', example='1'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', example='1'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID'),
  taskId?: string(name='TaskId', example='yourTaskId'),
  taskProfile?: string(name='TaskProfile', example='4IN_1080P'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', example='1'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', example='1'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', example='1'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor', example='1'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes'),
}

model StartRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b****'),
}

model StartRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRecordTaskResponseBody(name='body'),
}

async function startRecordTaskWithOptions(request: StartRecordTaskRequest, runtime: Util.RuntimeOptions): StartRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mixMode)) {
    query['MixMode'] = request.mixMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRecordTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRecordTask(request: StartRecordTaskRequest): StartRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRecordTaskWithOptions(request, runtime);
}

model StopMPUTaskRequest {
  appId?: string(name='AppId', example='yourAppId'),
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId', example='yourTaskId'),
}

model StopMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StopMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopMPUTaskResponseBody(name='body'),
}

async function stopMPUTaskWithOptions(request: StopMPUTaskRequest, runtime: Util.RuntimeOptions): StopMPUTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopMPUTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopMPUTask(request: StopMPUTaskRequest): StopMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMPUTaskWithOptions(request, runtime);
}

model StopRecordTaskRequest {
  appId?: string(name='AppId', example='yourAppId'),
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId', example='yourTaskId'),
}

model StopRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StopRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopRecordTaskResponseBody(name='body'),
}

async function stopRecordTaskWithOptions(request: StopRecordTaskRequest, runtime: Util.RuntimeOptions): StopRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRecordTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopRecordTask(request: StopRecordTaskRequest): StopRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRecordTaskWithOptions(request, runtime);
}

model UpdateAutoLiveStreamRuleRequest {
  appId?: string(name='AppId', example='eo85****'),
  callBack?: string(name='CallBack', example='http://example.com/callback'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
  channelIds?: [ string ](name='ChannelIds'),
  mediaEncode?: int32(name='MediaEncode', example='20'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}'),
  ruleId?: int32(name='RuleId', example='12'),
  ruleName?: string(name='RuleName', example='testRule'),
}

model UpdateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutoLiveStreamRuleResponseBody(name='body'),
}

async function updateAutoLiveStreamRuleWithOptions(request: UpdateAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): UpdateAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.callBack)) {
    query['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.channelIdPrefixes)) {
    query['ChannelIdPrefixes'] = request.channelIdPrefixes;
  }
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutoLiveStreamRule',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutoLiveStreamRule(request: UpdateAutoLiveStreamRuleRequest): UpdateAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutoLiveStreamRuleWithOptions(request, runtime);
}

model UpdateMPUTaskRequest {
  appId?: string(name='AppId', example='yourAppId'),
  backgroundColor?: int32(name='BackgroundColor', example='0'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      borderColor?: long(name='BorderColor', example='0'),
      borderWidth?: int32(name='BorderWidth', example='1'),
      box?: boolean(name='Box', example='false'),
      boxBorderWidth?: int32(name='BoxBorderWidth', example='0'),
      boxColor?: long(name='BoxColor', example='0'),
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets'),
  cropMode?: int32(name='CropMode', example='1'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: int32(name='MediaEncode', example='2'),
  mixMode?: int32(name='MixMode', example='0'),
  ownerId?: long(name='OwnerId'),
  sourceType?: string(name='SourceType', example='camera'),
  streamType?: int32(name='StreamType', example='0'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  taskId?: string(name='TaskId', example='testId'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      segmentType?: int32(name='SegmentType', example='0'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          alpha?: float(name='Alpha', example='0'),
          borderColor?: long(name='BorderColor', example='0'),
          borderWidth?: int32(name='BorderWidth', example='1'),
          box?: boolean(name='Box', example='false'),
          boxBorderWidth?: int32(name='BoxBorderWidth', example='0'),
          boxColor?: long(name='BoxColor', example='0'),
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestUserID'),
    }
  ](name='UserPanes'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks'),
}

model UpdateMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMPUTaskResponseBody(name='body'),
}

async function updateMPUTaskWithOptions(request: UpdateMPUTaskRequest, runtime: Util.RuntimeOptions): UpdateMPUTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mixMode)) {
    query['MixMode'] = request.mixMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMPUTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMPUTask(request: UpdateMPUTaskRequest): UpdateMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMPUTaskWithOptions(request, runtime);
}

model UpdateRecordTaskRequest {
  appId?: string(name='AppId', example='yourAppId'),
  channelId?: string(name='ChannelId', example='yourChannelId'),
  cropMode?: long(name='CropMode'),
  layoutIds?: [ long ](name='LayoutIds'),
  mediaEncode?: long(name='MediaEncode'),
  ownerId?: long(name='OwnerId'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID'),
  taskId?: string(name='TaskId', example='yourTaskId'),
  taskProfile?: string(name='TaskProfile'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='1'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          ZOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes'),
}

model UpdateRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordTaskResponseBody(name='body'),
}

async function updateRecordTaskWithOptions(request: UpdateRecordTaskRequest, runtime: Util.RuntimeOptions): UpdateRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.cropMode)) {
    query['CropMode'] = request.cropMode;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.subSpecAudioUsers)) {
    query['SubSpecAudioUsers'] = request.subSpecAudioUsers;
  }
  if (!Util.isUnset(request.subSpecCameraUsers)) {
    query['SubSpecCameraUsers'] = request.subSpecCameraUsers;
  }
  if (!Util.isUnset(request.subSpecShareScreenUsers)) {
    query['SubSpecShareScreenUsers'] = request.subSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.subSpecUsers)) {
    query['SubSpecUsers'] = request.subSpecUsers;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.unsubSpecAudioUsers)) {
    query['UnsubSpecAudioUsers'] = request.unsubSpecAudioUsers;
  }
  if (!Util.isUnset(request.unsubSpecCameraUsers)) {
    query['UnsubSpecCameraUsers'] = request.unsubSpecCameraUsers;
  }
  if (!Util.isUnset(request.unsubSpecShareScreenUsers)) {
    query['UnsubSpecShareScreenUsers'] = request.unsubSpecShareScreenUsers;
  }
  if (!Util.isUnset(request.userPanes)) {
    query['UserPanes'] = request.userPanes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordTask',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordTask(request: UpdateRecordTaskRequest): UpdateRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordTaskWithOptions(request, runtime);
}

model UpdateRecordTemplateRequest {
  appId?: string(name='AppId', example='yourAppId'),
  backgroundColor?: int32(name='BackgroundColor', example='0'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets'),
  delayStopTime?: int32(name='DelayStopTime', example='180'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false'),
  fileSplitInterval?: int32(name='FileSplitInterval', example='1800'),
  formats?: [ string ](name='Formats', example='mp4'),
  httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback'),
  layoutIds?: [ long ](name='LayoutIds', example='1111'),
  mediaEncode?: int32(name='MediaEncode', example='20'),
  mnsQueue?: string(name='MnsQueue', example='record-callback-queue'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket', example='rtc-record-pre'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
  ownerId?: long(name='OwnerId'),
  taskProfile?: string(name='TaskProfile', example='4IN_1080P'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      ZOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks'),
}

model UpdateRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model UpdateRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordTemplateResponseBody(name='body'),
}

async function updateRecordTemplateWithOptions(request: UpdateRecordTemplateRequest, runtime: Util.RuntimeOptions): UpdateRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgrounds)) {
    query['Backgrounds'] = request.backgrounds;
  }
  if (!Util.isUnset(request.clockWidgets)) {
    query['ClockWidgets'] = request.clockWidgets;
  }
  if (!Util.isUnset(request.delayStopTime)) {
    query['DelayStopTime'] = request.delayStopTime;
  }
  if (!Util.isUnset(request.enableM3u8DateTime)) {
    query['EnableM3u8DateTime'] = request.enableM3u8DateTime;
  }
  if (!Util.isUnset(request.fileSplitInterval)) {
    query['FileSplitInterval'] = request.fileSplitInterval;
  }
  if (!Util.isUnset(request.formats)) {
    query['Formats'] = request.formats;
  }
  if (!Util.isUnset(request.httpCallbackUrl)) {
    query['HttpCallbackUrl'] = request.httpCallbackUrl;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.mediaEncode)) {
    query['MediaEncode'] = request.mediaEncode;
  }
  if (!Util.isUnset(request.mnsQueue)) {
    query['MnsQueue'] = request.mnsQueue;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!Util.isUnset(request.ossFilePrefix)) {
    query['OssFilePrefix'] = request.ossFilePrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskProfile)) {
    query['TaskProfile'] = request.taskProfile;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.watermarks)) {
    query['Watermarks'] = request.watermarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordTemplate',
    version = '2018-01-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordTemplate(request: UpdateRecordTemplateRequest): UpdateRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordTemplateWithOptions(request, runtime);
}

