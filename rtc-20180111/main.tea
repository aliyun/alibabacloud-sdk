/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('rtc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddRecordTemplateRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  name?: string(name='Name'),
  taskProfile?: string(name='TaskProfile'),
  mediaEncode?: int32(name='MediaEncode'),
  backgroundColor?: int32(name='BackgroundColor'),
  ossBucket?: string(name='OssBucket'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  fileSplitInterval?: int32(name='FileSplitInterval'),
  delayStopTime?: int32(name='DelayStopTime'),
  mnsQueue?: string(name='MnsQueue'),
  httpCallbackUrl?: string(name='HttpCallbackUrl'),
  layoutIds?: [ integer ](name='LayoutIds'),
  formats?: [ string ](name='Formats'),
  backgrounds?: [ 
    {
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Backgrounds'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Watermarks'),
  clockWidgets?: [ 
    {
      fontType?: int32(name='FontType'),
      fontColor?: int32(name='FontColor'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
      fontSize?: int32(name='FontSize'),
    }
  ](name='ClockWidgets'),
}

model AddRecordTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model AddRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddRecordTemplateResponseBody(name='body'),
}

async function addRecordTemplateWithOptions(request: AddRecordTemplateRequest, runtime: Util.RuntimeOptions): AddRecordTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddRecordTemplate', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addRecordTemplate(request: AddRecordTemplateRequest): AddRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecordTemplateWithOptions(request, runtime);
}

model CreateAutoLiveStreamRuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  playDomain?: string(name='PlayDomain'),
  ruleName?: string(name='RuleName'),
  callBack?: string(name='CallBack'),
}

model CreateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: long(name='RuleId'),
}

model CreateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoLiveStreamRuleResponseBody(name='body'),
}

async function createAutoLiveStreamRuleWithOptions(request: CreateAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): CreateAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAutoLiveStreamRule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAutoLiveStreamRule(request: CreateAutoLiveStreamRuleRequest): CreateAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoLiveStreamRuleWithOptions(request, runtime);
}

model CreateChannelRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
}

model CreateChannelResponseBody = {
  nonce?: string(name='Nonce'),
  requestId?: string(name='RequestId'),
  channelKey?: string(name='ChannelKey'),
  timestamp?: int32(name='Timestamp'),
}

model CreateChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChannelResponseBody(name='body'),
}

async function createChannelWithOptions(request: CreateChannelRequest, runtime: Util.RuntimeOptions): CreateChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateChannel', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createChannel(request: CreateChannelRequest): CreateChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChannelWithOptions(request, runtime);
}

model CreateConferenceRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceName?: string(name='ConferenceName'),
  clientToken?: string(name='ClientToken'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  remindNotice?: int32(name='RemindNotice'),
}

model CreateConferenceResponseBody = {
  authInfo?: {
    key?: string(name='Key'),
    nonce?: string(name='Nonce'),
    timestamp?: int32(name='Timestamp'),
  }(name='AuthInfo'),
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
}

model CreateConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConferenceResponseBody(name='body'),
}

async function createConferenceWithOptions(request: CreateConferenceRequest, runtime: Util.RuntimeOptions): CreateConferenceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConference', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConference(request: CreateConferenceRequest): CreateConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConferenceWithOptions(request, runtime);
}

model CreateEventSubscribeRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  callbackUrl?: string(name='CallbackUrl'),
  clientToken?: string(name='ClientToken'),
  users?: [ string ](name='Users'),
  events?: [ string ](name='Events'),
}

model CreateEventSubscribeResponseBody = {
  subscribeId?: string(name='SubscribeId'),
  requestId?: string(name='RequestId'),
}

model CreateEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEventSubscribeResponseBody(name='body'),
}

async function createEventSubscribeWithOptions(request: CreateEventSubscribeRequest, runtime: Util.RuntimeOptions): CreateEventSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEventSubscribe', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEventSubscribe(request: CreateEventSubscribeRequest): CreateEventSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventSubscribeWithOptions(request, runtime);
}

model CreateMPULayoutRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  name?: string(name='Name'),
  audioMixCount?: int32(name='AudioMixCount'),
  panes?: [ 
    {
      majorPane?: int32(name='MajorPane'),
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      paneId?: int32(name='PaneId'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Panes'),
}

model CreateMPULayoutResponseBody = {
  requestId?: string(name='RequestId'),
  layoutId?: long(name='LayoutId'),
}

model CreateMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMPULayoutResponseBody(name='body'),
}

async function createMPULayoutWithOptions(request: CreateMPULayoutRequest, runtime: Util.RuntimeOptions): CreateMPULayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMPULayout', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMPULayout(request: CreateMPULayoutRequest): CreateMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMPULayoutWithOptions(request, runtime);
}

model CreateMPURuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelPrefix?: string(name='ChannelPrefix'),
  mediaEncode?: int32(name='MediaEncode'),
  backgroundColor?: int32(name='BackgroundColor'),
  cropMode?: int32(name='CropMode'),
  taskProfile?: string(name='TaskProfile'),
  playDomain?: string(name='PlayDomain'),
  callBack?: string(name='CallBack'),
  layoutIds?: [ integer ](name='LayoutIds'),
}

model CreateMPURuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: long(name='RuleId'),
}

model CreateMPURuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMPURuleResponseBody(name='body'),
}

async function createMPURuleWithOptions(request: CreateMPURuleRequest, runtime: Util.RuntimeOptions): CreateMPURuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMPURule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMPURule(request: CreateMPURuleRequest): CreateMPURuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMPURuleWithOptions(request, runtime);
}

model CreateServiceLinkedRoleForRtcRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
}

model CreateServiceLinkedRoleForRtcResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleForRtcResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleForRtcResponseBody(name='body'),
}

async function createServiceLinkedRoleForRtcWithOptions(request: CreateServiceLinkedRoleForRtcRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleForRtcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServiceLinkedRoleForRtc', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceLinkedRoleForRtc(request: CreateServiceLinkedRoleForRtcRequest): CreateServiceLinkedRoleForRtcResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleForRtcWithOptions(request, runtime);
}

model CreateSubscribeRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  callbackUrl?: string(name='CallbackUrl'),
  clientToken?: string(name='ClientToken'),
  users?: [ string ](name='Users'),
  events?: [ string ](name='Events'),
}

model CreateSubscribeResponseBody = {
  subscribeId?: string(name='SubscribeId'),
  requestId?: string(name='RequestId'),
}

model CreateSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscribeResponseBody(name='body'),
}

async function createSubscribeWithOptions(request: CreateSubscribeRequest, runtime: Util.RuntimeOptions): CreateSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSubscribe', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSubscribe(request: CreateSubscribeRequest): CreateSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscribeWithOptions(request, runtime);
}

model DeleteAutoLiveStreamRuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  ruleId?: long(name='RuleId'),
}

model DeleteAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoLiveStreamRuleResponseBody(name='body'),
}

async function deleteAutoLiveStreamRuleWithOptions(request: DeleteAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DeleteAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAutoLiveStreamRule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAutoLiveStreamRule(request: DeleteAutoLiveStreamRuleRequest): DeleteAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoLiveStreamRuleWithOptions(request, runtime);
}

model DeleteChannelRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
}

model DeleteChannelResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChannelResponseBody(name='body'),
}

async function deleteChannelWithOptions(request: DeleteChannelRequest, runtime: Util.RuntimeOptions): DeleteChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteChannel', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChannelWithOptions(request, runtime);
}

model DeleteConferenceRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
}

model DeleteConferenceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConferenceResponseBody(name='body'),
}

async function deleteConferenceWithOptions(request: DeleteConferenceRequest, runtime: Util.RuntimeOptions): DeleteConferenceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConference', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConference(request: DeleteConferenceRequest): DeleteConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConferenceWithOptions(request, runtime);
}

model DeleteEventSubscribeRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  subscribeId?: string(name='SubscribeId'),
}

model DeleteEventSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventSubscribeResponseBody(name='body'),
}

async function deleteEventSubscribeWithOptions(request: DeleteEventSubscribeRequest, runtime: Util.RuntimeOptions): DeleteEventSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEventSubscribe', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEventSubscribe(request: DeleteEventSubscribeRequest): DeleteEventSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventSubscribeWithOptions(request, runtime);
}

model DeleteMPULayoutRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  layoutId?: long(name='LayoutId'),
}

model DeleteMPULayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMPULayoutResponseBody(name='body'),
}

async function deleteMPULayoutWithOptions(request: DeleteMPULayoutRequest, runtime: Util.RuntimeOptions): DeleteMPULayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMPULayout', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMPULayout(request: DeleteMPULayoutRequest): DeleteMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMPULayoutWithOptions(request, runtime);
}

model DeleteMPURuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  ruleId?: long(name='RuleId'),
}

model DeleteMPURuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMPURuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMPURuleResponseBody(name='body'),
}

async function deleteMPURuleWithOptions(request: DeleteMPURuleRequest, runtime: Util.RuntimeOptions): DeleteMPURuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMPURule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMPURule(request: DeleteMPURuleRequest): DeleteMPURuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMPURuleWithOptions(request, runtime);
}

model DeleteRecordTemplateRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  templateId?: string(name='TemplateId'),
}

model DeleteRecordTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordTemplateResponseBody(name='body'),
}

async function deleteRecordTemplateWithOptions(request: DeleteRecordTemplateRequest, runtime: Util.RuntimeOptions): DeleteRecordTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRecordTemplate', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRecordTemplate(request: DeleteRecordTemplateRequest): DeleteRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordTemplateWithOptions(request, runtime);
}

model DeleteSubscribeRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  subscribeId?: string(name='SubscribeId'),
}

model DeleteSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscribeResponseBody(name='body'),
}

async function deleteSubscribeWithOptions(request: DeleteSubscribeRequest, runtime: Util.RuntimeOptions): DeleteSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSubscribe', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSubscribe(request: DeleteSubscribeRequest): DeleteSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubscribeWithOptions(request, runtime);
}

model DescribeAppsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  status?: string(name='Status'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAppsResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  requestId?: string(name='RequestId'),
  appList?: {
    app?: [ 
    {
      status?: int32(name='Status'),
      appName?: string(name='AppName'),
      serviceAreas?: {
        serviceArea?: [ string ](name='ServiceArea')
      }(name='ServiceAreas'),
      appId?: string(name='AppId'),
      createTime?: string(name='CreateTime'),
      billType?: string(name='BillType'),
      appType?: string(name='AppType'),
    }
  ](name='App')
  }(name='AppList'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApps', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAutoLiveStreamRuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
}

model DescribeAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      callBack?: string(name='CallBack'),
      playDomain?: string(name='PlayDomain'),
      createTime?: string(name='CreateTime'),
      ruleName?: string(name='RuleName'),
      ruleId?: long(name='RuleId'),
    }
  ](name='Rules'),
}

model DescribeAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoLiveStreamRuleResponseBody(name='body'),
}

async function describeAutoLiveStreamRuleWithOptions(request: DescribeAutoLiveStreamRuleRequest, runtime: Util.RuntimeOptions): DescribeAutoLiveStreamRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoLiveStreamRule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoLiveStreamRule(request: DescribeAutoLiveStreamRuleRequest): DescribeAutoLiveStreamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoLiveStreamRuleWithOptions(request, runtime);
}

model DescribeChannelParticipantsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeChannelParticipantsResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  requestId?: string(name='RequestId'),
  timestamp?: int32(name='Timestamp'),
  userList?: {
    user?: [ string ](name='User')
  }(name='UserList'),
}

model DescribeChannelParticipantsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChannelParticipantsResponseBody(name='body'),
}

async function describeChannelParticipantsWithOptions(request: DescribeChannelParticipantsRequest, runtime: Util.RuntimeOptions): DescribeChannelParticipantsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeChannelParticipants', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeChannelParticipants(request: DescribeChannelParticipantsRequest): DescribeChannelParticipantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelParticipantsWithOptions(request, runtime);
}

model DescribeChannelUsersRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
}

model DescribeChannelUsersResponseBody = {
  requestId?: string(name='RequestId'),
  interactiveUserList?: [ string ](name='InteractiveUserList'),
  liveUserNum?: int32(name='LiveUserNum'),
  channelProfile?: int32(name='ChannelProfile'),
  interactiveUserNum?: int32(name='InteractiveUserNum'),
  isChannelExist?: boolean(name='IsChannelExist'),
  timestamp?: int32(name='Timestamp'),
  userList?: [ string ](name='UserList'),
  liveUserList?: [ string ](name='LiveUserList'),
  commTotalNum?: int32(name='CommTotalNum'),
}

model DescribeChannelUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChannelUsersResponseBody(name='body'),
}

async function describeChannelUsersWithOptions(request: DescribeChannelUsersRequest, runtime: Util.RuntimeOptions): DescribeChannelUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeChannelUsers', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeChannelUsers(request: DescribeChannelUsersRequest): DescribeChannelUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChannelUsersWithOptions(request, runtime);
}

model DescribeConferenceAuthInfoRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
}

model DescribeConferenceAuthInfoResponseBody = {
  authInfo?: {
    key?: string(name='Key'),
    nonce?: string(name='Nonce'),
    timestamp?: int32(name='Timestamp'),
  }(name='AuthInfo'),
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
}

model DescribeConferenceAuthInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConferenceAuthInfoResponseBody(name='body'),
}

async function describeConferenceAuthInfoWithOptions(request: DescribeConferenceAuthInfoRequest, runtime: Util.RuntimeOptions): DescribeConferenceAuthInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConferenceAuthInfo', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConferenceAuthInfo(request: DescribeConferenceAuthInfoRequest): DescribeConferenceAuthInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConferenceAuthInfoWithOptions(request, runtime);
}

model DescribeMPULayoutInfoRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  layoutId?: long(name='LayoutId'),
}

model DescribeMPULayoutInfoResponseBody = {
  requestId?: string(name='RequestId'),
  layout?: {
    layoutId?: long(name='LayoutId'),
    panes?: {
      panes?: [ 
      {
        majorPane?: int32(name='MajorPane'),
        width?: float(name='Width'),
        height?: float(name='Height'),
        y?: float(name='Y'),
        paneId?: int32(name='PaneId'),
        ZOrder?: int32(name='ZOrder'),
        x?: float(name='X'),
      }
    ](name='Panes')
    }(name='Panes'),
    name?: string(name='Name'),
    audioMixCount?: int32(name='AudioMixCount'),
  }(name='Layout'),
}

model DescribeMPULayoutInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPULayoutInfoResponseBody(name='body'),
}

async function describeMPULayoutInfoWithOptions(request: DescribeMPULayoutInfoRequest, runtime: Util.RuntimeOptions): DescribeMPULayoutInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMPULayoutInfo', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMPULayoutInfo(request: DescribeMPULayoutInfoRequest): DescribeMPULayoutInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMPULayoutInfoWithOptions(request, runtime);
}

model DescribeMPULayoutInfoListRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  layoutId?: long(name='LayoutId'),
  name?: string(name='Name'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model DescribeMPULayoutInfoListResponseBody = {
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
  requestId?: string(name='RequestId'),
  layouts?: {
    layout?: [ 
    {
      layoutId?: long(name='LayoutId'),
      panes?: {
        panes?: [ 
        {
          majorPane?: int32(name='MajorPane'),
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          paneId?: int32(name='PaneId'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Panes')
      }(name='Panes'),
      name?: string(name='Name'),
      audioMixCount?: int32(name='AudioMixCount'),
    }
  ](name='Layout')
  }(name='Layouts'),
}

model DescribeMPULayoutInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPULayoutInfoListResponseBody(name='body'),
}

async function describeMPULayoutInfoListWithOptions(request: DescribeMPULayoutInfoListRequest, runtime: Util.RuntimeOptions): DescribeMPULayoutInfoListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMPULayoutInfoList', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMPULayoutInfoList(request: DescribeMPULayoutInfoListRequest): DescribeMPULayoutInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMPULayoutInfoListWithOptions(request, runtime);
}

model DescribeMPULayoutListRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
}

model DescribeMPULayoutListResponseBody = {
  requestId?: string(name='RequestId'),
  layoutIds?: {
    layoutId?: [ string ](name='LayoutId')
  }(name='LayoutIds'),
}

model DescribeMPULayoutListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPULayoutListResponseBody(name='body'),
}

async function describeMPULayoutListWithOptions(request: DescribeMPULayoutListRequest, runtime: Util.RuntimeOptions): DescribeMPULayoutListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMPULayoutList', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMPULayoutList(request: DescribeMPULayoutListRequest): DescribeMPULayoutListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMPULayoutListWithOptions(request, runtime);
}

model DescribeMPURuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
}

model DescribeMPURuleResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      mediaEncode?: int32(name='MediaEncode'),
      cropMode?: int32(name='CropMode'),
      callBack?: string(name='CallBack'),
      playDomain?: string(name='PlayDomain'),
      channelPrefix?: string(name='ChannelPrefix'),
      backgroudColor?: int32(name='BackgroudColor'),
      isEnable?: int32(name='IsEnable'),
      layoutIds?: [ string ](name='LayoutIds'),
      taskProfile?: string(name='TaskProfile'),
      ruleId?: long(name='RuleId'),
    }
  ](name='Rules'),
}

model DescribeMPURuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPURuleResponseBody(name='body'),
}

async function describeMPURuleWithOptions(request: DescribeMPURuleRequest, runtime: Util.RuntimeOptions): DescribeMPURuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMPURule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMPURule(request: DescribeMPURuleRequest): DescribeMPURuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMPURuleWithOptions(request, runtime);
}

model DescribeRecordFilesRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  taskIds?: [ string ](name='TaskIds'),
}

model DescribeRecordFilesResponseBody = {
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
  requestId?: string(name='RequestId'),
  recordFiles?: [ 
    {
      startTime?: string(name='StartTime'),
      createTime?: string(name='CreateTime'),
      appId?: string(name='AppId'),
      channelId?: string(name='ChannelId'),
      url?: string(name='Url'),
      duration?: float(name='Duration'),
      taskId?: string(name='TaskId'),
      stopTime?: string(name='StopTime'),
    }
  ](name='RecordFiles'),
}

model DescribeRecordFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordFilesResponseBody(name='body'),
}

async function describeRecordFilesWithOptions(request: DescribeRecordFilesRequest, runtime: Util.RuntimeOptions): DescribeRecordFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordFiles', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordFiles(request: DescribeRecordFilesRequest): DescribeRecordFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordFilesWithOptions(request, runtime);
}

model DescribeRecordTasksRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  status?: string(name='Status'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  taskIds?: [ string ](name='TaskIds'),
}

model DescribeRecordTasksResponseBody = {
  recordTasks?: [ 
    {
      status?: int32(name='Status'),
      subSpecUsers?: [ string ](name='SubSpecUsers'),
      userPanes?: [ 
        {
          userId?: string(name='UserId'),
          paneId?: int32(name='PaneId'),
          source?: string(name='Source'),
        }
      ](name='UserPanes'),
      createTime?: string(name='CreateTime'),
      appId?: string(name='AppId'),
      channelId?: string(name='ChannelId'),
      taskId?: string(name='TaskId'),
      templateId?: string(name='TemplateId'),
    }
  ](name='RecordTasks'),
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
  requestId?: string(name='RequestId'),
}

model DescribeRecordTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordTasksResponseBody(name='body'),
}

async function describeRecordTasksWithOptions(request: DescribeRecordTasksRequest, runtime: Util.RuntimeOptions): DescribeRecordTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordTasks', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordTasks(request: DescribeRecordTasksRequest): DescribeRecordTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordTasksWithOptions(request, runtime);
}

model DescribeRecordTemplatesRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  templateIds?: [ string ](name='TemplateIds'),
}

model DescribeRecordTemplatesResponseBody = {
  totalNum?: long(name='TotalNum'),
  totalPage?: long(name='TotalPage'),
  requestId?: string(name='RequestId'),
  templates?: [ 
    {
      mnsQueue?: string(name='MnsQueue'),
      ossFilePrefix?: string(name='OssFilePrefix'),
      createTime?: string(name='CreateTime'),
      clockWidgets?: [ 
        {
          fontType?: int32(name='FontType'),
          fontColor?: int32(name='FontColor'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
          fontSize?: int32(name='FontSize'),
        }
      ](name='ClockWidgets'),
      ossBucket?: string(name='OssBucket'),
      delayStopTime?: string(name='DelayStopTime'),
      layoutIds?: [ int32 ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode'),
      fileSplitInterval?: int32(name='FileSplitInterval'),
      httpCallbackUrl?: string(name='HttpCallbackUrl'),
      formats?: [ string ](name='Formats'),
      backgroundColor?: int32(name='BackgroundColor'),
      backgrounds?: [ 
        {
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          url?: string(name='Url'),
          display?: int32(name='Display'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Backgrounds'),
      watermarks?: [ 
        {
          alpha?: float(name='Alpha'),
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          url?: string(name='Url'),
          display?: int32(name='Display'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Watermarks'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
      taskProfile?: string(name='TaskProfile'),
    }
  ](name='Templates'),
}

model DescribeRecordTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordTemplatesResponseBody(name='body'),
}

async function describeRecordTemplatesWithOptions(request: DescribeRecordTemplatesRequest, runtime: Util.RuntimeOptions): DescribeRecordTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordTemplates', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordTemplates(request: DescribeRecordTemplatesRequest): DescribeRecordTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordTemplatesWithOptions(request, runtime);
}

model DescribeRTCAppKeyRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
}

model DescribeRTCAppKeyResponseBody = {
  requestId?: string(name='RequestId'),
  appKey?: string(name='AppKey'),
}

model DescribeRTCAppKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRTCAppKeyResponseBody(name='body'),
}

async function describeRTCAppKeyWithOptions(request: DescribeRTCAppKeyRequest, runtime: Util.RuntimeOptions): DescribeRTCAppKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRTCAppKey', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRTCAppKey(request: DescribeRTCAppKeyRequest): DescribeRTCAppKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRTCAppKeyWithOptions(request, runtime);
}

model DescribeRtcChannelCntDataRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  appId?: string(name='AppId'),
  serviceArea?: string(name='ServiceArea'),
  interval?: string(name='Interval'),
}

model DescribeRtcChannelCntDataResponseBody = {
  requestId?: string(name='RequestId'),
  channelCntDataPerInterval?: {
    channelCntModule?: [ 
    {
      activeChannelCnt?: long(name='ActiveChannelCnt'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ChannelCntModule')
  }(name='ChannelCntDataPerInterval'),
}

model DescribeRtcChannelCntDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelCntDataResponseBody(name='body'),
}

async function describeRtcChannelCntDataWithOptions(request: DescribeRtcChannelCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelCntDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannelCntData', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannelCntData(request: DescribeRtcChannelCntDataRequest): DescribeRtcChannelCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelCntDataWithOptions(request, runtime);
}

model DescribeRtcChannelDetailRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRtcChannelDetailResponseBody = {
  totalCnt?: long(name='TotalCnt'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNo?: long(name='PageNo'),
  channelInfo?: [ 
    {
      sid?: string(name='Sid'),
      deviceType?: string(name='DeviceType'),
      OS?: string(name='OS'),
      leaveTime?: string(name='LeaveTime'),
      joinTime?: string(name='JoinTime'),
      platform?: string(name='Platform'),
      sdkVersion?: string(name='SdkVersion'),
      uid?: string(name='Uid'),
    }
  ](name='ChannelInfo'),
  channelId?: string(name='ChannelId'),
}

model DescribeRtcChannelDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelDetailResponseBody(name='body'),
}

async function describeRtcChannelDetailWithOptions(request: DescribeRtcChannelDetailRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannelDetail', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannelDetail(request: DescribeRtcChannelDetailRequest): DescribeRtcChannelDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelDetailWithOptions(request, runtime);
}

model DescribeRtcChannelListRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  timePoint?: string(name='TimePoint'),
  sortType?: string(name='SortType'),
  serviceArea?: string(name='ServiceArea'),
  userId?: string(name='UserId'),
  channelId?: string(name='ChannelId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
}

model DescribeRtcChannelListResponseBody = {
  totalCnt?: long(name='TotalCnt'),
  requestId?: string(name='RequestId'),
  pageSize?: long(name='PageSize'),
  pageNo?: long(name='PageNo'),
  channelList?: {
    channelList?: [ 
    {
      endTime?: string(name='EndTime'),
      totalUserCnt?: long(name='TotalUserCnt'),
      startTime?: string(name='StartTime'),
      callArea?: {
        callArea?: [ string ](name='CallArea')
      }(name='CallArea'),
      channelId?: string(name='ChannelId'),
    }
  ](name='ChannelList')
  }(name='ChannelList'),
}

model DescribeRtcChannelListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelListResponseBody(name='body'),
}

async function describeRtcChannelListWithOptions(request: DescribeRtcChannelListRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannelList', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannelList(request: DescribeRtcChannelListRequest): DescribeRtcChannelListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelListWithOptions(request, runtime);
}

model DescribeRtcChannelMetricRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  timePoint?: string(name='TimePoint'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
}

model DescribeRtcChannelMetricResponseBody = {
  requestId?: string(name='RequestId'),
  channelMetricInfo?: {
    duration?: {
      subDuration?: {
        video720?: int32(name='Video720'),
        video1080?: int32(name='Video1080'),
        video360?: int32(name='Video360'),
        content?: int32(name='Content'),
        audio?: int32(name='Audio'),
      }(name='SubDuration'),
      pubDuration?: {
        video720?: int32(name='Video720'),
        video1080?: int32(name='Video1080'),
        video360?: int32(name='Video360'),
        content?: int32(name='Content'),
        audio?: int32(name='Audio'),
      }(name='PubDuration'),
    }(name='Duration'),
    channelMetric?: {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      subUserCount?: int32(name='SubUserCount'),
      channelId?: string(name='ChannelId'),
      userCount?: int32(name='UserCount'),
      pubUserCount?: int32(name='PubUserCount'),
    }(name='ChannelMetric'),
  }(name='ChannelMetricInfo'),
}

model DescribeRtcChannelMetricResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelMetricResponseBody(name='body'),
}

async function describeRtcChannelMetricWithOptions(request: DescribeRtcChannelMetricRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelMetricResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannelMetric', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannelMetric(request: DescribeRtcChannelMetricRequest): DescribeRtcChannelMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelMetricWithOptions(request, runtime);
}

model DescribeRtcChannelMetricsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  pubUid?: string(name='PubUid'),
  subUid?: string(name='SubUid'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeRtcChannelMetricsResponseBody = {
  metrics?: [ 
    {
      mid?: string(name='Mid'),
      KVs?: [ string ](name='KVs'),
      uid?: string(name='Uid'),
    }
  ](name='Metrics'),
  requestId?: string(name='RequestId'),
}

model DescribeRtcChannelMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelMetricsResponseBody(name='body'),
}

async function describeRtcChannelMetricsWithOptions(request: DescribeRtcChannelMetricsRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannelMetrics', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannelMetrics(request: DescribeRtcChannelMetricsRequest): DescribeRtcChannelMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelMetricsWithOptions(request, runtime);
}

model DescribeRtcChannelsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  channelId?: string(name='ChannelId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRtcChannelsResponseBody = {
  totalCnt?: long(name='TotalCnt'),
  requestId?: string(name='RequestId'),
  pageSize?: long(name='PageSize'),
  pageNo?: long(name='PageNo'),
  channels?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      channelId?: string(name='ChannelId'),
      finished?: boolean(name='Finished'),
    }
  ](name='Channels'),
}

model DescribeRtcChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelsResponseBody(name='body'),
}

async function describeRtcChannelsWithOptions(request: DescribeRtcChannelsRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannels', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannels(request: DescribeRtcChannelsRequest): DescribeRtcChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelsWithOptions(request, runtime);
}

model DescribeRtcChannelUserListRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  timePoint?: string(name='TimePoint'),
}

model DescribeRtcChannelUserListResponseBody = {
  totalCnt?: long(name='TotalCnt'),
  requestId?: string(name='RequestId'),
  pageSize?: long(name='PageSize'),
  pageNo?: long(name='PageNo'),
  userList?: {
    userList?: [ 
    {
      subVideo720?: int32(name='SubVideo720'),
      subVideo1080?: int32(name='SubVideo1080'),
      subContent?: int32(name='SubContent'),
      userId?: string(name='UserId'),
      pubVideo360?: int32(name='PubVideo360'),
      subVideo360?: int32(name='SubVideo360'),
      serviceArea?: string(name='ServiceArea'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      pubContent?: int32(name='PubContent'),
      channelId?: string(name='ChannelId'),
      pubVideo1080?: int32(name='PubVideo1080'),
      pubAudio?: int32(name='PubAudio'),
      pubVideo720?: int32(name='PubVideo720'),
      subAudio?: int32(name='SubAudio'),
    }
  ](name='UserList')
  }(name='UserList'),
}

model DescribeRtcChannelUserListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcChannelUserListResponseBody(name='body'),
}

async function describeRtcChannelUserListWithOptions(request: DescribeRtcChannelUserListRequest, runtime: Util.RuntimeOptions): DescribeRtcChannelUserListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcChannelUserList', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcChannelUserList(request: DescribeRtcChannelUserListRequest): DescribeRtcChannelUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcChannelUserListWithOptions(request, runtime);
}

model DescribeRtcDurationDataRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  appId?: string(name='AppId'),
  serviceArea?: string(name='ServiceArea'),
  interval?: string(name='Interval'),
}

model DescribeRtcDurationDataResponseBody = {
  requestId?: string(name='RequestId'),
  durationDataPerInterval?: {
    durationModule?: [ 
    {
      contentDuration?: long(name='ContentDuration'),
      v720Duration?: long(name='V720Duration'),
      v360Duration?: long(name='V360Duration'),
      audioDuration?: long(name='AudioDuration'),
      timeStamp?: string(name='TimeStamp'),
      v1080Duration?: long(name='V1080Duration'),
      totalDuration?: long(name='TotalDuration'),
    }
  ](name='DurationModule')
  }(name='DurationDataPerInterval'),
}

model DescribeRtcDurationDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcDurationDataResponseBody(name='body'),
}

async function describeRtcDurationDataWithOptions(request: DescribeRtcDurationDataRequest, runtime: Util.RuntimeOptions): DescribeRtcDurationDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcDurationData', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcDurationData(request: DescribeRtcDurationDataRequest): DescribeRtcDurationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcDurationDataWithOptions(request, runtime);
}

model DescribeRtcPeakChannelCntDataRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  appId?: string(name='AppId'),
  serviceArea?: string(name='ServiceArea'),
  interval?: string(name='Interval'),
}

model DescribeRtcPeakChannelCntDataResponseBody = {
  peakChannelCntDataPerInterval?: {
    peakChannelCntModule?: [ 
    {
      activeChannelPeakTime?: string(name='ActiveChannelPeakTime'),
      timeStamp?: string(name='TimeStamp'),
      activeChannelPeak?: long(name='ActiveChannelPeak'),
    }
  ](name='PeakChannelCntModule')
  }(name='PeakChannelCntDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeRtcPeakChannelCntDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcPeakChannelCntDataResponseBody(name='body'),
}

async function describeRtcPeakChannelCntDataWithOptions(request: DescribeRtcPeakChannelCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcPeakChannelCntDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcPeakChannelCntData', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcPeakChannelCntData(request: DescribeRtcPeakChannelCntDataRequest): DescribeRtcPeakChannelCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcPeakChannelCntDataWithOptions(request, runtime);
}

model DescribeRtcPeakUserCntDataRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  appId?: string(name='AppId'),
  serviceArea?: string(name='ServiceArea'),
  interval?: string(name='Interval'),
}

model DescribeRtcPeakUserCntDataResponseBody = {
  peakUserCntDataPerInterval?: {
    peakUserCntModule?: [ 
    {
      activeUserPeakTime?: string(name='ActiveUserPeakTime'),
      timeStamp?: string(name='TimeStamp'),
      activeUserPeak?: long(name='ActiveUserPeak'),
    }
  ](name='PeakUserCntModule')
  }(name='PeakUserCntDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeRtcPeakUserCntDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcPeakUserCntDataResponseBody(name='body'),
}

async function describeRtcPeakUserCntDataWithOptions(request: DescribeRtcPeakUserCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcPeakUserCntDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcPeakUserCntData', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcPeakUserCntData(request: DescribeRtcPeakUserCntDataRequest): DescribeRtcPeakUserCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcPeakUserCntDataWithOptions(request, runtime);
}

model DescribeRtcScaleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeRtcScaleResponseBody = {
  requestId?: string(name='RequestId'),
  scale?: [ 
    {
      sessionCount?: long(name='SessionCount'),
      time?: string(name='Time'),
      channelCount?: long(name='ChannelCount'),
      audioDuration?: long(name='AudioDuration'),
      userCount?: long(name='UserCount'),
      videoDuration?: long(name='VideoDuration'),
    }
  ](name='Scale'),
}

model DescribeRtcScaleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcScaleResponseBody(name='body'),
}

async function describeRtcScaleWithOptions(request: DescribeRtcScaleRequest, runtime: Util.RuntimeOptions): DescribeRtcScaleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcScale', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcScale(request: DescribeRtcScaleRequest): DescribeRtcScaleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcScaleWithOptions(request, runtime);
}

model DescribeRtcScaleDetailRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeRtcScaleDetailResponseBody = {
  requestId?: string(name='RequestId'),
  scale?: [ 
    {
      CC?: long(name='CC'),
      TS?: string(name='TS'),
      UC?: long(name='UC'),
    }
  ](name='Scale'),
}

model DescribeRtcScaleDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcScaleDetailResponseBody(name='body'),
}

async function describeRtcScaleDetailWithOptions(request: DescribeRtcScaleDetailRequest, runtime: Util.RuntimeOptions): DescribeRtcScaleDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcScaleDetail', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcScaleDetail(request: DescribeRtcScaleDetailRequest): DescribeRtcScaleDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcScaleDetailWithOptions(request, runtime);
}

model DescribeRtcUserCntDataRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  appId?: string(name='AppId'),
  serviceArea?: string(name='ServiceArea'),
  interval?: string(name='Interval'),
}

model DescribeRtcUserCntDataResponseBody = {
  requestId?: string(name='RequestId'),
  userCntDataPerInterval?: {
    userCntModule?: [ 
    {
      activeUserCnt?: long(name='ActiveUserCnt'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UserCntModule')
  }(name='UserCntDataPerInterval'),
}

model DescribeRtcUserCntDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcUserCntDataResponseBody(name='body'),
}

async function describeRtcUserCntDataWithOptions(request: DescribeRtcUserCntDataRequest, runtime: Util.RuntimeOptions): DescribeRtcUserCntDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcUserCntData', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcUserCntData(request: DescribeRtcUserCntDataRequest): DescribeRtcUserCntDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcUserCntDataWithOptions(request, runtime);
}

model DescribeRtcUserEventsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  uid?: string(name='Uid'),
  channelId?: string(name='ChannelId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeRtcUserEventsResponseBody = {
  requestId?: string(name='RequestId'),
  events?: [ 
    {
      eventId?: string(name='EventId'),
      eventTime?: long(name='EventTime'),
      category?: string(name='Category'),
    }
  ](name='Events'),
}

model DescribeRtcUserEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcUserEventsResponseBody(name='body'),
}

async function describeRtcUserEventsWithOptions(request: DescribeRtcUserEventsRequest, runtime: Util.RuntimeOptions): DescribeRtcUserEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcUserEvents', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcUserEvents(request: DescribeRtcUserEventsRequest): DescribeRtcUserEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcUserEventsWithOptions(request, runtime);
}

model DescribeRtcUserListRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  pubUser?: string(name='PubUser'),
  subUser?: string(name='SubUser'),
}

model DescribeRtcUserListResponseBody = {
  requestId?: string(name='RequestId'),
  userList?: {
    userList?: [ 
    {
      user?: string(name='User'),
    }
  ](name='UserList')
  }(name='UserList'),
}

model DescribeRtcUserListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRtcUserListResponseBody(name='body'),
}

async function describeRtcUserListWithOptions(request: DescribeRtcUserListRequest, runtime: Util.RuntimeOptions): DescribeRtcUserListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRtcUserList', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRtcUserList(request: DescribeRtcUserListRequest): DescribeRtcUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcUserListWithOptions(request, runtime);
}

model DescribeUserInfoInChannelRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  userId?: string(name='UserId'),
}

model DescribeUserInfoInChannelResponseBody = {
  requestId?: string(name='RequestId'),
  isInChannel?: boolean(name='IsInChannel'),
  timestamp?: int32(name='Timestamp'),
  isChannelExist?: boolean(name='IsChannelExist'),
  property?: [ 
    {
      session?: string(name='Session'),
      join?: int32(name='Join'),
      role?: int32(name='Role'),
    }
  ](name='Property'),
}

model DescribeUserInfoInChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserInfoInChannelResponseBody(name='body'),
}

async function describeUserInfoInChannelWithOptions(request: DescribeUserInfoInChannelRequest, runtime: Util.RuntimeOptions): DescribeUserInfoInChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserInfoInChannel', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserInfoInChannel(request: DescribeUserInfoInChannelRequest): DescribeUserInfoInChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserInfoInChannelWithOptions(request, runtime);
}

model DisableMPURuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  ruleId?: long(name='RuleId'),
}

model DisableMPURuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableMPURuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableMPURuleResponseBody(name='body'),
}

async function disableMPURuleWithOptions(request: DisableMPURuleRequest, runtime: Util.RuntimeOptions): DisableMPURuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableMPURule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableMPURule(request: DisableMPURuleRequest): DisableMPURuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableMPURuleWithOptions(request, runtime);
}

model EnableMPURuleRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  ruleId?: long(name='RuleId'),
}

model EnableMPURuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableMPURuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMPURuleResponseBody(name='body'),
}

async function enableMPURuleWithOptions(request: EnableMPURuleRequest, runtime: Util.RuntimeOptions): EnableMPURuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableMPURule', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableMPURule(request: EnableMPURuleRequest): EnableMPURuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableMPURuleWithOptions(request, runtime);
}

model GetMPUTaskStatusRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  taskId?: string(name='TaskId'),
}

model GetMPUTaskStatusResponseBody = {
  status?: int32(name='Status'),
  requestId?: string(name='RequestId'),
}

model GetMPUTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetMPUTaskStatusResponseBody(name='body'),
}

async function getMPUTaskStatusWithOptions(request: GetMPUTaskStatusRequest, runtime: Util.RuntimeOptions): GetMPUTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMPUTaskStatus', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMPUTaskStatus(request: GetMPUTaskStatusRequest): GetMPUTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMPUTaskStatusWithOptions(request, runtime);
}

model ModifyAppRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyApp', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyConferenceRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
  conferenceName?: string(name='ConferenceName'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  remindNotice?: int32(name='RemindNotice'),
}

model ModifyConferenceResponseBody = {
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
}

model ModifyConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConferenceResponseBody(name='body'),
}

async function modifyConferenceWithOptions(request: ModifyConferenceRequest, runtime: Util.RuntimeOptions): ModifyConferenceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyConference', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyConference(request: ModifyConferenceRequest): ModifyConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConferenceWithOptions(request, runtime);
}

model ModifyMPULayoutRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  name?: string(name='Name'),
  layoutId?: long(name='LayoutId'),
  audioMixCount?: int32(name='AudioMixCount'),
  panes?: [ 
    {
      majorPane?: int32(name='MajorPane'),
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      paneId?: int32(name='PaneId'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Panes'),
}

model ModifyMPULayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMPULayoutResponseBody(name='body'),
}

async function modifyMPULayoutWithOptions(request: ModifyMPULayoutRequest, runtime: Util.RuntimeOptions): ModifyMPULayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyMPULayout', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyMPULayout(request: ModifyMPULayoutRequest): ModifyMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMPULayoutWithOptions(request, runtime);
}

model MuteAudioRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
  participantIds?: [ string ](name='ParticipantIds'),
}

model MuteAudioResponseBody = {
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
  participants?: {
    participant?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      id?: string(name='Id'),
    }
  ](name='Participant')
  }(name='Participants'),
}

model MuteAudioResponse = {
  headers: map[string]string(name='headers'),
  body: MuteAudioResponseBody(name='body'),
}

async function muteAudioWithOptions(request: MuteAudioRequest, runtime: Util.RuntimeOptions): MuteAudioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MuteAudio', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function muteAudio(request: MuteAudioRequest): MuteAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return muteAudioWithOptions(request, runtime);
}

model MuteAudioAllRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
  participantId?: string(name='ParticipantId'),
}

model MuteAudioAllResponseBody = {
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
  participants?: {
    participant?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      id?: string(name='Id'),
    }
  ](name='Participant')
  }(name='Participants'),
}

model MuteAudioAllResponse = {
  headers: map[string]string(name='headers'),
  body: MuteAudioAllResponseBody(name='body'),
}

async function muteAudioAllWithOptions(request: MuteAudioAllRequest, runtime: Util.RuntimeOptions): MuteAudioAllResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MuteAudioAll', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function muteAudioAll(request: MuteAudioAllRequest): MuteAudioAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return muteAudioAllWithOptions(request, runtime);
}

model ReceiveNotifyRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  traceId?: string(name='TraceId'),
  bizId?: string(name='BizId'),
  event?: string(name='Event'),
  contentType?: string(name='ContentType'),
  content?: string(name='Content'),
}

model ReceiveNotifyResponseBody = {
  requestId?: string(name='RequestId'),
  traceId?: string(name='TraceId'),
}

model ReceiveNotifyResponse = {
  headers: map[string]string(name='headers'),
  body: ReceiveNotifyResponseBody(name='body'),
}

async function receiveNotifyWithOptions(request: ReceiveNotifyRequest, runtime: Util.RuntimeOptions): ReceiveNotifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReceiveNotify', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function receiveNotify(request: ReceiveNotifyRequest): ReceiveNotifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return receiveNotifyWithOptions(request, runtime);
}

model RemoveParticipantsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
  participantIds?: [ string ](name='ParticipantIds'),
}

model RemoveParticipantsResponseBody = {
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
  participants?: {
    participant?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      id?: string(name='Id'),
    }
  ](name='Participant')
  }(name='Participants'),
}

model RemoveParticipantsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveParticipantsResponseBody(name='body'),
}

async function removeParticipantsWithOptions(request: RemoveParticipantsRequest, runtime: Util.RuntimeOptions): RemoveParticipantsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveParticipants', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeParticipants(request: RemoveParticipantsRequest): RemoveParticipantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeParticipantsWithOptions(request, runtime);
}

model RemoveTerminalsRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  terminalIds?: [ string ](name='TerminalIds'),
}

model RemoveTerminalsResponseBody = {
  requestId?: string(name='RequestId'),
  terminals?: {
    terminal?: [ 
    {
      code?: int32(name='Code'),
      message?: string(name='Message'),
      id?: string(name='Id'),
    }
  ](name='Terminal')
  }(name='Terminals'),
}

model RemoveTerminalsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTerminalsResponseBody(name='body'),
}

async function removeTerminalsWithOptions(request: RemoveTerminalsRequest, runtime: Util.RuntimeOptions): RemoveTerminalsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveTerminals', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeTerminals(request: RemoveTerminalsRequest): RemoveTerminalsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTerminalsWithOptions(request, runtime);
}

model SetChannelPropertyRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  maxUserNum?: int32(name='MaxUserNum'),
  startTime?: int32(name='StartTime'),
  duration?: int32(name='Duration'),
  priority?: string(name='Priority'),
  topics?: string(name='Topics'),
}

model SetChannelPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetChannelPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetChannelPropertyResponseBody(name='body'),
}

async function setChannelPropertyWithOptions(request: SetChannelPropertyRequest, runtime: Util.RuntimeOptions): SetChannelPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetChannelProperty', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setChannelProperty(request: SetChannelPropertyRequest): SetChannelPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setChannelPropertyWithOptions(request, runtime);
}

model StartMPUTaskRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  taskId?: string(name='TaskId'),
  taskProfile?: string(name='TaskProfile'),
  taskMode?: int32(name='TaskMode'),
  mixMode?: int32(name='MixMode'),
  cropMode?: int32(name='CropMode'),
  mediaEncode?: int32(name='MediaEncode'),
  sourceType?: string(name='SourceType'),
  streamType?: int32(name='StreamType'),
  backgroundColor?: int32(name='BackgroundColor'),
  streamURL?: string(name='StreamURL'),
  payloadType?: int32(name='PayloadType'),
  reportVad?: int32(name='ReportVad'),
  rtpExtInfo?: int32(name='RtpExtInfo'),
  timeStampRef?: long(name='TimeStampRef'),
  vadInterval?: long(name='VadInterval'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers'),
  layoutIds?: [ integer ](name='LayoutIds'),
  userPanes?: [ 
    {
      images?: [ 
        {
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          url?: string(name='Url'),
          display?: int32(name='Display'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Images'),
      segmentType?: int32(name='SegmentType'),
      userId?: string(name='UserId'),
      texts?: [ 
        {
          fontType?: int32(name='FontType'),
          fontColor?: int32(name='FontColor'),
          y?: float(name='Y'),
          text?: string(name='Text'),
          ZOrder?: int32(name='ZOrder'),
          fontSize?: int32(name='FontSize'),
          x?: float(name='X'),
        }
      ](name='Texts'),
      sourceType?: string(name='SourceType'),
      paneId?: int32(name='PaneId'),
    }
  ](name='UserPanes'),
  backgrounds?: [ 
    {
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Backgrounds'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Watermarks'),
  clockWidgets?: [ 
    {
      fontType?: int32(name='FontType'),
      fontColor?: int32(name='FontColor'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
      fontSize?: int32(name='FontSize'),
    }
  ](name='ClockWidgets'),
}

model StartMPUTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartMPUTaskResponseBody(name='body'),
}

async function startMPUTaskWithOptions(request: StartMPUTaskRequest, runtime: Util.RuntimeOptions): StartMPUTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartMPUTask', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startMPUTask(request: StartMPUTaskRequest): StartMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMPUTaskWithOptions(request, runtime);
}

model StartRecordTaskRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  taskId?: string(name='TaskId'),
  taskProfile?: string(name='TaskProfile'),
  mediaEncode?: int32(name='MediaEncode'),
  templateId?: string(name='TemplateId'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          url?: string(name='Url'),
          display?: int32(name='Display'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Images'),
      userId?: string(name='UserId'),
      texts?: [ 
        {
          fontType?: int32(name='FontType'),
          fontColor?: int32(name='FontColor'),
          y?: float(name='Y'),
          text?: string(name='Text'),
          ZOrder?: int32(name='ZOrder'),
          fontSize?: int32(name='FontSize'),
          x?: float(name='X'),
        }
      ](name='Texts'),
      sourceType?: string(name='SourceType'),
      paneId?: int32(name='PaneId'),
    }
  ](name='UserPanes'),
}

model StartRecordTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartRecordTaskResponseBody(name='body'),
}

async function startRecordTaskWithOptions(request: StartRecordTaskRequest, runtime: Util.RuntimeOptions): StartRecordTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartRecordTask', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startRecordTask(request: StartRecordTaskRequest): StartRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRecordTaskWithOptions(request, runtime);
}

model StopChannelUserPublishRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  userId?: string(name='UserId'),
}

model StopChannelUserPublishResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopChannelUserPublishResponse = {
  headers: map[string]string(name='headers'),
  body: StopChannelUserPublishResponseBody(name='body'),
}

async function stopChannelUserPublishWithOptions(request: StopChannelUserPublishRequest, runtime: Util.RuntimeOptions): StopChannelUserPublishResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopChannelUserPublish', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopChannelUserPublish(request: StopChannelUserPublishRequest): StopChannelUserPublishResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopChannelUserPublishWithOptions(request, runtime);
}

model StopMPUTaskRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  taskId?: string(name='TaskId'),
}

model StopMPUTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopMPUTaskResponseBody(name='body'),
}

async function stopMPUTaskWithOptions(request: StopMPUTaskRequest, runtime: Util.RuntimeOptions): StopMPUTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopMPUTask', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopMPUTask(request: StopMPUTaskRequest): StopMPUTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMPUTaskWithOptions(request, runtime);
}

model StopRecordTaskRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  taskId?: string(name='TaskId'),
}

model StopRecordTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopRecordTaskResponseBody(name='body'),
}

async function stopRecordTaskWithOptions(request: StopRecordTaskRequest, runtime: Util.RuntimeOptions): StopRecordTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopRecordTask', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopRecordTask(request: StopRecordTaskRequest): StopRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRecordTaskWithOptions(request, runtime);
}

model UnmuteAudioRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
  participantIds?: [ string ](name='ParticipantIds'),
}

model UnmuteAudioResponseBody = {
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
  participants?: {
    participant?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      id?: string(name='Id'),
    }
  ](name='Participant')
  }(name='Participants'),
}

model UnmuteAudioResponse = {
  headers: map[string]string(name='headers'),
  body: UnmuteAudioResponseBody(name='body'),
}

async function unmuteAudioWithOptions(request: UnmuteAudioRequest, runtime: Util.RuntimeOptions): UnmuteAudioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnmuteAudio', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unmuteAudio(request: UnmuteAudioRequest): UnmuteAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return unmuteAudioWithOptions(request, runtime);
}

model UnmuteAudioAllRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  conferenceId?: string(name='ConferenceId'),
  participantId?: string(name='ParticipantId'),
}

model UnmuteAudioAllResponseBody = {
  requestId?: string(name='RequestId'),
  conferenceId?: string(name='ConferenceId'),
  participants?: {
    participant?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      id?: string(name='Id'),
    }
  ](name='Participant')
  }(name='Participants'),
}

model UnmuteAudioAllResponse = {
  headers: map[string]string(name='headers'),
  body: UnmuteAudioAllResponseBody(name='body'),
}

async function unmuteAudioAllWithOptions(request: UnmuteAudioAllRequest, runtime: Util.RuntimeOptions): UnmuteAudioAllResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnmuteAudioAll', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unmuteAudioAll(request: UnmuteAudioAllRequest): UnmuteAudioAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return unmuteAudioAllWithOptions(request, runtime);
}

model UpdateChannelRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  nonce?: string(name='Nonce'),
}

model UpdateChannelResponseBody = {
  nonce?: string(name='Nonce'),
  requestId?: string(name='RequestId'),
  timestamp?: int32(name='Timestamp'),
}

model UpdateChannelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateChannelResponseBody(name='body'),
}

async function updateChannelWithOptions(request: UpdateChannelRequest, runtime: Util.RuntimeOptions): UpdateChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateChannel', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateChannel(request: UpdateChannelRequest): UpdateChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateChannelWithOptions(request, runtime);
}

model UpdateMPULayoutRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  taskId?: string(name='TaskId'),
  cropMode?: int32(name='CropMode'),
  backgroundColor?: int32(name='BackgroundColor'),
  layoutIds?: [ integer ](name='LayoutIds'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          url?: string(name='Url'),
          display?: int32(name='Display'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Images'),
      segmentType?: int32(name='SegmentType'),
      userId?: string(name='UserId'),
      texts?: [ 
        {
          fontType?: int32(name='FontType'),
          fontColor?: int32(name='FontColor'),
          y?: float(name='Y'),
          text?: string(name='Text'),
          ZOrder?: int32(name='ZOrder'),
          fontSize?: int32(name='FontSize'),
          x?: float(name='X'),
        }
      ](name='Texts'),
      sourceType?: string(name='SourceType'),
      paneId?: int32(name='PaneId'),
    }
  ](name='UserPanes'),
  backgrounds?: [ 
    {
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Backgrounds'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Watermarks'),
  clockWidgets?: [ 
    {
      fontType?: int32(name='FontType'),
      fontColor?: int32(name='FontColor'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
      fontSize?: int32(name='FontSize'),
    }
  ](name='ClockWidgets'),
}

model UpdateMPULayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMPULayoutResponseBody(name='body'),
}

async function updateMPULayoutWithOptions(request: UpdateMPULayoutRequest, runtime: Util.RuntimeOptions): UpdateMPULayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateMPULayout', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateMPULayout(request: UpdateMPULayoutRequest): UpdateMPULayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMPULayoutWithOptions(request, runtime);
}

model UpdateRecordTaskRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  channelId?: string(name='ChannelId'),
  taskId?: string(name='TaskId'),
  templateId?: string(name='TemplateId'),
  subSpecUsers?: [ string ](name='SubSpecUsers'),
  userPanes?: [ 
    {
      images?: [ 
        {
          width?: float(name='Width'),
          height?: float(name='Height'),
          y?: float(name='Y'),
          url?: string(name='Url'),
          display?: int32(name='Display'),
          ZOrder?: int32(name='ZOrder'),
          x?: float(name='X'),
        }
      ](name='Images'),
      userId?: string(name='UserId'),
      texts?: [ 
        {
          fontType?: int32(name='FontType'),
          fontColor?: int32(name='FontColor'),
          y?: float(name='Y'),
          text?: string(name='Text'),
          ZOrder?: int32(name='ZOrder'),
          fontSize?: int32(name='FontSize'),
          x?: float(name='X'),
        }
      ](name='Texts'),
      sourceType?: string(name='SourceType'),
      paneId?: int32(name='PaneId'),
    }
  ](name='UserPanes'),
}

model UpdateRecordTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecordTaskResponseBody(name='body'),
}

async function updateRecordTaskWithOptions(request: UpdateRecordTaskRequest, runtime: Util.RuntimeOptions): UpdateRecordTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRecordTask', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRecordTask(request: UpdateRecordTaskRequest): UpdateRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordTaskWithOptions(request, runtime);
}

model UpdateRecordTemplateRequest {
  ownerId?: long(name='OwnerId'),
  showLog?: string(name='ShowLog'),
  appId?: string(name='AppId'),
  name?: string(name='Name'),
  templateId?: string(name='TemplateId'),
  taskProfile?: string(name='TaskProfile'),
  mediaEncode?: int32(name='MediaEncode'),
  backgroundColor?: int32(name='BackgroundColor'),
  ossBucket?: string(name='OssBucket'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  mnsQueue?: string(name='MnsQueue'),
  httpCallbackUrl?: string(name='HttpCallbackUrl'),
  fileSplitInterval?: int32(name='FileSplitInterval'),
  delayStopTime?: int32(name='DelayStopTime'),
  layoutIds?: [ integer ](name='LayoutIds'),
  formats?: [ string ](name='Formats'),
  backgrounds?: [ 
    {
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Backgrounds'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      width?: float(name='Width'),
      height?: float(name='Height'),
      y?: float(name='Y'),
      url?: string(name='Url'),
      display?: int32(name='Display'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
    }
  ](name='Watermarks'),
  clockWidgets?: [ 
    {
      fontType?: int32(name='FontType'),
      fontColor?: int32(name='FontColor'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
      x?: float(name='X'),
      fontSize?: int32(name='FontSize'),
    }
  ](name='ClockWidgets'),
}

model UpdateRecordTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model UpdateRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecordTemplateResponseBody(name='body'),
}

async function updateRecordTemplateWithOptions(request: UpdateRecordTemplateRequest, runtime: Util.RuntimeOptions): UpdateRecordTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRecordTemplate', '2018-01-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRecordTemplate(request: UpdateRecordTemplateRequest): UpdateRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordTemplateWithOptions(request, runtime);
}

