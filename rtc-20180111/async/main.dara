/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'rtc';
  @version = '2018-01-11';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddRecordTemplateRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  delayStopTime?: int32(name='DelayStopTime', example='180', minimum=5, maximum=86400, position='Query'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false', position='Query'),
  fileSplitInterval: int32(name='FileSplitInterval', example='1800', position='Query'),
  formats: [ string ](name='Formats', example='mp4', position='Query'),
  httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback', position='Query'),
  layoutIds: [ long ](name='LayoutIds', example='2', position='Query'),
  mediaEncode: int32(name='MediaEncode', example='20', position='Query'),
  mnsQueue?: string(name='MnsQueue', example='record-callback-queue', position='Query'),
  name: string(name='Name', position='Query'),
  ossBucket: string(name='OssBucket', example='rtc-record-oss', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossFilePrefix: string(name='OssFilePrefix', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskProfile: string(name='TaskProfile', example='4IN_1080P', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model AddRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model AddRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddRecordTemplateResponseBody(name='body'),
}

async function addRecordTemplate(request: AddRecordTemplateRequest): AddRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoLiveStreamRuleRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Query'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes', position='Query'),
  channelIds?: [ string ](name='ChannelIds', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='20', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}', position='Query'),
  ruleName?: string(name='RuleName', example='testRule', position='Query'),
}

model CreateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  ruleId?: long(name='RuleId', example='12'),
}

model CreateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoLiveStreamRuleResponseBody(name='body'),
}

async function createAutoLiveStreamRule(request: CreateAutoLiveStreamRuleRequest): CreateAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventSubscribeRequest {
  appId: string(name='AppId', example='9qb1****', position='Query'),
  callbackUrl: string(name='CallbackUrl', example='http://****.com/callback', position='Query'),
  channelId?: string(name='ChannelId', example='123333', position='Query'),
  clientToken: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  events: [ string ](name='Events', example='ChannelEvent', position='Query'),
  needCallbackAuth?: boolean(name='NeedCallbackAuth', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  role?: long(name='Role', example='1', position='Query'),
  users?: [ string ](name='Users', example='user1', position='Query'),
}

model CreateEventSubscribeResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  subscribeId?: string(name='SubscribeId', example='ad53276431c****'),
}

model CreateEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventSubscribeResponseBody(name='body'),
}

async function createEventSubscribe(request: CreateEventSubscribeRequest): CreateEventSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model CreateMPULayoutRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  audioMixCount: int32(name='AudioMixCount', example='3', position='Query'),
  name?: string(name='Name', example='LayoutName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  panes: [ 
    {
      height?: float(name='Height', example='0.25'),
      majorPane?: int32(name='MajorPane', example='1'),
      paneId?: int32(name='PaneId', example='0'),
      width?: float(name='Width', example='0.25'),
      x?: float(name='X', example='0.25'),
      y?: float(name='Y', example='0.25'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Panes', position='Query'),
}

model CreateMPULayoutResponseBody = {
  layoutId?: long(name='LayoutId', example='2'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model CreateMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMPULayoutResponseBody(name='body'),
}

async function createMPULayout(request: CreateMPULayoutRequest): CreateMPULayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMPULayout', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoLiveStreamRuleRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: long(name='RuleId', example='12', position='Query'),
}

model DeleteAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoLiveStreamRuleResponseBody(name='body'),
}

async function deleteAutoLiveStreamRule(request: DeleteAutoLiveStreamRuleRequest): DeleteAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChannelRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', example='testid', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteChannelResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
}

model DeleteChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChannelResponseBody(name='body'),
}

async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChannel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventSubscribeRequest {
  appId: string(name='AppId', example='9qb1****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  subscribeId: string(name='SubscribeId', example='ad53276431c****', position='Query'),
}

model DeleteEventSubscribeResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteEventSubscribeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventSubscribeResponseBody(name='body'),
}

async function deleteEventSubscribe(request: DeleteEventSubscribeRequest): DeleteEventSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMPULayoutRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  layoutId: long(name='LayoutId', example='2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteMPULayoutResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMPULayoutResponseBody(name='body'),
}

async function deleteMPULayout(request: DeleteMPULayoutRequest): DeleteMPULayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMPULayout', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRecordTemplateRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', description='1', position='Query'),
  templateId: string(name='TemplateId', example='76dasgb****', position='Query'),
}

model DeleteRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRecordTemplateResponseBody(name='body'),
}

async function deleteRecordTemplate(request: DeleteRecordTemplateRequest): DeleteRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppKeyRequest {
  appId: string(name='AppId', example='0cho****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='AppKey。', example='ba133b2cee4ab9be424674892c33****'),
  requestId?: string(name='RequestId', example='154EF5DE-3D08-1F2C-A482-281F78D74B7C'),
}

model DescribeAppKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppKeyResponseBody(name='body'),
}

async function describeAppKey(request: DescribeAppKeyRequest): DescribeAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='2', minimum=1, position='Query'),
  status?: string(name='Status', example='1', position='Query'),
}

model DescribeAppsResponseBody = {
  appList?: {
    app?: [ 
    {
      appId?: string(name='AppId', example='rgf1****"'),
      appName?: string(name='AppName', example='Default AppName'),
      appType?: string(name='AppType', example='universal'),
      billType?: string(name='BillType', example='paybyduration'),
      createTime?: string(name='CreateTime', example='2020-01-09T02:02:29Z'),
      region?: string(name='Region'),
      serviceAreas?: {
        serviceArea?: [ string ](name='ServiceArea')
      }(name='ServiceAreas'),
      status?: int32(name='Status', example='1'),
    }
  ](name='App')
  }(name='AppList'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  totalNum?: int32(name='TotalNum', example='1'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoLiveStreamRuleRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='069BCB66-CD80-11E8-A82B-A70F78BBDC00'),
  rules?: [ 
    {
      callBack?: string(name='CallBack', example='http://example.com/callBack'),
      channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
      channelIds?: [ string ](name='ChannelIds'),
      createTime?: string(name='CreateTime', example='2021-08-19T02:53:07Z'),
      mediaEncode?: int32(name='MediaEncode', example='20'),
      playDomain?: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}'),
      ruleId?: long(name='RuleId', example='12'),
      ruleName?: string(name='RuleName', example='testRule'),
      status?: string(name='Status', example='disable'),
    }
  ](name='Rules'),
}

model DescribeAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoLiveStreamRuleResponseBody(name='body'),
}

async function describeAutoLiveStreamRule(request: DescribeAutoLiveStreamRuleRequest): DescribeAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCallListRequest {
  appId: string(name='AppId', description='APP ID。', example='testappid', position='Query'),
  callStatus?: string(name='CallStatus', example='OUT', position='Query'),
  channelId?: string(name='ChannelId', example='311', position='Query'),
  endTs: long(name='EndTs', example='1615892596', position='Query'),
  orderBy?: string(name='OrderBy', example='BAD_EXP_USER_COUNT_DESC', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  queryMode?: string(name='QueryMode', example='ALL', position='Query'),
  startTs: long(name='StartTs', example='1615806196', position='Query'),
  userId?: string(name='UserId', example='c906531af5f9****', position='Query'),
}

model DescribeCallListResponseBody = {
  callList?: [ 
    {
      appId?: string(name='AppId', description='App ID。', example='9qb1****'),
      badExpUserCnt?: int32(name='BadExpUserCnt', example='0'),
      callStatus?: string(name='CallStatus', example='OUT'),
      channelId?: string(name='ChannelId', example='904'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      duration?: long(name='Duration', example='10'),
      userCnt?: int32(name='UserCnt', example='5'),
    }
  ](name='CallList'),
  pageNo?: int32(name='PageNo', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  totalCnt?: int32(name='TotalCnt', example='20'),
}

model DescribeCallListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCallListResponseBody(name='body'),
}

async function describeCallList(request: DescribeCallListRequest): DescribeCallListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCallList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelParticipantsRequest {
  appId: string(name='AppId', example='aec****', position='Query'),
  channelId: string(name='ChannelId', example='testId', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, position='Query'),
}

model DescribeChannelParticipantsResponseBody = {
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
  totalNum?: int32(name='TotalNum', example='3'),
  totalPage?: int32(name='TotalPage', example='1'),
  userList?: {
    user?: [ string ](name='User')
  }(name='UserList'),
}

model DescribeChannelParticipantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelParticipantsResponseBody(name='body'),
}

async function describeChannelParticipants(request: DescribeChannelParticipantsRequest): DescribeChannelParticipantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelParticipants', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelUsersRequest {
  appId: string(name='AppId', example='a2hz****', position='Query'),
  channelId: string(name='ChannelId', example='testId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeChannelUsersResponseBody = {
  channelProfile?: int32(name='ChannelProfile', example='1'),
  commTotalNum?: int32(name='CommTotalNum', example='100'),
  interactiveUserList?: [ string ](name='InteractiveUserList'),
  interactiveUserNum?: int32(name='InteractiveUserNum', example='0'),
  isChannelExist?: boolean(name='IsChannelExist', example='true'),
  liveUserList?: [ string ](name='LiveUserList'),
  liveUserNum?: int32(name='LiveUserNum', example='0'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
  userList?: [ string ](name='UserList'),
}

model DescribeChannelUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChannelUsersResponseBody(name='body'),
}

async function describeChannelUsers(request: DescribeChannelUsersRequest): DescribeChannelUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelUsers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMPULayoutInfoListRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  layoutId?: long(name='LayoutId', example='2', minimum=0, position='Query'),
  name?: string(name='Name', example='LayoutName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, position='Query'),
}

model DescribeMPULayoutInfoListResponseBody = {
  layouts?: {
    layout?: [ 
    {
      audioMixCount?: int32(name='AudioMixCount', example='3'),
      layoutId?: long(name='LayoutId', example='2'),
      name?: string(name='Name', example='LayoutName'),
      panes?: {
        panes?: [ 
        {
          height?: float(name='Height', example='0.5'),
          majorPane?: int32(name='MajorPane', example='0'),
          paneId?: int32(name='PaneId', example='0'),
          width?: float(name='Width', example='0.5'),
          x?: float(name='X', example='0.5'),
          y?: float(name='Y', example='0.5'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Panes')
      }(name='Panes'),
    }
  ](name='Layout')
  }(name='Layouts'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeMPULayoutInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMPULayoutInfoListResponseBody(name='body'),
}

async function describeMPULayoutInfoList(request: DescribeMPULayoutInfoListRequest): DescribeMPULayoutInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMPULayoutInfoList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordFilesRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  channelId?: string(name='ChannelId', example='yourChannelId', position='Query'),
  endTime?: string(name='EndTime', example='2020-11-02T17:36:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  startTime?: string(name='StartTime', example='2020-11-01T17:36:00Z', position='Query'),
  taskIds?: [ string ](name='TaskIds', example='yourTaskId', position='Query'),
}

model DescribeRecordFilesResponseBody = {
  recordFiles?: [ 
    {
      appId?: string(name='AppId', example='yourAppId'),
      channelId?: string(name='ChannelId', example='yourChannelId'),
      createTime?: string(name='CreateTime', example='2020-10-02T17:36:00Z'),
      duration?: float(name='Duration', example='1800'),
      startTime?: string(name='StartTime', example='2020-11-01T17:36:00Z'),
      stopTime?: string(name='StopTime', example='2020-11-02T17:36:00Z'),
      taskId?: string(name='TaskId', example='yourTaskId'),
      url?: string(name='Url', example='http://rtc-demo.oss-cn-****.aliyuncs.com/record/10-15-1/****/record-002_yourTaskId/example.m3u8'),
    }
  ](name='RecordFiles'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b****'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeRecordFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecordFilesResponseBody(name='body'),
}

async function describeRecordFiles(request: DescribeRecordFilesRequest): DescribeRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecordFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordTemplatesRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', description='1', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  templateIds?: [ string ](name='TemplateIds', example='76dasgb****', position='Query'),
}

model DescribeRecordTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='C292B80E-5175-4BA4-8CC292B80E-5175-4BA4-8C1E-2ABEC4D7C2FE1E-2ABEC4D7****'),
  templates?: [ 
    {
      backgroundColor?: int32(name='BackgroundColor', example='0'),
      backgrounds?: [ 
        {
          display?: int32(name='Display', example='0'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Backgrounds'),
      clockWidgets?: [ 
        {
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='ClockWidgets'),
      createTime?: string(name='CreateTime', example='2020-09-04T06:22:15Z'),
      delayStopTime?: int32(name='DelayStopTime', example='180'),
      enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false'),
      fileSplitInterval?: int32(name='FileSplitInterval', example='1800'),
      formats?: [ string ](name='Formats'),
      httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback'),
      layoutIds?: [ long ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode', example='50'),
      mnsQueue?: string(name='MnsQueue', example='record-callback-queue'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket', example='rtc-record-oss'),
      ossFilePrefix?: string(name='OssFilePrefix', example='record/pre/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
      taskProfile?: string(name='TaskProfile', example='4IN_1080P'),
      templateId?: string(name='TemplateId', example='1ca698e2-57fa-4314-8e11-00d950d4****'),
      watermarks?: [ 
        {
          alpha?: float(name='Alpha', example='0'),
          display?: int32(name='Display', example='0'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Watermarks'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeRecordTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecordTemplatesResponseBody(name='body'),
}

async function describeRecordTemplates(request: DescribeRecordTemplatesRequest): DescribeRecordTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecordTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcChannelListRequest {
  appId?: string(name='AppId', example='aoe****', position='Query'),
  channelId?: string(name='ChannelId', example='testChannel', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: long(name='PageNo', example='1', position='Query'),
  pageSize: long(name='PageSize', example='20', position='Query'),
  serviceArea?: string(name='ServiceArea', example='cn', position='Query'),
  sortType?: string(name='SortType', example='desc', position='Query'),
  timePoint: string(name='TimePoint', example='2018-01-29T00:00:00Z', position='Query'),
  userId?: string(name='UserId', example='testUser', position='Query'),
}

model DescribeRtcChannelListResponseBody = {
  channelList?: {
    channelList?: [ 
    {
      callArea?: {
        callArea?: [ string ](name='CallArea')
      }(name='CallArea'),
      channelId?: string(name='ChannelId', example='testChannel'),
      endTime?: string(name='EndTime', example='2018-01-29T02:00:00Z'),
      startTime?: string(name='StartTime', example='2018-01-29T01:00:00Z'),
      totalUserCnt?: long(name='TotalUserCnt', example='2'),
    }
  ](name='ChannelList')
  }(name='ChannelList'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  totalCnt?: long(name='TotalCnt', example='1000'),
}

model DescribeRtcChannelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcChannelListResponseBody(name='body'),
}

async function describeRtcChannelList(request: DescribeRtcChannelListRequest): DescribeRtcChannelListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcChannelList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcChannelMetricRequest {
  appId: string(name='AppId', example='aoe****', position='Query'),
  channelId: string(name='ChannelId', example='testId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  timePoint: string(name='TimePoint', example='2018-01-29T00:00:00Z', position='Query'),
}

model DescribeRtcChannelMetricResponseBody = {
  channelMetricInfo?: {
    channelMetric?: {
      channelId?: string(name='ChannelId', example='example_channel'),
      endTime?: string(name='EndTime', example='2019-06-06T18:57:00Z'),
      pubUserCount?: int32(name='PubUserCount', example='10'),
      startTime?: string(name='StartTime', example='2019-06-06T17:57:00Z'),
      subUserCount?: int32(name='SubUserCount', example='25'),
      userCount?: int32(name='UserCount', example='30'),
    }(name='ChannelMetric'),
    duration?: {
      pubDuration?: {
        audio?: int32(name='Audio', example='100'),
        content?: int32(name='Content', example='100'),
        video1080?: int32(name='Video1080', example='100'),
        video360?: int32(name='Video360', example='100'),
        video720?: int32(name='Video720', example='100'),
      }(name='PubDuration'),
      subDuration?: {
        audio?: int32(name='Audio', example='100'),
        content?: int32(name='Content', example='100'),
        video1080?: int32(name='Video1080', example='100'),
        video360?: int32(name='Video360', example='100'),
        video720?: int32(name='Video720', example='100'),
      }(name='SubDuration'),
    }(name='Duration'),
  }(name='ChannelMetricInfo'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcChannelMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcChannelMetricResponseBody(name='body'),
}

async function describeRtcChannelMetric(request: DescribeRtcChannelMetricRequest): DescribeRtcChannelMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcChannelMetric', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcDurationDataRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  endTime?: string(name='EndTime', example='2020-02-04T07:00:00Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serviceArea?: string(name='ServiceArea', example='CN', position='Query'),
  startTime?: string(name='StartTime', example='2020-02-04T05:00:00Z', position='Query'),
}

model DescribeRtcDurationDataResponseBody = {
  durationDataPerInterval?: {
    durationModule?: [ 
    {
      audioDuration?: long(name='AudioDuration', example='200'),
      contentDuration?: long(name='ContentDuration', example='200'),
      timeStamp?: string(name='TimeStamp', example='2020-02-04T05:00:00Z'),
      totalDuration?: long(name='TotalDuration', example='1000'),
      v1080Duration?: long(name='V1080Duration', example='300'),
      v360Duration?: long(name='V360Duration', example='300'),
      v720Duration?: long(name='V720Duration', example='200'),
    }
  ](name='DurationModule')
  }(name='DurationDataPerInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcDurationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcDurationDataResponseBody(name='body'),
}

async function describeRtcDurationData(request: DescribeRtcDurationDataRequest): DescribeRtcDurationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcDurationData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcPeakChannelCntDataRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  endTime?: string(name='EndTime', example='2018-01-29T00:00:00Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serviceArea?: string(name='ServiceArea', example='CN', position='Query'),
  startTime?: string(name='StartTime', example='2018-01-29T00:00:00Z', position='Query'),
}

model DescribeRtcPeakChannelCntDataResponseBody = {
  peakChannelCntDataPerInterval?: {
    peakChannelCntModule?: [ 
    {
      activeChannelPeak?: long(name='ActiveChannelPeak', example='10'),
      activeChannelPeakTime?: string(name='ActiveChannelPeakTime', example='2018-01-29T00:01:00Z'),
      timeStamp?: string(name='TimeStamp', example='2018-01-29T00:00:00Z'),
    }
  ](name='PeakChannelCntModule')
  }(name='PeakChannelCntDataPerInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcPeakChannelCntDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcPeakChannelCntDataResponseBody(name='body'),
}

async function describeRtcPeakChannelCntData(request: DescribeRtcPeakChannelCntDataRequest): DescribeRtcPeakChannelCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcPeakChannelCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcUserCntDataRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  endTime?: string(name='EndTime', example='2018-01-29T01:00:00Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serviceArea?: string(name='ServiceArea', example='CN', position='Query'),
  startTime?: string(name='StartTime', example='2018-01-29T00:00:00Z', position='Query'),
}

model DescribeRtcUserCntDataResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  userCntDataPerInterval?: {
    userCntModule?: [ 
    {
      activeUserCnt?: long(name='ActiveUserCnt', example='10'),
      timeStamp?: string(name='TimeStamp', example='2018-01-29T00:00:00Z'),
    }
  ](name='UserCntModule')
  }(name='UserCntDataPerInterval'),
}

model DescribeRtcUserCntDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRtcUserCntDataResponseBody(name='body'),
}

async function describeRtcUserCntData(request: DescribeRtcUserCntDataRequest): DescribeRtcUserCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcUserCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserInfoInChannelRequest {
  appId: string(name='AppId', example='4eah****', position='Query'),
  channelId: string(name='ChannelId', example='1234', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  userId: string(name='UserId', example='testId', position='Query'),
}

model DescribeUserInfoInChannelResponseBody = {
  isChannelExist?: boolean(name='IsChannelExist', example='true'),
  isInChannel?: boolean(name='IsInChannel', example='true'),
  property?: [ 
    {
      join?: int32(name='Join', example='1557909133'),
      role?: int32(name='Role', example='1'),
      session?: string(name='Session', example='xa744sxx8rtobgj****'),
    }
  ](name='Property'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
}

model DescribeUserInfoInChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserInfoInChannelResponseBody(name='body'),
}

async function describeUserInfoInChannel(request: DescribeUserInfoInChannelRequest): DescribeUserInfoInChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserInfoInChannel', 'POST', '/', 'json', false, 'json', request);
}

model DisableAutoLiveStreamRuleRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: long(name='RuleId', example='12', position='Query'),
}

model DisableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DisableAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAutoLiveStreamRuleResponseBody(name='body'),
}

async function disableAutoLiveStreamRule(request: DisableAutoLiveStreamRuleRequest): DisableAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoLiveStreamRuleRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: long(name='RuleId', example='12', position='Query'),
}

model EnableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model EnableAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAutoLiveStreamRuleResponseBody(name='body'),
}

async function enableAutoLiveStreamRule(request: EnableAutoLiveStreamRuleRequest): EnableAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model GetMPUTaskStatusRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', example='yourTaskId', position='Query'),
}

model GetMPUTaskStatusResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  status?: int32(name='Status', example='0'),
}

model GetMPUTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMPUTaskStatusResponseBody(name='body'),
}

async function getMPUTaskStatus(request: GetMPUTaskStatusRequest): GetMPUTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMPUTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: string(name='AppId', example='ioeh****', position='Query'),
  appName: string(name='AppName', example='defaultName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMPULayoutRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  audioMixCount?: int32(name='AudioMixCount', example='3', position='Query'),
  layoutId: long(name='LayoutId', example='10117', position='Query'),
  name?: string(name='Name', example='LayoutName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  panes?: [ 
    {
      height?: float(name='Height', example='0.2456'),
      majorPane?: int32(name='MajorPane', example='0'),
      paneId?: int32(name='PaneId', example='0'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Panes', position='Query'),
}

model ModifyMPULayoutResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model ModifyMPULayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMPULayoutResponseBody(name='body'),
}

async function modifyMPULayout(request: ModifyMPULayoutRequest): ModifyMPULayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMPULayout', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTerminalsRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  channelId: string(name='ChannelId', example='yourChannelId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  terminalIds: [ string ](name='TerminalIds', example='1811xxxx', position='Query'),
}

model RemoveTerminalsResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  terminals?: {
    terminal?: [ 
    {
      code?: int32(name='Code', example='0'),
      id?: string(name='Id', example='1811****'),
      message?: string(name='Message', example='Success'),
    }
  ](name='Terminal')
  }(name='Terminals'),
}

model RemoveTerminalsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTerminalsResponseBody(name='body'),
}

async function removeTerminals(request: RemoveTerminalsRequest): RemoveTerminalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTerminals', 'POST', '/', 'json', false, 'json', request);
}

model StartMPUTaskRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  channelId: string(name='ChannelId', example='yourChannelId', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha', example='0', minimum=0),
      borderColor?: long(name='BorderColor', example='0', minimum=0),
      borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
      box?: boolean(name='Box', example='false'),
      boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
      boxColor?: long(name='BoxColor', example='0', minimum=0),
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  cropMode?: int32(name='CropMode', example='1', position='Query'),
  enhancedParam?: {
    enablePortraitSegmentation?: boolean(name='EnablePortraitSegmentation', example='false'),
  }(name='EnhancedParam', position='Body'),
  layoutIds?: [ long ](name='LayoutIds', example='1', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='2', position='Query'),
  mixMode?: int32(name='MixMode', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payloadType?: int32(name='PayloadType', example='0', position='Query'),
  reportVad?: int32(name='ReportVad', example='0', position='Query'),
  rtpExtInfo?: int32(name='RtpExtInfo', example='0', position='Query'),
  sourceType?: string(name='SourceType', example='camera', position='Query'),
  streamType?: int32(name='StreamType', example='0', position='Query'),
  streamURL?: string(name='StreamURL', example='rtmp://example.com/live/stream', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', example='audioUserID', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID', position='Query'),
  taskId: string(name='TaskId', example='yourTaskId', position='Query'),
  taskType?: int32(name='TaskType', example='0', minimum=0, maximum=1, position='Query'),
  timeStampRef?: long(name='TimeStampRef', example='15273582735', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      segmentType?: int32(name='SegmentType', example='0'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          alpha?: float(name='Alpha', example='0', minimum=0),
          borderColor?: long(name='BorderColor', example='0', minimum=0),
          borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
          box?: boolean(name='Box', example='false'),
          boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
          boxColor?: long(name='BoxColor', example='0', minimum=0),
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.2456'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes', position='Query'),
  vadInterval?: long(name='VadInterval', example='86400', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model StartMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StartMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartMPUTaskResponseBody(name='body'),
}

async function startMPUTask(request: StartMPUTaskRequest): StartMPUTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartMPUTask', 'POST', '/', 'json', true, 'form', request);
}

model StartRecordTaskRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  channelId: string(name='ChannelId', example='yourChannelId', position='Query'),
  cropMode?: long(name='CropMode', example='1', position='Query'),
  layoutIds?: [ long ](name='LayoutIds', example='1111', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='20', position='Query'),
  mixMode?: int32(name='MixMode', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceType?: string(name='SourceType', example='camera', position='Query'),
  streamType?: int32(name='StreamType', example='0', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', example='1', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', example='1', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', example='1', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID', position='Query'),
  taskId: string(name='TaskId', example='yourTaskId', position='Query'),
  taskProfile?: string(name='TaskProfile', example='4IN_1080P', position='Query'),
  templateId: string(name='TemplateId', example='76dasgb****', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', example='1', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', example='1', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', example='1', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor', example='1'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes', position='Query'),
}

model StartRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b****'),
}

model StartRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRecordTaskResponseBody(name='body'),
}

async function startRecordTask(request: StartRecordTaskRequest): StartRecordTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRecordTask', 'POST', '/', 'json', false, 'json', request);
}

model StopMPUTaskRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', example='yourTaskId', position='Query'),
}

model StopMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StopMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopMPUTaskResponseBody(name='body'),
}

async function stopMPUTask(request: StopMPUTaskRequest): StopMPUTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMPUTask', 'POST', '/', 'json', false, 'json', request);
}

model StopRecordTaskRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', example='yourTaskId', position='Query'),
}

model StopRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StopRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopRecordTaskResponseBody(name='body'),
}

async function stopRecordTask(request: StopRecordTaskRequest): StopRecordTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRecordTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAutoLiveStreamRuleRequest {
  appId: string(name='AppId', example='eo85****', position='Query'),
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Query'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes', position='Query'),
  channelIds?: [ string ](name='ChannelIds', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='20', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}', position='Query'),
  ruleId: int32(name='RuleId', example='12', position='Query'),
  ruleName?: string(name='RuleName', example='testRule', position='Query'),
}

model UpdateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateAutoLiveStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutoLiveStreamRuleResponseBody(name='body'),
}

async function updateAutoLiveStreamRule(request: UpdateAutoLiveStreamRuleRequest): UpdateAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMPUTaskRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha', example='0', minimum=0),
      borderColor?: long(name='BorderColor', example='0'),
      borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
      box?: boolean(name='Box', example='false'),
      boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
      boxColor?: long(name='BoxColor', example='0', minimum=0),
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  cropMode?: int32(name='CropMode', example='1', position='Query'),
  layoutIds?: [ long ](name='LayoutIds', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='2', position='Query'),
  mixMode?: int32(name='MixMode', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceType?: string(name='SourceType', example='camera', position='Query'),
  streamType?: int32(name='StreamType', example='0', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', position='Query'),
  taskId: string(name='TaskId', example='testId', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      segmentType?: int32(name='SegmentType', example='0'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          alpha?: float(name='Alpha', example='0', minimum=0),
          borderColor?: long(name='BorderColor', example='0', minimum=0),
          borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
          box?: boolean(name='Box', example='false'),
          boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
          boxColor?: long(name='BoxColor', example='0', minimum=0),
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestUserID'),
    }
  ](name='UserPanes', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model UpdateMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateMPUTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMPUTaskResponseBody(name='body'),
}

async function updateMPUTask(request: UpdateMPUTaskRequest): UpdateMPUTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMPUTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordTaskRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  channelId: string(name='ChannelId', example='yourChannelId', position='Query'),
  cropMode?: long(name='CropMode', position='Query'),
  layoutIds?: [ long ](name='LayoutIds', position='Query'),
  mediaEncode?: long(name='MediaEncode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID', position='Query'),
  taskId: string(name='TaskId', example='yourTaskId', position='Query'),
  taskProfile?: string(name='TaskProfile', position='Query'),
  templateId: string(name='TemplateId', example='76dasgb****', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='1'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes', position='Query'),
}

model UpdateRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordTaskResponseBody(name='body'),
}

async function updateRecordTask(request: UpdateRecordTaskRequest): UpdateRecordTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordTemplateRequest {
  appId: string(name='AppId', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  delayStopTime?: int32(name='DelayStopTime', example='180', minimum=5, maximum=86400, position='Query'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false', position='Query'),
  fileSplitInterval: int32(name='FileSplitInterval', example='1800', position='Query'),
  formats: [ string ](name='Formats', example='mp4', position='Query'),
  httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback', position='Query'),
  layoutIds: [ long ](name='LayoutIds', example='1111', position='Query'),
  mediaEncode: int32(name='MediaEncode', example='20', position='Query'),
  mnsQueue?: string(name='MnsQueue', example='record-callback-queue', position='Query'),
  name: string(name='Name', position='Query'),
  ossBucket: string(name='OssBucket', example='rtc-record-pre', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossFilePrefix: string(name='OssFilePrefix', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskProfile: string(name='TaskProfile', example='4IN_1080P', position='Query'),
  templateId: string(name='TemplateId', example='76dasgb****', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model UpdateRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model UpdateRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordTemplateResponseBody(name='body'),
}

async function updateRecordTemplate(request: UpdateRecordTemplateRequest): UpdateRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

