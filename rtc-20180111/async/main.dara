/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'rtc';
  @version = '2018-01-11';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddRecordTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  delayStopTime?: int32(name='DelayStopTime', example='180', minimum=5, maximum=86400, position='Query'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false', position='Query'),
  fileSplitInterval: int32(name='FileSplitInterval', description='This parameter is required.', example='1800', position='Query'),
  formats: [ string ](name='Formats', description='This parameter is required.', example='mp4', position='Query'),
  httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback', position='Query'),
  layoutIds: [ long ](name='LayoutIds', description='This parameter is required.', example='2', position='Query'),
  mediaEncode: int32(name='MediaEncode', description='This parameter is required.', example='20', position='Query'),
  mnsQueue?: string(name='MnsQueue', example='record-callback-queue', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ossBucket: string(name='OssBucket', description='This parameter is required.', example='rtc-record-oss', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossFilePrefix: string(name='OssFilePrefix', description='This parameter is required.', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskProfile: string(name='TaskProfile', description='This parameter is required.', example='4IN_1080P', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model AddRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model AddRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddRecordTemplate  AddRecordTemplateRequest
  * @return AddRecordTemplateResponse
 */
async function addRecordTemplate(request: AddRecordTemplateRequest): AddRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppLayoutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='53200b81-b761-4c10-842a-a0726d97xxxx', position='Query'),
  layout: {
    name: string(name='Name', description='This parameter is required.', example='布局', maxLength=100),
    panes: [ 
      {
        height?: double(name='Height', example='0.25', minimum=0, maximum=1),
        paneId?: long(name='PaneId', example='0', minimum=0, maximum=15),
        width?: double(name='Width', example='0.25', minimum=0, maximum=1),
        x?: double(name='X', example='0.25', minimum=0, maximum=1),
        y?: double(name='Y', example='0.25', minimum=0, maximum=1),
        zOrder?: int32(name='ZOrder', example='0', minimum=0, maximum=2),
      }
    ](name='Panes', description='This parameter is required.'),
  }(name='Layout', description='This parameter is required.', shrink='json', position='Query'),
}

model CreateAppLayoutResponseBody = {
  layoutId?: string(name='LayoutId', example='167466539798442****'),
  requestId?: string(name='RequestId', description='Id of the request', example='20A6D1E3-1F5F-5440-A4F1-EC7831646FE4'),
}

model CreateAppLayoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppLayoutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppLayout  CreateAppLayoutRequest
  * @return CreateAppLayoutResponse
 */
async function createAppLayout(request: CreateAppLayoutRequest): CreateAppLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppLayout', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRecordTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  recordTemplate: {
    delayStopTime?: int32(name='DelayStopTime', example='180', minimum=180, maximum=300),
    filePrefix: string(name='FilePrefix', description='This parameter is required.', example='record/{AppId}/{ChannelId}_{TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
    fileSplitInterval: int32(name='FileSplitInterval', description='This parameter is required.', example='1800', minimum=1800, maximum=20000),
    formats: [ string ](name='Formats', description='This parameter is required.'),
    layoutIds?: [ string ](name='LayoutIds'),
    mediaEncode: int32(name='MediaEncode', description='This parameter is required.', example='1'),
    name: string(name='Name', description='This parameter is required.', example='模版'),
  }(name='RecordTemplate', description='This parameter is required.', shrink='json', position='Query'),
}

model CreateAppRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  templateId?: string(name='TemplateId', example='lD7muaxx'),
}

model CreateAppRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppRecordTemplate  CreateAppRecordTemplateRequest
  * @return CreateAppRecordTemplateResponse
 */
async function createAppRecordTemplate(request: CreateAppRecordTemplateRequest): CreateAppRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppStreamingOutTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  streamingOutTemplate: {
    layoutIds: [ string ](name='LayoutIds', description='This parameter is required.'),
    mediaEncode: int32(name='MediaEncode', description='This parameter is required.', example='1'),
    name: string(name='Name', description='This parameter is required.', example='模版'),
  }(name='StreamingOutTemplate', description='This parameter is required.', shrink='json', position='Query'),
}

model CreateAppStreamingOutTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30D41049-D02D-1C21-86AE-B3E5FD805C27'),
  templateId?: string(name='TemplateId', example='bc5v****'),
}

model CreateAppStreamingOutTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppStreamingOutTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppStreamingOutTemplate  CreateAppStreamingOutTemplateRequest
  * @return CreateAppStreamingOutTemplateResponse
 */
async function createAppStreamingOutTemplate(request: CreateAppStreamingOutTemplateRequest): CreateAppStreamingOutTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppStreamingOutTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoLiveStreamRuleRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Query'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes', position='Query'),
  channelIds?: [ string ](name='ChannelIds', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='20', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain: string(name='PlayDomain', description='This parameter is required.', example='rtmp://${domain}/${app}/${stream}', position='Query'),
  ruleName?: string(name='RuleName', example='testRule', position='Query'),
}

model CreateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  ruleId?: long(name='RuleId', example='12'),
}

model CreateAutoLiveStreamRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAutoLiveStreamRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAutoLiveStreamRule  CreateAutoLiveStreamRuleRequest
  * @return CreateAutoLiveStreamRuleResponse
 */
async function createAutoLiveStreamRule(request: CreateAutoLiveStreamRuleRequest): CreateAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventSubscribeRequest {
  appId: string(name='AppId', description='This parameter is required.', example='9qb1****', position='Query'),
  callbackUrl: string(name='CallbackUrl', description='This parameter is required.', example='http://****.com/callback', position='Query'),
  channelId?: string(name='ChannelId', example='123333', position='Query'),
  clientToken: string(name='ClientToken', description='This parameter is required.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  events: [ string ](name='Events', description='This parameter is required.', example='ChannelEvent', position='Query'),
  needCallbackAuth?: boolean(name='NeedCallbackAuth', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  role?: long(name='Role', example='1', position='Query'),
  users?: [ string ](name='Users', example='user1', position='Query'),
}

model CreateEventSubscribeResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  subscribeId?: string(name='SubscribeId', example='ad53276431c****'),
}

model CreateEventSubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventSubscribeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEventSubscribe  CreateEventSubscribeRequest
  * @return CreateEventSubscribeResponse
 */
async function createEventSubscribe(request: CreateEventSubscribeRequest): CreateEventSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model CreateMPULayoutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  audioMixCount: int32(name='AudioMixCount', description='This parameter is required.', example='3', position='Query'),
  name?: string(name='Name', example='LayoutName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  panes: [ 
    {
      height?: float(name='Height', example='0.25'),
      majorPane?: int32(name='MajorPane', example='1'),
      paneId?: int32(name='PaneId', example='0'),
      width?: float(name='Width', example='0.25'),
      x?: float(name='X', example='0.25'),
      y?: float(name='Y', example='0.25'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Panes', description='This parameter is required.', position='Query'),
}

model CreateMPULayoutResponseBody = {
  layoutId?: long(name='LayoutId', example='2'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model CreateMPULayoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMPULayoutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMPULayout  CreateMPULayoutRequest
  * @return CreateMPULayoutResponse
 */
async function createMPULayout(request: CreateMPULayoutRequest): CreateMPULayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMPULayout', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppLayoutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  layout?: {
    layoutId: string(name='LayoutId', description='This parameter is required.', example='167466539798442****'),
  }(name='Layout', shrink='json', position='Query'),
}

model DeleteAppLayoutResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2DCE8D7E-BE3B-54AB-8DAC-32F34BED0763'),
}

model DeleteAppLayoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppLayoutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppLayout  DeleteAppLayoutRequest
  * @return DeleteAppLayoutResponse
 */
async function deleteAppLayout(request: DeleteAppLayoutRequest): DeleteAppLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppLayout', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRecordTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='53200b81-b761-4c10-842a-a0726d97xxxx', position='Query'),
  template: {
    templateId: string(name='TemplateId', description='This parameter is required.', example='2xh6****'),
  }(name='Template', description='This parameter is required.', shrink='json', position='Query'),
}

model DeleteAppRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DeleteAppRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppRecordTemplate  DeleteAppRecordTemplateRequest
  * @return DeleteAppRecordTemplateResponse
 */
async function deleteAppRecordTemplate(request: DeleteAppRecordTemplateRequest): DeleteAppRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppStreamingOutTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='wv7N****', position='Query'),
  streamingOutTemplate: {
    templateId: string(name='TemplateId', description='This parameter is required.', example='xd4c****'),
  }(name='StreamingOutTemplate', description='This parameter is required.', shrink='json', position='Query'),
}

model DeleteAppStreamingOutTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30D41049-D02D-1C21-86AE-B3E5FD825C17'),
}

model DeleteAppStreamingOutTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppStreamingOutTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppStreamingOutTemplate  DeleteAppStreamingOutTemplateRequest
  * @return DeleteAppStreamingOutTemplateResponse
 */
async function deleteAppStreamingOutTemplate(request: DeleteAppStreamingOutTemplateRequest): DeleteAppStreamingOutTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppStreamingOutTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoLiveStreamRuleRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: long(name='RuleId', description='This parameter is required.', example='12', position='Query'),
}

model DeleteAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteAutoLiveStreamRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAutoLiveStreamRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAutoLiveStreamRule  DeleteAutoLiveStreamRuleRequest
  * @return DeleteAutoLiveStreamRuleResponse
 */
async function deleteAutoLiveStreamRule(request: DeleteAutoLiveStreamRuleRequest): DeleteAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChannelRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteChannelResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
}

model DeleteChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteChannel  DeleteChannelRequest
  * @return DeleteChannelResponse
 */
async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChannel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventSubscribeRequest {
  appId: string(name='AppId', description='This parameter is required.', example='9qb1****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  subscribeId: string(name='SubscribeId', description='This parameter is required.', example='ad53276431c****', position='Query'),
}

model DeleteEventSubscribeResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteEventSubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventSubscribeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEventSubscribe  DeleteEventSubscribeRequest
  * @return DeleteEventSubscribeResponse
 */
async function deleteEventSubscribe(request: DeleteEventSubscribeRequest): DeleteEventSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMPULayoutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  layoutId: long(name='LayoutId', description='This parameter is required.', example='2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteMPULayoutResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteMPULayoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMPULayoutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMPULayout  DeleteMPULayoutRequest
  * @return DeleteMPULayoutResponse
 */
async function deleteMPULayout(request: DeleteMPULayoutRequest): DeleteMPULayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMPULayout', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRecordTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', description='1', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='76dasgb****', position='Query'),
}

model DeleteRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DeleteRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRecordTemplate  DeleteRecordTemplateRequest
  * @return DeleteRecordTemplateResponse
 */
async function deleteRecordTemplate(request: DeleteRecordTemplateRequest): DeleteRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllCallbackRequest {
}

model DescribeAllCallbackResponseBody = {
  callbacks?: [ 
    {
      category?: string(name='Category', example='RecordEvent'),
      name?: string(name='Name', example='录制回调'),
      subEvent?: [ 
        {
          event?: int32(name='Event', example='2000'),
          eventName?: string(name='EventName', example='录制开始'),
          type?: int32(name='Type', example='0'),
        }
      ](name='SubEvent'),
    }
  ](name='Callbacks'),
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeAllCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAllCallback  DescribeAllCallbackRequest
  * @return DescribeAllCallbackResponse
 */
async function describeAllCallback(request: DescribeAllCallbackRequest): DescribeAllCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllCallback', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppCallStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='223***JQb', position='Query'),
}

model DescribeAppCallStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='20A6D1E3-1F5F-5440-A4F1-EC7831646FE4'),
  result?: string(name='Result', example='enable'),
}

model DescribeAppCallStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppCallStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppCallStatus  DescribeAppCallStatusRequest
  * @return DescribeAppCallStatusResponse
 */
async function describeAppCallStatus(request: DescribeAppCallStatusRequest): DescribeAppCallStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppCallStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppCallbackSecretKeyRequest {
  appId: string(name='AppId', description='This parameter is required.', example='9qb1****', position='Query'),
}

model DescribeAppCallbackSecretKeyResponseBody = {
  callbackSecretKey?: string(name='CallbackSecretKey', example='a656b296a30xxxxxxxxxx1cd4'),
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeAppCallbackSecretKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppCallbackSecretKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppCallbackSecretKey  DescribeAppCallbackSecretKeyRequest
  * @return DescribeAppCallbackSecretKeyResponse
 */
async function describeAppCallbackSecretKey(request: DescribeAppCallbackSecretKeyRequest): DescribeAppCallbackSecretKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppCallbackSecretKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppKeyRequest {
  appId: string(name='AppId', description='This parameter is required.', example='0cho****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='AppKey。', example='ba133b2cee4ab9be424674892c33****'),
  requestId?: string(name='RequestId', example='154EF5DE-3D08-1F2C-A482-281F78D74B7C'),
}

model DescribeAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppKey  DescribeAppKeyRequest
  * @return DescribeAppKeyResponse
 */
async function describeAppKey(request: DescribeAppKeyRequest): DescribeAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppLayoutsRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  condition?: {
    layoutId?: string(name='LayoutId', example='167466539798442****'),
    name?: string(name='Name', example='测试'),
  }(name='Condition', shrink='json', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeAppLayoutsResponseBody = {
  layouts?: [ 
    {
      layoutId?: string(name='LayoutId', example='167466539798442****'),
      name?: string(name='Name', example='测试'),
      panes?: [ 
        {
          height?: float(name='Height', example='0.25'),
          paneId?: int32(name='PaneId', example='0'),
          width?: float(name='Width', example='0.25'),
          x?: float(name='X', example='0.25'),
          y?: float(name='Y', example='0.25'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Panes'),
    }
  ](name='Layouts'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  totalNum?: long(name='TotalNum', example='10'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeAppLayoutsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppLayoutsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppLayouts  DescribeAppLayoutsRequest
  * @return DescribeAppLayoutsResponse
 */
async function describeAppLayouts(request: DescribeAppLayoutsRequest): DescribeAppLayoutsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppLayouts', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAppLiveStreamStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
}

model DescribeAppLiveStreamStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  result?: string(name='Result', example='disable'),
}

model DescribeAppLiveStreamStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppLiveStreamStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppLiveStreamStatus  DescribeAppLiveStreamStatusRequest
  * @return DescribeAppLiveStreamStatusResponse
 */
async function describeAppLiveStreamStatus(request: DescribeAppLiveStreamStatusRequest): DescribeAppLiveStreamStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppLiveStreamStatus', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAppRecordStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
}

model DescribeAppRecordStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  result?: string(name='Result', example='disable'),
}

model DescribeAppRecordStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppRecordStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppRecordStatus  DescribeAppRecordStatusRequest
  * @return DescribeAppRecordStatusResponse
 */
async function describeAppRecordStatus(request: DescribeAppRecordStatusRequest): DescribeAppRecordStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppRecordStatus', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAppRecordTemplatesRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  condition?: {
    name?: string(name='Name', example='测试'),
    templateId?: string(name='TemplateId', example='ac7N****'),
  }(name='Condition', shrink='json', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeAppRecordTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2A7497D0-BEAE-58E7-B13A-751BD8EAE4C6'),
  templates?: [ 
    {
      createTime?: bytes(name='CreateTime', example='2020-09-04T06:22:15Z'),
      delayStopTime?: long(name='DelayStopTime', example='180'),
      filePrefix?: string(name='FilePrefix', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
      fileSplitInterval?: long(name='FileSplitInterval', example='1800'),
      formats?: [ string ](name='Formats'),
      layoutIds?: [ long ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode', example='1'),
      name?: string(name='Name', example='测试'),
      templateId?: string(name='TemplateId', example='wv7N****'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum', example='10'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeAppRecordTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppRecordTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppRecordTemplates  DescribeAppRecordTemplatesRequest
  * @return DescribeAppRecordTemplatesResponse
 */
async function describeAppRecordTemplates(request: DescribeAppRecordTemplatesRequest): DescribeAppRecordTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppRecordTemplates', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAppRecordingFilesRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId?: string(name='ChannelId', example='311', position='Query'),
  endTs?: long(name='EndTs', example='1712376532000', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
  startTs?: long(name='StartTs', example='1712376032000', position='Query'),
  taskIds?: [ string ](name='TaskIds', shrink='json', position='Query'),
}

model DescribeAppRecordingFilesResponseBody = {
  items?: [ 
    {
      bucket?: string(name='Bucket', example='rtc-bucket'),
      channelId?: string(name='ChannelId', example='testchannelId'),
      fileCreateTs?: long(name='FileCreateTs', example='1712376032000'),
      fileDuration?: int32(name='FileDuration', example='200'),
      filePath?: string(name='FilePath', example='record/appid/12_task_local1/1712279809158_1712279844691/playlist.mp4'),
      fileSize?: int32(name='FileSize', example='10000'),
      region?: int32(name='Region', example='1'),
      startTs?: long(name='StartTs', example='1712376012000'),
      taskId?: string(name='TaskId', example='test001'),
      vendor?: int32(name='Vendor', example='1'),
    }
  ](name='Items'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10', maximum=100),
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  totalCnt?: int32(name='TotalCnt', example='10'),
}

model DescribeAppRecordingFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppRecordingFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppRecordingFiles  DescribeAppRecordingFilesRequest
  * @return DescribeAppRecordingFilesResponse
 */
async function describeAppRecordingFiles(request: DescribeAppRecordingFilesRequest): DescribeAppRecordingFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppRecordingFiles', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAppStreamingOutTemplatesRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ioeh****', position='Query'),
  condition?: {
    name?: string(name='Name', example='测试'),
    templateId?: string(name='TemplateId', example='Bj6D****'),
  }(name='Condition', shrink='json', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeAppStreamingOutTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B0A2FCBC-43A4-428F-BC1D-3F4F85837F76'),
  templates?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-09-04T06:22:15Z'),
      layoutIds?: [ string ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode', example='1'),
      name?: string(name='Name', example='模版名称'),
      templateId?: string(name='TemplateId', example='Bj6D****'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum', example='10'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeAppStreamingOutTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppStreamingOutTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppStreamingOutTemplates  DescribeAppStreamingOutTemplatesRequest
  * @return DescribeAppStreamingOutTemplatesResponse
 */
async function describeAppStreamingOutTemplates(request: DescribeAppStreamingOutTemplatesRequest): DescribeAppStreamingOutTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppStreamingOutTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  appVersion?: string(name='AppVersion', example='3.0', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='2', minimum=1, position='Query'),
  status?: string(name='Status', example='1', position='Query'),
}

model DescribeAppsResponseBody = {
  appList?: {
    app?: [ 
    {
      appId?: string(name='AppId', example='rgf1****"'),
      appName?: string(name='AppName', example='Default AppName'),
      appType?: string(name='AppType', example='universal'),
      billType?: string(name='BillType', example='paybyduration'),
      createTime?: string(name='CreateTime', example='2020-01-09T02:02:29Z'),
      serviceAreas?: {
        serviceArea?: [ string ](name='ServiceArea')
      }(name='ServiceAreas'),
      status?: int32(name='Status', example='1'),
      version?: string(name='Version'),
    }
  ](name='App')
  }(name='AppList'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  totalNum?: int32(name='TotalNum', example='1'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model DescribeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApps  DescribeAppsRequest
  * @return DescribeAppsResponse
 */
async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoLiveStreamRuleRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='069BCB66-CD80-11E8-A82B-A70F78BBDC00'),
  rules?: [ 
    {
      callBack?: string(name='CallBack', example='http://example.com/callBack'),
      channelIdPrefixes?: [ string ](name='ChannelIdPrefixes'),
      channelIds?: [ string ](name='ChannelIds'),
      createTime?: string(name='CreateTime', example='2021-08-19T02:53:07Z'),
      mediaEncode?: int32(name='MediaEncode', example='20'),
      playDomain?: string(name='PlayDomain', example='rtmp://${domain}/${app}/${stream}'),
      ruleId?: long(name='RuleId', example='12'),
      ruleName?: string(name='RuleName', example='testRule'),
      status?: string(name='Status', example='disable'),
    }
  ](name='Rules'),
}

model DescribeAutoLiveStreamRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAutoLiveStreamRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAutoLiveStreamRule  DescribeAutoLiveStreamRuleRequest
  * @return DescribeAutoLiveStreamRuleResponse
 */
async function describeAutoLiveStreamRule(request: DescribeAutoLiveStreamRuleRequest): DescribeAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCallRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  extDataType?: string(name='ExtDataType', example='USER_DURATION_STAT', position='Query'),
  queryExpInfo?: boolean(name='QueryExpInfo', example='false', position='Query'),
}

model DescribeCallResponseBody = {
  callInfo?: {
    appId?: string(name='AppId', description='App ID。', example='xxxxxxxx'),
    callStatus?: string(name='CallStatus', example='IN'),
    channelId?: string(name='ChannelId', example='123456'),
    createdTs?: long(name='CreatedTs', example='1615860711'),
    destroyedTs?: long(name='DestroyedTs', example='1615860811'),
    duration?: long(name='Duration', example='100'),
  }(name='CallInfo'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  userDetailList?: [ 
    {
      callExp?: string(name='CallExp', example='GOOD'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      durMetricStatData?: {
        pubAudio?: long(name='PubAudio', example='0'),
        pubVideo1080?: long(name='PubVideo1080', example='0'),
        pubVideo360?: long(name='PubVideo360', example='0'),
        pubVideo720?: long(name='PubVideo720', example='0'),
        pubVideoScreenShare?: long(name='PubVideoScreenShare', example='0'),
        subAudio?: long(name='SubAudio', example='0'),
        subVideo1080?: long(name='SubVideo1080', example='0'),
        subVideo360?: long(name='SubVideo360', example='0'),
        subVideo720?: long(name='SubVideo720', example='0'),
        subVideoScreenShare?: long(name='SubVideoScreenShare', example='0'),
      }(name='DurMetricStatData'),
      duration?: long(name='Duration', example='0'),
      location?: string(name='Location', example='浙江省-杭州市'),
      network?: string(name='Network', example='4G'),
      networkList?: [ string ](name='NetworkList'),
      onlineDuration?: long(name='OnlineDuration', example='0'),
      onlinePeriods?: [ 
        {
          joinTs?: long(name='JoinTs', example='1614936817'),
          leaveTs?: long(name='LeaveTs', example='1614936817'),
        }
      ](name='OnlinePeriods'),
      os?: string(name='Os', example='iOS'),
      osList?: [ string ](name='OsList'),
      roles?: [ string ](name='Roles'),
      sdkVersion?: string(name='SdkVersion', example='1.0.0'),
      sdkVersionList?: [ string ](name='SdkVersionList'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='UserDetailList'),
}

model DescribeCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCall  DescribeCallRequest
  * @return DescribeCallResponse
 */
async function describeCall(request: DescribeCallRequest): DescribeCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCall', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCallListRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  callStatus?: string(name='CallStatus', example='OUT', position='Query'),
  channelId?: string(name='ChannelId', example='311', position='Query'),
  endTs: long(name='EndTs', description='This parameter is required.', example='1615892596', position='Query'),
  orderBy?: string(name='OrderBy', example='BAD_EXP_USER_COUNT_DESC', position='Query'),
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  queryMode?: string(name='QueryMode', example='ALL', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1615806196', position='Query'),
  userId?: string(name='UserId', example='c906531af5f9****', position='Query'),
}

model DescribeCallListResponseBody = {
  callList?: [ 
    {
      appId?: string(name='AppId', description='App ID。', example='9qb1****'),
      badExpUserCnt?: int32(name='BadExpUserCnt', example='0'),
      callStatus?: string(name='CallStatus', example='OUT'),
      channelId?: string(name='ChannelId', example='904'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      duration?: long(name='Duration', example='10'),
      userCnt?: int32(name='UserCnt', example='5'),
    }
  ](name='CallList'),
  pageNo?: int32(name='PageNo', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  totalCnt?: int32(name='TotalCnt', example='20'),
}

model DescribeCallListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCallListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCallList  DescribeCallListRequest
  * @return DescribeCallListResponse
 */
async function describeCallList(request: DescribeCallListRequest): DescribeCallListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCallList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCallbacksRequest {
  appId: string(name='AppId', description='This parameter is required.', example='223***JQb', position='Query'),
}

model DescribeCallbacksResponseBody = {
  callbacks?: [ 
    {
      category?: string(name='Category', example='RecordEvent'),
      checkStatus?: string(name='CheckStatus', example='1'),
      code?: string(name='Code', example='RESPONSE_INVALID'),
      conf?: string(name='Conf', example='https://www.aliyun.com'),
      msg?: string(name='Msg', example='Success'),
      status?: int32(name='Status', example='1'),
      subEvent?: [ int32 ](name='SubEvent'),
    }
  ](name='Callbacks'),
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeCallbacksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCallbacksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCallbacks  DescribeCallbacksRequest
  * @return DescribeCallbacksResponse
 */
async function describeCallbacks(request: DescribeCallbacksRequest): DescribeCallbacksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCallbacks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
}

model DescribeChannelResponseBody = {
  channel?: {
    channelId?: string(name='ChannelId', example='testid'),
    startTime?: long(name='StartTime', example='1557909133'),
  }(name='Channel', description='channel'),
  channelExist?: boolean(name='ChannelExist'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
}

model DescribeChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannel  DescribeChannelRequest
  * @return DescribeChannelResponse
 */
async function describeChannel(request: DescribeChannelRequest): DescribeChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelAllUsersRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
}

model DescribeChannelAllUsersResponseBody = {
  channelExist?: boolean(name='ChannelExist'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  users?: [ 
    {
      userId?: string(name='UserId', example='1811****'),
    }
  ](name='Users'),
}

model DescribeChannelAllUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelAllUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelAllUsers  DescribeChannelAllUsersRequest
  * @return DescribeChannelAllUsersResponse
 */
async function describeChannelAllUsers(request: DescribeChannelAllUsersRequest): DescribeChannelAllUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelAllUsers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelAreaDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  parentArea?: string(name='ParentArea', position='Query'),
}

model DescribeChannelAreaDistributionStatDataResponseBody = {
  areaStatList?: [ 
    {
      areaName?: string(name='AreaName', example='浙江省'),
      callUserCount?: int32(name='CallUserCount', example='1'),
      highQualityTransmissionRate?: string(name='HighQualityTransmissionRate', example='0.9999'),
      pubUserCount?: int32(name='PubUserCount', example='1'),
      subUserCount?: int32(name='SubUserCount', example='1'),
    }
  ](name='AreaStatList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeChannelAreaDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelAreaDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelAreaDistributionStatData  DescribeChannelAreaDistributionStatDataRequest
  * @return DescribeChannelAreaDistributionStatDataResponse
 */
async function describeChannelAreaDistributionStatData(request: DescribeChannelAreaDistributionStatDataRequest): DescribeChannelAreaDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelAreaDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  statDim: string(name='StatDim', description='This parameter is required.', example='OS', position='Query'),
}

model DescribeChannelDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  statList?: [ 
    {
      callUserCount?: int32(name='CallUserCount', example='1'),
      callUserRatio?: string(name='CallUserRatio', example='1.0000'),
      name?: string(name='Name', example='OS'),
    }
  ](name='StatList'),
}

model DescribeChannelDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelDistributionStatData  DescribeChannelDistributionStatDataRequest
  * @return DescribeChannelDistributionStatDataResponse
 */
async function describeChannelDistributionStatData(request: DescribeChannelDistributionStatDataRequest): DescribeChannelDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelOverallDataRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1615893133', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1615893757', position='Query'),
}

model DescribeChannelOverallDataResponseBody = {
  callInfo?: {
    appId?: string(name='AppId', example='rjdhtnqy'),
    callStatus?: string(name='CallStatus', example='IN'),
    channelId?: string(name='ChannelId', example='123456'),
    createdTs?: long(name='CreatedTs', example='1615860711'),
    destroyedTs?: long(name='DestroyedTs', example='1615860811'),
    duration?: long(name='Duration', example='100'),
  }(name='CallInfo'),
  metricDatas?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1612418625'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='CALL_QUALITY'),
    }
  ](name='MetricDatas'),
  overallData?: {
    connAvgTime?: float(name='ConnAvgTime', example='0.5'),
    fiveSecJoinRate?: float(name='FiveSecJoinRate', example='0.91'),
    totalAudioStuckRate?: float(name='TotalAudioStuckRate', example='0.02'),
    totalVideoStuckRate?: float(name='TotalVideoStuckRate', example='0.02'),
    totalVideoVagueRate?: float(name='TotalVideoVagueRate', example='0.02'),
  }(name='OverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeChannelOverallDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelOverallDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelOverallData  DescribeChannelOverallDataRequest
  * @return DescribeChannelOverallDataResponse
 */
async function describeChannelOverallData(request: DescribeChannelOverallDataRequest): DescribeChannelOverallDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelOverallData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelParticipantsRequest {
  appId: string(name='AppId', description='This parameter is required.', example='aec****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testId', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, position='Query'),
}

model DescribeChannelParticipantsResponseBody = {
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
  totalNum?: int32(name='TotalNum', example='3'),
  totalPage?: int32(name='TotalPage', example='1'),
  userList?: {
    user?: [ string ](name='User')
  }(name='UserList'),
}

model DescribeChannelParticipantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelParticipantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelParticipants  DescribeChannelParticipantsRequest
  * @return DescribeChannelParticipantsResponse
 */
async function describeChannelParticipants(request: DescribeChannelParticipantsRequest): DescribeChannelParticipantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelParticipants', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelTopPubUserListRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1615893133', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1615893757', position='Query'),
}

model DescribeChannelTopPubUserListResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  topPubUserDetailList?: [ 
    {
      createdTs?: long(name='CreatedTs', example='1615893327'),
      destroyedTs?: long(name='DestroyedTs', example='1615893442'),
      duration?: long(name='Duration', example='0'),
      location?: string(name='Location', example='浙江省-杭州市'),
      onlineDuration?: long(name='OnlineDuration', example='0'),
      onlinePeriods?: [ 
        {
          joinTs?: long(name='JoinTs', example='1615893327'),
          leaveTs?: long(name='LeaveTs', example='1615893442'),
        }
      ](name='OnlinePeriods'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='TopPubUserDetailList'),
}

model DescribeChannelTopPubUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelTopPubUserListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelTopPubUserList  DescribeChannelTopPubUserListRequest
  * @return DescribeChannelTopPubUserListResponse
 */
async function describeChannelTopPubUserList(request: DescribeChannelTopPubUserListRequest): DescribeChannelTopPubUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelTopPubUserList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelUserRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='1811****', position='Query'),
}

model DescribeChannelUserResponseBody = {
  channelExist?: boolean(name='ChannelExist'),
  inChannel?: boolean(name='InChannel'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  sessions?: [ 
    {
      joined?: long(name='Joined', example='1557909133'),
      sessionId?: string(name='SessionId', example='xa744sxx8rtobgj****'),
      userId?: string(name='UserId', example='1811****'),
    }
  ](name='Sessions'),
}

model DescribeChannelUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelUser  DescribeChannelUserRequest
  * @return DescribeChannelUserResponse
 */
async function describeChannelUser(request: DescribeChannelUserRequest): DescribeChannelUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelUser', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelUserMetricsRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
}

model DescribeChannelUserMetricsResponseBody = {
  metricDatas?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1612418625'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='ALL_NUM'),
    }
  ](name='MetricDatas'),
  overallData?: {
    totalBadExpNum?: long(name='TotalBadExpNum', example='0'),
    totalJoinFailNum?: long(name='TotalJoinFailNum', example='0'),
    totalPubUserNum?: long(name='TotalPubUserNum', example='1'),
    totalSubUserNum?: long(name='TotalSubUserNum', example='3'),
    totalUserNum?: long(name='TotalUserNum', example='5'),
  }(name='OverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeChannelUserMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelUserMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelUserMetrics  DescribeChannelUserMetricsRequest
  * @return DescribeChannelUserMetricsResponse
 */
async function describeChannelUserMetrics(request: DescribeChannelUserMetricsRequest): DescribeChannelUserMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelUserMetrics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelUsersRequest {
  appId: string(name='AppId', description='This parameter is required.', example='a2hz****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeChannelUsersResponseBody = {
  channelProfile?: int32(name='ChannelProfile', example='1'),
  commTotalNum?: int32(name='CommTotalNum', example='100'),
  interactiveUserList?: [ string ](name='InteractiveUserList'),
  interactiveUserNum?: int32(name='InteractiveUserNum', example='0'),
  isChannelExist?: boolean(name='IsChannelExist', example='true'),
  liveUserList?: [ string ](name='LiveUserList'),
  liveUserNum?: int32(name='LiveUserNum', example='0'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
  userList?: [ string ](name='UserList'),
}

model DescribeChannelUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelUsers  DescribeChannelUsersRequest
  * @return DescribeChannelUsersResponse
 */
async function describeChannelUsers(request: DescribeChannelUsersRequest): DescribeChannelUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelUsers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelsRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', minLength=8, maxLength=11, position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model DescribeChannelsResponseBody = {
  pageNo?: int32(name='PageNo', example='1', minimum=1),
  pageSize?: int32(name='PageSize', example='10', minimum=1),
  records?: [ string ](name='Records'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  totalCnt?: int32(name='TotalCnt', example='1'),
}

model DescribeChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannels  DescribeChannelsRequest
  * @return DescribeChannelsResponse
 */
async function describeChannels(request: DescribeChannelsRequest): DescribeChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannels', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEndPointEventListRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  userIdList: string(name='UserIdList', description='This parameter is required.', example='testuserid1,testuserid2', position='Query'),
}

model DescribeEndPointEventListResponseBody = {
  nodes?: [ 
    {
      eventDataItems?: [ 
        {
          eventList?: [ 
            {
              eventName?: string(name='EventName', example='开始发布'),
              eventType?: string(name='EventType', example='USER'),
              ts?: long(name='Ts', example='1614936817'),
              tsInMs?: string(name='TsInMs', example='1614936817123'),
            }
          ](name='EventList'),
          ts?: long(name='Ts', example='1614936817'),
        }
      ](name='EventDataItems'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeEndPointEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndPointEventListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEndPointEventList  DescribeEndPointEventListRequest
  * @return DescribeEndPointEventListResponse
 */
async function describeEndPointEventList(request: DescribeEndPointEventListRequest): DescribeEndPointEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndPointEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndPointMetricDataRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  metrics: string(name='Metrics', description='This parameter is required.', example='VIDEO_STUCK_CAMERA', position='Query'),
  pubCallIdList?: string(name='PubCallIdList', example='testcall1,testcall2', position='Query'),
  pubUserId?: string(name='PubUserId', example='testuserid', position='Query'),
  subUserId?: string(name='SubUserId', example='testuserid', position='Query'),
}

model DescribeEndPointMetricDataResponseBody = {
  pubMetrics?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1548670257'),
          y?: string(name='Y', example='230100'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='VIDEO_STUCK_CAMERA'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='PubMetrics'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  subMetrics?: [ 
    {
      nodes?: [ 
        {
          ext?: map[string]any(name='Ext'),
          x?: string(name='X', example='1548670257'),
          y?: string(name='Y', example='230100'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='VIDEO_STUCK_CAMERA'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='SubMetrics'),
}

model DescribeEndPointMetricDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndPointMetricDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEndPointMetricData  DescribeEndPointMetricDataRequest
  * @return DescribeEndPointMetricDataResponse
 */
async function describeEndPointMetricData(request: DescribeEndPointMetricDataRequest): DescribeEndPointMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndPointMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaultDiagnosisFactorDistributionStatRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='0rbd****', position='Query'),
  endTs: long(name='EndTs', description='This parameter is required.', example='1615892596****', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1615892596', position='Query'),
}

model DescribeFaultDiagnosisFactorDistributionStatResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  statList?: [ 
    {
      factorId?: string(name='FactorId', example='1'),
      userCount?: int32(name='UserCount', example='100'),
      userRatio?: float(name='UserRatio', example='0.9239'),
    }
  ](name='StatList'),
}

model DescribeFaultDiagnosisFactorDistributionStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaultDiagnosisFactorDistributionStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaultDiagnosisFactorDistributionStat  DescribeFaultDiagnosisFactorDistributionStatRequest
  * @return DescribeFaultDiagnosisFactorDistributionStatResponse
 */
async function describeFaultDiagnosisFactorDistributionStat(request: DescribeFaultDiagnosisFactorDistributionStatRequest): DescribeFaultDiagnosisFactorDistributionStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaultDiagnosisFactorDistributionStat', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaultDiagnosisOverallDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='4eah****', position='Query'),
  endTs: long(name='EndTs', description='This parameter is required.', example='1615910399', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1615824000', position='Query'),
  statDim: string(name='StatDim', description='This parameter is required.', example='JOIN_SLOW_USER', position='Query'),
}

model DescribeFaultDiagnosisOverallDataResponseBody = {
  metricData?: {
    nodes?: [ 
      {
        ext?: map[string]any(name='Ext'),
        x?: string(name='X', example='1615824000'),
        y?: string(name='Y', example='1'),
      }
    ](name='Nodes'),
  }(name='MetricData'),
  overallData?: {
    faultUserCount?: int32(name='FaultUserCount', example='20'),
    faultUserRatio?: float(name='FaultUserRatio', example='0.1'),
    totalUserCount?: int32(name='TotalUserCount', example='40'),
  }(name='OverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeFaultDiagnosisOverallDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaultDiagnosisOverallDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaultDiagnosisOverallData  DescribeFaultDiagnosisOverallDataRequest
  * @return DescribeFaultDiagnosisOverallDataResponse
 */
async function describeFaultDiagnosisOverallData(request: DescribeFaultDiagnosisOverallDataRequest): DescribeFaultDiagnosisOverallDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaultDiagnosisOverallData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaultDiagnosisUserDetailRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='0rbd****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='311', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1615892596', position='Query'),
  faultType: string(name='FaultType', description='This parameter is required.', example='JOIN_SLOW', position='Query'),
  queryCallUserInfo?: boolean(name='QueryCallUserInfo', example='true', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='c906531af5f9****', position='Query'),
}

model DescribeFaultDiagnosisUserDetailResponseBody = {
  callInfo?: {
    appId?: string(name='AppId', description='App ID。', example='0rbd****'),
    callStatus?: string(name='CallStatus', example='IN'),
    channelId?: string(name='ChannelId', example='311'),
    createdTs?: long(name='CreatedTs', example='1620957905'),
    destroyedTs?: long(name='DestroyedTs', example='1620958150'),
    duration?: long(name='Duration', example='100'),
  }(name='CallInfo'),
  factorList?: [ 
    {
      factorId?: string(name='FactorId', example='1'),
      faultSource?: string(name='FaultSource', example='LOCAL'),
      relatedEventDatas?: [ 
        {
          eventDataItems?: [ 
            {
              eventList?: [ 
                {
                  eventName?: string(name='EventName', example='开始发布'),
                  eventType?: string(name='EventType', example='USER'),
                  ts?: long(name='Ts', example='1614936817'),
                }
              ](name='EventList'),
              ts?: long(name='Ts', example='1614936817'),
            }
          ](name='EventDataItems'),
          role?: string(name='Role', example='SENDER'),
          userId?: string(name='UserId', example='0a497933****'),
        }
      ](name='RelatedEventDatas'),
      relatedMetricDatas?: [ 
        {
          nodes?: [ 
            {
              ext?: map[string]any(name='Ext'),
              x?: string(name='X', example='1615892596'),
              y?: string(name='Y', example='20'),
            }
          ](name='Nodes'),
          role?: string(name='Role', example='SENDER'),
          type?: string(name='Type', example='AUDIO_STUCK'),
          userId?: string(name='UserId', example='0a497933****'),
        }
      ](name='RelatedMetricDatas'),
    }
  ](name='FactorList'),
  faultMetricData?: {
    nodes?: [ 
      {
        x?: string(name='X', example='1620957900'),
        y?: string(name='Y', example='0.4540'),
      }
    ](name='Nodes'),
  }(name='FaultMetricData'),
  networkOperators?: [ string ](name='NetworkOperators'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  userDetail?: {
    createdTs?: long(name='CreatedTs', example='1620957919'),
    destroyedTs?: long(name='DestroyedTs', example='1620958150'),
    duration?: long(name='Duration', example='231'),
    location?: string(name='Location', example='浙江省-杭州市'),
    network?: string(name='Network', example='4G'),
    onlineDuration?: long(name='OnlineDuration', example='231'),
    onlinePeriods?: [ 
      {
        joinTs?: long(name='JoinTs', example='1620957919'),
        leaveTs?: long(name='LeaveTs', example='1620958150'),
      }
    ](name='OnlinePeriods'),
    os?: string(name='Os', example='iOS'),
    sdkVersion?: string(name='SdkVersion', example='1.0.0'),
    userId?: string(name='UserId', example='0a497933****'),
  }(name='UserDetail'),
}

model DescribeFaultDiagnosisUserDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaultDiagnosisUserDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaultDiagnosisUserDetail  DescribeFaultDiagnosisUserDetailRequest
  * @return DescribeFaultDiagnosisUserDetailResponse
 */
async function describeFaultDiagnosisUserDetail(request: DescribeFaultDiagnosisUserDetailRequest): DescribeFaultDiagnosisUserDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaultDiagnosisUserDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaultDiagnosisUserListRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='0rbd****', position='Query'),
  channelId?: string(name='ChannelId', example='311', position='Query'),
  endTs: long(name='EndTs', description='This parameter is required.', example='1615892596', position='Query'),
  faultTypes?: string(name='FaultTypes', example='JOIN_SLOW,AUDIO_STUCK', position='Query'),
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1615806196', position='Query'),
  userId?: string(name='UserId', example='c906531af5f9****', position='Query'),
}

model DescribeFaultDiagnosisUserListResponseBody = {
  pageNo?: int32(name='PageNo', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  totalCnt?: int32(name='TotalCnt', example='20'),
  userList?: [ 
    {
      channelCreatedTs?: long(name='ChannelCreatedTs', example='1614936817'),
      channelId?: string(name='ChannelId', example='904'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      faultList?: [ 
        {
          faultType?: string(name='FaultType', example='JOIN_SLOW'),
        }
      ](name='FaultList'),
      userId?: string(name='UserId', example='123456'),
    }
  ](name='UserList'),
}

model DescribeFaultDiagnosisUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFaultDiagnosisUserListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFaultDiagnosisUserList  DescribeFaultDiagnosisUserListRequest
  * @return DescribeFaultDiagnosisUserListResponse
 */
async function describeFaultDiagnosisUserList(request: DescribeFaultDiagnosisUserListRequest): DescribeFaultDiagnosisUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaultDiagnosisUserList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMPULayoutInfoListRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  layoutId?: long(name='LayoutId', example='2', minimum=0, position='Query'),
  name?: string(name='Name', example='LayoutName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, position='Query'),
}

model DescribeMPULayoutInfoListResponseBody = {
  layouts?: {
    layout?: [ 
    {
      audioMixCount?: int32(name='AudioMixCount', example='3'),
      layoutId?: long(name='LayoutId', example='2'),
      name?: string(name='Name', example='LayoutName'),
      panes?: {
        panes?: [ 
        {
          height?: float(name='Height', example='0.5'),
          majorPane?: int32(name='MajorPane', example='0'),
          paneId?: int32(name='PaneId', example='0'),
          width?: float(name='Width', example='0.5'),
          x?: float(name='X', example='0.5'),
          y?: float(name='Y', example='0.5'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Panes')
      }(name='Panes'),
    }
  ](name='Layout')
  }(name='Layouts'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeMPULayoutInfoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMPULayoutInfoListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMPULayoutInfoList  DescribeMPULayoutInfoListRequest
  * @return DescribeMPULayoutInfoListResponse
 */
async function describeMPULayoutInfoList(request: DescribeMPULayoutInfoListRequest): DescribeMPULayoutInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMPULayoutInfoList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePubUserListBySubUserRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  subUserId: string(name='SubUserId', description='This parameter is required.', example='testuserid', position='Query'),
}

model DescribePubUserListBySubUserResponseBody = {
  callStatus?: string(name='CallStatus', example='IN'),
  pubUserDetailList?: [ 
    {
      callIdList?: [ string ](name='CallIdList'),
      clientType?: string(name='ClientType', example='NATIVE'),
      createdTs?: long(name='CreatedTs', example='1614936817'),
      destroyedTs?: long(name='DestroyedTs', example='1614936817'),
      duration?: long(name='Duration', example='0'),
      location?: string(name='Location', example='浙江省-杭州市'),
      network?: string(name='Network', example='4G'),
      networkList?: [ string ](name='NetworkList'),
      onlineDuration?: long(name='OnlineDuration', example='0'),
      onlinePeriods?: [ 
        {
          joinTs?: long(name='JoinTs', example='1614936817'),
          leaveTs?: long(name='LeaveTs', example='1614936817'),
        }
      ](name='OnlinePeriods'),
      os?: string(name='Os', example='iOS'),
      osList?: [ string ](name='OsList'),
      roles?: [ string ](name='Roles'),
      sdkVersion?: string(name='SdkVersion', example='1.0.0'),
      sdkVersionList?: [ string ](name='SdkVersionList'),
      userId?: string(name='UserId', example='testuserid'),
      userIdAlias?: string(name='UserIdAlias', example='旁路转推'),
    }
  ](name='PubUserDetailList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  subUserDetail?: {
    clientType?: string(name='ClientType', example='NATIVE'),
    createdTs?: long(name='CreatedTs', example='1614936817'),
    destroyedTs?: long(name='DestroyedTs', example='1614936817'),
    duration?: long(name='Duration', example='0'),
    location?: string(name='Location', example='浙江省-杭州市'),
    network?: string(name='Network', example='4G'),
    networkList?: [ string ](name='NetworkList'),
    onlineDuration?: long(name='OnlineDuration', example='0'),
    onlinePeriods?: [ 
      {
        joinTs?: long(name='JoinTs', example='1614936817'),
        leaveTs?: long(name='LeaveTs', example='1614936817'),
      }
    ](name='OnlinePeriods'),
    os?: string(name='Os', example='iOS'),
    osList?: [ string ](name='OsList'),
    roles?: [ string ](name='Roles'),
    sdkVersion?: string(name='SdkVersion', example='1.0.0'),
    sdkVersionList?: [ string ](name='SdkVersionList'),
    userId?: string(name='UserId', example='testuserid'),
    userIdAlias?: string(name='UserIdAlias', example='旁路转推'),
  }(name='SubUserDetail'),
}

model DescribePubUserListBySubUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePubUserListBySubUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePubUserListBySubUser  DescribePubUserListBySubUserRequest
  * @return DescribePubUserListBySubUserResponse
 */
async function describePubUserListBySubUser(request: DescribePubUserListBySubUserRequest): DescribePubUserListBySubUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePubUserListBySubUser', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQoeMetricDataRequest {
  appId: string(name='AppId', description='APP ID。

This parameter is required.', example='testappid', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  createdTs: long(name='CreatedTs', description='This parameter is required.', example='1614936817', position='Query'),
  destroyedTs?: long(name='DestroyedTs', example='1614936817', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='testuserid', position='Query'),
}

model DescribeQoeMetricDataResponseBody = {
  audioData?: [ 
    {
      nodes?: [ 
        {
          x?: string(name='X', example='1548670256'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='AUDIO'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='AudioData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  videoData?: [ 
    {
      nodes?: [ 
        {
          x?: string(name='X', example='1548670256'),
          y?: string(name='Y', example='123'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='VIDEO_CAMERA'),
      userId?: string(name='UserId', example='testuserid'),
    }
  ](name='VideoData'),
}

model DescribeQoeMetricDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQoeMetricDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQoeMetricData  DescribeQoeMetricDataRequest
  * @return DescribeQoeMetricDataResponse
 */
async function describeQoeMetricData(request: DescribeQoeMetricDataRequest): DescribeQoeMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQoeMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQualityAreaDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='0rbd****', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  parentArea?: string(name='ParentArea', example='中国', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
}

model DescribeQualityAreaDistributionStatDataResponseBody = {
  qualityStatDataList?: [ 
    {
      audioDelay?: long(name='AudioDelay', example='347'),
      audioHighQualityTransmissionRate?: string(name='AudioHighQualityTransmissionRate', example='0.9933'),
      audioStuckRate?: string(name='AudioStuckRate', example='0.0021'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.6654'),
      joinChannelSucFiveSecRate?: string(name='JoinChannelSucFiveSecRate', example='0.9338'),
      joinChannelSucRate?: string(name='JoinChannelSucRate', example='0.9356'),
      name?: string(name='Name', example='中国_浙江省'),
      videoDelay?: long(name='VideoDelay', example='291'),
      videoFirstPicDuration?: long(name='VideoFirstPicDuration', example='1363'),
      videoHighQualityTransmissionRate?: string(name='VideoHighQualityTransmissionRate', example='0.9967'),
      videoStuckRate?: string(name='VideoStuckRate', example='0.0058'),
    }
  ](name='QualityStatDataList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityAreaDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQualityAreaDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQualityAreaDistributionStatData  DescribeQualityAreaDistributionStatDataRequest
  * @return DescribeQualityAreaDistributionStatDataResponse
 */
async function describeQualityAreaDistributionStatData(request: DescribeQualityAreaDistributionStatDataRequest): DescribeQualityAreaDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQualityAreaDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQualityDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='0rbd****', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
  statDim: string(name='StatDim', description='This parameter is required.', example='CHANNEL_ONLINE', position='Query'),
}

model DescribeQualityDistributionStatDataResponseBody = {
  qualityStatDataList?: [ 
    {
      audioDelay?: long(name='AudioDelay', example='554'),
      audioHighQualityTransmissionRate?: string(name='AudioHighQualityTransmissionRate', example='0.9953'),
      audioStuckRate?: string(name='AudioStuckRate', example='0.0014'),
      callDurationRatio?: string(name='CallDurationRatio', example='1.0000'),
      joinChannelSucFiveSecRate?: string(name='JoinChannelSucFiveSecRate', example='0.9560'),
      joinChannelSucRate?: string(name='JoinChannelSucRate', example='0.9575'),
      name?: string(name='Name', example='ONE_TO_FIVE'),
      videoDelay?: long(name='VideoDelay', example='517'),
      videoFirstPicDuration?: long(name='VideoFirstPicDuration', example='1299'),
      videoHighQualityTransmissionRate?: string(name='VideoHighQualityTransmissionRate', example='0.9981'),
      videoStuckRate?: string(name='VideoStuckRate', example='0.0264'),
    }
  ](name='QualityStatDataList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQualityDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQualityDistributionStatData  DescribeQualityDistributionStatDataRequest
  * @return DescribeQualityDistributionStatDataResponse
 */
async function describeQualityDistributionStatData(request: DescribeQualityDistributionStatDataRequest): DescribeQualityDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQualityDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQualityOsSdkVersionDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='0rbd****', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
}

model DescribeQualityOsSdkVersionDistributionStatDataResponseBody = {
  qualityOsSdkVersionStatDataList?: [ 
    {
      audioDelay?: long(name='AudioDelay', example='248'),
      audioHighQualityTransmissionRate?: string(name='AudioHighQualityTransmissionRate', example='0.9987'),
      audioStuckRate?: string(name='AudioStuckRate', example='0.0011'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.0984'),
      joinChannelSucFiveSecRate?: string(name='JoinChannelSucFiveSecRate', example='0.8276'),
      joinChannelSucRate?: string(name='JoinChannelSucRate', example='0.8276'),
      name?: string(name='Name', example='2.1.0.210316.dev--release/rtcsdk_v2.1'),
      os?: string(name='Os', example='macOS'),
      videoDelay?: long(name='VideoDelay', example='333'),
      videoFirstPicDuration?: long(name='VideoFirstPicDuration', example='5643'),
      videoHighQualityTransmissionRate?: string(name='VideoHighQualityTransmissionRate', example='0.9997'),
      videoStuckRate?: string(name='VideoStuckRate', example='0.0054'),
    }
  ](name='QualityOsSdkVersionStatDataList'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityOsSdkVersionDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQualityOsSdkVersionDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQualityOsSdkVersionDistributionStatData  DescribeQualityOsSdkVersionDistributionStatDataRequest
  * @return DescribeQualityOsSdkVersionDistributionStatDataResponse
 */
async function describeQualityOsSdkVersionDistributionStatData(request: DescribeQualityOsSdkVersionDistributionStatDataRequest): DescribeQualityOsSdkVersionDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQualityOsSdkVersionDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQualityOverallDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='0rbd****', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
  types: string(name='Types', description='This parameter is required.', example='JOIN_CHANNEL_SUC_RATE', position='Query'),
}

model DescribeQualityOverallDataResponseBody = {
  qualityOverallData?: [ 
    {
      average?: string(name='Average', example='0.9376'),
      nodes?: [ 
        {
          x?: string(name='X', example='1615831200'),
          y?: string(name='Y', example='1.0000'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='JOIN_CHANNEL_SUC_RATE'),
    }
  ](name='QualityOverallData'),
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
}

model DescribeQualityOverallDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQualityOverallDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQualityOverallData  DescribeQualityOverallDataRequest
  * @return DescribeQualityOverallDataResponse
 */
async function describeQualityOverallData(request: DescribeQualityOverallDataRequest): DescribeQualityOverallDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQualityOverallData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordFilesRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  channelId?: string(name='ChannelId', example='yourChannelId', position='Query'),
  endTime?: string(name='EndTime', example='2020-11-02T17:36:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  startTime?: string(name='StartTime', example='2020-11-01T17:36:00Z', position='Query'),
  taskIds?: [ string ](name='TaskIds', example='yourTaskId', position='Query'),
}

model DescribeRecordFilesResponseBody = {
  recordFiles?: [ 
    {
      appId?: string(name='AppId', example='yourAppId'),
      channelId?: string(name='ChannelId', example='yourChannelId'),
      createTime?: string(name='CreateTime', example='2020-10-02T17:36:00Z'),
      duration?: float(name='Duration', example='1800'),
      startTime?: string(name='StartTime', example='2020-11-01T17:36:00Z'),
      stopTime?: string(name='StopTime', example='2020-11-02T17:36:00Z'),
      taskId?: string(name='TaskId', example='yourTaskId'),
      url?: string(name='Url'),
    }
  ](name='RecordFiles'),
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b****'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecordFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecordFiles  DescribeRecordFilesRequest
  * @return DescribeRecordFilesResponse
 */
async function describeRecordFiles(request: DescribeRecordFilesRequest): DescribeRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecordFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordTemplatesRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', description='1', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  templateIds?: [ string ](name='TemplateIds', example='76dasgb****', position='Query'),
}

model DescribeRecordTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='C292B80E-5175-4BA4-8CC292B80E-5175-4BA4-8C1E-2ABEC4D7C2FE1E-2ABEC4D7****'),
  templates?: [ 
    {
      backgroundColor?: int32(name='BackgroundColor', example='0'),
      backgrounds?: [ 
        {
          display?: int32(name='Display', example='0'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Backgrounds'),
      clockWidgets?: [ 
        {
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='ClockWidgets'),
      createTime?: string(name='CreateTime', example='2020-09-04T06:22:15Z'),
      delayStopTime?: int32(name='DelayStopTime', example='180'),
      enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false'),
      fileSplitInterval?: int32(name='FileSplitInterval', example='1800'),
      formats?: [ string ](name='Formats'),
      httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback'),
      layoutIds?: [ long ](name='LayoutIds'),
      mediaEncode?: int32(name='MediaEncode', example='50'),
      mnsQueue?: string(name='MnsQueue', example='record-callback-queue'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket', example='rtc-record-oss'),
      ossFilePrefix?: string(name='OssFilePrefix', example='record/pre/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
      taskProfile?: string(name='TaskProfile', example='4IN_1080P'),
      templateId?: string(name='TemplateId', example='1ca698e2-57fa-4314-8e11-00d950d4****'),
      watermarks?: [ 
        {
          alpha?: float(name='Alpha', example='0'),
          display?: int32(name='Display', example='0'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Watermarks'),
    }
  ](name='Templates'),
  totalNum?: long(name='TotalNum', example='1'),
  totalPage?: long(name='TotalPage', example='1'),
}

model DescribeRecordTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecordTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecordTemplates  DescribeRecordTemplatesRequest
  * @return DescribeRecordTemplatesResponse
 */
async function describeRecordTemplates(request: DescribeRecordTemplatesRequest): DescribeRecordTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecordTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcChannelListRequest {
  appId?: string(name='AppId', example='aoe****', position='Query'),
  channelId?: string(name='ChannelId', example='testChannel', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: long(name='PageNo', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  serviceArea?: string(name='ServiceArea', example='cn', position='Query'),
  sortType?: string(name='SortType', example='desc', position='Query'),
  timePoint: string(name='TimePoint', description='This parameter is required.', example='2018-01-29T00:00:00Z', position='Query'),
  userId?: string(name='UserId', example='testUser', position='Query'),
}

model DescribeRtcChannelListResponseBody = {
  channelList?: {
    channelList?: [ 
    {
      callArea?: {
        callArea?: [ string ](name='CallArea')
      }(name='CallArea'),
      channelId?: string(name='ChannelId', example='testChannel'),
      endTime?: string(name='EndTime', example='2018-01-29T02:00:00Z'),
      startTime?: string(name='StartTime', example='2018-01-29T01:00:00Z'),
      totalUserCnt?: long(name='TotalUserCnt', example='2'),
    }
  ](name='ChannelList')
  }(name='ChannelList'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  totalCnt?: long(name='TotalCnt', example='1000'),
}

model DescribeRtcChannelListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcChannelListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRtcChannelList  DescribeRtcChannelListRequest
  * @return DescribeRtcChannelListResponse
 */
async function describeRtcChannelList(request: DescribeRtcChannelListRequest): DescribeRtcChannelListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcChannelList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcChannelMetricRequest {
  appId: string(name='AppId', description='This parameter is required.', example='aoe****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  timePoint: string(name='TimePoint', description='This parameter is required.', example='2018-01-29T00:00:00Z', position='Query'),
}

model DescribeRtcChannelMetricResponseBody = {
  channelMetricInfo?: {
    channelMetric?: {
      channelId?: string(name='ChannelId', example='example_channel'),
      endTime?: string(name='EndTime', example='2019-06-06T18:57:00Z'),
      pubUserCount?: int32(name='PubUserCount', example='10'),
      startTime?: string(name='StartTime', example='2019-06-06T17:57:00Z'),
      subUserCount?: int32(name='SubUserCount', example='25'),
      userCount?: int32(name='UserCount', example='30'),
    }(name='ChannelMetric'),
    duration?: {
      pubDuration?: {
        audio?: int32(name='Audio', example='100'),
        content?: int32(name='Content', example='100'),
        video1080?: int32(name='Video1080', example='100'),
        video360?: int32(name='Video360', example='100'),
        video720?: int32(name='Video720', example='100'),
      }(name='PubDuration'),
      subDuration?: {
        audio?: int32(name='Audio', example='100'),
        content?: int32(name='Content', example='100'),
        video1080?: int32(name='Video1080', example='100'),
        video360?: int32(name='Video360', example='100'),
        video720?: int32(name='Video720', example='100'),
      }(name='SubDuration'),
    }(name='Duration'),
  }(name='ChannelMetricInfo'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcChannelMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcChannelMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRtcChannelMetric  DescribeRtcChannelMetricRequest
  * @return DescribeRtcChannelMetricResponse
 */
async function describeRtcChannelMetric(request: DescribeRtcChannelMetricRequest): DescribeRtcChannelMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcChannelMetric', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcDurationDataRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  endTime?: string(name='EndTime', example='2020-02-04T07:00:00Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serviceArea?: string(name='ServiceArea', example='CN', position='Query'),
  startTime?: string(name='StartTime', example='2020-02-04T05:00:00Z', position='Query'),
}

model DescribeRtcDurationDataResponseBody = {
  durationDataPerInterval?: {
    durationModule?: [ 
    {
      audioDuration?: long(name='AudioDuration', example='200'),
      contentDuration?: long(name='ContentDuration', example='200'),
      timeStamp?: string(name='TimeStamp', example='2020-02-04T05:00:00Z'),
      totalDuration?: long(name='TotalDuration', example='1000'),
      v1080Duration?: long(name='V1080Duration', example='300'),
      v360Duration?: long(name='V360Duration', example='300'),
      v720Duration?: long(name='V720Duration', example='200'),
    }
  ](name='DurationModule')
  }(name='DurationDataPerInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcDurationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcDurationDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRtcDurationData  DescribeRtcDurationDataRequest
  * @return DescribeRtcDurationDataResponse
 */
async function describeRtcDurationData(request: DescribeRtcDurationDataRequest): DescribeRtcDurationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcDurationData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcPeakChannelCntDataRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  endTime?: string(name='EndTime', example='2018-01-29T00:00:00Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serviceArea?: string(name='ServiceArea', example='CN', position='Query'),
  startTime?: string(name='StartTime', example='2018-01-29T00:00:00Z', position='Query'),
}

model DescribeRtcPeakChannelCntDataResponseBody = {
  peakChannelCntDataPerInterval?: {
    peakChannelCntModule?: [ 
    {
      activeChannelPeak?: long(name='ActiveChannelPeak', example='10'),
      activeChannelPeakTime?: string(name='ActiveChannelPeakTime', example='2018-01-29T00:01:00Z'),
      timeStamp?: string(name='TimeStamp', example='2018-01-29T00:00:00Z'),
    }
  ](name='PeakChannelCntModule')
  }(name='PeakChannelCntDataPerInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRtcPeakChannelCntDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcPeakChannelCntDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRtcPeakChannelCntData  DescribeRtcPeakChannelCntDataRequest
  * @return DescribeRtcPeakChannelCntDataResponse
 */
async function describeRtcPeakChannelCntData(request: DescribeRtcPeakChannelCntDataRequest): DescribeRtcPeakChannelCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcPeakChannelCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcUserCntDataRequest {
  appId?: string(name='AppId', example='yourAppId', position='Query'),
  endTime?: string(name='EndTime', example='2018-01-29T01:00:00Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serviceArea?: string(name='ServiceArea', example='CN', position='Query'),
  startTime?: string(name='StartTime', example='2018-01-29T00:00:00Z', position='Query'),
}

model DescribeRtcUserCntDataResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  userCntDataPerInterval?: {
    userCntModule?: [ 
    {
      activeUserCnt?: long(name='ActiveUserCnt', example='10'),
      timeStamp?: string(name='TimeStamp', example='2018-01-29T00:00:00Z'),
    }
  ](name='UserCntModule')
  }(name='UserCntDataPerInterval'),
}

model DescribeRtcUserCntDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcUserCntDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRtcUserCntData  DescribeRtcUserCntDataRequest
  * @return DescribeRtcUserCntDataResponse
 */
async function describeRtcUserCntData(request: DescribeRtcUserCntDataRequest): DescribeRtcUserCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcUserCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamingOutStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='1qaz***x', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testChannel', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='taskId', position='Query'),
}

model DescribeStreamingOutStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  status?: int32(name='Status', example='1'),
}

model DescribeStreamingOutStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStreamingOutStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeStreamingOutStatus  DescribeStreamingOutStatusRequest
  * @return DescribeStreamingOutStatusResponse
 */
async function describeStreamingOutStatus(request: DescribeStreamingOutStatusRequest): DescribeStreamingOutStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreamingOutStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemLayoutListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, position='Query'),
}

model DescribeSystemLayoutListResponseBody = {
  layouts?: {
    layout?: [ 
    {
      audioMixCount?: int32(name='AudioMixCount', description='AudioMixCount。', example='3'),
      layoutId?: long(name='LayoutId', example='22'),
      name?: string(name='Name'),
      panes?: {
        panes?: [ 
        {
          height?: float(name='Height', example='0.25'),
          majorPane?: int32(name='MajorPane', description='MajorPane。', example='0'),
          paneId?: int32(name='PaneId', example='0'),
          width?: float(name='Width', example='0.25'),
          x?: float(name='X', example='0.25'),
          y?: float(name='Y', example='0.25'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Panes')
      }(name='Panes'),
    }
  ](name='Layout')
  }(name='Layouts'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  totalNum?: long(name='TotalNum', example='6'),
  totalPage?: long(name='TotalPage', example='2'),
}

model DescribeSystemLayoutListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSystemLayoutListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSystemLayoutList  DescribeSystemLayoutListRequest
  * @return DescribeSystemLayoutListResponse
 */
async function describeSystemLayoutList(request: DescribeSystemLayoutListRequest): DescribeSystemLayoutListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemLayoutList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsageAreaDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='0rbd****', position='Query'),
  endDate: string(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  parentArea?: string(name='ParentArea', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
}

model DescribeUsageAreaDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageAreaStatList?: [ 
    {
      audioCallDuration?: int32(name='AudioCallDuration', example='45'),
      name?: string(name='Name', example='中国'),
      totalCallDuration?: int32(name='TotalCallDuration', example='4821'),
      videoCallDuration?: int32(name='VideoCallDuration', example='4776'),
    }
  ](name='UsageAreaStatList'),
}

model DescribeUsageAreaDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsageAreaDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsageAreaDistributionStatData  DescribeUsageAreaDistributionStatDataRequest
  * @return DescribeUsageAreaDistributionStatDataResponse
 */
async function describeUsageAreaDistributionStatData(request: DescribeUsageAreaDistributionStatDataRequest): DescribeUsageAreaDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsageAreaDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsageDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
  statDim: string(name='StatDim', description='This parameter is required.', example='CHANNEL_ONLINE', position='Query'),
}

model DescribeUsageDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageStatList?: [ 
    {
      audioCallDuration?: long(name='AudioCallDuration', example='51'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.9782'),
      name?: string(name='Name', example='ONE_TO_FIVE'),
      totalCallDuration?: long(name='TotalCallDuration', example='10636'),
      videoCallDuration?: long(name='VideoCallDuration', example='10585'),
    }
  ](name='UsageStatList'),
}

model DescribeUsageDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsageDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsageDistributionStatData  DescribeUsageDistributionStatDataRequest
  * @return DescribeUsageDistributionStatDataResponse
 */
async function describeUsageDistributionStatData(request: DescribeUsageDistributionStatDataRequest): DescribeUsageDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsageDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsageOsSdkVersionDistributionStatDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='0rbd****', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
}

model DescribeUsageOsSdkVersionDistributionStatDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageOsSdkVersionStatList?: [ 
    {
      audioCallDuration?: long(name='AudioCallDuration', example='3'),
      callDurationRatio?: string(name='CallDurationRatio', example='0.0984'),
      name?: string(name='Name', example='1.0.0'),
      os?: string(name='Os', example='macOS'),
      totalCallDuration?: long(name='TotalCallDuration', example='476'),
      videoCallDuration?: long(name='VideoCallDuration', example='473'),
    }
  ](name='UsageOsSdkVersionStatList'),
}

model DescribeUsageOsSdkVersionDistributionStatDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsageOsSdkVersionDistributionStatDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsageOsSdkVersionDistributionStatData  DescribeUsageOsSdkVersionDistributionStatDataRequest
  * @return DescribeUsageOsSdkVersionDistributionStatDataResponse
 */
async function describeUsageOsSdkVersionDistributionStatData(request: DescribeUsageOsSdkVersionDistributionStatDataRequest): DescribeUsageOsSdkVersionDistributionStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsageOsSdkVersionDistributionStatData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsageOverallDataRequest {
  appId: string(name='AppId', description='APP ID

This parameter is required.', example='a2hz****', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1615910399', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1615824000', position='Query'),
  types: string(name='Types', description='This parameter is required.', example='ONLINE_USER_PEAK', position='Query'),
}

model DescribeUsageOverallDataResponseBody = {
  requestId?: string(name='RequestId', example='231470C1-ACFB-4C9F-844F-4CFE1E3804C5'),
  usageOverallData?: [ 
    {
      nodes?: [ 
        {
          x?: string(name='X', example='1615824000'),
          y?: string(name='Y', example='1'),
        }
      ](name='Nodes'),
      type?: string(name='Type', example='ONLINE_USER_PEAK'),
    }
  ](name='UsageOverallData'),
}

model DescribeUsageOverallDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsageOverallDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsageOverallData  DescribeUsageOverallDataRequest
  * @return DescribeUsageOverallDataResponse
 */
async function describeUsageOverallData(request: DescribeUsageOverallDataRequest): DescribeUsageOverallDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsageOverallData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserInfoInChannelRequest {
  appId: string(name='AppId', description='This parameter is required.', example='4eah****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='1234', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='testId', position='Query'),
}

model DescribeUserInfoInChannelResponseBody = {
  isChannelExist?: boolean(name='IsChannelExist', example='true'),
  isInChannel?: boolean(name='IsInChannel', example='true'),
  property?: [ 
    {
      join?: int32(name='Join', example='1557909133'),
      role?: int32(name='Role', example='1'),
      session?: string(name='Session', example='xa744sxx8rtobgj****'),
    }
  ](name='Property'),
  requestId?: string(name='RequestId', example='6159ba01-6687-4fb2-a831-f0cd8d188648'),
  timestamp?: int32(name='Timestamp', example='1557909133'),
}

model DescribeUserInfoInChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserInfoInChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserInfoInChannel  DescribeUserInfoInChannelRequest
  * @return DescribeUserInfoInChannelResponse
 */
async function describeUserInfoInChannel(request: DescribeUserInfoInChannelRequest): DescribeUserInfoInChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserInfoInChannel', 'POST', '/', 'json', false, 'json', request);
}

model DisableAutoLiveStreamRuleRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: long(name='RuleId', description='This parameter is required.', example='12', position='Query'),
}

model DisableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model DisableAutoLiveStreamRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableAutoLiveStreamRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableAutoLiveStreamRule  DisableAutoLiveStreamRuleRequest
  * @return DisableAutoLiveStreamRuleResponse
 */
async function disableAutoLiveStreamRule(request: DisableAutoLiveStreamRuleRequest): DisableAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoLiveStreamRuleRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: long(name='RuleId', description='This parameter is required.', example='12', position='Query'),
}

model EnableAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model EnableAutoLiveStreamRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAutoLiveStreamRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableAutoLiveStreamRule  EnableAutoLiveStreamRuleRequest
  * @return EnableAutoLiveStreamRuleResponse
 */
async function enableAutoLiveStreamRule(request: EnableAutoLiveStreamRuleRequest): EnableAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model GetMPUTaskStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='yourTaskId', position='Query'),
}

model GetMPUTaskStatusResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  status?: int32(name='Status', example='0'),
}

model GetMPUTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMPUTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMPUTaskStatus  GetMPUTaskStatusRequest
  * @return GetMPUTaskStatusResponse
 */
async function getMPUTaskStatus(request: GetMPUTaskStatusRequest): GetMPUTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMPUTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ioeh****', position='Query'),
  appName: string(name='AppName', description='This parameter is required.', example='defaultName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyApp  ModifyAppRequest
  * @return ModifyAppResponse
 */
async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppCallbackStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='223***JQb', position='Query'),
}

model ModifyAppCallbackStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F80AAC02-87BD-5D9C-B925-8AB40171BA1A'),
}

model ModifyAppCallbackStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppCallbackStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppCallbackStatus  ModifyAppCallbackStatusRequest
  * @return ModifyAppCallbackStatusResponse
 */
async function modifyAppCallbackStatus(request: ModifyAppCallbackStatusRequest): ModifyAppCallbackStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppCallbackStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppLayoutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='53200b81-b761-4c10-842a-a0726d97xxxx', position='Query'),
  layout: {
    layoutId: string(name='LayoutId', description='This parameter is required.', example='123121231313'),
    name: string(name='Name', description='This parameter is required.', example='测试', maxLength=100),
    panes?: [ 
      {
        height?: double(name='Height', example='0.25', minimum=0, maximum=1),
        paneId?: long(name='PaneId', example='0', minimum=0, maximum=15),
        width?: double(name='Width', example='0.25', minimum=0, maximum=1),
        x?: double(name='X', example='0.25', minimum=0, maximum=1),
        y?: double(name='Y', example='0.25', minimum=0, maximum=1),
        zOrder?: int32(name='ZOrder', example='0', minimum=0, maximum=2),
      }
    ](name='Panes'),
  }(name='Layout', description='This parameter is required.', shrink='json', position='Query'),
}

model ModifyAppLayoutResponseBody = {
  layoutId?: string(name='LayoutId', example='167466539798442****'),
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyAppLayoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppLayoutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppLayout  ModifyAppLayoutRequest
  * @return ModifyAppLayoutResponse
 */
async function modifyAppLayout(request: ModifyAppLayoutRequest): ModifyAppLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppLayout', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppLiveStreamStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='53200b81-b761-4c10-842a-a0726xxxx', position='Query'),
}

model ModifyAppLiveStreamStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyAppLiveStreamStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppLiveStreamStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppLiveStreamStatus  ModifyAppLiveStreamStatusRequest
  * @return ModifyAppLiveStreamStatusResponse
 */
async function modifyAppLiveStreamStatus(request: ModifyAppLiveStreamStatusRequest): ModifyAppLiveStreamStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppLiveStreamStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRecordStatusRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='53200b81-b761-4c10-842a-a0726xxxx', position='Query'),
}

model ModifyAppRecordStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='D53303DB-AA68-5D09-90C2-A345072DCC5A'),
}

model ModifyAppRecordStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppRecordStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppRecordStatus  ModifyAppRecordStatusRequest
  * @return ModifyAppRecordStatusResponse
 */
async function modifyAppRecordStatus(request: ModifyAppRecordStatusRequest): ModifyAppRecordStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppRecordStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRecordTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ac7N****', position='Query'),
  clientToken?: string(name='ClientToken', example='53200b81-b761-4c10-842a-a0726d97xxxx', position='Query'),
  recordTemplate: {
    delayStopTime?: int32(name='DelayStopTime', example='180', minimum=180, maximum=300),
    filePrefix: string(name='FilePrefix', description='This parameter is required.', example='record/{AppId}/{ChannelId}_{TaskId}/{EscapedStartTime}_{EscapedEndTime}'),
    fileSplitInterval: int32(name='FileSplitInterval', description='This parameter is required.', example='1800', minimum=1800, maximum=20000),
    formats: [ string ](name='Formats', description='This parameter is required.'),
    layoutIds: [ string ](name='LayoutIds', description='This parameter is required.'),
    mediaEncode: int32(name='MediaEncode', description='This parameter is required.', example='1'),
    name: string(name='Name', description='This parameter is required.', example='模版'),
    templateId: string(name='TemplateId', description='This parameter is required.', example='2xh6****'),
  }(name='RecordTemplate', description='This parameter is required.', shrink='json', position='Query'),
}

model ModifyAppRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyAppRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppRecordTemplate  ModifyAppRecordTemplateRequest
  * @return ModifyAppRecordTemplateResponse
 */
async function modifyAppRecordTemplate(request: ModifyAppRecordTemplateRequest): ModifyAppRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppStreamingOutTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='wv7N****', position='Query'),
  streamingOutTemplate: {
    layoutIds: [ string ](name='LayoutIds', description='This parameter is required.'),
    mediaEncode: int32(name='MediaEncode', description='This parameter is required.', example='1'),
    name: string(name='Name', description='This parameter is required.', example='模版'),
    templateId: string(name='TemplateId', description='This parameter is required.', example='ac7N****'),
  }(name='StreamingOutTemplate', description='This parameter is required.', shrink='json', position='Query'),
}

model ModifyAppStreamingOutTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30D41049-D02D-1C21-86AE-B3E5FD805C27'),
  templateId?: string(name='TemplateId', example='ac7N****'),
}

model ModifyAppStreamingOutTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppStreamingOutTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppStreamingOutTemplate  ModifyAppStreamingOutTemplateRequest
  * @return ModifyAppStreamingOutTemplateResponse
 */
async function modifyAppStreamingOutTemplate(request: ModifyAppStreamingOutTemplateRequest): ModifyAppStreamingOutTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppStreamingOutTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCallbackMetaRequest {
  appId: string(name='AppId', description='This parameter is required.', example='223***JQb', position='Query'),
  callback: {
    category: string(name='Category', description='This parameter is required.', example='RecordEvent'),
    conf: string(name='Conf', description='This parameter is required.', example='https://www.aliyun.com'),
    subEvent?: [ int32 ](name='SubEvent'),
  }(name='Callback', description='This parameter is required.', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyCallbackMetaResponseBody = {
  code?: string(name='Code', description='code', example='0'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='0'),
  message?: string(name='Message', description='message', example='OK'),
  requestId?: string(name='RequestId', description='requestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ModifyCallbackMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCallbackMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCallbackMeta  ModifyCallbackMetaRequest
  * @return ModifyCallbackMetaResponse
 */
async function modifyCallbackMeta(request: ModifyCallbackMetaRequest): ModifyCallbackMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCallbackMeta', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMPULayoutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  audioMixCount?: int32(name='AudioMixCount', example='3', position='Query'),
  layoutId: long(name='LayoutId', description='This parameter is required.', example='10117', position='Query'),
  name?: string(name='Name', example='LayoutName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  panes?: [ 
    {
      height?: float(name='Height', example='0.2456'),
      majorPane?: int32(name='MajorPane', example='0'),
      paneId?: int32(name='PaneId', example='0'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Panes', position='Query'),
}

model ModifyMPULayoutResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model ModifyMPULayoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyMPULayoutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyMPULayout  ModifyMPULayoutRequest
  * @return ModifyMPULayoutResponse
 */
async function modifyMPULayout(request: ModifyMPULayoutRequest): ModifyMPULayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMPULayout', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTerminalsRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='yourChannelId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  terminalIds: [ string ](name='TerminalIds', description='This parameter is required.', example='1811xxxx', position='Query'),
}

model RemoveTerminalsResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  terminals?: {
    terminal?: [ 
    {
      code?: int32(name='Code', example='0'),
      id?: string(name='Id', example='1811****'),
      message?: string(name='Message', example='Success'),
    }
  ](name='Terminal')
  }(name='Terminals'),
}

model RemoveTerminalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTerminalsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveTerminals  RemoveTerminalsRequest
  * @return RemoveTerminalsResponse
 */
async function removeTerminals(request: RemoveTerminalsRequest): RemoveTerminalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTerminals', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUsersRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  users: [ 
    {
      userId: string(name='UserId', description='This parameter is required.', example='1811****'),
    }
  ](name='Users', description='This parameter is required.', position='Query'),
}

model RemoveUsersResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  users?: [ 
    {
      code?: int32(name='Code', example='0'),
      message?: string(name='Message', example='Success'),
      userId?: string(name='UserId', example='1811****'),
    }
  ](name='Users'),
}

model RemoveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUsers  RemoveUsersRequest
  * @return RemoveUsersResponse
 */
async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsers', 'POST', '/', 'json', false, 'json', request);
}

model StartCategoryCallbackRequest {
  appId: string(name='AppId', description='This parameter is required.', example='223***JQb', position='Query'),
  callback: {
    category: string(name='Category', description='This parameter is required.', example='RecordEvent'),
  }(name='Callback', description='This parameter is required.', shrink='json', position='Query'),
}

model StartCategoryCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
}

model StartCategoryCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartCategoryCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartCategoryCallback  StartCategoryCallbackRequest
  * @return StartCategoryCallbackResponse
 */
async function startCategoryCallback(request: StartCategoryCallbackRequest): StartCategoryCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCategoryCallback', 'POST', '/', 'json', false, 'json', request);
}

model StartCloudRecordRequest {
  appId: string(name='AppId', description='appId

This parameter is required.', example='eo85****', position='Query'),
  backgrounds?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      backgroundCropMode?: int32(name='BackgroundCropMode', example='2'),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Backgrounds', position='Query'),
  channelId: string(name='ChannelId', description='channelName

This parameter is required.', example='testid', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='30', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      zone?: int32(name='Zone', example='8', minimum=-12, maximum=12),
    }
  ](name='ClockWidgets', position='Query'),
  cropMode?: int32(name='CropMode', example='2', position='Query'),
  images?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      imageCropMode?: int32(name='ImageCropMode', example='2'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123xxx.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.3', minimum=0, maximum=1),
    }
  ](name='Images', position='Query'),
  panes?: [ 
    {
      images?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          paneImageCropMode?: int32(name='PaneImageCropMode', example='2'),
          url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123xx.jpg', minLength=1, maxLength=1024),
          width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Images'),
      paneCropMode?: int32(name='PaneCropMode', example='3'),
      paneId: int32(name='PaneId', description='paneId

This parameter is required.', example='0', minimum=0, maximum=15),
      source?: string(name='Source', description='source'),
      sourceType?: string(name='SourceType', description='sourceType', example='video'),
      texts?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
          boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
          boxColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='BoxColor'),
          font?: int32(name='Font', example='0', minimum=0, maximum=9),
          fontColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='FontColor'),
          fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
          hasBox?: boolean(name='HasBox'),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Texts'),
    }
  ](name='Panes', description='panes', position='Query'),
  regionColor?: {
    b?: int32(name='B', example='255', minimum=0, maximum=255),
    g?: int32(name='G', example='255', minimum=0, maximum=255),
    r?: int32(name='R', example='255', minimum=0, maximum=255),
  }(name='RegionColor', position='Query'),
  storageConfig: {
    accessKey: string(name='AccessKey', description='accessKey

This parameter is required.', example='LTAX***', minLength=1),
    bucket: string(name='Bucket', description='bucket

This parameter is required.', example='test-bucket-for-recording', minLength=1),
    region: int32(name='Region', description='region

This parameter is required.', example='0'),
    secretKey: string(name='SecretKey', description='secretKey

This parameter is required.', example='APb6qWYEzKtYxE***', minLength=1),
    vendor: int32(name='Vendor', description='vendor

This parameter is required.', example='1', minimum=1),
  }(name='StorageConfig', description='storageConfig

This parameter is required.', position='Query'),
  taskId?: string(name='TaskId', description='taskId', example='123', minLength=1, maxLength=55, position='Query'),
  templateId: string(name='TemplateId', description='templateId

This parameter is required.', example='567', minLength=1, maxLength=128, position='Query'),
  texts?: [ 
    {
      alpha?: double(name='Alpha', example='0.1', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Texts', position='Query'),
}

model StartCloudRecordResponseBody = {
  requestId?: string(name='RequestId', description='requestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  taskId?: string(name='TaskId', description='taskId', example='123'),
}

model StartCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartCloudRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartCloudRecord  StartCloudRecordRequest
  * @return StartCloudRecordResponse
 */
async function startCloudRecord(request: StartCloudRecordRequest): StartCloudRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCloudRecord', 'POST', '/', 'json', false, 'json', request);
}

model StartMPUTaskRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='yourChannelId', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha', example='0', minimum=0),
      borderColor?: long(name='BorderColor', example='0', minimum=0),
      borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
      box?: boolean(name='Box', example='false'),
      boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
      boxColor?: long(name='BoxColor', example='0', minimum=0),
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  cropMode?: int32(name='CropMode', example='1', position='Query'),
  enhancedParam?: {
    enablePortraitSegmentation?: boolean(name='EnablePortraitSegmentation', example='false'),
  }(name='EnhancedParam', position='Body'),
  layoutIds?: [ long ](name='LayoutIds', example='1', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='2', position='Query'),
  mixMode?: int32(name='MixMode', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payloadType?: int32(name='PayloadType', example='0', position='Query'),
  reportVad?: int32(name='ReportVad', example='0', position='Query'),
  rtpExtInfo?: int32(name='RtpExtInfo', example='0', position='Query'),
  sourceType?: string(name='SourceType', example='camera', position='Query'),
  streamType?: int32(name='StreamType', example='0', position='Query'),
  streamURL?: string(name='StreamURL', example='rtmp://example.com/live/stream', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', example='audioUserID', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='yourTaskId', position='Query'),
  taskType?: int32(name='TaskType', example='0', minimum=0, maximum=1, position='Query'),
  timeStampRef?: long(name='TimeStampRef', example='15273582735', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      segmentType?: int32(name='SegmentType', example='0'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          alpha?: float(name='Alpha', example='0', minimum=0),
          borderColor?: long(name='BorderColor', example='0', minimum=0),
          borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
          box?: boolean(name='Box', example='false'),
          boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
          boxColor?: long(name='BoxColor', example='0', minimum=0),
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.2456'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes', position='Query'),
  vadInterval?: long(name='VadInterval', example='86400', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model StartMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StartMPUTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartMPUTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartMPUTask  StartMPUTaskRequest
  * @return StartMPUTaskResponse
 */
async function startMPUTask(request: StartMPUTaskRequest): StartMPUTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartMPUTask', 'POST', '/', 'json', true, 'form', request);
}

model StartRecordTaskRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='yourChannelId', position='Query'),
  cropMode?: long(name='CropMode', example='1', position='Query'),
  layoutIds?: [ long ](name='LayoutIds', example='1111', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='20', position='Query'),
  mixMode?: int32(name='MixMode', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceType?: string(name='SourceType', example='camera', position='Query'),
  streamType?: int32(name='StreamType', example='0', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', example='1', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', example='1', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', example='1', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='yourTaskId', position='Query'),
  taskProfile?: string(name='TaskProfile', example='4IN_1080P', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='76dasgb****', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', example='1', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', example='1', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', example='1', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor', example='1'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes', position='Query'),
}

model StartRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b****'),
}

model StartRecordTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartRecordTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartRecordTask  StartRecordTaskRequest
  * @return StartRecordTaskResponse
 */
async function startRecordTask(request: StartRecordTaskRequest): StartRecordTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRecordTask', 'POST', '/', 'json', false, 'json', request);
}

model StartStreamingOutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  backgrounds?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      backgroundCropMode?: int32(name='BackgroundCropMode', example='2'),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Backgrounds', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='30', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      zone?: int32(name='Zone', example='8', minimum=-12, maximum=12),
    }
  ](name='ClockWidgets', position='Query'),
  cropMode?: int32(name='CropMode', example='2', position='Query'),
  images?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      imageCropMode?: int32(name='ImageCropMode', example='2'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123xxx.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Images', position='Query'),
  panes?: [ 
    {
      images?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          paneImageCropMode?: int32(name='PaneImageCropMode', example='2'),
          url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123xxx.jpg', minLength=1, maxLength=1024),
          width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.3', minimum=0, maximum=1),
        }
      ](name='Images'),
      paneCropMode?: int32(name='PaneCropMode', example='2'),
      paneId: string(name='PaneId', description='This parameter is required.', example='0'),
      source?: string(name='Source', example='1811****'),
      sourceType?: string(name='SourceType', example='Video'),
      texts?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
          boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
          boxColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='BoxColor'),
          font?: int32(name='Font', example='0', minimum=0, maximum=9),
          fontColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='FontColor'),
          fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
          hasBox?: boolean(name='HasBox'),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Texts'),
    }
  ](name='Panes', position='Query'),
  regionColor?: {
    b?: int32(name='B', example='255', minimum=0, maximum=255),
    g?: int32(name='G', example='255', minimum=0, maximum=255),
    r?: int32(name='R', example='255', minimum=0, maximum=255),
  }(name='RegionColor', position='Query'),
  taskId?: string(name='TaskId', example='123', minLength=1, maxLength=55, position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='567', minLength=1, maxLength=128, position='Query'),
  texts?: [ 
    {
      alpha?: double(name='Alpha', example='0.1', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Texts', position='Query'),
  url: string(name='Url', description='This parameter is required.', example='rtmp://example.com/live/stream', minLength=1, maxLength=1024, position='Query'),
}

model StartStreamingOutResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  taskId?: string(name='TaskId', example='123'),
}

model StartStreamingOutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartStreamingOutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartStreamingOut  StartStreamingOutRequest
  * @return StartStreamingOutResponse
 */
async function startStreamingOut(request: StartStreamingOutRequest): StartStreamingOutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartStreamingOut', 'POST', '/', 'json', false, 'json', request);
}

model StopCategoryCallbackRequest {
  appId: string(name='AppId', description='This parameter is required.', example='223***JQb', position='Query'),
  callback: {
    category: string(name='Category', description='This parameter is required.', example='RecordEvent'),
  }(name='Callback', description='This parameter is required.', shrink='json', position='Query'),
}

model StopCategoryCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2DCE8D7E-BE3B-54AB-8DAC-32F34BED0763'),
}

model StopCategoryCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopCategoryCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopCategoryCallback  StopCategoryCallbackRequest
  * @return StopCategoryCallbackResponse
 */
async function stopCategoryCallback(request: StopCategoryCallbackRequest): StopCategoryCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCategoryCallback', 'POST', '/', 'json', false, 'json', request);
}

model StopChannelRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
}

model StopChannelResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
}

model StopChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopChannel  StopChannelRequest
  * @return StopChannelResponse
 */
async function stopChannel(request: StopChannelRequest): StopChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopChannel', 'POST', '/', 'json', false, 'json', request);
}

model StopCloudRecordRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='123', minLength=1, maxLength=55, position='Query'),
}

model StopCloudRecordResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  taskId?: string(name='TaskId', example='123'),
}

model StopCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopCloudRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopCloudRecord  StopCloudRecordRequest
  * @return StopCloudRecordResponse
 */
async function stopCloudRecord(request: StopCloudRecordRequest): StopCloudRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCloudRecord', 'POST', '/', 'json', false, 'json', request);
}

model StopMPUTaskRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='yourTaskId', position='Query'),
}

model StopMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StopMPUTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMPUTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopMPUTask  StopMPUTaskRequest
  * @return StopMPUTaskResponse
 */
async function stopMPUTask(request: StopMPUTaskRequest): StopMPUTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMPUTask', 'POST', '/', 'json', false, 'json', request);
}

model StopRecordTaskRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='yourTaskId', position='Query'),
}

model StopRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model StopRecordTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopRecordTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopRecordTask  StopRecordTaskRequest
  * @return StopRecordTaskResponse
 */
async function stopRecordTask(request: StopRecordTaskRequest): StopRecordTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRecordTask', 'POST', '/', 'json', false, 'json', request);
}

model StopStreamingOutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='123', minLength=1, maxLength=55, position='Query'),
}

model StopStreamingOutResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  taskId?: string(name='TaskId', example='123'),
}

model StopStreamingOutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopStreamingOutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopStreamingOut  StopStreamingOutRequest
  * @return StopStreamingOutResponse
 */
async function stopStreamingOut(request: StopStreamingOutRequest): StopStreamingOutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopStreamingOut', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAutoLiveStreamRuleRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Query'),
  channelIdPrefixes?: [ string ](name='ChannelIdPrefixes', position='Query'),
  channelIds?: [ string ](name='ChannelIds', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='20', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain: string(name='PlayDomain', description='This parameter is required.', example='rtmp://${domain}/${app}/${stream}', position='Query'),
  ruleId: int32(name='RuleId', description='This parameter is required.', example='12', position='Query'),
  ruleName?: string(name='RuleName', example='testRule', position='Query'),
}

model UpdateAutoLiveStreamRuleResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateAutoLiveStreamRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAutoLiveStreamRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAutoLiveStreamRule  UpdateAutoLiveStreamRuleRequest
  * @return UpdateAutoLiveStreamRuleResponse
 */
async function updateAutoLiveStreamRule(request: UpdateAutoLiveStreamRuleRequest): UpdateAutoLiveStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutoLiveStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCloudRecordRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  backgrounds?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      backgroundCropMode?: int32(name='BackgroundCropMode', example='2'),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Backgrounds', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='30', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      zone?: int32(name='Zone', example='8', minimum=-12, maximum=12),
    }
  ](name='ClockWidgets', position='Query'),
  images?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      imageCropMode?: int32(name='ImageCropMode', example='2'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Images', position='Query'),
  panes?: [ 
    {
      images?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          paneImageCropMode?: int32(name='PaneImageCropMode', example='2'),
          url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123xxx.jpg', minLength=1, maxLength=1024),
          width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Images'),
      paneCropMode?: int32(name='PaneCropMode', example='2'),
      paneId: int32(name='PaneId', description='This parameter is required.', example='0', minimum=0, maximum=15),
      source?: string(name='Source', example='22'),
      sourceType?: string(name='SourceType', example='video'),
      texts?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
          boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
          boxColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='BoxColor'),
          font?: int32(name='Font', example='0', minimum=0, maximum=9),
          fontColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='FontColor'),
          fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
          hasBox?: boolean(name='HasBox'),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Texts'),
    }
  ](name='Panes', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='123', minLength=1, maxLength=55, position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='567', minLength=1, maxLength=128, position='Query'),
  texts?: [ 
    {
      alpha?: double(name='Alpha', example='0.1', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Texts', position='Query'),
}

model UpdateCloudRecordResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  taskId?: string(name='TaskId', example='123'),
}

model UpdateCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCloudRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCloudRecord  UpdateCloudRecordRequest
  * @return UpdateCloudRecordResponse
 */
async function updateCloudRecord(request: UpdateCloudRecordRequest): UpdateCloudRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCloudRecord', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMPUTaskRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: float(name='Alpha', example='0', minimum=0),
      borderColor?: long(name='BorderColor', example='0'),
      borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
      box?: boolean(name='Box', example='false'),
      boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
      boxColor?: long(name='BoxColor', example='0', minimum=0),
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  cropMode?: int32(name='CropMode', example='1', position='Query'),
  layoutIds?: [ long ](name='LayoutIds', position='Query'),
  mediaEncode?: int32(name='MediaEncode', example='2', position='Query'),
  mixMode?: int32(name='MixMode', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceType?: string(name='SourceType', example='camera', position='Query'),
  streamType?: int32(name='StreamType', example='0', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='testId', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='2'),
      segmentType?: int32(name='SegmentType', example='0'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          alpha?: float(name='Alpha', example='0', minimum=0),
          borderColor?: long(name='BorderColor', example='0', minimum=0),
          borderWidth?: int32(name='BorderWidth', example='1', minimum=0),
          box?: boolean(name='Box', example='false'),
          boxBorderWidth?: int32(name='BoxBorderWidth', example='0', minimum=0),
          boxColor?: long(name='BoxColor', example='0', minimum=0),
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestUserID'),
    }
  ](name='UserPanes', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='1'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model UpdateMPUTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateMPUTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMPUTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMPUTask  UpdateMPUTaskRequest
  * @return UpdateMPUTaskResponse
 */
async function updateMPUTask(request: UpdateMPUTaskRequest): UpdateMPUTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMPUTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordTaskRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='yourChannelId', position='Query'),
  cropMode?: long(name='CropMode', position='Query'),
  layoutIds?: [ long ](name='LayoutIds', position='Query'),
  mediaEncode?: long(name='MediaEncode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  subSpecAudioUsers?: [ string ](name='SubSpecAudioUsers', position='Query'),
  subSpecCameraUsers?: [ string ](name='SubSpecCameraUsers', position='Query'),
  subSpecShareScreenUsers?: [ string ](name='SubSpecShareScreenUsers', position='Query'),
  subSpecUsers?: [ string ](name='SubSpecUsers', example='userID', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='yourTaskId', position='Query'),
  taskProfile?: string(name='TaskProfile', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='76dasgb****', position='Query'),
  unsubSpecAudioUsers?: [ string ](name='UnsubSpecAudioUsers', position='Query'),
  unsubSpecCameraUsers?: [ string ](name='UnsubSpecCameraUsers', position='Query'),
  unsubSpecShareScreenUsers?: [ string ](name='UnsubSpecShareScreenUsers', position='Query'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display', example='1'),
          height?: float(name='Height', example='0.2456'),
          url?: string(name='Url', example='https://www.example.com/image.jpg'),
          width?: float(name='Width', example='0.2456'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId', example='1'),
      sourceType?: string(name='SourceType', example='camera'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor', example='0'),
          fontSize?: int32(name='FontSize', example='1'),
          fontType?: int32(name='FontType', example='0'),
          text?: string(name='Text', example='text'),
          x?: float(name='X', example='0.7576'),
          y?: float(name='Y', example='0.7576'),
          zOrder?: int32(name='ZOrder', example='0'),
        }
      ](name='Texts'),
      userId?: string(name='UserId', example='TestId'),
    }
  ](name='UserPanes', position='Query'),
}

model UpdateRecordTaskResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
}

model UpdateRecordTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRecordTask  UpdateRecordTaskRequest
  * @return UpdateRecordTaskResponse
 */
async function updateRecordTask(request: UpdateRecordTaskRequest): UpdateRecordTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordTemplateRequest {
  appId: string(name='AppId', description='This parameter is required.', example='yourAppId', position='Query'),
  backgroundColor?: int32(name='BackgroundColor', example='0', position='Query'),
  backgrounds?: [ 
    {
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Backgrounds', position='Query'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor', example='0'),
      fontSize?: int32(name='FontSize', example='1'),
      fontType?: int32(name='FontType', example='0'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='ClockWidgets', position='Query'),
  delayStopTime?: int32(name='DelayStopTime', example='180', minimum=5, maximum=86400, position='Query'),
  enableM3u8DateTime?: boolean(name='EnableM3u8DateTime', example='false', position='Query'),
  fileSplitInterval: int32(name='FileSplitInterval', description='This parameter is required.', example='1800', position='Query'),
  formats: [ string ](name='Formats', description='This parameter is required.', example='mp4', position='Query'),
  httpCallbackUrl?: string(name='HttpCallbackUrl', example='http://example.com/callback', position='Query'),
  layoutIds: [ long ](name='LayoutIds', description='This parameter is required.', example='1111', position='Query'),
  mediaEncode: int32(name='MediaEncode', description='This parameter is required.', example='20', position='Query'),
  mnsQueue?: string(name='MnsQueue', example='record-callback-queue', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ossBucket: string(name='OssBucket', description='This parameter is required.', example='rtc-record-pre', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossFilePrefix: string(name='OssFilePrefix', description='This parameter is required.', example='record/{AppId}/{ChannelId_TaskId}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  taskProfile: string(name='TaskProfile', description='This parameter is required.', example='4IN_1080P', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='76dasgb****', position='Query'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha', example='0'),
      display?: int32(name='Display', example='0'),
      height?: float(name='Height', example='0.2456'),
      url?: string(name='Url', example='https://www.example.com/image.jpg'),
      width?: float(name='Width', example='0.2456'),
      x?: float(name='X', example='0.7576'),
      y?: float(name='Y', example='0.7576'),
      zOrder?: int32(name='ZOrder', example='0'),
    }
  ](name='Watermarks', position='Query'),
}

model UpdateRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  templateId?: string(name='TemplateId', example='76dasgb****'),
}

model UpdateRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRecordTemplate  UpdateRecordTemplateRequest
  * @return UpdateRecordTemplateResponse
 */
async function updateRecordTemplate(request: UpdateRecordTemplateRequest): UpdateRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStreamingOutRequest {
  appId: string(name='AppId', description='This parameter is required.', example='eo85****', position='Query'),
  backgrounds?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      backgroundCropMode?: int32(name='BackgroundCropMode', example='2'),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Backgrounds', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testid', position='Query'),
  clockWidgets?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='30', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      zone?: int32(name='Zone', example='8', minimum=-12, maximum=12),
    }
  ](name='ClockWidgets', position='Query'),
  images?: [ 
    {
      alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
      height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      imageCropMode?: int32(name='ImageCropMode', example='2'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
      width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Images', position='Query'),
  panes?: [ 
    {
      images?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          height: double(name='Height', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          paneImageCropMode?: int32(name='PaneImageCropMode', example='2'),
          url: string(name='Url', description='This parameter is required.', example='https://aliyun.com/123.jpg', minLength=1, maxLength=1024),
          width: double(name='Width', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Images'),
      paneCropMode?: int32(name='PaneCropMode', example='2'),
      paneId?: int32(name='PaneId', example='1', minimum=0, maximum=15),
      source?: string(name='Source', example='22'),
      sourceType?: string(name='SourceType', example='video'),
      texts?: [ 
        {
          alpha?: double(name='Alpha', example='0.9', minimum=0, maximum=1),
          boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
          boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
          boxColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='BoxColor'),
          font?: int32(name='Font', example='0', minimum=0, maximum=9),
          fontColor?: {
            b?: int32(name='B', example='255', minimum=0, maximum=255),
            g?: int32(name='G', example='255', minimum=0, maximum=255),
            r?: int32(name='R', example='255', minimum=0, maximum=255),
          }(name='FontColor'),
          fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
          hasBox?: boolean(name='HasBox'),
          layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
          texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
          x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
          y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
        }
      ](name='Texts'),
    }
  ](name='Panes', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='123', minLength=1, maxLength=55, position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='567', minLength=1, maxLength=128, position='Query'),
  texts?: [ 
    {
      alpha?: double(name='Alpha', example='0.1', minimum=0, maximum=1),
      boxAlpha?: double(name='BoxAlpha', example='0.6', minimum=0, maximum=1),
      boxBorderw?: int32(name='BoxBorderw', example='5', minimum=1, maximum=10),
      boxColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='BoxColor'),
      font?: int32(name='Font', example='0', minimum=0, maximum=9),
      fontColor?: {
        b?: int32(name='B', example='255', minimum=0, maximum=255),
        g?: int32(name='G', example='255', minimum=0, maximum=255),
        r?: int32(name='R', example='255', minimum=0, maximum=255),
      }(name='FontColor'),
      fontSize?: int32(name='FontSize', example='36', minimum=0, maximum=72),
      hasBox?: boolean(name='HasBox'),
      layer?: int32(name='Layer', example='0', minimum=0, maximum=100),
      texture: string(name='Texture', description='This parameter is required.', example='文字水印', minLength=1, maxLength=128),
      x: double(name='X', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
      y: double(name='Y', description='This parameter is required.', example='0.2', minimum=0, maximum=1),
    }
  ](name='Texts', position='Query'),
}

model UpdateStreamingOutResponseBody = {
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CF8'),
  taskId?: string(name='TaskId', example='123'),
}

model UpdateStreamingOutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStreamingOutResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateStreamingOut  UpdateStreamingOutRequest
  * @return UpdateStreamingOutResponse
 */
async function updateStreamingOut(request: UpdateStreamingOutRequest): UpdateStreamingOutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStreamingOut', 'POST', '/', 'json', false, 'json', request);
}

