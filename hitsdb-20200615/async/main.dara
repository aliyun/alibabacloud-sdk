/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hitsdb';
  @version = '2020-06-15';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'hitsdb.aliyuncs.com',
    cn-beijing = 'hitsdb.aliyuncs.com',
    cn-hangzhou = 'hitsdb.aliyuncs.com',
    cn-shanghai = 'hitsdb.aliyuncs.com',
    cn-shenzhen = 'hitsdb.aliyuncs.com',
    cn-hongkong = 'hitsdb.aliyuncs.com',
    ap-southeast-1 = 'hitsdb.aliyuncs.com',
    us-west-1 = 'hitsdb.aliyuncs.com',
    us-east-1 = 'hitsdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'hitsdb.aliyuncs.com',
    ap-northeast-2-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-gov-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'hitsdb.aliyuncs.com',
    cn-chengdu = 'hitsdb.aliyuncs.com',
    cn-edge-1 = 'hitsdb.aliyuncs.com',
    cn-fujian = 'hitsdb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-finance = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-test-306 = 'hitsdb.aliyuncs.com',
    cn-hongkong-finance-pop = 'hitsdb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'hitsdb.aliyuncs.com',
    cn-qingdao-nebula = 'hitsdb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-inner = 'hitsdb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-inner = 'hitsdb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'hitsdb.aliyuncs.com',
    cn-wuhan = 'hitsdb.aliyuncs.com',
    cn-wulanchabu = 'hitsdb.aliyuncs.com',
    cn-yushanfang = 'hitsdb.aliyuncs.com',
    cn-zhangbei = 'hitsdb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'hitsdb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'hitsdb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'hitsdb.aliyuncs.com',
    eu-west-1-oxs = 'hitsdb.aliyuncs.com',
    me-east-1 = 'hitsdb.aliyuncs.com',
    rus-west-1-pop = 'hitsdb.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateLindormInstanceRequest {
  coldStorage?: int32(name='ColdStorage', position='Query'),
  coreSpec?: string(name='CoreSpec', position='Query'),
  diskCategory: string(name='DiskCategory', position='Query'),
  duration?: string(name='Duration', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', position='Query'),
  instanceAlias?: string(name='InstanceAlias', position='Query'),
  instanceStorage?: string(name='InstanceStorage', position='Query'),
  lindormNum?: int32(name='LindormNum', position='Query'),
  lindormSpec?: string(name='LindormSpec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', position='Query'),
  solrSpec?: string(name='SolrSpec', position='Query'),
  tsdbNum?: int32(name='TsdbNum', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', position='Query'),
  VPCId: string(name='VPCId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLindormInstanceResponseBody(name='body'),
}

async function createLindormInstance(request: CreateLindormInstanceRequest): CreateLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  zoneId?: string(name='ZoneId', position='Host'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceIpWhiteListRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetInstanceIpWhiteListResponseBody = {
  instanceId?: string(name='InstanceId'),
  ipList?: [ string ](name='IpList'),
  requestId?: string(name='RequestId'),
}

model GetInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceIpWhiteListResponseBody(name='body'),
}

async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceResponseBody = {
  aliUid?: long(name='AliUid'),
  autoRenew?: boolean(name='AutoRenew'),
  coldStorage?: int32(name='ColdStorage'),
  createMilliseconds?: long(name='CreateMilliseconds'),
  createTime?: string(name='CreateTime'),
  deletionProtection?: string(name='DeletionProtection'),
  diskCategory?: string(name='DiskCategory'),
  diskThreshold?: string(name='DiskThreshold'),
  diskUsage?: string(name='DiskUsage'),
  enableCdc?: boolean(name='EnableCdc'),
  enableCompute?: boolean(name='EnableCompute'),
  enableKms?: boolean(name='EnableKms'),
  enableSSL?: boolean(name='EnableSSL'),
  enableShs?: boolean(name='EnableShs'),
  enableStream?: boolean(name='EnableStream'),
  engineList?: [ 
    {
      coreCount?: string(name='CoreCount'),
      cpuCount?: string(name='CpuCount'),
      engine?: string(name='Engine'),
      isLastVersion?: boolean(name='IsLastVersion'),
      latestVersion?: string(name='LatestVersion'),
      memorySize?: string(name='MemorySize'),
      version?: string(name='Version'),
    }
  ](name='EngineList'),
  engineType?: int32(name='EngineType'),
  expireTime?: string(name='ExpireTime'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceStorage?: string(name='InstanceStorage'),
  maintainEndTime?: string(name='MaintainEndTime'),
  maintainStartTime?: string(name='MaintainStartTime'),
  networkType?: string(name='NetworkType'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceType?: string(name='ServiceType'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  zoneId?: string(name='ZoneId'),
}

model GetLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceResponseBody(name='body'),
}

async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceEngineListRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceEngineListResponseBody = {
  engineList?: [ 
    {
      engineType?: string(name='EngineType'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: int32(name='Port'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GetLindormInstanceEngineListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceEngineListResponseBody(name='body'),
}

async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceEngineList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceListRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  queryStr?: string(name='QueryStr', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
  supportEngine?: int32(name='SupportEngine', minimum=-1, maximum=7, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model GetLindormInstanceListResponseBody = {
  instanceList?: [ 
    {
      aliUid?: long(name='AliUid'),
      createMilliseconds?: long(name='CreateMilliseconds'),
      createTime?: string(name='CreateTime'),
      enableCompute?: boolean(name='EnableCompute'),
      enableStream?: boolean(name='EnableStream'),
      engineType?: string(name='EngineType'),
      expireTime?: string(name='ExpireTime'),
      expiredMilliseconds?: long(name='ExpiredMilliseconds'),
      instanceAlias?: string(name='InstanceAlias'),
      instanceId?: string(name='InstanceId'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceStorage?: string(name='InstanceStorage'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      serviceType?: string(name='ServiceType'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='InstanceList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model GetLindormInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceListResponseBody(name='body'),
}

async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseLindormInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseLindormInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseLindormInstanceResponseBody(name='body'),
}

async function releaseLindormInstance(request: ReleaseLindormInstanceRequest): ReleaseLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', position='Host'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceIpWhiteListRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityIpList: string(name='SecurityIpList', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeLindormInstanceRequest {
  clusterStorage?: int32(name='ClusterStorage', position='Query'),
  coldStorage?: int32(name='ColdStorage', position='Query'),
  coreNum?: int32(name='CoreNum', position='Query'),
  coreSpec?: string(name='CoreSpec', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lindormNum?: int32(name='LindormNum', position='Query'),
  lindormSpec?: string(name='LindormSpec', position='Query'),
  ltsCoreNum?: int32(name='LtsCoreNum', position='Query'),
  ltsCoreSpec?: string(name='LtsCoreSpec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  phoenixCoreNum?: int32(name='PhoenixCoreNum', position='Query'),
  phoenixCoreSpec?: string(name='PhoenixCoreSpec', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', position='Query'),
  solrSpec?: string(name='SolrSpec', position='Query'),
  tsdbNum?: int32(name='TsdbNum', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', position='Query'),
  upgradeType: string(name='UpgradeType', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model UpgradeLindormInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeLindormInstanceResponseBody(name='body'),
}

async function upgradeLindormInstance(request: UpgradeLindormInstanceRequest): UpgradeLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

