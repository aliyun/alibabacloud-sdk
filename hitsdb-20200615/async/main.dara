/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hitsdb';
  @version = '2020-06-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group into which you want to change.

This parameter is required.', example='rg-aek2i6wee****', position='Query'),
  resourceId: string(name='ResourceId', description='The resource ID.

This parameter is required.', example='ld-bp17j28j2y7pm****', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  requestId?: string(name='RequestId', description='Id of the request', example='FAED4C02-AF99-5015-A075-692DE9C99630'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckLdpsColumnarIndexStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckLdpsColumnarIndexStatusResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  opened?: boolean(name='Opened'),
  requestId?: string(name='RequestId'),
}

model CheckLdpsColumnarIndexStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckLdpsColumnarIndexStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckLdpsColumnarIndexStatus  CheckLdpsColumnarIndexStatusRequest
  * @return CheckLdpsColumnarIndexStatusResponse
 */
async function checkLdpsColumnarIndexStatus(request: CheckLdpsColumnarIndexStatusRequest): CheckLdpsColumnarIndexStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckLdpsColumnarIndexStatus', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoScalingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configName: string(name='ConfigName', description='This parameter is required.', position='Query'),
  effectiveTimeEnd?: string(name='EffectiveTimeEnd', position='Query'),
  effectiveTimeStart?: string(name='EffectiveTimeStart', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  engine: string(name='Engine', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  nodesMax?: int32(name='NodesMax', position='Query'),
  nodesMin?: int32(name='NodesMin', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  scaleRuleList?: [ 
    {
      configId?: string(name='ConfigId'),
      enabled?: boolean(name='Enabled'),
      endTime?: string(name='EndTime'),
      instanceId?: string(name='InstanceId'),
      observationWindow?: int32(name='ObservationWindow'),
      operationType?: string(name='OperationType'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
      scaleInStep?: int32(name='ScaleInStep'),
      scaleOutStep?: int32(name='ScaleOutStep'),
      silenceTime?: int32(name='SilenceTime'),
      startTime?: string(name='StartTime'),
      targetMetric?: string(name='TargetMetric'),
      targetNodes?: int32(name='TargetNodes'),
      thresholdLower?: int32(name='ThresholdLower'),
      thresholdUpper?: int32(name='ThresholdUpper'),
      triggerCronExpr?: string(name='TriggerCronExpr'),
    }
  ](name='ScaleRuleList', shrink='json', position='Query'),
  scaleType: string(name='ScaleType', description='This parameter is required.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  specId: string(name='SpecId', description='This parameter is required.', position='Query'),
}

model CreateAutoScalingConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAutoScalingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAutoScalingConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAutoScalingConfig  CreateAutoScalingConfigRequest
  * @return CreateAutoScalingConfigResponse
 */
async function createAutoScalingConfig(request: CreateAutoScalingConfigRequest): CreateAutoScalingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoScalingConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoScalingRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  observationWindow?: int32(name='ObservationWindow', position='Query'),
  operationType?: string(name='OperationType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  ruleName: string(name='RuleName', description='This parameter is required.', position='Query'),
  ruleType: string(name='RuleType', description='This parameter is required.', position='Query'),
  scaleInStep?: int32(name='ScaleInStep', position='Query'),
  scaleOutStep?: int32(name='ScaleOutStep', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  silenceTime?: int32(name='SilenceTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  targetMetric?: string(name='TargetMetric', position='Query'),
  targetNodes?: int32(name='TargetNodes', position='Query'),
  thresholdLower?: int32(name='ThresholdLower', position='Query'),
  thresholdUpper?: int32(name='ThresholdUpper', position='Query'),
  triggerCronExpr?: string(name='TriggerCronExpr', position='Query'),
}

model CreateAutoScalingRuleResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAutoScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAutoScalingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAutoScalingRule  CreateAutoScalingRuleRequest
  * @return CreateAutoScalingRuleResponse
 */
async function createAutoScalingRule(request: CreateAutoScalingRuleRequest): CreateAutoScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateLdpsComputeGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  properties?: string(name='Properties', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateLdpsComputeGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model CreateLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLdpsComputeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLdpsComputeGroup  CreateLdpsComputeGroupRequest
  * @return CreateLdpsComputeGroupResponse
 */
async function createLdpsComputeGroup(request: CreateLdpsComputeGroupRequest): CreateLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateLindormInstanceRequest {
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', description='The ID of the vSwitch that is specified for the zone for the coordinate node of the instance. The vSwitch must be deployed in the zone specified by the ArbiterZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-uf6664pqjawb87k36****', position='Query'),
  arbiterZoneId?: string(name='ArbiterZoneId', description='The ID of the zone for the coordinate node of the instance. **This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-g', position='Query'),
  archVersion?: string(name='ArchVersion', description='The architecture of the instance. Valid values:

*   **1.0**: The instance that you want to create is a single-zone instance.
*   **2.0**: The instance that you want to create is a multi-zone instance.

By default, the value of this parameter is 1.0. To create a multi-zone instance, set this parameter to 2.0. **This parameter is required if you want to create a multi-zone instance**.', example='2.0', position='Query'),
  autoRenewDuration?: string(name='AutoRenewDuration', description='The auto-renewal duration. Unit: month.

Valid values: **1** to **12**.

>  This parameter is available only when the **AutoRenewal** parameter is set to **true**.', example='1', position='Query'),
  autoRenewal?: boolean(name='AutoRenewal', description='Specifies whether to enable auto-renewal for the instance. Valid values:

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal.

Default value: false.

>  This parameter is available only when the **PayType** parameter is set to **PREPAY**.', example='false', position='Query'),
  coldStorage?: int32(name='ColdStorage', description='The cold storage capacity of the instance. By default, if you leave this parameter unspecified, cold storage is not enabled for the instance. Unit: GB. Valid values: **800** to **1000000**.', example='800', position='Query'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='The storage capacity of the disk of a single core node. Valid values: 400 to 64000. Unit: GB. **This parameter is required if you want to create a multi-zone instance**.', example='400', position='Query'),
  coreSpec?: string(name='CoreSpec', description='The specification of the nodes in the instance if you set DiskCategory to local_ssd_pro or local_hdd_pro.

Valid values when DiskCategory is set to local_ssd_pro (i3 instance types support only subscription instances):

*   **lindorm.i4.xlarge**: Each node has 4 CPU cores and 32 GB of memory.
*   **lindorm.i4.2xlarge**: Each node has 8 CPU cores and 64 GB of memory.
*   **lindorm.i4.4xlarge**: Each node has 16 CPU cores and 128 GB of memory.
*   **lindorm.i4.8xlarge**: Each node has 32 CPU cores and 256 GB of memory.
*   **lindorm.i3.xlarge**: Each node has 4 CPU cores and 32 GB of memory.
*   **lindorm.i3.2xlarge**: Each node has 8 CPU cores and 64 GB of memory.
*   **lindorm.i3.4xlarge**: Each node has 16 CPU cores and 128 GB of memory.
*   **lindorm.i3.8xlarge**: Each node has 32 CPU cores and 256 GB of memory.
*   **lindorm.i2.xlarge**: Each node has 4 CPU cores and 32 GB of memory.
*   **lindorm.i2.2xlarge**: Each node has 8 CPU cores and 64 GB of memory.
*   **lindorm.i2.4xlarge**: Each node has 16 CPU cores and 128 GB of memory.
*   **lindorm.i2.8xlarge**: Each node has 32 CPU cores and 256 GB of memory.

Valid values when DiskCategory is set to local_hhd_pro:

*   **lindorm.sd3c.3xlarge**: Each node has 14 CPU cores and 56 GB of memory.
*   **lindorm.sd3c.7xlarge**: Each node has 28 CPU cores and 112 GB of memory.
*   **lindorm.sd3c.14xlarge**: Each node has 56 CPU cores and 224 GB of memory.
*   **lindorm.d2c.6xlarge**: Each node has 24 CPU cores and 88 GB of memory.
*   **lindorm.d2c.12xlarge**: Each node has 48 CPU cores and 176 GB of memory.
*   **lindorm.d2c.24xlarge**: Each node has 96 CPU cores and 352 GB of memory.
*   **lindorm.d2s.5xlarge**: Each node has 20 CPU cores and 88 GB of memory.
*   **lindorm.d2s.10xlarge**: Each node has 40 CPU cores and 176 GB of memory.
*   **lindorm.d1.2xlarge**: Each node has 8 CPU cores and 32 GB of memory.
*   **lindorm.d1.4xlarge**: Each node has 16 CPU cores and 64 GB of memory.
*   **lindorm.d1.6xlarge**: Each node has 24 CPU cores and 96 GB of memory.', example='lindorm.i2.xlarge', position='Query'),
  diskCategory: string(name='DiskCategory', description='The storage type of the instance. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **capacity_cloud_storage**: This instance uses the Capacity type of storage.
*   **local_ssd_pro**: This instance uses local SSDs.
*   **local_hdd_pro**: This instance uses local HDDs.

This parameter is required.', example='cloud_efficiency', position='Query'),
  duration?: string(name='Duration', description='The subscription period of the instance. The valid values of this parameter depend on the value of the PricingCycle parameter.

*   If PricingCycle is set to **Month**, set this parameter to an integer that ranges from **1** to **9**.
*   If PricingCycle is set to **Year**, set this parameter to an integer that ranges from **1** to **3**.

> This parameter is available and required when the PayType parameter is set to **PREPAY**.', example='1', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', description='The number of LindormDFS nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **60**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **8**.', example='2', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', description='The specification of LindormDFS nodes in the instance. Set the value of this parameter to **lindorm.c.xlarge**, which indicates that each node has 4 dedicated CPU cores and 8 GB of dedicated memory.', example='lindorm.c.xlarge', position='Query'),
  instanceAlias?: string(name='InstanceAlias', description='The name of the instance that you want to create.', example='lindorm_test', position='Query'),
  instanceStorage?: string(name='InstanceStorage', description='The storage capacity of the instance you want to create. Unit: GB.', example='480', position='Query'),
  lindormNum?: int32(name='LindormNum', description='The number of LindormTable nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **90**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **400**.

**This parameter is required if you want to create a multi-zone instance**.  The valid values of this parameter range from 4 to 400 if you want to create a multi-zone instance.', example='2', position='Query'),
  lindormSpec?: string(name='LindormSpec', description='The specification of LindormTable nodes in the instance. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.', example='lindorm.c.xlarge', position='Query'),
  logDiskCategory?: string(name='LogDiskCategory', description='The disk type of the log nodes. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.

**This parameter is required if you want to create a multi-zone instance**.', example='cloud_ssd', position='Query'),
  logNum?: int32(name='LogNum', description='The number of the log nodes. Valid values: 4 to 400. **This parameter is required if you want to create a multi-zone instance**.', example='4', position='Query'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of the disk of a single log node. Valid values: 400 to 64000. Unit: GB. **This parameter is required if you want to create a multi-zone instance**.', example='400', position='Query'),
  logSpec?: string(name='LogSpec', description='The type of the log nodes. Valid values:

*   **lindorm.sn1.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.sn1.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.

**This parameter is required if you want to create a multi-zone instance**.', example='lindorm.sn1.large', position='Query'),
  ltsNum?: string(name='LtsNum', description='The number of LTS nodes in the instance. Valid values: **0** to **60**.', example='2', position='Query'),
  ltsSpec?: string(name='LtsSpec', description='The specification of LTS nodes in the instance. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  multiZoneCombination?: string(name='MultiZoneCombination', description='The combinations of zones that are available for the multi-zone instance. You can go to the purchase page of Lindorm to view the supported zone combinations.

*   **ap-southeast-5abc-aliyun**: Zone A+B+C in the Indonesia (Jakarta) region.
*   **cn-hangzhou-ehi-aliyun**: Zone E+H+I in the China (Hangzhou) region.
*   **cn-beijing-acd-aliyun**: Zone A+C+D in the China (Beijing) region.
*   **ap-southeast-1-abc-aliyun**: Zone A+B+C in the Singapore region.
*   **cn-zhangjiakou-abc-aliyun**: Zone A+B+C in the China (Zhangjiakou) region.
*   **cn-shanghai-efg-aliyun**: Zone E+F+G in the China (Shanghai) region.
*   **cn-shanghai-abd-aliyun**: Zone A+B+D in the China (Shanghai) region.
*   **cn-hangzhou-bef-aliyun**: Zone B+E+F in the China (Hangzhou) region.
*   **cn-hangzhou-bce-aliyun**: Zone B+C+E in the China (Hangzhou) region.
*   **cn-beijing-fgh-aliyun**: Zone F+G+H in the China (Beijing) region.
*   **cn-shenzhen-abc-aliyun**: Zone A+B+C in the China (Shenzhen) region.

**This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-efg-aliyun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', description='The billing method of the instance you want to create. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.

This parameter is required.', example='POSTPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The period based on which you are charged for the instance. Valid values:

*   **Month**: You are charged for the instance on a monthly basis.
*   **Year**: You are charged for the instance on a yearly basis.

> This parameter is available and required when the PayType parameter is set to **PREPAY**.', example='Month', position='Query'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', description='The ID of the vSwitch that is specified for the secondary zone of the instance. The vSwitch must be deployed in the zone specified by the StandbyZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-uf6fdqa7c0pipnqzq****', position='Query'),
  primaryZoneId?: string(name='PrimaryZoneId', description='Multi-zone instance, availability zone ID of the primary zone. **This parameter is required if you need to create a multi-zone instance.**', example='cn-shanghai-e', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the region in which you can create the instance.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Lindorm instance belongs.', example='rg-aek2i6weeb4nfii', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', description='The number of LindormSearch nodes in the instance. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  solrSpec?: string(name='SolrSpec', description='The specification of the LindormSearch nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', description='The ID of the vSwitch that is specified for the secondary zone of the instance. The vSwitch must be deployed in the zone specified by the StandbyZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-2zec0kcn08cgdtr6****', position='Query'),
  standbyZoneId?: string(name='StandbyZoneId', description='The ID of the secondary zone of the instance. **This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-f', position='Query'),
  streamNum?: int32(name='StreamNum', description='The number of LindormStream nodes in the instance. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  streamSpec?: string(name='StreamSpec', description='The specification of the LindormStream nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. Valid values of N: 1 to 20.

>  You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The tag value. Valid values of N: 1 to 20.

>  You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='value'),
    }
  ](name='Tag', description='The tags that are added to instances.', position='Query'),
  tsdbNum?: int32(name='TsdbNum', description='The number of the LindormTSDB nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **24**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **32**.', example='2', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', description='The specification of the LindormTSDB nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  VPCId: string(name='VPCId', description='The ID of the VPC in which you want to create the instance.

This parameter is required.', example='vpc-bp1nme44gek34slfc****', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which you want the instance to connect.

This parameter is required.', example='vsw-bp1e7clcw529l773d****', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone in which you want to create the instance.

This parameter is required.', example='cn-shanghai-f', position='Query'),
}

model CreateLindormInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance that is created.', example='ld-bp1o3y0yme2i2****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='93BE8227-3406-4D7A-883D-9A421D42****'),
}

model CreateLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLindormInstanceResponseBody(name='body'),
}

/**
  * @description You must select at least one engine when you create a Lindorm instance. For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine types](https://help.aliyun.com/document_detail/181971.html) and [Select storage types](https://help.aliyun.com/document_detail/174643.html).
  * @param request  the request parameters of CreateLindormInstance  CreateLindormInstanceRequest
  * @return CreateLindormInstanceResponse
 */
async function createLindormInstance(request: CreateLindormInstanceRequest): CreateLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateLindormV2InstanceRequest {
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', position='Query'),
  arbiterZoneId?: string(name='ArbiterZoneId', position='Query'),
  archVersion?: string(name='ArchVersion', position='Query'),
  autoRenewDuration?: string(name='AutoRenewDuration', position='Query'),
  autoRenewal?: boolean(name='AutoRenewal', position='Query'),
  capacityStorageSize?: int32(name='CapacityStorageSize', position='Query'),
  cloudStorageSize?: int32(name='CloudStorageSize', position='Query'),
  cloudStorageType?: string(name='CloudStorageType', position='Query'),
  clusterMode?: string(name='ClusterMode', position='Query'),
  clusterPattern?: string(name='ClusterPattern', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  enableCapacityStorage?: boolean(name='EnableCapacityStorage', position='Query'),
  engineList: [ 
    {
      engineType: string(name='EngineType', description='This parameter is required.'),
      nodeGroupList?: [ 
        {
          nodeCount: int32(name='NodeCount', description='This parameter is required.'),
          nodeDiskSize?: int32(name='NodeDiskSize'),
          nodeDiskType?: string(name='NodeDiskType'),
          nodeSpec: string(name='NodeSpec', description='This parameter is required.'),
          resourceGroupName?: string(name='ResourceGroupName'),
        }
      ](name='NodeGroupList'),
    }
  ](name='EngineList', description='This parameter is required.', position='Query'),
  instanceAlias?: string(name='InstanceAlias', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', description='This parameter is required.', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', position='Query'),
  primaryZoneId?: string(name='PrimaryZoneId', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', position='Query'),
  standbyZoneId?: string(name='StandbyZoneId', position='Query'),
  VPCId: string(name='VPCId', description='This parameter is required.', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', position='Query'),
}

model CreateLindormV2InstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  instanceId?: string(name='InstanceId'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateLindormV2InstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLindormV2InstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLindormV2Instance  CreateLindormV2InstanceRequest
  * @return CreateLindormV2InstanceResponse
 */
async function createLindormV2Instance(request: CreateLindormV2InstanceRequest): CreateLindormV2InstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLindormV2Instance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoScalingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAutoScalingConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAutoScalingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAutoScalingConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAutoScalingConfig  DeleteAutoScalingConfigRequest
  * @return DeleteAutoScalingConfigResponse
 */
async function deleteAutoScalingConfig(request: DeleteAutoScalingConfigRequest): DeleteAutoScalingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoScalingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoScalingRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAutoScalingRuleResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAutoScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAutoScalingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAutoScalingRule  DeleteAutoScalingRuleRequest
  * @return DeleteAutoScalingRuleResponse
 */
async function deleteAutoScalingRule(request: DeleteAutoScalingRuleRequest): DeleteAutoScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomResourceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteCustomResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomResource  DeleteCustomResourceRequest
  * @return DeleteCustomResourceResponse
 */
async function deleteCustomResource(request: DeleteCustomResourceRequest): DeleteCustomResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLdpsComputeGroupRequest {
  groupName: string(name='GroupName', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLdpsComputeGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model DeleteLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLdpsComputeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLdpsComputeGroup  DeleteLdpsComputeGroupRequest
  * @return DeleteLdpsComputeGroupResponse
 */
async function deleteLdpsComputeGroup(request: DeleteLdpsComputeGroupRequest): DeleteLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeployLdpsSemiManagedComponentRequest {
  componentName?: string(name='ComponentName', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeployLdpsSemiManagedComponentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployLdpsSemiManagedComponentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployLdpsSemiManagedComponentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeployLdpsSemiManagedComponent  DeployLdpsSemiManagedComponentRequest
  * @return DeployLdpsSemiManagedComponentResponse
 */
async function deployLdpsSemiManagedComponent(request: DeployLdpsSemiManagedComponentRequest): DeployLdpsSemiManagedComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployLdpsSemiManagedComponent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  zoneId?: string(name='ZoneId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The display language of the regions in the returned results. Valid values:

*   **zh-CN** (default): Chinese.
*   **en-US**: English.', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint for the region.', example='hitsdb.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The regions supported by Lindorm.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73F6E6DA-9AE5-5548-9E07-761A554DAF2E'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoScalingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetAutoScalingConfigResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    configId?: string(name='ConfigId'),
    configName?: string(name='ConfigName'),
    effectiveTimeEnd?: string(name='EffectiveTimeEnd'),
    effectiveTimeStart?: string(name='EffectiveTimeStart'),
    enabled?: boolean(name='Enabled'),
    engine?: string(name='Engine'),
    instanceId?: string(name='InstanceId'),
    nodesMax?: int32(name='NodesMax'),
    nodesMin?: int32(name='NodesMin'),
    scaleRuleList?: [ 
      {
        configId?: string(name='ConfigId'),
        enabled?: boolean(name='Enabled'),
        endTime?: string(name='EndTime'),
        instanceId?: string(name='InstanceId'),
        observationWindow?: int32(name='ObservationWindow'),
        operationType?: string(name='OperationType'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        ruleType?: string(name='RuleType'),
        scaleInStep?: int32(name='ScaleInStep'),
        scaleOutStep?: int32(name='ScaleOutStep'),
        silenceTime?: int32(name='SilenceTime'),
        startTime?: string(name='StartTime'),
        targetMetric?: string(name='TargetMetric'),
        targetNodes?: int32(name='TargetNodes'),
        thresholdLower?: int32(name='ThresholdLower'),
        thresholdUpper?: int32(name='ThresholdUpper'),
        triggerCronExpr?: string(name='TriggerCronExpr'),
      }
    ](name='ScaleRuleList'),
    scaleType?: string(name='ScaleType'),
    specId?: string(name='SpecId'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAutoScalingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoScalingConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAutoScalingConfig  GetAutoScalingConfigRequest
  * @return GetAutoScalingConfigResponse
 */
async function getAutoScalingConfig(request: GetAutoScalingConfigRequest): GetAutoScalingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScalingConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoScalingRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetAutoScalingRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    configId?: string(name='ConfigId'),
    enabled?: boolean(name='Enabled'),
    endTime?: string(name='EndTime'),
    instanceId?: string(name='InstanceId'),
    observationWindow?: int32(name='ObservationWindow'),
    operationType?: string(name='OperationType'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    ruleType?: string(name='RuleType'),
    scaleInStep?: int32(name='ScaleInStep'),
    scaleOutStep?: int32(name='ScaleOutStep'),
    silenceTime?: int32(name='SilenceTime'),
    startTime?: string(name='StartTime'),
    targetMetric?: string(name='TargetMetric'),
    targetNodes?: int32(name='TargetNodes'),
    thresholdLower?: int32(name='ThresholdLower'),
    thresholdUpper?: int32(name='ThresholdUpper'),
    triggerCronExpr?: string(name='TriggerCronExpr'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAutoScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoScalingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAutoScalingRule  GetAutoScalingRuleRequest
  * @return GetAutoScalingRuleResponse
 */
async function getAutoScalingRule(request: GetAutoScalingRuleRequest): GetAutoScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model GetClientSourceIpRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetClientSourceIpResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  clientIp?: string(name='ClientIp'),
  requestId?: string(name='RequestId'),
}

model GetClientSourceIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientSourceIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetClientSourceIp  GetClientSourceIpRequest
  * @return GetClientSourceIpResponse
 */
async function getClientSourceIp(request: GetClientSourceIpRequest): GetClientSourceIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientSourceIp', 'POST', '/', 'json', false, 'json', request);
}

model GetEngineDefaultAuthRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetEngineDefaultAuthResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  authInfos?: [ 
    {
      engine?: string(name='Engine'),
      password?: string(name='Password'),
      username?: string(name='Username'),
    }
  ](name='AuthInfos'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GetEngineDefaultAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEngineDefaultAuthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEngineDefaultAuth  GetEngineDefaultAuthRequest
  * @return GetEngineDefaultAuthResponse
 */
async function getEngineDefaultAuth(request: GetEngineDefaultAuthRequest): GetEngineDefaultAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEngineDefaultAuth', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceIpWhiteListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance whose whitelists you want to query. You can call the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426068.html) operation to obtain the instance ID.

This parameter is required.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetInstanceIpWhiteListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  groupList?: [ 
    {
      groupName?: string(name='GroupName', description='The name of the IP address whitelist.', example='test'),
      securityIpList?: string(name='SecurityIpList', description='The IP addresses in the whitelist.', example='192.168.1.0/24'),
    }
  ](name='GroupList', description='The details about the IP address whitelists.'),
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance.', example='ld-bp1z3506imz2f****'),
  ipList?: [ string ](name='IpList', description='The list of IP addresses in the whitelist of the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D1F6F4D-9203-53E7-84E9-5376B4657E63'),
}

model GetInstanceIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceIpWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceIpWhiteList  GetInstanceIpWhiteListRequest
  * @return GetInstanceIpWhiteListResponse
 */
async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceSecurityGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetInstanceSecurityGroupsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  securityGroups?: [ string ](name='SecurityGroups'),
}

model GetInstanceSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceSecurityGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceSecurityGroups  GetInstanceSecurityGroupsRequest
  * @return GetInstanceSecurityGroupsResponse
 */
async function getInstanceSecurityGroups(request: GetInstanceSecurityGroupsRequest): GetInstanceSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsComputeGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLdpsComputeGroupResponseBody = {
  groupName?: string(name='GroupName'),
  properties?: map[string]any(name='Properties'),
  requestId?: string(name='RequestId'),
}

model GetLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLdpsComputeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLdpsComputeGroup  GetLdpsComputeGroupRequest
  * @return GetLdpsComputeGroupResponse
 */
async function getLdpsComputeGroup(request: GetLdpsComputeGroupRequest): GetLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsNamespacedQuotaRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLdpsNamespacedQuotaResponseBody = {
  namespacedQuotas?: [ 
    {
      cpuAmount?: string(name='CpuAmount'),
      memoryAmount?: string(name='MemoryAmount'),
      name?: string(name='Name'),
      usedCpu?: string(name='UsedCpu'),
      usedMemory?: string(name='UsedMemory'),
    }
  ](name='NamespacedQuotas'),
  requestId?: string(name='RequestId'),
}

model GetLdpsNamespacedQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLdpsNamespacedQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLdpsNamespacedQuota  GetLdpsNamespacedQuotaRequest
  * @return GetLdpsNamespacedQuotaResponse
 */
async function getLdpsNamespacedQuota(request: GetLdpsNamespacedQuotaRequest): GetLdpsNamespacedQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsNamespacedQuota', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsResourceCostRequest {
  endTime?: long(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetLdpsResourceCostResponseBody = {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totalResource?: long(name='TotalResource'),
}

model GetLdpsResourceCostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLdpsResourceCostResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLdpsResourceCost  GetLdpsResourceCostRequest
  * @return GetLdpsResourceCostResponse
 */
async function getLdpsResourceCost(request: GetLdpsResourceCostRequest): GetLdpsResourceCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsResourceCost', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormEngineConfigRequest {
  engineType: string(name='EngineType', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormEngineConfigResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  engineConfigs?: [ 
    {
      configFiles?: [ 
        {
          configItems?: [ 
            {
              configItemKey?: string(name='ConfigItemKey'),
              configItemValue?: string(name='ConfigItemValue'),
            }
          ](name='ConfigItems'),
          fileName?: string(name='FileName'),
        }
      ](name='ConfigFiles'),
      engine?: string(name='Engine'),
    }
  ](name='EngineConfigs'),
  requestId?: string(name='RequestId'),
}

model GetLindormEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormEngineConfig  GetLindormEngineConfigRequest
  * @return GetLindormEngineConfigResponse
 */
async function getLindormEngineConfig(request: GetLindormEngineConfigRequest): GetLindormEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormEngineConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormFsUsedDetailRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance. You can call the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426069.html) operation to query the instance ID.

This parameter is required.', example='ld-xxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormFsUsedDetailResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='{}'),
  fsCapacity?: string(name='FsCapacity', description='The total storage space of the cluster. Unit: bytes.', example='85899345920'),
  fsCapacityCold?: string(name='FsCapacityCold', description='The cold storage space of the cluster. Unit: bytes.', example='85899345920'),
  fsCapacityHot?: string(name='FsCapacityHot', description='The hot storage space of the cluster. Unit: bytes.', example='85899345920'),
  fsUsedCold?: string(name='FsUsedCold', description='The cold storage usage of the cluster. Unit: bytes.', example='33269'),
  fsUsedColdOnLindormSearch?: string(name='FsUsedColdOnLindormSearch', description='The cold storage usage of the table data of the search engine. Unit: bytes.', example='33269'),
  fsUsedColdOnLindormTSDB?: string(name='FsUsedColdOnLindormTSDB', description='The cold storage usage of the table data of the time series engine. Unit: bytes.', example='33269'),
  fsUsedColdOnLindormTable?: string(name='FsUsedColdOnLindormTable', description='The cold storage usage of the table data of the wide table engine. Unit: bytes.', example='33269'),
  fsUsedHot?: string(name='FsUsedHot', description='The hot storage usage of the cluster. Unit: bytes.', example='33269'),
  fsUsedHotOnLindormSearch?: string(name='FsUsedHotOnLindormSearch', description='The hot storage usage of the table data of the search engine. Unit: bytes.', example='33269'),
  fsUsedHotOnLindormTSDB?: string(name='FsUsedHotOnLindormTSDB', description='The hot storage usage of the table data of the time series engine. Unit: bytes.', example='33269'),
  fsUsedHotOnLindormTable?: string(name='FsUsedHotOnLindormTable', description='The hot storage usage of the table data of the wide table engine. Unit: bytes.', example='33269'),
  fsUsedOnLindormSearch?: string(name='FsUsedOnLindormSearch', description='The storage usage of the search engine. Unit: bytes.', example='33269'),
  fsUsedOnLindormTSDB?: string(name='FsUsedOnLindormTSDB', description='The storage usage of the time series engine. Unit: bytes.', example='33269'),
  fsUsedOnLindormTable?: string(name='FsUsedOnLindormTable', description='The space usage of the wide table engine. Unit: bytes.', example='33269'),
  fsUsedOnLindormTableData?: string(name='FsUsedOnLindormTableData', description='The storage usage of the table data of the wide table engine. Unit: bytes.', example='33269'),
  fsUsedOnLindormTableWAL?: string(name='FsUsedOnLindormTableWAL', description='The storage usage of the log data of the wide table engine. Unit: bytes.', example='33269'),
  lStorageUsageList?: [ 
    {
      capacity?: string(name='Capacity', description='The total storage capacity. Unit: bytes.', example='85899345920'),
      diskType?: string(name='DiskType', description='The storage type of the cluster. Valid values:

*   StandardCloudStorage
*   PerformanceCloudStorage
*   CapacityCloudStorage
*   LocalSsdStorage
*   LocalHddStorage
*   LocalEbsStorage', example='StandardCloudStorage'),
      used?: string(name='Used', description='The storage usage. Unit: bytes.', example='33269'),
      usedLindormColumn3?: string(name='UsedLindormColumn3'),
      usedLindormMessage3?: string(name='UsedLindormMessage3'),
      usedLindormSearch?: string(name='UsedLindormSearch', description='The storage usage of the search engine. Unit: bytes.', example='33269'),
      usedLindormSpark?: string(name='UsedLindormSpark', description='The storage usage of the compute engine. Unit: bytes.', example='33269'),
      usedLindormTable?: string(name='UsedLindormTable', description='The storage usage of the wide table engine. Unit: bytes.', example='33269'),
      usedLindormTsdb?: string(name='UsedLindormTsdb', description='The storage usage of the time series engine. Unit: bytes.', example='33269'),
      usedLindormVector3?: string(name='UsedLindormVector3'),
      usedOther?: string(name='UsedOther', description='The storage usage of other resources, such as logs and recycle bins. Unit: bytes.', example='33269'),
    }
  ](name='LStorageUsageList', description='If the version of the underlying storage engine is 4.1.9 or later, the storage usage values returned for the LStorageUsageList parameter prevail. Storage details are returned based on the storage type.'),
  requestId?: string(name='RequestId', description='The request ID. Each request has a unique ID. You can use the request ID to locate and troubleshoot issues.', example='4F23D50C-400C-592C-9486-9D1E10179065'),
  valid?: string(name='Valid', description='Indicates whether the return value is valid. Valid values: true and false. If a value of false is returned, you must provide the request ID for troubleshooting.', example='true'),
}

model GetLindormFsUsedDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormFsUsedDetailResponseBody(name='body'),
}

/**
  * @description If the version of the underlying storage engine in a Lindorm cluster is 4.1.9 or later, the storage usage values returned for the LStorageUsageList parameter prevail.
  * @param request  the request parameters of GetLindormFsUsedDetail  GetLindormFsUsedDetailRequest
  * @return GetLindormFsUsedDetailResponse
 */
async function getLindormFsUsedDetail(request: GetLindormFsUsedDetailRequest): GetLindormFsUsedDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormFsUsedDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The disk type of the log nodes. This parameter is returned only for multi-zone instances. Valid values:

*   **cloud_efficiency**: The nodes use the Standard type of storage.
*   **cloud_ssd**: The nodes use the Performance type of storage.

This parameter is required.', example='ld-bp1o3y0yme2i2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceResponseBody = {
  aliUid?: long(name='AliUid', description='16-digit AliUid of the Alibaba Cloud primary account (main account).', example='164901546557****'),
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', description='Multi-AZ instance, coordinating Availability Zone virtual switch ID, which must be located in the Availability Zone corresponding to ArbiterZoneId.', example='vsw-uf6664pqjawb87k36****'),
  arbiterZoneId?: string(name='ArbiterZoneId', description='Multi-zone instance, coordinating Availability Zone ID.', example='cn-shanghai-g'),
  archVersion?: string(name='ArchVersion', description='The architecture of the instance. Valid values:

*   **1.0**: The instance is deployed in a single zone.
*   **2.0**: The instance is deployed across multiple zones.', example='1.0'),
  archiveStorage?: int32(name='ArchiveStorage', description='The Archive storage size of the instance.', example='0GB'),
  autoRenew?: boolean(name='AutoRenew', description='Indicates whether auto-renewal is enabled, with the following returns:
- **true**: Enabled. 
- **false**: Disabled.
> This parameter is returned when the instance\\"s payment type is prepaid.', example='false'),
  coldStorage?: int32(name='ColdStorage', description='The Capacity storage size of the instance.', example='0GB'),
  coreDiskCategory?: string(name='CoreDiskCategory', description='The disk type of the core nodes. This parameter is returned only for multi-zone instances. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **cloud_essd**: This instance uses ESSDs for storage.
*   **cloud_essd_pl0**: This instance uses PL0 ESSDs for storage.', example='cloud_efficiency'),
  coreNum?: int32(name='CoreNum', description='Multi-zone instance, number of core nodes.', example='4'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='Multi-zone instance, core single-node disk capacity.', example='400'),
  coreSpec?: string(name='CoreSpec', description='Multi-zone instance, core node specification.', example='lindorm.g.xlarge'),
  createMilliseconds?: long(name='CreateMilliseconds', description='The timestamp in milliseconds between the instance creation time and 1970-01-01 00:00:00.', example='1627290664000'),
  createTime?: string(name='CreateTime', description='The storage capacity of the disk of a single log node. This parameter is returned only for multi-zone instances.', example='2021-07-26 17:10:26'),
  deletionProtection?: string(name='DeletionProtection', description='Indicates whether deletion protection is enabled, returning:
- **true**: Enabled.
- **false**: Disabled.', example='false'),
  diskCategory?: string(name='DiskCategory', description='The storage type of the instance. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **cloud_essd**: This instance uses ESSDs for storage.
*   **cloud_essd_pl0**: This instance uses PL0 ESSDs for storage.
*   **capacity_cloud_storage**: This instance uses the Capacity type of storage.
*   **local_ssd_pro**: This instance uses local SSDs for storage.
*   **local_hdd_pro**: This instance uses local HDDs for storage.', example='cloud_efficiency'),
  diskThreshold?: string(name='DiskThreshold', description='The threshold for disk space.', example='80%'),
  diskUsage?: string(name='DiskUsage', description='Disk space usage rate.', example='0.0%'),
  enableBlob?: boolean(name='EnableBlob', description='Indicates whether LBlob is enabled for the instance. Valid values:

true: LBlob is enabled for the instance. false: LBlob is not enabled for the instance.', example='true'),
  enableCdc?: boolean(name='EnableCdc', description='Indicates whether the data subscription feature for the instance is enabled. Returns:
- **true**: Enabled. 
- **false**: Not enabled.', example='false'),
  enableCompute?: boolean(name='EnableCompute', description='Indicates whether the instance\\"s compute engine is enabled, returning:
- **true**: Enabled. 
- **false**: Not enabled.', example='true'),
  enableKms?: boolean(name='EnableKms', description='Indicates whether the Key Management Service (KMS) is enabled, returning:
- **true**: Enabled.
- **false**: Disabled.', example='false'),
  enableLProxy?: boolean(name='EnableLProxy', description='Indicates whether LindormTable supports the Thrift and CQL protocols. If these protocols are not supported. You can call the SwitchLProxyService operation to enable or disable the support on these protocols for LindormTable.

True: LindormTable supports the Thrift and CQL protocols.

False: LindormTable does not support the Thrift and CQL protocols.', example='False'),
  enableLTS?: boolean(name='EnableLTS', description='Indicates whether the LTS engine is activated for the instance. Valid values:

*   **true**: The LTS engine is activated for the instance.
*   **false**: The LTS engine is not activated for the instance.', example='true'),
  enableLsqlVersionV3?: boolean(name='EnableLsqlVersionV3', description='Indicates whether LindormTable of the instance supports LindormSQL V3 that is compatible with MySQL. By default, LindormTable of instances that are purchased after October 24, 2023 supports LindormSQL V3. If your instance is purchased before this date and want to enable LindormSQL V3, contact the technical support.

*   True: LindormTable supports LindormSQL V3.
*   False: LindormTable does not support LindormSQL V3.', example='True'),
  enableMLCtrl?: boolean(name='EnableMLCtrl', description='Indicates whether AI control nodes are enabled for the instance.

*   True: AI control nodes are enabled for the instance.
*   False: AI control nodes are not enabled for the instance.', example='False'),
  enableSSL?: boolean(name='EnableSSL', description='Indicates whether SSL link encryption is enabled, returning:
- **true**: Enabled. 
- **false**: Disabled.', example='false'),
  enableShs?: boolean(name='EnableShs', description='Whether to enable the Compute Engine History Server.', example='true'),
  enableStoreTDE?: boolean(name='EnableStoreTDE', description='Indicates whether the Transparent Data Encryption (TDE) is enabled, returning:
- **true**: Enabled. 
- **false**: Disabled.', example='false'),
  enableStream?: boolean(name='EnableStream', description='Indicates whether the instance has the stream engine enabled. Return values:
- **true**: Stream engine is enabled. 
- **false**: Stream engine is not enabled.', example='true'),
  engineList?: [ 
    {
      arbiterCoreCount?: string(name='ArbiterCoreCount'),
      coreCount?: string(name='CoreCount', description='The number of engine nodes.', example='2'),
      cpuCount?: string(name='CpuCount', description='The number of CPU cores on the engine node.', example='4'),
      engine?: string(name='Engine', description='The engine type. Valid values:

*   **lindorm**: LindormTable.
*   **tsdb**: LindormTSDB.
*   **solr**: LindormSearch.
*   **store**: LindormDFS.
*   **bds**: Lindorm Tunnel Service (LTS).
*   **compute**: Lindorm Distributed Processing System (LDPS).', example='lindorm'),
      isLastVersion?: boolean(name='IsLastVersion', description='Indicates whether the version of the engine is the latest. Valid values:

*   **true**: The version of the engine is the latest.
*   **false**: The version of the engine is not the latest.', example='false'),
      latestVersion?: string(name='LatestVersion', description='The latest version number of the engine.', example='2.2.19.2'),
      memorySize?: string(name='MemorySize', description='The memory size of the engine nodes.', example='8GB'),
      primaryCoreCount?: string(name='PrimaryCoreCount'),
      specification?: string(name='Specification', description='The specification of the engine node.', example='lindorm.g.2xlarge'),
      standbyCoreCount?: string(name='StandbyCoreCount'),
      version?: string(name='Version', description='The version of the engine.', example='2.2.3'),
    }
  ](name='EngineList', description='The list of engines supported by the instance.'),
  engineType?: int32(name='EngineType', description='Supported engine types, the return value is obtained by performing addition operations on the values of the following engine types.
- 1: Search Engine 
- 2: Time Series Engine
- 4: Wide Table Engine
- 8: File Engine
> For example: If EngineType is 15, where 15 = 8 + 4 + 2 + 1, it indicates that the instance supports Search Engine, Time Series Engine, Wide Table Engine, and File Engine. If EngineType is 6, where 6 = 4 + 2, it signifies that the instance supports Time Series Engine and Wide Table Engine.', example='15'),
  expireTime?: string(name='ExpireTime', description='Expiration time of the instance, format: **yyyy-MM-dd HH:mm:ss**.
> This parameter is only returned when the payment type is pre-paid.', example='2021-08-27 00:00:00'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds', description='The millisecond value between the instance expiration time and 1970-01-01 00:00:00.', example='1629993600000'),
  instanceAlias?: string(name='InstanceAlias', description='Instance name.', example='test0726'),
  instanceId?: string(name='InstanceId', description='Instance ID.', example='ld-bp1o3y0yme2i2****'),
  instanceStatus?: string(name='InstanceStatus', description='The status of the instance. Valid values:

*   **CREATING**: The instance is being created.
*   **ACTIVATION**: The instance is running.
*   **COLD_EXPANDING**: The Capacity storage of the instance is being scaled up.
*   **MINOR_VERSION_TRANSING**: The minor version of the instance is being updated.
*   **RESIZING**: The nodes in the instance are being scaled up.
*   **SHRINKING**: The nodes in the instance are being scaled down.
*   **CLASS_CHANGING**: The specification of the instance is being changed.
*   **SSL_SWITCHING: SSL**: The SSL configurations of the instance are being changed.
*   **CDC_OPENING**: Data subscription is being enabled for the instance.
*   **TRANSFER**: The data of the instance is being transferred.
*   **DATABASE_TRANSFER**: The data of the instance is being transferred to databases.
*   **GUARD_CREATING**: A disaster recovery instance is being created.
*   **BACKUP_RECOVERING**: The data of the instance is being restored from a backup.
*   **DATABASE_IMPORTING**: Data is being imported to the instance.
*   **NET_MODIFYING**: The network configurations of the instance are being changed.
*   **NET_SWITCHING**: The network of the instance is being switched between a virtual private cloud (VPC) and the Internet.
*   **NET_CREATING**: The connection to the instance is being created.
*   **NET_DELETING**: The connection to the instance is being deleted.
*   **DELETING**: The instance is being deleted.
*   **RESTARTING**: The instance is restarting.
*   **LOCKED**: The instance is locked because it expires.', example='ACTIVATION'),
  instanceStorage?: string(name='InstanceStorage', description='Instance\\"s storage capacity.', example='480'),
  logDiskCategory?: string(name='LogDiskCategory', description='Multi-zone instance, log node disk type, returns:
- **cloud_efficiency**: Standard cloud storage. 
- **cloud_ssd**: Performance cloud storage.', example='cloud_ssd'),
  logNum?: int32(name='LogNum', description='Multi-zone instance, number of log nodes.', example='4'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of the disk of a single log node. This parameter is returned only for multi-zone instances.', example='400GB'),
  logSpec?: string(name='LogSpec', description='Multi-zone instance, log node specification.', example='lindorm.sn1.large'),
  maintainEndTime?: string(name='MaintainEndTime', description='Maintainable end time.', example='20:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', description='Maintainable start time.', example='00:00Z'),
  multiZoneCombination?: string(name='MultiZoneCombination', description='Multi-zone combinations. For support details on zone combinations, please refer to the product page.
- **ap-southeast-5abc-aliyun**: Indonesia (Jakarta) A+B+C. 
- **cn-hangzhou-ehi-aliyun**: East China 1 (Hangzhou) E+H+I.
- **cn-beijing-acd-aliyun**: North China 2 (Beijing) A+C+D.
- **ap-southeast-1-abc-aliyun**: Singapore A+B+C.
- **cn-zhangjiakou-abc-aliyun**: North China 3 (Zhangjiakou) A+B+C.
- **cn-shanghai-efg-aliyun**: East China 2 (Shanghai) E+F+G.
- **cn-shanghai-abd-aliyun**: East China 2 (Shanghai) A+B+D.
- **cn-hangzhou-bef-aliyun**: East China 1 (Hangzhou) B+E+F.
- **cn-hangzhou-bce-aliyun**: East China 1 (Hangzhou) B+C+E.
- **cn-beijing-fgh-aliyun**: North China 2 (Beijing) F+G+H.
- **cn-shenzhen-abc-aliyun**: South China 1 (Shenzhen) A+B+C.', example='cn-shanghai-efg-aliyun'),
  networkType?: string(name='NetworkType', description='Instance\\"s network type.', example='vpc'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

PREPAY: subscription.
POSTPAY: pay-as-you-go.', example='POSTPAY'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', description='Multi-zone instance, the virtual switch ID of the primary availability zone, which must be in the availability zone corresponding to PrimaryZoneId.', example='vsw-uf6fdqa7c0pipnqzq****'),
  primaryZoneId?: string(name='PrimaryZoneId', description='Multi-zone instance, availability zone ID of the primary zone.', example='cn-shanghai-e'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='Request ID.', example='633F1BE4-C8DA-5744-8FDF-A3075C3FE37F'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aek2wvd6oia****'),
  serviceType?: string(name='ServiceType', description='Instance type, valid values:
- **lindorm**: represents a Lindorm single-zone instance.
- **lindorm_multizone**: represents a Lindorm multi-zone instance.
- **serverless_lindorm**: represents a Lindorm Serverless instance.
- **lindorm_standalone**: represents a Lindorm standalone instance.
- **lts**: represents the Lindorm Data Channel Service type.', example='lindorm'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', description='Multi-zone instance, the virtual switch ID of the backup availability zone, which must be in the availability zone corresponding to StandbyZoneId.', example='vsw-2zec0kcn08cgdtr6****'),
  standbyZoneId?: string(name='StandbyZoneId', description='Multi-zone instance, backup availability zone\\"s availability zone ID.', example='cn-shanghai-f'),
  vpcId?: string(name='VpcId', description='The type of the log nodes. This parameter is returned only for multi-zone instances.', example='vpc-bp1n3i15v90el48nx****'),
  vswitchId?: string(name='VswitchId', description='The number of the log nodes. This parameter is returned only for multi-zone instances.', example='vsw-bp1vbjzmod9q3l9eo****'),
  zoneId?: string(name='ZoneId', description='Availability Zone ID.', example='cn-hangzhou-h'),
}

model GetLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormInstance  GetLindormInstanceRequest
  * @return GetLindormInstanceResponse
 */
async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceEngineListRequest {
  instanceId: string(name='InstanceId', description='Instance ID, which can be obtained by calling the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426069.html) interface.

This parameter is required.', example='ld-bp1nq34mv3smk****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceEngineListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  engineList?: [ 
    {
      engineType?: string(name='EngineType', description='The type of engine that can run on the instance. Valid values:

*   **lindorm**: LindormTable.
*   **tsdb**: LindormTSDB.
*   **solr**: LindormSearch.
*   **store**: LindormDFS.', example='lindorm'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType', description='The method by which the connection information can be used to access LindormTable. Valid values:

*   **0**: The default value. This value can be ignored.
*   **1**: The connection information can be used to access LindormTable by using ApsaraDB for HBase API for Java.
*   **2**: The connection information can be used to access LindormTable by using ApsaraDB for HBase API for a non-Java language.
*   **3**: The connection information can be used to access LindormTable by using the LindormTable endpoint for CQL.
*   **4**: The connection information can be used to access LindormTable by using the LindormTable endpoint for SQL.
*   **5**: The connection information can be used to access Lindorm by using the LindormTable endpoint for Amazon S3.
*   **6**: The connection information can be used to access Lindorm by using the LindormTable endpoint for MySQL.', example='1'),
          connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the engine.', example='ld-bp1nq34mv3smk****-proxy-lindorm.lindorm.rds.aliyuncs.com'),
          netType?: string(name='NetType', description='The network type of the endpoint. Valid values:

*   **0**: Internet
*   **2**: virtual private cloud (VPC)', example='2'),
          port?: int32(name='Port', description='The port number used to connect to the engine.', example='30020'),
        }
      ](name='NetInfoList', description='The list of connection information about the engine.'),
    }
  ](name='EngineList', description='The list of engines that can run on the specified instance.'),
  instanceId?: string(name='InstanceId', description='Instance ID.', example='ld-bp1nq34mv3smk****'),
  requestId?: string(name='RequestId', description='Request ID.', example='B496BA0E-520C-59FC-BA04-196D8F3B07EF'),
}

model GetLindormInstanceEngineListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormInstanceEngineListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormInstanceEngineList  GetLindormInstanceEngineListRequest
  * @return GetLindormInstanceEngineListResponse
 */
async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceEngineList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceListRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of instances to return on each page.', example='20', position='Query'),
  queryStr?: string(name='QueryStr', description='The keyword contained in the names of Lindorm instances you want to query. Fuzzy queries based on the keyword is supported.', example='test', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instances that you want to query is located. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aek3b63arvg27vi', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceType?: string(name='ServiceType', description='The series of instances that you want to query. Valid values:

*   **lindorm**: The instance is a single-zone Lindorm instance.
*   **lindorm_multizone**: The instance is a multi-zone Lindorm instance.
*   **serverless_lindorm**: The instance is a Lindorm Serverless instance.
*   **lindorm_standalone**: The instance is a single-node Lindorm instance.
*   **lts**: The instance is an LTS instance.', example='lindorm', position='Query'),
  supportEngine?: int32(name='SupportEngine', description='The engine supported by the instances that you want to query. The engines are indicated by different numbers:

*   **1**: LindormSearch.
*   **2**: LindormTSDB
*   **4**: LindormTable
*   **8**: LindormDFS

>  The value of this parameter is the sum of all numbers that indicate the engines supported by the instance. For example, if you set the value of this parameter to 15, which is the sum of 1, 2, 4, and 8, this operation queries instances that support all four engines. If you set the value of this parameter to 6, which is the sum of 2 and 4, this operation queries instances that support LindormTSDB and LindormTable.', example='15', minimum=-1, maximum=7, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instances you want to query. You can specify 1 to 20 tag keys.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The value of tag N of the instances you want to query. You can specify 1 to 20 tag values.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.18'),
    }
  ](name='Tag', description='The list of tags associated with the specified instances.', position='Query'),
}

model GetLindormInstanceListResponseBody = {
  instanceList?: [ 
    {
      aliUid?: long(name='AliUid', description='The 16-digit AliUid of the Alibaba Cloud account that owns the instance.', example='164901546557****'),
      createMilliseconds?: long(name='CreateMilliseconds', description='The time when the instance is created. This value is a UNIX timestamp that indicates the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1631772842000'),
      createTime?: string(name='CreateTime', description='The time when the instance is created.', example='2021-09-16 14:13:13'),
      enableColumn?: boolean(name='EnableColumn', description='Indicates whether the column storage engine is enabled, returning:
- **true**: Enabled. - **false**: Not enabled.', example='true'),
      enableCompute?: boolean(name='EnableCompute', description='Indicates whether LDPS is activated for the instance. Valid values:

*   **true**: LDPS is activated for the instance.
*   **false**: LDPS is not activated for the instance.', example='true'),
      enableLts?: boolean(name='EnableLts', description='Indicates whether the LTS engine is enabled, returning:
- **true**: Enabled. - **false**: Not enabled.', example='true'),
      enableMessage?: boolean(name='EnableMessage', description='Indicates whether the message engine is enabled, returning:
- **true**: Enabled. - **false**: Not enabled.', example='true'),
      enableRow?: boolean(name='EnableRow', description='Indicates whether the table 3.0 storage engine is enabled, returning:

true: Enabled. - false: Not enabled.', example='true'),
      enableStream?: boolean(name='EnableStream', description='Indicates whether the Lindorm streaming engine is activated for the instance. Valid values:

*   **true**: The Lindorm streaming engine is activated for the instance.
*   **false**: The Lindorm streaming engine is not activated for the instance.', example='true'),
      enableVector?: boolean(name='EnableVector', description='Whether the vector engine is enabled, returns:
- **true**: Enabled. - **false**: Not enabled.', example='true'),
      engineType?: string(name='EngineType', description='The engine supported by the instance. The engines are indicated by different numbers:

*   **1**: LindormSearch.
*   **2**: LindormTSDB.
*   **4**: LindormTable.
*   **8**: LindormDFS.

> The value of this parameter is the sum of all numbers that indicate the engines supported by the instance. For example, if the value of this parameter is 15, which is the sum of 1, 2, 4, and 8, the instance supports all four engines. If the value of this parameter is 6, which is the sum of 2 and 4, the instance supports LindormTSDB and LindormTable.', example='15'),
      expireTime?: string(name='ExpireTime', description='The time when the instance expires.

> This parameter is returned only if the billing method of the instance is subscription.', example='2022-04-26 00:00:00'),
      expiredMilliseconds?: long(name='ExpiredMilliseconds', description='The time when the instance expires. This value is a UNIX timestamp that indicates the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1650902400000'),
      instanceAlias?: string(name='InstanceAlias', description='The name of the VPC.', example='test'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='ld-bp17pwu1541ia****'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the instance. Valid values:

*   **CREATING**: The instance is being created.
*   **ACTIVATION**: The instance is running.
*   **COLD_EXPANDING**: The Capacity storage of the instance is being scaled up.
*   **MINOR_VERSION_TRANSING**: The minor version of the instance is being updated.
*   **RESIZING**: The nodes in the instance are being scaled up.
*   **SHRINKING**: The nodes in the instance are being scaled down.
*   **CLASS_CHANGING**: The specification of the instance is being changed.
*   **SSL_SWITCHING: SSL**: The SSL configurations of the instance are being changed.
*   **CDC_OPENING**: Data subscription is being enabled for the instance.
*   **TRANSFER**: The data of the instance is being transferred.
*   **DATABASE_TRANSFER**: The data of the instance is being transferred to databases.
*   **GUARD_CREATING**: A disaster recovery instance is being created.
*   **BACKUP_RECOVERING**: The data of the instance is being restored from a backup.
*   **DATABASE_IMPORTING**: Data is being imported to the instance.
*   **NET_MODIFYING**: The network configurations of the instance are being changed.
*   **NET_SWITCHING**: The network of the instance is being switched between a virtual private cloud (VPC) and the Internet.
*   **NET_CREATING**: The connection to the instance is being created.
*   **NET_DELETING**: The connection to the instance is being deleted.
*   **DELETING**: The instance is being deleted.
*   **RESTARTING**: The instance is restarting.
*   **LOCKED**: The instance is locked because it expires.', example='ACTIVATION'),
      instanceStorage?: string(name='InstanceStorage', description='The storage capacity of the instance.', example='960'),
      networkType?: string(name='NetworkType', description='The network type of the instance.', example='vpc'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.', example='PREPAY'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aekzledqeat****'),
      serviceType?: string(name='ServiceType', description='The series of the instance. Valid values:

*   **lindorm**: The instance is a Lindorm instance.
*   **serverless_lindorm**: The instance is a Lindorm Serverless instance.
*   **lindorm_standalone**: The instance is a single-node Lindorm instance.
*   **lts**: The instance is an LTS instance.', example='lindorm'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='test'),
          value?: string(name='Value', description='The value of the tag.', example='2.2.18'),
        }
      ](name='Tags', description='The list of tags associated with the specified instances.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC in which the instance is deployed.', example='vpc-bp1n3i15v90el48nx****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance is created.', example='cn-hangzhou-h'),
    }
  ](name='InstanceList', description='The instances.'),
  pageNumber?: int32(name='PageNumber', description='The number of returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of instances that are returned on each page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CA1FAFD-E8DC-51C2-AA7E-CA6E2D049BA0'),
  total?: int32(name='Total', description='The total number of returned instances.', example='1'),
}

model GetLindormInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormInstanceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormInstanceList  GetLindormInstanceListRequest
  * @return GetLindormInstanceListResponse
 */
async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormV2InstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormV2InstanceResponseBody = {
  aliUid?: long(name='AliUid'),
  arbiterVSwitchId?: string(name='ArbiterVSwitchId'),
  arbiterZoneId?: string(name='ArbiterZoneId'),
  autoRenew?: boolean(name='AutoRenew'),
  coldStorage?: int32(name='ColdStorage'),
  createMilliseconds?: long(name='CreateMilliseconds'),
  deletionProtection?: string(name='DeletionProtection'),
  diskCategory?: string(name='DiskCategory'),
  diskThreshold?: string(name='DiskThreshold'),
  diskUsage?: string(name='DiskUsage'),
  enableCompute?: boolean(name='EnableCompute'),
  engineList?: [ 
    {
      connectAddressList?: [ 
        {
          address?: string(name='Address'),
          port?: string(name='Port'),
          type?: string(name='Type'),
        }
      ](name='ConnectAddressList'),
      engine?: string(name='Engine'),
      isLastVersion?: boolean(name='IsLastVersion'),
      latestVersion?: string(name='LatestVersion'),
      nodeGroup?: [ 
        {
          category?: string(name='Category'),
          cpuCoreCount?: int32(name='CpuCoreCount'),
          enableAttachLocalDisk?: boolean(name='EnableAttachLocalDisk'),
          localDiskCapacity?: long(name='LocalDiskCapacity'),
          localDiskCategory?: string(name='LocalDiskCategory'),
          memorySizeGiB?: int32(name='MemorySizeGiB'),
          nodeSpec?: string(name='NodeSpec'),
          quantity?: int32(name='Quantity'),
          resourceGroupName?: string(name='ResourceGroupName'),
          specId?: string(name='SpecId'),
          status?: string(name='Status'),
        }
      ](name='NodeGroup'),
      version?: string(name='Version'),
    }
  ](name='EngineList'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds'),
  initialRootPassword?: string(name='InitialRootPassword'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceType?: string(name='InstanceType'),
  maintainEndTime?: string(name='MaintainEndTime'),
  maintainStartTime?: string(name='MaintainStartTime'),
  networkType?: string(name='NetworkType'),
  payType?: string(name='PayType'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId'),
  primaryZoneId?: string(name='PrimaryZoneId'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceType?: string(name='ServiceType'),
  standbyVSwitchId?: string(name='StandbyVSwitchId'),
  standbyZoneId?: string(name='StandbyZoneId'),
  storageUsage?: {
    capacityByDiskCategory?: [  map[string]any ](name='CapacityByDiskCategory'),
    engineUsage?: map[string]any(name='EngineUsage'),
  }(name='StorageUsage'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  whiteIpList?: [ 
    {
      groupName?: string(name='GroupName'),
      ipList?: string(name='IpList'),
    }
  ](name='WhiteIpList'),
  zoneEngineInfoMap?: map[string]any(name='ZoneEngineInfoMap'),
  zoneId?: string(name='ZoneId'),
}

model GetLindormV2InstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormV2InstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormV2Instance  GetLindormV2InstanceRequest
  * @return GetLindormV2InstanceResponse
 */
async function getLindormV2Instance(request: GetLindormV2InstanceRequest): GetLindormV2InstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormV2Instance', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormV2InstanceEngineListRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormV2InstanceEngineListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  engineList?: [ 
    {
      engineType?: string(name='EngineType'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: int32(name='Port'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GetLindormV2InstanceEngineListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormV2InstanceEngineListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormV2InstanceEngineList  GetLindormV2InstanceEngineListRequest
  * @return GetLindormV2InstanceEngineListResponse
 */
async function getLindormV2InstanceEngineList(request: GetLindormV2InstanceEngineListRequest): GetLindormV2InstanceEngineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormV2InstanceEngineList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormV2StorageUsageRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormV2StorageUsageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  capacityByDiskCategory?: [  map[string]any ](name='CapacityByDiskCategory'),
  instanceStorageZoneMap?: map[string]any(name='InstanceStorageZoneMap'),
  requestId?: string(name='RequestId'),
  usageByDiskCategory?: [  map[string]any ](name='UsageByDiskCategory'),
}

model GetLindormV2StorageUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormV2StorageUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormV2StorageUsage  GetLindormV2StorageUsageRequest
  * @return GetLindormV2StorageUsageResponse
 */
async function getLindormV2StorageUsage(request: GetLindormV2StorageUsageRequest): GetLindormV2StorageUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormV2StorageUsage', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormV2StreamEngineInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormV2StreamEngineInfoResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  resourceGroupList?: [ 
    {
      jmIpList?: [ string ](name='JmIpList'),
      quantity?: int32(name='Quantity'),
      resourceGroupName?: string(name='ResourceGroupName'),
      sgIpList?: [ string ](name='SgIpList'),
      spec?: string(name='Spec'),
      specId?: string(name='SpecId'),
      status?: string(name='Status'),
    }
  ](name='ResourceGroupList'),
}

model GetLindormV2StreamEngineInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormV2StreamEngineInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLindormV2StreamEngineInfo  GetLindormV2StreamEngineInfoRequest
  * @return GetLindormV2StreamEngineInfoResponse
 */
async function getLindormV2StreamEngineInfo(request: GetLindormV2StreamEngineInfoRequest): GetLindormV2StreamEngineInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormV2StreamEngineInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoScalingConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ListAutoScalingConfigsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    scaleConfigs?: [ 
      {
        configId?: string(name='ConfigId'),
        configName?: string(name='ConfigName'),
        effectiveTimeEnd?: string(name='EffectiveTimeEnd'),
        effectiveTimeStart?: string(name='EffectiveTimeStart'),
        enabled?: boolean(name='Enabled'),
        engine?: string(name='Engine'),
        instanceId?: string(name='InstanceId'),
        nodesMax?: int32(name='NodesMax'),
        nodesMin?: int32(name='NodesMin'),
        scaleRuleList?: [ 
          {
            configId?: string(name='ConfigId'),
            enabled?: boolean(name='Enabled'),
            endTime?: string(name='EndTime'),
            instanceId?: string(name='InstanceId'),
            observationWindow?: int32(name='ObservationWindow'),
            operationType?: string(name='OperationType'),
            ruleId?: string(name='RuleId'),
            ruleName?: string(name='RuleName'),
            ruleType?: string(name='RuleType'),
            scaleInStep?: int32(name='ScaleInStep'),
            scaleOutStep?: int32(name='ScaleOutStep'),
            silenceTime?: int32(name='SilenceTime'),
            startTime?: string(name='StartTime'),
            targetMetric?: string(name='TargetMetric'),
            targetNodes?: int32(name='TargetNodes'),
            thresholdLower?: int32(name='ThresholdLower'),
            thresholdUpper?: int32(name='ThresholdUpper'),
            triggerCronExpr?: string(name='TriggerCronExpr'),
          }
        ](name='ScaleRuleList'),
        scaleType?: string(name='ScaleType'),
        specId?: string(name='SpecId'),
      }
    ](name='ScaleConfigs'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAutoScalingConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAutoScalingConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAutoScalingConfigs  ListAutoScalingConfigsRequest
  * @return ListAutoScalingConfigsResponse
 */
async function listAutoScalingConfigs(request: ListAutoScalingConfigsRequest): ListAutoScalingConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoScalingConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoScalingRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNum: int32(name='PageNum', description='This parameter is required.', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ListAutoScalingRecordsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    scaleRecords?: [ 
      {
        detail?: string(name='Detail'),
        endTime?: string(name='EndTime'),
        id?: string(name='Id'),
        instanceId?: string(name='InstanceId'),
        oldValue?: string(name='OldValue'),
        resourceType?: string(name='ResourceType'),
        specGroupId?: string(name='SpecGroupId'),
        startTime?: string(name='StartTime'),
        status?: string(name='Status'),
        strategy?: string(name='Strategy'),
        targetValue?: string(name='TargetValue'),
      }
    ](name='ScaleRecords'),
    totalNum?: int32(name='TotalNum'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAutoScalingRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAutoScalingRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAutoScalingRecords  ListAutoScalingRecordsRequest
  * @return ListAutoScalingRecordsResponse
 */
async function listAutoScalingRecords(request: ListAutoScalingRecordsRequest): ListAutoScalingRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoScalingRecords', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoScalingRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ListAutoScalingRulesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    scaleRules?: [ 
      {
        configId?: string(name='ConfigId'),
        enabled?: boolean(name='Enabled'),
        endTime?: string(name='EndTime'),
        instanceId?: string(name='InstanceId'),
        observationWindow?: int32(name='ObservationWindow'),
        operationType?: string(name='OperationType'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        ruleType?: string(name='RuleType'),
        scaleInStep?: int32(name='ScaleInStep'),
        scaleOutStep?: int32(name='ScaleOutStep'),
        silenceTime?: int32(name='SilenceTime'),
        startTime?: string(name='StartTime'),
        targetMetric?: string(name='TargetMetric'),
        targetNodes?: int32(name='TargetNodes'),
        thresholdLower?: int32(name='ThresholdLower'),
        thresholdUpper?: int32(name='ThresholdUpper'),
        triggerCronExpr?: string(name='TriggerCronExpr'),
      }
    ](name='ScaleRules'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAutoScalingRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAutoScalingRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAutoScalingRules  ListAutoScalingRulesRequest
  * @return ListAutoScalingRulesResponse
 */
async function listAutoScalingRules(request: ListAutoScalingRulesRequest): ListAutoScalingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoScalingRules', 'POST', '/', 'json', false, 'json', request);
}

model ListLdpsComputeGroupsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ListLdpsComputeGroupsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  groupList?: [ 
    {
      exceptionInfo?: string(name='ExceptionInfo'),
      groupName?: string(name='GroupName'),
      isDefault?: boolean(name='IsDefault'),
      properties?: map[string]any(name='Properties'),
      state?: string(name='State'),
      webUI?: string(name='WebUI'),
    }
  ](name='GroupList'),
  requestId?: string(name='RequestId'),
}

model ListLdpsComputeGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLdpsComputeGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLdpsComputeGroups  ListLdpsComputeGroupsRequest
  * @return ListLdpsComputeGroupsResponse
 */
async function listLdpsComputeGroups(request: ListLdpsComputeGroupsRequest): ListLdpsComputeGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLdpsComputeGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to start the next query to retrieve more results.

> This parameter is not required in the first query. If not all results are returned in one query, you can pass in the **NextToken** value returned for the query to perform the next query.', example='212db86****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances whose tags you want to query are located. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.

This parameter is required.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of the tags associated with the instances you want to query.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The values of the tags associated with the instances you want to query.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The list of tags associated with the instances you want to query.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.

> If not all results are returned in the first query, this parameter is returned. You can pass in the returned value of this parameter for the next query.', example='212db86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='05CB115C-91CB-529F-9098-50C1F6CB3BD3'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource, which is the ID of the instance.', example='ld-bp17j28j2y7pm****'),
      resourceType?: string(name='ResourceType', description='The type of the resources. The returned value is fixed to **ALIYUN::HITSDB::INSTANCE**.', example='ALIYUN::HITSDB::INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag associated with the instance.', example='test'),
      tagValue?: string(name='TagValue', description='The value of the tag associated with the instance.', example='2.2.8'),
    }
  ](name='TagResources', description='The list of resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model MigrateSingleZoneToMultiZoneRequest {
  regionId?: string(name='RegionId', position='Host'),
  arbitraryVSwitchId?: string(name='ArbitraryVSwitchId', position='Query'),
  arbitraryZoneId?: string(name='ArbitraryZoneId', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', position='Query'),
  standbyZoneId?: string(name='StandbyZoneId', position='Query'),
}

model MigrateSingleZoneToMultiZoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model MigrateSingleZoneToMultiZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MigrateSingleZoneToMultiZoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MigrateSingleZoneToMultiZone  MigrateSingleZoneToMultiZoneRequest
  * @return MigrateSingleZoneToMultiZoneResponse
 */
async function migrateSingleZoneToMultiZone(request: MigrateSingleZoneToMultiZoneRequest): MigrateSingleZoneToMultiZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateSingleZoneToMultiZone', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoScalingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  configName?: string(name='ConfigName', position='Query'),
  effectiveTimeEnd?: string(name='EffectiveTimeEnd', position='Query'),
  effectiveTimeStart?: string(name='EffectiveTimeStart', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  engine?: string(name='Engine', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  nodesMax?: int32(name='NodesMax', position='Query'),
  nodesMin?: int32(name='NodesMin', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  scaleType?: string(name='ScaleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  specId?: string(name='SpecId', position='Query'),
}

model ModifyAutoScalingConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAutoScalingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAutoScalingConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAutoScalingConfig  ModifyAutoScalingConfigRequest
  * @return ModifyAutoScalingConfigResponse
 */
async function modifyAutoScalingConfig(request: ModifyAutoScalingConfigRequest): ModifyAutoScalingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoScalingConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoScalingRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  configId: string(name='ConfigId', description='This parameter is required.', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  observationWindow?: int32(name='ObservationWindow', position='Query'),
  operationType?: string(name='OperationType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  ruleType?: string(name='RuleType', position='Query'),
  scaleInStep?: int32(name='ScaleInStep', position='Query'),
  scaleOutStep?: int32(name='ScaleOutStep', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  silenceTime?: int32(name='SilenceTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  targetMetric?: string(name='TargetMetric', position='Query'),
  targetNodes?: int32(name='TargetNodes', position='Query'),
  thresholdLower?: int32(name='ThresholdLower', position='Query'),
  thresholdUpper?: int32(name='ThresholdUpper', position='Query'),
  triggerCronExpr?: string(name='TriggerCronExpr', position='Query'),
}

model ModifyAutoScalingRuleResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAutoScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAutoScalingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAutoScalingRule  ModifyAutoScalingRuleRequest
  * @return ModifyAutoScalingRuleResponse
 */
async function modifyAutoScalingRule(request: ModifyAutoScalingRuleRequest): ModifyAutoScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstancePayTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  duration?: int32(name='Duration', description='The subscription duration of the instance. The parameter is required if the instance is an subscription instance.

*   If PricingCycle is set to Month, set this parameter to an integer that ranges from 1 to 9.
*   If PricingCycle is set to Year, set this parameter to an integer that ranges from 1 to 3.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.

This parameter is required.', example='POSTPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The unit of the subscription duration for the instance. Valid values:

*   Month
*   Year', example='Month', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstancePayTypeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='211662251220224'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='587BCA54-50DA-4885-ADE9-80A848339151'),
}

model ModifyInstancePayTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstancePayTypeResponseBody(name='body'),
}

/**
  * @description You can call this operation to change the billing method of an instance to subscription or pay-as-you-go.
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/en/pricing-calculator?spm=a2c63.p38356.0.0.2b024c2adcHeXL&_p_lc=1#/commodity/hitsdb_lindormpre_public_intl) of Lindorm. Published on only international site (alibabacloud.com).
  * @param request  the request parameters of ModifyInstancePayType  ModifyInstancePayTypeRequest
  * @return ModifyInstancePayTypeResponse
 */
async function modifyInstancePayType(request: ModifyInstancePayTypeRequest): ModifyInstancePayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstancePayType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLindormV2InstanceRequest {
  cloudStorageSize?: long(name='CloudStorageSize', position='Query'),
  cloudStorageType?: string(name='CloudStorageType', position='Query'),
  engineType?: string(name='EngineType', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  nodeGroupList?: [ 
    {
      groupId?: string(name='GroupId'),
      nodeCount?: string(name='NodeCount'),
      nodeDiskSize?: long(name='NodeDiskSize'),
      nodeDiskType?: string(name='NodeDiskType'),
      nodeSpec?: string(name='NodeSpec'),
      resourceGroupName?: string(name='ResourceGroupName'),
    }
  ](name='NodeGroupList', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  upgradeType: string(name='UpgradeType', description='This parameter is required.', position='Query'),
}

model ModifyLindormV2InstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  instanceId?: string(name='InstanceId'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyLindormV2InstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyLindormV2InstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyLindormV2Instance  ModifyLindormV2InstanceRequest
  * @return ModifyLindormV2InstanceResponse
 */
async function modifyLindormV2Instance(request: ModifyLindormV2InstanceRequest): ModifyLindormV2InstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLindormV2Instance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLindormV2WhiteIpListRequest {
  deleteGroup?: boolean(name='DeleteGroup', position='Query'),
  groupName: string(name='GroupName', description='This parameter is required.', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  whiteIpList: string(name='WhiteIpList', description='This parameter is required.', position='Query'),
}

model ModifyLindormV2WhiteIpListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model ModifyLindormV2WhiteIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyLindormV2WhiteIpListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyLindormV2WhiteIpList  ModifyLindormV2WhiteIpListRequest
  * @return ModifyLindormV2WhiteIpListResponse
 */
async function modifyLindormV2WhiteIpList(request: ModifyLindormV2WhiteIpListRequest): ModifyLindormV2WhiteIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLindormV2WhiteIpList', 'POST', '/', 'json', false, 'json', request);
}

model OpenComputeEngineRequest {
  regionId?: string(name='RegionId', position='Host'),
  cpuLimit?: string(name='CpuLimit', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  memoryLimit?: string(name='MemoryLimit', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model OpenComputeEngineResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model OpenComputeEngineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenComputeEngineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenComputeEngine  OpenComputeEngineRequest
  * @return OpenComputeEngineResponse
 */
async function openComputeEngine(request: OpenComputeEngineRequest): OpenComputeEngineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenComputeEngine', 'POST', '/', 'json', false, 'json', request);
}

model OpenComputePreCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  cpuLimit?: string(name='CpuLimit', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  memoryLimit?: string(name='MemoryLimit', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model OpenComputePreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model OpenComputePreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenComputePreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenComputePreCheck  OpenComputePreCheckRequest
  * @return OpenComputePreCheckResponse
 */
async function openComputePreCheck(request: OpenComputePreCheckRequest): OpenComputePreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenComputePreCheck', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseLindormInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  immediately?: boolean(name='Immediately', description='Specifies whether to release the instance immediately. If you set this parameter to false, data in the released instance is retained for seven days before it is completely deleted. If you set this parameter to true, data in the released instance is immediately deleted. The default value is false.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID, which can be obtained by calling the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426069.html) interface.

This parameter is required.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseLindormInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='F67BFFF3-F5C2-45B5-9C28-6E4A1E51****'),
}

model ReleaseLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseLindormInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseLindormInstance  ReleaseLindormInstanceRequest
  * @return ReleaseLindormInstanceResponse
 */
async function releaseLindormInstance(request: ReleaseLindormInstanceRequest): ReleaseLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseLindormV2InstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  immediately?: boolean(name='Immediately', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseLindormV2InstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model ReleaseLindormV2InstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseLindormV2InstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseLindormV2Instance  ReleaseLindormV2InstanceRequest
  * @return ReleaseLindormV2InstanceResponse
 */
async function releaseLindormV2Instance(request: ReleaseLindormV2InstanceRequest): ReleaseLindormV2InstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseLindormV2Instance', 'POST', '/', 'json', false, 'json', request);
}

model RenewLindormInstanceRequest {
  duration: int32(name='Duration', description='The subscription duration of the instance. The valid values of this parameter depend on the value of the PricingCycle parameter.

*   If PricingCycle is set to **Month**, set this parameter to an integer that ranges from **1** to **9**.
*   If PricingCycle is set to **Year**, set this parameter to an integer that ranges from **1** to **3**.

This parameter is required.', example='1', minimum=1, maximum=9, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to renew. You can call the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426069.html) operation to obtain the instance ID.

This parameter is required.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pricingCycle: string(name='PricingCycle', description='The period based on which you are charged for the instance. Valid values:

*   **Month**: You are charged for the instance based on months.
*   **Year**: You are charged for the instance based on years.

This parameter is required.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance that you want to renew is located. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the region ID.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RenewLindormInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order. You can obtain the order ID on the Orders page of the Expenses and Costs console.', example='213465921640411'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1556DCB0-043A-4444-8BD9-CF4A68E7EE64'),
}

model RenewLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewLindormInstanceResponseBody(name='body'),
}

/**
  * @description You can call this operation to renew a subscription Lindorm instance for 1 to 9 months or 1 to 3 years.
  * Before you call this operation, make sure that you fully understand the billing methods and pricing of Lindorm.
  * @param request  the request parameters of RenewLindormInstance  RenewLindormInstanceRequest
  * @return RenewLindormInstanceResponse
 */
async function renewLindormInstance(request: RenewLindormInstanceRequest): RenewLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model RestartLdpsComputeGroupRequest {
  groupName: string(name='GroupName', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RestartLdpsComputeGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model RestartLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartLdpsComputeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartLdpsComputeGroup  RestartLdpsComputeGroupRequest
  * @return RestartLdpsComputeGroupResponse
 */
async function restartLdpsComputeGroup(request: RestartLdpsComputeGroupRequest): RestartLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultOlapComputeGroupRequest {
  groupName: string(name='GroupName', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  isDefault?: boolean(name='IsDefault', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDefaultOlapComputeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultOlapComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultOlapComputeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultOlapComputeGroup  SetDefaultOlapComputeGroupRequest
  * @return SetDefaultOlapComputeGroupResponse
 */
async function setDefaultOlapComputeGroup(request: SetDefaultOlapComputeGroupRequest): SetDefaultOlapComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultOlapComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model SwitchLSQLV3MySQLServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionType: int32(name='ActionType', description='The type of the operation. Valid value:

*   1: enables the MySQL compatibility feature.
*   0: disables the MySQL compatibility feature.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The cluster ID.

This parameter is required.', example='ld-bp1o3y0yme2i2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchLSQLV3MySQLServiceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1556DCB0-043A-4444-8BD9-CF4A68E7EE64'),
}

model SwitchLSQLV3MySQLServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchLSQLV3MySQLServiceResponseBody(name='body'),
}

/**
  * @description Prerequisites
  * *   The LindormTable version of your instance is 2.6.0 or later.
  * *   The LindormTable of your instance supports LindormSQL V3. The value of the EnableLsqlVersionV3 parameter in the response of the GetLindormInstance operation is true for Lindorm instances purchased after Oct 24, 2023, which indicates that LindormSQL is supported by these instances by default. If you want to enable LindormSQL for instances purchased before Oct 24, 2023, contact the on-duty technical support.
  * You can enable the MySQL compatibility feature for a Lindorm instance only when the instance meets the preceding requirements.
  * @param request  the request parameters of SwitchLSQLV3MySQLService  SwitchLSQLV3MySQLServiceRequest
  * @return SwitchLSQLV3MySQLServiceResponse
 */
async function switchLSQLV3MySQLService(request: SwitchLSQLV3MySQLServiceRequest): SwitchLSQLV3MySQLServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchLSQLV3MySQLService', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances you want to associate tags with are located. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The list of resource IDs.

This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.

This parameter is required.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The key of the tag that you want to associate with the resource.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.

This parameter is required.', example='test'),
      value?: string(name='Value', description='The value of the tag that you want to associate with the resource.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The tags that you want to associate with the resource.

This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F23D50C-400C-592C-9486-9D1E10179065'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  all?: boolean(name='All', description='Specifies whether to remove all tags from the instances. Valid values:

*   **true**: Remove all tags from the instances.
*   **false**: Do not remove all tags from the instances.

>  The default value of this parameter is false.



*   If you specify this parameter together with the TagKey parameter, this parameter does not take effect.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of instances.

This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.

This parameter is required.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The list of keys of the tags that you want to remove.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CACBBCE-7519-545C-8695-86D4F09CED7E'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @description If a tag is not added to any Lindorm instance, it is deleted.
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceIpWhiteListRequest {
  regionId?: string(name='RegionId', position='Host'),
  delete?: boolean(name='Delete', description='Specifies whether to clear all IP addresses and CIDR blocks in the whitelist.', example='false', position='Query'),
  groupName?: string(name='GroupName', description='The name of the IP whitelist. Default value: user.', example='test_group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance for which you want to configure a whitelist. You can call the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426069.html) operation to obtain the ID.

This parameter is required.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityIpList: string(name='SecurityIpList', description='The IP addresses or CIDR blocks that you want to add to the whitelist.

>  If you add 127.0.0.1 to the whitelist, all IP addresses cannot be used to access the Lindorm instance. If you add the CIDR block 192.168.0.0/24 to the whitelist, you can use all IP addresses in the CIDR block to access the Lindorm instance. Separate multiple IP addresses or CIDR blocks with commas (,).

This parameter is required.', example='106.11.XX.XX/24', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{"AuthAction":"xxx","AuthPrincipalDisplayName":"222","AuthPrincipalOwnerId":"111","AuthPrincipalType":"SubUser",,"NoPermissionType":"ImplicitDeny","PolicyType":"AccountLevelIdentityBasedPolicy","EncodedDiagnosticMessage":"xxxxxx"}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4944539D-D27C-458D-95F1-2DCEB5E0EED5'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceIpWhiteList  UpdateInstanceIpWhiteListRequest
  * @return UpdateInstanceIpWhiteListResponse
 */
async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceSecurityGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityGroups: string(name='SecurityGroups', description='This parameter is required.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateInstanceSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceSecurityGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceSecurityGroups  UpdateInstanceSecurityGroupsRequest
  * @return UpdateInstanceSecurityGroupsResponse
 */
async function updateInstanceSecurityGroups(request: UpdateInstanceSecurityGroupsRequest): UpdateInstanceSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLdpsComputeGroupRequest {
  groupName: string(name='GroupName', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  properties?: string(name='Properties', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateLdpsComputeGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model UpdateLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLdpsComputeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLdpsComputeGroup  UpdateLdpsComputeGroupRequest
  * @return UpdateLdpsComputeGroupResponse
 */
async function updateLdpsComputeGroup(request: UpdateLdpsComputeGroupRequest): UpdateLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLindormV2InstanceParameterRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  parameterKey: string(name='ParameterKey', description='This parameter is required.', position='Query'),
  parameterValue: string(name='ParameterValue', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  updateType?: string(name='UpdateType', position='Query'),
}

model UpdateLindormV2InstanceParameterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model UpdateLindormV2InstanceParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLindormV2InstanceParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLindormV2InstanceParameter  UpdateLindormV2InstanceParameterRequest
  * @return UpdateLindormV2InstanceParameterResponse
 */
async function updateLindormV2InstanceParameter(request: UpdateLindormV2InstanceParameterRequest): UpdateLindormV2InstanceParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLindormV2InstanceParameter', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeLindormInstanceRequest {
  clusterStorage?: int32(name='ClusterStorage', description='The storage capacity of the instance after it is upgraded. Unit: GB. Valid values: **480** to **1017600**.', example='480', position='Query'),
  coldStorage?: int32(name='ColdStorage', description='The cold storage capacity of the instance after it is upgraded. Unit: GB. Valid values: **800** to **1000000**.', example='800', position='Query'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='The storage capacity of a single core node in the instance after the instance upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. Unit: GB. Valid values: 400 to 64000. **This parameter is optional**.', example='400', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', description='The number of LindormDFS nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', description='The specification of LindormDFS nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to upgrade, scale up, or enable cold storage. You can call the [GetLindormInstanceList](https://help.aliyun.com/document_detail/426069.html) operation to query the instance ID.

This parameter is required.', example='ld-bp1o3y0yme2i2****', position='Query'),
  lindormNum?: int32(name='LindormNum', description='The number of LindormTable nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **90**.

> This parameter must be specified together with the LindormSpec parameter.', example='2', position='Query'),
  lindormSpec?: string(name='LindormSpec', description='The specification of LindormTable nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.', example='lindorm.c.xlarge', position='Query'),
  logNum?: int32(name='LogNum', description='The number of log nodes in the instance after the instance is upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. **This parameter is optional**.', example='4', position='Query'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of a single log node in the instance after the instance upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. **This parameter is optional**.', example='400', position='Query'),
  logSpec?: string(name='LogSpec', description='The specification of log nodes in the instance after the instance is upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. Valid values:

*   **lindorm.sn1.large**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.sn1.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.

**This parameter is optional**.', example='lindorm.sn1.large', position='Query'),
  ltsCoreNum?: int32(name='LtsCoreNum', description='The number of LTS nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **50**.', example='2', position='Query'),
  ltsCoreSpec?: string(name='LtsCoreSpec', description='The specification of Lindorm Tunnel Service (LTS) nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance that you want to upgrade, scale up, or enable cold storage is located. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/426062.html) operation to query the region ID.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', description='The number of LindormSearch nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  solrSpec?: string(name='SolrSpec', description='The specification of LindormSearch nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  streamNum?: int32(name='StreamNum', description='The number of LindormStream nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  streamSpec?: string(name='StreamSpec', description='The specification of LindormStream nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  tsdbNum?: int32(name='TsdbNum', description='The number of LindormTSDB nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **24**.', example='2', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', description='The specification of LindormTSDB nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  upgradeType: string(name='UpgradeType', description='The upgrade type of the operation. For more information about upgrade types, see the UpgradeType parameters section.

This parameter is required.', example='upgrade-cold-storage', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone in which the instance that you want to upgrade, scale up, or enable cold storage is located. You can call the [GetLindormInstance](https://help.aliyun.com/document_detail/426067.html) operation to query the zone ID.

This parameter is required.', example='cn-shanghai-f', position='Query'),
}

model UpgradeLindormInstanceResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A7D4F9D-AA26-4E15-A2B1-3E4792C6****'),
}

model UpgradeLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeLindormInstanceResponseBody(name='body'),
}

/**
  * @description For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine typpes](https://help.aliyun.com/document_detail/181971.html) and [Select storage types](https://help.aliyun.com/document_detail/174643.html).
  * @param request  the request parameters of UpgradeLindormInstance  UpgradeLindormInstanceRequest
  * @return UpgradeLindormInstanceResponse
 */
async function upgradeLindormInstance(request: UpgradeLindormInstanceRequest): UpgradeLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeLindormV2StreamEngineRequest {
  regionId?: string(name='RegionId', position='Host'),
  customConfig?: string(name='CustomConfig', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  quantity: int32(name='Quantity', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  resourceGroupName?: string(name='ResourceGroupName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  spec: string(name='Spec', description='This parameter is required.', position='Query'),
  specId: string(name='SpecId', description='This parameter is required.', position='Query'),
  upgradeType: string(name='UpgradeType', description='This parameter is required.', position='Query'),
}

model UpgradeLindormV2StreamEngineResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId'),
}

model UpgradeLindormV2StreamEngineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeLindormV2StreamEngineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeLindormV2StreamEngine  UpgradeLindormV2StreamEngineRequest
  * @return UpgradeLindormV2StreamEngineResponse
 */
async function upgradeLindormV2StreamEngine(request: UpgradeLindormV2StreamEngineRequest): UpgradeLindormV2StreamEngineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeLindormV2StreamEngine', 'POST', '/', 'json', false, 'json', request);
}

