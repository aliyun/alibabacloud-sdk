/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hitsdb';
  @version = '2020-06-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateLindormInstanceRequest {
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', example='vsw-uf6664pqjawb87k36****', position='Query'),
  arbiterZoneId?: string(name='ArbiterZoneId', example='cn-shanghai-g', position='Query'),
  archVersion?: string(name='ArchVersion', example='2.0', position='Query'),
  coldStorage?: int32(name='ColdStorage', example='800', position='Query'),
  coreSingleStorage?: int32(name='CoreSingleStorage', example='400', position='Query'),
  coreSpec?: string(name='CoreSpec', example='lindorm.i2.xlarge', position='Query'),
  diskCategory: string(name='DiskCategory', example='cloud_efficiency', position='Query'),
  duration?: string(name='Duration', example='1', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', example='2', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', example='lindorm.c.xlarge', position='Query'),
  instanceAlias?: string(name='InstanceAlias', example='lindorm_test', position='Query'),
  instanceStorage?: string(name='InstanceStorage', example='480', position='Query'),
  lindormNum?: int32(name='LindormNum', example='2', position='Query'),
  lindormSpec?: string(name='LindormSpec', example='lindorm.c.xlarge', position='Query'),
  logDiskCategory?: string(name='LogDiskCategory', example='cloud_ssd', position='Query'),
  logNum?: int32(name='LogNum', example='4', position='Query'),
  logSingleStorage?: int32(name='LogSingleStorage', example='400', position='Query'),
  logSpec?: string(name='LogSpec', example='lindorm.sn1.large', position='Query'),
  multiZoneCombination?: string(name='MultiZoneCombination', example='cn-shanghai-efg-aliyun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', example='POSTPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-uf6fdqa7c0pipnqzq****', position='Query'),
  primaryZoneId?: string(name='PrimaryZoneId', example='cn-shanghai-e', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2i6weeb4nfii', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', example='2', position='Query'),
  solrSpec?: string(name='SolrSpec', example='lindorm.g.xlarge', position='Query'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-2zec0kcn08cgdtr6****', position='Query'),
  standbyZoneId?: string(name='StandbyZoneId', example='cn-shanghai-f', position='Query'),
  streamNum?: int32(name='StreamNum', description='实例的流引擎节点数量，取值：**0**~**60**。', example='2', position='Query'),
  streamSpec?: string(name='StreamSpec', description='实例的流引擎节点规格，取值：

- **lindorm.g.xlarge**：表示4核16GB（独享规格）。
- **lindorm.c.2xlarge**：表示8核16GB（独享规格）。
- **lindorm.g.2xlarge**：表示8核32GB（独享规格）。
- **lindorm.c.4xlarge**：表示16核32GB（独享规格）。
- **lindorm.g.4xlarge**：表示16核64GB（独享规格）。
- **lindorm.c.8xlarge**：表示32核64GB（独享规格）。
- **lindorm.g.8xlarge**：表示32核128GB（独享规格）。', example='lindorm.g.xlarge', position='Query'),
  tsdbNum?: int32(name='TsdbNum', example='2', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', example='lindorm.g.xlarge', position='Query'),
  VPCId: string(name='VPCId', example='vpc-bp1nme44gek34slfc****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp1e7clcw529l773d****', position='Query'),
  zoneId: string(name='ZoneId', example='cn-shanghai-f', position='Query'),
}

model CreateLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='ld-bp1o3y0yme2i2****'),
  orderId?: long(name='OrderId', example='111111111111111'),
  requestId?: string(name='RequestId', example='93BE8227-3406-4D7A-883D-9A421D42****'),
}

model CreateLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLindormInstanceResponseBody(name='body'),
}

async function createLindormInstance(request: CreateLindormInstanceRequest): CreateLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  zoneId?: string(name='ZoneId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the region.', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', description='Queries the regions where Lindorm is available.', example='hitsdb.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions', description='China (Hangzhou)'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73F6E6DA-9AE5-5548-9E07-761A554DAF2E'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceIpWhiteListRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupName?: string(name='GroupName', description='The name of the group to which the instance belongs. The group name can contain only letters, digits, and underscores (\\_).', example='test_group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance whose whitelist you want to query. You can call the [GetLindormInstanceList](~~426068~~) operation to query the instance ID.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetInstanceIpWhiteListResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance.', example='ld-bp1z3506imz2f****'),
  ipList?: [ string ](name='IpList'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D1F6F4D-9203-53E7-84E9-5376B4657E63'),
}

model GetInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceIpWhiteListResponseBody(name='body'),
}

async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsResourceCostRequest {
  endTime?: long(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetLdpsResourceCostResponseBody = {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totalResource?: long(name='TotalResource'),
}

model GetLdpsResourceCostResponse = {
  headers: map[string]string(name='headers'),
  body: GetLdpsResourceCostResponseBody(name='body'),
}

async function getLdpsResourceCost(request: GetLdpsResourceCostRequest): GetLdpsResourceCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsResourceCost', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The disk type of the log nodes. This parameter is returned only for multi-zone instances. Valid values:

*   **cloud_efficiency**: The nodes use the Standard type of storage.
*   **cloud_ssd**: The nodes use the Performance type of storage.', example='ld-bp1o3y0yme2i2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceResponseBody = {
  aliUid?: long(name='AliUid'),
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', example='vsw-uf6664pqjawb87k36****'),
  arbiterZoneId?: string(name='ArbiterZoneId', example='cn-shanghai-g'),
  archVersion?: string(name='ArchVersion'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  coldStorage?: int32(name='ColdStorage'),
  coreDiskCategory?: string(name='CoreDiskCategory', example='cloud_efficiency'),
  coreNum?: int32(name='CoreNum', example='4'),
  coreSingleStorage?: int32(name='CoreSingleStorage', example='400'),
  coreSpec?: string(name='CoreSpec', example='lindorm.g.xlarge'),
  createMilliseconds?: long(name='CreateMilliseconds', example='1627290664000'),
  createTime?: string(name='CreateTime', description='The storage capacity of the disk of a single log node. This parameter is returned only for multi-zone instances.', example='2021-07-26 17:10:26'),
  deletionProtection?: string(name='DeletionProtection', example='false'),
  diskCategory?: string(name='DiskCategory', example='cloud_efficiency'),
  diskThreshold?: string(name='DiskThreshold', example='80%'),
  diskUsage?: string(name='DiskUsage', example='0.0%'),
  enableBlob?: boolean(name='EnableBlob'),
  enableCdc?: boolean(name='EnableCdc', example='false'),
  enableCompute?: boolean(name='EnableCompute', example='true'),
  enableKms?: boolean(name='EnableKms', example='false'),
  enableLTS?: boolean(name='EnableLTS'),
  enableMLCtrl?: boolean(name='EnableMLCtrl'),
  enableSSL?: boolean(name='EnableSSL', example='false'),
  enableShs?: boolean(name='EnableShs', example='true'),
  enableStream?: boolean(name='EnableStream', example='true'),
  engineList?: [ 
    {
      coreCount?: string(name='CoreCount', example='2'),
      cpuCount?: string(name='CpuCount', example='4'),
      engine?: string(name='Engine', example='lindorm'),
      isLastVersion?: boolean(name='IsLastVersion', example='false'),
      latestVersion?: string(name='LatestVersion', example='2.2.19.2'),
      memorySize?: string(name='MemorySize'),
      version?: string(name='Version', example='2.2.3'),
    }
  ](name='EngineList'),
  engineType?: int32(name='EngineType', example='15'),
  expireTime?: string(name='ExpireTime', example='2021-08-27 00:00:00'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds', example='1629993600000'),
  instanceAlias?: string(name='InstanceAlias', example='test0726'),
  instanceId?: string(name='InstanceId', example='ld-bp1o3y0yme2i2****'),
  instanceStatus?: string(name='InstanceStatus', example='ACTIVATION'),
  instanceStorage?: string(name='InstanceStorage', example='480'),
  logDiskCategory?: string(name='LogDiskCategory', example='cloud_ssd'),
  logNum?: int32(name='LogNum', example='4'),
  logSingleStorage?: int32(name='LogSingleStorage'),
  logSpec?: string(name='LogSpec', example='lindorm.sn1.large'),
  maintainEndTime?: string(name='MaintainEndTime', example='20:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', example='00:00Z'),
  multiZoneCombination?: string(name='MultiZoneCombination', example='cn-shanghai-efg-aliyun'),
  networkType?: string(name='NetworkType', example='vpc'),
  payType?: string(name='PayType', description='400', example='POSTPAY'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-uf6fdqa7c0pipnqzq****'),
  primaryZoneId?: string(name='PrimaryZoneId', example='cn-shanghai-e'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='633F1BE4-C8DA-5744-8FDF-A3075C3FE37F'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceType?: string(name='ServiceType', example='lindorm'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-2zec0kcn08cgdtr6****'),
  standbyZoneId?: string(name='StandbyZoneId', example='cn-shanghai-f'),
  vpcId?: string(name='VpcId', description='The type of the log nodes. This parameter is returned only for multi-zone instances.', example='vpc-bp1n3i15v90el48nx****'),
  vswitchId?: string(name='VswitchId', description='The number of the log nodes. This parameter is returned only for multi-zone instances.', example='vsw-bp1vbjzmod9q3l9eo****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model GetLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceResponseBody(name='body'),
}

async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceEngineListRequest {
  instanceId: string(name='InstanceId', example='ld-bp1nq34mv3smk****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceEngineListResponseBody = {
  engineList?: [ 
    {
      engineType?: string(name='EngineType', example='lindorm'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType', example='1'),
          connectionString?: string(name='ConnectionString', example='ld-bp1nq34mv3smk****-proxy-lindorm.lindorm.rds.aliyuncs.com'),
          netType?: string(name='NetType', example='2'),
          port?: int32(name='Port', example='30020'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  instanceId?: string(name='InstanceId', example='ld-bp1nq34mv3smk****'),
  requestId?: string(name='RequestId', example='B496BA0E-520C-59FC-BA04-196D8F3B07EF'),
}

model GetLindormInstanceEngineListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceEngineListResponseBody(name='body'),
}

async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceEngineList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceListRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  queryStr?: string(name='QueryStr', example='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek3b63arvg27vi', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceType?: string(name='ServiceType', example='lindorm', position='Query'),
  supportEngine?: int32(name='SupportEngine', example='15', minimum=-1, maximum=7, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='2.2.18'),
    }
  ](name='Tag', position='Query'),
}

model GetLindormInstanceListResponseBody = {
  instanceList?: [ 
    {
      aliUid?: long(name='AliUid', example='164901546557****'),
      createMilliseconds?: long(name='CreateMilliseconds', example='1631772842000'),
      createTime?: string(name='CreateTime', example='2021-09-16 14:13:13'),
      enableCompute?: boolean(name='EnableCompute', example='true'),
      enableStream?: boolean(name='EnableStream', example='true'),
      engineType?: string(name='EngineType', example='15'),
      expireTime?: string(name='ExpireTime', example='2022-04-26 00:00:00'),
      expiredMilliseconds?: long(name='ExpiredMilliseconds', example='1650902400000'),
      instanceAlias?: string(name='InstanceAlias', example='test'),
      instanceId?: string(name='InstanceId', example='ld-bp17pwu1541ia****'),
      instanceStatus?: string(name='InstanceStatus', example='ACTIVATION'),
      instanceStorage?: string(name='InstanceStorage', example='960'),
      networkType?: string(name='NetworkType', example='vpc'),
      payType?: string(name='PayType', example='PREPAY'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzledqeat****'),
      serviceType?: string(name='ServiceType', example='lindorm'),
      tags?: [ 
        {
          key?: string(name='Key', example='test'),
          value?: string(name='Value', example='2.2.18'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp1n3i15v90el48nx****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='InstanceList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='1CA1FAFD-E8DC-51C2-AA7E-CA6E2D049BA0'),
  total?: int32(name='Total', example='1'),
}

model GetLindormInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceListResponseBody(name='body'),
}

async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to start the next query to retrieve more results.

> This parameter is not required in the first query. If not all results are returned in one query, you can pass in the **NextToken** value returned for the query to perform the next query.', example='212db86****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances whose tags you want to query are located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of the tags associated with the instances you want to query.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The values of the tags associated with the instances you want to query.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The list of tags associated with the instances you want to query.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.

> If not all results are returned in the first query, this parameter is returned. You can pass in the returned value of this parameter for the next query.', example='212db86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='05CB115C-91CB-529F-9098-50C1F6CB3BD3'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource, which is the ID of the instance.', example='ld-bp17j28j2y7pm****'),
      resourceType?: string(name='ResourceType', description='The type of the resources. The returned value is fixed to **ALIYUN::HITSDB::INSTANCE**.', example='ALIYUN::HITSDB::INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag associated with the instance.', example='test'),
      tagValue?: string(name='TagValue', description='The value of the tag associated with the instance.', example='2.2.8'),
    }
  ](name='TagResources', description='The list of resources.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstancePayTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  duration?: int32(name='Duration', description='The subscription duration of the instance. The parameter is required if the instance is an subscription instance.

*   If PricingCycle is set to Month, set this parameter to an integer that ranges from 1 to 9.
*   If PricingCycle is set to Year, set this parameter to an integer that ranges from 1 to 3.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.', example='POSTPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The unit of the subscription duration for the instance. Valid values:

*   Month
*   Year', example='Month', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstancePayTypeResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='211662251220224'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='587BCA54-50DA-4885-ADE9-80A848339151'),
}

model ModifyInstancePayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstancePayTypeResponseBody(name='body'),
}

/**
  * You can call this operation to change the billing method of an instance to subscription or pay-as-you-go.
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.aliyun.com/price/product?spm=openapi-amp.newDocPublishment.0.0.6345281fu63xJ3#/hitsdb/detail/hitsdb_lindormpre_public_cn) of Lindorm.
  *
 */
async function modifyInstancePayType(request: ModifyInstancePayTypeRequest): ModifyInstancePayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstancePayType', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseLindormInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  immediately?: boolean(name='Immediately', position='Query'),
  instanceId: string(name='InstanceId', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseLindormInstanceResponseBody = {
  requestId?: string(name='RequestId', example='F67BFFF3-F5C2-45B5-9C28-6E4A1E51****'),
}

model ReleaseLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseLindormInstanceResponseBody(name='body'),
}

async function releaseLindormInstance(request: ReleaseLindormInstanceRequest): ReleaseLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewLindormInstanceRequest {
  duration: int32(name='Duration', example='1', minimum=1, maximum=9, position='Query'),
  instanceId: string(name='InstanceId', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pricingCycle: string(name='PricingCycle', example='Month', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RenewLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', example='213465921640411'),
  requestId?: string(name='RequestId', example='1556DCB0-043A-4444-8BD9-CF4A68E7EE64'),
}

model RenewLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewLindormInstanceResponseBody(name='body'),
}

/**
  * The ID of the order. You can obtain an order ID on the Orders page in Alibaba Cloud User Center.
  *
 */
async function renewLindormInstance(request: RenewLindormInstanceRequest): RenewLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances you want to associate tags with are located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The list of resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The key of the tag that you want to associate with the resource.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The value of the tag that you want to associate with the resource.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The tags that you want to associate with the resource.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F23D50C-400C-592C-9486-9D1E10179065'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  regionId: string(name='RegionId', position='Host'),
  all?: boolean(name='All', description='Specifies whether to remove all tags from the instance. Valid values:

*   **true**: Remove all tags from the instances.
*   **false**: Do not remove all tags from the instances.

> 

*   The default value of this parameter is false.

*   If you specify the TagKey parameter together with this parameter, this parameter does not take effect.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of instances.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The list of keys of the tags that you want to remove.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CACBBCE-7519-545C-8695-86D4F09CED7E'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceIpWhiteListRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupName?: string(name='GroupName', description='The name of the group to which the instance belongs. The group name can contain only letters, digits, and underscores (\\_).', example='test_group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance for which you want to configure a whitelist. You can call the [GetLindormInstanceList](~~426069~~) operation to obtain the ID.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityIpList: string(name='SecurityIpList', description='The IP addresses that you want to add to the whitelist. For example, if you add 192.168.0.0/24 to the whitelist, you can use all IP addresses within this CIDR block to access the Lindorm instance.

> If you add 127.0.0.1 to the whitelist, all IP addresses cannot be used to access the Lindorm instance. Separate multiple IP addresses or CIDR blocks with commas (,).', example='106.11.XX.XX/24', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4944539D-D27C-458D-95F1-2DCEB5E0EED5'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

/**
  * ***
  *
 */
async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeLindormInstanceRequest {
  clusterStorage?: int32(name='ClusterStorage', example='480', position='Query'),
  coldStorage?: int32(name='ColdStorage', example='800', position='Query'),
  coreSingleStorage?: int32(name='CoreSingleStorage', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', example='2', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', example='lindorm.g.xlarge', position='Query'),
  instanceId: string(name='InstanceId', example='ld-bp1o3y0yme2i2****', position='Query'),
  lindormNum?: int32(name='LindormNum', example='2', position='Query'),
  lindormSpec?: string(name='LindormSpec', example='lindorm.c.xlarge', position='Query'),
  logNum?: int32(name='LogNum', example='4', position='Query'),
  logSingleStorage?: int32(name='LogSingleStorage', position='Query'),
  logSpec?: string(name='LogSpec', example='lindorm.sn1.large', position='Query'),
  ltsCoreNum?: int32(name='LtsCoreNum', example='2', position='Query'),
  ltsCoreSpec?: string(name='LtsCoreSpec', example='lindorm.g.xlarge', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  phoenixCoreNum?: int32(name='PhoenixCoreNum', example='2', position='Query'),
  phoenixCoreSpec?: string(name='PhoenixCoreSpec', example='lindorm.c.xlarge', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', example='2', position='Query'),
  solrSpec?: string(name='SolrSpec', example='lindorm.g.xlarge', position='Query'),
  streamNum?: int32(name='StreamNum', description='变配后实例的流引擎节点数量，取值：**0**~**90**。', example='2', position='Query'),
  streamSpec?: string(name='StreamSpec', description='变配后实例的流引擎节点规格，取值：

- **lindorm.c.2xlarge**：表示8核16GB（独享规格）。
- **lindorm.c.4xlarge**：表示16核32GB（独享规格）。
- **lindorm.c.8xlarge**：表示32核64GB（独享规格）。', example='lindorm.g.xlarge', position='Query'),
  tsdbNum?: int32(name='TsdbNum', example='2', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', example='lindorm.g.xlarge', position='Query'),
  upgradeType: string(name='UpgradeType', example='upgrade-cold-storage', position='Query'),
  zoneId: string(name='ZoneId', example='cn-shanghai-f', position='Query'),
}

model UpgradeLindormInstanceResponseBody = {
  orderId?: long(name='OrderId', example='111111111111111'),
  requestId?: string(name='RequestId', example='2A7D4F9D-AA26-4E15-A2B1-3E4792C6****'),
}

model UpgradeLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeLindormInstanceResponseBody(name='body'),
}

/**
  * Upgrades, scales up, or enable cold storage for a Lindorm instance.
  *
 */
async function upgradeLindormInstance(request: UpgradeLindormInstanceRequest): UpgradeLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

