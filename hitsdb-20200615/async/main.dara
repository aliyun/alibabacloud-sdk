/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hitsdb';
  @version = '2020-06-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateLdpsComputeGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  properties?: string(name='Properties', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateLdpsComputeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLdpsComputeGroupResponseBody(name='body'),
}

async function createLdpsComputeGroup(request: CreateLdpsComputeGroupRequest): CreateLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateLdpsNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateLdpsNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLdpsNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLdpsNamespaceResponseBody(name='body'),
}

async function createLdpsNamespace(request: CreateLdpsNamespaceRequest): CreateLdpsNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLdpsNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateLindormInstanceRequest {
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', description='The ID of the vSwitch that is specified for the zone for the coordinate node of the instance. The vSwitch must be deployed in the zone specified by the ArbiterZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-uf6664pqjawb87k36****', position='Query'),
  arbiterZoneId?: string(name='ArbiterZoneId', description='The ID of the zone for the coordinate node of the instance. **This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-g', position='Query'),
  archVersion?: string(name='ArchVersion', description='The architecture of the instance. Valid values:

*   **1.0**: The instance that you want to create is a single-zone instance.
*   **2.0**: The instance that you want to create is a multi-zone instance.

By default, the value of this parameter is 1.0. To create a multi-zone instance, set this parameter to 2.0. **This parameter is required if you want to create a multi-zone instance**.', example='2.0', position='Query'),
  autoRenewDuration?: string(name='AutoRenewDuration', position='Query'),
  autoRenewal?: boolean(name='AutoRenewal', position='Query'),
  coldStorage?: int32(name='ColdStorage', description='The cold storage capacity of the instance. By default, if you leave this parameter unspecified, cold storage is not enabled for the instance. Unit: GB. Valid values: **800** to **1000000**.', example='800', position='Query'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='The storage capacity of the disk of a single core node. Valid values: 400 to 64000. Unit: GB. **This parameter is required if you want to create a multi-zone instance**.', example='400', position='Query'),
  coreSpec?: string(name='CoreSpec', description='The specification of the nodes in the instance if you set DiskCategory to local_ssd_pro or local_hdd_pro.

When DiskCategory is set to local_ssd_pro, you can set this parameter to the following values:

*   **lindorm.i2.xlarge**: Each node has 4 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.i2.2xlarge**: Each node has 8 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.i2.4xlarge**: Each node has 16 dedicated CPU cores and 128 GB of dedicated memory.
*   **lindorm.i2.8xlarge**: Each node has 32 dedicated CPU cores and 256 GB of dedicated memory.

When DiskCategory is set to local_hdd_pro, you can set this parameter to the following values:

*   **lindorm.d1.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.d1.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.d1.6xlarge**: Each node has 24 dedicated CPU cores and 96 GB of dedicated memory.', example='lindorm.i2.xlarge', position='Query'),
  diskCategory: string(name='DiskCategory', description='The storage type of the instance. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **capacity_cloud_storage**: This instance uses the Capacity type of storage.
*   **local_ssd_pro**: This instance uses local SSDs.
*   **local_hdd_pro**: This instance uses local HDDs.', example='cloud_efficiency', position='Query'),
  duration?: string(name='Duration', description='The subscription period of the instance. The valid values of this parameter depend on the value of the PricingCycle parameter.

*   If PricingCycle is set to **Month**, set this parameter to an integer that ranges from **1** to **9**.
*   If PricingCycle is set to **Year**, set this parameter to an integer that ranges from **1** to **3**.

> This parameter is available and required when the PayType parameter is set to **PREPAY**.', example='1', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', description='The number of LindormDFS nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **60**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **8**.', example='2', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', description='The specification of LindormDFS nodes in the instance. Set the value of this parameter to **lindorm.c.xlarge**, which indicates that each node has 4 dedicated CPU cores and 8 GB of dedicated memory.', example='lindorm.c.xlarge', position='Query'),
  instanceAlias?: string(name='InstanceAlias', description='The name of the instance that you want to create.', example='lindorm_test', position='Query'),
  instanceStorage?: string(name='InstanceStorage', description='The storage capacity of the instance you want to create. Unit: GB.', example='480', position='Query'),
  lindormNum?: int32(name='LindormNum', description='The number of LindormTable nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **90**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **400**.

**This parameter is required if you want to create a multi-zone instance**.  The valid values of this parameter range from 4 to 400 if you want to create a multi-zone instance.', example='2', position='Query'),
  lindormSpec?: string(name='LindormSpec', description='The specification of LindormTable nodes in the instance. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.', example='lindorm.c.xlarge', position='Query'),
  logDiskCategory?: string(name='LogDiskCategory', description='The disk type of the log nodes. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.

**This parameter is required if you want to create a multi-zone instance**.', example='cloud_ssd', position='Query'),
  logNum?: int32(name='LogNum', description='The number of the log nodes. Valid values: 4 to 400. **This parameter is required if you want to create a multi-zone instance**.', example='4', position='Query'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of the disk of a single log node. Valid values: 400 to 64000. Unit: GB. **This parameter is required if you want to create a multi-zone instance**.', example='400', position='Query'),
  logSpec?: string(name='LogSpec', description='The type of the log nodes. Valid values:

*   **lindorm.sn1.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.sn1.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.

**This parameter is required if you want to create a multi-zone instance**.', example='lindorm.sn1.large', position='Query'),
  multiZoneCombination?: string(name='MultiZoneCombination', description='The combinations of zones that are available for the multi-zone instance. You can go to the purchase page of Lindorm to view the supported zone combinations.

*   **ap-southeast-5abc-aliyun**: Zone A+B+C in the Indonesia (Jakarta) region.
*   **cn-hangzhou-ehi-aliyun**: Zone E+H+I in the China (Hangzhou) region.
*   **cn-beijing-acd-aliyun**: Zone A+C+D in the China (Beijing) region.
*   **ap-southeast-1-abc-aliyun**: Zone A+B+C in the Singapore region.
*   **cn-zhangjiakou-abc-aliyun**: Zone A+B+C in the China (Zhangjiakou) region.
*   **cn-shanghai-efg-aliyun**: Zone E+F+G in the China (Shanghai) region.
*   **cn-shanghai-abd-aliyun**: Zone A+B+D in the China (Shanghai) region.
*   **cn-hangzhou-bef-aliyun**: Zone B+E+F in the China (Hangzhou) region.
*   **cn-hangzhou-bce-aliyun**: Zone B+C+E in the China (Hangzhou) region.
*   **cn-beijing-fgh-aliyun**: Zone F+G+H in the China (Beijing) region.
*   **cn-shenzhen-abc-aliyun**: Zone A+B+C in the China (Shenzhen) region.

**This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-efg-aliyun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', description='The billing method of the instance you want to create. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.', example='POSTPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The period based on which you are charged for the instance. Valid values:

*   **Month**: You are charged for the instance on a monthly basis.
*   **Year**: You are charged for the instance on a yearly basis.

> This parameter is available and required when the PayType parameter is set to **PREPAY**.', example='Month', position='Query'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', description='The ID of the vSwitch that is specified for the secondary zone of the instance. The vSwitch must be deployed in the zone specified by the StandbyZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-uf6fdqa7c0pipnqzq****', position='Query'),
  primaryZoneId?: string(name='PrimaryZoneId', example='cn-shanghai-e', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance. You can call the [DescribeRegions](~~426062~~) operation to query the region in which you can create the instance.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Lindorm instance belongs.', example='rg-aek2i6weeb4nfii', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', description='The number of LindormSearch nodes in the instance. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  solrSpec?: string(name='SolrSpec', description='The specification of the LindormSearch nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', description='The ID of the vSwitch that is specified for the secondary zone of the instance. The vSwitch must be deployed in the zone specified by the StandbyZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-2zec0kcn08cgdtr6****', position='Query'),
  standbyZoneId?: string(name='StandbyZoneId', description='The ID of the secondary zone of the instance. **This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-f', position='Query'),
  streamNum?: int32(name='StreamNum', description='The number of LindormStream nodes in the instance. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  streamSpec?: string(name='StreamSpec', description='The specification of the LindormStream nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  tsdbNum?: int32(name='TsdbNum', description='The number of the LindormTSDB nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **24**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **32**.', example='2', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', description='The specification of the LindormTSDB nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  VPCId: string(name='VPCId', description='The ID of the VPC in which you want to create the instance.', example='vpc-bp1nme44gek34slfc****', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which you want the instance to connect.', example='vsw-bp1e7clcw529l773d****', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone in which you want to create the instance.', example='cn-shanghai-f', position='Query'),
}

model CreateLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance that is created.', example='ld-bp1o3y0yme2i2****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='93BE8227-3406-4D7A-883D-9A421D42****'),
}

model CreateLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLindormInstanceResponseBody(name='body'),
}

/**
  * You must select at least one engine when you create a Lindorm instance. For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine types](~~181971~~) and [Select storage types](~~174643~~).
  *
 */
async function createLindormInstance(request: CreateLindormInstanceRequest): CreateLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLdpsComputeGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLdpsComputeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLdpsComputeGroupResponseBody(name='body'),
}

async function deleteLdpsComputeGroup(request: DeleteLdpsComputeGroupRequest): DeleteLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  zoneId?: string(name='ZoneId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The display language of the regions in the returned results. Valid values:

*   **zh-CN** (default): Chinese.
*   **en-US**: English.', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint for the region.', example='hitsdb.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The regions supported by Lindorm.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73F6E6DA-9AE5-5548-9E07-761A554DAF2E'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model GetClientSourceIpRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetClientSourceIpResponseBody = {
  clientIp?: string(name='ClientIp'),
  requestId?: string(name='RequestId'),
}

model GetClientSourceIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientSourceIpResponseBody(name='body'),
}

async function getClientSourceIp(request: GetClientSourceIpRequest): GetClientSourceIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientSourceIp', 'POST', '/', 'json', false, 'json', request);
}

model GetEngineDefaultAuthRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetEngineDefaultAuthResponseBody = {
  authInfos?: [ 
    {
      engine?: string(name='Engine'),
      password?: string(name='Password'),
      username?: string(name='Username'),
    }
  ](name='AuthInfos'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GetEngineDefaultAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEngineDefaultAuthResponseBody(name='body'),
}

async function getEngineDefaultAuth(request: GetEngineDefaultAuthRequest): GetEngineDefaultAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEngineDefaultAuth', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceIpWhiteListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance whose whitelists you want to query. You can call the [GetLindormInstanceList](~~426068~~) operation to obtain the instance ID.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetInstanceIpWhiteListResponseBody = {
  groupList?: [ 
    {
      groupName?: string(name='GroupName', example='test'),
      securityIpList?: string(name='SecurityIpList', example='192.168.1.0/24'),
    }
  ](name='GroupList'),
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance.', example='ld-bp1z3506imz2f****'),
  ipList?: [ string ](name='IpList'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D1F6F4D-9203-53E7-84E9-5376B4657E63'),
}

model GetInstanceIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceIpWhiteListResponseBody(name='body'),
}

async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceSecurityGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetInstanceSecurityGroupsResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  securityGroups?: [ string ](name='SecurityGroups'),
}

model GetInstanceSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceSecurityGroupsResponseBody(name='body'),
}

async function getInstanceSecurityGroups(request: GetInstanceSecurityGroupsRequest): GetInstanceSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsComputeGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLdpsComputeGroupResponseBody = {
  groupName?: string(name='GroupName'),
  properties?: map[string]any(name='Properties'),
  requestId?: string(name='RequestId'),
}

model GetLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLdpsComputeGroupResponseBody(name='body'),
}

async function getLdpsComputeGroup(request: GetLdpsComputeGroupRequest): GetLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsNamespacedQuotaRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLdpsNamespacedQuotaResponseBody = {
  namespacedQuotas?: [ 
    {
      cpuAmount?: string(name='CpuAmount'),
      memoryAmount?: string(name='MemoryAmount'),
      name?: string(name='Name'),
      usedCpu?: string(name='UsedCpu'),
      usedMemory?: string(name='UsedMemory'),
    }
  ](name='NamespacedQuotas'),
  requestId?: string(name='RequestId'),
}

model GetLdpsNamespacedQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLdpsNamespacedQuotaResponseBody(name='body'),
}

async function getLdpsNamespacedQuota(request: GetLdpsNamespacedQuotaRequest): GetLdpsNamespacedQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsNamespacedQuota', 'POST', '/', 'json', false, 'json', request);
}

model GetLdpsResourceCostRequest {
  endTime?: long(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetLdpsResourceCostResponseBody = {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totalResource?: long(name='TotalResource'),
}

model GetLdpsResourceCostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLdpsResourceCostResponseBody(name='body'),
}

async function getLdpsResourceCost(request: GetLdpsResourceCostRequest): GetLdpsResourceCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLdpsResourceCost', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The disk type of the log nodes. This parameter is returned only for multi-zone instances. Valid values:

*   **cloud_efficiency**: The nodes use the Standard type of storage.
*   **cloud_ssd**: The nodes use the Performance type of storage.', example='ld-bp1o3y0yme2i2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceResponseBody = {
  aliUid?: long(name='AliUid', example='164901546557****'),
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', example='vsw-uf6664pqjawb87k36****'),
  arbiterZoneId?: string(name='ArbiterZoneId', example='cn-shanghai-g'),
  archVersion?: string(name='ArchVersion', description='部署架构，取值：

- **1.0**：单可用区。
- **2.0**：多可用区。', example='1.0'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  coldStorage?: int32(name='ColdStorage', description='The Capacity storage size of the instance.', example='0GB'),
  coreDiskCategory?: string(name='CoreDiskCategory', description='The disk type of the core nodes. This parameter is returned only for multi-zone instances. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **cloud_essd**: This instance uses ESSDs for storage.
*   **cloud_essd_pl0**: This instance uses PL0 ESSDs for storage.', example='cloud_efficiency'),
  coreNum?: int32(name='CoreNum', example='4'),
  coreSingleStorage?: int32(name='CoreSingleStorage', example='400'),
  coreSpec?: string(name='CoreSpec', example='lindorm.g.xlarge'),
  createMilliseconds?: long(name='CreateMilliseconds', example='1627290664000'),
  createTime?: string(name='CreateTime', description='The storage capacity of the disk of a single log node. This parameter is returned only for multi-zone instances.', example='2021-07-26 17:10:26'),
  deletionProtection?: string(name='DeletionProtection', example='false'),
  diskCategory?: string(name='DiskCategory', description='The storage type of the instance. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **cloud_essd**: This instance uses ESSDs for storage.
*   **cloud_essd_pl0**: This instance uses PL0 ESSDs for storage.
*   **capacity_cloud_storage**: This instance uses the Capacity type of storage.
*   **local_ssd_pro**: This instance uses local SSDs for storage.
*   **local_hdd_pro**: This instance uses local HDDs for storage.', example='cloud_efficiency'),
  diskThreshold?: string(name='DiskThreshold', example='80%'),
  diskUsage?: string(name='DiskUsage', example='0.0%'),
  enableBlob?: boolean(name='EnableBlob', example='true'),
  enableCdc?: boolean(name='EnableCdc', example='false'),
  enableCompute?: boolean(name='EnableCompute', example='true'),
  enableKms?: boolean(name='EnableKms', example='false'),
  enableLTS?: boolean(name='EnableLTS', description='实例是否开通LTS引擎，返回值：

- **true**：开通LTS引擎。
- **false**：未开通LTS引擎。', example='true'),
  enableLsqlVersionV3?: boolean(name='EnableLsqlVersionV3'),
  enableMLCtrl?: boolean(name='EnableMLCtrl'),
  enableSSL?: boolean(name='EnableSSL', example='false'),
  enableShs?: boolean(name='EnableShs', example='true'),
  enableStream?: boolean(name='EnableStream', example='true'),
  engineList?: [ 
    {
      coreCount?: string(name='CoreCount', example='2'),
      cpuCount?: string(name='CpuCount', example='4'),
      engine?: string(name='Engine', example='lindorm'),
      isLastVersion?: boolean(name='IsLastVersion', example='false'),
      latestVersion?: string(name='LatestVersion', example='2.2.19.2'),
      memorySize?: string(name='MemorySize', example='8GB'),
      version?: string(name='Version', example='2.2.3'),
    }
  ](name='EngineList', description='The latest version number of the engine.'),
  engineType?: int32(name='EngineType', example='15'),
  expireTime?: string(name='ExpireTime', example='2021-08-27 00:00:00'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds', example='1629993600000'),
  instanceAlias?: string(name='InstanceAlias', example='test0726'),
  instanceId?: string(name='InstanceId', example='ld-bp1o3y0yme2i2****'),
  instanceStatus?: string(name='InstanceStatus', description='The status of the instance. Valid values:

*   **CREATING**: The instance is being created.
*   **ACTIVATION**: The instance is running.
*   **COLD_EXPANDING**: The Capacity storage of the instance is being scaled up.
*   **MINOR_VERSION_TRANSING**: The minor version of the instance is being updated.
*   **RESIZING**: The nodes in the instance are being scaled up.
*   **SHRINKING**: The nodes in the instance are being scaled down.
*   **CLASS_CHANGING**: The specification of the instance is being changed.
*   **SSL_SWITCHING: SSL**: The SSL configurations of the instance are being changed.
*   **CDC_OPENING**: Data subscription is being enabled for the instance.
*   **TRANSFER**: The data of the instance is being transferred.
*   **DATABASE_TRANSFER**: The data of the instance is being transferred to databases.
*   **GUARD_CREATING**: A disaster recovery instance is being created.
*   **BACKUP_RECOVERING**: The data of the instance is being restored from a backup.
*   **DATABASE_IMPORTING**: Data is being imported to the instance.
*   **NET_MODIFYING**: The network configurations of the instance are being changed.
*   **NET_SWITCHING**: The network of the instance is being switched between a virtual private cloud (VPC) and the Internet.
*   **NET_CREATING**: The connection to the instance is being created.
*   **NET_DELETING**: The connection to the instance is being deleted.
*   **DELETING**: The instance is being deleted.
*   **RESTARTING**: The instance is restarting.
*   **LOCKED**: The instance is locked because it expires.', example='ACTIVATION'),
  instanceStorage?: string(name='InstanceStorage', example='480'),
  logDiskCategory?: string(name='LogDiskCategory', example='cloud_ssd'),
  logNum?: int32(name='LogNum', example='4'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of the disk of a single log node. This parameter is returned only for multi-zone instances.', example='400GB'),
  logSpec?: string(name='LogSpec', example='lindorm.sn1.large'),
  maintainEndTime?: string(name='MaintainEndTime', example='20:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', example='00:00Z'),
  multiZoneCombination?: string(name='MultiZoneCombination', example='cn-shanghai-efg-aliyun'),
  networkType?: string(name='NetworkType', example='vpc'),
  payType?: string(name='PayType', description='400', example='POSTPAY'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-uf6fdqa7c0pipnqzq****'),
  primaryZoneId?: string(name='PrimaryZoneId', example='cn-shanghai-e'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='633F1BE4-C8DA-5744-8FDF-A3075C3FE37F'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2wvd6oia****'),
  serviceType?: string(name='ServiceType', example='lindorm'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-2zec0kcn08cgdtr6****'),
  standbyZoneId?: string(name='StandbyZoneId', example='cn-shanghai-f'),
  vpcId?: string(name='VpcId', description='The type of the log nodes. This parameter is returned only for multi-zone instances.', example='vpc-bp1n3i15v90el48nx****'),
  vswitchId?: string(name='VswitchId', description='The number of the log nodes. This parameter is returned only for multi-zone instances.', example='vsw-bp1vbjzmod9q3l9eo****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model GetLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormInstanceResponseBody(name='body'),
}

async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceEngineListRequest {
  instanceId: string(name='InstanceId', example='ld-bp1nq34mv3smk****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetLindormInstanceEngineListResponseBody = {
  engineList?: [ 
    {
      engineType?: string(name='EngineType', example='lindorm'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType', example='1'),
          connectionString?: string(name='ConnectionString', example='ld-bp1nq34mv3smk****-proxy-lindorm.lindorm.rds.aliyuncs.com'),
          netType?: string(name='NetType', example='2'),
          port?: int32(name='Port', example='30020'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  instanceId?: string(name='InstanceId', example='ld-bp1nq34mv3smk****'),
  requestId?: string(name='RequestId', example='B496BA0E-520C-59FC-BA04-196D8F3B07EF'),
}

model GetLindormInstanceEngineListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormInstanceEngineListResponseBody(name='body'),
}

async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceEngineList', 'POST', '/', 'json', false, 'json', request);
}

model GetLindormInstanceListRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  queryStr?: string(name='QueryStr', example='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek3b63arvg27vi', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceType?: string(name='ServiceType', example='lindorm', position='Query'),
  supportEngine?: int32(name='SupportEngine', example='15', minimum=-1, maximum=7, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='2.2.18'),
    }
  ](name='Tag', position='Query'),
}

model GetLindormInstanceListResponseBody = {
  instanceList?: [ 
    {
      aliUid?: long(name='AliUid', example='164901546557****'),
      createMilliseconds?: long(name='CreateMilliseconds', example='1631772842000'),
      createTime?: string(name='CreateTime', example='2021-09-16 14:13:13'),
      enableCompute?: boolean(name='EnableCompute', example='true'),
      enableLts?: boolean(name='EnableLts'),
      enableMessage?: boolean(name='EnableMessage'),
      enableStream?: boolean(name='EnableStream', example='true'),
      enableVector?: boolean(name='EnableVector'),
      engineType?: string(name='EngineType', example='15'),
      expireTime?: string(name='ExpireTime', example='2022-04-26 00:00:00'),
      expiredMilliseconds?: long(name='ExpiredMilliseconds', example='1650902400000'),
      instanceAlias?: string(name='InstanceAlias', example='test'),
      instanceId?: string(name='InstanceId', example='ld-bp17pwu1541ia****'),
      instanceStatus?: string(name='InstanceStatus', example='ACTIVATION'),
      instanceStorage?: string(name='InstanceStorage', example='960'),
      networkType?: string(name='NetworkType', example='vpc'),
      payType?: string(name='PayType', example='PREPAY'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzledqeat****'),
      serviceType?: string(name='ServiceType', example='lindorm'),
      tags?: [ 
        {
          key?: string(name='Key', example='test'),
          value?: string(name='Value', example='2.2.18'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp1n3i15v90el48nx****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='InstanceList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='1CA1FAFD-E8DC-51C2-AA7E-CA6E2D049BA0'),
  total?: int32(name='Total', example='1'),
}

model GetLindormInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLindormInstanceListResponseBody(name='body'),
}

async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLindormInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model ListLdpsComputeGroupsRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ListLdpsComputeGroupsResponseBody = {
  groupList?: [ 
    {
      groupName?: string(name='GroupName'),
      properties?: map[string]any(name='Properties'),
    }
  ](name='GroupList'),
  requestId?: string(name='RequestId'),
}

model ListLdpsComputeGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLdpsComputeGroupsResponseBody(name='body'),
}

async function listLdpsComputeGroups(request: ListLdpsComputeGroupsRequest): ListLdpsComputeGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLdpsComputeGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to start the next query to retrieve more results.

> This parameter is not required in the first query. If not all results are returned in one query, you can pass in the **NextToken** value returned for the query to perform the next query.', example='212db86****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances whose tags you want to query are located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of the tags associated with the instances you want to query.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The values of the tags associated with the instances you want to query.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The list of tags associated with the instances you want to query.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.

> If not all results are returned in the first query, this parameter is returned. You can pass in the returned value of this parameter for the next query.', example='212db86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='05CB115C-91CB-529F-9098-50C1F6CB3BD3'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource, which is the ID of the instance.', example='ld-bp17j28j2y7pm****'),
      resourceType?: string(name='ResourceType', description='The type of the resources. The returned value is fixed to **ALIYUN::HITSDB::INSTANCE**.', example='ALIYUN::HITSDB::INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag associated with the instance.', example='test'),
      tagValue?: string(name='TagValue', description='The value of the tag associated with the instance.', example='2.2.8'),
    }
  ](name='TagResources', description='The list of resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstancePayTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  duration?: int32(name='Duration', description='The subscription duration of the instance. The parameter is required if the instance is an subscription instance.

*   If PricingCycle is set to Month, set this parameter to an integer that ranges from 1 to 9.
*   If PricingCycle is set to Year, set this parameter to an integer that ranges from 1 to 3.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.', example='POSTPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The unit of the subscription duration for the instance. Valid values:

*   Month
*   Year', example='Month', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstancePayTypeResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='211662251220224'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='587BCA54-50DA-4885-ADE9-80A848339151'),
}

model ModifyInstancePayTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstancePayTypeResponseBody(name='body'),
}

/**
  * You can call this operation to change the billing method of an instance to subscription or pay-as-you-go.
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.aliyun.com/price/product?spm=openapi-amp.newDocPublishment.0.0.6345281fu63xJ3#/hitsdb/detail/hitsdb_lindormpre_public_cn) of Lindorm.
  *
 */
async function modifyInstancePayType(request: ModifyInstancePayTypeRequest): ModifyInstancePayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstancePayType', 'POST', '/', 'json', false, 'json', request);
}

model OpenComputeEngineRequest {
  regionId?: string(name='RegionId', position='Host'),
  cpuLimit?: string(name='CpuLimit', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  memoryLimit?: string(name='MemoryLimit', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model OpenComputeEngineResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenComputeEngineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenComputeEngineResponseBody(name='body'),
}

async function openComputeEngine(request: OpenComputeEngineRequest): OpenComputeEngineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenComputeEngine', 'POST', '/', 'json', false, 'json', request);
}

model OpenComputePreCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  cpuLimit?: string(name='CpuLimit', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  memoryLimit?: string(name='MemoryLimit', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model OpenComputePreCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenComputePreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenComputePreCheckResponseBody(name='body'),
}

async function openComputePreCheck(request: OpenComputePreCheckRequest): OpenComputePreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenComputePreCheck', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseLindormInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  immediately?: boolean(name='Immediately', description='Specifies whether to release the instance immediately. If you set this parameter to false, data in the released instance is retained for seven days before it is completely deleted. If you set this parameter to true, data in the released instance is immediately deleted. The default value is false.', example='false', position='Query'),
  instanceId: string(name='InstanceId', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseLindormInstanceResponseBody = {
  requestId?: string(name='RequestId', example='F67BFFF3-F5C2-45B5-9C28-6E4A1E51****'),
}

model ReleaseLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseLindormInstanceResponseBody(name='body'),
}

async function releaseLindormInstance(request: ReleaseLindormInstanceRequest): ReleaseLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewLindormInstanceRequest {
  duration: int32(name='Duration', description='The subscription duration of the instance. The valid values of this parameter depend on the value of the PricingCycle parameter.

*   If PricingCycle is set to **Month**, set this parameter to an integer that ranges from **1** to **9**.
*   If PricingCycle is set to **Year**, set this parameter to an integer that ranges from **1** to **3**.', example='1', minimum=1, maximum=9, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to renew. You can call the [GetLindormInstanceList](~~426069~~) operation to obtain the instance ID.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  pricingCycle: string(name='PricingCycle', description='The period based on which you are charged for the instance. Valid values:

*   **Month**: You are charged for the instance based on months.
*   **Year**: You are charged for the instance based on years.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance that you want to renew is located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RenewLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order. You can obtain an order ID on the Orders page in Alibaba Cloud User Center.', example='213465921640411'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1556DCB0-043A-4444-8BD9-CF4A68E7EE64'),
}

model RenewLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewLindormInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to renew a subscription Lindorm instance for 1 to 9 months or 1 to 3 years.
  * Before you call this operation, make sure that you fully understand the billing methods and pricing of Lindorm.
  *
 */
async function renewLindormInstance(request: RenewLindormInstanceRequest): RenewLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

model RestartLdpsComputeGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RestartLdpsComputeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartLdpsComputeGroupResponseBody(name='body'),
}

async function restartLdpsComputeGroup(request: RestartLdpsComputeGroupRequest): RestartLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model SwitchLSQLV3MySQLServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionType: int32(name='ActionType', description='The type of the operation. Valid value:

*   1: enables the MySQL compatibility feature.
*   0: disables the MySQL compatibility feature.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The cluster ID.', example='ld-bp1o3y0yme2i2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchLSQLV3MySQLServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1556DCB0-043A-4444-8BD9-CF4A68E7EE64'),
}

model SwitchLSQLV3MySQLServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchLSQLV3MySQLServiceResponseBody(name='body'),
}

/**
  * Prerequisites
  * *   The LindormTable version of your instance is 2.6.0 or later.
  * *   The LindormTable of your instance supports LindormSQL V3. The value of the EnableLsqlVersionV3 parameter in the response of the GetLindormInstance operation is true for Lindorm instances purchased after Oct 24, 2023, which indicates that LindormSQL is supported by these instances by default. If you want to enable LindormSQL for instances purchased before Oct 24, 2023, contact the on-duty technical support.
  * You can enable the MySQL compatibility feature for a Lindorm instance only when the instance meets the preceding requirements.
  *
 */
async function switchLSQLV3MySQLService(request: SwitchLSQLV3MySQLServiceRequest): SwitchLSQLV3MySQLServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchLSQLV3MySQLService', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances you want to associate tags with are located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The list of resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The key of the tag that you want to associate with the resource.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The value of the tag that you want to associate with the resource.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The tags that you want to associate with the resource.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F23D50C-400C-592C-9486-9D1E10179065'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  all?: boolean(name='All', description='Specifies whether to remove all tags from the instance. Valid values:

*   **true**: Remove all tags from the instances.
*   **false**: Do not remove all tags from the instances.

> 

*   The default value of this parameter is false.

*   If you specify the TagKey parameter together with this parameter, this parameter does not take effect.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of instances.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The list of keys of the tags that you want to remove.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CACBBCE-7519-545C-8695-86D4F09CED7E'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceIpWhiteListRequest {
  regionId?: string(name='RegionId', position='Host'),
  delete?: boolean(name='Delete', description='Specifies whether to clear all IP addresses and CIDR blocks in the whitelist.', example='false', position='Query'),
  groupName?: string(name='GroupName', example='test_group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance for which you want to configure a whitelist. You can call the [GetLindormInstanceList](~~426069~~) operation to obtain the ID.', example='ld-bp1z3506imz2f****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityIpList: string(name='SecurityIpList', description='The IP addresses or CIDR blocks that you want to add to the whitelist.

>  If you add 127.0.0.1 to the whitelist, all IP addresses cannot be used to access the Lindorm instance. If you add the CIDR block 192.168.0.0/24 to the whitelist, you can use all IP addresses in the CIDR block to access the Lindorm instance. Separate multiple IP addresses or CIDR blocks with commas (,).', example='106.11.XX.XX/24', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4944539D-D27C-458D-95F1-2DCEB5E0EED5'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceSecurityGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityGroups: string(name='SecurityGroups', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateInstanceSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceSecurityGroupsResponseBody(name='body'),
}

async function updateInstanceSecurityGroups(request: UpdateInstanceSecurityGroupsRequest): UpdateInstanceSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLdpsComputeGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  properties?: string(name='Properties', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateLdpsComputeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLdpsComputeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLdpsComputeGroupResponseBody(name='body'),
}

async function updateLdpsComputeGroup(request: UpdateLdpsComputeGroupRequest): UpdateLdpsComputeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLdpsComputeGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeLindormInstanceRequest {
  clusterStorage?: int32(name='ClusterStorage', description='The storage capacity of the instance after it is upgraded. Unit: GB. Valid values: **480** to **1017600**.', example='480', position='Query'),
  coldStorage?: int32(name='ColdStorage', description='The cold storage capacity of the instance after it is upgraded. Unit: GB. Valid values: **800** to **1000000**.', example='800', position='Query'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='The storage capacity of a single core node in the instance after the instance upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. Unit: GB. Valid values: 400 to 64000. **This parameter is optional**.', example='400', position='Query'),
  filestoreNum?: int32(name='FilestoreNum', description='The number of LindormDFS nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  filestoreSpec?: string(name='FilestoreSpec', description='The specification of LindormDFS nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to upgrade, scale up, or enable cold storage. You can call the [GetLindormInstanceList](~~426069~~) operation to query the instance ID.', example='ld-bp1o3y0yme2i2****', position='Query'),
  lindormNum?: int32(name='LindormNum', description='The number of LindormTable nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **90**.

> This parameter must be specified together with the LindormSpec parameter.', example='2', position='Query'),
  lindormSpec?: string(name='LindormSpec', description='The specification of LindormTable nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.', example='lindorm.c.xlarge', position='Query'),
  logNum?: int32(name='LogNum', description='The number of log nodes in the instance after the instance is upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. **This parameter is optional**.', example='4', position='Query'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of a single log node in the instance after the instance upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. **This parameter is optional**.', example='400', position='Query'),
  logSpec?: string(name='LogSpec', description='The specification of log nodes in the instance after the instance is upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. Valid values:

*   **lindorm.sn1.large**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.sn1.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.

**This parameter is optional**.', example='lindorm.sn1.large', position='Query'),
  ltsCoreNum?: int32(name='LtsCoreNum', description='The number of LTS nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **50**.', example='2', position='Query'),
  ltsCoreSpec?: string(name='LtsCoreSpec', description='The specification of Lindorm Tunnel Service (LTS) nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance that you want to upgrade, scale up, or enable cold storage is located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=1, maximum=9223372036854775807, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  solrNum?: int32(name='SolrNum', description='The number of LindormSearch nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  solrSpec?: string(name='SolrSpec', description='The specification of LindormSearch nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  streamNum?: int32(name='StreamNum', description='The number of LindormStream nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2', position='Query'),
  streamSpec?: string(name='StreamSpec', description='The specification of LindormStream nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  tsdbNum?: int32(name='TsdbNum', description='The number of LindormTSDB nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **24**.', example='2', position='Query'),
  tsdbSpec?: string(name='TsdbSpec', description='The specification of LindormTSDB nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge', position='Query'),
  upgradeType: string(name='UpgradeType', description='The upgrade type of the operation. For more information about upgrade types, see the UpgradeType parameters section.', example='upgrade-cold-storage', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone in which the instance that you want to upgrade, scale up, or enable cold storage is located. You can call the [GetLindormInstance](~~426067~~) operation to query the zone ID.', example='cn-shanghai-f', position='Query'),
}

model UpgradeLindormInstanceResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A7D4F9D-AA26-4E15-A2B1-3E4792C6****'),
}

model UpgradeLindormInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeLindormInstanceResponseBody(name='body'),
}

/**
  * For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine typpes](~~181971~~) and [Select storage types](~~174643~~).
  *
 */
async function upgradeLindormInstance(request: UpgradeLindormInstanceRequest): UpgradeLindormInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeLindormInstance', 'POST', '/', 'json', false, 'json', request);
}

