/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'hitsdb.aliyuncs.com',
    cn-beijing = 'hitsdb.aliyuncs.com',
    cn-hangzhou = 'hitsdb.aliyuncs.com',
    cn-shanghai = 'hitsdb.aliyuncs.com',
    cn-shenzhen = 'hitsdb.aliyuncs.com',
    cn-hongkong = 'hitsdb.aliyuncs.com',
    ap-southeast-1 = 'hitsdb.aliyuncs.com',
    us-west-1 = 'hitsdb.aliyuncs.com',
    us-east-1 = 'hitsdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'hitsdb.aliyuncs.com',
    ap-northeast-2-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-gov-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'hitsdb.aliyuncs.com',
    cn-chengdu = 'hitsdb.aliyuncs.com',
    cn-edge-1 = 'hitsdb.aliyuncs.com',
    cn-fujian = 'hitsdb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-finance = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-test-306 = 'hitsdb.aliyuncs.com',
    cn-hongkong-finance-pop = 'hitsdb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'hitsdb.aliyuncs.com',
    cn-qingdao-nebula = 'hitsdb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-inner = 'hitsdb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-inner = 'hitsdb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'hitsdb.aliyuncs.com',
    cn-wuhan = 'hitsdb.aliyuncs.com',
    cn-wulanchabu = 'hitsdb.aliyuncs.com',
    cn-yushanfang = 'hitsdb.aliyuncs.com',
    cn-zhangbei = 'hitsdb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'hitsdb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'hitsdb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'hitsdb.aliyuncs.com',
    eu-west-1-oxs = 'hitsdb.aliyuncs.com',
    me-east-1 = 'hitsdb.aliyuncs.com',
    rus-west-1-pop = 'hitsdb.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('hitsdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2020-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model GetInstanceIpWhiteListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  groupName?: string(name='GroupName'),
}

model GetInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  ipList?: [ string ](name='IpList'),
}

model GetInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceIpWhiteListResponseBody(name='body'),
}

async function getInstanceIpWhiteListWithOptions(request: GetInstanceIpWhiteListRequest, runtime: Util.RuntimeOptions): GetInstanceIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceIpWhiteList', '2020-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceIpWhiteListWithOptions(request, runtime);
}

model GetLindormInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetLindormInstanceResponseBody = {
  engineList?: [ 
    {
      version?: string(name='Version'),
      cpuCount?: string(name='CpuCount'),
      coreCount?: string(name='CoreCount'),
      engine?: string(name='Engine'),
      memorySize?: string(name='MemorySize'),
      isLastVersion?: boolean(name='IsLastVersion'),
    }
  ](name='EngineList'),
  autoRenew?: boolean(name='AutoRenew'),
  diskUsage?: string(name='DiskUsage'),
  networkType?: string(name='NetworkType'),
  serviceType?: string(name='ServiceType'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceStatus?: string(name='InstanceStatus'),
  engineType?: int32(name='EngineType'),
  instanceStorage?: string(name='InstanceStorage'),
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
  instanceId?: string(name='InstanceId'),
  createTime?: string(name='CreateTime'),
  coldStorage?: int32(name='ColdStorage'),
  diskCategory?: string(name='DiskCategory'),
  payType?: string(name='PayType'),
  deletionProtection?: string(name='DeletionProtection'),
  vswitchId?: string(name='VswitchId'),
  vpcId?: string(name='VpcId'),
  regionId?: string(name='RegionId'),
  expireTime?: string(name='ExpireTime'),
  aliUid?: long(name='AliUid'),
}

model GetLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceResponseBody(name='body'),
}

async function getLindormInstanceWithOptions(request: GetLindormInstanceRequest, runtime: Util.RuntimeOptions): GetLindormInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLindormInstance', '2020-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceWithOptions(request, runtime);
}

model GetLindormInstanceEngineListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetLindormInstanceEngineListResponseBody = {
  engineList?: [ 
    {
      engineType?: string(name='EngineType'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: int32(name='Port'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model GetLindormInstanceEngineListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceEngineListResponseBody(name='body'),
}

async function getLindormInstanceEngineListWithOptions(request: GetLindormInstanceEngineListRequest, runtime: Util.RuntimeOptions): GetLindormInstanceEngineListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLindormInstanceEngineList', '2020-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceEngineListWithOptions(request, runtime);
}

model GetLindormInstanceListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  queryStr?: string(name='QueryStr'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  serviceType?: string(name='ServiceType'),
  supportEngine?: int32(name='SupportEngine'),
}

model GetLindormInstanceListResponseBody = {
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
  instanceList?: [ 
    {
      vpcId?: string(name='VpcId'),
      engineType?: string(name='EngineType'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      instanceStorage?: string(name='InstanceStorage'),
      aliUid?: long(name='AliUid'),
      serviceType?: string(name='ServiceType'),
      networkType?: string(name='NetworkType'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
      instanceAlias?: string(name='InstanceAlias'),
      zoneId?: string(name='ZoneId'),
      instanceStatus?: string(name='InstanceStatus'),
    }
  ](name='InstanceList'),
}

model GetLindormInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceListResponseBody(name='body'),
}

async function getLindormInstanceListWithOptions(request: GetLindormInstanceListRequest, runtime: Util.RuntimeOptions): GetLindormInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLindormInstanceList', '2020-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceListWithOptions(request, runtime);
}

model UpdateInstanceIpWhiteListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  securityIpList?: string(name='SecurityIpList'),
  groupName?: string(name='GroupName'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

async function updateInstanceIpWhiteListWithOptions(request: UpdateInstanceIpWhiteListRequest, runtime: Util.RuntimeOptions): UpdateInstanceIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInstanceIpWhiteList', '2020-06-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceIpWhiteListWithOptions(request, runtime);
}

