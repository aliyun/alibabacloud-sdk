/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('hitsdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateLdpsNamespaceRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model CreateLdpsNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLdpsNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLdpsNamespaceResponseBody(name='body'),
}

async function createLdpsNamespaceWithOptions(request: CreateLdpsNamespaceRequest, runtime: Util.RuntimeOptions): CreateLdpsNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLdpsNamespace',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLdpsNamespace(request: CreateLdpsNamespaceRequest): CreateLdpsNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLdpsNamespaceWithOptions(request, runtime);
}

model CreateLindormInstanceRequest {
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', description='The ID of the vSwitch that is specified for the zone for the coordinate node of the instance. The vSwitch must be deployed in the zone specified by the ArbiterZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-uf6664pqjawb87k36****'),
  arbiterZoneId?: string(name='ArbiterZoneId', description='The ID of the zone for the coordinate node of the instance. **This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-g'),
  archVersion?: string(name='ArchVersion', description='The architecture of the instance. Valid values:

*   **1.0**: The instance that you want to create is a single-zone instance.
*   **2.0**: The instance that you want to create is a multi-zone instance.

By default, the value of this parameter is 1.0. To create a multi-zone instance, set this parameter to 2.0. **This parameter is required if you want to create a multi-zone instance**.', example='2.0'),
  coldStorage?: int32(name='ColdStorage', description='The cold storage capacity of the instance. By default, if you leave this parameter unspecified, cold storage is not enabled for the instance. Unit: GB. Valid values: **800** to **1000000**.', example='800'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='The storage capacity of the disk of a single core node. Valid values: 400 to 64000. Unit: GB. **This parameter is required if you want to create a multi-zone instance**.', example='400'),
  coreSpec?: string(name='CoreSpec', description='The specification of the nodes in the instance if you set DiskCategory to local_ssd_pro or local_hdd_pro.

When DiskCategory is set to local_ssd_pro, you can set this parameter to the following values:

*   **lindorm.i2.xlarge**: Each node has 4 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.i2.2xlarge**: Each node has 8 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.i2.4xlarge**: Each node has 16 dedicated CPU cores and 128 GB of dedicated memory.
*   **lindorm.i2.8xlarge**: Each node has 32 dedicated CPU cores and 256 GB of dedicated memory.

When DiskCategory is set to local_hdd_pro, you can set this parameter to the following values:

*   **lindorm.d1.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.d1.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.d1.6xlarge**: Each node has 24 dedicated CPU cores and 96 GB of dedicated memory.', example='lindorm.i2.xlarge'),
  diskCategory?: string(name='DiskCategory', description='The storage type of the instance. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.
*   **capacity_cloud_storage**: This instance uses the Capacity type of storage.
*   **local_ssd_pro**: This instance uses local SSDs.
*   **local_hdd_pro**: This instance uses local HDDs.', example='cloud_efficiency'),
  duration?: string(name='Duration', description='The subscription period of the instance. The valid values of this parameter depend on the value of the PricingCycle parameter.

*   If PricingCycle is set to **Month**, set this parameter to an integer that ranges from **1** to **9**.
*   If PricingCycle is set to **Year**, set this parameter to an integer that ranges from **1** to **3**.

> This parameter is available and required when the PayType parameter is set to **PREPAY**.', example='1'),
  filestoreNum?: int32(name='FilestoreNum', description='The number of LindormDFS nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **60**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **8**.', example='2'),
  filestoreSpec?: string(name='FilestoreSpec', description='The specification of LindormDFS nodes in the instance. Set the value of this parameter to **lindorm.c.xlarge**, which indicates that each node has 4 dedicated CPU cores and 8 GB of dedicated memory.', example='lindorm.c.xlarge'),
  instanceAlias?: string(name='InstanceAlias', description='The name of the instance that you want to create.', example='lindorm_test'),
  instanceStorage?: string(name='InstanceStorage', description='The storage capacity of the instance you want to create. Unit: GB.', example='480'),
  lindormNum?: int32(name='LindormNum', description='The number of LindormTable nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **90**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **400**.

**This parameter is required if you want to create a multi-zone instance**.  The valid values of this parameter range from 4 to 400 if you want to create a multi-zone instance.', example='2'),
  lindormSpec?: string(name='LindormSpec', description='The specification of LindormTable nodes in the instance. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.', example='lindorm.c.xlarge'),
  logDiskCategory?: string(name='LogDiskCategory', description='The disk type of the log nodes. Valid values:

*   **cloud_efficiency**: This instance uses the Standard type of storage.
*   **cloud_ssd**: This instance uses the Performance type of storage.

**This parameter is required if you want to create a multi-zone instance**.', example='cloud_ssd'),
  logNum?: int32(name='LogNum', description='The number of the log nodes. Valid values: 4 to 400. **This parameter is required if you want to create a multi-zone instance**.', example='4'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of the disk of a single log node. Valid values: 400 to 64000. Unit: GB. **This parameter is required if you want to create a multi-zone instance**.', example='400'),
  logSpec?: string(name='LogSpec', description='The type of the log nodes. Valid values:

*   **lindorm.sn1.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.sn1.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.

**This parameter is required if you want to create a multi-zone instance**.', example='lindorm.sn1.large'),
  multiZoneCombination?: string(name='MultiZoneCombination', description='The combinations of zones that are available for the multi-zone instance. You can go to the purchase page of Lindorm to view the supported zone combinations.

*   **ap-southeast-5abc-aliyun**: Zone A+B+C in the Indonesia (Jakarta) region.
*   **cn-hangzhou-ehi-aliyun**: Zone E+H+I in the China (Hangzhou) region.
*   **cn-beijing-acd-aliyun**: Zone A+C+D in the China (Beijing) region.
*   **ap-southeast-1-abc-aliyun**: Zone A+B+C in the Singapore region.
*   **cn-zhangjiakou-abc-aliyun**: Zone A+B+C in the China (Zhangjiakou) region.
*   **cn-shanghai-efg-aliyun**: Zone E+F+G in the China (Shanghai) region.
*   **cn-shanghai-abd-aliyun**: Zone A+B+D in the China (Shanghai) region.
*   **cn-hangzhou-bef-aliyun**: Zone B+E+F in the China (Hangzhou) region.
*   **cn-hangzhou-bce-aliyun**: Zone B+C+E in the China (Hangzhou) region.
*   **cn-beijing-fgh-aliyun**: Zone F+G+H in the China (Beijing) region.
*   **cn-shenzhen-abc-aliyun**: Zone A+B+C in the China (Shenzhen) region.

**This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-efg-aliyun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', description='The billing method of the instance you want to create. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.', example='POSTPAY'),
  pricingCycle?: string(name='PricingCycle', description='The period based on which you are charged for the instance. Valid values:

*   **Month**: You are charged for the instance on a monthly basis.
*   **Year**: You are charged for the instance on a yearly basis.

> This parameter is available and required when the PayType parameter is set to **PREPAY**.', example='Month'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', description='The ID of the vSwitch that is specified for the secondary zone of the instance. The vSwitch must be deployed in the zone specified by the StandbyZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-uf6fdqa7c0pipnqzq****'),
  primaryZoneId?: string(name='PrimaryZoneId', description='多可用区实例，主可用区的可用区ID。**如果需要创建多可用区实例，该参数必填。**', example='cn-shanghai-e'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to create the instance. You can call the [DescribeRegions](~~426062~~) operation to query the region in which you can create the instance.', example='cn-shanghai'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Lindorm instance belongs.', example='rg-aek2i6weeb4nfii'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  solrNum?: int32(name='SolrNum', description='The number of LindormSearch nodes in the instance. Valid values: integers from **0** to **60**.', example='2'),
  solrSpec?: string(name='SolrSpec', description='The specification of the LindormSearch nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', description='The ID of the vSwitch that is specified for the secondary zone of the instance. The vSwitch must be deployed in the zone specified by the StandbyZoneId parameter. **This parameter is required if you want to create a multi-zone instance**.', example='vsw-2zec0kcn08cgdtr6****'),
  standbyZoneId?: string(name='StandbyZoneId', description='The ID of the secondary zone of the instance. **This parameter is required if you want to create a multi-zone instance**.', example='cn-shanghai-f'),
  streamNum?: int32(name='StreamNum', description='The number of LindormStream nodes in the instance. Valid values: integers from **0** to **60**.', example='2'),
  streamSpec?: string(name='StreamSpec', description='The specification of the LindormStream nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  tsdbNum?: int32(name='TsdbNum', description='The number of the LindormTSDB nodes in the instance. The valid values of this parameter depend on the value of the PayType parameter.

*   If the PayType parameter is set to **PREPAY**, set this parameter to an integer that ranges from **0** to **24**.
*   If the PayType parameter is set to **POSTPAY**, set this parameter to an integer that ranges from **0** to **32**.', example='2'),
  tsdbSpec?: string(name='TsdbSpec', description='The specification of the LindormTSDB nodes in the instance. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  VPCId?: string(name='VPCId', description='The ID of the VPC in which you want to create the instance.', example='vpc-bp1nme44gek34slfc****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which you want the instance to connect.', example='vsw-bp1e7clcw529l773d****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which you want to create the instance.', example='cn-shanghai-f'),
}

model CreateLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance that is created.', example='ld-bp1o3y0yme2i2****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='93BE8227-3406-4D7A-883D-9A421D42****'),
}

model CreateLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLindormInstanceResponseBody(name='body'),
}

/**
  * For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine types](~~181971~~) and [Select storage types](~~174643~~).
  *
  * @param request CreateLindormInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateLindormInstanceResponse
 */
async function createLindormInstanceWithOptions(request: CreateLindormInstanceRequest, runtime: Util.RuntimeOptions): CreateLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.arbiterVSwitchId)) {
    query['ArbiterVSwitchId'] = request.arbiterVSwitchId;
  }
  if (!Util.isUnset(request.arbiterZoneId)) {
    query['ArbiterZoneId'] = request.arbiterZoneId;
  }
  if (!Util.isUnset(request.archVersion)) {
    query['ArchVersion'] = request.archVersion;
  }
  if (!Util.isUnset(request.coldStorage)) {
    query['ColdStorage'] = request.coldStorage;
  }
  if (!Util.isUnset(request.coreSingleStorage)) {
    query['CoreSingleStorage'] = request.coreSingleStorage;
  }
  if (!Util.isUnset(request.coreSpec)) {
    query['CoreSpec'] = request.coreSpec;
  }
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.filestoreNum)) {
    query['FilestoreNum'] = request.filestoreNum;
  }
  if (!Util.isUnset(request.filestoreSpec)) {
    query['FilestoreSpec'] = request.filestoreSpec;
  }
  if (!Util.isUnset(request.instanceAlias)) {
    query['InstanceAlias'] = request.instanceAlias;
  }
  if (!Util.isUnset(request.instanceStorage)) {
    query['InstanceStorage'] = request.instanceStorage;
  }
  if (!Util.isUnset(request.lindormNum)) {
    query['LindormNum'] = request.lindormNum;
  }
  if (!Util.isUnset(request.lindormSpec)) {
    query['LindormSpec'] = request.lindormSpec;
  }
  if (!Util.isUnset(request.logDiskCategory)) {
    query['LogDiskCategory'] = request.logDiskCategory;
  }
  if (!Util.isUnset(request.logNum)) {
    query['LogNum'] = request.logNum;
  }
  if (!Util.isUnset(request.logSingleStorage)) {
    query['LogSingleStorage'] = request.logSingleStorage;
  }
  if (!Util.isUnset(request.logSpec)) {
    query['LogSpec'] = request.logSpec;
  }
  if (!Util.isUnset(request.multiZoneCombination)) {
    query['MultiZoneCombination'] = request.multiZoneCombination;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.primaryVSwitchId)) {
    query['PrimaryVSwitchId'] = request.primaryVSwitchId;
  }
  if (!Util.isUnset(request.primaryZoneId)) {
    query['PrimaryZoneId'] = request.primaryZoneId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.solrNum)) {
    query['SolrNum'] = request.solrNum;
  }
  if (!Util.isUnset(request.solrSpec)) {
    query['SolrSpec'] = request.solrSpec;
  }
  if (!Util.isUnset(request.standbyVSwitchId)) {
    query['StandbyVSwitchId'] = request.standbyVSwitchId;
  }
  if (!Util.isUnset(request.standbyZoneId)) {
    query['StandbyZoneId'] = request.standbyZoneId;
  }
  if (!Util.isUnset(request.streamNum)) {
    query['StreamNum'] = request.streamNum;
  }
  if (!Util.isUnset(request.streamSpec)) {
    query['StreamSpec'] = request.streamSpec;
  }
  if (!Util.isUnset(request.tsdbNum)) {
    query['TsdbNum'] = request.tsdbNum;
  }
  if (!Util.isUnset(request.tsdbSpec)) {
    query['TsdbSpec'] = request.tsdbSpec;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine types](~~181971~~) and [Select storage types](~~174643~~).
  *
  * @param request CreateLindormInstanceRequest
  * @return CreateLindormInstanceResponse
 */
async function createLindormInstance(request: CreateLindormInstanceRequest): CreateLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLindormInstanceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the region.', example='zh-CN'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', description='Queries the regions where Lindorm is available.', example='hitsdb.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions', description='China (Hangzhou)'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73F6E6DA-9AE5-5548-9E07-761A554DAF2E'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model GetInstanceIpWhiteListRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance whose whitelist you want to query. You can call the [GetLindormInstanceList](~~426068~~) operation to query the instance ID.', example='ld-bp1z3506imz2f****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetInstanceIpWhiteListResponseBody = {
  groupList?: [ 
    {
      groupName?: string(name='GroupName'),
      securityIpList?: string(name='SecurityIpList'),
    }
  ](name='GroupList'),
  instanceId?: string(name='InstanceId', description='The ID of the Lindorm instance.', example='ld-bp1z3506imz2f****'),
  ipList?: [ string ](name='IpList'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D1F6F4D-9203-53E7-84E9-5376B4657E63'),
}

model GetInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceIpWhiteListResponseBody(name='body'),
}

async function getInstanceIpWhiteListWithOptions(request: GetInstanceIpWhiteListRequest, runtime: Util.RuntimeOptions): GetInstanceIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceIpWhiteList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceIpWhiteListWithOptions(request, runtime);
}

model GetLdpsNamespacedQuotaRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetLdpsNamespacedQuotaResponseBody = {
  namespacedQuotas?: [ 
    {
      cpuAmount?: string(name='CpuAmount'),
      memoryAmount?: string(name='MemoryAmount'),
      name?: string(name='Name'),
      usedCpu?: string(name='UsedCpu'),
      usedMemory?: string(name='UsedMemory'),
    }
  ](name='NamespacedQuotas'),
  requestId?: string(name='RequestId'),
}

model GetLdpsNamespacedQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLdpsNamespacedQuotaResponseBody(name='body'),
}

async function getLdpsNamespacedQuotaWithOptions(request: GetLdpsNamespacedQuotaRequest, runtime: Util.RuntimeOptions): GetLdpsNamespacedQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLdpsNamespacedQuota',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLdpsNamespacedQuota(request: GetLdpsNamespacedQuotaRequest): GetLdpsNamespacedQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLdpsNamespacedQuotaWithOptions(request, runtime);
}

model GetLdpsResourceCostRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: long(name='StartTime'),
}

model GetLdpsResourceCostResponseBody = {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totalResource?: long(name='TotalResource'),
}

model GetLdpsResourceCostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLdpsResourceCostResponseBody(name='body'),
}

async function getLdpsResourceCostWithOptions(request: GetLdpsResourceCostRequest, runtime: Util.RuntimeOptions): GetLdpsResourceCostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLdpsResourceCost',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLdpsResourceCost(request: GetLdpsResourceCostRequest): GetLdpsResourceCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLdpsResourceCostWithOptions(request, runtime);
}

model GetLindormInstanceRequest {
  instanceId?: string(name='InstanceId', description='The disk type of the log nodes. This parameter is returned only for multi-zone instances. Valid values:

*   **cloud_efficiency**: The nodes use the Standard type of storage.
*   **cloud_ssd**: The nodes use the Performance type of storage.', example='ld-bp1o3y0yme2i2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetLindormInstanceResponseBody = {
  aliUid?: long(name='AliUid'),
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', example='vsw-uf6664pqjawb87k36****'),
  arbiterZoneId?: string(name='ArbiterZoneId', example='cn-shanghai-g'),
  archVersion?: string(name='ArchVersion'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  coldStorage?: int32(name='ColdStorage'),
  coreDiskCategory?: string(name='CoreDiskCategory', example='cloud_efficiency'),
  coreNum?: int32(name='CoreNum', example='4'),
  coreSingleStorage?: int32(name='CoreSingleStorage', example='400'),
  coreSpec?: string(name='CoreSpec', example='lindorm.g.xlarge'),
  createMilliseconds?: long(name='CreateMilliseconds', example='1627290664000'),
  createTime?: string(name='CreateTime', description='The storage capacity of the disk of a single log node. This parameter is returned only for multi-zone instances.', example='2021-07-26 17:10:26'),
  deletionProtection?: string(name='DeletionProtection', example='false'),
  diskCategory?: string(name='DiskCategory', example='cloud_efficiency'),
  diskThreshold?: string(name='DiskThreshold', example='80%'),
  diskUsage?: string(name='DiskUsage', example='0.0%'),
  enableBlob?: boolean(name='EnableBlob'),
  enableCdc?: boolean(name='EnableCdc', example='false'),
  enableCompute?: boolean(name='EnableCompute', example='true'),
  enableKms?: boolean(name='EnableKms', example='false'),
  enableLTS?: boolean(name='EnableLTS'),
  enableLsqlVersionV3?: boolean(name='EnableLsqlVersionV3'),
  enableMLCtrl?: boolean(name='EnableMLCtrl'),
  enableSSL?: boolean(name='EnableSSL', example='false'),
  enableShs?: boolean(name='EnableShs', example='true'),
  enableStream?: boolean(name='EnableStream', example='true'),
  engineList?: [ 
    {
      coreCount?: string(name='CoreCount', example='2'),
      cpuCount?: string(name='CpuCount', example='4'),
      engine?: string(name='Engine', example='lindorm'),
      isLastVersion?: boolean(name='IsLastVersion', example='false'),
      latestVersion?: string(name='LatestVersion', example='2.2.19.2'),
      memorySize?: string(name='MemorySize'),
      version?: string(name='Version', example='2.2.3'),
    }
  ](name='EngineList'),
  engineType?: int32(name='EngineType', example='15'),
  expireTime?: string(name='ExpireTime', example='2021-08-27 00:00:00'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds', example='1629993600000'),
  instanceAlias?: string(name='InstanceAlias', example='test0726'),
  instanceId?: string(name='InstanceId', example='ld-bp1o3y0yme2i2****'),
  instanceStatus?: string(name='InstanceStatus', example='ACTIVATION'),
  instanceStorage?: string(name='InstanceStorage', example='480'),
  logDiskCategory?: string(name='LogDiskCategory', example='cloud_ssd'),
  logNum?: int32(name='LogNum', example='4'),
  logSingleStorage?: int32(name='LogSingleStorage'),
  logSpec?: string(name='LogSpec', example='lindorm.sn1.large'),
  maintainEndTime?: string(name='MaintainEndTime', example='20:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', example='00:00Z'),
  multiZoneCombination?: string(name='MultiZoneCombination', example='cn-shanghai-efg-aliyun'),
  networkType?: string(name='NetworkType', example='vpc'),
  payType?: string(name='PayType', description='400', example='POSTPAY'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-uf6fdqa7c0pipnqzq****'),
  primaryZoneId?: string(name='PrimaryZoneId', example='cn-shanghai-e'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='633F1BE4-C8DA-5744-8FDF-A3075C3FE37F'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceType?: string(name='ServiceType', example='lindorm'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-2zec0kcn08cgdtr6****'),
  standbyZoneId?: string(name='StandbyZoneId', example='cn-shanghai-f'),
  vpcId?: string(name='VpcId', description='The type of the log nodes. This parameter is returned only for multi-zone instances.', example='vpc-bp1n3i15v90el48nx****'),
  vswitchId?: string(name='VswitchId', description='The number of the log nodes. This parameter is returned only for multi-zone instances.', example='vsw-bp1vbjzmod9q3l9eo****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model GetLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLindormInstanceResponseBody(name='body'),
}

async function getLindormInstanceWithOptions(request: GetLindormInstanceRequest, runtime: Util.RuntimeOptions): GetLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceWithOptions(request, runtime);
}

model GetLindormInstanceEngineListRequest {
  instanceId?: string(name='InstanceId', example='ld-bp1nq34mv3smk****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetLindormInstanceEngineListResponseBody = {
  engineList?: [ 
    {
      engineType?: string(name='EngineType', example='lindorm'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType', example='1'),
          connectionString?: string(name='ConnectionString', example='ld-bp1nq34mv3smk****-proxy-lindorm.lindorm.rds.aliyuncs.com'),
          netType?: string(name='NetType', example='2'),
          port?: int32(name='Port', example='30020'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  instanceId?: string(name='InstanceId', example='ld-bp1nq34mv3smk****'),
  requestId?: string(name='RequestId', example='B496BA0E-520C-59FC-BA04-196D8F3B07EF'),
}

model GetLindormInstanceEngineListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLindormInstanceEngineListResponseBody(name='body'),
}

async function getLindormInstanceEngineListWithOptions(request: GetLindormInstanceEngineListRequest, runtime: Util.RuntimeOptions): GetLindormInstanceEngineListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLindormInstanceEngineList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceEngineListWithOptions(request, runtime);
}

model GetLindormInstanceListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  queryStr?: string(name='QueryStr', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek3b63arvg27vi'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  serviceType?: string(name='ServiceType', example='lindorm'),
  supportEngine?: int32(name='SupportEngine', example='15'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='2.2.18'),
    }
  ](name='Tag'),
}

model GetLindormInstanceListResponseBody = {
  instanceList?: [ 
    {
      aliUid?: long(name='AliUid', example='164901546557****'),
      createMilliseconds?: long(name='CreateMilliseconds', example='1631772842000'),
      createTime?: string(name='CreateTime', example='2021-09-16 14:13:13'),
      enableCompute?: boolean(name='EnableCompute', example='true'),
      enableStream?: boolean(name='EnableStream', example='true'),
      engineType?: string(name='EngineType', example='15'),
      expireTime?: string(name='ExpireTime', example='2022-04-26 00:00:00'),
      expiredMilliseconds?: long(name='ExpiredMilliseconds', example='1650902400000'),
      instanceAlias?: string(name='InstanceAlias', example='test'),
      instanceId?: string(name='InstanceId', example='ld-bp17pwu1541ia****'),
      instanceStatus?: string(name='InstanceStatus', example='ACTIVATION'),
      instanceStorage?: string(name='InstanceStorage', example='960'),
      networkType?: string(name='NetworkType', example='vpc'),
      payType?: string(name='PayType', example='PREPAY'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzledqeat****'),
      serviceType?: string(name='ServiceType', example='lindorm'),
      tags?: [ 
        {
          key?: string(name='Key', example='test'),
          value?: string(name='Value', example='2.2.18'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp1n3i15v90el48nx****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='InstanceList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='1CA1FAFD-E8DC-51C2-AA7E-CA6E2D049BA0'),
  total?: int32(name='Total', example='1'),
}

model GetLindormInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLindormInstanceListResponseBody(name='body'),
}

async function getLindormInstanceListWithOptions(request: GetLindormInstanceListRequest, runtime: Util.RuntimeOptions): GetLindormInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryStr)) {
    query['QueryStr'] = request.queryStr;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.supportEngine)) {
    query['SupportEngine'] = request.supportEngine;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLindormInstanceList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceListWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to start the next query to retrieve more results.

> This parameter is not required in the first query. If not all results are returned in one query, you can pass in the **NextToken** value returned for the query to perform the next query.', example='212db86****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instances whose tags you want to query are located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource IDs.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of the tags associated with the instances you want to query.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The values of the tags associated with the instances you want to query.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The list of tags associated with the instances you want to query.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.

> If not all results are returned in the first query, this parameter is returned. You can pass in the returned value of this parameter for the next query.', example='212db86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='05CB115C-91CB-529F-9098-50C1F6CB3BD3'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource, which is the ID of the instance.', example='ld-bp17j28j2y7pm****'),
      resourceType?: string(name='ResourceType', description='The type of the resources. The returned value is fixed to **ALIYUN::HITSDB::INSTANCE**.', example='ALIYUN::HITSDB::INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag associated with the instance.', example='test'),
      tagValue?: string(name='TagValue', description='The value of the tag associated with the instance.', example='2.2.8'),
    }
  ](name='TagResources', description='The list of resources.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyInstancePayTypeRequest {
  duration?: int32(name='Duration', description='The subscription duration of the instance. The parameter is required if the instance is an subscription instance.

*   If PricingCycle is set to Month, set this parameter to an integer that ranges from 1 to 9.
*   If PricingCycle is set to Year, set this parameter to an integer that ranges from 1 to 3.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **PREPAY**: subscription.
*   **POSTPAY**: pay-as-you-go.', example='POSTPAY'),
  pricingCycle?: string(name='PricingCycle', description='The unit of the subscription duration for the instance. Valid values:

*   Month
*   Year', example='Month'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstancePayTypeResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='211662251220224'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='587BCA54-50DA-4885-ADE9-80A848339151'),
}

model ModifyInstancePayTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstancePayTypeResponseBody(name='body'),
}

/**
  * You can call this operation to change the billing method of an instance to subscription or pay-as-you-go.
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.aliyun.com/price/product?spm=openapi-amp.newDocPublishment.0.0.6345281fu63xJ3#/hitsdb/detail/hitsdb_lindormpre_public_cn) of Lindorm.
  *
  * @param request ModifyInstancePayTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstancePayTypeResponse
 */
async function modifyInstancePayTypeWithOptions(request: ModifyInstancePayTypeRequest, runtime: Util.RuntimeOptions): ModifyInstancePayTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstancePayType',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to change the billing method of an instance to subscription or pay-as-you-go.
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.aliyun.com/price/product?spm=openapi-amp.newDocPublishment.0.0.6345281fu63xJ3#/hitsdb/detail/hitsdb_lindormpre_public_cn) of Lindorm.
  *
  * @param request ModifyInstancePayTypeRequest
  * @return ModifyInstancePayTypeResponse
 */
async function modifyInstancePayType(request: ModifyInstancePayTypeRequest): ModifyInstancePayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstancePayTypeWithOptions(request, runtime);
}

model ReleaseLindormInstanceRequest {
  immediately?: boolean(name='Immediately', description='Specifies whether to release the instance immediately. If you set this parameter to false, data in the released instance is retained for seven days before it is completely deleted. If you set this parameter to true, data in the released instance is immediately deleted. The default value is false.', example='false'),
  instanceId?: string(name='InstanceId', example='ld-bp1z3506imz2f****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ReleaseLindormInstanceResponseBody = {
  requestId?: string(name='RequestId', example='F67BFFF3-F5C2-45B5-9C28-6E4A1E51****'),
}

model ReleaseLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseLindormInstanceResponseBody(name='body'),
}

async function releaseLindormInstanceWithOptions(request: ReleaseLindormInstanceRequest, runtime: Util.RuntimeOptions): ReleaseLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseLindormInstance(request: ReleaseLindormInstanceRequest): ReleaseLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseLindormInstanceWithOptions(request, runtime);
}

model RenewLindormInstanceRequest {
  duration?: int32(name='Duration', description='The subscription duration of the instance. The valid values of this parameter depend on the value of the PricingCycle parameter.

*   If PricingCycle is set to **Month**, set this parameter to an integer that ranges from **1** to **9**.
*   If PricingCycle is set to **Year**, set this parameter to an integer that ranges from **1** to **3**.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to renew. You can call the [GetLindormInstanceList](~~426069~~) operation to obtain the instance ID.', example='ld-bp1z3506imz2f****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pricingCycle?: string(name='PricingCycle', description='The period based on which you are charged for the instance. Valid values:

*   **Month**: You are charged for the instance based on months.
*   **Year**: You are charged for the instance based on years.', example='Month'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance that you want to renew is located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RenewLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ld-bp1z3506imz2f****'),
  orderId?: long(name='OrderId', description='The ID of the order. You can obtain an order ID on the Orders page in Alibaba Cloud User Center.', example='213465921640411'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1556DCB0-043A-4444-8BD9-CF4A68E7EE64'),
}

model RenewLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewLindormInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to renew a subscription Lindorm instance for 1 to 9 months or 1 to 3 years.
  * Before you call this operation, make sure that you fully understand the billing methods and pricing of Lindorm.
  *
  * @param request RenewLindormInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewLindormInstanceResponse
 */
async function renewLindormInstanceWithOptions(request: RenewLindormInstanceRequest, runtime: Util.RuntimeOptions): RenewLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to renew a subscription Lindorm instance for 1 to 9 months or 1 to 3 years.
  * Before you call this operation, make sure that you fully understand the billing methods and pricing of Lindorm.
  *
  * @param request RenewLindormInstanceRequest
  * @return RenewLindormInstanceResponse
 */
async function renewLindormInstance(request: RenewLindormInstanceRequest): RenewLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewLindormInstanceWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instances you want to associate tags with are located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource IDs.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that you want to associate with the resource.

> You can specify the keys of multiple tags. For example, you can specify the key of the first tag in the first key-value pair contained in the value of this parameter and specify the key of the second tag in the second key-value pair.', example='test'),
      value?: string(name='Value', description='The value of the tag that you want to associate with the resource.

> You can specify the values of multiple tags. For example, you can specify the value of the first tag in the first key-value pair contained in the value of this parameter and specify the value of the second tag in the second key-value pair.', example='2.2.8'),
    }
  ](name='Tag', description='The tags that you want to associate with the resource.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F23D50C-400C-592C-9486-9D1E10179065'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the instance. Valid values:

*   **true**: Remove all tags from the instances.
*   **false**: Do not remove all tags from the instances.

> 

*   The default value of this parameter is false.

*   If you specify the TagKey parameter together with this parameter, this parameter does not take effect.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of instances.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE'),
  securityToken?: string(name='SecurityToken'),
  tagKey?: [ string ](name='TagKey', description='The list of keys of the tags that you want to remove.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CACBBCE-7519-545C-8695-86D4F09CED7E'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateInstanceIpWhiteListRequest {
  delete?: boolean(name='Delete'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to configure a whitelist. You can call the [GetLindormInstanceList](~~426069~~) operation to obtain the ID.', example='ld-bp1z3506imz2f****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityIpList?: string(name='SecurityIpList', description='The IP addresses that you want to add to the whitelist. For example, if you add 192.168.0.0/24 to the whitelist, you can use all IP addresses within this CIDR block to access the Lindorm instance.

> If you add 127.0.0.1 to the whitelist, all IP addresses cannot be used to access the Lindorm instance. Separate multiple IP addresses or CIDR blocks with commas (,).', example='106.11.XX.XX/24'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4944539D-D27C-458D-95F1-2DCEB5E0EED5'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

async function updateInstanceIpWhiteListWithOptions(request: UpdateInstanceIpWhiteListRequest, runtime: Util.RuntimeOptions): UpdateInstanceIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.delete)) {
    query['Delete'] = request.delete;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityIpList)) {
    query['SecurityIpList'] = request.securityIpList;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceIpWhiteList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceIpWhiteListWithOptions(request, runtime);
}

model UpgradeLindormInstanceRequest {
  clusterStorage?: int32(name='ClusterStorage', description='The storage capacity of the instance after it is upgraded. Unit: GB. Valid values: **480** to **1017600**.', example='480'),
  coldStorage?: int32(name='ColdStorage', description='The cold storage capacity of the instance after it is upgraded. Unit: GB. Valid values: **800** to **1000000**.', example='800'),
  coreSingleStorage?: int32(name='CoreSingleStorage', description='The storage capacity of a single core node in the instance after the instance upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. Unit: GB. Valid values: 400 to 64000. **This parameter is optional**.', example='400'),
  filestoreNum?: int32(name='FilestoreNum', description='The number of LindormDFS nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2'),
  filestoreSpec?: string(name='FilestoreSpec', description='The specification of LindormDFS nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to upgrade, scale up, or enable cold storage. You can call the [GetLindormInstanceList](~~426069~~) operation to query the instance ID.', example='ld-bp1o3y0yme2i2****'),
  lindormNum?: int32(name='LindormNum', description='The number of LindormTable nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **90**.

> This parameter must be specified together with the LindormSpec parameter.', example='2'),
  lindormSpec?: string(name='LindormSpec', description='The specification of LindormTable nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.c.xlarge**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.c.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.c.4xlarge**: Each node has 16 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.c.8xlarge**: Each node has 32 dedicated CPU cores and 64 GB of dedicated memory.', example='lindorm.c.xlarge'),
  logNum?: int32(name='LogNum', description='The number of log nodes in the instance after the instance is upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. **This parameter is optional**.', example='4'),
  logSingleStorage?: int32(name='LogSingleStorage', description='The storage capacity of a single log node in the instance after the instance upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. **This parameter is optional**.', example='400'),
  logSpec?: string(name='LogSpec', description='The specification of log nodes in the instance after the instance is upgraded. This parameter is available only if the instance you want to upgrade is a multi-zone instance. Valid values:

*   **lindorm.sn1.large**: Each node has 4 dedicated CPU cores and 8 GB of dedicated memory.
*   **lindorm.sn1.2xlarge**: Each node has 8 dedicated CPU cores and 16 GB of dedicated memory.

**This parameter is optional**.', example='lindorm.sn1.large'),
  ltsCoreNum?: int32(name='LtsCoreNum', description='The number of LTS nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **50**.', example='2'),
  ltsCoreSpec?: string(name='LtsCoreSpec', description='The specification of Lindorm Tunnel Service (LTS) nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.', example='lindorm.g.xlarge'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance that you want to upgrade, scale up, or enable cold storage is located. You can call the [DescribeRegions](~~426062~~) operation to query the region ID.', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  solrNum?: int32(name='SolrNum', description='The number of LindormSearch nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2'),
  solrSpec?: string(name='SolrSpec', description='The specification of LindormSearch nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  streamNum?: int32(name='StreamNum', description='The number of LindormStream nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **60**.', example='2'),
  streamSpec?: string(name='StreamSpec', description='The specification of LindormStream nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  tsdbNum?: int32(name='TsdbNum', description='The number of LindormTSDB nodes in the instance after the instance is upgraded. Valid values: integers from **0** to **24**.', example='2'),
  tsdbSpec?: string(name='TsdbSpec', description='The specification of LindormTSDB nodes in the instance after the instance is upgraded. Valid values:

*   **lindorm.g.xlarge**: Each node has 4 dedicated CPU cores and 16 GB of dedicated memory.
*   **lindorm.g.2xlarge**: Each node has 8 dedicated CPU cores and 32 GB of dedicated memory.
*   **lindorm.g.4xlarge**: Each node has 16 dedicated CPU cores and 64 GB of dedicated memory.
*   **lindorm.g.8xlarge**: Each node has 32 dedicated CPU cores and 128 GB of dedicated memory.', example='lindorm.g.xlarge'),
  upgradeType?: string(name='UpgradeType', description='The upgrade type of the operation. For more information about upgrade types, see the UpgradeType parameters section.', example='upgrade-cold-storage'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance that you want to upgrade, scale up, or enable cold storage is located. You can call the [GetLindormInstance](~~426067~~) operation to query the zone ID.', example='cn-shanghai-f'),
}

model UpgradeLindormInstanceResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A7D4F9D-AA26-4E15-A2B1-3E4792C6****'),
}

model UpgradeLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeLindormInstanceResponseBody(name='body'),
}

/**
  * For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine typpes](~~181971~~) and [Select storage types](~~174643~~).
  *
  * @param request UpgradeLindormInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpgradeLindormInstanceResponse
 */
async function upgradeLindormInstanceWithOptions(request: UpgradeLindormInstanceRequest, runtime: Util.RuntimeOptions): UpgradeLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterStorage)) {
    query['ClusterStorage'] = request.clusterStorage;
  }
  if (!Util.isUnset(request.coldStorage)) {
    query['ColdStorage'] = request.coldStorage;
  }
  if (!Util.isUnset(request.coreSingleStorage)) {
    query['CoreSingleStorage'] = request.coreSingleStorage;
  }
  if (!Util.isUnset(request.filestoreNum)) {
    query['FilestoreNum'] = request.filestoreNum;
  }
  if (!Util.isUnset(request.filestoreSpec)) {
    query['FilestoreSpec'] = request.filestoreSpec;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lindormNum)) {
    query['LindormNum'] = request.lindormNum;
  }
  if (!Util.isUnset(request.lindormSpec)) {
    query['LindormSpec'] = request.lindormSpec;
  }
  if (!Util.isUnset(request.logNum)) {
    query['LogNum'] = request.logNum;
  }
  if (!Util.isUnset(request.logSingleStorage)) {
    query['LogSingleStorage'] = request.logSingleStorage;
  }
  if (!Util.isUnset(request.logSpec)) {
    query['LogSpec'] = request.logSpec;
  }
  if (!Util.isUnset(request.ltsCoreNum)) {
    query['LtsCoreNum'] = request.ltsCoreNum;
  }
  if (!Util.isUnset(request.ltsCoreSpec)) {
    query['LtsCoreSpec'] = request.ltsCoreSpec;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.solrNum)) {
    query['SolrNum'] = request.solrNum;
  }
  if (!Util.isUnset(request.solrSpec)) {
    query['SolrSpec'] = request.solrSpec;
  }
  if (!Util.isUnset(request.streamNum)) {
    query['StreamNum'] = request.streamNum;
  }
  if (!Util.isUnset(request.streamSpec)) {
    query['StreamSpec'] = request.streamSpec;
  }
  if (!Util.isUnset(request.tsdbNum)) {
    query['TsdbNum'] = request.tsdbNum;
  }
  if (!Util.isUnset(request.tsdbSpec)) {
    query['TsdbSpec'] = request.tsdbSpec;
  }
  if (!Util.isUnset(request.upgradeType)) {
    query['UpgradeType'] = request.upgradeType;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about how to select the storage type and engine type when you create a Lindorm instance, see [Select engine typpes](~~181971~~) and [Select storage types](~~174643~~).
  *
  * @param request UpgradeLindormInstanceRequest
  * @return UpgradeLindormInstanceResponse
 */
async function upgradeLindormInstance(request: UpgradeLindormInstanceRequest): UpgradeLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeLindormInstanceWithOptions(request, runtime);
}

