/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'hitsdb.aliyuncs.com',
    cn-beijing = 'hitsdb.aliyuncs.com',
    cn-hangzhou = 'hitsdb.aliyuncs.com',
    cn-shanghai = 'hitsdb.aliyuncs.com',
    cn-shenzhen = 'hitsdb.aliyuncs.com',
    cn-hongkong = 'hitsdb.aliyuncs.com',
    ap-southeast-1 = 'hitsdb.aliyuncs.com',
    us-west-1 = 'hitsdb.aliyuncs.com',
    us-east-1 = 'hitsdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'hitsdb.aliyuncs.com',
    ap-northeast-2-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-gov-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'hitsdb.aliyuncs.com',
    cn-chengdu = 'hitsdb.aliyuncs.com',
    cn-edge-1 = 'hitsdb.aliyuncs.com',
    cn-fujian = 'hitsdb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-finance = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-test-306 = 'hitsdb.aliyuncs.com',
    cn-hongkong-finance-pop = 'hitsdb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'hitsdb.aliyuncs.com',
    cn-qingdao-nebula = 'hitsdb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-inner = 'hitsdb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-inner = 'hitsdb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'hitsdb.aliyuncs.com',
    cn-wuhan = 'hitsdb.aliyuncs.com',
    cn-wulanchabu = 'hitsdb.aliyuncs.com',
    cn-yushanfang = 'hitsdb.aliyuncs.com',
    cn-zhangbei = 'hitsdb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'hitsdb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'hitsdb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'hitsdb.aliyuncs.com',
    eu-west-1-oxs = 'hitsdb.aliyuncs.com',
    me-east-1 = 'hitsdb.aliyuncs.com',
    rus-west-1-pop = 'hitsdb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('hitsdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateLindormInstanceRequest {
  coldStorage?: int32(name='ColdStorage'),
  coreSpec?: string(name='CoreSpec'),
  diskCategory?: string(name='DiskCategory'),
  duration?: string(name='Duration'),
  filestoreNum?: int32(name='FilestoreNum'),
  filestoreSpec?: string(name='FilestoreSpec'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceStorage?: string(name='InstanceStorage'),
  lindormNum?: int32(name='LindormNum'),
  lindormSpec?: string(name='LindormSpec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  pricingCycle?: string(name='PricingCycle'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  solrNum?: int32(name='SolrNum'),
  solrSpec?: string(name='SolrSpec'),
  tsdbNum?: int32(name='TsdbNum'),
  tsdbSpec?: string(name='TsdbSpec'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateLindormInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLindormInstanceResponseBody(name='body'),
}

async function createLindormInstanceWithOptions(request: CreateLindormInstanceRequest, runtime: Util.RuntimeOptions): CreateLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['ColdStorage'] = request.coldStorage;
  query['CoreSpec'] = request.coreSpec;
  query['DiskCategory'] = request.diskCategory;
  query['Duration'] = request.duration;
  query['FilestoreNum'] = request.filestoreNum;
  query['FilestoreSpec'] = request.filestoreSpec;
  query['InstanceAlias'] = request.instanceAlias;
  query['InstanceStorage'] = request.instanceStorage;
  query['LindormNum'] = request.lindormNum;
  query['LindormSpec'] = request.lindormSpec;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PayType'] = request.payType;
  query['PricingCycle'] = request.pricingCycle;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  query['SolrNum'] = request.solrNum;
  query['SolrSpec'] = request.solrSpec;
  query['TsdbNum'] = request.tsdbNum;
  query['TsdbSpec'] = request.tsdbSpec;
  query['VPCId'] = request.VPCId;
  query['VSwitchId'] = request.vSwitchId;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLindormInstance(request: CreateLindormInstanceRequest): CreateLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLindormInstanceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query['AcceptLanguage'] = request.acceptLanguage;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model GetInstanceIpWhiteListRequest {
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetInstanceIpWhiteListResponseBody = {
  instanceId?: string(name='InstanceId'),
  ipList?: [ string ](name='IpList'),
  requestId?: string(name='RequestId'),
}

model GetInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceIpWhiteListResponseBody(name='body'),
}

async function getInstanceIpWhiteListWithOptions(request: GetInstanceIpWhiteListRequest, runtime: Util.RuntimeOptions): GetInstanceIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  query['GroupName'] = request.groupName;
  query['InstanceId'] = request.instanceId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceIpWhiteList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceIpWhiteList(request: GetInstanceIpWhiteListRequest): GetInstanceIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceIpWhiteListWithOptions(request, runtime);
}

model GetLindormInstanceRequest {
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetLindormInstanceResponseBody = {
  aliUid?: long(name='AliUid'),
  autoRenew?: boolean(name='AutoRenew'),
  coldStorage?: int32(name='ColdStorage'),
  createMilliseconds?: long(name='CreateMilliseconds'),
  createTime?: string(name='CreateTime'),
  deletionProtection?: string(name='DeletionProtection'),
  diskCategory?: string(name='DiskCategory'),
  diskThreshold?: string(name='DiskThreshold'),
  diskUsage?: string(name='DiskUsage'),
  enableCompute?: boolean(name='EnableCompute'),
  enableKms?: boolean(name='EnableKms'),
  engineList?: [ 
    {
      coreCount?: string(name='CoreCount'),
      cpuCount?: string(name='CpuCount'),
      engine?: string(name='Engine'),
      isLastVersion?: boolean(name='IsLastVersion'),
      latestVersion?: string(name='LatestVersion'),
      memorySize?: string(name='MemorySize'),
      version?: string(name='Version'),
    }
  ](name='EngineList'),
  engineType?: int32(name='EngineType'),
  expireTime?: string(name='ExpireTime'),
  expiredMilliseconds?: long(name='ExpiredMilliseconds'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceStorage?: string(name='InstanceStorage'),
  networkType?: string(name='NetworkType'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  serviceType?: string(name='ServiceType'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  zoneId?: string(name='ZoneId'),
}

model GetLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceResponseBody(name='body'),
}

async function getLindormInstanceWithOptions(request: GetLindormInstanceRequest, runtime: Util.RuntimeOptions): GetLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLindormInstance(request: GetLindormInstanceRequest): GetLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceWithOptions(request, runtime);
}

model GetLindormInstanceEngineListRequest {
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetLindormInstanceEngineListResponseBody = {
  engineList?: [ 
    {
      engineType?: string(name='EngineType'),
      netInfoList?: [ 
        {
          accessType?: int32(name='AccessType'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: int32(name='Port'),
        }
      ](name='NetInfoList'),
    }
  ](name='EngineList'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GetLindormInstanceEngineListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceEngineListResponseBody(name='body'),
}

async function getLindormInstanceEngineListWithOptions(request: GetLindormInstanceEngineListRequest, runtime: Util.RuntimeOptions): GetLindormInstanceEngineListResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLindormInstanceEngineList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLindormInstanceEngineList(request: GetLindormInstanceEngineListRequest): GetLindormInstanceEngineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceEngineListWithOptions(request, runtime);
}

model GetLindormInstanceListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryStr?: string(name='QueryStr'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  serviceType?: string(name='ServiceType'),
  supportEngine?: int32(name='SupportEngine'),
}

model GetLindormInstanceListResponseBody = {
  instanceList?: [ 
    {
      aliUid?: long(name='AliUid'),
      createMilliseconds?: long(name='CreateMilliseconds'),
      createTime?: string(name='CreateTime'),
      engineType?: string(name='EngineType'),
      expireTime?: string(name='ExpireTime'),
      expiredMilliseconds?: long(name='ExpiredMilliseconds'),
      instanceAlias?: string(name='InstanceAlias'),
      instanceId?: string(name='InstanceId'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceStorage?: string(name='InstanceStorage'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      serviceType?: string(name='ServiceType'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='InstanceList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model GetLindormInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLindormInstanceListResponseBody(name='body'),
}

async function getLindormInstanceListWithOptions(request: GetLindormInstanceListRequest, runtime: Util.RuntimeOptions): GetLindormInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['QueryStr'] = request.queryStr;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  query['ServiceType'] = request.serviceType;
  query['SupportEngine'] = request.supportEngine;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLindormInstanceList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLindormInstanceList(request: GetLindormInstanceListRequest): GetLindormInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLindormInstanceListWithOptions(request, runtime);
}

model ReleaseLindormInstanceRequest {
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ReleaseLindormInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseLindormInstanceResponseBody(name='body'),
}

async function releaseLindormInstanceWithOptions(request: ReleaseLindormInstanceRequest, runtime: Util.RuntimeOptions): ReleaseLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseLindormInstance(request: ReleaseLindormInstanceRequest): ReleaseLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseLindormInstanceWithOptions(request, runtime);
}

model UpdateInstanceIpWhiteListRequest {
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityIpList?: string(name='SecurityIpList'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateInstanceIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceIpWhiteListResponseBody(name='body'),
}

async function updateInstanceIpWhiteListWithOptions(request: UpdateInstanceIpWhiteListRequest, runtime: Util.RuntimeOptions): UpdateInstanceIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  query['GroupName'] = request.groupName;
  query['InstanceId'] = request.instanceId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityIpList'] = request.securityIpList;
  query['SecurityToken'] = request.securityToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceIpWhiteList',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceIpWhiteList(request: UpdateInstanceIpWhiteListRequest): UpdateInstanceIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceIpWhiteListWithOptions(request, runtime);
}

model UpgradeLindormInstanceRequest {
  clusterStorage?: int32(name='ClusterStorage'),
  coldStorage?: int32(name='ColdStorage'),
  coreNum?: int32(name='CoreNum'),
  coreSpec?: string(name='CoreSpec'),
  filestoreNum?: int32(name='FilestoreNum'),
  filestoreSpec?: string(name='FilestoreSpec'),
  instanceId?: string(name='InstanceId'),
  lindormNum?: int32(name='LindormNum'),
  lindormSpec?: string(name='LindormSpec'),
  ltsCoreNum?: int32(name='LtsCoreNum'),
  ltsCoreSpec?: string(name='LtsCoreSpec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  phoenixCoreNum?: int32(name='PhoenixCoreNum'),
  phoenixCoreSpec?: string(name='PhoenixCoreSpec'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  solrNum?: int32(name='SolrNum'),
  solrSpec?: string(name='SolrSpec'),
  tsdbNum?: int32(name='TsdbNum'),
  tsdbSpec?: string(name='TsdbSpec'),
  upgradeType?: string(name='UpgradeType'),
  zoneId?: string(name='ZoneId'),
}

model UpgradeLindormInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeLindormInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeLindormInstanceResponseBody(name='body'),
}

async function upgradeLindormInstanceWithOptions(request: UpgradeLindormInstanceRequest, runtime: Util.RuntimeOptions): UpgradeLindormInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClusterStorage'] = request.clusterStorage;
  query['ColdStorage'] = request.coldStorage;
  query['CoreNum'] = request.coreNum;
  query['CoreSpec'] = request.coreSpec;
  query['FilestoreNum'] = request.filestoreNum;
  query['FilestoreSpec'] = request.filestoreSpec;
  query['InstanceId'] = request.instanceId;
  query['LindormNum'] = request.lindormNum;
  query['LindormSpec'] = request.lindormSpec;
  query['LtsCoreNum'] = request.ltsCoreNum;
  query['LtsCoreSpec'] = request.ltsCoreSpec;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PhoenixCoreNum'] = request.phoenixCoreNum;
  query['PhoenixCoreSpec'] = request.phoenixCoreSpec;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SecurityToken'] = request.securityToken;
  query['SolrNum'] = request.solrNum;
  query['SolrSpec'] = request.solrSpec;
  query['TsdbNum'] = request.tsdbNum;
  query['TsdbSpec'] = request.tsdbSpec;
  query['UpgradeType'] = request.upgradeType;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeLindormInstance',
    version = '2020-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeLindormInstance(request: UpgradeLindormInstanceRequest): UpgradeLindormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeLindormInstanceWithOptions(request, runtime);
}

