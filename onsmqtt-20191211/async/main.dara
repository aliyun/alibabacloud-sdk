/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OnsMqtt';
  @version = '2019-12-11';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApplyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  actions: string(name='Actions', position='Query'),
  expireTime: long(name='ExpireTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resources: string(name='Resources', position='Query'),
}

model ApplyTokenResponseBody = {
  requestId?: string(name='RequestId'),
  token?: string(name='Token'),
}

model ApplyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyTokenResponseBody(name='body'),
}

async function applyToken(request: ApplyTokenRequest): ApplyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyToken', 'POST', '/', 'json', false, 'json', request);
}

model BatchQuerySessionByClientIdsRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientIdList: [ string ](name='ClientIdList', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model BatchQuerySessionByClientIdsResponseBody = {
  onlineStatusList?: [ 
    {
      clientId?: string(name='ClientId'),
      onlineStatus?: boolean(name='OnlineStatus'),
    }
  ](name='OnlineStatusList'),
  requestId?: string(name='RequestId'),
}

model BatchQuerySessionByClientIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchQuerySessionByClientIdsResponseBody(name='body'),
}

async function batchQuerySessionByClientIds(request: BatchQuerySessionByClientIdsRequest): BatchQuerySessionByClientIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchQuerySessionByClientIds', 'POST', '/', 'json', false, 'json', request);
}

model BatchSendMessagesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  messages: [ 
    {
      id: int32(name='Id'),
      payload: string(name='Payload'),
      receiptId?: string(name='ReceiptId'),
      topics: [ string ](name='Topics'),
    }
  ](name='Messages', position='Query'),
}

model BatchSendMessagesResponseBody = {
  requestId?: string(name='RequestId'),
  responses?: [ 
    {
      errorCode?: int32(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      id?: int32(name='Id'),
      msgId?: string(name='MsgId'),
    }
  ](name='Responses'),
}

model BatchSendMessagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSendMessagesResponseBody(name='body'),
}

async function batchSendMessages(request: BatchSendMessagesRequest): BatchSendMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSendMessages', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model CreateGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupIdResponseBody(name='body'),
}

async function createGroupId(request: CreateGroupIdRequest): CreateGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupId', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupIdResponseBody(name='body'),
}

async function deleteGroupId(request: DeleteGroupIdRequest): DeleteGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupId', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupIdRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model ListGroupIdResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime'),
      groupId?: string(name='GroupId'),
      independentNaming?: boolean(name='IndependentNaming'),
      instanceId?: string(name='InstanceId'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupIdResponseBody(name='body'),
}

async function listGroupId(request: ListGroupIdRequest): ListGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupId', 'POST', '/', 'json', false, 'json', request);
}

model QuerySessionByClientIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientId: string(name='ClientId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model QuerySessionByClientIdResponseBody = {
  onlineStatus?: boolean(name='OnlineStatus'),
  requestId?: string(name='RequestId'),
}

model QuerySessionByClientIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionByClientIdResponseBody(name='body'),
}

async function querySessionByClientId(request: QuerySessionByClientIdRequest): QuerySessionByClientIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySessionByClientId', 'POST', '/', 'json', false, 'json', request);
}

model QueryTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  token: string(name='Token', position='Query'),
}

model QueryTokenResponseBody = {
  requestId?: string(name='RequestId'),
  tokenStatus?: boolean(name='TokenStatus'),
}

model QueryTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTokenResponseBody(name='body'),
}

async function queryToken(request: QueryTokenRequest): QueryTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryToken', 'POST', '/', 'json', false, 'json', request);
}

model RevokeTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  token: string(name='Token', position='Query'),
}

model RevokeTokenResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeTokenResponseBody(name='body'),
}

async function revokeToken(request: RevokeTokenRequest): RevokeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeToken', 'POST', '/', 'json', false, 'json', request);
}

model SendMessageRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  mqttTopic: string(name='MqttTopic', position='Query'),
  payload: string(name='Payload', position='Query'),
  receiptId?: string(name='ReceiptId', position='Query'),
}

model SendMessageResponseBody = {
  msgId?: string(name='MsgId'),
  requestId?: string(name='RequestId'),
}

model SendMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessage', 'POST', '/', 'json', false, 'json', request);
}

