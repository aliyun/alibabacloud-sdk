/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('lmztest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CaiheApiRequest {
  x?: int32(name='x'),
  y?: int32(name='y'),
}

model CaiheApiResponseBody = {
  sum?: int32(name='sum'),
}

model CaiheApiResponse = {
  headers: map[string]string(name='headers'),
  body: CaiheApiResponseBody(name='body'),
}

async function caiheApiWithOptions(request: CaiheApiRequest, runtime: Util.RuntimeOptions): CaiheApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CaiheApi', '2021-07-14_14-26-02-611', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function caiheApi(request: CaiheApiRequest): CaiheApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return caiheApiWithOptions(request, runtime);
}

model OpenApiBRequest {
  x?: int32(name='x'),
  y?: int32(name='y'),
}

model OpenApiBResponseBody = {
  sum?: int32(name='sum'),
}

model OpenApiBResponse = {
  headers: map[string]string(name='headers'),
  body: OpenApiBResponseBody(name='body'),
}

async function openApiBWithOptions(request: OpenApiBRequest, runtime: Util.RuntimeOptions): OpenApiBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenApiB', '2021-07-14_14-26-02-611', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openApiB(request: OpenApiBRequest): OpenApiBResponse {
  var runtime = new Util.RuntimeOptions{};
  return openApiBWithOptions(request, runtime);
}

model ActionApiRequest {
  x?: int32(name='x'),
  y?: int32(name='y'),
}

model ActionApiResponseBody = {
  sum?: int32(name='sum'),
}

model ActionApiResponse = {
  headers: map[string]string(name='headers'),
  body: ActionApiResponseBody(name='body'),
}

async function actionApiWithOptions(request: ActionApiRequest, runtime: Util.RuntimeOptions): ActionApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ActionApi', '2021-07-14_14-26-02-611', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function actionApi(request: ActionApiRequest): ActionApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return actionApiWithOptions(request, runtime);
}

model AssetInfoTestRequest {
  x?: int32(name='x'),
  y?: int32(name='y'),
}

model AssetInfoTestResponseBody = {
  sum?: int32(name='sum'),
}

model AssetInfoTestResponse = {
  headers: map[string]string(name='headers'),
  body: AssetInfoTestResponseBody(name='body'),
}

async function assetInfoTestWithOptions(request: AssetInfoTestRequest, runtime: Util.RuntimeOptions): AssetInfoTestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssetInfoTest', '2021-07-14_14-26-02-611', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assetInfoTest(request: AssetInfoTestRequest): AssetInfoTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return assetInfoTestWithOptions(request, runtime);
}

