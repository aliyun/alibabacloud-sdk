/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Nlb';
  @version = '2022-04-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddServersToServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='The server group ID.

This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  servers: [ 
    {
      description?: string(name='Description', description='The description of the backend server.

The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at sings (@), underscores (_), and hyphens (-).', example='ECS'),
      port?: int32(name='Port', description='The port that is used by the backend server to provide services. Valid values: **0 to 65535**. If you do not set this parameter, the default value **0** is used.

If multi-port forwarding is enabled, you do not need to set this parameter. The default value 0 is used. NLB forwards requests to the requested ports. To determine whether multi-port forwarding is enabled, call the [ListServerGroups](https://help.aliyun.com/document_detail/445895.html) operation and check the value of the **AnyPortEnabled** parameter.', example='443'),
      serverId: string(name='ServerId', description='The backend server ID.

*   If the server group is of the **Instance** type, set this parameter to the IDs of **Elastic Compute Service (ECS) instances**, **elastic network interfaces (ENIs)**, or **elastic container instances**.
*   If the server group is of the **Ip** type, set ServerId to IP addresses.

This parameter is required.', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', description='The IP address of the backend server. If the server group type is **Ip**, set the ServerId parameter to IP addresses.', example='192.168.6.6'),
      serverType: string(name='ServerType', description='The type of the backend server. Valid values:

*   **Ecs**: the ECS instance
*   **Eni**: the ENI
*   **Eci**: the elastic container instance
*   **Ip**: the IP address

This parameter is required.', example='Ecs'),
      weight?: int32(name='Weight', description='The weight of the backend server. Valid values: **0** to **100**. Default value: **100**. If this parameter is set to **0**, no requests are forwarded to the server.', example='100'),
    }
  ](name='Servers', description='The backend servers that you want to add.

>  You can add up to 200 backend servers in each call.

This parameter is required.', position='Body'),
}

model AddServersToServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-atstuj3rtoptyui****'),
}

model AddServersToServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddServersToServerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddServersToServerGroup  AddServersToServerGroupRequest
  * @return AddServersToServerGroupResponse
 */
async function addServersToServerGroup(request: AddServersToServerGroupRequest): AddServersToServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddServersToServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model AssociateAdditionalCertificatesWithListenerRequest {
  additionalCertificateIds: [ string ](name='AdditionalCertificateIds', description='The additional certificates. You can associate up to 15 additional certificates with a listener in each call.

This parameter is required.', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  listenerId: string(name='ListenerId', description='The listener ID. Only TCPSSL listener IDs are supported.

This parameter is required.', example='lsn-bpn0kn908w4nbw****@80', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model AssociateAdditionalCertificatesWithListenerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-93F8-7FF34B540710'),
}

model AssociateAdditionalCertificatesWithListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateAdditionalCertificatesWithListenerResponseBody(name='body'),
}

/**
  * @description **AssociateAdditionalCertificatesWithListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListListenerCertificates](https://help.aliyun.com/document_detail/615175.html) operation to query the status of the task:
  * *   If the listener is in the **Associating** state, the additional certificates are being associated.
  * *   If the listener is in the **Associated** state, the additional certificates are associated.
  * @param request  the request parameters of AssociateAdditionalCertificatesWithListener  AssociateAdditionalCertificatesWithListenerRequest
  * @return AssociateAdditionalCertificatesWithListenerResponse
 */
async function associateAdditionalCertificatesWithListener(request: AssociateAdditionalCertificatesWithListenerRequest): AssociateAdditionalCertificatesWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAdditionalCertificatesWithListener', 'POST', '/', 'json', true, 'form', request);
}

model AttachCommonBandwidthPackageToLoadBalancerRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-bp1pzf0ym72pu3y76****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model AttachCommonBandwidthPackageToLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AttachCommonBandwidthPackageToLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachCommonBandwidthPackageToLoadBalancerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachCommonBandwidthPackageToLoadBalancer  AttachCommonBandwidthPackageToLoadBalancerRequest
  * @return AttachCommonBandwidthPackageToLoadBalancerResponse
 */
async function attachCommonBandwidthPackageToLoadBalancer(request: AttachCommonBandwidthPackageToLoadBalancerRequest): AttachCommonBandwidthPackageToLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachCommonBandwidthPackageToLoadBalancer', 'POST', '/', 'json', true, 'form', request);
}

model CancelShiftLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone uses one vSwitch and one subnet.

This parameter is required.', example='vsw-sersdf****'),
      zoneId: string(name='ZoneId', description='The zone ID of the NLB instance.

>  You can specify only one zone ID in each call.

You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.

This parameter is required.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mapping between the zone and the vSwitch.

>  You can specify only one zone ID in each call.

This parameter is required.', position='Body'),
}

model CancelShiftLoadBalancerZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model CancelShiftLoadBalancerZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelShiftLoadBalancerZonesResponseBody(name='body'),
}

/**
  * @description Before you call this operation, the zone of the Network Load Balancer (NLB) instance is removed from the DNS record by using the console or calling the [StartShiftLoadBalancerZones](https://help.aliyun.com/document_detail/2411999.html) API operation.
  * @param request  the request parameters of CancelShiftLoadBalancerZones  CancelShiftLoadBalancerZonesRequest
  * @return CancelShiftLoadBalancerZonesResponse
 */
async function cancelShiftLoadBalancerZones(request: CancelShiftLoadBalancerZonesRequest): CancelShiftLoadBalancerZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelShiftLoadBalancerZones', 'POST', '/', 'json', true, 'form', request);
}

model CreateListenerRequest {
  alpnEnabled?: boolean(name='AlpnEnabled', description='Specifies whether to enable Application-Layer Protocol Negotiation (ALPN). Valid values:

*   **true**
*   **false** (default)', example='false', position='Body'),
  alpnPolicy?: string(name='AlpnPolicy', description='The ALPN policy. Valid values:

*   **HTTP1Only**: uses only HTTP 1.x. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
*   **HTTP2Only**: uses only HTTP 2.0.
*   **HTTP2Optional**: preferentially uses HTTP 1.x over HTTP 2.0. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0, and the priority of HTTP 1.0 is higher than the priority of HTTP 2.0.
*   **HTTP2Preferred**: preferentially uses HTTP 2.0 over HTTP 1.x. The priority of HTTP 2.0 is higher than the priority of HTTP 1.1, and the priority of HTTP 1.1 is higher than the priority of HTTP 1.0.

>  This parameter is required if **AlpnEnabled** is set to true.', example='HTTP1Only', position='Body'),
  caCertificateIds?: [ string ](name='CaCertificateIds', description='The certificate authority (CA) certificate. This parameter is supported only by TCLSSL listeners.

>  You can specify only one CA certificate.', position='Body'),
  caEnabled?: boolean(name='CaEnabled', description='Specifies whether to enable mutual authentication. Valid values:

*   **true**
*   **false** (default)', example='false', position='Body'),
  certificateIds?: [ string ](name='CertificateIds', description='The server certificate. This parameter is supported only by TCLSSL listeners.

>  You can specify only one server certificate.', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  cps?: int32(name='Cps', description='The maximum number of new connections per second supported by the listener in each zone (virtual IP address). Valid values: **0** to **1000000**. **0** indicates that the number of connections is unlimited.', example='100', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  endPort?: int32(name='EndPort', description='The last port in the listener port range. Valid values: **0** to **65535**. The port number of the last port must be greater than the port number of the first port.

>  This parameter is required when **ListenerPort** is set to **0**.', example='566', position='Body'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Unit: seconds.

*   If you set **ListenerProtocol** to **TCP** or **TCPSSL**, this parameter can be set to a value ranging from **10** to **900**. Default value: **900**.
*   If **ListenerProtocol** is set to **UDP**, this parameter can be set to a value ranging from **10** to **20**. Default value: **20**.', example='900', minimum=10, maximum=3600, position='Body'),
  listenerDescription?: string(name='ListenerDescription', description='The name of the listener.

The name must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (_), and hyphens (-).', example='tcp_80', position='Body'),
  listenerPort: int32(name='ListenerPort', description='The listener port. Valid values: **0** to **65535**.

If you set this parameter to **0**, the listener listens by port range. If you set this parameter to **0**, you must also set the **StartPort** and **EndPort** parameters.

This parameter is required.', example='80', minimum=0, maximum=65535, position='Body'),
  listenerProtocol: string(name='ListenerProtocol', description='The listener protocol. Valid values: **TCP**, **UDP**, and **TCPSSL**.

This parameter is required.', example='TCP', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  mss?: int32(name='Mss', description='The size of the largest TCP packet segment. Unit: bytes. Valid values: **0** to **1500**. **0** indicates that the maximum segment size (MSS) value of TCP packets remains unchanged.

>  This parameter takes effect only for TCP and TCPSSL listeners.', example='43', position='Body'),
  proxyProtocolEnabled?: boolean(name='ProxyProtocolEnabled', description='Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Valid values:

*   **true**
*   **false** (default)', example='false', position='Body'),
  proxyProtocolV2Config?: {
    ppv2PrivateLinkEpIdEnabled?: boolean(name='Ppv2PrivateLinkEpIdEnabled', description='Specifies whether to use the Proxy protocol to pass the Ppv2PrivateLinkEpId parameter to backend servers. Valid values:

*   **true**
*   **false** (default)', example='false'),
    ppv2PrivateLinkEpsIdEnabled?: boolean(name='Ppv2PrivateLinkEpsIdEnabled', description='Specifies whether to use the Proxy protocol to pass the PrivateLinkEpsId parameter to backend servers. Valid values:

*   **true**
*   **false** (default)', example='false'),
    ppv2VpcIdEnabled?: boolean(name='Ppv2VpcIdEnabled', description='Specifies whether to use the Proxy protocol to pass the VpcId parameter to backend servers. Valid values:

*   **true**
*   **false** (default)', example='false'),
  }(name='ProxyProtocolV2Config', description='Specifies whether to use the Proxy protocol to pass the VpcId, PrivateLinkEpId, and PrivateLinkEpsId parameters to backend servers.', shrink='json', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  secSensorEnabled?: boolean(name='SecSensorEnabled', description='Specifies whether to enable fine-grained monitoring. Valid values:

*   **true**
*   **false** (default)', example='false', position='Body'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy. System security policies and custom security policies are supported.

*   Valid values for system security policies: **tls_cipher_policy_1_0** (default), **tls_cipher_policy_1_1**, **tls_cipher_policy_1_2**, **tls_cipher_policy_1_2_strict**, and **tls_cipher_policy_1_2_strict_with_1_3**.

*   For a custom security policy, enter the policy ID.

    *   For information about creating a custom security policy, see [CreateSecurityPolicy](https://help.aliyun.com/document_detail/445901.html).
    *   For information about querying security policies, see [ListSecurityPolicy](https://help.aliyun.com/document_detail/445900.html).

>  This parameter takes effect only for TCPSSL listeners.', example='tls_cipher_policy_1_0', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='The server group ID.

>  *   If you set **ListenerProtocol** to **TCP**, you can associate the listener with server groups whose backend protocol is **TCP** or **TCP_UDP**. You cannot associate the listener with server groups whose backend protocol is **UDP**.
>  *   If you set **ListenerProtocol** to **UDP**, you can associate the listener with server groups whose backend protocol is **UDP** or **TCP_UDP**. You cannot associate the listener with server groups whose backend protocol is **TCP**.
>  *   If you set **ListenerProtocol** to **TCPSSL**, you can associate the listener with server groups whose backend protocol is **TCP** and have **client IP preservation disabled**. You cannot associate the listener with server groups whose backend protocol is **TCP** and have **client IP preservation enabled** or server groups whose backend protocol is **UDP** or **TCP_UDP**.

This parameter is required.', example='sgp-ppdpc14gdm3x4o****', position='Body'),
  startPort?: int32(name='StartPort', description='The first port in the listener port range. Valid values: **0** to **65535**.

>  This parameter is required when **ListenerPort** is set to **0**.', example='244', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The tag key can be up to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`. The tag value can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='KeyTest'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`. The tag value can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='Test'),
    }
  ](name='Tag', description='The tags.', position='Body'),
}

model CreateListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsn-bp1bpn0kn908w4nbw****@80'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListenerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateListener  CreateListenerRequest
  * @return CreateListenerResponse
 */
async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateListener', 'POST', '/', 'json', true, 'form', request);
}

model CreateLoadBalancerRequest {
  addressIpVersion?: string(name='AddressIpVersion', description='The IP version of the NLB instance. Valid values:

*   **ipv4** (default): IPv4
*   **DualStack**: dual-stack', example='ipv4', position='Body'),
  addressType: string(name='AddressType', description='The type of the IPv4 address used by the NLB instance. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the instance is resolved to the public IP address. The instance is accessible over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the instance is resolved to the private IP address. The instance is accessible only within the virtual private cloud (VPC) where the instance is deployed.

>  To enable a public IPv6 address for a dual-stack NLB instance, call the [EnableLoadBalancerIpv6Internet](https://help.aliyun.com/document_detail/445878.html) operation.

This parameter is required.', example='Internet', position='Body'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance that is associated with the Internet-facing NLB instance.', example='cbwp-bp1vevu8h3ieh****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  deletionProtectionConfig?: {
    enabled?: boolean(name='Enabled', description='Specifies whether to enable the deletion protection feature. Valid values:

*   **true**
*   **false** (default)', example='false'),
    reason?: string(name='Reason', description='The reason why the deletion protection feature is enabled or disabled. The reason must be 2 to 128 characters in length, can contain letters, digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.', example='The instance is running'),
  }(name='DeletionProtectionConfig', description='The configuration of the deletion protection feature.', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerBillingConfig?: {
    payType?: string(name='PayType', description='The billing method of the NLB instance.

Set the value to **PostPay**, which specifies the pay-as-you-go billing method.', example='PostPay'),
  }(name='LoadBalancerBillingConfig', description='The billing settings of the NLB instance.', position='Body'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the NLB instance.

It must be 2 to 128 characters in length, can contain letters, digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.', example='NLB1', position='Body'),
  loadBalancerType?: string(name='LoadBalancerType', description='The type of the Server Load Balancer (SLB) instance. Set the value to **network**, which specifies NLB.', example='network', position='Body'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='The reason for enabling the configuration read-only mode. The reason must be 2 to 128 characters in length, can contain letters, digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.

>  This parameter takes effect only when **Status** is set to **ConsoleProtection**.', example='Service guarantee period'),
    status?: string(name='Status', description='Specifies whether to enable the configuration read-only mode. Valid values:

*   **NonProtection**: does not enable the configuration read-only mode. You cannot set the **Reason** parameter. If the **Reason** parameter is set, the value is cleared.
*   **ConsoleProtection**: enables the configuration read-only mode. You can set the **Reason** parameter.

>  If the parameter is set to **ConsoleProtection**, the configuration read-only mode is enabled. You cannot modify the configurations of the NLB instance in the NLB console. However, you can call API operations to modify the configurations of the NLB instance.', example='ConsoleProtection'),
  }(name='ModificationProtectionConfig', description='The configuration of the configuration read-only mode.', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-atstuj3rtop****', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The tag key can be up to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`. The tag key can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='env'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`. The tag value can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='product'),
    }
  ](name='Tag', description='The tags.', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the VPC where you want to create the NLB instance.

This parameter is required.', example='vpc-bp1b49rqrybk45nio****', position='Body'),
  zoneMappings: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of the elastic IP address (EIP) that is associated with the Internet-facing NLB instance. Each zone is assigned one EIP. An NLB instance can be deployed in up to 10 zones. If the region supports two or more zones, specify at least two zones.', example='eip-bp1aedxso6u80u0qf****'),
      ipv4LocalAddresses?: [ string ](name='Ipv4LocalAddresses', description='The local IPv4 addresses. The IP addresses that the NLB instance uses to communicate with the backend servers. The number of IP addresses must be an even number, which must be at least 2 and at most 8.'),
      ipv6Address?: string(name='Ipv6Address', description='The VIP of the IPv6 version. The IPv6 address that the NLB instance uses to provide external services.', example='2408:400a:d5:3080:b409:840a:ca:e8e5'),
      ipv6LocalAddresses?: [ string ](name='Ipv6LocalAddresses', description='The local IPv6 addresses. The IP addresses that the NLB instance uses to communicate with the backend servers. The number of IP addresses must be an even number, which must be at least 2 and at most 8.'),
      privateIPv4Address?: string(name='PrivateIPv4Address', description='The private virtual IP address (VIP) of the IPv4 version. The private IPv4 address that the NLB instance uses to provide external services.', example='192.168.10.1'),
      vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance. An NLB instance can be deployed in up to 10 zones. If the region supports two or more zones, you must specify at least two zones.

This parameter is required.', example='vsw-sersdf****'),
      zoneId: string(name='ZoneId', description='The ID of the zone where the NLB instance is deployed. An NLB instance can be deployed in up to 10 zones. If the region supports two or more zones, specify at least two zones.

You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.

This parameter is required.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mappings between zones and vSwitches. An NLB instance can be deployed in up to 10 zones. If the region supports two or more zones, you must specify at least two zones.

This parameter is required.', position='Body'),
}

model CreateLoadBalancerResponseBody = {
  loadbalancerId?: string(name='LoadbalancerId', description='The ID of the NLB instance.', example='nlb-83ckzc8d4xlp8o****'),
  orderId?: long(name='OrderId', description='The ID of the order for the NLB instance.', example='20230000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerResponseBody(name='body'),
}

/**
  * @description *   When you create an NLB instance, the service-linked role AliyunServiceRoleForNlb is automatically created and assigned to you.
  * *   **CreateLoadBalancer** is an asynchronous operation. After you send a request, the system returns an instance ID and runs the task in the background. You can call [GetLoadBalancerAttribute](https://help.aliyun.com/document_detail/445873.html) to query the status of an NLB instance.
  *     *   If an NLB instance is in the **Provisioning** state, the NLB instance is being created.
  *     *   If an NLB instance is in the **Active** state, the NLB instance is created.
  * @param request  the request parameters of CreateLoadBalancer  CreateLoadBalancerRequest
  * @return CreateLoadBalancerResponse
 */
async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancer', 'POST', '/', 'json', true, 'form', request);
}

model CreateSecurityPolicyRequest {
  ciphers: [ string ](name='Ciphers', description='The cipher suites supported by the security policy. Valid values of this parameter vary based on TlsVersions. A security policy supports up to 32 cipher suites.

TLSv1.0 and TLSv1.1 support the following cipher suites:

*   **ECDHE-ECDSA-AES128-SHA**
*   **ECDHE-ECDSA-AES256-SHA**
*   **ECDHE-RSA-AES128-SHA**
*   **ECDHE-RSA-AES256-SHA**
*   **AES128-SHA**
*   **AES256-SHA**
*   **DES-CBC3-SHA**

TLSv1.2 supports the following cipher suites:

*   **ECDHE-ECDSA-AES128-SHA**
*   **ECDHE-ECDSA-AES256-SHA**
*   **ECDHE-RSA-AES128-SHA**
*   **ECDHE-RSA-AES256-SHA**
*   **AES128-SHA**
*   **AES256-SHA**
*   **DES-CBC3-SHA**
*   **ECDHE-ECDSA-AES128-GCM-SHA256**
*   **ECDHE-ECDSA-AES256-GCM-SHA384**
*   **ECDHE-ECDSA-AES128-SHA256**
*   **ECDHE-ECDSA-AES256-SHA384**
*   **ECDHE-RSA-AES128-GCM-SHA256**
*   **ECDHE-RSA-AES256-GCM-SHA384**
*   **ECDHE-RSA-AES128-SHA256**
*   **ECDHE-RSA-AES256-SHA384**
*   **AES128-GCM-SHA256**
*   **AES256-GCM-SHA384**
*   **AES128-SHA256**
*   **AES256-SHA256**

TLSv1.3 supports the following cipher suites:

*   **TLS_AES_128_GCM_SHA256**
*   **TLS_AES_256_GCM_SHA384**
*   **TLS_CHACHA20_POLY1305_SHA256**
*   **TLS_AES_128_CCM_SHA256**
*   **TLS_AES_128_CCM_8_SHA256**

This parameter is required.', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the security policy belongs.', example='rg-atstuj3rtop****', position='Body'),
  securityPolicyName?: string(name='SecurityPolicyName', description='The name of the security policy.

It must be 1 to 200 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='TLSCipherPolicy', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. It must be 1 to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`. It can contain letters, digits, underscores (_), periods (.), colons (:), forward slashes (/), equal signs (=), plus signs (+), minus signs (-), and at signs (@).

You can add up to 20 tags for the security policy in each call.', example='KeyTest'),
      value?: string(name='Value', description='The value of the tag. It must be 1 to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`. It can contain letters, digits, underscores (_), periods (.), colons (:), forward slashes (/), equal signs (=), plus signs (+), minus signs (-), and at signs (@).

You can add up to 20 tags for the security policy in each call.', example='ValueTest'),
    }
  ](name='Tag', description='The tags.', position='Body'),
  tlsVersions: [ string ](name='TlsVersions', description='The Transport Layer Security (TLS) versions supported by the security policy. Valid values: **TLSv1.0**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.

This parameter is required.', position='Body'),
}

model CreateSecurityPolicyResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7A8875F-373A-5F48-8484-25B07A61F2AF'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the TLS security policy.', example='tls-bp14bb1e7dll4f****'),
}

model CreateSecurityPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSecurityPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSecurityPolicy  CreateSecurityPolicyRequest
  * @return CreateSecurityPolicyResponse
 */
async function createSecurityPolicy(request: CreateSecurityPolicyRequest): CreateSecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecurityPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateServerGroupRequest {
  addressIPVersion?: string(name='AddressIPVersion', description='The IP version. Valid values:

*   **ipv4** (default): IPv4
*   **DualStack**: dual-stack', example='ipv4', position='Body'),
  anyPortEnabled?: boolean(name='AnyPortEnabled', description='Specifies whether to enable multi-port forwarding. Valid values:

*   **true:**
*   **false** (default)', example='false', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', description='Specifies whether to enable connection draining. Valid values:

*   **true:**
*   **false** (default)', example='false', position='Body'),
  connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', description='Specifies a timeout period for connection draining. Unit: seconds Valid values: **0** to **900**.', example='10', minimum=0, maximum=3600, position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true:**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that you want to use for health checks on backend servers.

Valid values: **0** to **65535**.

Default value: **0**. If you set this parameter to 0, the port that the backend server uses to provide services is also used for health checks.', example='0'),
    healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period for a health check response. Unit: seconds Valid values: **1** to **300** Default value: **5**.', example='5'),
    healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that is used for health checks. Valid values:

*   **$SERVER_IP**: the internal IP address of a backend server.
*   **domain**: a domain name. The domain name must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), and periods (.).

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.', example='$SERVER_IP'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable health checks. Valid values:

*   **true** (default)
*   **false**', example='true'),
    healthCheckExp?: string(name='HealthCheckExp', description='The response string that backend servers return to UDP listeners for health checks. The string must be 1 to 512 characters in length and can contain only letters and digits.', example='ok'),
    healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode', description='The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: **http_2xx** (default), **http_3xx**, **http_4xx**, and **http_5xx**.

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', example='HTTP1.0'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds Default value: **5**

*   If you set **HealthCheckType** to **TCP** or **HTTP**, valid values are **1** to **50**.
*   If you set **HealthCheckType** to **UDP**, valid values are **1** to **300**. Set the health check interval equal to or larger than the response timeout period to ensure that UDP response timeouts are not determined as no responses.', example='5'),
    healthCheckReq?: string(name='HealthCheckReq', description='The request string that UDP listeners send to backend servers for health checks. The string must be 1 to 512 characters in length and can contain only letters and digits.', example='hello'),
    healthCheckType?: string(name='HealthCheckType', description='The protocol that you want to use for health checks. Valid values:

*   **TCP**
*   **HTTP**
*   **UDP**', example='TCP'),
    healthCheckUrl?: string(name='HealthCheckUrl', description='The URL path to which health check probes are sent.

The URL path must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: ` - / . % ? # &  `. It must start with a forward slash (/).

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.', example='/test/index.html'),
    healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from **fail** to **success**.

Valid values: **2** to **10**

Default value: **2**', example='2'),
    httpCheckMethod?: string(name='HttpCheckMethod', description='The HTTP method that is used for health checks. Valid values: **GET** (default) and **HEAD**.

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.', example='GET'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from **success** to **fail**.

Valid values: **2** to **10**

Default value: **2**', example='2'),
  }(name='HealthCheckConfig', description='The configurations of health checks.', position='Body'),
  preserveClientIpEnabled?: boolean(name='PreserveClientIpEnabled', description='Specifies whether to enable client IP preservation. Valid values:

*   **true** (default)
*   **false**

>  If you set this parameter to **true** and **Protocol** to **TCP**, the server group cannot be associated with **TCPSSL** listeners.', example='true', position='Body'),
  protocol?: string(name='Protocol', description='The protocol between the NLB instance and backend servers. Valid values:

*   **TCP** (default)
*   **UDP**
*   **TCP_UDP**

> *   If you set this parameter to **UDP**, you can associate the server group only with **UDP** listeners.
> *   If you set this parameter to **TCP** and **PreserveClientIpEnabled** to **true**, you can associate the server group only with **TCP** listeners.
> *   If you set this parameter to **TCP** and **PreserveClientIpEnabled** to **false**, you can associate the server group with **TCPSSL** and **TCP** listeners.
> *   If you set this parameter to **TCP_UDP**, you can associate the server group with **TCP** and **UDP** listeners.', example='TCP', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the server group belongs.', example='rg-atstuj3rtop****', position='Body'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **Wrr** (default): weighted round-robin. Backend servers with higher weights receive more requests.
*   **Wlc**: weighted least connections. Requests are distributed based on the weights and the number of connections to backend servers. If multiple backend servers have the same weight, requests are forwarded to the backend server with the least connections.
*   **rr**: Requests are forwarded to backend servers in sequence.
*   **sch**: source IP hash. Requests from the same source IP address are forwarded to the same backend server.
*   **tch**: consistent hashing based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same four factors are forwarded to the same backend server.
*   **qch**: QUIC ID hash. Requests that contain the same QUIC ID are forwarded to the same backend server.

>  QUIC ID hash is supported only when the backend protocol is set to UDP.', example='Wrr', position='Body'),
  serverGroupName: string(name='ServerGroupName', description='The server group name.

The name must be 2 to 128 characters in length, can contain digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.

This parameter is required.', example='NLB_ServerGroup', position='Body'),
  serverGroupType?: string(name='ServerGroupType', description='The type of the server group. Valid values:

*   **Instance** (default): allows you to specify servers of the **Ecs**, **Eni**, or **Eci** type.
*   **Ip**: allows you to specify IP addresses.', example='Instance', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The tag key can be up to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`. The tag key can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='env'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`. The tag value can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='product'),
    }
  ](name='Tag', description='The tags.', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) where the server group is deployed.

>  If **ServerGroupType** is set to **Instance**, only servers in the specified VPC can be added to the server group.

This parameter is required.', example='vpc-bp15zckdt37pq72zv****', position='Body'),
}

model CreateServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtoptyui****'),
}

model CreateServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerGroupResponseBody(name='body'),
}

/**
  * @description **CreateServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetJobStatus](https://help.aliyun.com/document_detail/445904.html) operation to query the creation status of the task.
  *    - If the task is in the **Succeeded** status, the server group is created.
  * -    If the task is in the **Processing** status, the server group is being created.
  * @param request  the request parameters of CreateServerGroup  CreateServerGroupRequest
  * @return CreateServerGroupResponse
 */
async function createServerGroup(request: CreateServerGroupRequest): CreateServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteListenerRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  listenerId: string(name='ListenerId', description='The listener ID.

This parameter is required.', example='lsn-bp1bpn0kn908w4nbw****@80', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model DeleteListenerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListenerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteListener  DeleteListenerRequest
  * @return DeleteListenerResponse
 */
async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteListener', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLoadBalancerRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-wb7r6dlwetvt5j****', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model DeleteLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DeleteLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLoadBalancerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLoadBalancer  DeleteLoadBalancerRequest
  * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoadBalancer', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSecurityPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  securityPolicyId: string(name='SecurityPolicyId', description='The ID of the TLS security policy.

This parameter is required.', example='tls-bp14bb1e7dll4f****', position='Body'),
}

model DeleteSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7A8875F-373A-5F48-8484-25B07A61F2AF'),
}

model DeleteSecurityPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecurityPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSecurityPolicy  DeleteSecurityPolicyRequest
  * @return DeleteSecurityPolicyResponse
 */
async function deleteSecurityPolicy(request: DeleteSecurityPolicyRequest): DeleteSecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityPolicy', 'POST', '/', 'json', true, 'form', request);
}

model DeleteServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='The server group ID.

This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
}

model DeleteServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServerGroupResponseBody(name='body'),
}

/**
  * @description You can delete server groups that are not associated with listeners.
  * @param request  the request parameters of DeleteServerGroup  DeleteServerGroupRequest
  * @return DeleteServerGroupResponse
 */
async function deleteServerGroup(request: DeleteServerGroupRequest): DeleteServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model DescribeHdMonitorRegionConfigRequest {
  regionId?: string(name='RegionId', description='The ID of the region where the resources are deployed.', example='cn-hangzhou', position='Query'),
}

model DescribeHdMonitorRegionConfigResponseBody = {
  logProject?: string(name='LogProject', description='The name of the Log Service project.', example='hdmonitor-cn-hangzhou-223794579283657556'),
  metricStore?: string(name='MetricStore', description='The name of the Metricstore in Simple Log Service.', example='hdmonitor-cn-hangzhou-metricStore-1'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to obtain the region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DescribeHdMonitorRegionConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHdMonitorRegionConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHdMonitorRegionConfig  DescribeHdMonitorRegionConfigRequest
  * @return DescribeHdMonitorRegionConfigResponse
 */
async function describeHdMonitorRegionConfig(request: DescribeHdMonitorRegionConfigRequest): DescribeHdMonitorRegionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHdMonitorRegionConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The supported natural language. Valid values:

*   **zh-CN**: Chinese
*   **en-US** (default): English
*   **ja**: Japanese', example='en-US', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  serviceCode?: string(name='ServiceCode', description='The service code. Set the value to **nlb**.', example='nlb', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='us-east-1'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region service.', example='nlb.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='A list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The supported natural language. Valid values:

*   **zh-CN**: Chinese
*   **en-US** (default): English
*   **ja**: Japanese', example='zh-CN', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the zone belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  serviceCode?: string(name='ServiceCode', description='The service code. Set the value to **nlb**.', example='nlb', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='The zone name.', example='ap_southeast_2'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-g'),
    }
  ](name='Zones', description='A list of zones.'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeZones  DescribeZonesRequest
  * @return DescribeZonesResponse
 */
async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachCommonBandwidthPackageFromLoadBalancerRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-bp1pzf0ym72pu3y76****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model DetachCommonBandwidthPackageFromLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DetachCommonBandwidthPackageFromLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachCommonBandwidthPackageFromLoadBalancerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachCommonBandwidthPackageFromLoadBalancer  DetachCommonBandwidthPackageFromLoadBalancerRequest
  * @return DetachCommonBandwidthPackageFromLoadBalancerResponse
 */
async function detachCommonBandwidthPackageFromLoadBalancer(request: DetachCommonBandwidthPackageFromLoadBalancerRequest): DetachCommonBandwidthPackageFromLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachCommonBandwidthPackageFromLoadBalancer', 'POST', '/', 'json', true, 'form', request);
}

model DisableLoadBalancerIpv6InternetRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model DisableLoadBalancerIpv6InternetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DisableLoadBalancerIpv6InternetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableLoadBalancerIpv6InternetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableLoadBalancerIpv6Internet  DisableLoadBalancerIpv6InternetRequest
  * @return DisableLoadBalancerIpv6InternetResponse
 */
async function disableLoadBalancerIpv6Internet(request: DisableLoadBalancerIpv6InternetRequest): DisableLoadBalancerIpv6InternetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableLoadBalancerIpv6Internet', 'POST', '/', 'json', true, 'form', request);
}

model DisassociateAdditionalCertificatesWithListenerRequest {
  additionalCertificateIds: [ string ](name='AdditionalCertificateIds', description='The additional certificates. You can disassociate up to 15 additional certificates in each call.

This parameter is required.', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: Validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  listenerId: string(name='ListenerId', description='The listener ID. Only TCP/SSL listener IDs are supported.

This parameter is required.', example='lsn-bpn0kn908w4nbw****@80', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model DisassociateAdditionalCertificatesWithListenerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DisassociateAdditionalCertificatesWithListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisassociateAdditionalCertificatesWithListenerResponseBody(name='body'),
}

/**
  * @description **DisassociateAdditionalCertificatesWithListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListListenerCertificates](https://help.aliyun.com/document_detail/615175.html) operation to query the status of the task:
  * *   If an additional certificate is in the **Dissociating** state, the additional certificate is being disassociated.
  * *   If an additional certificate is in the **Dissociated** state, the additional certificate is disassociated.
  * @param request  the request parameters of DisassociateAdditionalCertificatesWithListener  DisassociateAdditionalCertificatesWithListenerRequest
  * @return DisassociateAdditionalCertificatesWithListenerResponse
 */
async function disassociateAdditionalCertificatesWithListener(request: DisassociateAdditionalCertificatesWithListenerRequest): DisassociateAdditionalCertificatesWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociateAdditionalCertificatesWithListener', 'POST', '/', 'json', true, 'form', request);
}

model EnableLoadBalancerIpv6InternetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The NLB instance ID.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model EnableLoadBalancerIpv6InternetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model EnableLoadBalancerIpv6InternetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableLoadBalancerIpv6InternetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableLoadBalancerIpv6Internet  EnableLoadBalancerIpv6InternetRequest
  * @return EnableLoadBalancerIpv6InternetResponse
 */
async function enableLoadBalancerIpv6Internet(request: EnableLoadBalancerIpv6InternetRequest): EnableLoadBalancerIpv6InternetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableLoadBalancerIpv6Internet', 'POST', '/', 'json', true, 'form', request);
}

model GetJobStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  jobId: string(name='JobId', description='The ID of the asynchronous job.

This parameter is required.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****', position='Query'),
}

model GetJobStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  status?: string(name='Status', description='The state of the task. Valid values:

*   **Succeeded**: The task is successful.
*   **processing**: The ticket is being executed.', example='Succeeded'),
}

model GetJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJobStatus  GetJobStatusRequest
  * @return GetJobStatusResponse
 */
async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetListenerAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  listenerId: string(name='ListenerId', description='The listener ID.

This parameter is required.', example='lsn-bp1bpn0kn908w4nbw****@233', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model GetListenerAttributeResponseBody = {
  alpnEnabled?: boolean(name='AlpnEnabled', description='Indicates whether Application-Layer Protocol Negotiation (ALPN) is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
  alpnPolicy?: string(name='AlpnPolicy', description='The ALPN policy. Valid values:

*   **HTTP1Only**
*   **HTTP2Only**
*   **HTTP2Preferred**
*   **HTTP2Optional**', example='HTTP1Only'),
  caCertificateIds?: [ string ](name='CaCertificateIds', description='The CA certificates. Only one CA certificate is supported.

>  This parameter takes effect only for listeners that use SSL over TCP.'),
  caEnabled?: boolean(name='CaEnabled', description='Indicates whether mutual authentication is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
  certificateIds?: [ string ](name='CertificateIds', description='The server certificates. Only one server certificate is supported.

>  This parameter takes effect only for listeners that use SSL over TCP.'),
  cps?: int32(name='Cps', description='The maximum number of new connections per second supported by the listener in each zone (virtual IP address). Valid values: **0** to **1000000**. **0** indicates that the number of connections is unlimited.', example='1000'),
  endPort?: string(name='EndPort', description='The last port in the listening port range. Valid values: **0** to **65535**. The number of the last port must be smaller than that of the first port.', example='455'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period of an idle connection. Unit: seconds. Valid values: **1** to **900**.', example='900'),
  listenerDescription?: string(name='ListenerDescription', description='The name of the listener.

The name must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (_), and hyphens (-).', example='tcpssl_443'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsn-bp1bpn0kn908w4nbw****@233'),
  listenerPort?: int32(name='ListenerPort', description='The listening port. Valid values: **0** to **65535**. A value of **0** specifies all ports. If you set the value to **0**, you must also set the **StartPort** and **EndPort** parameters.', example='233'),
  listenerProtocol?: string(name='ListenerProtocol', description='The listening protocol. Valid values: **TCP**, **UDP**, and **TCPSSL**.', example='TCPSSL'),
  listenerStatus?: string(name='ListenerStatus', description='The status of the listener. Valid values:

*   **Provisioning**: The listener is being created.
*   **Running**: The listener is running.
*   **Configuring**: The listener is being configured.
*   **Stopping**: The listener is being stopped.
*   **Stopped**: The listener is stopped.
*   **Starting**: The listener is being started.
*   **Deleting**: The listener is being deleted.
*   **Deleted**: The listener is deleted.', example='Running'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the NLB instance.', example='nlb-83ckzc8d4xlp8o****'),
  mss?: int32(name='Mss', description='The size of the largest TCP segment. Unit: bytes. Valid values: **0** to **1500**. **0** specifies that the maximum segment size remains unchanged.

>  This parameter is supported only by listeners that use SSL over TCP.', example='166'),
  proxyProtocolEnabled?: boolean(name='ProxyProtocolEnabled', description='Indicates whether the Proxy protocol is used to pass client IP addresses to backend servers. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
  proxyProtocolV2Config?: {
    ppv2PrivateLinkEpIdEnabled?: boolean(name='Ppv2PrivateLinkEpIdEnabled', description='Indicates whether the Proxy protocol passes the PrivateLinkEpId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
    ppv2PrivateLinkEpsIdEnabled?: boolean(name='Ppv2PrivateLinkEpsIdEnabled', description='Indicates whether the Proxy protocol passes the PrivateLinkEpsId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
    ppv2VpcIdEnabled?: boolean(name='Ppv2VpcIdEnabled', description='Indicates whether the Proxy protocol passes the VpcId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
  }(name='ProxyProtocolV2Config', description='Indicates whether the Proxy protocol passes the VpcId, PrivateLinkEpId, and PrivateLinkEpsId parameters to backend servers.'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  secSensorEnabled?: boolean(name='SecSensorEnabled', description='Indicates whether fine-grained monitoring is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy. System security policies and custom security policies are supported.

- Valid values: **tls_cipher_policy_1_0**, **tls_cipher_policy_1_1**, **tls_cipher_policy_1_2**, **tls_cipher_policy_1_2_strict**, and **tls_cipher_policy_1_2_strict_with_1_3**.

- Custom security policy: the ID of the custom security policy.
    - For more information about how to create a custom security policy, see [CreateSecurityPolicy](https://help.aliyun.com/document_detail/2399231.html) .

    - For more information about how to query security policies, see [ListSecurityPolicy](https://help.aliyun.com/document_detail/2399234.html) .


>  This parameter takes effect only for listeners that use SSL over TCP.', example='tls_cipher_policy_1_0'),
  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-ppdpc14gdm3x4o****'),
  startPort?: string(name='StartPort', description='The first port in the listening port range. Valid values: **0** to **65535**.', example='233'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key.', example='ac-cus-tag-4'),
      tagValue?: string(name='TagValue', description='The tag value.', example='ON'),
    }
  ](name='Tags', description='The tags.'),
}

model GetListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListenerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetListenerAttribute  GetListenerAttributeRequest
  * @return GetListenerAttributeResponse
 */
async function getListenerAttribute(request: GetListenerAttributeRequest): GetListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetListenerHealthStatusRequest {
  listenerId: string(name='ListenerId', description='The ID of the listener on the NLB instance.

This parameter is required.', example='lsn-bp1bpn0kn908w4nbw****@80', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model GetListenerHealthStatusResponseBody = {
  listenerHealthStatus?: [ 
    {
      listenerId?: string(name='ListenerId', description='The ID of the listener of the NLB instance.', example='lsn-bp1bpn0kn908w4nbw****@80'),
      listenerPort?: int32(name='ListenerPort', description='The listening port.', example='80'),
      listenerProtocol?: string(name='ListenerProtocol', description='The listening protocol. Valid values: **TCP**, **UDP**, and **TCPSSL**.', example='TCPSSL'),
      serverGroupInfos?: [ 
        {
          heathCheckEnabled?: boolean(name='HeathCheckEnabled', description='Indicates whether the health check feature is enabled. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='The backend port.', example='80'),
              reason?: {
                reasonCode?: string(name='ReasonCode', description='The reason why the **status** is abnormal. Valid values:

*   **CONNECT_TIMEOUT**: The NLB instance failed to connect to the backend server within the specified period of time.
*   **CONNECT_FAILED**: The NLB instance failed to connect to the backend server.
*   **RECV_RESPONSE_TIMEOUT**: The NLB instance failed to receive a response from the backend server within the specified period of time.
*   **CONNECT_INTERRUPT**: The connection between the health check and the backend servers was interrupted.
*   **HTTP_CODE_NOT_MATCH**: The HTTP status code from the backend servers was not the expected one.
*   **HTTP_INVALID_HEADER**: The format of the response from the backend servers is invalid.', example='CONNECT_TIMEOUT'),
              }(name='Reason', description='The cause of the health check failure.'),
              serverId?: string(name='ServerId', description='The ID of the backend server.', example='i-bp1bt75jaujl7tjl****'),
              serverIp?: string(name='ServerIp', description='The IP address of the backend server.', example='192.168.8.10'),
              status?: string(name='Status', description='The health check status. Valid values:

*   **Initial**: indicates that health checks are configured for the NLB instance, but no data was found.
*   **Unhealthy**: indicates that the backend server consecutively fails health checks.
*   **Unavailable**: indicates that health checks are disabled.', example='Initial'),
            }
          ](name='NonNormalServers', description='A list of unhealthy backend servers.'),
          serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-ppdpc14gdm3x4o****'),
        }
      ](name='ServerGroupInfos', description='The information about the server groups.'),
    }
  ](name='ListenerHealthStatus', description='The health check status of the server group of the listener.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

- If **NextToken** is empty, it indicates that no next query is to be sent.
- If a value of **NextToken** is returned, the value is the token used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='10'),
}

model GetListenerHealthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListenerHealthStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetListenerHealthStatus  GetListenerHealthStatusRequest
  * @return GetListenerHealthStatusResponse
 */
async function getListenerHealthStatus(request: GetListenerHealthStatusRequest): GetListenerHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetListenerHealthStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='The NLB instance ID.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model GetLoadBalancerAttributeResponseBody = {
  addressIpVersion?: string(name='AddressIpVersion', description='The protocol version. Valid values:

*   **ipv4**: IPv4
*   **DualStack**: dual stack', example='ipv4'),
  addressType?: string(name='AddressType', description='The IPv4 network type of the NLB instance. Valid values:

*   **Internet** The domain name of the NLB instance is resolved to the public IP address. Therefore, the NLB instance can be accessed over the Internet.
*   **Intranet** The domain name of the NLB instance is resolved to the private IP address. Therefore, the NLB instance can be accessed over the VPC in which the NLB instance is deployed.', example='Internet'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the EIP bandwidth plan.', example='cbwp-bp1vevu8h3ieh****'),
  cps?: int32(name='Cps', description='The maximum number of new connections per second supported by the NLB instance in each zone (virtual IP address). Valid values: **0** to **1000000**.

**0** indicates that the number of connections is unlimited.', example='100'),
  createTime?: string(name='CreateTime', description='The time when the NLB instance was created. This value is a UNIX timestamp.

Unit: milliseconds.', example='2022-07-02T02:49:05Z'),
  crossZoneEnabled?: boolean(name='CrossZoneEnabled', description='Indicates whether the NLB instance is accessible across zones. Valid values:

*   **true**
*   **false**', example='true'),
  DNSName?: string(name='DNSName', description='The domain name of the NLB instance.', example='nlb-wb7r6dlwetvt5j****.cn-hangzhou.nlb.aliyuncs.com'),
  deletionProtectionConfig?: {
    enabled?: boolean(name='Enabled', description='Specifies whether to enable deletion protection. Valid values:

*   **true**: yes
*   **false** (default): no', example='true'),
    enabledTime?: string(name='EnabledTime', description='The time when the deletion protection feature was enabled. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2022-11-02T02:49:05Z'),
    reason?: string(name='Reason', description='The reason why the deletion protection feature is enabled or disabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The value must start with a letter.', example='create-by-mse-can-not-delete'),
  }(name='DeletionProtectionConfig', description='The configuration of the deletion protection feature.'),
  ipv6AddressType?: string(name='Ipv6AddressType', description='The IPv6 network type of the NLB instance. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the NLB instance is resolved to the public IP address. Therefore, the NLB instance can be accessed over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the NLB instance is resolved to the private IP address. In this case, the NLB instance can be accessed over the VPC where the NLB instance is deployed.', example='Internet'),
  loadBalancerBillingConfig?: {
    payType?: string(name='PayType', description='The billing method of the NLB instance. Set the value to **PostPay**, which specifies the pay-as-you-go billing method.', example='PostPay'),
  }(name='LoadBalancerBillingConfig', description='The billing information of the NLB instance.'),
  loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', description='The status of workloads on the NLB instance. Valid values:

*   **Abnormal**
*   **Normal**', example='Normal'),
  loadBalancerId?: string(name='LoadBalancerId', description='The NLB instance ID.', example='nlb-83ckzc8d4xlp8o****'),
  loadBalancerName?: string(name='LoadBalancerName', description='The NLB instance name.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.', example='NLB1'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The NLB instance status. Valid values:

*   **Inactive**: The NLB instance is disabled. The listeners of NLB instances in the Inactive state do not forward traffic.
*   **Active**: The NLB instance is running.
*   **Provisioning**: The NLB instance is being created.
*   **Configuring**: The NLB instance is being modified.
*   **CreateFailed**: The system failed to create the NLB instance. In this case, you are not charged for the NLB instance. You can only delete the NLB instance.', example='Active'),
  loadBalancerType?: string(name='LoadBalancerType', description='The type of the Server Load Balancer (SLB) instance. Set the value to **network**, which specifies NLB.', example='network'),
  modificationProtectionConfig?: {
    enabledTime?: string(name='EnabledTime', description='The time when the modification protection feature was enabled. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-12-02T02:49:05Z'),
    reason?: string(name='Reason', description='The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The value must start with a letter.

>  This parameter takes effect only if the **Status** parameter is set to **ConsoleProtection**.', example='create-by-mse-cannot-modify'),
    status?: string(name='Status', description='Specifies whether to enable the configuration read-only mode. Valid values:

*   **NonProtection**: does not enable the configuration read-only mode. You cannot set the **Reason** parameter. If the **Reason** parameter is set, the value is cleared.
*   **ConsoleProtection**: enables the configuration read-only mode. You can set the **Reason** parameter.

>  If you set this parameter to **ConsoleProtection**, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.', example='ConsoleProtection'),
  }(name='ModificationProtectionConfig', description='The configuration of the configuration read-only mode.'),
  operationLocks?: [ 
    {
      lockReason?: string(name='LockReason', description='The reason why the NLB instance is locked.', example='security'),
      lockType?: string(name='LockType', description='The type of the lock. Valid values:

*   **SecurityLocked**: The NLB instance is locked due to security reasons.
*   **RelatedResourceLocked**: The NLB instance is locked due to other resources associated with the NLB instance.
*   **FinancialLocked**: The NLB instance is locked due to overdue payments.
*   **ResidualLocked**: The NLB instance is locked because the associated resources have overdue payments and the resources are released.', example='SecurityLocked'),
    }
  ](name='OperationLocks', description='The information about the locked NLB instance. This parameter is returned only when `LoadBalancerBussinessStatus` is **Abnormal**.'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of the security group associated with the NLB instance.'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key.', example='KeyTest'),
      tagValue?: string(name='TagValue', description='The tag value.', example='ValueTest'),
    }
  ](name='Tags', description='The tags.'),
  vpcId?: string(name='VpcId', description='The VPC ID of the NLB instance.', example='vpc-bp1b49rqrybk45nio****'),
  zoneMappings?: [ 
    {
      loadBalancerAddresses?: [ 
        {
          allocationId?: string(name='AllocationId', description='The ID of the elastic IP address (EIP).', example='eip-bp1aedxso6u80u0qf****'),
          eniId?: string(name='EniId', description='The ID of the elastic network interface (ENI).', example='eni-bp12f1xhs5yal61a****'),
          ipv4LocalAddresses?: [ string ](name='Ipv4LocalAddresses', description='The IPv4 link-local addresses. The IP addresses that the NLB instance uses to communicate with the backend servers.'),
          ipv6Address?: string(name='Ipv6Address', description='The IPv6 address of the NLB instance.', example='2001:db8:1:1:1:1:1:1'),
          ipv6LocalAddresses?: [ string ](name='Ipv6LocalAddresses', description='The IPv6 link-local addresses. The IP addresses that the NLB instance uses to communicate with the backend servers.'),
          privateIPv4Address?: string(name='PrivateIPv4Address', description='The private IPv4 address of the NLB instance.', example='192.168.3.32'),
          privateIPv4HcStatus?: string(name='PrivateIPv4HcStatus', description='The health status of the private IPv4 address of the NLB instance. Valid values:

*   **Healthy**
*   **Unhealthy**

> This parameter is returned only when the **Status** of the zone is **Active**.', example='Healthy'),
          privateIPv6HcStatus?: string(name='PrivateIPv6HcStatus', description='The health status of the IPv6 address of the NLB instance. Valid values:

*   **Healthy**
*   **Unhealthy**

> This parameter is returned only when the **Status** of the zone is **Active**.', example='Healthy'),
          publicIPv4Address?: string(name='PublicIPv4Address', description='The public IPv4 address of the NLB instance.', example='120.XX.XX.69'),
        }
      ](name='LoadBalancerAddresses', description='The information about the IP addresses used by the NLB instance.'),
      status?: string(name='Status', description='The zone status. Valid values:

*   **Active**: The zone is available.
*   **Stopped**: The zone is disabled. You can set the zone to this status only by using Cloud Architect Design Tools (CADT).
*   **Shifted**: The DNS record is removed.
*   **Starting**: The zone is being enabled. You can set the zone to this status only by using CADT.
*   **Stopping** You can set the zone to this status only by using CADT.', example='Active'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone contains one vSwitch and one subnet.', example='vsw-bp1rmcrwg3erh1fh8****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone. You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The list of zones and vSwitches in the zones. You must specify 2 to 10 zones.'),
}

model GetLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoadBalancerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLoadBalancerAttribute  GetLoadBalancerAttributeRequest
  * @return GetLoadBalancerAttributeResponse
 */
async function getLoadBalancerAttribute(request: GetLoadBalancerAttributeRequest): GetLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoadBalancerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ListListenerCertificatesRequest {
  certType?: string(name='CertType', description='The type of the certificate. Valid values:

*   **Ca**: CA certificate.
*   **Server**: server certificate', example='Ca', position='Body'),
  certificateIds?: [ string ](name='CertificateIds', description='The server certificate. Only one server certificate is supported.

>  This parameter takes effect only for TCP/SSL listeners.', position='Body'),
  listenerId: string(name='ListenerId', description='The ID of the listener. Specify the ID of a listener that uses SSL over TCP.

This parameter is required.', example='lsn-j49ht1jxxqyg45****@80', position='Body'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **20**.', example='20', minimum=1, maximum=50, position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the Network Load Balancer (NLB) instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model ListListenerCertificatesResponseBody = {
  certificateIds?: [ string ](name='CertificateIds', description='The server certificates.'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The ID of the certificate. Only one server certificate is supported.', example='12315790343_166f8204689_1714763408_70998****'),
      certificateType?: string(name='CertificateType', description='The type of the certificate.', example='Server'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the certificate is the default certificate of the listener. Valid values:

*   **true**
*   **false**', example='true'),
      status?: string(name='Status', description='Indicates whether the certificate is associated with the listener. Valid values:

*   **Associating**
*   **Associated**
*   **Diassociating**', example='Associating'),
    }
  ](name='Certificates', description='The certificates.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page. Valid values: **1** to **50**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2198BD6D-9EBB-5E1C-9C48-E0ABB79CF831'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListListenerCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListenerCertificatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListListenerCertificates  ListListenerCertificatesRequest
  * @return ListListenerCertificatesResponse
 */
async function listListenerCertificates(request: ListListenerCertificatesRequest): ListListenerCertificatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenerCertificates', 'POST', '/', 'json', true, 'form', request);
}

model ListListenersRequest {
  listenerIds?: [ string ](name='ListenerIds', description='The listener IDs. You can specify up to 20 listeners.', position='Query'),
  listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol. Valid values: **TCP**, **UDP**, and **TCPSSL**.', example='TCPSSL', position='Query'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='The IDs of the NLB instances. You can specify up to 20 instances.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return in each call. Valid values: **1** to **100**. Default value: **20**', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token used to specify a particular page of results. Valid values:

*   Leave this parameter empty for the first query or the only query.
*   Set this parameter to the value of NextToken obtained from the previous query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  secSensorEnabled?: string(name='SecSensorEnabled', description='Specifies whether to enable fine-grained monitoring. Valid values:

*   **true**
*   **false**', example='false', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify up to 20 tags. The tag key cannot be an empty string.

It can be up to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The value of the tag. You can specify up to 20 tags. The tag value can be an empty string.

It can be up to 128 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      alpnEnabled?: boolean(name='AlpnEnabled', description='Indicates whether Application-Layer Protocol Negotiation (ALPN) is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      alpnPolicy?: string(name='AlpnPolicy', description='The ALPN policy. Valid values:

*   **HTTP1Only**
*   **HTTP2Only**
*   **HTTP2Preferred**
*   **HTTP2Optional**', example='HTTP1Only'),
      caCertificateIds?: [ string ](name='CaCertificateIds', description='A list of CA certificates.

>  This parameter takes effect only for listeners that use SSL over TCP.'),
      caEnabled?: boolean(name='CaEnabled', description='Indicates whether mutual authentication is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      certificateIds?: [ string ](name='CertificateIds', description='The server certificate.

>  This parameter takes effect only for listeners that use SSL over TCP.'),
      cps?: int32(name='Cps', description='The maximum number of new connections per second supported by the listener in each zone (virtual IP address). Valid values: **0** to **1000000**. **0** indicates that the number of connections is unlimited.', example='1000'),
      endPort?: string(name='EndPort', description='The last port in the listener port range.', example='455'),
      idleTimeout?: int32(name='IdleTimeout', description='The timeout period of idle connections. Unit: seconds. Valid values: **1** to **900**. Default value: **900**.', example='900'),
      listenerDescription?: string(name='ListenerDescription', description='The name of the listener.

The name must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (_), and hyphens (-).', example='tcpssl_443'),
      listenerId?: string(name='ListenerId', description='The listener ID.', example='lsn-ga6sjjcll6ou34l1et****'),
      listenerPort?: int32(name='ListenerPort', description='The information about the listener port of your server.', example='443'),
      listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol. Valid values: **TCP**, **UDP**, and **TCPSSL**.', example='TCPSSL'),
      listenerStatus?: string(name='ListenerStatus', description='The status of the listener. Valid values:

*   **Provisioning**: The listener is being created.
*   **Running**: The listener is running.
*   **Configuring**: The listener is being configured.
*   **Stopping**: The listener is being stopped.
*   **Stopped**: The listener is stopped.
*   **Starting**: The listener is being started.
*   **Deleting**: The listener is being deleted.
*   **Deleted**: The listener is deleted.', example='Running'),
      loadBalancerId?: string(name='LoadBalancerId', description='The CLB instance ID.', example='nlb-83ckzc8d4xlp8o****'),
      mss?: int32(name='Mss', description='The size of the largest TCP packet segment. Unit: bytes. Valid values: **0** to **1500**. **0** indicates that the Mss value of TCP packets remains unchanged.

>  This parameter takes effect only for listeners that use SSL over TCP.', example='200'),
      proxyProtocolEnabled?: boolean(name='ProxyProtocolEnabled', description='Indicates whether the Proxy protocol passes source client IP addresses to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
      proxyProtocolV2Config?: {
        ppv2PrivateLinkEpIdEnabled?: boolean(name='Ppv2PrivateLinkEpIdEnabled', description='Indicates whether the Proxy protocol passes the PrivateLinkEpId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
        ppv2PrivateLinkEpsIdEnabled?: boolean(name='Ppv2PrivateLinkEpsIdEnabled', description='Indicates whether the Proxy protocol passes the PrivateLinkEpsId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
        ppv2VpcIdEnabled?: boolean(name='Ppv2VpcIdEnabled', description='Indicates whether the Proxy protocol passes the VpcId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
      }(name='ProxyProtocolV2Config', description='Indicates whether the Proxy protocol passes the VpcId, PrivateLinkEpId, and PrivateLinkEpsId parameters to backend servers.'),
      regionId?: string(name='RegionId', description='The region ID of the NLB instance.', example='cn-hangzhou'),
      secSensorEnabled?: boolean(name='SecSensorEnabled', description='Indicates whether fine-grained monitoring is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy.

>  This parameter takes effect only for listeners that use SSL over TCP.', example='tls_cipher_policy_1_1'),
      serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-ppdpc14gdm3x4o****'),
      startPort?: string(name='StartPort', description='The first port in the listener port range.', example='233'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Created'),
          value?: string(name='Value', description='The tag value.', example='TF'),
        }
      ](name='Tags', description='A list of tags.'),
    }
  ](name='Listeners', description='The listeners.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, it indicates that no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='4'),
}

model ListListenersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListenersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListListeners  ListListenersRequest
  * @return ListListenersResponse
 */
async function listListeners(request: ListListenersRequest): ListListenersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListeners', 'POST', '/', 'json', false, 'json', request);
}

model ListLoadBalancersRequest {
  addressIpVersion?: string(name='AddressIpVersion', description='The IP version of the NLB instance. Valid values:

*   **ipv4**: IPv4
*   **DualStack**: dual-stack', example='ipv4', position='Query'),
  addressType?: string(name='AddressType', description='The type of IPv4 address used by the NLB instance. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the NLB instance is resolved to the public IP address. The NLB instance can be accessed over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the NLB instance is resolved to the private IP address. The NLB instance can be accessed over the VPC where the NLB instance is deployed.', example='Internet', position='Query'),
  DNSName?: string(name='DNSName', description='The domain name of the NLB instance.', example='nlb-wb7r6dlwetvt5j****.cn-hangzhou.nlb.aliyuncs.com', position='Query'),
  ipv6AddressType?: string(name='Ipv6AddressType', description='The type of IPv6 address used by the NLB instance. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the NLB instance is resolved to the public IP address. The NLB instance can be accessed over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the NLB instance is resolved to the private IP address. The NLB instance can be accessed over the VPC where the NLB instance is deployed.', example='Internet', position='Query'),
  loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', description='The business status of the NLB instance. Valid values:

*   **Abnormal**: The NLB instance is not working as expected.
*   **Normal**: The NLB instance is working as expected.', example='Normal', position='Query'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='The NLB instance IDs. You can specify up to 20 IDs in each call.', position='Query'),
  loadBalancerNames?: [ string ](name='LoadBalancerNames', description='The names of the NLB instances. You can specify up to 20 names in each call.', position='Query'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the NLB instance. Valid values:

*   **Inactive**: The NLB instance is disabled. Listeners of an NLB instance in the Inactive state do not forward traffic.
*   **Active**: The NLB instance is running.
*   **Provisioning**: The NLB instance is being created.
*   **Configuring**: The NLB instance is being modified.
*   **Deleting**: The NLB instance is being deleted.
*   **Deleted**: The NLB instance is deleted.', example='Active', position='Query'),
  loadBalancerType?: string(name='LoadBalancerType', description='The type of the Server Load Balancer (SLB) instances. Set the value to **network**, which specifies NLB.', example='network', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return in each call. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token used to specify a particular page of results. Valid values:

*   Leave this parameter empty for the first query or the only query.
*   Set this parameter to the value of NextToken obtained from the previous query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-atstuj3rtop****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify up to 20 tags. The tag key cannot be an empty string.

It must be 1 to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='KeyTest'),
      value?: string(name='Value', description='The value of the tag. You can specify up to 20 tags. The tag value can be an empty string.

The tag value can be up to 128 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='ValueTest'),
    }
  ](name='Tag', description='The tags of the NLB instance.', position='Query'),
  vpcIds?: [ string ](name='VpcIds', description='The IDs of the virtual private clouds (VPCs) where the NLB instances are deployed. You can specify up to 10 VPC IDs in each call.', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone. You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.', example='cn-hangzhou-a', position='Query'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      addressIpVersion?: string(name='AddressIpVersion', description='The IP version. Valid values:

*   **ipv4**: IPv4
*   **DualStack**: dual stack', example='ipv4'),
      addressType?: string(name='AddressType', description='The type of IPv4 address used by the NLB instance. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the NLB instance is resolved to the public IP address. Therefore, the NLB instance can be accessed over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the NLB instance is resolved to the private IP address. Therefore, the NLB instance can be accessed over the VPC where the NLB instance is deployed.', example='Internet'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the EIP bandwidth plan that is associated with the NLB instance if the NLB instance uses a public IP address.', example='cbwp-bp1vevu8h3ieh****'),
      createTime?: string(name='CreateTime', description='The time when the resource was created. The time is displayed in UTC in the `yyyy-MM-ddTHH:mm:ssZ` format.', example='2022-07-18T17:22Z'),
      crossZoneEnabled?: boolean(name='CrossZoneEnabled', description='Indicates whether cross-zone load balancing is enabled for the NLB instance. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
      DNSName?: string(name='DNSName', description='The domain name of the NLB instance.', example='nlb-wb7r6dlwetvt5j****.cn-hangzhou.nlb.aliyuncs.com'),
      deletionProtectionConfig?: {
        enabled?: boolean(name='Enabled', description='Indicates whether deletion protection is enabled. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
        enabledTime?: string(name='EnabledTime', description='The time when deletion protection was enabled. The time is displayed in UTC in `yyyy-MM-ddTHH:mm:ssZ` format.', example='2022-12-01T17:22Z'),
        reason?: string(name='Reason', description='The reason why the deletion protection feature is enabled or disabled. The reason must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The reason must start with a letter.', example='The instance is running'),
      }(name='DeletionProtectionConfig', description='The configuration of the deletion protection feature.'),
      ipv6AddressType?: string(name='Ipv6AddressType', description='The type of IPv6 address used by the NLB instance. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the NLB instance is resolved to the public IP address. Therefore, the NLB instance can be accessed over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the NLB instance is resolved to the private IP address. Therefore, the NLB instance can be accessed over the VPC where the NLB instance is deployed.', example='Internet'),
      loadBalancerBillingConfig?: {
        payType?: string(name='PayType', description='The billing method of the NLB instance. Only **PostPay** is supported, which indicates the pay-as-you-go billing method.', example='PostPay'),
      }(name='LoadBalancerBillingConfig', description='The billing settings of the NLB instance.'),
      loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', description='The business status of the NLB instance. Valid values:

*   **Abnormal**: The NLB instance is not working as expected.
*   **Normal**: The NLB instance is working as expected.', example='Normal'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the NLB instance.', example='nlb-83ckzc8d4xlp8o****'),
      loadBalancerName?: string(name='LoadBalancerName', description='The name of the NLB instance.', example='NLB1'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the NLB instance. Valid values:

*   **Inactive**: The NLB instance is disabled. Listeners of NLB instances in the Inactive state do not forward traffic.
*   **Active**: The NLB instance is running.
*   **Provisioning**: The NLB instance is being created.
*   **Configuring**: The NLB instance is being modified.
*   **Deleting**: The NLB instance is being deleted.
*   **Deleted**: The NLB instance is deleted.', example='Active'),
      loadBalancerType?: string(name='LoadBalancerType', description='The type of the SLB instance. Only **Network** is returned, which indicates NLB.', example='Network'),
      modificationProtectionConfig?: {
        enabledTime?: string(name='EnabledTime', description='The time when the configuration read-only mode was enabled. The time is displayed in UTC in `yyyy-MM-ddTHH:mm:ssZ` format.', example='2022-12-01T17:22Z'),
        reason?: string(name='Reason', description='The reason why the configuration read-only mode is enabled. The reason must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The reason must start with a letter.

This parameter takes effect only if **Status** is set to **ConsoleProtection**.', example='Service guarantee period'),
        status?: string(name='Status', description='Indicates whether the configuration read-only mode is enabled. Valid values:

*   **NonProtection**: disabled. In this case, **Reason** is not returned. If **Reason** is set, the value is cleared.
*   **ConsoleProtection**: enabled. In this case, **Reason** is returned.

>  If you set this parameter to **ConsoleProtection**, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.', example='ConsoleProtection'),
      }(name='ModificationProtectionConfig', description='The configuration of the configuration read-only mode.'),
      operationLocks?: [ 
        {
          lockReason?: string(name='LockReason', description='The reason why the NLB instance is locked.', example='Service exception'),
          lockType?: string(name='LockType', description='The type of lock. Valid values:

*   **SecurityLocked**: The NLB instance is locked due to security reasons.
*   **RelatedResourceLocked**: The NLB instance is locked due to association issues.
*   **FinancialLocked**: The NLB instance is locked due to overdue payments.
*   **ResidualLocked**: The NLB instance is locked because the payments of the associated resources are overdue and the resources are released.', example='SecurityLocked'),
        }
      ](name='OperationLocks', description='The configuration of the operation lock. This parameter takes effect if the value of `LoadBalancerBussinessStatus` is **Abnormal**.'),
      regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='The security group to which the NLB instance is added.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='KeyTest'),
          value?: string(name='Value', description='The tag value.', example='ValueTest'),
        }
      ](name='Tags', description='A list of tags.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC where the NLB instance is deployed.', example='vpc-bp1b49rqrybk45nio****'),
      zoneMappings?: [ 
        {
          loadBalancerAddresses?: [ 
            {
              allocationId?: string(name='AllocationId', description='The ID of the elastic IP address (EIP).', example='eip-bp1aedxso6u80u0qf****'),
              eniId?: string(name='EniId', description='The ID of the elastic network interface (ENI) attached to the NLB instance.', example='eni-bp12f1xhs5yal61a****'),
              ipv6Address?: string(name='Ipv6Address', description='The IPv6 address used by the NLB instance.', example='2001:db8:1:1:1:1:1:1'),
              privateIPv4Address?: string(name='PrivateIPv4Address', description='The private IPv4 address of the NLB instance.', example='192.168.3.32'),
              privateIPv4HcStatus?: string(name='PrivateIPv4HcStatus', description='The health status of the private IPv4 address of the NLB instance. Valid values:

- **Healthy**
- **Unhealthy**

> This parameter is returned only when the Status of the zone is Active.', example='Healthy'),
              privateIPv6HcStatus?: string(name='PrivateIPv6HcStatus', description='The health status of the IPv6 address of the NLB instance. Valid values:

- **Healthy**
- **Unhealthy**

> This parameter is returned only when the Status of the zone is Active.', example='Healthy'),
              publicIPv4Address?: string(name='PublicIPv4Address', description='The public IPv4 address of the NLB instance.', example='120.XX.XX.69'),
            }
          ](name='LoadBalancerAddresses', description='The IP addresses that are used by the NLB instance.'),
          status?: string(name='Status', description='The zone status. Valid values:

- **Active**: The zone is available.

- **Stopped**: The zone is disabled. You can set the zone to this status only by using Cloud Architect Design Tools (CADT).

- **Shifted**: The DNS record is removed.

- **Starting**: The zone is being enabled. You can set the zone to this status only by using CADT.

- **Stopping** You can set the zone to this status only by using CADT.', example='Active'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone contains one vSwitch and one subnet.', example='vsw-bp1rmcrwg3erh1fh8****'),
          zoneId?: string(name='ZoneId', description='The name of the zone. You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the zones.', example='cn-hangzhou-a'),
        }
      ](name='ZoneMappings', description='The mappings between zones and vSwitches.'),
    }
  ](name='LoadBalancers', description='The NLB instances.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If this is your first query and no subsequent queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListLoadBalancersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLoadBalancers  ListLoadBalancersRequest
  * @return ListLoadBalancersResponse
 */
async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLoadBalancers', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityPolicyRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return per page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-atstuj3rtop****', position='Body'),
  securityPolicyIds?: [ string ](name='SecurityPolicyIds', description='The IDs of the TLS security policies. You can specify at most 20 policy IDs in each call.', position='Body'),
  securityPolicyNames?: [ string ](name='SecurityPolicyNames', description='The names of the TLS security policies. You can specify at most 20 policy names.', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify up to 10 tag keys.

The tag key can be up to 64 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='Test'),
      value?: string(name='Value', description='The tag value. You can specify up to 10 tag values.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='Test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListSecurityPolicyResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If NextToken is empty, no next page exists.
*   If a value is returned for NextToken, specify the value in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='D7A8875F-373A-5F48-8484-25B07A61F2AF'),
  securityPolicies?: [ 
    {
      ciphers?: string(name='Ciphers', description='The supported cipher suites, which are determined by the TLS protocol version. You can specify at most 32 cipher suites.

TLS 1.0 and TLS 1.1 support the following cipher suites:

*   **ECDHE-ECDSA-AES128-SHA**
*   **ECDHE-ECDSA-AES256-SHA**
*   **ECDHE-RSA-AES128-SHA**
*   **ECDHE-RSA-AES256-SHA**
*   **AES128-SHA**
*   **AES256-SHA**
*   **DES-CBC3-SHA**

TLS 1.2 supports the following cipher suites:

*   **ECDHE-ECDSA-AES128-SHA**
*   **ECDHE-ECDSA-AES256-SHA**
*   **ECDHE-RSA-AES128-SHA**
*   **ECDHE-RSA-AES256-SHA**
*   **AES128-SHA**
*   **AES256-SHA**
*   **DES-CBC3-SHA**
*   **ECDHE-ECDSA-AES128-GCM-SHA256**
*   **ECDHE-ECDSA-AES256-GCM-SHA384**
*   **ECDHE-ECDSA-AES128-SHA256**
*   **ECDHE-ECDSA-AES256-SHA384**
*   **ECDHE-RSA-AES128-GCM-SHA256**
*   **ECDHE-RSA-AES256-GCM-SHA384**
*   **ECDHE-RSA-AES128-SHA256**
*   **ECDHE-RSA-AES256-SHA384**
*   **AES128-GCM-SHA256**
*   **AES256-GCM-SHA384**
*   **AES128-SHA256**
*   **AES256-SHA256**

TLS 1.3 supports the following cipher suites:

*   **TLS_AES_128_GCM_SHA256**
*   **TLS_AES_256_GCM_SHA384**
*   **TLS_CHACHA20_POLY1305_SHA256**
*   **TLS_AES_128_CCM_SHA256**
*   **TLS_AES_128_CCM_8_SHA256**', example='ECDHE-ECDSA-AES128-SHA'),
      regionId?: string(name='RegionId', description='The region ID of the NLB instance.', example='cn-hangzhou'),
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='The listener ID.', example='lsn-bp1bpn0kn908w4nbw****@443'),
          listenerPort?: long(name='ListenerPort', description='The listener port.', example='443'),
          listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol. Valid value: **TCPSSL**.', example='TCPSSL'),
          loadBalancerId?: string(name='LoadBalancerId', description='The NLB instance ID.', example='nlb-83ckzc8d4xlp8o****'),
        }
      ](name='RelatedListeners', description='The listeners that are associated with the NLB instance.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-atstuj3rtop****'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the TLS security policy.', example='tls-bp14bb1e7dll4f****'),
      securityPolicyName?: string(name='SecurityPolicyName', description='The name of the TLS security policy.', example='TLSCipherPolicy'),
      securityPolicyStatus?: string(name='SecurityPolicyStatus', description='The status of the TLS security policy. Valid values:

*   **Configuring**
*   **Available**', example='Available'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key. You can specify up to 10 tag keys.

The tag key can be up to 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
          value?: string(name='Value', description='The tag value. You can specify up to 10 tag values.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
        }
      ](name='Tags', description='The tags.'),
      tlsVersion?: string(name='TlsVersion', description='The supported versions of the TLS protocol. Valid values: **TLSv1.0**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.', example='TLSv1.0'),
    }
  ](name='SecurityPolicies', description='The TLS security policies.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListSecurityPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSecurityPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSecurityPolicy  ListSecurityPolicyRequest
  * @return ListSecurityPolicyResponse
 */
async function listSecurityPolicy(request: ListSecurityPolicyRequest): ListSecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityPolicy', 'POST', '/', 'json', true, 'form', request);
}

model ListServerGroupServersRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return in each call. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token used to specify a particular page of results. Valid values:

*   Left this parameter empty if this is the first query or the only query.
*   Set this parameter to the value of NextToken obtained from the previous query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-atstuj3rtoptyui****', position='Body'),
  serverIds?: [ string ](name='ServerIds', description='The IDs of the backend servers. You can specify up to 40 backend servers in each call.', position='Body'),
  serverIps?: [ string ](name='ServerIps', description='The IP addresses of the backend servers. You can specify up to 40 backend servers in each call.', position='Body'),
}

model ListServerGroupServersResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  servers?: [ 
    {
      description?: string(name='Description', description='The description of the backend server.', example='ECS'),
      port?: int32(name='Port', description='The port that is used by the backend server. Valid values: **1** to **65535**.', example='80'),
      serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-atstuj3rtoptyui****'),
      serverId?: string(name='ServerId', description='The ID of the server group.', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', description='The IP address of the backend server.', example='192.168.2.1'),
      serverType?: string(name='ServerType', description='The type of backend server. Valid values:

*   **Ecs**: Elastic Compute Service (ECS) instance
*   **Eni**: elastic network interface (ENI)
*   **Eci**: elastic container instance
*   **Ip**: IP address', example='Ecs'),
      status?: string(name='Status', description='The status of the backend server. Valid values:

*   **Adding**
*   **Available**
*   **Configuring**
*   **Removing**', example='Available'),
      weight?: int32(name='Weight', description='The weight of the backend server.', example='100'),
      zoneId?: string(name='ZoneId', description='The zone ID of the server.', example='cn-hangzhou-a'),
    }
  ](name='Servers', description='The backend servers.'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='10'),
}

model ListServerGroupServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServerGroupServersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServerGroupServers  ListServerGroupServersRequest
  * @return ListServerGroupServersResponse
 */
async function listServerGroupServers(request: ListServerGroupServersRequest): ListServerGroupServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerGroupServers', 'POST', '/', 'json', true, 'form', request);
}

model ListServerGroupsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token used in the next request to retrieve a new page of results. Valid values:

*   For the first request and last request, you do not need to specify this parameter.
*   You must specify the token obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the server group belongs.', example='rg-atstuj3rtop****', position='Body'),
  serverGroupIds?: [ string ](name='ServerGroupIds', description='The server group IDs. You can specify up to 20 server group IDs in each call.', position='Body'),
  serverGroupNames?: [ string ](name='ServerGroupNames', description='The names of the server groups to be queried. You can specify up to 20 names in each call.', position='Body'),
  serverGroupType?: string(name='ServerGroupType', description='The type of server group. Valid values:

*   **Instance**: allows you to add servers of the **Ecs**, **Ens**, and **Eci** types.
*   **Ip**: allows you to add servers by specifying IP addresses.', example='Instance', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify up to 10 tag keys.

The tag key can be up to 64 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='Test'),
      value?: string(name='Value', description='The value of the tag. You can specify up to 10 tag values.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` and `acs:`, and cannot contain `http://` or `https://`.', example='Test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the server group is deployed.', example='vpc-bp15zckdt37pq72zv****', position='Body'),
}

model ListServerGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B28E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroups?: [ 
    {
      addressIPVersion?: string(name='AddressIPVersion', description='The IP version. Valid values:

*   **ipv4**
*   **DualStack**', example='ipv4'),
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account.', example='165820696622****'),
      anyPortEnabled?: boolean(name='AnyPortEnabled', description='Indicates whether the feature of forwarding requests to all ports is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', description='Indicates whether connection draining is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', description='The timeout period of connection draining. Unit: seconds. Valid values: **10** to **900**.', example='200'),
      healthCheck?: {
        healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The backend port that is used for health checks.

Valid values: **0** to **65535**.

A value of **0** indicates that the port on a backend server is used for health checks.', example='200'),
        healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The maximum timeout period of a health check response. Unit: seconds. Default value: **5**.

Valid values: **1** to **300**', example='200'),
        healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that you want to use for health checks. Valid values:

*   **$SERVER_IP**: the private IP address of a backend server.
*   **domain**: a specified domain name. The domain name must be 1 to 80 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.).

> This parameter takes effect only when **HealthCheckType** is set to **HTTP**.', example='$SERVER_IP'),
        healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Indicates whether the health check feature is enabled. Valid values:

*   **true**
*   **false**', example='false'),
        healthCheckExp?: string(name='HealthCheckExp', description='The response string of UDP health checks. The string must be 1 to 512 characters in length, and can contain letters and digits.', example='ok'),
        healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode', description='The HTTP status codes returned for health checks. Multiple HTTP status codes are separated by commas (,). Valid values: **http_2xx**, **http_3xx**, **http_4xx**, and **http_5xx**.

> This parameter takes effect only when **HealthCheckType** is set to **HTTP**.'),
        healthCheckHttpVersion?: string(name='HealthCheckHttpVersion'),
        healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds. Default value: **5**.

*   If you set **HealthCheckType** to **TCP** or **HTTP**, valid values are **1 to 50**.
*   If you set **HealthCheckType** to **UDP**, valid values are **1 to 300**. Set the health check interval equal to or larger than the response timeout period to ensure that UDP response timeouts are not determined as no responses.', example='200'),
        healthCheckReq?: string(name='HealthCheckReq', description='The request string of UDP health checks. The string must be 1 to 512 characters in length, and can contain letters and digits.', example='hello'),
        healthCheckType?: string(name='HealthCheckType', description='The protocol that is used for health checks. Valid values:

*   **TCP**
*   **HTTP**
*   **UDP**', example='TCP'),
        healthCheckUrl?: string(name='HealthCheckUrl', description='The path to which health check probes are sent.

> This parameter takes effect only when **HealthCheckType** is set to **HTTP**.', example='/test/index.html'),
        healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from **fail** to **success**.

Valid values: **2** to **10**.', example='2'),
        httpCheckMethod?: string(name='HttpCheckMethod', description='The HTTP method that is used for health checks. Valid values: **GET** and **HEAD**.

> This parameter takes effect only when **HealthCheckType** is set to **HTTP**.', example='GET'),
        unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from **success** to **fail**.

Valid values: **2** to **10**.', example='3'),
      }(name='HealthCheck', description='The configurations of health checks.'),
      preserveClientIpEnabled?: boolean(name='PreserveClientIpEnabled', description='Indicates whether client IP preservation is enabled. Valid values:

*   **true**
*   **false**

> This parameter is set to **true** by default when **AddressIPVersion** is set to **ipv4**. This parameter is set to **false** when **AddressIPVersion** is set to **ipv6**. **true** will be supported by later versions.', example='true'),
      protocol?: string(name='Protocol', description='The backend protocol. Valid values: **TCP** and **UDP**.', example='TCP'),
      regionId?: string(name='RegionId', description='The region ID of the NLB instance.', example='cn-hangzhou'),
      relatedLoadBalancerIds?: [ string ](name='RelatedLoadBalancerIds', description='The NLB instances.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the server group belongs.', example='rg-atstuj3rtop****'),
      scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **Wrr**: Backend servers with higher weights receive more requests than backend servers with lower weights.
*   **rr**: Requests are forwarded to the backend servers in sequence. sch: Requests are forwarded to the backend servers based on source IP address hashing.
*   **sch**: Requests from the same source IP address are forwarded to the same backend server.
*   **tch**: Four-element hashing, which specifies consistent hashing that is based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same information based on the four factors are forwarded to the same backend server.
*   **qch**: QUIC ID hashing. Requests that contain the same QUIC ID are forwarded to the same backend server.', example='Wrr'),
      serverCount?: int32(name='ServerCount', description='The number of server groups associated with the NLB instances.', example='2'),
      serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtoptyui****'),
      serverGroupName?: string(name='ServerGroupName', description='The server group name.', example='NLB_ServerGroup'),
      serverGroupStatus?: string(name='ServerGroupStatus', description='The status of the server group. Valid values:

*   **Creating**
*   **Available**
*   **Configuring**', example='Available'),
      serverGroupType?: string(name='ServerGroupType', description='The type of server group. Valid values:

*   **Instance** : contains servers of the **Ecs**, **Ens**, and **Eci** types.
*   **Ip**: contains servers specified by IP addresses.', example='Instance'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key. At most 10 tag keys are returned.

The tag key can be up to 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
          value?: string(name='Value', description='The tag value. At most 10 tag values are returned.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
        }
      ](name='Tags', description='The tag.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the server group belongs.', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='ServerGroups', description='A list of server groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListServerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServerGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServerGroups  ListServerGroupsRequest
  * @return ListServerGroupsResponse
 */
async function listServerGroups(request: ListServerGroupsRequest): ListServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerGroups', 'POST', '/', 'json', true, 'form', request);
}

model ListSystemSecurityPolicyRequest {
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model ListSystemSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5C057647-284B-5C67-A07E-4B8F3DABA9F9'),
  securityPolicies?: [ 
    {
      ciphers?: string(name='Ciphers', description='The cipher suite.', example='ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-SHA256,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384,AES128-GCM-SHA256,AES256-GCM-SHA384,AES128-SHA256,AES256-SHA256,ECDHE-ECDSA-AES128-SHA,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES128-SHA,ECDHE-RSA-AES256-SHA,AES128-SHA,AES256-SHA,DES-CBC3-SHA'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the TLS security policy.', example='sp-3fdab6dkkke10s****'),
      securityPolicyName?: string(name='SecurityPolicyName', description='The name of the TLS security policy.', example='test'),
      tlsVersion?: string(name='TlsVersion', description='The TLS version.', example='TLSv1.0'),
    }
  ](name='SecurityPolicies', description='A list of TLS security policies.'),
}

model ListSystemSecurityPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSystemSecurityPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSystemSecurityPolicy  ListSystemSecurityPolicyRequest
  * @return ListSystemSecurityPolicyResponse
 */
async function listSystemSecurityPolicy(request: ListSystemSecurityPolicyRequest): ListSystemSecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemSecurityPolicy', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return in each call. Valid values: **1** to **50**. Default value: **50**.', example='20', position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token used to specify a particular page of results. Valid values:

*   Leave this parameter empty for the first query or the only query.
*   Set this parameter to the value of NextToken obtained from the previous query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  regionId?: string(name='RegionId', description='You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the resources.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   **loadbalancer**: the Network Load Balancer (NLB) instance
*   **securitypolicy**: the security policy
*   **servergroup**: the server group
*   **listener**: the listener

This parameter is required.', example='loadbalancer', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The tag key can be up to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags', position='Body'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagResources?: [ 
    {
      aliUid?: long(name='AliUid', description='The UID of the Alibaba Cloud account.', example='1429****39299349'),
      category?: string(name='Category', description='The type of the tag. Valid values:

*   **Custom**
*   **System**
*   **All**', example='All'),
      regionNo?: string(name='RegionNo', description='The region information.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The resource ID.', example='nlb-nrnrxwd15en27r****'),
      resourceType?: string(name='ResourceType', description='The type of resource. Valid values:

*   **loadbalancer**: an NLB instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
      scope?: string(name='Scope', description='The visible range of the tags.', example='public'),
      tagKey?: string(name='TagKey', description='The tag key.', example='env'),
      tagValue?: string(name='TagValue', description='The tag value.', example='product'),
    }
  ](name='TagResources', description='The details about the resource and its tags, including the resource ID, the resource type, and the keys and values of the tags.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', true, 'form', request);
}

model LoadBalancerJoinSecurityGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: prechecks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance which you want to add to a security group.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  securityGroupIds: [ string ](name='SecurityGroupIds', description='The security group ID of the instance.

This parameter is required.', position='Body'),
}

model LoadBalancerJoinSecurityGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model LoadBalancerJoinSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LoadBalancerJoinSecurityGroupResponseBody(name='body'),
}

/**
  * @description *   Make sure that you have created a security group. For more information about how to create a security group, see [CreateSecurityGroup](https://help.aliyun.com/document_detail/25553.html).
  * *   An NLB instance can be associated with up to four security groups.
  * *   You can query the security groups that are associated with an NLB instance by calling the [GetLoadBalancerAttribute](https://help.aliyun.com/document_detail/214362.html) operation.
  * *   LoadBalancerJoinSecurityGroup is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetJobStatus](https://help.aliyun.com/document_detail/445904.html) operation to query the status of a task.
  *     *   If the task is in the **Succeeded** state, the security group is associated.
  *     *   If the task is in the **Processing** state, the security group is being associated. In this case, you can perform only query operations.
  * @param request  the request parameters of LoadBalancerJoinSecurityGroup  LoadBalancerJoinSecurityGroupRequest
  * @return LoadBalancerJoinSecurityGroupResponse
 */
async function loadBalancerJoinSecurityGroup(request: LoadBalancerJoinSecurityGroupRequest): LoadBalancerJoinSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoadBalancerJoinSecurityGroup', 'POST', '/', 'json', true, 'form', request);
}

model LoadBalancerLeaveSecurityGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The NLB instance ID.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  securityGroupIds: [ string ](name='SecurityGroupIds', description='The ID of the security group to be disassociated.

This parameter is required.', position='Body'),
}

model LoadBalancerLeaveSecurityGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model LoadBalancerLeaveSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LoadBalancerLeaveSecurityGroupResponseBody(name='body'),
}

/**
  * @description LoadBalancerLeaveSecurityGroup is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetJobStatus](https://help.aliyun.com/document_detail/445904.html) operation to query the status of a task.
  * *   If the task is in the **Succeeded** state, the security group is disassociated.
  * *   If the task is in the **Processing** state, the security group is being disassociated. In this case, you can perform only query operations.
  * @param request  the request parameters of LoadBalancerLeaveSecurityGroup  LoadBalancerLeaveSecurityGroupRequest
  * @return LoadBalancerLeaveSecurityGroupResponse
 */
async function loadBalancerLeaveSecurityGroup(request: LoadBalancerLeaveSecurityGroupRequest): LoadBalancerLeaveSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoadBalancerLeaveSecurityGroup', 'POST', '/', 'json', true, 'form', request);
}

model MoveResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group.

This parameter is required.', example='rg-aekzjcnrv3vvqhq', position='Body'),
  regionId: string(name='RegionId', description='The region ID of the resource.

This parameter is required.', example='cn-hangzhou', position='Body'),
  resourceId: string(name='ResourceId', description='The ID of the resource.

This parameter is required.', example='nlb-nrnrxwd15en27r****', position='Body'),
  resourceType: string(name='ResourceType', description='The type of resource. Valid values:

*   **loadbalancer**: a Network Load Balancer (NLB) instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group

This parameter is required.', example='loadbalancer', position='Body'),
}

model MoveResourceGroupResponseBody = {
  data?: {
    resourceId?: string(name='ResourceId', description='The ID of the resource. You can specify up to 50 resource IDs in each call.', example='nlb-nrnrxwd15en27r****'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResourceGroup  MoveResourceGroupRequest
  * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model RemoveServersFromServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='The server group ID.

This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  servers: [ 
    {
      port?: int32(name='Port', description='The port that is used by the backend server. Valid values: **0** to **65535**. If you do not set this parameter, the default value **0** is used.', example='443'),
      serverId: string(name='ServerId', description='The backend server ID.

*   If the server group is of the **Instance** type, set this parameter to the IDs of servers of the **Ecs**, **Eni**, or **Eci** type.
*   If the server group is of the **Ip** type, set ServerId to IP addresses.

This parameter is required.', example='ecs-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', description='The IP addresses of the server. If the server group type is **Ip**, set the ServerId parameter to IP addresses.', example='192.168.6.6'),
      serverType: string(name='ServerType', description='The type of the backend server. Valid values:

*   **Ecs**: the Elastic Compute Service (ECS) instance
*   **Eni**: the elastic network interface (ENI)
*   **Eci**: the elastic container instance
*   **Ip**: the IP address

This parameter is required.', example='Ecs'),
    }
  ](name='Servers', description='The backend servers. You can specify up to 200 backend servers in each call.

This parameter is required.', position='Body'),
}

model RemoveServersFromServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtoptyui****'),
}

model RemoveServersFromServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveServersFromServerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveServersFromServerGroup  RemoveServersFromServerGroupRequest
  * @return RemoveServersFromServerGroupResponse
 */
async function removeServersFromServerGroup(request: RemoveServersFromServerGroupRequest): RemoveServersFromServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveServersFromServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model SetHdMonitorRegionConfigRequest {
  logProject: string(name='LogProject', description='The name of the Log Service project.

This parameter is required.', example='hdmonitor-cn-hangzhou-223794579283657556', position='Query'),
  metricStore: string(name='MetricStore', description='The name of the MetricStore in Simple Log Service.

This parameter is required.', example='hdmonitor-cn-hangzhou-metricStore-1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/2399192.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model SetHdMonitorRegionConfigResponseBody = {
  logProject?: string(name='LogProject', description='The name of the Log Service project.', example='hdmonitor-cn-hangzhou-223794579283657556'),
  metricStore?: string(name='MetricStore', description='The name of the MetricStore in Simple Log Service.', example='hdmonitor-cn-hangzhou-metricStore-1'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/2399192.html) operation to query the most recent region list.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model SetHdMonitorRegionConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHdMonitorRegionConfigResponseBody(name='body'),
}

/**
  * @description This operation is used to configure a data warehouse for the fine-grained monitoring feature. If a listener in the current region has fine-grained monitoring enabled, you must disable fine-grained monitoring before you can configure a warehouse.
  * @param request  the request parameters of SetHdMonitorRegionConfig  SetHdMonitorRegionConfigRequest
  * @return SetHdMonitorRegionConfigResponse
 */
async function setHdMonitorRegionConfig(request: SetHdMonitorRegionConfigRequest): SetHdMonitorRegionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHdMonitorRegionConfig', 'POST', '/', 'json', false, 'json', request);
}

model StartListenerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  listenerId: string(name='ListenerId', description='The listener ID.

This parameter is required.', example='lsn-bp1bpn0kn908w4nbw****@80', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model StartListenerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model StartListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartListenerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartListener  StartListenerRequest
  * @return StartListenerResponse
 */
async function startListener(request: StartListenerRequest): StartListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartListener', 'POST', '/', 'json', true, 'form', request);
}

model StartShiftLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The NLB instance ID.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone uses one vSwitch and one subnet.

This parameter is required.', example='vsw-bp1rmcrwg3erh1fh8****'),
      zoneId: string(name='ZoneId', description='The zone ID of the NLB instance.

>  You can remove only one IP address (or zone) in each call.

You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.

This parameter is required.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mappings between zones and vSwitches.

>  You can remove only one IP address (or zone) in each call.

This parameter is required.', position='Body'),
}

model StartShiftLoadBalancerZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model StartShiftLoadBalancerZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartShiftLoadBalancerZonesResponseBody(name='body'),
}

/**
  * @description >  If the NLB instance is deployed in only one zone, you cannot remove the EIP or VIP from the DNS record.
  * @param request  the request parameters of StartShiftLoadBalancerZones  StartShiftLoadBalancerZonesRequest
  * @return StartShiftLoadBalancerZonesResponse
 */
async function startShiftLoadBalancerZones(request: StartShiftLoadBalancerZonesRequest): StartShiftLoadBalancerZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartShiftLoadBalancerZones', 'POST', '/', 'json', true, 'form', request);
}

model StopListenerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs a dry run without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  listenerId: string(name='ListenerId', description='The listener ID.

This parameter is required.', example='lsn-bp1bpn0kn908w4nbw****@80', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model StopListenerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model StopListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopListenerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopListener  StopListenerRequest
  * @return StopListenerResponse
 */
async function stopListener(request: StopListenerRequest): StopListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopListener', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the resources are deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the resources. You can specify up to 50 resource IDs in each call.

This parameter is required.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resources. Valid values:

*   **loadbalancer**: the Network Load Balancer (NLB) instance
*   **securitypolicy**: the security policy
*   **servergroup**: the server group

This parameter is required.', example='loadbalancer', position='Body'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of the tag. The tag key can be up to 64 characters in length, cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`. The tag key can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='env'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length, cannot start with `acs:` or `aliyun`, and cannot contain `http://` or `https://`. The tag value can contain letters, digits, and the following special characters: _ . : / = + - @

You can specify up to 20 tags in each call.', example='product'),
    }
  ](name='Tag', description='The tags.

This parameter is required.', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified resource. Valid values:

*   **true**: removes all tags from the specified resource.
*   **false** (default): does not remove all tags from the specified resource.', example='false', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  resourceId: [ string ](name='ResourceId', description='The ID of the resource. You can specify at most 50 resource IDs in each call.

This parameter is required.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   **loadbalancer**: a Network Load Balancer (NLB) instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group

This parameter is required.', example='loadbalancer', position='Body'),
  tagKey?: [ string ](name='TagKey', description='The keys of the tags that you want to remove. You can remove at most 20 tags in each call.', position='Body'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', true, 'form', request);
}

model UpdateListenerAttributeRequest {
  alpnEnabled?: boolean(name='AlpnEnabled', description='Specifies whether to enable Application-Layer Protocol Negotiation (ALPN). Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  alpnPolicy?: string(name='AlpnPolicy', description='The ALPN policy. Valid values:

*   **HTTP1Only**: uses only HTTP 1.x. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
*   **HTTP2Only**: uses only HTTP 2.0.
*   **HTTP2Optional**: preferentially uses HTTP 1.x over HTTP 2.0. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0, and the priority of HTTP 1.0 is higher than the priority of HTTP 2.0.
*   **HTTP2Preferred**: preferentially uses HTTP 2.0 over HTTP 1.x. The priority of HTTP 2.0 is higher than the priority of HTTP 1.1, and the priority of HTTP 1.1 is higher than the priority of HTTP 1.0.

>  This parameter is required if AlpnEnabled is set to true.', example='HTTP1Only', position='Body'),
  caCertificateIds?: [ string ](name='CaCertificateIds', description='The CA certificate. You can specify only one CA certificate.

>  This parameter takes effect only for listeners that use SSL over TCP.', position='Body'),
  caEnabled?: boolean(name='CaEnabled', description='Specifies whether to enable mutual authentication. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  certificateIds?: [ string ](name='CertificateIds', description='The server certificate. Only one server certificate is supported.

>  This parameter takes effect only for listeners that use SSL over TCP.', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  cps?: int32(name='Cps', description='The maximum number of new connections per second supported by the listener in each zone (virtual IP address). Valid values: **0** to **1000000**. **0** indicates that the number of connections is unlimited.', example='10000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Unit: seconds

*   If the listener uses **TCP** or **TCPSSL**, you can set this parameter to a value ranging from **10** to **900**. Default value: **900**
*   If the listener uses **UDP**, you can set this parameter to a value ranging from **10** to **20**. Default value: **20**', example='900', minimum=10, maximum=3600, position='Body'),
  listenerDescription?: string(name='ListenerDescription', description='The name of the listener.

The name must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (_), and hyphens (-).', example='tcpssl_443', position='Body'),
  listenerId: string(name='ListenerId', description='The listener ID.

This parameter is required.', example='lsn-bp1bpn0kn908w4nbw****@443', position='Body'),
  mss?: int32(name='Mss', description='The size of the largest TCP packet segment. Unit: bytes. Valid values: **0** to **1500**. **0** indicates that the maximum segment size (MSS) remains unchanged. This parameter is supported only by TCP listeners and listeners that use SSL over TCP.', example='344', position='Body'),
  proxyProtocolEnabled?: boolean(name='ProxyProtocolEnabled', description='Specifies whether to use the Proxy protocol to pass the client IP address to the backend server. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  proxyProtocolV2Config?: {
    ppv2PrivateLinkEpIdEnabled?: boolean(name='Ppv2PrivateLinkEpIdEnabled', description='Specifies whether to use the Proxy protocol to pass the PrivateLinkEpId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
    ppv2PrivateLinkEpsIdEnabled?: boolean(name='Ppv2PrivateLinkEpsIdEnabled', description='Specifies whether to use the Proxy protocol to pass the PrivateLinkEpsId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
    ppv2VpcIdEnabled?: boolean(name='Ppv2VpcIdEnabled', description='Specifies whether to use the Proxy protocol to pass the VpcId parameter to backend servers. Valid values:

*   **true**
*   **false**', example='false'),
  }(name='ProxyProtocolV2Config', description='Specifies that the Proxy protocol passes the VpcId, PrivateLinkEpId, and PrivateLinkEpsId parameters to backend servers.', shrink='json', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  secSensorEnabled?: boolean(name='SecSensorEnabled', description='Specifies whether to enable fine-grained monitoring. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy.

>  This parameter takes effect only for listeners that use SSL over TCP.', example='tls_cipher_policy_1_1', position='Body'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.

> 

*   If the listener uses **TCP**, you can specify server groups whose protocol is **TCP** or **TCP_UDP**. **UDP** server groups are not supported.

*   If the listener uses **UDP**, you can specify server groups whose protocol is **UDP** or **TCP_UDP**. **TCP** server groups are not supported.

*   If the listener uses **TCPSSL**, you can specify server groups whose protocol is **TCP** and whose **client IP preservation is disabled**. **TCP** server groups for which **client IP preservation is enabled** and server groups whose protocol is **UDP** or **TCP_UDP** are not supported.', example='sgp-ppdpc14gdm3x4o****', position='Body'),
}

model UpdateListenerAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateListenerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateListenerAttribute  UpdateListenerAttributeRequest
  * @return UpdateListenerAttributeResponse
 */
async function updateListenerAttribute(request: UpdateListenerAttributeRequest): UpdateListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateListenerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLoadBalancerAddressTypeConfigRequest {
  addressType: string(name='AddressType', description='The new network type. Valid values:

*   **Internet**: The NLB instance uses a public IP address. The domain name of the NLB instance is resolved to the public IP address. The NLB instance is accessible over the Internet.
*   **Intranet**: The NLB instance uses a private IP address. The domain name of the NLB instance is resolved to the private IP address. The NLB instance can be accessed over the virtual private cloud (VPC) where the NLB instance is deployed.

This parameter is required.', example='Internet', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  zoneMappings?: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of the elastic IP address (EIP).', example='eip-bp1aedxso6u80u0qf****'),
      eipType?: string(name='EipType', description='The type of the EIP. Valid values:

*   **Common**: an EIP
*   **Anycast**: an Anycast EIP

>  This parameter is required only if **AddressType** is set to **Internet**.', example='Common'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance.', example='vsw-bp10ttov87felojcn****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the NLB instance.

You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mappings between zones and vSwitches. You can specify up to 10 zones.', position='Body'),
}

model UpdateLoadBalancerAddressTypeConfigResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateLoadBalancerAddressTypeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerAddressTypeConfigResponseBody(name='body'),
}

/**
  * @description *   Make sure that an NLB instance is created. For more information, see [CreateLoadBalancer](https://help.aliyun.com/document_detail/445868.html).
  * *   You can call the [GetLoadBalancerAttribute](https://help.aliyun.com/document_detail/445873.html) operation to query the **AddressType** value of an NLB instance after you change the network type.
  * *   **UpdateLoadBalancerAddressTypeConfig** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetJobStatus](https://help.aliyun.com/document_detail/445904.html) operation to query the task status:
  *     *   If the task is in the **Succeeded** state, the network type of the IPv4 address of the NLB instance is changed.
  *     *   If the task is in the **Processing** state, the network type of the IPv4 address of the NLB instance is being changed. In this case, you can perform only query operations.
  * @param request  the request parameters of UpdateLoadBalancerAddressTypeConfig  UpdateLoadBalancerAddressTypeConfigRequest
  * @return UpdateLoadBalancerAddressTypeConfigResponse
 */
async function updateLoadBalancerAddressTypeConfig(request: UpdateLoadBalancerAddressTypeConfigRequest): UpdateLoadBalancerAddressTypeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerAddressTypeConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  cps?: int32(name='Cps', description='The maximum number of new connections per second in each zone supported by the NLB instance (virtual IP address). Valid values: **1** to **1000000**.', example='1', position='Body'),
  crossZoneEnabled?: boolean(name='CrossZoneEnabled', description='Specifies whether to enable cross-zone load balancing for the NLB instance. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The NLB instance ID.

This parameter is required.', example='nlb-wb7r6dlwetvt5j****', position='Body'),
  loadBalancerName?: string(name='LoadBalancerName', description='The NLB instance name.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.', example='NLB1', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-beijing', position='Body'),
}

model UpdateLoadBalancerAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='aab74cfa-3bc4-48fc-80fc-0101da5a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7294679F-08DE-16D4-8E5D-1625685DC10B'),
}

model UpdateLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLoadBalancerAttribute  UpdateLoadBalancerAttributeRequest
  * @return UpdateLoadBalancerAttributeResponse
 */
async function updateLoadBalancerAttribute(request: UpdateLoadBalancerAttributeRequest): UpdateLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLoadBalancerProtectionRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  deletionProtectionEnabled?: boolean(name='DeletionProtectionEnabled', description='Specifies whether to enable deletion protection. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  deletionProtectionReason?: string(name='DeletionProtectionReason', description='The reason why deletion protection is enabled. The reason must be 2 to 128 characters in length, can contain letters, digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.

>  This parameter takes effect only when **DeletionProtectionEnabled** is set to **true**.', example='Instance_Is_Bound_By_Acceleration_Instance', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): sends a request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  modificationProtectionReason?: string(name='ModificationProtectionReason', description='The reason why the configuration read-only mode is enabled. The reason must be 2 to 128 characters in length, can contain letters, digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.

>  This parameter takes effect only when **Status** is set to **ConsoleProtection**.', example='ConsoleProtection', position='Body'),
  modificationProtectionStatus?: string(name='ModificationProtectionStatus', description='Specifies whether to enable the configuration read-only mode. Valid values:

*   **NonProtection**: disables the configuration read-only mode. In this case, you cannot set the **ModificationProtectionReason** parameter. If you specify **ModificationProtectionReason**, the value is cleared.
*   **ConsoleProtection**: enables the configuration read-only mode. In this case, you can specify **ModificationProtectionReason**.

>  If you set this parameter to **ConsoleProtection**, you cannot use the NLB console to modify configurations of the NLB instance. However, you can call API operations to modify the instance configurations.', example='ConsoleProtection', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
}

model UpdateLoadBalancerProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateLoadBalancerProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerProtectionResponseBody(name='body'),
}

/**
  * @description > You can call the [GetLoadBalancerAttribute](https://help.aliyun.com/document_detail/445873.html) operation to query the details about deletion protection and the configuration read-only mode.
  * @param request  the request parameters of UpdateLoadBalancerProtection  UpdateLoadBalancerProtectionRequest
  * @return UpdateLoadBalancerProtectionResponse
 */
async function updateLoadBalancerProtection(request: UpdateLoadBalancerProtectionRequest): UpdateLoadBalancerProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerProtection', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the request. If the request passes the validation, an HTTP 2xx status code is returned and the operation is performed.', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='The ID of the NLB instance.

This parameter is required.', example='nlb-83ckzc8d4xlp8o****', position='Body'),
  regionId?: string(name='RegionId', description='The ID of region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  zoneMappings: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of the elastic IP address (EIP) or Anycast EIP.', example='eip-bp1aedxso6u80u0qf****'),
      eipType?: string(name='EipType', description='The type of the EIP. Valid values:

*   **Common**: an EIP
*   **Anycast**: an Anycast EIP

>  For regions that support Anycast EIPs, see [Limits](https://help.aliyun.com/document_detail/470000.html).This parameter is required if **AddressType** is set to **Internet**.', example='Common'),
      privateIPv4Address?: string(name='PrivateIPv4Address', description='The private IP address.', example='192.168.36.16'),
      vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone uses one vSwitch and one subnet.

This parameter is required.', example='vsw-bp1rmcrwg3erh1fh8****'),
      zoneId: string(name='ZoneId', description='The zone ID. You can call the [DescribeZones](https://help.aliyun.com/document_detail/443890.html) operation to query the most recent zone list.

This parameter is required.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mappings between the zones and the vSwitches. You can specify up to 10 zones.

This parameter is required.', position='Body'),
}

model UpdateLoadBalancerZonesResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateLoadBalancerZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerZonesResponseBody(name='body'),
}

/**
  * @description When you call this operation, make sure that you specify all the zones of the NLB instance, including the existing zones and new zones. If you do not specify the existing zones, the existing zones are removed.
  * Prerequisites
  * *   An NLB instance is created. For more information, see [CreateLoadBalancer](https://help.aliyun.com/document_detail/445868.html).
  * *   You can call the [GetLoadBalancerAttribute](https://help.aliyun.com/document_detail/445873.html) operation to query the zones and zone attributes of an NLB instance.
  * *   **UpdateLoadBalancerZones** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetJobStatus](https://help.aliyun.com/document_detail/445904.html) operation query to query the status of a task:
  *     *   If the task is in the **Succeeded** state, the zones and zone attributes are modified.
  *     *   If the task is in the **Processing** state, the zones and zone attributes are being modified. In this case, you can perform only query operations.
  * @param request  the request parameters of UpdateLoadBalancerZones  UpdateLoadBalancerZonesRequest
  * @return UpdateLoadBalancerZonesResponse
 */
async function updateLoadBalancerZones(request: UpdateLoadBalancerZonesRequest): UpdateLoadBalancerZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerZones', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSecurityPolicyAttributeRequest {
  ciphers?: [ string ](name='Ciphers', description='The supported cipher suites. Valid values of this parameter vary base on the value of TlsVersions. You can specify up to 32 cipher suites.

TLSv1.0 and TLSv1.1 support the following cipher suites:

*   **ECDHE-ECDSA-AES128-SHA**
*   **ECDHE-ECDSA-AES256-SHA**
*   **ECDHE-RSA-AES128-SHA**
*   **ECDHE-RSA-AES256-SHA**
*   **AES128-SHA**
*   **AES256-SHA**
*   **DES-CBC3-SHA**

TLSv1.2 supports the following cipher suites:

*   **ECDHE-ECDSA-AES128-SHA**
*   **ECDHE-ECDSA-AES256-SHA**
*   **ECDHE-RSA-AES128-SHA**
*   **ECDHE-RSA-AES256-SHA**
*   **AES128-SHA**
*   **AES256-SHA**
*   **DES-CBC3-SHA**
*   **ECDHE-ECDSA-AES128-GCM-SHA256**
*   **ECDHE-ECDSA-AES256-GCM-SHA384**
*   **ECDHE-ECDSA-AES128-SHA256**
*   **ECDHE-ECDSA-AES256-SHA384**
*   **ECDHE-RSA-AES128-GCM-SHA256**
*   **ECDHE-RSA-AES256-GCM-SHA384**
*   **ECDHE-RSA-AES128-SHA256**
*   **ECDHE-RSA-AES256-SHA384**
*   **AES128-GCM-SHA256**
*   **AES256-GCM-SHA384**
*   **AES128-SHA256**
*   **AES256-SHA256**

TLSv1.3 supports the following cipher suites:

*   **TLS_AES_128_GCM_SHA256**
*   **TLS_AES_256_GCM_SHA384**
*   **TLS_CHACHA20_POLY1305_SHA256**
*   **TLS_AES_128_CCM_SHA256**
*   **TLS_AES_128_CCM_8_SHA256**', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not set this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  securityPolicyId: string(name='SecurityPolicyId', description='The ID of the TLS security policy.

This parameter is required.', example='tls-bp14bb1e7dll4f****', position='Body'),
  securityPolicyName?: string(name='SecurityPolicyName', description='The name of the security policy.

The name must be 1 to 200 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='TLSCipherPolicy', position='Body'),
  tlsVersions?: [ string ](name='TlsVersions', description='The supported TLS versions. Valid values: **TLSv1.0**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**. You can specify up to four TLS versions.', position='Body'),
}

model UpdateSecurityPolicyAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='D7A8875F-373A-5F48-8484-25B07A61F2AF'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the TLS security policy.', example='tls-bp14bb1e7dll4f****'),
}

model UpdateSecurityPolicyAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSecurityPolicyAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSecurityPolicyAttribute  UpdateSecurityPolicyAttributeRequest
  * @return UpdateSecurityPolicyAttributeResponse
 */
async function updateSecurityPolicyAttribute(request: UpdateSecurityPolicyAttributeRequest): UpdateSecurityPolicyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSecurityPolicyAttribute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateServerGroupAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate the token. Ensure that the token is unique among different requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** The value of **RequestId** is different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', description='Specifies whether to enable connection draining. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', description='Specify a timeout period for connection draining. Unit: seconds. Valid values: **0** to **900**.', example='10', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: validates the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the validation, the corresponding error message is returned. If the request passes the validation, the `DryRunOperation` error code is returned.
*   **false** (default): validates the request and performs the operation. If the request passes the validation, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The backend port that is used for health checks. Valid values: **0** to **65535**. If you set this parameter to **0**, the port that the backend server uses to provide services is also used for health checks.', example='0'),
    healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period for a health check response. Unit: seconds. Valid values: **1 to 300**. Default value: **5**', example='100'),
    healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name used for health checks. Valid values:

*   **$SERVER_IP**: the internal IP address of a backend server.
*   **domain**: the specified domain name. The domain name must be 1 to 80 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.).

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.', example='$SERVER_IP'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable health checks. Valid values:

*   **true**
*   **false**', example='false'),
    healthCheckExp?: string(name='HealthCheckExp', description='The response string of UDP health checks. The string must be 1 to 512 characters in length, and can contain letters and digits.', example='ok'),
    healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode', description='The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: **http_2xx** (default), **http_3xx**, **http_4xx**, and **http_5xx**.

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds. Default value: **5**

*   If you set **HealthCheckType** to **TCP** or **HTTP**, valid values are **1 to 50**.
*   If you set **HealthCheckType** to **UDP**, valid values are **1 to 300**. Set the health check interval equal to or larger than the response timeout period to ensure that UDP response timeouts are not determined as no responses.', example='5'),
    healthCheckReq?: string(name='HealthCheckReq', description='The request string of UDP health checks. The string must be 1 to 512 characters in length, and can contain letters and digits.', example='hello'),
    healthCheckType?: string(name='HealthCheckType', description='The protocol that you want to use for health checks. Valid values:

*   **TCP**
*   **HTTP**
*   **UDP**', example='TCP'),
    healthCheckUrl?: string(name='HealthCheckUrl', description='The path to which health check probes are sent.

The path must be 1 to 80 characters in length and can contain only letters, digits, and the following special characters: `- / . % ? # & =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`. It must start with a forward slash (/).

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.', example='/test/index.html'),
    healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from **fail** to **success**. Valid values: **2** to **10**.', example='3'),
    httpCheckMethod?: string(name='HttpCheckMethod', description='The HTTP method used for health checks. Valid values: **GET** and **HEAD**.

>  This parameter takes effect only if you set **HealthCheckType** to **HTTP**.', example='GET'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from **success** to **fail**. Valid values: **2** to **10**.', example='3'),
  }(name='HealthCheckConfig', description='Health check configurations.', position='Body'),
  preserveClientIpEnabled?: boolean(name='PreserveClientIpEnabled', description='Specifies whether to enable client IP preservation. Valid values:

*   **true**
*   **false**

>  You cannot set this parameter to **true** if **PreserveClientIpEnabled** is set to **false** and the server group is associated with a listener that uses **SSL over TCP**.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region where the NLB instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **Wrr**: weighted round-robin. Backend servers with higher weights receive more requests.
*   **Wlc**: weighted least connections. Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If multiple backend servers have the same weight, requests are forwarded to the backend server with the least connections.
*   **rr**: Requests are forwarded to backend servers in sequence.
*   **sch**: source IP hash. Requests from the same source IP address are forwarded to the same backend server.
*   **tch**: consistent hashing based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same four factors are forwarded to the same backend server.
*   **qch**: QUIC ID hash. Requests that contain the same QUIC ID are forwarded to the same backend server.

>  QUIC ID hash is supported only when the backend protocol is set to UDP.', example='Wrr', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='The server group ID.

This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  serverGroupName?: string(name='ServerGroupName', description='The new name of the server group.

The name must be 2 to 128 characters in length, can contain digits, periods (.), underscores (_), and hyphens (-), and must start with a letter.', example='NLB_ServerGroup1', position='Body'),
}

model UpdateServerGroupAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtoptyui****'),
}

model UpdateServerGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServerGroupAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServerGroupAttribute  UpdateServerGroupAttributeRequest
  * @return UpdateServerGroupAttributeResponse
 */
async function updateServerGroupAttribute(request: UpdateServerGroupAttributeRequest): UpdateServerGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServerGroupAttribute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateServerGroupServersAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request.

You can use the client to generate this value. Ensure that the value is unique among all requests. Only ASCII characters are allowed.

>  If you do not specify this parameter, the value of **RequestId** is used.**** **RequestId** of each request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the NLB instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/443657.html) operation to query the most recent region list.', example='cn-hangzhou', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='The server group ID.

This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  servers: [ 
    {
      description?: string(name='Description', description='The description of the backend server.

The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at sings (@), underscores (_), and hyphens (-).', example='test'),
      port: int32(name='Port', description='The port used by the backend server. Valid values: **1** to **65535**.

>  This parameter cannot be modified.

This parameter is required.', example='443'),
      serverId: string(name='ServerId', description='The backend server ID.

*   If the server group is of the **Instance** type, set this parameter to the IDs of servers of the **Ecs**, **Eni**, or **Eci** type.
*   If the server group is of the **Ip** type, set this parameter to IP addresses.

This parameter is required.', example='ecs-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', description='The IP addresses of servers. If the server group type is **Ip**, set the ServerId parameter to IP addresses.', example='192.168.6.6'),
      serverType: string(name='ServerType', description='The type of the backend server. Valid values:

*   **Ecs**: Elastic Compute Service (ECS) instance
*   **Eni**: elastic network interface (ENI)
*   **Eci**: elastic container instance
*   **Ip**: IP address

This parameter is required.', example='Ecs'),
      weight?: int32(name='Weight', description='The weight of the backend server. Valid values: **0** to **100**. Default value: **100**. If the value is set to **0**, no requests are forwarded to the server.', example='100'),
    }
  ](name='Servers', description='The backend servers. You can specify at most 200 backend servers in each call.

This parameter is required.', position='Body'),
}

model UpdateServerGroupServersAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtoptyui****'),
}

model UpdateServerGroupServersAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServerGroupServersAttributeResponseBody(name='body'),
}

/**
  * @description **UpdateServerGroupServersAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](https://help.aliyun.com/document_detail/445895.html) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, the server group is being modified.
  *     *   If a server group is in the **Available** state, the server group is running.
  * 2.  You can call the [ListServerGroupServers](https://help.aliyun.com/document_detail/445896.html) operation to query the status of a backend server.
  *     *   If a backend server is in the **Configuring** state, it indicates that the backend server is being modified.
  *     *   If a backend server is in the **Available** state, it indicates that the backend server is running.
  * @param request  the request parameters of UpdateServerGroupServersAttribute  UpdateServerGroupServersAttributeRequest
  * @return UpdateServerGroupServersAttributeResponse
 */
async function updateServerGroupServersAttribute(request: UpdateServerGroupServersAttributeRequest): UpdateServerGroupServersAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServerGroupServersAttribute', 'POST', '/', 'json', true, 'form', request);
}

