/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DataLake';
  @version = '2020-07-10';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'datalake-daily.aliyuncs.com',
    'ap-northeast-2-pop' = 'datalake-daily.aliyuncs.com',
    'ap-south-1' = 'datalake-daily.aliyuncs.com',
    'ap-southeast-1' = 'datalake-daily.aliyuncs.com',
    'ap-southeast-2' = 'datalake-daily.aliyuncs.com',
    'ap-southeast-3' = 'datalake-daily.aliyuncs.com',
    'ap-southeast-5' = 'datalake-daily.aliyuncs.com',
    'cn-beijing' = 'dlf.cn-beijing.aliyuncs.com',
    'cn-beijing-finance-1' = 'datalake-daily.aliyuncs.com',
    'cn-beijing-finance-pop' = 'datalake-daily.aliyuncs.com',
    'cn-beijing-gov-1' = 'datalake-daily.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'datalake-daily.aliyuncs.com',
    'cn-chengdu' = 'datalake-daily.aliyuncs.com',
    'cn-edge-1' = 'datalake-daily.aliyuncs.com',
    'cn-fujian' = 'datalake-daily.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou' = 'dlf.cn-hangzhou.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou-finance' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'datalake-daily.aliyuncs.com',
    'cn-hangzhou-test-306' = 'datalake-daily.aliyuncs.com',
    'cn-hongkong' = 'datalake-daily.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'datalake-daily.aliyuncs.com',
    'cn-huhehaote' = 'datalake-daily.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'datalake-daily.aliyuncs.com',
    'cn-north-2-gov-1' = 'datalake-daily.aliyuncs.com',
    'cn-qingdao' = 'datalake-daily.aliyuncs.com',
    'cn-qingdao-nebula' = 'datalake-daily.aliyuncs.com',
    'cn-shanghai' = 'dlf.cn-shanghai.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'datalake-daily.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'datalake-daily.aliyuncs.com',
    'cn-shanghai-finance-1' = 'datalake-daily.aliyuncs.com',
    'cn-shanghai-inner' = 'datalake-daily.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'datalake-daily.aliyuncs.com',
    'cn-shenzhen' = 'dlf.cn-shenzhen.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'datalake-daily.aliyuncs.com',
    'cn-shenzhen-inner' = 'datalake-daily.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'datalake-daily.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'datalake-daily.aliyuncs.com',
    'cn-wuhan' = 'datalake-daily.aliyuncs.com',
    'cn-wulanchabu' = 'datalake-daily.aliyuncs.com',
    'cn-yushanfang' = 'datalake-daily.aliyuncs.com',
    'cn-zhangbei' = 'datalake-daily.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'datalake-daily.aliyuncs.com',
    'cn-zhangjiakou' = 'datalake-daily.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'datalake-daily.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'datalake-daily.aliyuncs.com',
    'eu-central-1' = 'datalake-daily.aliyuncs.com',
    'eu-west-1' = 'datalake-daily.aliyuncs.com',
    'eu-west-1-oxs' = 'datalake-daily.aliyuncs.com',
    'me-east-1' = 'datalake-daily.aliyuncs.com',
    'rus-west-1-pop' = 'datalake-daily.aliyuncs.com',
    'us-east-1' = 'datalake-daily.aliyuncs.com',
    'us-west-1' = 'datalake-daily.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AccessRequest {
  catalogId?: string(name='CatalogId'),
  principal?: Principal(name='Principal'),
  privilegeResources?: [
PrivilegeResource
](name='PrivilegeResources'),
}

model Catalog {
  catalogId?: string(name='CatalogId'),
  catalogType?: string(name='CatalogType'),
  createTime?: long(name='CreateTime'),
  createdBy?: string(name='CreatedBy'),
  defaultCatalog?: boolean(name='DefaultCatalog'),
  description?: string(name='Description'),
  jdbcEnabled?: boolean(name='JdbcEnabled'),
  locationUri?: string(name='LocationUri'),
  owner?: string(name='Owner'),
  status?: string(name='Status'),
  storageAccessConfig?: string(name='StorageAccessConfig'),
  thriftEnabled?: boolean(name='ThriftEnabled'),
  updateTime?: long(name='UpdateTime'),
}

model CatalogConnection {
  jdbcPassword?: string(name='JdbcPassword'),
  jdbcUri?: string(name='JdbcUri'),
  jdbcUserName?: string(name='JdbcUserName'),
  thriftUri?: string(name='ThriftUri'),
  vpcConnectionId?: string(name='VpcConnectionId', example='CONN-607A0053D874****'),
}

model CatalogInput {
  catalogId: string(name='CatalogId'),
  catalogType?: string(name='CatalogType'),
  description?: string(name='Description'),
  jdbcEnabled?: boolean(name='JdbcEnabled'),
  locationUri?: string(name='LocationUri'),
  owner?: string(name='Owner'),
  storageAccessConfig?: string(name='StorageAccessConfig'),
  thriftEnabled?: boolean(name='ThriftEnabled'),
}

model CatalogResource {
  catalogId?: string(name='CatalogId'),
}

model CatalogSettings {
  config?: map[string]string(name='Config'),
}

model CatalogVpcConnection {
  catalogId?: string(name='CatalogId', example='catalog_test'),
  connectionName?: string(name='ConnectionName'),
  connectionStatus?: string(name='ConnectionStatus', example='CONNECTED'),
  creator?: long(name='Creator', example='120215474170****'),
  errorMessage?: string(name='ErrorMessage'),
  gmtCreate?: string(name='GmtCreate', example='2023-07-12 15:26:12'),
  gmtModified?: string(name='GmtModified', example='2023-07-17 17:51:04'),
  jdbcUri?: string(name='JdbcUri'),
  modifier?: long(name='Modifier', example='120215474170****'),
  owner?: long(name='Owner', example='120215474170****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
  thriftUri?: string(name='ThriftUri'),
  vpcConnectionId?: string(name='VpcConnectionId', example='CONN-607A0053D874****'),
  vpcId?: string(name='VpcId', example='vpc-2ze0c41hvmesel7pu****'),
  zones?: [ 
    {
      ip?: string(name='IP', example='192.168.XX.XX'),
      vSwitchId?: string(name='VSwitchId', example='vsw-hp3uf6045ljdhd5zr****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
    }
  ](name='Zones'),
}

model CatalogVpcConnectionInput {
  connectionName?: string(name='ConnectionName'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
  vpcId?: string(name='VpcId', example='vpc-hp356stwkxg3fn2xe****'),
  zones?: [ 
    {
      ip?: string(name='IP', example='192.168.XX.XX'),
      vSwitchId?: string(name='VSwitchId', example='vsw-hp3uf6045ljdhd5zr****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
    }
  ](name='Zones'),
}

model ColumnResource {
  columnNames?: [ string ](name='ColumnNames'),
  databaseName?: string(name='DatabaseName', example='default'),
  tableName?: string(name='TableName', example='test'),
}

model ColumnStatistics {
  columnStatisticsDesc?: ColumnStatisticsDesc(name='ColumnStatisticsDesc'),
  columnStatisticsObjList?: [
    ColumnStatisticsObj
  ](name='ColumnStatisticsObjList'),
  engine?: string(name='Engine'),
  isStatsCompliant?: boolean(name='IsStatsCompliant'),
}

model ColumnStatisticsDesc {
  lastAnalyzedTime?: long(name='LastAnalyzedTime'),
  partitionName?: string(name='PartitionName'),
}

model ColumnStatisticsObj {
  columnName?: string(name='ColumnName'),
  columnStatisticsData?: {
    statisticsData?: string(name='StatisticsData'),
    statisticsType?: string(name='StatisticsType'),
  }(name='ColumnStatisticsData'),
  columnType?: string(name='ColumnType'),
}

model Database {
  createTime?: int32(name='CreateTime'),
  createdBy?: string(name='CreatedBy'),
  description?: string(name='Description'),
  locationUri?: string(name='LocationUri', example='oss://examplebuket/exampledb'),
  name?: string(name='Name'),
  ownerName?: string(name='OwnerName'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  updateTime?: int32(name='UpdateTime'),
}

model DatabaseInput {
  createTime?: int32(name='CreateTime'),
  description?: string(name='Description'),
  locationUri?: string(name='LocationUri', example='oss://examplebuket/exampledb'),
  name?: string(name='Name'),
  ownerName?: string(name='OwnerName'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
}

model DatabaseProfile {
  createTime?: string(name='CreateTime'),
  fileCnt?: long(name='FileCnt'),
  fileSize?: long(name='FileSize'),
  latestDate?: string(name='LatestDate'),
  location?: string(name='Location'),
  name?: string(name='Name'),
  objectCnt?: long(name='ObjectCnt'),
  objectSize?: long(name='ObjectSize'),
}

model DatabaseResource {
  databaseName?: string(name='DatabaseName', example='default'),
  databaseWildcard?: string(name='DatabaseWildcard'),
}

model DbStorageRank {
  dbName?: string(name='DbName'),
  quantity?: long(name='Quantity'),
}

model ErrorDetail {
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model FieldSchema {
  comment?: string(name='Comment'),
  name?: string(name='Name'),
  parameters?: map[string]string(name='Parameters'),
  type?: string(name='Type'),
}

model FileCnt {
  large?: long(name='Large'),
  middle?: long(name='Middle'),
  small?: long(name='Small'),
  tiny?: long(name='Tiny'),
}

model Function {
  catalogId?: string(name='CatalogId'),
  className?: string(name='ClassName'),
  createTime?: int32(name='CreateTime'),
  createdBy?: string(name='CreatedBy', example='CreatedBy'),
  databaseName?: string(name='DatabaseName'),
  functionName?: string(name='FunctionName'),
  functionType?: string(name='FunctionType'),
  ownerName?: string(name='OwnerName'),
  ownerType?: string(name='OwnerType'),
  resourceUri?: [
    ResourceUri
  ](name='ResourceUri'),
  updateTime?: int32(name='UpdateTime'),
}

model FunctionInput {
  className?: string(name='ClassName'),
  createTime?: int32(name='CreateTime'),
  functionName?: string(name='FunctionName'),
  functionType?: string(name='FunctionType'),
  ownerName?: string(name='OwnerName'),
  ownerType?: string(name='OwnerType'),
  resourceUri?: [
    ResourceUri
  ](name='ResourceUri'),
}

model FunctionResource {
  databaseName?: string(name='DatabaseName', example='default'),
  functionName?: string(name='FunctionName', example='default'),
}

model GrantRevokeEntry {
  accesses?: [ string ](name='Accesses'),
  delegateAccesses?: [ string ](name='DelegateAccesses'),
  id?: string(name='Id'),
  metaResource?: MetaResource(name='MetaResource'),
  principal?: Principal(name='Principal'),
}

model GrantRevokeFailureEntry {
  errorDetail?: ErrorDetail(name='ErrorDetail'),
  grantRevokeEntry?: GrantRevokeEntry(name='GrantRevokeEntry'),
}

model HighLight {
  key?: string(name='Key', example='name'),
  value?: string(name='Value', example='<em>tab</em>2'),
}

model IndicatorStatistic {
  data?: long(name='Data'),
  date?: string(name='Date'),
}

model LifecycleResource {
  bizId?: string(name='BizId'),
  catalogId?: string(name='CatalogId'),
  database?: {
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    locationUri?: string(name='LocationUri'),
    name?: string(name='Name'),
    updateTime?: long(name='UpdateTime'),
  }(name='Database'),
  databaseName?: string(name='DatabaseName'),
  databaseProfile?: DatabaseProfile(name='DatabaseProfile'),
  gmtCreate?: string(name='GmtCreate'),
  lifecycleRuleBizId?: string(name='LifecycleRuleBizId'),
  owner?: long(name='Owner'),
  table?: {
    createTime?: long(name='CreateTime'),
    databaseName?: string(name='DatabaseName'),
    parameters?: map[string]string(name='Parameters'),
    sd?: {
      bucketCols?: [ string ](name='BucketCols'),
      inputFormat?: string(name='InputFormat'),
      location?: string(name='Location'),
      outputFormat?: string(name='OutputFormat'),
      parameters?: map[string]string(name='Parameters'),
      serDeInfo?: {
        name?: string(name='Name'),
        parameters?: map[string]string(name='Parameters'),
        serializationLib?: string(name='SerializationLib'),
      }(name='SerDeInfo'),
    }(name='Sd'),
    tableName?: string(name='TableName'),
    tableType?: string(name='TableType'),
  }(name='Table'),
  tableName?: string(name='TableName'),
  tableProfile?: TableProfile(name='TableProfile'),
}

model LifecycleRule {
  archiveDays?: int32(name='ArchiveDays'),
  bindCount?: int32(name='BindCount'),
  bizId?: string(name='BizId'),
  catalogId?: string(name='CatalogId'),
  coldArchiveDays?: int32(name='ColdArchiveDays'),
  config?: string(name='Config'),
  description?: string(name='Description'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  iaDays?: int32(name='IaDays'),
  name?: string(name='Name'),
  resourceType?: string(name='ResourceType'),
  ruleType?: string(name='RuleType'),
  scheduleStatus?: string(name='ScheduleStatus'),
  workflow?: Workflow(name='Workflow'),
  workflowId?: string(name='WorkflowId'),
  workflowInstance?: WorkflowInstance(name='WorkflowInstance'),
}

model LifecycleTask {
  bizId?: string(name='BizId'),
  lifecycleRule?: LifecycleRule(name='LifecycleRule'),
  name?: string(name='Name'),
  workflowInstance?: WorkflowInstance(name='WorkflowInstance'),
}

model LocationStorageRankDTO {
  fileCnt?: long(name='FileCnt'),
  location?: string(name='Location'),
  storage?: long(name='Storage'),
}

model LockObj {
  catalogId?: string(name='CatalogId'),
  databaseName?: string(name='DatabaseName'),
  partitionName?: string(name='PartitionName'),
  tableName?: string(name='TableName'),
}

model LockStatus {
  lockId?: long(name='LockId'),
  lockState?: string(name='LockState'),
}

model LogInfo {
  bizTime?: string(name='BizTime'),
  gmtCreate?: string(name='GmtCreate'),
  instanceId?: string(name='InstanceId'),
  logContent?: string(name='LogContent'),
  logId?: string(name='LogId'),
  logSummary?: string(name='LogSummary'),
  logType?: string(name='LogType'),
}

model MetaResource {
  catalogResource?: CatalogResource(name='CatalogResource'),
  columnResource?: ColumnResource(name='ColumnResource'),
  databaseResource?: DatabaseResource(name='DatabaseResource'),
  functionResource?: FunctionResource(name='FunctionResource'),
  resourceType?: string(name='ResourceType', example='TABLE'),
  tableResource?: TableResource(name='TableResource'),
}

model Order {
  col?: string(name='Col'),
  order?: int32(name='Order'),
}

model Partition {
  createTime?: int32(name='CreateTime'),
  databaseName?: string(name='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime'),
  parameters?: map[string]string(name='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName'),
  values?: [ string ](name='Values'),
}

model PartitionError {
  errorDetail?: ErrorDetail(name='ErrorDetail'),
  partitionValues?: [ string ](name='PartitionValues'),
}

model PartitionInput {
  createTime?: int32(name='CreateTime'),
  databaseName?: string(name='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime'),
  parameters?: map[string]string(name='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName'),
  values?: [ string ](name='Values'),
}

model PartitionProfile {
  accessNum?: long(name='AccessNum', example='0'),
  accessNumMonthly?: long(name='AccessNumMonthly', example='0'),
  accessNumWeekly?: long(name='AccessNumWeekly', example='0'),
  archiveStatus?: string(name='ArchiveStatus', example='STANDARD'),
  createTime?: string(name='CreateTime', example='2023-08-16 18:02:22'),
  dataSourceType?: string(name='DataSourceType', example='OSS_HDFS'),
  databaseName?: string(name='DatabaseName', example='test_db'),
  fileCnt?: long(name='FileCnt', example='1'),
  fileSize?: long(name='FileSize', example='13'),
  lastAccessNumTime?: string(name='LastAccessNumTime'),
  lastAccessTime?: string(name='LastAccessTime', example='2023-08-22 12:14:42'),
  lastModifyTime?: string(name='LastModifyTime', example='2023-08-16 18:02:25'),
  location?: string(name='Location', example='oss://mybucket.cn-hangzhou.oss-dls.aliyuncs.com/test_tb/test_tbl/year=2023/month=1'),
  objectAccessNum?: long(name='ObjectAccessNum', example='0'),
  objectAccessNumMonthly?: long(name='ObjectAccessNumMonthly', example='4'),
  objectAccessNumWeekly?: long(name='ObjectAccessNumWeekly', example='4'),
  objectCnt?: long(name='ObjectCnt', example='1'),
  objectSize?: long(name='ObjectSize', example='13'),
  partitionName?: string(name='PartitionName', example='year=2023/month=1'),
  tableName?: string(name='TableName', example='test_tbl'),
}

model PartitionSpec {
  sharedSDPartitions?: [
    Partition
  ](name='SharedSDPartitions'),
  sharedStorageDescriptor?: {
    cols?: [
      FieldSchema
    ](name='Cols'),
    location?: string(name='Location', example='相对路径'),
  }(name='SharedStorageDescriptor'),
}

model Principal {
  principalArn?: string(name='PrincipalArn', example='acs:ram::[AliyunAccountId]:user/username_abc'),
}

model PrincipalPrivilegeSet {
  groupPrivileges?: map[string][
    PrivilegeGrantInfo
  ](name='GroupPrivileges'),
  rolePrivileges?: map[string][
    PrivilegeGrantInfo
  ](name='RolePrivileges'),
  userPrivileges?: map[string][
    PrivilegeGrantInfo
  ](name='UserPrivileges'),
}

model PrincipalResourcePermissions {
  accesses?: [ string ](name='Accesses'),
  delegateAccesses?: [ string ](name='DelegateAccesses'),
  metaResource: MetaResource(name='MetaResource'),
  principal: Principal(name='Principal'),
}

model PrivilegeGrantInfo {
  createTime?: int32(name='CreateTime'),
  grantOption?: boolean(name='GrantOption'),
  grantor?: string(name='Grantor'),
  grantorType?: string(name='GrantorType'),
  privilege?: string(name='Privilege'),
}

model PrivilegeResource {
  access?: string(name='Access'),
  metaResource?: MetaResource(name='MetaResource'),
}

model ResourceUri {
  resourceType?: string(name='ResourceType'),
  uri?: string(name='Uri'),
}

model Role {
  createTime?: long(name='CreateTime'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName', example='显示名称，允许中文'),
  isPredefined?: int32(name='IsPredefined'),
  name?: string(name='Name'),
  principalArn?: string(name='PrincipalArn'),
  updateTime?: long(name='UpdateTime'),
  users?: [
Principal
](name='Users'),
}

model RoleInput {
  description?: string(name='Description'),
  displayName?: string(name='DisplayName', example='显示名称，允许中文'),
  name?: string(name='Name'),
}

model SerDeInfo {
  name?: string(name='Name'),
  parameters?: map[string]string(name='Parameters'),
  serializationLib?: string(name='SerializationLib'),
}

model SingleIndicatorDTO {
  dayIncrement?: long(name='DayIncrement'),
  dayOnDay?: double(name='DayOnDay'),
  monthIncrement?: long(name='MonthIncrement'),
  monthOnMonth?: double(name='MonthOnMonth'),
  total?: long(name='Total'),
}

model SkewedInfo {
  skewedColNames?: [ string ](name='SkewedColNames'),
  skewedColValueLocationMaps?: map[string]string(name='SkewedColValueLocationMaps'),
  skewedColValues?: [[ string ]  ](name='SkewedColValues'),
}

model SmallFileCntRank {
  dbName?: string(name='DbName'),
  location?: string(name='Location'),
  quantity?: long(name='Quantity'),
  tableName?: string(name='TableName'),
}

model SortCriterion {
  fieldName?: string(name='FieldName', example='name'),
  sort?: string(name='Sort', example='asc/desc'),
}

model StorageCollectTaskOperationResult {
  dlfCreated?: boolean(name='DlfCreated'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  taskType?: string(name='TaskType'),
}

model StorageDescriptor {
  bucketCols?: [ string ](name='BucketCols'),
  cols?: [
    FieldSchema
  ](name='Cols'),
  compressed?: boolean(name='Compressed'),
  inputFormat?: string(name='InputFormat'),
  location?: string(name='Location'),
  numBuckets?: int32(name='NumBuckets'),
  outputFormat?: string(name='OutputFormat'),
  parameters?: map[string]string(name='Parameters'),
  serDeInfo?: SerDeInfo(name='SerDeInfo'),
  skewedInfo?: SkewedInfo(name='SkewedInfo'),
  sortCols?: [
    Order
  ](name='SortCols'),
  storedAsSubDirectories?: boolean(name='StoredAsSubDirectories'),
}

model StorageFormat {
  avro?: long(name='Avro'),
  csv?: long(name='Csv'),
  delta?: long(name='Delta'),
  hudi?: long(name='Hudi'),
  iceberg?: long(name='Iceberg'),
  json?: long(name='Json'),
  orc?: long(name='Orc'),
  parquet?: long(name='Parquet'),
  uncategorized?: long(name='Uncategorized'),
}

model StorageLayer {
  archive?: long(name='Archive'),
  coldArchive?: long(name='ColdArchive'),
  infrequent?: long(name='Infrequent'),
  standard?: long(name='Standard'),
  unknown?: long(name='Unknown'),
}

model StorageRankDTO {
  dbStorageRank?: [
    DbStorageRank
  ](name='dbStorageRank'),
  smallFileCntRank?: [
    SmallFileCntRank
  ](name='smallFileCntRank'),
  tableStorageRank?: [
    TableStorageRank
  ](name='tableStorageRank'),
}

model StorageSummary {
  databaseNum?: int32(name='DatabaseNum'),
  partitionNum?: int32(name='PartitionNum'),
  tableNum?: int32(name='TableNum'),
}

model StrogeCollectTask {
  destinationBucketName?: string(name='DestinationBucketName'),
  destinationPrefix?: string(name='DestinationPrefix'),
  dlfCreated?: boolean(name='DlfCreated'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: string(name='Id'),
  inventoryId?: string(name='InventoryId'),
  location?: string(name='Location'),
  status?: string(name='Status'),
  taskType?: string(name='TaskType'),
}

model Table {
  cascade?: boolean(name='Cascade'),
  createTime?: int32(name='CreateTime'),
  createdBy?: string(name='CreatedBy'),
  databaseName?: string(name='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime'),
  owner?: string(name='Owner'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  partitionKeys?: [
FieldSchema
](name='PartitionKeys'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  retention?: int32(name='Retention'),
  rewriteEnabled?: boolean(name='RewriteEnabled'),
  sd?: StorageDescriptor(name='Sd'),
  tableId?: string(name='TableId', example='59c6c8fefeaa46d8b599c1f790c59a19'),
  tableName?: string(name='TableName'),
  tableType?: string(name='TableType'),
  tableVersion?: TableVersion(name='TableVersion'),
  temporary?: boolean(name='Temporary'),
  updateTime?: int32(name='UpdateTime'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
}

model TableError {
  errorDetail?: ErrorDetail(name='ErrorDetail'),
  tableName?: string(name='TableName'),
}

model TableExtended {
  cascade?: boolean(name='Cascade'),
  createTime?: int32(name='CreateTime'),
  createdBy?: string(name='CreatedBy'),
  databaseName?: string(name='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime'),
  owner?: string(name='Owner'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  partitionKeys?: [
FieldSchema
](name='PartitionKeys'),
  privileges?: {
    rolePrivileges?: map[string][ TableExtendedPrivilegesRolePrivilegesValue     ](name='RolePrivileges'),
    userPrivileges?: map[string][ TableExtendedPrivilegesUserPrivilegesValue     ](name='UserPrivileges'),
    groupPrivileges?: map[string][ TableExtendedPrivilegesGroupPrivilegesValue     ](name='groupPrivileges'),
  }(name='Privileges'),
  retention?: int32(name='Retention'),
  rewriteEnabled?: boolean(name='RewriteEnabled'),
  sd?: {
    bucketCols?: [ string ](name='BucketCols'),
    cols?: [
      FieldSchema
    ](name='Cols'),
    compressed?: boolean(name='Compressed'),
    inputFormat?: string(name='InputFormat'),
    location?: string(name='Location'),
    numBuckets?: int32(name='NumBuckets'),
    outputFormat?: string(name='OutputFormat'),
    parameters?: map[string]string(name='Parameters'),
    serDeInfo?: {
      name?: string(name='Name'),
      parameters?: map[string]string(name='Parameters'),
      serializationLib?: string(name='SerializationLib'),
    }(name='SerDeInfo'),
    skewedInfo?: {
      skewedColNames?: [ string ](name='SkewedColNames'),
      skewedColValueLocationMaps?: map[string]string(name='SkewedColValueLocationMaps'),
      skewedColValues?: [[ string ]      ](name='SkewedColValues'),
    }(name='SkewedInfo'),
    sortCols?: [
      Order
    ](name='SortCols'),
    storedAsSubDirectories?: boolean(name='StoredAsSubDirectories'),
  }(name='Sd'),
  tableFormat?: string(name='TableFormat'),
  tableName?: string(name='TableName'),
  tableType?: string(name='TableType'),
  temporary?: boolean(name='Temporary'),
  updateTime?: int32(name='UpdateTime'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
}

model TableInput {
  cascade?: boolean(name='Cascade'),
  createTime?: int32(name='CreateTime'),
  createdBy?: string(name='CreatedBy'),
  databaseName?: string(name='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime'),
  owner?: string(name='Owner'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  partitionKeys?: [
FieldSchema
](name='PartitionKeys'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  retention?: int32(name='Retention'),
  rewriteEnabled?: boolean(name='RewriteEnabled'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName'),
  tableType?: string(name='TableType'),
  temporary?: boolean(name='Temporary'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
}

model TableProfile {
  accessNum?: long(name='AccessNum', example='0'),
  accessNumMonthly?: long(name='AccessNumMonthly', example='0'),
  accessNumWeekly?: long(name='AccessNumWeekly', example='0'),
  createTime?: string(name='CreateTime', example='2023-08-14 10:44:13'),
  dataSourceType?: string(name='DataSourceType', example='OSS_HDFS'),
  databaseName?: string(name='DatabaseName', example='test_db'),
  fileCnt?: long(name='FileCnt', example='5'),
  fileSize?: long(name='FileSize', example='31'),
  isPartitioned?: boolean(name='IsPartitioned', example='true'),
  lastAccessNumTime?: string(name='LastAccessNumTime'),
  lastAccessTime?: string(name='LastAccessTime', example='2023-08-22 12:14:42'),
  lastDdlTime?: string(name='LastDdlTime', example='2023-08-16 18:02:24'),
  lastModifyTime?: string(name='LastModifyTime', example='2023-08-16 18:02:25'),
  latestAccessNumDate?: string(name='LatestAccessNumDate'),
  latestDate?: string(name='LatestDate', example='2023-08-30 19:16:10'),
  location?: string(name='Location', example='oss://mybucket.cn-hangzhou.oss-dls.aliyuncs.com/test_db/test_tbl/'),
  objectAccessNum?: long(name='ObjectAccessNum', example='0'),
  objectAccessNumMonthly?: long(name='ObjectAccessNumMonthly', example='18'),
  objectAccessNumWeekly?: long(name='ObjectAccessNumWeekly', example='18'),
  objectCnt?: long(name='ObjectCnt', example='5'),
  objectSize?: long(name='ObjectSize', example='31'),
  partitionCnt?: long(name='PartitionCnt', example='3'),
  recordCnt?: long(name='RecordCnt'),
  tableName?: string(name='TableName', example='test_tbl'),
}

model TableResource {
  databaseName?: string(name='DatabaseName'),
  tableName?: string(name='TableName'),
}

model TableStorageRank {
  dbName?: string(name='DbName'),
  quantity?: long(name='Quantity'),
  tableName?: string(name='TableName'),
}

model TableVersion {
  table?: Table(name='Table'),
  versionId?: int32(name='VersionId'),
}

model TaskStatus {
  message?: string(name='Message'),
  status?: string(name='Status'),
}

model UnarchiveDetail {
  apiCallTimes?: long(name='ApiCallTimes'),
  cost?: long(name='Cost'),
  storageSize?: long(name='StorageSize'),
  storageType?: string(name='StorageType'),
  unarchiveTaskStatus?: string(name='UnarchiveTaskStatus'),
}

model UpdateTablePartitionColumnStatisticsRequest {
  catalogId?: string(name='CatalogId'),
  columnStatisticsList?: [
    ColumnStatistics
  ](name='ColumnStatisticsList'),
  databaseName?: string(name='DatabaseName'),
  engine?: string(name='Engine'),
  isStatsCompliant?: boolean(name='IsStatsCompliant'),
  tableName?: string(name='TableName'),
  validWriteIdList?: string(name='ValidWriteIdList'),
  writeId?: string(name='WriteId'),
}

model UserRole {
  grantTime?: long(name='GrantTime'),
  role?: Role(name='Role'),
  user?: Principal(name='User'),
}

model Workflow {
  latestEndTime?: string(name='LatestEndTime'),
  latestInstanceId?: string(name='LatestInstanceId'),
  latestInstanceStatus?: string(name='LatestInstanceStatus'),
  latestStartTime?: string(name='LatestStartTime'),
}

model WorkflowInstance {
  batchProgress?: int32(name='BatchProgress'),
  dlfWorkflowId?: string(name='DlfWorkflowId'),
  endTime?: long(name='EndTime'),
  externalInstanceId?: string(name='ExternalInstanceId'),
  runtimeLogs?: [
    LogInfo
  ](name='RuntimeLogs'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
}

model AbortLockRequest {
  regionId?: string(name='RegionId', position='Host'),
  lockId?: long(name='LockId', description='LockId', example='16530', position='Query'),
}

model AbortLockResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='01D8DD6B-4929-5999-9BB3-950AA30E3BD0'),
  success?: boolean(name='Success', description='Success', example='True'),
}

model AbortLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbortLockResponseBody(name='body'),
}

async function abortLock(request: AbortLockRequest): AbortLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AbortLock', 'DELETE', '/api/metastore/catalogs/databases/tables/locks/abort', 'json', false, 'json', request);
}

model BatchCreatePartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  ifNotExists?: boolean(name='IfNotExists', example='true', position='Body'),
  needResult?: boolean(name='NeedResult', example='true', position='Body'),
  partitionInputs?: [
    PartitionInput
  ](name='PartitionInputs', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Body'),
}

model BatchCreatePartitionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors'),
  partitions?: [
    Partition
  ](name='Partitions'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreatePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreatePartitionsResponseBody(name='body'),
}

async function batchCreatePartitions(request: BatchCreatePartitionsRequest): BatchCreatePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreatePartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/batchcreate', 'json', false, 'json', request);
}

model BatchCreateTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  ifNotExists?: boolean(name='IfNotExists', example='true', position='Body'),
  tableInputs?: [
    TableInput
  ](name='TableInputs', position='Body'),
}

model BatchCreateTablesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableErrors?: [
    TableError
  ](name='TableErrors'),
}

model BatchCreateTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateTablesResponseBody(name='body'),
}

async function batchCreateTables(request: BatchCreateTablesRequest): BatchCreateTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreateTables', 'POST', '/api/metastore/catalogs/databases/tables/batchcreate', 'json', false, 'json', request);
}

model BatchDeletePartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  ifExists?: boolean(name='IfExists', example='true', position='Body'),
  partitionValueList?: [ 
{
values?: [ string ](name='Values'),
}
](name='PartitionValueList', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201225', position='Body'),
}

model BatchDeletePartitionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model BatchDeletePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeletePartitionsResponseBody(name='body'),
}

async function batchDeletePartitions(request: BatchDeletePartitionsRequest): BatchDeletePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeletePartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/batchdelete', 'json', false, 'json', request);
}

model BatchDeleteTableVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
  versionIds?: [ int32 ](name='VersionIds', position='Body'),
}

model BatchDeleteTableVersionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model BatchDeleteTableVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteTableVersionsResponseBody(name='body'),
}

async function batchDeleteTableVersions(request: BatchDeleteTableVersionsRequest): BatchDeleteTableVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeleteTableVersions', 'POST', '/api/metastore/catalogs/databases/tables/versions/batchdelete', 'json', false, 'json', request);
}

model BatchDeleteTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  ifExists?: boolean(name='IfExists', description='IfExists', example='true', position='Body'),
  tableNames?: [ string ](name='TableNames', position='Body'),
}

model BatchDeleteTablesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableErrors?: [
    TableError
  ](name='TableErrors'),
}

model BatchDeleteTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteTablesResponseBody(name='body'),
}

async function batchDeleteTables(request: BatchDeleteTablesRequest): BatchDeleteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeleteTables', 'POST', '/api/metastore/catalogs/databases/tables/batchdelete', 'json', false, 'json', request);
}

model BatchGetPartitionColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  columnNames?: [ string ](name='ColumnNames', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  partitionNames?: [ string ](name='PartitionNames', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Body'),
}

model BatchGetPartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partitionStatisticsMap?: map[string][
    ColumnStatisticsObj
  ](name='PartitionStatisticsMap'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetPartitionColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetPartitionColumnStatisticsResponseBody(name='body'),
}

async function batchGetPartitionColumnStatistics(request: BatchGetPartitionColumnStatisticsRequest): BatchGetPartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetPartitionColumnStatistics', 'POST', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics/batchget', 'json', false, 'json', request);
}

model BatchGetPartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  isShareSd?: boolean(name='IsShareSd', example='true', position='Body'),
  partitionValueList?: [ 
{
values?: [ string ](name='Values'),
}
](name='PartitionValueList', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
}

model BatchGetPartitionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors'),
  partitionSpecs?: [
    PartitionSpec
  ](name='PartitionSpecs'),
  partitions?: [
    Partition
  ](name='Partitions'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetPartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetPartitionsResponseBody(name='body'),
}

async function batchGetPartitions(request: BatchGetPartitionsRequest): BatchGetPartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetPartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/batchget', 'json', false, 'json', request);
}

model BatchGetTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  tableNames?: [ string ](name='TableNames', position='Body'),
}

model BatchGetTablesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableErrors?: [
    TableError
  ](name='TableErrors'),
  tables?: [
    Table
  ](name='Tables'),
}

model BatchGetTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetTablesResponseBody(name='body'),
}

async function batchGetTables(request: BatchGetTablesRequest): BatchGetTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetTables', 'POST', '/api/metastore/catalogs/databases/tables/batchget', 'json', false, 'json', request);
}

model BatchGrantPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='catalogId', example='1344371', position='Body'),
  grantRevokeEntries?: [
    GrantRevokeEntry
  ](name='GrantRevokeEntries', position='Body'),
  type: string(name='Type', example='Hive', position='Body'),
}

model BatchGrantPermissionsResponseBody = {
  batchGrantRevokeFailureResult?: [
    GrantRevokeFailureEntry
  ](name='BatchGrantRevokeFailureResult', description='result'),
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model BatchGrantPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGrantPermissionsResponseBody(name='body'),
}

async function batchGrantPermissions(request: BatchGrantPermissionsRequest): BatchGrantPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGrantPermissions', 'POST', '/api/metastore/auth/permissions/batchgrant', 'json', false, 'json', request);
}

model BatchRevokePermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='catalogId', example='1344371', position='Body'),
  grantRevokeEntries?: [
    GrantRevokeEntry
  ](name='GrantRevokeEntries', position='Body'),
  type: string(name='Type', example='Hive', position='Body'),
}

model BatchRevokePermissionsResponseBody = {
  batchGrantRevokeFailureResult?: [
    GrantRevokeFailureEntry
  ](name='BatchGrantRevokeFailureResult', description='result'),
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message Code', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='C9E535E1-F040-56F4-B4EE-592B555DAE19'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model BatchRevokePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRevokePermissionsResponseBody(name='body'),
}

async function batchRevokePermissions(request: BatchRevokePermissionsRequest): BatchRevokePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchRevokePermissions', 'POST', '/api/metastore/auth/permissions/batchrevoke', 'json', false, 'json', request);
}

model BatchUpdatePartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  partitionInputs?: [
    PartitionInput
  ](name='PartitionInputs', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Body'),
}

model BatchUpdatePartitionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model BatchUpdatePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdatePartitionsResponseBody(name='body'),
}

async function batchUpdatePartitions(request: BatchUpdatePartitionsRequest): BatchUpdatePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdatePartitions', 'PUT', '/api/metastore/catalogs/databases/tables/partitions/batchupdate', 'json', false, 'json', request);
}

model BatchUpdateTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  isAsync?: boolean(name='IsAsync', example='true', position='Body'),
  tableInputs?: [
    TableInput
  ](name='TableInputs', position='Body'),
}

model BatchUpdateTablesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableErrors?: [
    TableError
  ](name='TableErrors', example='{"ErrorDetails":{},"TableName":"test"}'),
  taskId?: string(name='TaskId', example='f8deec55f54ac566e7ec8944fbe01588'),
}

model BatchUpdateTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateTablesResponseBody(name='body'),
}

async function batchUpdateTables(request: BatchUpdateTablesRequest): BatchUpdateTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdateTables', 'POST', '/api/metastore/catalogs/databases/tables/batchupdate', 'json', false, 'json', request);
}

model CancelQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  queryId?: string(name='QueryId', example='Q-BCA5E96CB84BB8B8', position='Query'),
}

model CancelQueryResponseBody = {
  data?: string(name='Data', example='Q-BCA5E96CB84BB8B8'),
  requestId?: string(name='RequestId', example='DB07AAE9-4B88-5DEA-8F1D-4D1A9A864A85'),
  success?: boolean(name='Success', example='true'),
}

model CancelQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelQueryResponseBody(name='body'),
}

async function cancelQuery(request: CancelQueryRequest): CancelQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelQuery', 'POST', '/webapi/query/cancelQuery', 'json', false, 'json', request);
}

model CheckPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  body?: AccessRequest(name='Body', position='Body'),
}

model CheckPermissionsResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message Code', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='81B90E1B-7514-5817-9D59-0EA9E2215876'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model CheckPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckPermissionsResponseBody(name='body'),
}

async function checkPermissions(request: CheckPermissionsRequest): CheckPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckPermissions', 'POST', '/api/metastore/auth/permissions/check', 'json', false, 'json', request);
}

model CreateCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogInput?: CatalogInput(name='CatalogInput', description='cataloginput', position='Body'),
}

model CreateCatalogResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Response Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='BA84F8D4-5160-5544-BE76-3A306CD3A7B0'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model CreateCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCatalogResponseBody(name='body'),
}

async function createCatalog(request: CreateCatalogRequest): CreateCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCatalog', 'POST', '/api/metastore/catalogs', 'json', false, 'json', request);
}

model CreateDatabaseRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseInput?: DatabaseInput(name='DatabaseInput', position='Body'),
}

model CreateDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model CreateDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatabaseResponseBody(name='body'),
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatabase', 'POST', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model CreateFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  functionInput?: FunctionInput(name='FunctionInput', position='Body'),
}

model CreateFunctionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model CreateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFunctionResponseBody(name='body'),
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFunction', 'POST', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model CreateLockRequest {
  regionId?: string(name='RegionId', position='Host'),
  lockObjList?: [
    LockObj
  ](name='LockObjList', description='LockObjList', example='{"databaseName":"db","tableName":"test"}', position='Body'),
}

model CreateLockResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  lockStatus?: LockStatus(name='LockStatus', example='{"lockId":12323,"lockStatus":"ACQUIRED"}'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='73201200-4C1A-4FEF-BD6B-C0DA7994FFA2'),
  success?: boolean(name='Success', description='Success', example='True'),
}

model CreateLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLockResponseBody(name='body'),
}

async function createLock(request: CreateLockRequest): CreateLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLock', 'POST', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model CreatePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  ifNotExists?: boolean(name='IfNotExists', example='true', position='Body'),
  needResult?: boolean(name='NeedResult', example='true', position='Body'),
  partitionInput?: PartitionInput(name='PartitionInput', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Body'),
}

model CreatePartitionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partition?: Partition(name='Partition'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model CreatePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePartitionResponseBody(name='body'),
}

async function createPartition(request: CreatePartitionRequest): CreatePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions', 'json', false, 'json', request);
}

model CreateRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
  body?: RoleInput(name='body', position='Body'),
}

model CreateRoleResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='77BC2016-BA80-570F-BD15-2FB80281FED6'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoleResponseBody(name='body'),
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRole', 'POST', '/api/metastore/auth/roles', 'json', false, 'json', request);
}

model CreateTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  tableInput?: TableInput(name='TableInput', position='Body'),
}

model CreateTableResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model CreateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableResponseBody(name='body'),
}

async function createTable(request: CreateTableRequest): CreateTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTable', 'POST', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model DeleteCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId: string(name='CatalogId', description='CatalogId', example='catalog_test', position='Query'),
  isAsync?: boolean(name='IsAsync', example='true', position='Query'),
}

model DeleteCatalogResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Response Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='Request is success or not', example='true'),
  taskId?: string(name='TaskId', example='c38206c3aca0c41332ffe49294243009'),
}

model DeleteCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCatalogResponseBody(name='body'),
}

async function deleteCatalog(request: DeleteCatalogRequest): DeleteCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCatalog', 'DELETE', '/api/metastore/catalogs', 'json', false, 'json', request);
}

model DeleteDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  async?: boolean(name='Async', position='Query'),
  cascade?: boolean(name='Cascade', example='false', position='Query'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  name?: string(name='Name', example='database_test', position='Query'),
}

model DeleteDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='73201200-4C1A-4FEF-BD6B-C0DA7994FFA2'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId'),
}

model DeleteDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatabase', 'DELETE', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model DeleteFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  functionName?: string(name='FunctionName', example='func2', position='Query'),
}

model DeleteFunctionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFunctionResponseBody(name='body'),
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunction', 'DELETE', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model DeletePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  ifExists?: boolean(name='IfExists', example='true', position='Body'),
  partitionValues?: [ string ](name='PartitionValues', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201225', position='Body'),
}

model DeletePartitionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DeletePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePartitionResponseBody(name='body'),
}

async function deletePartition(request: DeletePartitionRequest): DeletePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions/delete', 'json', false, 'json', request);
}

model DeletePartitionColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  columnNames?: [ string ](name='ColumnNames', shrink='json', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  partitionNames?: [ string ](name='PartitionNames', shrink='json', position='Query'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Query'),
}

model DeletePartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DeletePartitionColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePartitionColumnStatisticsResponseBody(name='body'),
}

async function deletePartitionColumnStatistics(request: DeletePartitionColumnStatisticsRequest): DeletePartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePartitionColumnStatistics', 'DELETE', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics', 'json', false, 'json', request);
}

model DeleteRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleName?: string(name='RoleName', example='roleId/roleName至少有一个是非空', position='Query'),
}

model DeleteRoleResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  requestId?: string(name='RequestId', description='requestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='success', example='true'),
}

model DeleteRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoleResponseBody(name='body'),
}

async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRole', 'DELETE', '/api/metastore/auth/roles', 'json', false, 'json', request);
}

model DeleteTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Query'),
}

model DeleteTableResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableResponseBody(name='body'),
}

async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTable', 'DELETE', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model DeleteTableColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  columnNames?: [ string ](name='ColumnNames', shrink='json', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Query'),
}

model DeleteTableColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTableColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableColumnStatisticsResponseBody(name='body'),
}

async function deleteTableColumnStatistics(request: DeleteTableColumnStatisticsRequest): DeleteTableColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTableColumnStatistics', 'DELETE', '/api/metastore/catalogs/databases/tables/columnstatistics', 'json', false, 'json', request);
}

model DeleteTableVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Query'),
  versionId?: int32(name='VersionId', example='1', position='Query'),
}

model DeleteTableVersionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTableVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableVersionResponseBody(name='body'),
}

async function deleteTableVersion(request: DeleteTableVersionRequest): DeleteTableVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTableVersion', 'DELETE', '/api/metastore/catalogs/databases/tables/versions', 'json', false, 'json', request);
}

model DeregisterLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  locationId: string(name='LocationId', example='LOC-AB8FBC17F95A4AF5', position='Query'),
}

model DeregisterLocationResponseBody = {
  data?: {
    locationId?: string(name='LocationId', description='Location ID', example='LOC-AB8FBC17F95A4AF5'),
    storageCollectTaskOperationResultList?: [
      StorageCollectTaskOperationResult
    ](name='StorageCollectTaskOperationResultList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E47920CD-BAE6-1305-88DF-FBDD3D300845'),
  success?: boolean(name='Success', example='true'),
}

model DeregisterLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeregisterLocationResponseBody(name='body'),
}

async function deregisterLocation(request: DeregisterLocationRequest): DeregisterLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeregisterLocation', 'DELETE', '/webapi/locations', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name', example='cn-hangzhou'),
      showName?: string(name='ShowName'),
      type?: string(name='Type', example='region'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/webapi/service/describeRegions', 'json', false, 'json', request);
}

model GetAsyncTaskStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  taskId?: string(name='TaskId', example='f546c761570e5efc8146a1986f7890d2', position='Query'),
}

model GetAsyncTaskStatusResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='Success', example='true'),
  taskStatus?: TaskStatus(name='TaskStatus', example='Success'),
}

model GetAsyncTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncTaskStatusResponseBody(name='body'),
}

async function getAsyncTaskStatus(request: GetAsyncTaskStatusRequest): GetAsyncTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAsyncTaskStatus', 'GET', '/api/metastore/catalogs/tasks', 'json', false, 'json', request);
}

model GetCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='catalogId', example='catalog_test', position='Query'),
}

model GetCatalogResponseBody = {
  catalog?: Catalog(name='Catalog'),
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='DB07AAE9-4B88-5DEA-8F1D-4D1A9A864A85'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GetCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCatalogResponseBody(name='body'),
}

async function getCatalog(request: GetCatalogRequest): GetCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCatalog', 'GET', '/api/metastore/catalogs', 'json', false, 'json', request);
}

model GetCatalogSettingsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
}

model GetCatalogSettingsResponseBody = {
  catalogSettings?: CatalogSettings(name='CatalogSettings'),
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GetCatalogSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCatalogSettingsResponseBody(name='body'),
}

async function getCatalogSettings(request: GetCatalogSettingsRequest): GetCatalogSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCatalogSettings', 'GET', '/api/metastore/catalogs/settings', 'json', false, 'json', request);
}

model GetDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  name?: string(name='Name', example='database_test', position='Query'),
}

model GetDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  database?: Database(name='Database'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='D659761F-29C3-409D-805A-0CF33A320128'),
  success?: boolean(name='Success', example='true'),
}

model GetDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseResponseBody(name='body'),
}

async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatabase', 'GET', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model GetDatabaseProfileRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='CatalogId', example='可不填', position='Query'),
  databaseName: string(name='DatabaseName', description='DatabaseName', example='530_db', position='Query'),
}

model GetDatabaseProfileResponseBody = {
  code?: string(name='Code', description='Code', example='200'),
  databaseProfile?: DatabaseProfile(name='DatabaseProfile', example='{
	"FileCnt": 213,
	"FileSize": 34324
}'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId', example='AEA7DCC8-DBF5-561B-A7FD-0747D7D51FEB'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GetDatabaseProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseProfileResponseBody(name='body'),
}

async function getDatabaseProfile(request: GetDatabaseProfileRequest): GetDatabaseProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatabaseProfile', 'GET', '/webapi/metastorehouse/catalog/database/databaseprofile', 'json', false, 'json', request);
}

model GetFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  functionName?: string(name='FunctionName', example='func2', position='Query'),
}

model GetFunctionResponseBody = {
  code?: string(name='Code', example='OK'),
  function?: Function(name='Function'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model GetFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionResponseBody(name='body'),
}

async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunction', 'GET', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model GetLifecycleRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId?: string(name='BizId', example='LCRU-17E7192705C365C0', position='Query'),
  resourceName?: string(name='ResourceName', example='demo_catalog_id.demo_db_name.demo_table_name', position='Query'),
}

model GetLifecycleRuleResponseBody = {
  data?: LifecycleRule(name='Data'),
  requestId?: string(name='RequestId', description='RequestId', example='EDBC848F-7CC7-52E3-9FBF-924D09B5C27A'),
  success?: boolean(name='Success', description='Success', example='True'),
}

model GetLifecycleRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLifecycleRuleResponseBody(name='body'),
}

async function getLifecycleRule(request: GetLifecycleRuleRequest): GetLifecycleRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLifecycleRule', 'GET', '/webapi/metastorehouse/lifecycle/rule/getLifecycleRule', 'json', false, 'json', request);
}

model GetLockRequest {
  regionId?: string(name='RegionId', position='Host'),
  lockId?: long(name='LockId', description='LockId', example='16533', position='Query'),
}

model GetLockResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  lockStatus?: LockStatus(name='LockStatus', example='{"lockId":123,"lockStatus":"Acquired"}'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='558D764F-8C55-49CA-BF38-80EA532FC08F'),
  success?: boolean(name='Success', description='Success', example='True'),
}

model GetLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLockResponseBody(name='body'),
}

async function getLock(request: GetLockRequest): GetLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLock', 'GET', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model GetPartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  partitionValues?: [ string ](name='PartitionValues', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
}

model GetPartitionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partition?: Partition(name='Partition'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model GetPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPartitionResponseBody(name='body'),
}

async function getPartition(request: GetPartitionRequest): GetPartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions/get', 'json', false, 'json', request);
}

model GetPartitionColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  columnNames?: [ string ](name='ColumnNames', shrink='json', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  partitionNames?: [ string ](name='PartitionNames', shrink='json', position='Query'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Query'),
}

model GetPartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  partitionStatisticsMap?: map[string][
    ColumnStatisticsObj
  ](name='PartitionStatisticsMap'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model GetPartitionColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPartitionColumnStatisticsResponseBody(name='body'),
}

async function getPartitionColumnStatistics(request: GetPartitionColumnStatisticsRequest): GetPartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPartitionColumnStatistics', 'GET', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics', 'json', false, 'json', request);
}

model GetQueryResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  queryId?: string(name='QueryId', example='Q-41676378709440CE', position='Query'),
}

model GetQueryResultResponseBody = {
  duration?: long(name='Duration', example='8000'),
  endTime?: string(name='EndTime', example='2022-05-09 16:19:09'),
  errorMessage?: string(name='ErrorMessage', example='Table or view not found:'),
  gmtCreate?: string(name='GmtCreate', example='2022-05-09 16:18:09'),
  gmtModified?: string(name='GmtModified', example='2022-05-09 16:19:09'),
  id?: string(name='Id', example='Q-41676378709440CE'),
  jobCompleted?: boolean(name='JobCompleted', example='true'),
  logs?: string(name='Logs', example='["this is log"]'),
  owner?: long(name='Owner', example='229167306180609***'),
  progress?: int32(name='Progress', example='99'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='1D2BCFBA-7639-59A9-817B-944EC1339279'),
  resultTmpDb?: string(name='ResultTmpDb', example='db'),
  resultTmpTable?: string(name='ResultTmpTable', example='table'),
  rowCount?: int32(name='RowCount', example='100'),
  rowCountOverLimit?: boolean(name='RowCountOverLimit', example='false'),
  rows?: string(name='Rows', example='[[10,"Tom"],[11,"Jerry"]]'),
  schema?: string(name='Schema', example='[{"name":"id","type":"INT"},{"name":"student_name","type":"VARCHAR"}]'),
  sql?: string(name='Sql', example='select * from db.student'),
  startTime?: string(name='StartTime', example='2022-05-09 16:18:09'),
  status?: string(name='Status', example='AVAILABLE'),
  success?: boolean(name='Success', example='true'),
  totalBytesProcessed?: long(name='TotalBytesProcessed', example='1024'),
}

model GetQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueryResultResponseBody(name='body'),
}

async function getQueryResult(request: GetQueryResultRequest): GetQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQueryResult', 'GET', '/webapi/query/getQueryResult', 'json', false, 'json', request);
}

model GetRegionStatusRequest {
  regionId?: string(name='RegionId', position='Host,Query'),
}

model GetRegionStatusResponseBody = {
  data?: {
    accountStatus?: string(name='AccountStatus', example='enabled'),
    isDependencyReady?: boolean(name='IsDependencyReady', example='true'),
    isDlfServiceOpen?: boolean(name='IsDlfServiceOpen', example='True'),
    regionId?: string(name='RegionId', example='cn_hangzhou'),
    regionStatus?: string(name='RegionStatus', example='READY'),
  }(name='Data', example='{\\"RegionId\\": \\"cn-shanghai\\", \\"RegionStatus\\": \\"SERVICE_INVALID\\", \\"AccountStatus\\": \\"\\", \\"IsDlfServiceOpen\\": False}'),
  requestId?: string(name='RequestId', example='CC58A776-0662-5C6D-B467-FFD4CF7F4C40'),
  success?: string(name='Success', example='true'),
}

model GetRegionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegionStatusResponseBody(name='body'),
}

async function getRegionStatus(request: GetRegionStatusRequest): GetRegionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegionStatus', 'GET', '/webapi/service/getRegionStatus', 'json', false, 'json', request);
}

model GetRoleRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', description='roleName', example='role_name', position='Query'),
}

model GetRoleResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  requestId?: string(name='RequestId', description='requestId', example='4316D7DA-9816-596D-A3D7-12676FA59BDA'),
  role?: Role(name='Role', description='role'),
  success?: boolean(name='Success', description='success', example='true'),
}

model GetRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoleResponseBody(name='body'),
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRole', 'GET', '/api/metastore/auth/roles', 'json', false, 'json', request);
}

model GetServiceStatusRequest {
  regionId?: string(name='RegionId', position='Host,Query'),
}

model GetServiceStatusResponseBody = {
  data?: {
    hasRamPermissions?: boolean(name='HasRamPermissions', example='true'),
    isDlfServiceOpen?: boolean(name='IsDlfServiceOpen', example='true'),
    isOssOpen?: boolean(name='IsOssOpen', example='true'),
  }(name='Data', example='{ 			"AccountStatus":"", 			"RegionStatus":"READY", 			"RegionId":"cn-shanghai", 			"IsDependencyReady":true, 			"IsDlfServiceOpen":true 		}'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model GetServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceStatusResponseBody(name='body'),
}

async function getServiceStatus(request: GetServiceStatusRequest): GetServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceStatus', 'GET', '/webapi/service/getServiceStatus', 'json', false, 'json', request);
}

model GetTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Query'),
}

model GetTableResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  table?: Table(name='Table'),
}

model GetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableResponseBody(name='body'),
}

async function getTable(request: GetTableRequest): GetTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTable', 'GET', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model GetTableColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  columnNames?: [ string ](name='ColumnNames', shrink='json', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Query'),
}

model GetTableColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  columnStatisticsObjList?: [
    ColumnStatisticsObj
  ](name='ColumnStatisticsObjList'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model GetTableColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableColumnStatisticsResponseBody(name='body'),
}

async function getTableColumnStatistics(request: GetTableColumnStatisticsRequest): GetTableColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableColumnStatistics', 'GET', '/api/metastore/catalogs/databases/tables/columnstatistics', 'json', false, 'json', request);
}

model GetTableProfileRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='CatalogId', example='可不填', position='Query'),
  databaseName: string(name='DatabaseName', description='DatabaseName', example='exp_table', position='Query'),
  tableName: string(name='TableName', description='TableName', example='admin_user', position='Query'),
}

model GetTableProfileResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='None'),
  requestId?: string(name='RequestId', example='C742A04F-F304-5440-9ED8-AD58C36D1915'),
  success?: boolean(name='Success', example='true'),
  tableProfile?: TableProfile(name='TableProfile'),
}

model GetTableProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableProfileResponseBody(name='body'),
}

async function getTableProfile(request: GetTableProfileRequest): GetTableProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableProfile', 'GET', '/webapi/metastorehouse/catalog/database/tableprofile', 'json', false, 'json', request);
}

model GetTableVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Query'),
  versionId?: int32(name='VersionId', example='1', position='Query'),
}

model GetTableVersionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableVersion?: TableVersion(name='TableVersion'),
}

model GetTableVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableVersionResponseBody(name='body'),
}

async function getTableVersion(request: GetTableVersionRequest): GetTableVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableVersion', 'GET', '/api/metastore/catalogs/databases/tables/versions', 'json', false, 'json', request);
}

model GrantPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  accesses: [ string ](name='Accesses', position='Body'),
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  delegateAccesses: [ string ](name='DelegateAccesses', position='Body'),
  metaResource: MetaResource(name='MetaResource', position='Body'),
  principal: Principal(name='Principal', position='Body'),
  type: string(name='Type', example='Hive', position='Body'),
}

model GrantPermissionsResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message Code', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='4912024D-2A06-5E9F-9667-35D9319917D7'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GrantPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantPermissionsResponseBody(name='body'),
}

async function grantPermissions(request: GrantPermissionsRequest): GrantPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantPermissions', 'POST', '/api/metastore/auth/permissions/grant', 'json', false, 'json', request);
}

model GrantRoleToUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleName?: string(name='RoleName', description='RoleName', example='test_role_8', position='Body'),
  users?: [
Principal
](name='Users', position='Body'),
}

model GrantRoleToUsersResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='4316D7DA-9816-596D-A3D7-12676FA59BDA'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GrantRoleToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantRoleToUsersResponseBody(name='body'),
}

async function grantRoleToUsers(request: GrantRoleToUsersRequest): GrantRoleToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantRoleToUsers', 'PUT', '/api/metastore/auth/roles/grantusers', 'json', false, 'json', request);
}

model GrantRolesToUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleNames: [ string ](name='RoleNames', position='Body'),
  user: Principal(name='User', position='Body'),
}

model GrantRolesToUserResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='81B90E1B-7514-5817-9D59-0EA9E2215876'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GrantRolesToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantRolesToUserResponseBody(name='body'),
}

async function grantRolesToUser(request: GrantRolesToUserRequest): GrantRolesToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantRolesToUser', 'POST', '/api/metastore/auth/roles/grantroles', 'json', false, 'json', request);
}

model ListCatalogsRequest {
  regionId?: string(name='RegionId', position='Host'),
  idPattern?: string(name='IdPattern', example='.*', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='‘’', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=-2, maximum=1000000, position='Query'),
}

model ListCatalogsResponseBody = {
  catalogs?: [
    Catalog
  ](name='Catalogs', example='[{"CatalogId":"xx"}]'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model ListCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCatalogsResponseBody(name='body'),
}

async function listCatalogs(request: ListCatalogsRequest): ListCatalogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCatalogs', 'GET', '/api/metastore/catalogs/list', 'json', false, 'json', request);
}

model ListDatabasesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  namePattern?: string(name='NamePattern', example='.*', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa!', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=-2, maximum=1000000, position='Query'),
}

model ListDatabasesResponseBody = {
  code?: string(name='Code', example='OK'),
  databases?: [
    Database
  ](name='Databases', example='[{"name":"test"}]'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='558D764F-8C55-49CA-BF38-80EA532FC08F'),
  success?: boolean(name='Success', example='true'),
}

model ListDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesResponseBody(name='body'),
}

async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatabases', 'GET', '/api/metastore/catalogs/databases/list', 'json', false, 'json', request);
}

model ListFunctionNamesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  functionNamePattern?: string(name='FunctionNamePattern', example='.*', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='\\"\\"', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=-1, maximum=1000000, position='Query'),
}

model ListFunctionNamesResponseBody = {
  code?: string(name='Code', example='OK'),
  functionNames?: [ string ](name='FunctionNames'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model ListFunctionNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionNamesResponseBody(name='body'),
}

async function listFunctionNames(request: ListFunctionNamesRequest): ListFunctionNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctionNames', 'GET', '/api/metastore/catalogs/databases/functions/names', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  functionNamePattern?: string(name='FunctionNamePattern', example='.*', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=-1, maximum=1000000, position='Query'),
}

model ListFunctionsResponseBody = {
  code?: string(name='Code', example='OK'),
  functions?: [
    Function
  ](name='Functions'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctions', 'GET', '/api/metastore/catalogs/databases/functions/list', 'json', false, 'json', request);
}

model ListPartitionNamesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  partialPartValues?: [ string ](name='PartialPartValues', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
}

model ListPartitionNamesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  partitionNames?: [ string ](name='PartitionNames'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model ListPartitionNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPartitionNamesResponseBody(name='body'),
}

async function listPartitionNames(request: ListPartitionNamesRequest): ListPartitionNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionNames', 'POST', '/api/metastore/catalogs/databases/tables/partitions/names', 'json', false, 'json', request);
}

model ListPartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  isShareSd?: boolean(name='IsShareSd', example='true', position='Body'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  partialPartValues?: [ string ](name='PartialPartValues', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
}

model ListPartitionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  partitionSpecs?: [
    PartitionSpec
  ](name='PartitionSpecs', description='PartitionSpecs'),
  partitions?: [
    Partition
  ](name='Partitions'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model ListPartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPartitionsResponseBody(name='body'),
}

async function listPartitions(request: ListPartitionsRequest): ListPartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/list', 'json', false, 'json', request);
}

model ListPartitionsByExprRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListPartitionsByExprResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

async function listPartitionsByExpr(request: ListPartitionsByExprRequest): ListPartitionsByExprResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionsByExpr', 'POST', '/api/metastore/catalogs/databases/tables/partitions/listbyexpr', 'none', false, 'json', request);
}

model ListPartitionsByFilterRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  filter?: string(name='Filter', example='ds>20201201', position='Body'),
  isShareSd?: boolean(name='IsShareSd', example='true', position='Body'),
  nextPageToken?: string(name='NextPageToken', example='\\"\\"', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
}

model ListPartitionsByFilterResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  partitionSpecs?: [
    PartitionSpec
  ](name='PartitionSpecs', description='PartitionSpecs'),
  partitions?: [
    Partition
  ](name='Partitions'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model ListPartitionsByFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPartitionsByFilterResponseBody(name='body'),
}

async function listPartitionsByFilter(request: ListPartitionsByFilterRequest): ListPartitionsByFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionsByFilter', 'POST', '/api/metastore/catalogs/databases/tables/partitions/listbyfilter', 'json', false, 'json', request);
}

model ListPartitionsProfileRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName: string(name='DatabaseName', example='test_db', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  partitionNames?: [ string ](name='PartitionNames', shrink='simple', position='Query'),
  tableName?: string(name='TableName', example='test_tbl', position='Query'),
}

model ListPartitionsProfileResponseBody = {
  code?: string(name='Code', example='-'),
  data?: [
    PartitionProfile
  ](name='Data'),
  latestAccessNumDate?: string(name='LatestAccessNumDate', example='-'),
  latestDate?: string(name='LatestDate', example='2023-08-30 19:16:10'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='97434FA4-A6B2-1AE4-A174-76964F29C759'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='10'),
}

model ListPartitionsProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPartitionsProfileResponseBody(name='body'),
}

async function listPartitionsProfile(request: ListPartitionsProfileRequest): ListPartitionsProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionsProfile', 'GET', '/webapi/metastorehouse/catalog/database/tableprofile/partitionprofile/listPartitionsProfile', 'json', false, 'json', request);
}

model ListPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='CatalogId', example='1344371', position='Body'),
  isListUserRolePermissions?: boolean(name='IsListUserRolePermissions', example='false', position='Body'),
  metaResource?: MetaResource(name='MetaResource', position='Body'),
  metaResourceType?: string(name='MetaResourceType', example='DATABASE', position='Body'),
  nextPageToken?: string(name='NextPageToken', example='token!', position='Body'),
  pageSize?: int32(name='PageSize', example='100', position='Body'),
  principal?: Principal(name='Principal', position='Body'),
  type: string(name='Type', example='Hive', position='Body'),
}

model ListPermissionsResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message Code', example='.'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', example='token!'),
  principalResourcePermissionsList?: [
    PrincipalResourcePermissions
  ](name='PrincipalResourcePermissionsList', example='[]'),
  requestId?: string(name='RequestId', description='RequestId', example='745EAAE2-5010-5C9F-A95C-B8FC5C1B03BF'),
  success?: boolean(name='Success', description='Success', example='true'),
  totalCount?: long(name='TotalCount', description='TotalCount'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

async function listPermissions(request: ListPermissionsRequest): ListPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPermissions', 'POST', '/api/metastore/auth/permissions/list', 'json', false, 'json', request);
}

model ListRoleUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', example='token!', position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', example='-1/100', position='Query'),
  roleName?: string(name='RoleName', example='admin', position='Query'),
  userNamePattern?: string(name='UserNamePattern', description='use name pattern filter', example='.*user.*', position='Query'),
}

model ListRoleUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', example='token!'),
  requestId?: string(name='RequestId', description='RequestId', example='558D764F-8C55-49CA-BF38-80EA532FC08F'),
  success?: boolean(name='Success', example='true'),
  userRoles?: [
    UserRole
  ](name='UserRoles', description='user roles'),
}

model ListRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoleUsersResponseBody(name='body'),
}

async function listRoleUsers(request: ListRoleUsersRequest): ListRoleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRoleUsers', 'GET', '/api/metastore/auth/roles/roleusers', 'json', false, 'json', request);
}

model ListRolesRequest {
  regionId?: string(name='RegionId', position='Host'),
  nextPageToken?: string(name='NextPageToken', description='Next PageToken', example='token!', position='Query'),
  pageSize?: int32(name='PageSize', example='-1/100', position='Query'),
  roleNamePattern?: string(name='RoleNamePattern', example='.*test.*', position='Query'),
}

model ListRolesResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  nextPageToken?: string(name='NextPageToken', description='data', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', description='requestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  roles?: [
    Role
  ](name='Roles', description='role list data', example='[
	{
		"Description":"reserved by the system",
		"DisplayName":"admin",
		"UpdateTime":0,
		"IsPredefined":1,
		"Name":"admin"
	}
]'),
  success?: boolean(name='Success', description='success', example='True'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRoles', 'GET', '/api/metastore/auth/roles/list', 'json', false, 'json', request);
}

model ListTableNamesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='\\"\\"', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=-1, maximum=1000000, position='Query'),
  tableNamePattern?: string(name='TableNamePattern', example='.*', position='Query'),
  tableType?: string(name='TableType', example='MANAGED_TABLE', position='Query'),
}

model ListTableNamesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableNames?: [ string ](name='TableNames'),
}

model ListTableNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableNamesResponseBody(name='body'),
}

async function listTableNames(request: ListTableNamesRequest): ListTableNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableNames', 'GET', '/api/metastore/catalogs/databases/tables/names', 'json', false, 'json', request);
}

model ListTableVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='\\"\\"', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Query'),
}

model ListTableVersionsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tableVersions?: [
    TableVersion
  ](name='TableVersions'),
}

model ListTableVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableVersionsResponseBody(name='body'),
}

async function listTableVersions(request: ListTableVersionsRequest): ListTableVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableVersions', 'GET', '/api/metastore/catalogs/databases/tables/versions/list', 'json', false, 'json', request);
}

model ListTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Query'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='\\"\\"', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=-1, maximum=1000000, position='Query'),
  tableNamePattern?: string(name='TableNamePattern', example='.*', position='Query'),
  tableType?: string(name='TableType', example='MANAGED_TABLE', position='Query'),
}

model ListTablesResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  tables?: [
    Table
  ](name='Tables'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTables', 'GET', '/api/metastore/databases/tables/list', 'json', false, 'json', request);
}

model ListUserRolesRequest {
  regionId?: string(name='RegionId', position='Host'),
  nextPageToken?: string(name='NextPageToken', example='token!', position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', example='-1/100', position='Query'),
  principalArn?: string(name='PrincipalArn', example='acs:ram::1111:user/userName', position='Query'),
  roleNamePattern?: string(name='RoleNamePattern', description='role name pattern filter', example='.*test.*', position='Query'),
}

model ListUserRolesResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', example='2cb472ec1bf84f8d92f9c4baa0d21c19aa'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='success', example='true'),
  userRoles?: [
    UserRole
  ](name='UserRoles', description='UserRoles'),
}

model ListUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRolesResponseBody(name='body'),
}

async function listUserRoles(request: ListUserRolesRequest): ListUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserRoles', 'GET', '/api/metastore/auth/roles/userroles', 'json', false, 'json', request);
}

model RefreshLockRequest {
  regionId?: string(name='RegionId', position='Host'),
  lockId?: long(name='LockId', description='LockId', example='12324', position='Query'),
}

model RefreshLockResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='81B90E1B-7514-5817-9D59-0EA9E2215876'),
  success?: boolean(name='Success', description='Success', example='True'),
}

model RefreshLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshLockResponseBody(name='body'),
}

async function refreshLock(request: RefreshLockRequest): RefreshLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshLock', 'PUT', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model RegisterLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  inventoryCollectEnabled?: boolean(name='InventoryCollectEnabled', example='true', position='Body'),
  location: string(name='Location', example='oss://mybucket/', position='Body'),
  ossLogCollectEnabled?: boolean(name='OssLogCollectEnabled', example='true', position='Body'),
  roleName: string(name='RoleName', example='AliyunDLFWorkFlowDefaultRole', position='Body'),
}

model RegisterLocationResponseBody = {
  data?: {
    locationId?: string(name='LocationId', description='Location ID', example='LOC-AB8FBC17F95A4AF5'),
    storageCollectTaskOperationResultList?: [
      StorageCollectTaskOperationResult
    ](name='StorageCollectTaskOperationResultList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='3C2678BA-3451-14C3-90E2-D4EF5B4E7A84'),
  success?: boolean(name='Success', example='true'),
}

model RegisterLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterLocationResponseBody(name='body'),
}

async function registerLocation(request: RegisterLocationRequest): RegisterLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RegisterLocation', 'POST', '/webapi/locations', 'json', false, 'json', request);
}

model RenamePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  partitionInput?: PartitionInput(name='PartitionInput', position='Body'),
  partitionValues?: [ string ](name='PartitionValues', position='Body'),
  tableName?: string(name='TableName', example='test_table_20200715162543389', position='Body'),
}

model RenamePartitionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model RenamePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenamePartitionResponseBody(name='body'),
}

async function renamePartition(request: RenamePartitionRequest): RenamePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenamePartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions/rename', 'json', false, 'json', request);
}

model RenameTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  isAsync?: boolean(name='IsAsync', example='false', position='Body'),
  tableInput?: TableInput(name='TableInput', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Body'),
}

model RenameTableResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', description='Async task Id', example='c38206c3aca0c41332ffe49294243009'),
}

model RenameTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameTableResponseBody(name='body'),
}

async function renameTable(request: RenameTableRequest): RenameTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenameTable', 'PUT', '/api/metastore/catalogs/databases/tables/rename', 'json', false, 'json', request);
}

model RevokePermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  accesses: [ string ](name='Accesses', position='Body'),
  catalogId?: string(name='CatalogId', description='CatalogId', example='1344371', position='Body'),
  delegateAccesses?: [ string ](name='DelegateAccesses', position='Body'),
  metaResource: MetaResource(name='MetaResource', position='Body'),
  principal: Principal(name='Principal', position='Body'),
  type: string(name='Type', example='Hive', position='Body'),
}

model RevokePermissionsResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message Code', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='7CB5765C-F209-5B10-8792-D2BE9156ABE8'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model RevokePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokePermissionsResponseBody(name='body'),
}

async function revokePermissions(request: RevokePermissionsRequest): RevokePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokePermissions', 'POST', '/api/metastore/auth/permissions/revoke', 'json', false, 'json', request);
}

model RevokeRoleFromUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleName?: string(name='RoleName', example='test_role_3', position='Body'),
  users?: [
Principal
](name='Users', position='Body'),
}

model RevokeRoleFromUsersResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model RevokeRoleFromUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeRoleFromUsersResponseBody(name='body'),
}

async function revokeRoleFromUsers(request: RevokeRoleFromUsersRequest): RevokeRoleFromUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeRoleFromUsers', 'PUT', '/api/metastore/auth/roles/revokeusers', 'json', false, 'json', request);
}

model RevokeRolesFromUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleNames: [ string ](name='RoleNames', position='Body'),
  user: Principal(name='User', position='Body'),
}

model RevokeRolesFromUserResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='success', example='true'),
}

model RevokeRolesFromUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeRolesFromUserResponseBody(name='body'),
}

async function revokeRolesFromUser(request: RevokeRolesFromUserRequest): RevokeRolesFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeRolesFromUser', 'POST', '/api/metastore/auth/roles/revokeroles', 'json', false, 'json', request);
}

model RunMigrationWorkflowRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='M-EDD8BF959BB97345', position='Query'),
}

model RunMigrationWorkflowResponseBody = {
  data?: string(name='Data', example='FI-7193B85809CAD95C'),
  requestId?: string(name='RequestId', example='A048EA8E-3519-5B18-B81E-EE3E0B6DBE0C'),
  success?: boolean(name='Success', example='true'),
}

model RunMigrationWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMigrationWorkflowResponseBody(name='body'),
}

async function runMigrationWorkflow(request: RunMigrationWorkflowRequest): RunMigrationWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunMigrationWorkflow', 'POST', '/webapi/migration/workflow/run', 'json', false, 'json', request);
}

model SearchRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='catalogid', example='默认是空，在多catalogid下填写对应的id', position='Body'),
  pageNumber?: long(name='PageNumber', example='1', position='Body'),
  pageSize?: long(name='PageSize', example='1000', position='Body'),
  searchText?: string(name='SearchText', example='tags:tag1 or comment:^iso and name=aliyun and (createTime > "20211111" and createTime < "20211117") and has category', position='Body'),
  searchType?: string(name='SearchType', example='TABLE/DATABASE/CATALOG', position='Body'),
  sortCriteria?: [
    SortCriterion
  ](name='SortCriteria', position='Body'),
}

model SearchResponseBody = {
  code?: string(name='Code', example='OK'),
  databaseResult?: {
    databases?: [ 
      {
        database?: Database(name='Database'),
        highLightList?: [
          HighLight
        ](name='HighLightList'),
      }
    ](name='Databases'),
    totalCount?: long(name='TotalCount', example='11000'),
  }(name='DatabaseResult'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='460C862F-BB91-5C04-BC3F-946EEF467862'),
  success?: boolean(name='Success', example='True'),
  tableResult?: {
    tables?: [ 
      {
        highLightList?: [
          HighLight
        ](name='HighLightList'),
        table?: Table(name='Table'),
      }
    ](name='Tables'),
    totalCount?: long(name='TotalCount', example='1100'),
  }(name='TableResult'),
}

model SearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchResponseBody(name='body'),
}

async function search(request: SearchRequest): SearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Search', 'POST', '/api/metastore/catalogs/search', 'json', false, 'json', request);
}

model SearchAcrossCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogIds?: [ string ](name='CatalogIds', position='Body'),
  pageNumber?: long(name='PageNumber', example='1', position='Body'),
  pageSize?: long(name='PageSize', example='1000', position='Body'),
  searchText?: string(name='SearchText', example='tags:tag1 or comment:^iso and name=aliyun and (createTime > "20211111" and createTime < "20211117") and has category', position='Body'),
  searchTypes?: [ string ](name='SearchTypes', position='Body'),
  sortCriteria?: [
    SortCriterion
  ](name='SortCriteria', position='Body'),
}

model SearchAcrossCatalogResponseBody = {
  catalogResult?: {
    catalogs?: [ 
      {
        catalog?: Catalog(name='Catalog'),
        highLightList?: [
          HighLight
        ](name='HighLightList'),
      }
    ](name='Catalogs'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='CatalogResult'),
  code?: string(name='Code', example='OK'),
  databaseResult?: {
    databases?: [ 
      {
        database?: Database(name='Database'),
        highLightList?: [
          HighLight
        ](name='HighLightList'),
      }
    ](name='Databases'),
    totalCount?: long(name='TotalCount', example='11000'),
  }(name='DatabaseResult'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='460C862F-BB91-5C04-BC3F-946EEF467862'),
  success?: boolean(name='Success', example='True'),
  tableResult?: {
    tables?: [ 
      {
        highLightList?: [
          HighLight
        ](name='HighLightList'),
        table?: Table(name='Table'),
      }
    ](name='Tables'),
    totalCount?: long(name='TotalCount', example='1100'),
  }(name='TableResult'),
}

model SearchAcrossCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAcrossCatalogResponseBody(name='body'),
}

async function searchAcrossCatalog(request: SearchAcrossCatalogRequest): SearchAcrossCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchAcrossCatalog', 'POST', '/api/metastore/catalogs/search/search-across-catalog', 'json', false, 'json', request);
}

model StopMigrationWorkflowRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='M-6DCF5D8EF92E2195', position='Query'),
}

model StopMigrationWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model StopMigrationWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMigrationWorkflowResponseBody(name='body'),
}

async function stopMigrationWorkflow(request: StopMigrationWorkflowRequest): StopMigrationWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopMigrationWorkflow', 'PUT', '/webapi/migration/workflow/stop', 'json', false, 'json', request);
}

model SubmitQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='catalogId', position='Body'),
  sql?: string(name='sql', example='show databases', position='Body'),
  workspaceId?: string(name='workspaceId', example='WS-A129E61C4892D2B4', position='Body'),
}

model SubmitQueryResponseBody = {
  data?: string(name='Data', example='Q-14475CF9B51FCE5E'),
  requestId?: string(name='RequestId', example='279AA630-A8ED-5EA9-80A3-2E213D63548C'),
  success?: boolean(name='Success', example='true'),
}

model SubmitQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitQueryResponseBody(name='body'),
}

async function submitQuery(request: SubmitQueryRequest): SubmitQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitQuery', 'POST', '/webapi/query/submitQueryRequestBody', 'json', false, 'json', request);
}

model UnLockRequest {
  regionId?: string(name='RegionId', position='Host'),
  lockId?: long(name='LockId', description='LockId', example='11709', position='Query'),
}

model UnLockResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='37C8470A-5E6D-5E4E-AEF0-EA3EBE9C89EE'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model UnLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnLockResponseBody(name='body'),
}

async function unLock(request: UnLockRequest): UnLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnLock', 'DELETE', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model UpdateCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogInput: CatalogInput(name='CatalogInput', description='cataloginput', position='Body'),
}

model UpdateCatalogResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='64E46067-49EA-5A91-A7B1-E812E18FC243'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCatalogResponseBody(name='body'),
}

async function updateCatalog(request: UpdateCatalogRequest): UpdateCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCatalog', 'PUT', '/api/metastore/catalogs', 'json', false, 'json', request);
}

model UpdateCatalogSettingsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  catalogSettings?: CatalogSettings(name='CatalogSettings', position='Body'),
}

model UpdateCatalogSettingsResponseBody = {
  code?: string(name='Code', description='Code', example='OK'),
  message?: string(name='Message', description='Message', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='01D8DD6B-4929-5999-9BB3-950AA30E3BD0'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model UpdateCatalogSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCatalogSettingsResponseBody(name='body'),
}

async function updateCatalogSettings(request: UpdateCatalogSettingsRequest): UpdateCatalogSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCatalogSettings', 'POST', '/api/metastore/catalogs/settings', 'json', false, 'json', request);
}

model UpdateDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseInput?: DatabaseInput(name='DatabaseInput', position='Body'),
  name?: string(name='Name', example='database_test', position='Body'),
}

model UpdateDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='161F5EFC-E97E-43C0-AACF-FF18FAC912F0'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatabaseResponseBody(name='body'),
}

async function updateDatabase(request: UpdateDatabaseRequest): UpdateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatabase', 'PUT', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model UpdateFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  functionInput?: FunctionInput(name='FunctionInput', position='Body'),
  functionName?: string(name='FunctionName', example='func2', position='Body'),
}

model UpdateFunctionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFunctionResponseBody(name='body'),
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFunction', 'PUT', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model UpdatePartitionColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  updateTablePartitionColumnStatisticsRequest?: UpdateTablePartitionColumnStatisticsRequest(name='UpdateTablePartitionColumnStatisticsRequest', position='Body'),
}

model UpdatePartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePartitionColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePartitionColumnStatisticsResponseBody(name='body'),
}

async function updatePartitionColumnStatistics(request: UpdatePartitionColumnStatisticsRequest): UpdatePartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePartitionColumnStatistics', 'PUT', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics', 'json', false, 'json', request);
}

model UpdatePermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  accesses: [ string ](name='Accesses', position='Body'),
  catalogId?: string(name='CatalogId', description='CatalogId', example='1344371', position='Body'),
  delegateAccesses: [ string ](name='DelegateAccesses', position='Body'),
  metaResource: MetaResource(name='MetaResource', position='Body'),
  principal: Principal(name='Principal', position='Body'),
  type: string(name='Type', example='Hive', position='Body'),
}

model UpdatePermissionsResponseBody = {
  code?: string(name='Code', description='Response Code', example='OK'),
  message?: string(name='Message', description='Message Code', example='.'),
  requestId?: string(name='RequestId', description='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model UpdatePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePermissionsResponseBody(name='body'),
}

async function updatePermissions(request: UpdatePermissionsRequest): UpdatePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePermissions', 'PUT', '/api/metastore/auth/permissions/', 'json', false, 'json', request);
}

model UpdateRegisteredLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  inventoryCollectEnabled?: boolean(name='InventoryCollectEnabled', example='true', position='Body'),
  locationId: string(name='LocationId', example='LOC-AB8FBC17F95A4AF5', position='Body'),
  ossLogCollectEnabled?: boolean(name='OssLogCollectEnabled', example='true', position='Body'),
}

model UpdateRegisteredLocationResponseBody = {
  data?: {
    locationId?: string(name='LocationId', description='Location ID', example='LOC-AB8FBC17F95A4AF5'),
    storageCollectTaskOperationResultList?: [
      StorageCollectTaskOperationResult
    ](name='StorageCollectTaskOperationResultList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8030C902-C25B-1839-867D-E6F70A5B9810'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRegisteredLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRegisteredLocationResponseBody(name='body'),
}

async function updateRegisteredLocation(request: UpdateRegisteredLocationRequest): UpdateRegisteredLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRegisteredLocation', 'PUT', '/webapi/locations', 'json', false, 'json', request);
}

model UpdateRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleInput?: RoleInput(name='RoleInput', position='Body'),
  roleName?: string(name='RoleName', description='RoleName', example='原始名称', position='Body'),
}

model UpdateRoleResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  requestId?: string(name='RequestId', description='requestId', example='604E5919-C6FF-54CE-9C23-C5350E6F5415'),
  success?: boolean(name='Success', description='success', example='true'),
}

model UpdateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRoleResponseBody(name='body'),
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRole', 'PUT', '/api/metastore/auth/roles', 'json', false, 'json', request);
}

model UpdateRoleUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleName?: string(name='RoleName', example='test_role_8', position='Body'),
  users?: [
Principal
](name='Users', position='Body'),
}

model UpdateRoleUsersResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  message?: string(name='Message', description='message', example='.'),
  requestId?: string(name='RequestId', description='requestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', description='success', example='true'),
}

model UpdateRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRoleUsersResponseBody(name='body'),
}

async function updateRoleUsers(request: UpdateRoleUsersRequest): UpdateRoleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRoleUsers', 'POST', '/api/metastore/auth/updateroleusers', 'json', false, 'json', request);
}

model UpdateTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  allowPartitionKeyChange?: boolean(name='AllowPartitionKeyChange', example='false', position='Body'),
  catalogId?: string(name='CatalogId', example='1344371', position='Body'),
  databaseName?: string(name='DatabaseName', example='database_test', position='Body'),
  isAsync?: boolean(name='IsAsync', example='true', position='Body'),
  skipArchive?: boolean(name='SkipArchive', example='false', position='Body'),
  tableInput?: TableInput(name='TableInput', position='Body'),
  tableName?: string(name='TableName', example='test_table_20201223', position='Body'),
}

model UpdateTableResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', description='Async task Id', example='aa689782deb97265701f57324fc4ae42'),
}

model UpdateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableResponseBody(name='body'),
}

async function updateTable(request: UpdateTableRequest): UpdateTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTable', 'PUT', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model UpdateTableColumnStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  updateTablePartitionColumnStatisticsRequest?: UpdateTablePartitionColumnStatisticsRequest(name='UpdateTablePartitionColumnStatisticsRequest', position='Body'),
}

model UpdateTableColumnStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='.'),
  requestId?: string(name='RequestId', example='B7F4B621-E41E-4C84-B97F-42B5380A32BB'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTableColumnStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableColumnStatisticsResponseBody(name='body'),
}

async function updateTableColumnStatistics(request: UpdateTableColumnStatisticsRequest): UpdateTableColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTableColumnStatistics', 'PUT', '/api/metastore/catalogs/databases/tables/columnstatistics', 'json', false, 'json', request);
}

model TableExtendedPrivilegesRolePrivilegesValue = {
  createTime?: int32(name='CreateTime'),
  grantOption?: boolean(name='GrantOption'),
  grantor?: string(name='Grantor'),
  grantorType?: string(name='GrantorType'),
  privilege?: string(name='Privilege'),
}

model TableExtendedPrivilegesUserPrivilegesValue = {
  createTime?: int32(name='CreateTime'),
  grantOption?: boolean(name='GrantOption'),
  grantor?: string(name='Grantor'),
  grantorType?: string(name='GrantorType'),
  privilege?: string(name='Privilege'),
}

model TableExtendedPrivilegesGroupPrivilegesValue = {
  createTime?: int32(name='CreateTime'),
  grantOption?: boolean(name='GrantOption'),
  grantor?: string(name='Grantor'),
  grantorType?: string(name='GrantorType'),
  privilege?: string(name='Privilege'),
}

