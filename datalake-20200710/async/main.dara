/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DataLake';
  @version = '2020-07-10';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'datalake-daily.aliyuncs.com',
    ap-northeast-2-pop = 'datalake-daily.aliyuncs.com',
    ap-south-1 = 'datalake-daily.aliyuncs.com',
    ap-southeast-1 = 'datalake-daily.aliyuncs.com',
    ap-southeast-2 = 'datalake-daily.aliyuncs.com',
    ap-southeast-3 = 'datalake-daily.aliyuncs.com',
    ap-southeast-5 = 'datalake-daily.aliyuncs.com',
    cn-beijing = 'dlf.cn-beijing.aliyuncs.com',
    cn-beijing-finance-1 = 'datalake-daily.aliyuncs.com',
    cn-beijing-finance-pop = 'datalake-daily.aliyuncs.com',
    cn-beijing-gov-1 = 'datalake-daily.aliyuncs.com',
    cn-beijing-nu16-b01 = 'datalake-daily.aliyuncs.com',
    cn-chengdu = 'datalake-daily.aliyuncs.com',
    cn-edge-1 = 'datalake-daily.aliyuncs.com',
    cn-fujian = 'datalake-daily.aliyuncs.com',
    cn-haidian-cm12-c01 = 'datalake-daily.aliyuncs.com',
    cn-hangzhou = 'dlf.cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'datalake-daily.aliyuncs.com',
    cn-hangzhou-finance = 'datalake-daily.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'datalake-daily.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'datalake-daily.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'datalake-daily.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'datalake-daily.aliyuncs.com',
    cn-hangzhou-test-306 = 'datalake-daily.aliyuncs.com',
    cn-hongkong = 'datalake-daily.aliyuncs.com',
    cn-hongkong-finance-pop = 'datalake-daily.aliyuncs.com',
    cn-huhehaote = 'datalake-daily.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'datalake-daily.aliyuncs.com',
    cn-north-2-gov-1 = 'datalake-daily.aliyuncs.com',
    cn-qingdao = 'datalake-daily.aliyuncs.com',
    cn-qingdao-nebula = 'datalake-daily.aliyuncs.com',
    cn-shanghai = 'dlf.cn-shanghai.aliyuncs.com',
    cn-shanghai-et15-b01 = 'datalake-daily.aliyuncs.com',
    cn-shanghai-et2-b01 = 'datalake-daily.aliyuncs.com',
    cn-shanghai-finance-1 = 'datalake-daily.aliyuncs.com',
    cn-shanghai-inner = 'datalake-daily.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'datalake-daily.aliyuncs.com',
    cn-shenzhen = 'dlf.cn-shenzhen.aliyuncs.com',
    cn-shenzhen-finance-1 = 'datalake-daily.aliyuncs.com',
    cn-shenzhen-inner = 'datalake-daily.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'datalake-daily.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'datalake-daily.aliyuncs.com',
    cn-wuhan = 'datalake-daily.aliyuncs.com',
    cn-wulanchabu = 'datalake-daily.aliyuncs.com',
    cn-yushanfang = 'datalake-daily.aliyuncs.com',
    cn-zhangbei = 'datalake-daily.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'datalake-daily.aliyuncs.com',
    cn-zhangjiakou = 'datalake-daily.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'datalake-daily.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'datalake-daily.aliyuncs.com',
    eu-central-1 = 'datalake-daily.aliyuncs.com',
    eu-west-1 = 'datalake-daily.aliyuncs.com',
    eu-west-1-oxs = 'datalake-daily.aliyuncs.com',
    me-east-1 = 'datalake-daily.aliyuncs.com',
    rus-west-1-pop = 'datalake-daily.aliyuncs.com',
    us-east-1 = 'datalake-daily.aliyuncs.com',
    us-west-1 = 'datalake-daily.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AccessRequest {
  catalogId?: string(name='CatalogId', description='CatalogId'),
  principal?: Principal(name='Principal'),
  privilegeResources?: [
PrivilegeResource
](name='PrivilegeResources'),
}

model Catalog {
  catalogId?: string(name='CatalogId', description='CatalogId'),
  createTime?: int32(name='CreateTime', description='CreateTime'),
}

model ColumnResource {
  columnNames?: [ string ](name='ColumnNames', description='ColumnName'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  tableName?: string(name='TableName', description='TableName'),
}

model ColumnStatistics {
  columnStatisticsDesc?: ColumnStatisticsDesc(name='ColumnStatisticsDesc'),
  columnStatisticsObjList?: [
    ColumnStatisticsObj
  ](name='ColumnStatisticsObjList', description='ColumnStatisticsObjList'),
  engine?: string(name='Engine', description='Engine for hive3+'),
  isStatsCompliant?: boolean(name='IsStatsCompliant', description='IsStatsCompliant for hive3+'),
}

model ColumnStatisticsDesc {
  lastAnalyzedTime?: long(name='LastAnalyzedTime', description='optional'),
  partitionName?: string(name='PartitionName', description='required'),
}

model ColumnStatisticsObj {
  columnName?: string(name='ColumnName', description='ColumnName of the table'),
  columnStatisticsData?: {
    statisticsData?: string(name='StatisticsData', description='StatisticsData'),
    statisticsType?: string(name='StatisticsType', description='StatisticsType'),
  }(name='ColumnStatisticsData', description='ColumnStatisticsData'),
  columnType?: string(name='ColumnType', description='ColumnType'),
}

model Database {
  createTime?: int32(name='CreateTime', description='createTime'),
  createdBy?: string(name='CreatedBy', description='CreatedBy'),
  description?: string(name='Description', description='description'),
  locationUri?: string(name='LocationUri', description='locationUri'),
  name?: string(name='Name', description='name'),
  ownerName?: string(name='OwnerName', description='ownerName'),
  ownerType?: string(name='OwnerType', description='ownerType'),
  parameters?: map[string]string(name='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  updateTime?: int32(name='UpdateTime', description='updateTime'),
}

model DatabaseInput {
  createTime?: int32(name='CreateTime', description='createTime'),
  description?: string(name='Description', description='Description'),
  locationUri?: string(name='LocationUri', description='locationUri'),
  name?: string(name='Name', description='name'),
  ownerName?: string(name='OwnerName', description='ownerName'),
  ownerType?: string(name='OwnerType', description='ownerType'),
  parameters?: map[string]string(name='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
}

model DatabaseResource {
  databaseName?: string(name='DatabaseName', description='Database name'),
  databaseWildcard?: string(name='DatabaseWildcard', description='A wildcard member representing every resource under a database'),
}

model ErrorDetail {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
}

model FieldSchema {
  comment?: string(name='Comment', description='Comment'),
  name?: string(name='Name', description='Name'),
  parameters?: map[string]string(name='Parameters'),
  type?: string(name='Type', description='Type'),
}

model Function {
  catalogId?: string(name='CatalogId', description='CatalogId'),
  className?: string(name='ClassName', description='ClassName'),
  createTime?: int32(name='CreateTime', description='CreateTime'),
  createdBy?: string(name='CreatedBy', description='CreatedBy'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  functionName?: string(name='FunctionName', description='FunctionName'),
  functionType?: string(name='FunctionType', description='FunctionType'),
  ownerName?: string(name='OwnerName', description='OwnerName'),
  ownerType?: string(name='OwnerType', description='OwnerType'),
  resourceUri?: [
    ResourceUri
  ](name='ResourceUri', description='ResourceUri'),
  updateTime?: int32(name='UpdateTime', description='UpdateTime'),
}

model FunctionInput {
  className?: string(name='ClassName', description='ClassName'),
  createTime?: int32(name='CreateTime', description='createTime'),
  functionName?: string(name='FunctionName', description='FunctionName'),
  functionType?: string(name='FunctionType', description='FunctionType'),
  ownerName?: string(name='OwnerName', description='OwnerName'),
  ownerType?: string(name='OwnerType', description='OwnerType'),
  resourceUri?: [
    ResourceUri
  ](name='ResourceUri', description='ResourceUri'),
}

model FunctionResource {
  databaseName?: string(name='DatabaseName', description='Database name'),
  functionName?: string(name='FunctionName', description='Function name'),
}

model HighLight {
  key?: string(name='Key', description='高亮的key'),
  value?: string(name='Value', description='高亮的value'),
}

model LockObj {
  catalogId?: string(name='CatalogId', description='CatalogId'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  partitionName?: string(name='PartitionName', description='PartitionName'),
  tableName?: string(name='TableName', description='TableName'),
}

model LockStatus {
  lockId?: long(name='LockId', description='LockId'),
  lockState?: string(name='LockState', description='ACQUIRED/NOT_ACQUIRED'),
}

model MetaResource {
  columnResource?: ColumnResource(name='ColumnResource', description='column resource'),
  databaseResource?: DatabaseResource(name='DatabaseResource', description='database resource'),
  functionResource?: FunctionResource(name='FunctionResource', description='function resource'),
  resourceType?: string(name='ResourceType', description='DATABASE, TABLE, FUNCTION, COLUMN任选其一'),
  tableResource?: TableResource(name='TableResource', description='table resource'),
}

model Order {
  col?: string(name='Col', description='Col'),
  order?: int32(name='Order', description='Order'),
}

model Partition {
  createTime?: int32(name='CreateTime', description='CreateTime'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime', description='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime', description='LastAnalyzedTime'),
  parameters?: map[string]string(name='Parameters', description='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName', description='TableName'),
  values?: [ string ](name='Values', description='Values'),
}

model PartitionError {
  errorDetail?: ErrorDetail(name='ErrorDetail'),
  partitionValues?: [ string ](name='PartitionValues'),
}

model PartitionInput {
  createTime?: int32(name='CreateTime', description='createTime'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime', description='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime', description='LastAnalyzedTime'),
  parameters?: map[string]string(name='Parameters', description='Parameters'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName', description='TableName'),
  values?: [ string ](name='Values', description='Values'),
}

model PartitionSpec {
  sharedSDPartitions?: [
    Partition
  ](name='SharedSDPartitions', description='SharedSDPartitions'),
  sharedStorageDescriptor?: {
    cols?: [
      FieldSchema
    ](name='Cols', description='Cols'),
    location?: string(name='Location', description='Location'),
  }(name='SharedStorageDescriptor', description='SharedStorageDescriptor'),
}

model Principal {
  principalArn?: string(name='PrincipalArn', description='身份标识'),
}

model PrincipalPrivilegeSet {
  groupPrivileges?: map[string][
    PrivilegeGrantInfo
  ](name='GroupPrivileges'),
  rolePrivileges?: map[string][
    PrivilegeGrantInfo
  ](name='RolePrivileges'),
  userPrivileges?: map[string][
    PrivilegeGrantInfo
  ](name='UserPrivileges'),
}

model PrivilegeGrantInfo {
  createTime?: int32(name='CreateTime', description='createTime'),
  grantOption?: boolean(name='GrantOption', description='grantOption'),
  grantor?: string(name='Grantor', description='grantor'),
  grantorType?: string(name='GrantorType', description='grantorType'),
  privilege?: string(name='Privilege', description='privilege'),
}

model PrivilegeResource {
  access?: string(name='Access', description='Access type'),
  metaResource?: MetaResource(name='MetaResource', description='resource'),
}

model ResourceUri {
  resourceType?: string(name='ResourceType', description='ResourceType'),
  uri?: string(name='Uri', description='Uri'),
}

model SerDeInfo {
  name?: string(name='Name', description='Name'),
  parameters?: map[string]string(name='Parameters'),
  serializationLib?: string(name='SerializationLib', description='SerializationLib'),
}

model SkewedInfo {
  skewedColNames?: [ string ](name='SkewedColNames', description='SkewedColNames'),
  skewedColValueLocationMaps?: map[string]string(name='SkewedColValueLocationMaps', description='SkewedColValueLocationMaps'),
  skewedColValues?: [[ string ]  ](name='SkewedColValues', description='SkewedColValueLocationMaps'),
}

model SortCriterion {
  fieldName?: string(name='FieldName', description='排序字段'),
  sort?: string(name='Sort', description='排序方式'),
}

model StorageDescriptor {
  bucketCols?: [ string ](name='BucketCols'),
  cols?: [
    FieldSchema
  ](name='Cols', description='Cols'),
  compressed?: boolean(name='Compressed', description='Compressed'),
  inputFormat?: string(name='InputFormat', description='InputFormat'),
  location?: string(name='Location', description='Location'),
  numBuckets?: int32(name='NumBuckets', description='NumBuckets'),
  outputFormat?: string(name='OutputFormat', description='OutputFormat'),
  parameters?: map[string]string(name='Parameters', description='Parameters'),
  serDeInfo?: SerDeInfo(name='SerDeInfo'),
  skewedInfo?: SkewedInfo(name='SkewedInfo'),
  sortCols?: [
    Order
  ](name='SortCols', description='SortCols'),
  storedAsSubDirectories?: boolean(name='StoredAsSubDirectories', description='StoredAsSubDirectories'),
}

model Table {
  cascade?: boolean(name='Cascade', description='Cascade'),
  createTime?: int32(name='CreateTime', description='CreateTime'),
  createdBy?: string(name='CreatedBy', description='CreatedBy'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime', description='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime', description='LastAnalyzedTime'),
  owner?: string(name='Owner', description='Owner'),
  ownerType?: string(name='OwnerType', description='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  partitionKeys?: [
FieldSchema
](name='PartitionKeys'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  retention?: int32(name='Retention', description='Retention'),
  rewriteEnabled?: boolean(name='RewriteEnabled', description='RewriteEnabled'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName', description='TableName'),
  tableType?: string(name='TableType', description='TableType'),
  temporary?: boolean(name='Temporary', description='Temporary'),
  updateTime?: int32(name='UpdateTime', description='UpdateTime'),
  viewExpandedText?: string(name='ViewExpandedText', description='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText', description='ViewOriginalText'),
}

model TableError {
  errorDetail?: ErrorDetail(name='ErrorDetail'),
  tableName?: string(name='TableName', description='TableName'),
}

model TableInput {
  cascade?: boolean(name='Cascade', description='Cascade'),
  createTime?: int32(name='CreateTime', description='CreateTime'),
  createdBy?: string(name='CreatedBy', description='CreatedBy'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  lastAccessTime?: int32(name='LastAccessTime', description='LastAccessTime'),
  lastAnalyzedTime?: int32(name='LastAnalyzedTime', description='LastAnalyzedTime'),
  owner?: string(name='Owner', description='Owner'),
  ownerType?: string(name='OwnerType', description='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  partitionKeys?: [
FieldSchema
](name='PartitionKeys'),
  privileges?: PrincipalPrivilegeSet(name='Privileges'),
  retention?: int32(name='Retention', description='Retention'),
  rewriteEnabled?: boolean(name='RewriteEnabled', description='RewriteEnabled'),
  sd?: StorageDescriptor(name='Sd'),
  tableName?: string(name='TableName', description='TableName'),
  tableType?: string(name='TableType', description='TableType'),
  temporary?: boolean(name='Temporary', description='Temporary'),
  viewExpandedText?: string(name='ViewExpandedText', description='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText', description='ViewOriginalText'),
}

model TableProfile {
  fileCnt?: long(name='FileCnt', description='文件数量'),
  fileSize?: long(name='FileSize', description='文件大小'),
  isPartitioned?: boolean(name='IsPartitioned', description='是否分区表'),
  lastModifyTime?: string(name='LastModifyTime', description='最后跟新时间'),
  partitionCnt?: long(name='PartitionCnt', description='分区数量'),
  recordCnt?: long(name='RecordCnt', description='记录数'),
}

model TableResource {
  databaseName?: string(name='DatabaseName', description='database name'),
  tableName?: string(name='TableName', description='tablename'),
}

model TableVersion {
  table?: Table(name='Table'),
  versionId?: int32(name='VersionId', description='table version'),
}

model TaskStatus {
  message?: string(name='Message', description='message of the task'),
  status?: string(name='Status', description='status of the task'),
}

model UpdateTablePartitionColumnStatisticsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId'),
  columnStatisticsList?: [
    ColumnStatistics
  ](name='ColumnStatisticsList', description='ColumnStatisticsList'),
  databaseName?: string(name='DatabaseName', description='DatabaseName'),
  engine?: string(name='Engine', description='Engine'),
  isStatsCompliant?: boolean(name='IsStatsCompliant', description='IsStatsCompliant'),
  tableName?: string(name='TableName', description='TableName'),
  validWriteIdList?: string(name='ValidWriteIdList', description='ValidWriteIdList, optional'),
  writeId?: string(name='WriteId', description='WriteId, optional'),
}

model AbortLockRequest {
  lockId?: long(name='LockId', description='LockId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model AbortLockResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model AbortLockResponse = {
  headers: map[string]string(name='headers'),
  body: AbortLockResponseBody(name='body'),
}

async function abortLock(request: AbortLockRequest): AbortLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AbortLock', 'DELETE', '/api/metastore/catalogs/databases/tables/locks/abort', 'json', false, 'json', request);
}

model BatchCreatePartitionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  ifNotExists?: boolean(name='IfNotExists', description='IfNotExists', position='Body'),
  needResult?: boolean(name='NeedResult', description='NeedResult', position='Body'),
  partitionInputs?: [
    PartitionInput
  ](name='PartitionInputs', description='PartitionInputs', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchCreatePartitionsResponseBody = {
  code?: string(name='Code', description='响应代码'),
  message?: string(name='Message', description='响应消息'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors', description='分区出错信息'),
  partitions?: [
    Partition
  ](name='Partitions', description='Partitions'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model BatchCreatePartitionsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreatePartitionsResponseBody(name='body'),
}

async function batchCreatePartitions(request: BatchCreatePartitionsRequest): BatchCreatePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreatePartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/batchcreate', 'json', false, 'json', request);
}

model BatchCreateTablesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  ifNotExists?: boolean(name='IfNotExists', description='IfNotExists', position='Body'),
  tableInputs?: [
    TableInput
  ](name='TableInputs', description='TableInputs', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchCreateTablesResponseBody = {
  code?: string(name='Code', description='响应代码'),
  message?: string(name='Message', description='响应消息'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
  tableErrors?: [
    TableError
  ](name='TableErrors', description='表出错信息'),
}

model BatchCreateTablesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateTablesResponseBody(name='body'),
}

async function batchCreateTables(request: BatchCreateTablesRequest): BatchCreateTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreateTables', 'POST', '/api/metastore/catalogs/databases/tables/batchcreate', 'json', false, 'json', request);
}

model BatchDeletePartitionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  ifExists?: boolean(name='IfExists', description='IfExists', position='Body'),
  partitionValueList?: [ 
{
values?: [ string ](name='Values'),
}
](name='PartitionValueList', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchDeletePartitionsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors', description='PartitionErrors'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model BatchDeletePartitionsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeletePartitionsResponseBody(name='body'),
}

async function batchDeletePartitions(request: BatchDeletePartitionsRequest): BatchDeletePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeletePartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/batchdelete', 'json', false, 'json', request);
}

model BatchDeleteTableVersionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  versionIds?: [ int32 ](name='VersionIds', description='Table versionIds', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchDeleteTableVersionsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model BatchDeleteTableVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteTableVersionsResponseBody(name='body'),
}

async function batchDeleteTableVersions(request: BatchDeleteTableVersionsRequest): BatchDeleteTableVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeleteTableVersions', 'POST', '/api/metastore/catalogs/databases/tables/versions/batchdelete', 'json', false, 'json', request);
}

model BatchDeleteTablesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  ifExists?: boolean(name='IfExists', description='IfExists', position='Body'),
  tableNames?: [ string ](name='TableNames', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchDeleteTablesResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  tableErrors?: [
    TableError
  ](name='TableErrors', description='PartitionErrors'),
}

model BatchDeleteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteTablesResponseBody(name='body'),
}

async function batchDeleteTables(request: BatchDeleteTablesRequest): BatchDeleteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeleteTables', 'POST', '/api/metastore/catalogs/databases/tables/batchdelete', 'json', false, 'json', request);
}

model BatchGetPartitionColumnStatisticsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  columnNames?: [ string ](name='ColumnNames', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  partitionNames?: [ string ](name='PartitionNames', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
}

model BatchGetPartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partitionStatisticsMap?: map[string][
    ColumnStatisticsObj
  ](name='PartitionStatisticsMap', description='PartitionStatisticsMap'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model BatchGetPartitionColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetPartitionColumnStatisticsResponseBody(name='body'),
}

async function batchGetPartitionColumnStatistics(request: BatchGetPartitionColumnStatisticsRequest): BatchGetPartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetPartitionColumnStatistics', 'POST', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics/batchget', 'json', false, 'json', request);
}

model BatchGetPartitionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  isShareSd?: boolean(name='IsShareSd', description='IsShareSd', position='Body'),
  partitionValueList?: [ 
{
values?: [ string ](name='Values'),
}
](name='PartitionValueList', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchGetPartitionsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors', description='PartitionErrors'),
  partitionSpecs?: [
    PartitionSpec
  ](name='PartitionSpecs', description='PartitionSpecs'),
  partitions?: [
    Partition
  ](name='Partitions', description='Partitions'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model BatchGetPartitionsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetPartitionsResponseBody(name='body'),
}

async function batchGetPartitions(request: BatchGetPartitionsRequest): BatchGetPartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetPartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/batchget', 'json', false, 'json', request);
}

model BatchGetTablesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  tableNames?: [ string ](name='TableNames', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchGetTablesResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  tableErrors?: [
    TableError
  ](name='TableErrors', description='TableErrors'),
  tables?: [
    Table
  ](name='Tables', description='Tables'),
}

model BatchGetTablesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetTablesResponseBody(name='body'),
}

async function batchGetTables(request: BatchGetTablesRequest): BatchGetTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetTables', 'POST', '/api/metastore/catalogs/databases/tables/batchget', 'json', false, 'json', request);
}

model BatchUpdatePartitionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  partitionInputs?: [
    PartitionInput
  ](name='PartitionInputs', description='PartitionInputs', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchUpdatePartitionsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors', description='PartitionErrors'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model BatchUpdatePartitionsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdatePartitionsResponseBody(name='body'),
}

async function batchUpdatePartitions(request: BatchUpdatePartitionsRequest): BatchUpdatePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdatePartitions', 'PUT', '/api/metastore/catalogs/databases/tables/partitions/batchupdate', 'json', false, 'json', request);
}

model BatchUpdateTablesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  isAsync?: boolean(name='IsAsync', description='是否异步', position='Body'),
  tableInputs?: [
    TableInput
  ](name='TableInputs', description='TableInputs', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model BatchUpdateTablesResponseBody = {
  code?: string(name='Code', description='响应代码'),
  message?: string(name='Message', description='响应消息'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
  tableErrors?: [
    TableError
  ](name='TableErrors', description='表出错信息'),
  taskId?: string(name='TaskId', description='异步更新 taskId'),
}

model BatchUpdateTablesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateTablesResponseBody(name='body'),
}

async function batchUpdateTables(request: BatchUpdateTablesRequest): BatchUpdateTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdateTables', 'POST', '/api/metastore/catalogs/databases/tables/batchupdate', 'json', false, 'json', request);
}

model CancelQueryRequest {
  queryId?: string(name='QueryId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CancelQueryResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CancelQueryResponseBody(name='body'),
}

async function cancelQuery(request: CancelQueryRequest): CancelQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelQuery', 'POST', '/webapi/query/cancelQuery', 'json', false, 'json', request);
}

model CheckBlueprintInstanceNameRequest {
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CheckBlueprintInstanceNameResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckBlueprintInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckBlueprintInstanceNameResponseBody(name='body'),
}

async function checkBlueprintInstanceName(request: CheckBlueprintInstanceNameRequest): CheckBlueprintInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckBlueprintInstanceName', 'GET', '/webapi/blueprintinstance/checkName', 'json', false, 'json', request);
}

model CheckConnectionRequest {
  dataSourceInstanceId: string(name='DataSourceInstanceId', position='Query'),
  dataSourceType: string(name='DataSourceType', position='Query'),
  password: string(name='Password', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  userName: string(name='UserName', position='Query'),
}

model CheckConnectionResponseBody = {
  data?: {
    code?: string(name='Code'),
    isValid?: boolean(name='IsValid'),
    msg?: string(name='Msg'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CheckConnectionResponseBody(name='body'),
}

async function checkConnection(request: CheckConnectionRequest): CheckConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckConnection', 'POST', '/webapi/connectivity/connectionCheck', 'json', false, 'json', request);
}

model CheckConnectivityRequest {
  bizId?: string(name='BizId', position='Body'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', position='Body'),
  dataSourceType?: string(name='DataSourceType', position='Body'),
  password?: string(name='Password', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  userName?: string(name='UserName', position='Body'),
}

model CheckConnectivityResponseBody = {
  data?: {
    code?: string(name='Code'),
    isValid?: boolean(name='IsValid'),
    msg?: string(name='Msg'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckConnectivityResponse = {
  headers: map[string]string(name='headers'),
  body: CheckConnectivityResponseBody(name='body'),
}

async function checkConnectivity(request: CheckConnectivityRequest): CheckConnectivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckConnectivity', 'POST', '/webapi/connectivity/check', 'json', true, 'form', request);
}

model CheckPermissionsRequest {
  body?: AccessRequest(name='Body', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CheckPermissionsResponseBody = {
  code?: string(name='Code', description='Response Code'),
  message?: string(name='Message', description='Message Code'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model CheckPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckPermissionsResponseBody(name='body'),
}

async function checkPermissions(request: CheckPermissionsRequest): CheckPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckPermissions', 'POST', '/api/metastore/auth/permissions/check', 'json', false, 'json', request);
}

model CreateBlueprintInstanceRequest {
  blueprintType?: string(name='BlueprintType', position='Body'),
  clientToken?: string(name='ClientToken', position='Header'),
  dataSourceConfig?: string(name='DataSourceConfig', position='Body'),
  executeCapacity?: string(name='ExecuteCapacity', position='Body'),
  executeParameters?: string(name='ExecuteParameters', position='Body'),
  executeType?: string(name='ExecuteType', position='Body'),
  name?: string(name='Name', position='Body'),
  preProcessingConfig?: string(name='PreProcessingConfig', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', position='Body'),
  targetDatabase?: string(name='TargetDatabase', position='Body'),
  targetFormat?: string(name='TargetFormat', position='Body'),
  targetLocationUri?: string(name='TargetLocationUri', position='Body'),
  targetPartitions?: string(name='TargetPartitions', position='Body'),
  targetTable?: string(name='TargetTable', position='Body'),
}

model CreateBlueprintInstanceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateBlueprintInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBlueprintInstanceResponseBody(name='body'),
}

async function createBlueprintInstance(request: CreateBlueprintInstanceRequest): CreateBlueprintInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBlueprintInstance', 'POST', '/webapi/blueprintinstance/create', 'json', true, 'form', request);
}

model CreateDataSourceRequest {
  clientToken?: string(name='ClientToken', position='Header'),
  connectionInfo?: string(name='ConnectionInfo', position='Body'),
  dataSourceType?: string(name='DataSourceType', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreateDataSourceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataSource', 'POST', '/webapi/datasource/create', 'json', true, 'form', request);
}

model CreateDatabaseRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseInput?: DatabaseInput(name='DatabaseInput', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreateDatabaseResponseBody = {
  code?: string(name='Code', description='Response Code'),
  message?: string(name='Message', description='Response Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseResponseBody(name='body'),
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatabase', 'POST', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model CreateFunctionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  functionInput?: FunctionInput(name='FunctionInput', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreateFunctionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model CreateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionResponseBody(name='body'),
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFunction', 'POST', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model CreateLockRequest {
  lockObjList?: [
    LockObj
  ](name='LockObjList', description='LockObjList', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreateLockResponseBody = {
  code?: string(name='Code', description='Code'),
  lockStatus?: LockStatus(name='LockStatus'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model CreateLockResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLockResponseBody(name='body'),
}

async function createLock(request: CreateLockRequest): CreateLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLock', 'POST', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model CreateMetastoreCrawlerRequest {
  datasourceExcludePath?: string(name='DatasourceExcludePath', position='Body'),
  datasourcePath?: string(name='DatasourcePath', position='Body'),
  datasourceType?: string(name='DatasourceType', position='Body'),
  executeCron?: string(name='ExecuteCron', position='Body'),
  executeMode?: string(name='ExecuteMode', position='Body'),
  executeType?: string(name='ExecuteType', position='Body'),
  fileFormat?: string(name='FileFormat', position='Body'),
  fileFormatConfig?: string(name='FileFormatConfig', position='Body'),
  immediatelyRun?: boolean(name='ImmediatelyRun', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', position='Body'),
  targetDatabase?: string(name='TargetDatabase', position='Body'),
  targetTablePrefix?: string(name='TargetTablePrefix', position='Body'),
  targetUpdateStrategy?: string(name='TargetUpdateStrategy', position='Body'),
}

model CreateMetastoreCrawlerResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMetastoreCrawlerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMetastoreCrawlerResponseBody(name='body'),
}

async function createMetastoreCrawler(request: CreateMetastoreCrawlerRequest): CreateMetastoreCrawlerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMetastoreCrawler', 'POST', '/webapi/crawler/create', 'json', true, 'form', request);
}

model CreateMetastoreMigrationRequest {
  desc?: string(name='Desc', position='Body'),
  metastoreInfo?: string(name='MetastoreInfo', position='Body'),
  metastoreType?: string(name='MetastoreType', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', position='Body'),
  runOptions?: string(name='RunOptions', position='Body'),
}

model CreateMetastoreMigrationResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMetastoreMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMetastoreMigrationResponseBody(name='body'),
}

async function createMetastoreMigration(request: CreateMetastoreMigrationRequest): CreateMetastoreMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMetastoreMigration', 'POST', '/webapi/migration/create', 'json', true, 'form', request);
}

model CreatePartitionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  ifNotExists?: boolean(name='IfNotExists', description='IfNotExists', position='Body'),
  needResult?: boolean(name='NeedResult', description='NeedResult', position='Body'),
  partitionInput?: PartitionInput(name='PartitionInput', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreatePartitionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partition?: Partition(name='Partition'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model CreatePartitionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePartitionResponseBody(name='body'),
}

async function createPartition(request: CreatePartitionRequest): CreatePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions', 'json', false, 'json', request);
}

model CreateSavedQueryRequest {
  description?: string(name='Description', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  savedQueryId?: string(name='SavedQueryId', position='Body'),
  sql?: string(name='Sql', position='Body'),
  workspaceId?: string(name='WorkspaceId', position='Body'),
}

model CreateSavedQueryResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSavedQueryResponseBody(name='body'),
}

async function createSavedQuery(request: CreateSavedQueryRequest): CreateSavedQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavedQuery', 'POST', '/webapi/query/createSavedQueryRequestBody', 'json', true, 'form', request);
}

model CreateStorageCollectorRequest {
  datasourceType: string(name='DatasourceType', description='数据源类型', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreateStorageCollectorResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model CreateStorageCollectorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStorageCollectorResponseBody(name='body'),
}

async function createStorageCollector(request: CreateStorageCollectorRequest): CreateStorageCollectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateStorageCollector', 'POST', '/webapi/storagecollect/create', 'json', false, 'json', request);
}

model CreateTableRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  tableInput?: TableInput(name='TableInput', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model CreateTableResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model CreateTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTableResponseBody(name='body'),
}

async function createTable(request: CreateTableRequest): CreateTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTable', 'POST', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model CreateTpcdsDatabaseRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  body?: string(name='body', position='Body'),
}

model CreateTpcdsDatabaseResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model CreateTpcdsDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTpcdsDatabaseResponseBody(name='body'),
}

async function createTpcdsDatabase(request: CreateTpcdsDatabaseRequest): CreateTpcdsDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTpcdsDatabase', 'POST', '/webapi/query/createTpcdsDatabase', 'json', false, 'json', request);
}

model CreateUserFeedbackRequest {
  description?: string(name='Description', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  score?: string(name='Score', position='Body'),
  tags?: string(name='Tags', position='Body'),
}

model CreateUserFeedbackResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateUserFeedbackResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserFeedbackResponseBody(name='body'),
}

async function createUserFeedback(request: CreateUserFeedbackRequest): CreateUserFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUserFeedback', 'POST', '/webapi/feedback/create', 'json', true, 'form', request);
}

model DeleteBlueprintInstanceRequest {
  blueprintInstanceId: string(name='BlueprintInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeleteBlueprintInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteBlueprintInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBlueprintInstanceResponseBody(name='body'),
}

async function deleteBlueprintInstance(request: DeleteBlueprintInstanceRequest): DeleteBlueprintInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBlueprintInstance', 'DELETE', '/webapi/blueprintinstance/delete', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  dataSourceId: string(name='DataSourceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataSource', 'DELETE', '/webapi/datasource/delete', 'json', false, 'json', request);
}

model DeleteDatabaseRequest {
  cascade?: boolean(name='Cascade', description='Cascade', position='Query'),
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  name?: string(name='Name', description='Name', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeleteDatabaseResponseBody = {
  code?: string(name='Code', description='Response Code'),
  message?: string(name='Message', description='Response Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Request is success or not'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatabase', 'DELETE', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model DeleteFunctionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  functionName?: string(name='FunctionName', description='FunctionName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeleteFunctionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model DeleteFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFunctionResponseBody(name='body'),
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunction', 'DELETE', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model DeleteMetastoreCrawlerRequest {
  crawlerId: string(name='CrawlerId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeleteMetastoreCrawlerResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteMetastoreCrawlerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetastoreCrawlerResponseBody(name='body'),
}

async function deleteMetastoreCrawler(request: DeleteMetastoreCrawlerRequest): DeleteMetastoreCrawlerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMetastoreCrawler', 'DELETE', '/webapi/crawler/delete', 'json', false, 'json', request);
}

model DeleteMetastoreMigrationRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeleteMetastoreMigrationResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteMetastoreMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetastoreMigrationResponseBody(name='body'),
}

async function deleteMetastoreMigration(request: DeleteMetastoreMigrationRequest): DeleteMetastoreMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMetastoreMigration', 'DELETE', '/webapi/migration/delete', 'json', false, 'json', request);
}

model DeletePartitionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  ifExists?: boolean(name='IfExists', description='IfExists', position='Body'),
  partitionValues?: [ string ](name='PartitionValues', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DeletePartitionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model DeletePartitionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePartitionResponseBody(name='body'),
}

async function deletePartition(request: DeletePartitionRequest): DeletePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions/delete', 'json', false, 'json', request);
}

model DeletePartitionColumnStatisticsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  columnNames?: [ string ](name='ColumnNames', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  partitionNames?: [ string ](name='PartitionNames', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model DeletePartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model DeletePartitionColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePartitionColumnStatisticsResponseBody(name='body'),
}

async function deletePartitionColumnStatistics(request: DeletePartitionColumnStatisticsRequest): DeletePartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePartitionColumnStatistics', 'DELETE', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics', 'json', false, 'json', request);
}

model DeleteSavedQueryRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  savedQueryId?: string(name='SavedQueryId', position='Query'),
}

model DeleteSavedQueryResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSavedQueryResponseBody(name='body'),
}

async function deleteSavedQuery(request: DeleteSavedQueryRequest): DeleteSavedQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavedQuery', 'POST', '/webapi/query/deleteSavedQuery', 'json', false, 'json', request);
}

model DeleteTableRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model DeleteTableResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model DeleteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTableResponseBody(name='body'),
}

async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTable', 'DELETE', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model DeleteTableColumnStatisticsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  columnNames?: [ string ](name='ColumnNames', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model DeleteTableColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model DeleteTableColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTableColumnStatisticsResponseBody(name='body'),
}

async function deleteTableColumnStatistics(request: DeleteTableColumnStatisticsRequest): DeleteTableColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTableColumnStatistics', 'DELETE', '/api/metastore/catalogs/databases/tables/columnstatistics', 'json', false, 'json', request);
}

model DeleteTableVersionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
  versionId?: int32(name='VersionId', description='table version id', position='Query'),
}

model DeleteTableVersionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model DeleteTableVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTableVersionResponseBody(name='body'),
}

async function deleteTableVersion(request: DeleteTableVersionRequest): DeleteTableVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTableVersion', 'DELETE', '/api/metastore/catalogs/databases/tables/versions', 'json', false, 'json', request);
}

model DescribeBlueprintInstanceRequest {
  blueprintInstanceId: string(name='BlueprintInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DescribeBlueprintInstanceResponseBody = {
  blueprintInstance?: {
    blueprintInstanceId?: string(name='BlueprintInstanceId'),
    blueprintType?: string(name='BlueprintType'),
    creator?: string(name='Creator'),
    dataSourceConfig?: string(name='DataSourceConfig'),
    emrFlowId?: string(name='EmrFlowId'),
    emrFlowProjectId?: string(name='EmrFlowProjectId'),
    emrFlowScheduleStatus?: string(name='EmrFlowScheduleStatus'),
    executeCapacity?: long(name='ExecuteCapacity'),
    executeParameters?: string(name='ExecuteParameters'),
    executeType?: string(name='ExecuteType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    lastRunFlowInstance?: {
      clusterId?: string(name='ClusterId'),
      duration?: long(name='Duration'),
      endTime?: string(name='EndTime'),
      flowId?: string(name='FlowId'),
      flowInstanceId?: string(name='FlowInstanceId'),
      flowName?: string(name='FlowName'),
      projectId?: string(name='ProjectId'),
      reason?: string(name='Reason'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }(name='LastRunFlowInstance'),
    name?: string(name='Name'),
    owner?: string(name='Owner'),
    preProcessingConfig?: string(name='PreProcessingConfig'),
    reason?: string(name='Reason'),
    regionId?: string(name='RegionId'),
    roleName?: long(name='RoleName'),
    sourceChannelId?: string(name='SourceChannelId'),
    sourceChannelName?: string(name='SourceChannelName'),
    sourceChannelType?: string(name='SourceChannelType'),
    sourceDataSourceId?: string(name='SourceDataSourceId'),
    sourceDataSourceName?: string(name='SourceDataSourceName'),
    sourceFormat?: string(name='SourceFormat'),
    sourceInclude?: string(name='SourceInclude'),
    sourceLocationUri?: string(name='SourceLocationUri'),
    sourcePrimaryColumn?: string(name='SourcePrimaryColumn'),
    sourceSchema?: string(name='SourceSchema'),
    status?: int32(name='Status'),
    targetDatabase?: string(name='TargetDatabase'),
    targetFormat?: string(name='TargetFormat'),
    targetLocationUri?: string(name='TargetLocationUri'),
    targetTablePrefix?: string(name='TargetTablePrefix'),
  }(name='BlueprintInstance'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeBlueprintInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlueprintInstanceResponseBody(name='body'),
}

async function describeBlueprintInstance(request: DescribeBlueprintInstanceRequest): DescribeBlueprintInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBlueprintInstance', 'GET', '/webapi/blueprintinstance/describe', 'json', false, 'json', request);
}

model DescribeDataSourceRequest {
  dataSourceId: string(name='DataSourceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DescribeDataSourceResponseBody = {
  dataSource?: {
    connectionInfo?: string(name='ConnectionInfo'),
    dataSourceId?: string(name='DataSourceId'),
    dataSourceType?: string(name='DataSourceType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
  }(name='DataSource'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataSourceResponseBody(name='body'),
}

async function describeDataSource(request: DescribeDataSourceRequest): DescribeDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDataSource', 'GET', '/webapi/datasource/describe', 'json', false, 'json', request);
}

model DescribeMetastoreCrawlerRequest {
  crawlerId: string(name='CrawlerId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DescribeMetastoreCrawlerResponseBody = {
  creator?: long(name='Creator'),
  datasourceExcludePath?: string(name='DatasourceExcludePath'),
  datasourcePath?: string(name='DatasourcePath'),
  datasourceType?: string(name='DatasourceType'),
  executeCron?: string(name='ExecuteCron'),
  executeMode?: string(name='ExecuteMode'),
  executeType?: string(name='ExecuteType'),
  fileFormat?: string(name='FileFormat'),
  fileFormatConfig?: string(name='FileFormatConfig'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  owner?: long(name='Owner'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  roleName?: string(name='RoleName'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  targetDatabase?: string(name='TargetDatabase'),
  targetTablePrefix?: string(name='TargetTablePrefix'),
  targetUpdateStrategy?: string(name='TargetUpdateStrategy'),
  workflowLastRunInstance?: {
    batchProgress?: int32(name='BatchProgress'),
    clusterId?: string(name='ClusterId'),
    duration?: long(name='Duration'),
    endTime?: long(name='EndTime'),
    failureInfo?: string(name='FailureInfo'),
    flowExtendResult?: string(name='FlowExtendResult'),
    flowId?: string(name='FlowId'),
    flowInstanceId?: string(name='FlowInstanceId'),
    flowName?: string(name='FlowName'),
    projectId?: string(name='ProjectId'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
  }(name='WorkflowLastRunInstance'),
}

model DescribeMetastoreCrawlerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetastoreCrawlerResponseBody(name='body'),
}

async function describeMetastoreCrawler(request: DescribeMetastoreCrawlerRequest): DescribeMetastoreCrawlerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeMetastoreCrawler', 'GET', '/webapi/crawler/describe', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      showName?: string(name='ShowName'),
      type?: string(name='Type'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/webapi/service/describeRegions', 'json', false, 'json', request);
}

model ExportQueryResultRequest {
  queryId?: string(name='QueryId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ExportQueryResultResponseBody = {
  downloadUrlList?: [ string ](name='DownloadUrlList'),
  isReady?: boolean(name='IsReady'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportQueryResultResponse = {
  headers: map[string]string(name='headers'),
  body: ExportQueryResultResponseBody(name='body'),
}

async function exportQueryResult(request: ExportQueryResultRequest): ExportQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExportQueryResult', 'GET', '/webapi/query/exportQueryResult', 'json', false, 'json', request);
}

model GetAsyncTaskStatusRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  taskId?: string(name='TaskId', description='TaskId', position='Query'),
}

model GetAsyncTaskStatusResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  taskStatus?: TaskStatus(name='TaskStatus'),
}

model GetAsyncTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncTaskStatusResponseBody(name='body'),
}

async function getAsyncTaskStatus(request: GetAsyncTaskStatusRequest): GetAsyncTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAsyncTaskStatus', 'GET', '/api/metastore/catalogs/tasks', 'json', false, 'json', request);
}

model GetBlueprintInstanceRequest {
  blueprintInstanceId: string(name='BlueprintInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetBlueprintInstanceResponseBody = {
  blueprintInstance?: {
    blueprintInstanceId?: string(name='BlueprintInstanceId'),
    blueprintType?: string(name='BlueprintType'),
    creator?: string(name='Creator'),
    dataSourceConfig?: string(name='DataSourceConfig'),
    executeCapacity?: long(name='ExecuteCapacity'),
    executeParameters?: string(name='ExecuteParameters'),
    executeType?: string(name='ExecuteType'),
    failureInfo?: string(name='FailureInfo'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    owner?: string(name='Owner'),
    preProcessingConfig?: string(name='PreProcessingConfig'),
    regionId?: string(name='RegionId'),
    roleName?: string(name='RoleName'),
    status?: int32(name='Status'),
    targetDatabase?: string(name='TargetDatabase'),
    targetFormat?: string(name='TargetFormat'),
    targetLocationUri?: string(name='TargetLocationUri'),
    targetPartitions?: string(name='TargetPartitions'),
    targetTable?: string(name='TargetTable'),
    workflow?: {
      latestEndTime?: string(name='LatestEndTime'),
      latestInstanceStatus?: string(name='LatestInstanceStatus'),
      latestStartTime?: string(name='LatestStartTime'),
      workflowId?: string(name='WorkflowId'),
    }(name='Workflow'),
    workflowId?: string(name='WorkflowId'),
    workflowLastRunInstance?: {
      clusterId?: string(name='ClusterId'),
      duration?: long(name='Duration'),
      endTime?: string(name='EndTime'),
      failureInfo?: string(name='FailureInfo'),
      flowId?: string(name='FlowId'),
      flowInstanceId?: string(name='FlowInstanceId'),
      flowName?: string(name='FlowName'),
      projectId?: string(name='ProjectId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }(name='WorkflowLastRunInstance'),
    workflowProjectId?: string(name='WorkflowProjectId'),
  }(name='BlueprintInstance'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetBlueprintInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetBlueprintInstanceResponseBody(name='body'),
}

async function getBlueprintInstance(request: GetBlueprintInstanceRequest): GetBlueprintInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBlueprintInstance', 'GET', '/webapi/blueprintinstance/get', 'json', false, 'json', request);
}

model GetDataSourceRequest {
  dataSourceId: string(name='DataSourceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetDataSourceResponseBody = {
  dataSource?: {
    connectionInfo?: string(name='ConnectionInfo'),
    dataSourceId?: string(name='DataSourceId'),
    dataSourceType?: string(name='DataSourceType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
  }(name='DataSource'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSourceResponseBody(name='body'),
}

async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSource', 'GET', '/webapi/datasource/get', 'json', false, 'json', request);
}

model GetDatabaseRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  name?: string(name='Name', description='The name of the database to query.', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetDatabaseResponseBody = {
  code?: string(name='Code', description='Response Code'),
  database?: Database(name='Database'),
  message?: string(name='Message', description='Response Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='API is success or not'),
}

model GetDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatabaseResponseBody(name='body'),
}

async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatabase', 'GET', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model GetEtlResourceUsagesRequest {
  months: string(name='Months', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetEtlResourceUsagesResponseBody = {
  etlResourceUsages?: [ 
    {
      cuUsage?: long(name='CuUsage'),
      month?: string(name='Month'),
      queryTime?: string(name='QueryTime'),
    }
  ](name='EtlResourceUsages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: string(name='TotalCount'),
}

model GetEtlResourceUsagesResponse = {
  headers: map[string]string(name='headers'),
  body: GetEtlResourceUsagesResponseBody(name='body'),
}

async function getEtlResourceUsages(request: GetEtlResourceUsagesRequest): GetEtlResourceUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEtlResourceUsages', 'GET', '/webapi/measure/getEtlResourceUsages', 'json', false, 'json', request);
}

model GetFunctionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  functionName?: string(name='FunctionName', description='FunctionName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetFunctionResponseBody = {
  code?: string(name='Code', description='Code'),
  function?: Function(name='Function'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model GetFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionResponseBody(name='body'),
}

async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunction', 'GET', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model GetIndicatorDetailsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  dateRange?: string(name='dateRange', position='Body'),
  indicatorCodeList?: [ string ](name='indicatorCodeList', position='Body'),
  timeUnit?: string(name='timeUnit', position='Body'),
}

model GetIndicatorDetailsResponseBody = {
  data?: [ 
    {
      indicatorStatistic?: {
        data?: long(name='data'),
        date?: string(name='date'),
      }(name='IndicatorStatistic'),
    }
  ](name='Data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetIndicatorDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetIndicatorDetailsResponseBody(name='body'),
}

async function getIndicatorDetails(request: GetIndicatorDetailsRequest): GetIndicatorDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndicatorDetails', 'POST', '/webapi/storageindicator/getIndicatorDetails', 'json', false, 'json', request);
}

model GetLatestDateRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetLatestDateResponse = {
  headers: map[string]string(name='headers'),
}

async function getLatestDate(request: GetLatestDateRequest): GetLatestDateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLatestDate', 'GET', '/webapi/storageindicator/getLatestDate', 'none', false, 'json', request);
}

model GetLockRequest {
  lockId?: long(name='LockId', description='LockId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetLockResponseBody = {
  code?: string(name='Code', description='Code'),
  lockStatus?: LockStatus(name='LockStatus'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model GetLockResponse = {
  headers: map[string]string(name='headers'),
  body: GetLockResponseBody(name='body'),
}

async function getLock(request: GetLockRequest): GetLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLock', 'GET', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model GetMetaDataApiCallUsagesRequest {
  months: string(name='Months', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetMetaDataApiCallUsagesResponseBody = {
  metaDataApiCallUsages?: [ 
    {
      apiCall?: long(name='ApiCall'),
      month?: string(name='Month'),
      queryTime?: string(name='QueryTime'),
    }
  ](name='MetaDataApiCallUsages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model GetMetaDataApiCallUsagesResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetaDataApiCallUsagesResponseBody(name='body'),
}

async function getMetaDataApiCallUsages(request: GetMetaDataApiCallUsagesRequest): GetMetaDataApiCallUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetaDataApiCallUsages', 'GET', '/webapi/measure/getMetaDataApiCallUsages', 'json', false, 'json', request);
}

model GetMetaDataStorageUsagesRequest {
  months: string(name='Months', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetMetaDataStorageUsagesResponseBody = {
  metaDataStorageUsages?: [ 
    {
      catalog?: long(name='Catalog'),
      database?: long(name='Database'),
      function?: long(name='Function'),
      month?: string(name='Month'),
      partition?: long(name='Partition'),
      queryTime?: string(name='QueryTime'),
      storageUsage?: long(name='StorageUsage'),
      table?: long(name='Table'),
    }
  ](name='MetaDataStorageUsages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: string(name='TotalCount'),
}

model GetMetaDataStorageUsagesResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetaDataStorageUsagesResponseBody(name='body'),
}

async function getMetaDataStorageUsages(request: GetMetaDataStorageUsagesRequest): GetMetaDataStorageUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetaDataStorageUsages', 'GET', '/webapi/measure/getMetaDataStorageUsages', 'json', false, 'json', request);
}

model GetMetastoreMigrationRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetMetastoreMigrationResponseBody = {
  data?: {
    desc?: string(name='Desc'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    instanceId?: string(name='InstanceId'),
    metastoreInfo?: string(name='MetastoreInfo'),
    metastoreType?: string(name='MetastoreType'),
    name?: string(name='Name'),
    roleName?: string(name='RoleName'),
    runOptions?: string(name='RunOptions'),
    status?: string(name='Status'),
    workflowLastRunInstance?: {
      batchProgress?: int32(name='BatchProgress'),
      clusterId?: string(name='ClusterId'),
      duration?: long(name='Duration'),
      endTime?: long(name='EndTime'),
      executeMode?: string(name='ExecuteMode'),
      failureInfo?: string(name='FailureInfo'),
      flowExtendResult?: string(name='FlowExtendResult'),
      flowId?: string(name='FlowId'),
      flowInstanceId?: string(name='FlowInstanceId'),
      flowName?: string(name='FlowName'),
      offsetTime?: int32(name='OffsetTime'),
      opsUrl?: string(name='OpsUrl'),
      projectId?: string(name='ProjectId'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      totalCuUsage?: float(name='TotalCuUsage'),
    }(name='WorkflowLastRunInstance'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetastoreMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetastoreMigrationResponseBody(name='body'),
}

async function getMetastoreMigration(request: GetMetastoreMigrationRequest): GetMetastoreMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetastoreMigration', 'GET', '/webapi/migration/get', 'json', false, 'json', request);
}

model GetMigrationWorkflowInstanceLogInfoRequest {
  flowInstanceId: string(name='FlowInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetMigrationWorkflowInstanceLogInfoResponseBody = {
  data?: {
    instanceId?: string(name='InstanceId'),
    logContent?: string(name='LogContent'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model GetMigrationWorkflowInstanceLogInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMigrationWorkflowInstanceLogInfoResponseBody(name='body'),
}

async function getMigrationWorkflowInstanceLogInfo(request: GetMigrationWorkflowInstanceLogInfoRequest): GetMigrationWorkflowInstanceLogInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMigrationWorkflowInstanceLogInfo', 'GET', '/webapi/migration/workflow/log/get', 'json', false, 'json', request);
}

model GetPartitionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  partitionValues?: [ string ](name='PartitionValues', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetPartitionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partition?: Partition(name='Partition'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model GetPartitionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPartitionResponseBody(name='body'),
}

async function getPartition(request: GetPartitionRequest): GetPartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions/get', 'json', false, 'json', request);
}

model GetPartitionColumnStatisticsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  columnNames?: [ string ](name='ColumnNames', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  partitionNames?: [ string ](name='PartitionNames', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model GetPartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  partitionStatisticsMap?: map[string][
    ColumnStatisticsObj
  ](name='PartitionStatisticsMap', description='PartitionStatisticsMap'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model GetPartitionColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPartitionColumnStatisticsResponseBody(name='body'),
}

async function getPartitionColumnStatistics(request: GetPartitionColumnStatisticsRequest): GetPartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPartitionColumnStatistics', 'GET', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics', 'json', false, 'json', request);
}

model GetQueryResultRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryId?: string(name='QueryId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetQueryResultResponseBody = {
  duration?: long(name='Duration'),
  endTime?: string(name='EndTime'),
  errorMessage?: string(name='ErrorMessage'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: string(name='Id'),
  jobCompleted?: boolean(name='JobCompleted'),
  logs?: string(name='Logs'),
  owner?: long(name='Owner'),
  progress?: int32(name='Progress'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resultTmpDb?: string(name='ResultTmpDb'),
  resultTmpTable?: string(name='ResultTmpTable'),
  rowCount?: int32(name='RowCount'),
  rowCountOverLimit?: boolean(name='RowCountOverLimit'),
  rows?: string(name='Rows'),
  schema?: string(name='Schema'),
  sql?: string(name='Sql'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model GetQueryResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetQueryResultResponseBody(name='body'),
}

async function getQueryResult(request: GetQueryResultRequest): GetQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQueryResult', 'GET', '/webapi/query/getQueryResult', 'json', false, 'json', request);
}

model GetRdsDBInstanceAttributeRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetRdsDBInstanceAttributeResponseBody = {
  DBInstance?: {
    connectionString?: string(name='ConnectionString'),
    DBInstanceDescription?: string(name='DBInstanceDescription'),
    DBInstanceId?: string(name='DBInstanceId'),
    DBInstanceNetType?: string(name='DBInstanceNetType'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    DBInstanceType?: string(name='DBInstanceType'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    instanceNetworkType?: string(name='InstanceNetworkType'),
    port?: string(name='Port'),
    regionId?: string(name='RegionId'),
    resourceGroupId?: string(name='ResourceGroupId'),
    vSwitchId?: string(name='VSwitchId'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    vpcId?: string(name='VpcId'),
    zoneId?: string(name='ZoneId'),
  }(name='DBInstance'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetRdsDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetRdsDBInstanceAttributeResponseBody(name='body'),
}

async function getRdsDBInstanceAttribute(request: GetRdsDBInstanceAttributeRequest): GetRdsDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRdsDBInstanceAttribute', 'GET', '/webapi/resource/rds/getDBInstanceAttribute', 'json', false, 'json', request);
}

model GetRegionClusterInfoRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetRegionClusterInfoResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType'),
    regionId?: string(name='RegionId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRegionClusterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegionClusterInfoResponseBody(name='body'),
}

async function getRegionClusterInfo(request: GetRegionClusterInfoRequest): GetRegionClusterInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegionClusterInfo', 'GET', '/webapi/profile/getRegionClusterInfo', 'json', false, 'json', request);
}

model GetRegionStatusRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetRegionStatusResponseBody = {
  data?: {
    accountStatus?: string(name='AccountStatus'),
    isDependencyReady?: boolean(name='IsDependencyReady'),
    isDlfServiceOpen?: boolean(name='IsDlfServiceOpen'),
    regionId?: string(name='RegionId'),
    regionStatus?: string(name='RegionStatus'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetRegionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegionStatusResponseBody(name='body'),
}

async function getRegionStatus(request: GetRegionStatusRequest): GetRegionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegionStatus', 'GET', '/webapi/service/getRegionStatus', 'json', false, 'json', request);
}

model GetServiceStatusRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetServiceStatusResponseBody = {
  data?: {
    hasRamPermissions?: boolean(name='HasRamPermissions'),
    isDlfServiceOpen?: boolean(name='IsDlfServiceOpen'),
    isOssOpen?: boolean(name='IsOssOpen'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceStatusResponseBody(name='body'),
}

async function getServiceStatus(request: GetServiceStatusRequest): GetServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceStatus', 'GET', '/webapi/service/getServiceStatus', 'json', false, 'json', request);
}

model GetStatisticsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  singleIndicatorList?: [ 
    {
      indicatorCode?: string(name='indicatorCode'),
      indicatorTypes?: [ string ](name='indicatorTypes'),
    }
  ](name='singleIndicatorList', position='Body'),
}

model GetStatisticsResponse = {
  headers: map[string]string(name='headers'),
}

async function getStatistics(request: GetStatisticsRequest): GetStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStatistics', 'POST', '/webapi/storageindicator/getStatistics', 'none', false, 'json', request);
}

model GetStorageAnalysisRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  analysisTypeList?: [ string ](name='analysisTypeList', position='Body'),
  date?: string(name='date', position='Body'),
  dbName?: string(name='dbName', position='Body'),
  tableName?: string(name='tableName', position='Body'),
}

model GetStorageAnalysisResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetStorageAnalysisResponse = {
  headers: map[string]string(name='headers'),
  body: GetStorageAnalysisResponseBody(name='body'),
}

async function getStorageAnalysis(request: GetStorageAnalysisRequest): GetStorageAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStorageAnalysis', 'POST', '/webapi/storageindicator/getStorageAnalysis', 'json', false, 'json', request);
}

model GetStorageRankRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  order?: string(name='order', position='Body'),
  rankType?: [ string ](name='rankType', position='Body'),
}

model GetStorageRankResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetStorageRankResponse = {
  headers: map[string]string(name='headers'),
  body: GetStorageRankResponseBody(name='body'),
}

async function getStorageRank(request: GetStorageRankRequest): GetStorageRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStorageRank', 'POST', '/webapi/storageindicator/getStorageRank', 'json', false, 'json', request);
}

model GetTableRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model GetTableResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  table?: Table(name='Table'),
}

model GetTableResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableResponseBody(name='body'),
}

async function getTable(request: GetTableRequest): GetTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTable', 'GET', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model GetTableColumnStatisticsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  columnNames?: [ string ](name='ColumnNames', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model GetTableColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  columnStatisticsObjList?: [
    ColumnStatisticsObj
  ](name='ColumnStatisticsObjList', description='ColumnStatisticsObjList'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model GetTableColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableColumnStatisticsResponseBody(name='body'),
}

async function getTableColumnStatistics(request: GetTableColumnStatisticsRequest): GetTableColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableColumnStatistics', 'GET', '/api/metastore/catalogs/databases/tables/columnstatistics', 'json', false, 'json', request);
}

model GetTableProfileRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName: string(name='TableName', description='TableName', position='Query'),
}

model GetTableProfileResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  tableProfile?: TableProfile(name='TableProfile'),
}

model GetTableProfileResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableProfileResponseBody(name='body'),
}

async function getTableProfile(request: GetTableProfileRequest): GetTableProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableProfile', 'GET', '/webapi/metastorehouse/catalog/database/tableprofile', 'json', false, 'json', request);
}

model GetTableVersionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
  versionId?: int32(name='VersionId', description='Table Version', position='Query'),
}

model GetTableVersionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  tableVersion?: TableVersion(name='TableVersion'),
}

model GetTableVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableVersionResponseBody(name='body'),
}

async function getTableVersion(request: GetTableVersionRequest): GetTableVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableVersion', 'GET', '/api/metastore/catalogs/databases/tables/versions', 'json', false, 'json', request);
}

model GetWorkflowInstanceRequest {
  flowInstanceId: string(name='FlowInstanceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model GetWorkflowInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  workflowInstanceDetail?: {
    failedNodeInstance?: {
      externalId?: string(name='ExternalId'),
      externalInfo?: string(name='ExternalInfo'),
      jobName?: string(name='JobName'),
      jobType?: string(name='JobType'),
      nodeInstanceId?: string(name='NodeInstanceId'),
      status?: string(name='Status'),
    }(name='FailedNodeInstance'),
    flowInstanceId?: string(name='FlowInstanceId'),
    flowNodeSize?: string(name='FlowNodeSize'),
    hasFailedNode?: string(name='HasFailedNode'),
    runtimeLogs?: [ 
      {
        bizTime?: string(name='BizTime'),
        instanceId?: string(name='InstanceId'),
        logContent?: string(name='LogContent'),
        logId?: string(name='LogId'),
        logSummary?: string(name='LogSummary'),
        logType?: string(name='LogType'),
        trigger?: string(name='Trigger'),
      }
    ](name='RuntimeLogs'),
  }(name='WorkflowInstanceDetail'),
}

model GetWorkflowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkflowInstanceResponseBody(name='body'),
}

async function getWorkflowInstance(request: GetWorkflowInstanceRequest): GetWorkflowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkflowInstance', 'GET', '/webapi/blueprintinstance/getWorkflowInstance', 'json', false, 'json', request);
}

model ListBlueprintInstanceCreatorsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListBlueprintInstanceCreatorsResponseBody = {
  data?: [ 
    {
      creator?: string(name='Creator'),
      creatorLoginName?: string(name='CreatorLoginName'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListBlueprintInstanceCreatorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBlueprintInstanceCreatorsResponseBody(name='body'),
}

async function listBlueprintInstanceCreators(request: ListBlueprintInstanceCreatorsRequest): ListBlueprintInstanceCreatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBlueprintInstanceCreators', 'GET', '/webapi/blueprintinstance/listBlueprintInstanceCreators', 'json', false, 'json', request);
}

model ListBlueprintInstancesRequest {
  blueprintInstanceId?: string(name='BlueprintInstanceId', position='Query'),
  blueprintType?: string(name='BlueprintType', position='Query'),
  creatorUid?: string(name='CreatorUid', position='Query'),
  executeType?: string(name='ExecuteType', position='Query'),
  namePrefix?: string(name='NamePrefix', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model ListBlueprintInstancesResponseBody = {
  blueprintInstances?: [ 
    {
      batchProgress?: int32(name='BatchProgress'),
      blueprintInstanceId?: string(name='BlueprintInstanceId'),
      blueprintType?: string(name='BlueprintType'),
      creator?: long(name='Creator'),
      creatorLoginName?: string(name='CreatorLoginName'),
      dataSourceConfig?: string(name='DataSourceConfig'),
      executeCapacity?: string(name='ExecuteCapacity'),
      executeParameters?: string(name='ExecuteParameters'),
      executeType?: string(name='ExecuteType'),
      failureInfo?: string(name='FailureInfo'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      name?: string(name='Name'),
      offsetTime?: int32(name='OffsetTime'),
      owner?: long(name='Owner'),
      regionId?: string(name='RegionId'),
      roleName?: string(name='RoleName'),
      status?: int32(name='Status'),
      targetDatabase?: string(name='TargetDatabase'),
      targetFormat?: string(name='TargetFormat'),
      targetLocationUri?: string(name='TargetLocationUri'),
      targetPartitions?: string(name='TargetPartitions'),
      targetTable?: string(name='TargetTable'),
      workflow?: {
        latestEndTime?: string(name='LatestEndTime'),
        latestInstanceStatus?: string(name='LatestInstanceStatus'),
        latestStartTime?: string(name='LatestStartTime'),
        workflowId?: string(name='WorkflowId'),
      }(name='Workflow'),
      workflowId?: string(name='WorkflowId'),
      workflowLastRunInstance?: {
        batchProgress?: int32(name='BatchProgress'),
        clusterId?: string(name='ClusterId'),
        duration?: long(name='Duration'),
        endTime?: string(name='EndTime'),
        failureInfo?: string(name='FailureInfo'),
        flowId?: string(name='FlowId'),
        flowInstanceId?: string(name='FlowInstanceId'),
        flowName?: string(name='FlowName'),
        offsetTime?: int32(name='OffsetTime'),
        projectId?: string(name='ProjectId'),
        startTime?: string(name='StartTime'),
        status?: string(name='Status'),
      }(name='WorkflowLastRunInstance'),
      workflowProjectId?: string(name='WorkflowProjectId'),
    }
  ](name='BlueprintInstances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListBlueprintInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListBlueprintInstancesResponseBody(name='body'),
}

async function listBlueprintInstances(request: ListBlueprintInstancesRequest): ListBlueprintInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBlueprintInstances', 'GET', '/webapi/blueprintinstance/list', 'json', false, 'json', request);
}

model ListCatalogsRequest {
  idPattern?: string(name='IdPattern', description='catalogId', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='namePattern', position='Query'),
  pageSize?: int32(name='PageSize', description='pageSize', minimum=-2, maximum=1000000, position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListCatalogsResponseBody = {
  catalogs?: [
    Catalog
  ](name='Catalogs', description='Catalogs'),
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListCatalogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCatalogsResponseBody(name='body'),
}

async function listCatalogs(request: ListCatalogsRequest): ListCatalogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCatalogs', 'GET', '/api/metastore/catalogs/list', 'json', false, 'json', request);
}

model ListCrawlerWorkflowInstanceRequest {
  crawlerId?: string(name='CrawlerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model ListCrawlerWorkflowInstanceResponseBody = {
  data?: [ 
    {
      batchProgress?: int32(name='BatchProgress'),
      clusterId?: string(name='ClusterId'),
      crawlerId?: string(name='CrawlerId'),
      crawlerIsDelete?: boolean(name='CrawlerIsDelete'),
      creator?: long(name='Creator'),
      datasourceExcludePath?: string(name='DatasourceExcludePath'),
      datasourcePath?: string(name='DatasourcePath'),
      datasourceType?: string(name='DatasourceType'),
      duration?: int32(name='Duration'),
      endTime?: long(name='EndTime'),
      executeCron?: string(name='ExecuteCron'),
      executeMode?: string(name='ExecuteMode'),
      executeType?: string(name='ExecuteType'),
      failureInfo?: string(name='FailureInfo'),
      fileFormat?: string(name='FileFormat'),
      fileFormatConfig?: string(name='FileFormatConfig'),
      flowExtendResult?: string(name='FlowExtendResult'),
      flowId?: string(name='FlowId'),
      flowInstanceId?: string(name='FlowInstanceId'),
      flowName?: string(name='FlowName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      name?: string(name='Name'),
      owner?: long(name='Owner'),
      projectId?: string(name='ProjectId'),
      regionId?: string(name='RegionId'),
      roleName?: string(name='RoleName'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      targetDatabase?: string(name='TargetDatabase'),
      targetTablePrefix?: string(name='TargetTablePrefix'),
      targetUpdateStrategy?: string(name='TargetUpdateStrategy'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListCrawlerWorkflowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListCrawlerWorkflowInstanceResponseBody(name='body'),
}

async function listCrawlerWorkflowInstance(request: ListCrawlerWorkflowInstanceRequest): ListCrawlerWorkflowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCrawlerWorkflowInstance', 'GET', '/webapi/crawler/workflow/listInstance', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', position='Query'),
  name?: string(name='Name', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      connectionInfo?: string(name='ConnectionInfo'),
      dataSourceId?: string(name='DataSourceId'),
      dataSourceType?: string(name='DataSourceType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      name?: string(name='Name'),
    }
  ](name='DataSources'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSources', 'GET', '/webapi/datasource/list', 'json', false, 'json', request);
}

model ListDatabasesRequest {
  catalogId?: string(name='CatalogId', description='catalogId', position='Query'),
  namePattern?: string(name='NamePattern', description='namePattern', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='namePattern', position='Query'),
  pageSize?: int32(name='PageSize', description='pageSize', minimum=-2, maximum=1000000, position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListDatabasesResponseBody = {
  code?: string(name='Code', description='Code'),
  databases?: [
    Database
  ](name='Databases', description='Database List'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatabasesResponseBody(name='body'),
}

async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatabases', 'GET', '/api/metastore/catalogs/databases/list', 'json', false, 'json', request);
}

model ListFunctionNamesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  functionNamePattern?: string(name='FunctionNamePattern', description='FunctionNamePattern', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', minimum=-1, maximum=1000000, position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListFunctionNamesResponseBody = {
  code?: string(name='Code', description='Code'),
  functionNames?: [ string ](name='FunctionNames', description='FunctionNames'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListFunctionNamesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionNamesResponseBody(name='body'),
}

async function listFunctionNames(request: ListFunctionNamesRequest): ListFunctionNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctionNames', 'GET', '/api/metastore/catalogs/databases/functions/names', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  functionNamePattern?: string(name='FunctionNamePattern', description='FunctionNamePattern', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', minimum=-1, maximum=1000000, position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListFunctionsResponseBody = {
  code?: string(name='Code', description='Code'),
  functions?: [
    Function
  ](name='Functions', description='Functions'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListFunctionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionsResponseBody(name='body'),
}

async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctions', 'GET', '/api/metastore/catalogs/databases/functions/list', 'json', false, 'json', request);
}

model ListMetastoreCrawlerRequest {
  creator?: string(name='Creator', position='Query'),
  dataSourceType?: string(name='DataSourceType', position='Query'),
  executeType?: string(name='ExecuteType', position='Query'),
  name?: string(name='Name', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model ListMetastoreCrawlerResponseBody = {
  data?: [ 
    {
      creator?: string(name='Creator'),
      creatorLoginName?: string(name='CreatorLoginName'),
      datasourceExcludePath?: string(name='DatasourceExcludePath'),
      datasourcePath?: string(name='DatasourcePath'),
      datasourceType?: string(name='DatasourceType'),
      executeMode?: string(name='ExecuteMode'),
      executeType?: string(name='ExecuteType'),
      fileFormat?: string(name='FileFormat'),
      fileFormatConfig?: string(name='FileFormatConfig'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      owner?: string(name='Owner'),
      regionId?: string(name='RegionId'),
      roleName?: string(name='RoleName'),
      status?: string(name='Status'),
      success?: boolean(name='Success'),
      targetDatabase?: string(name='TargetDatabase'),
      targetTablePrefix?: string(name='TargetTablePrefix'),
      targetUpdateStrategy?: string(name='TargetUpdateStrategy'),
      workflowLastRunInstance?: {
        batchProgress?: int32(name='BatchProgress'),
        clusterId?: string(name='ClusterId'),
        duration?: int32(name='Duration'),
        endTime?: long(name='EndTime'),
        failureInfo?: string(name='FailureInfo'),
        flowExtendResult?: string(name='FlowExtendResult'),
        flowId?: string(name='FlowId'),
        flowInstanceId?: string(name='FlowInstanceId'),
        flowName?: string(name='FlowName'),
        projectId?: string(name='ProjectId'),
        startTime?: long(name='StartTime'),
        status?: string(name='Status'),
      }(name='WorkflowLastRunInstance'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListMetastoreCrawlerResponse = {
  headers: map[string]string(name='headers'),
  body: ListMetastoreCrawlerResponseBody(name='body'),
}

async function listMetastoreCrawler(request: ListMetastoreCrawlerRequest): ListMetastoreCrawlerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMetastoreCrawler', 'GET', '/webapi/crawler/list', 'json', false, 'json', request);
}

model ListMetastoreCrawlerCreatorsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListMetastoreCrawlerCreatorsResponseBody = {
  data?: [ 
    {
      creator?: string(name='Creator'),
      creatorLoginName?: string(name='CreatorLoginName'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListMetastoreCrawlerCreatorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMetastoreCrawlerCreatorsResponseBody(name='body'),
}

async function listMetastoreCrawlerCreators(request: ListMetastoreCrawlerCreatorsRequest): ListMetastoreCrawlerCreatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMetastoreCrawlerCreators', 'GET', '/webapi/crawler/listCreators', 'json', false, 'json', request);
}

model ListMetastoreMigrationsRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  metastoreType?: string(name='MetastoreType', position='Query'),
  name?: string(name='Name', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model ListMetastoreMigrationsResponseBody = {
  data?: [ 
    {
      desc?: string(name='Desc'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      instanceId?: string(name='InstanceId'),
      metastoreInfo?: string(name='MetastoreInfo'),
      metastoreType?: string(name='MetastoreType'),
      name?: string(name='Name'),
      roleName?: string(name='RoleName'),
      runOptions?: string(name='RunOptions'),
      status?: string(name='Status'),
      workflowLastRunInstance?: {
        batchProgress?: int32(name='BatchProgress'),
        clusterId?: string(name='ClusterId'),
        duration?: long(name='Duration'),
        endTime?: long(name='EndTime'),
        executeMode?: string(name='ExecuteMode'),
        failureInfo?: string(name='FailureInfo'),
        flowExtendResult?: string(name='FlowExtendResult'),
        flowId?: string(name='FlowId'),
        flowInstanceId?: string(name='FlowInstanceId'),
        flowName?: string(name='FlowName'),
        offsetTime?: int32(name='OffsetTime'),
        opsUrl?: string(name='OpsUrl'),
        projectId?: string(name='ProjectId'),
        startTime?: long(name='StartTime'),
        status?: string(name='Status'),
        totalCuUsage?: float(name='TotalCuUsage'),
      }(name='WorkflowLastRunInstance'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListMetastoreMigrationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMetastoreMigrationsResponseBody(name='body'),
}

async function listMetastoreMigrations(request: ListMetastoreMigrationsRequest): ListMetastoreMigrationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMetastoreMigrations', 'GET', '/webapi/migration/list', 'json', false, 'json', request);
}

model ListMigrationWorkflowInstancesRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model ListMigrationWorkflowInstancesResponseBody = {
  data?: [ 
    {
      batchProgress?: int32(name='BatchProgress'),
      duration?: long(name='Duration'),
      endTime?: long(name='EndTime'),
      failureInfo?: string(name='FailureInfo'),
      flowExtendResult?: string(name='FlowExtendResult'),
      flowId?: string(name='FlowId'),
      flowInstanceId?: string(name='FlowInstanceId'),
      flowName?: string(name='FlowName'),
      instanceId?: string(name='InstanceId'),
      metastoreType?: string(name='MetastoreType'),
      name?: string(name='Name'),
      projectId?: string(name='ProjectId'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListMigrationWorkflowInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMigrationWorkflowInstancesResponseBody(name='body'),
}

async function listMigrationWorkflowInstances(request: ListMigrationWorkflowInstancesRequest): ListMigrationWorkflowInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMigrationWorkflowInstances', 'GET', '/webapi/migration/workflow/list', 'json', false, 'json', request);
}

model ListPartitionNamesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Body'),
  pageSize?: int32(name='PageSize', description='PageSize', position='Body'),
  partialPartValues?: [ string ](name='PartialPartValues', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListPartitionNamesResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  partitionNames?: [ string ](name='PartitionNames', description='PartitionNames'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListPartitionNamesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPartitionNamesResponseBody(name='body'),
}

async function listPartitionNames(request: ListPartitionNamesRequest): ListPartitionNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionNames', 'POST', '/api/metastore/catalogs/databases/tables/partitions/names', 'json', false, 'json', request);
}

model ListPartitionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  isShareSd?: boolean(name='IsShareSd', description='IsShareSd', position='Body'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Body'),
  pageSize?: int32(name='PageSize', description='PageSize', position='Body'),
  partialPartValues?: [ string ](name='PartialPartValues', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListPartitionsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  partitionSpecs?: [
    PartitionSpec
  ](name='PartitionSpecs', description='PartitionSpecs'),
  partitions?: [
    Partition
  ](name='Partitions', description='Partitions'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListPartitionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPartitionsResponseBody(name='body'),
}

async function listPartitions(request: ListPartitionsRequest): ListPartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitions', 'POST', '/api/metastore/catalogs/databases/tables/partitions/list', 'json', false, 'json', request);
}

model ListPartitionsByExprRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListPartitionsByExprResponse = {
  headers: map[string]string(name='headers'),
}

async function listPartitionsByExpr(request: ListPartitionsByExprRequest): ListPartitionsByExprResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionsByExpr', 'POST', '/api/metastore/catalogs/databases/tables/partitions/listbyexpr', 'none', false, 'json', request);
}

model ListPartitionsByFilterRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  filter?: string(name='Filter', description='Filter', position='Body'),
  isShareSd?: boolean(name='IsShareSd', description='IsShareSd', position='Body'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Body'),
  pageSize?: int32(name='PageSize', description='PageSize', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListPartitionsByFilterResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  partitionSpecs?: [
    PartitionSpec
  ](name='PartitionSpecs', description='PartitionSpecs'),
  partitions?: [
    Partition
  ](name='Partitions', description='Partitions'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model ListPartitionsByFilterResponse = {
  headers: map[string]string(name='headers'),
  body: ListPartitionsByFilterResponseBody(name='body'),
}

async function listPartitionsByFilter(request: ListPartitionsByFilterRequest): ListPartitionsByFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPartitionsByFilter', 'POST', '/api/metastore/catalogs/databases/tables/partitions/listbyfilter', 'json', false, 'json', request);
}

model ListQueryHistoryRequest {
  keyword?: string(name='Keyword', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
}

model ListQueryHistoryResponseBody = {
  data?: [ 
    {
      creator?: long(name='Creator'),
      creatorLoginName?: string(name='CreatorLoginName'),
      duration?: long(name='Duration'),
      endTime?: string(name='EndTime'),
      errorMessage?: string(name='ErrorMessage'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: string(name='Id'),
      jobCompleted?: boolean(name='JobCompleted'),
      owner?: string(name='Owner'),
      progress?: int32(name='Progress'),
      regionId?: string(name='RegionId'),
      resultOssPath?: string(name='ResultOssPath'),
      resultTmpDb?: string(name='ResultTmpDb'),
      resultTmpTable?: string(name='ResultTmpTable'),
      rowCount?: int32(name='RowCount'),
      rowCountOverLimit?: string(name='RowCountOverLimit'),
      sql?: string(name='Sql'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      success?: boolean(name='Success'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListQueryHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryHistoryResponseBody(name='body'),
}

async function listQueryHistory(request: ListQueryHistoryRequest): ListQueryHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryHistory', 'GET', '/webapi/query/listQueryHistory', 'json', false, 'json', request);
}

model ListRdsDBInstancesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListRdsDBInstancesResponseBody = {
  rdsInstances?: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBInstanceType?: string(name='DBInstanceType'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      lockMode?: string(name='LockMode'),
      mutriORsignle?: boolean(name='MutriORsignle'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      vSwitchId?: string(name='VSwitchId'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='RdsInstances'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListRdsDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRdsDBInstancesResponseBody(name='body'),
}

async function listRdsDBInstances(request: ListRdsDBInstancesRequest): ListRdsDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRdsDBInstances', 'GET', '/webapi/resource/rds/listDBInstances', 'json', false, 'json', request);
}

model ListSavedQueryRequest {
  keyword?: string(name='Keyword', position='Query'),
  orderCol?: string(name='OrderCol', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
}

model ListSavedQueryResponseBody = {
  data?: [ 
    {
      creator?: string(name='Creator'),
      creatorLoginName?: string(name='CreatorLoginName'),
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      owner?: string(name='Owner'),
      regionId?: string(name='RegionId'),
      sql?: string(name='Sql'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  body: ListSavedQueryResponseBody(name='body'),
}

async function listSavedQuery(request: ListSavedQueryRequest): ListSavedQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavedQuery', 'GET', '/webapi/query/listSavedQuery', 'json', false, 'json', request);
}

model ListStorageCollectorRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListStorageCollectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  storageCollectors?: [ 
    {
      datasourceType?: string(name='DatasourceType'),
      status?: string(name='Status'),
    }
  ](name='StorageCollectors'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListStorageCollectorResponse = {
  headers: map[string]string(name='headers'),
  body: ListStorageCollectorResponseBody(name='body'),
}

async function listStorageCollector(request: ListStorageCollectorRequest): ListStorageCollectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStorageCollector', 'GET', '/webapi/storagecollect/list', 'json', false, 'json', request);
}

model ListTableNamesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', minimum=-1, maximum=1000000, position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableNamePattern?: string(name='TableNamePattern', description='TableNamePattern', position='Query'),
  tableType?: string(name='TableType', description='TableType filter', position='Query'),
}

model ListTableNamesResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  tableNames?: [ string ](name='TableNames', description='TableNames'),
}

model ListTableNamesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTableNamesResponseBody(name='body'),
}

async function listTableNames(request: ListTableNamesRequest): ListTableNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableNames', 'GET', '/api/metastore/catalogs/databases/tables/names', 'json', false, 'json', request);
}

model ListTableVersionsRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Query'),
  pageSize?: int32(name='PageSize', description='max result of this query', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableName?: string(name='TableName', description='TableName', position='Query'),
}

model ListTableVersionsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  tableVersions?: [
    TableVersion
  ](name='TableVersions', description='table versions'),
}

model ListTableVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTableVersionsResponseBody(name='body'),
}

async function listTableVersions(request: ListTableVersionsRequest): ListTableVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableVersions', 'GET', '/api/metastore/catalogs/databases/tables/versions/list', 'json', false, 'json', request);
}

model ListTablesRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Query'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken', position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', minimum=-1, maximum=1000000, position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  tableNamePattern?: string(name='TableNamePattern', description='TableNamePattern', position='Query'),
  tableType?: string(name='TableType', description='TableType filter', position='Query'),
}

model ListTablesResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  nextPageToken?: string(name='NextPageToken', description='NextPageToken'),
  requestId?: string(name='RequestId', description=' RequestId'),
  success?: boolean(name='Success', description='Success'),
  tables?: [
    Table
  ](name='Tables', description='Tables'),
}

model ListTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTablesResponseBody(name='body'),
}

async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTables', 'GET', '/api/metastore/databases/tables/list', 'json', false, 'json', request);
}

model ListWorkflowInstantencesRequest {
  blueprintInstanceId?: string(name='BlueprintInstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  statusList?: string(name='StatusList', position='Query'),
}

model ListWorkflowInstantencesResponseBody = {
  flowInstances?: [ 
    {
      batchProgress?: int32(name='BatchProgress'),
      clusterId?: string(name='ClusterId'),
      duration?: long(name='Duration'),
      endTime?: string(name='EndTime'),
      flowId?: string(name='FlowId'),
      flowInstanceId?: string(name='FlowInstanceId'),
      flowName?: string(name='FlowName'),
      offsetTime?: int32(name='OffsetTime'),
      projectId?: string(name='ProjectId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      totalCuUsage?: float(name='TotalCuUsage'),
    }
  ](name='FlowInstances'),
  requestId?: string(name='RequestId'),
  success?: long(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListWorkflowInstantencesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkflowInstantencesResponseBody(name='body'),
}

async function listWorkflowInstantences(request: ListWorkflowInstantencesRequest): ListWorkflowInstantencesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkflowInstantences', 'GET', '/webapi/blueprintinstance/listWorkflowInstances', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ListWorkspacesResponseBody = {
  data?: [ 
    {
      config?: string(name='Config'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      type?: string(name='Type'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'GET', '/webapi/query/listWorkspaces', 'json', false, 'json', request);
}

model ModifyMetastoreCrawlerRequest {
  datasourceExcludePath?: string(name='DatasourceExcludePath', position='Body'),
  executeCron?: string(name='ExecuteCron', position='Body'),
  executeType?: string(name='ExecuteType', position='Body'),
  fileFormat?: string(name='FileFormat', position='Body'),
  fileFormatConfig?: string(name='FileFormatConfig', position='Body'),
  id?: string(name='Id', position='Body'),
  immediatelyRun?: boolean(name='ImmediatelyRun', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', position='Body'),
  targetUpdateStrategy?: string(name='TargetUpdateStrategy', position='Body'),
}

model ModifyMetastoreCrawlerResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyMetastoreCrawlerResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMetastoreCrawlerResponseBody(name='body'),
}

async function modifyMetastoreCrawler(request: ModifyMetastoreCrawlerRequest): ModifyMetastoreCrawlerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyMetastoreCrawler', 'POST', '/webapi/crawler/modify', 'json', true, 'form', request);
}

model ModifyWorkflowExecuteInfoRequest {
  blueprintInstanceId?: string(name='BlueprintInstanceId', position='Body'),
  executeCapacity?: string(name='ExecuteCapacity', position='Body'),
  executeParameters?: string(name='ExecuteParameters', position='Body'),
  executeType?: string(name='ExecuteType', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model ModifyWorkflowExecuteInfoResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyWorkflowExecuteInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWorkflowExecuteInfoResponseBody(name='body'),
}

async function modifyWorkflowExecuteInfo(request: ModifyWorkflowExecuteInfoRequest): ModifyWorkflowExecuteInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyWorkflowExecuteInfo', 'POST', '/webapi/blueprintinstance/modifyWorkflowExecuteInfo', 'json', true, 'form', request);
}

model PreviewMetastoreCrawlerRequest {
  datasourceExcludePath?: string(name='DatasourceExcludePath', position='Body'),
  datasourcePath?: string(name='DatasourcePath', position='Body'),
  datasourceType?: string(name='DatasourceType', position='Body'),
  fileFormat?: string(name='FileFormat', position='Body'),
  fileFormatConfig?: string(name='FileFormatConfig', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', position='Body'),
  targetDatabase?: string(name='TargetDatabase', position='Body'),
  targetTablePrefix?: string(name='TargetTablePrefix', position='Body'),
  targetUpdateStrategy?: string(name='TargetUpdateStrategy', position='Body'),
}

model PreviewMetastoreCrawlerResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PreviewMetastoreCrawlerResponse = {
  headers: map[string]string(name='headers'),
  body: PreviewMetastoreCrawlerResponseBody(name='body'),
}

async function previewMetastoreCrawler(request: PreviewMetastoreCrawlerRequest): PreviewMetastoreCrawlerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PreviewMetastoreCrawler', 'POST', '/webapi/crawler/preview', 'json', true, 'form', request);
}

model RefreshLockRequest {
  lockId?: long(name='LockId', description='LockId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RefreshLockResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model RefreshLockResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshLockResponseBody(name='body'),
}

async function refreshLock(request: RefreshLockRequest): RefreshLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshLock', 'PUT', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model RefreshUserSessionRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RefreshUserSessionResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefreshUserSessionResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshUserSessionResponseBody(name='body'),
}

async function refreshUserSession(request: RefreshUserSessionRequest): RefreshUserSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshUserSession', 'POST', '/webapi/query/userSessionHeartbeat', 'json', false, 'json', request);
}

model RenamePartitionRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  partitionInput?: PartitionInput(name='PartitionInput', position='Body'),
  partitionValues?: [ string ](name='PartitionValues', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RenamePartitionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model RenamePartitionResponse = {
  headers: map[string]string(name='headers'),
  body: RenamePartitionResponseBody(name='body'),
}

async function renamePartition(request: RenamePartitionRequest): RenamePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenamePartition', 'POST', '/api/metastore/catalogs/databases/tables/partitions/rename', 'json', false, 'json', request);
}

model RenameTableRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  isAsync?: boolean(name='IsAsync', description='IsAsync', position='Body'),
  tableInput?: TableInput(name='TableInput', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RenameTableResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  taskId?: string(name='TaskId', description='Async task Id'),
}

model RenameTableResponse = {
  headers: map[string]string(name='headers'),
  body: RenameTableResponseBody(name='body'),
}

async function renameTable(request: RenameTableRequest): RenameTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenameTable', 'PUT', '/api/metastore/catalogs/databases/tables/rename', 'json', false, 'json', request);
}

model RunBlueprintInstanceWorkflowRequest {
  blueprintInstanceId: string(name='BlueprintInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RunBlueprintInstanceWorkflowResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunBlueprintInstanceWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: RunBlueprintInstanceWorkflowResponseBody(name='body'),
}

async function runBlueprintInstanceWorkflow(request: RunBlueprintInstanceWorkflowRequest): RunBlueprintInstanceWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunBlueprintInstanceWorkflow', 'GET', '/webapi/blueprintinstance/runWorkflow', 'json', false, 'json', request);
}

model RunCrawlerWorkflowRequest {
  crawlerId?: string(name='CrawlerId', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RunCrawlerWorkflowResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunCrawlerWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: RunCrawlerWorkflowResponseBody(name='body'),
}

async function runCrawlerWorkflow(request: RunCrawlerWorkflowRequest): RunCrawlerWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCrawlerWorkflow', 'POST', '/webapi/crawler/workflow/run', 'json', true, 'form', request);
}

model RunMigrationWorkflowRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model RunMigrationWorkflowResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunMigrationWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: RunMigrationWorkflowResponseBody(name='body'),
}

async function runMigrationWorkflow(request: RunMigrationWorkflowRequest): RunMigrationWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunMigrationWorkflow', 'POST', '/webapi/migration/workflow/run', 'json', false, 'json', request);
}

model SearchRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  catalogId?: string(name='CatalogId', description='catalogid', position='Body'),
  pageNumber?: long(name='PageNumber', description='当前查询的页号', position='Body'),
  pageSize?: long(name='PageSize', description='当前查询的页大小', position='Body'),
  searchText?: string(name='SearchText', description='搜索问题', position='Body'),
  sortCriteria?: [
    SortCriterion
  ](name='SortCriteria', description='排序结构', position='Body'),
}

model SearchResponseBody = {
  code?: string(name='Code', description='响应代码'),
  databaseResult?: {
    databases?: [ 
      {
        database?: Database(name='Database', description='返回的Database'),
        highLightList?: [
          HighLight
        ](name='HighLightList', description='返回高亮文本'),
      }
    ](name='Databases', description='返回的DatabaseList'),
    totalCount?: long(name='TotalCount', description='满足匹配条件的总的Database个数'),
  }(name='DatabaseResult', description='返回的db结果'),
  message?: string(name='Message', description='响应消息'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
  tableResult?: {
    tables?: [ 
      {
        highLightList?: [
          HighLight
        ](name='HighLightList', description='返回的高亮文本'),
        table?: Table(name='Table', description='返回的Table'),
      }
    ](name='Tables', description='返回的TableList'),
    totalCount?: long(name='TotalCount', description='满足匹配条件的总的Table个数'),
  }(name='TableResult', description='返回的table result'),
}

model SearchResponse = {
  headers: map[string]string(name='headers'),
  body: SearchResponseBody(name='body'),
}

async function search(request: SearchRequest): SearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Search', 'POST', '/api/metastore/catalogs/search', 'json', false, 'json', request);
}

model StopBlueprintInstanceWorkflowRequest {
  blueprintInstanceId: string(name='BlueprintInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model StopBlueprintInstanceWorkflowResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopBlueprintInstanceWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: StopBlueprintInstanceWorkflowResponseBody(name='body'),
}

async function stopBlueprintInstanceWorkflow(request: StopBlueprintInstanceWorkflowRequest): StopBlueprintInstanceWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopBlueprintInstanceWorkflow', 'GET', '/webapi/blueprintinstance/stopWorkflow', 'json', false, 'json', request);
}

model StopCrawlerWorkflowRequest {
  crawlerId?: string(name='CrawlerId', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model StopCrawlerWorkflowResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopCrawlerWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: StopCrawlerWorkflowResponseBody(name='body'),
}

async function stopCrawlerWorkflow(request: StopCrawlerWorkflowRequest): StopCrawlerWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopCrawlerWorkflow', 'POST', '/webapi/crawler/workflow/stop', 'json', true, 'form', request);
}

model StopMigrationWorkflowRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model StopMigrationWorkflowResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopMigrationWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: StopMigrationWorkflowResponseBody(name='body'),
}

async function stopMigrationWorkflow(request: StopMigrationWorkflowRequest): StopMigrationWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopMigrationWorkflow', 'PUT', '/webapi/migration/workflow/stop', 'json', false, 'json', request);
}

model SubmitQueryRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  sql?: string(name='Sql', position='Body'),
  workspaceId?: string(name='WorkspaceId', position='Body'),
}

model SubmitQueryResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitQueryResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitQueryResponseBody(name='body'),
}

async function submitQuery(request: SubmitQueryRequest): SubmitQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitQuery', 'POST', '/webapi/query/submitQueryRequestBody', 'json', true, 'form', request);
}

model UnLockRequest {
  lockId?: long(name='LockId', description='LockId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model UnLockResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model UnLockResponse = {
  headers: map[string]string(name='headers'),
  body: UnLockResponseBody(name='body'),
}

async function unLock(request: UnLockRequest): UnLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnLock', 'DELETE', '/api/metastore/catalogs/databases/tables/locks', 'json', false, 'json', request);
}

model UpdateBlueprintInstanceRequest {
  executeCapacity?: int32(name='ExecuteCapacity', position='Body'),
  executeConcurrency?: int32(name='ExecuteConcurrency', position='Body'),
  executeParameters?: string(name='ExecuteParameters', position='Body'),
  executeType?: string(name='ExecuteType', position='Body'),
  id: string(name='Id', position='Body'),
}

model UpdateBlueprintInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model UpdateBlueprintInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBlueprintInstanceResponseBody(name='body'),
}

async function updateBlueprintInstance(request: UpdateBlueprintInstanceRequest): UpdateBlueprintInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBlueprintInstance', 'POST', '/webapi/blueprintinstance/update', 'json', true, 'form', request);
}

model UpdateDataSourceRequest {
  connectionInfo?: string(name='ConnectionInfo', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  dataSourceType?: string(name='DataSourceType', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDataSourceResponseBody(name='body'),
}

async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDataSource', 'POST', '/webapi/datasource/update', 'json', true, 'form', request);
}

model UpdateDatabaseRequest {
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseInput?: DatabaseInput(name='DatabaseInput', position='Body'),
  name?: string(name='Name', description='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model UpdateDatabaseResponseBody = {
  code?: string(name='Code', description='Response Code'),
  message?: string(name='Message', description='Response Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Request is success or not'),
}

model UpdateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDatabaseResponseBody(name='body'),
}

async function updateDatabase(request: UpdateDatabaseRequest): UpdateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatabase', 'PUT', '/api/metastore/catalogs/databases', 'json', false, 'json', request);
}

model UpdateFunctionRequest {
  catalogId?: string(name='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', position='Body'),
  functionInput?: FunctionInput(name='FunctionInput', position='Body'),
  functionName?: string(name='FunctionName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model UpdateFunctionResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model UpdateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFunctionResponseBody(name='body'),
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFunction', 'PUT', '/api/metastore/catalogs/databases/functions', 'json', false, 'json', request);
}

model UpdateMetastoreMigrationRequest {
  desc?: string(name='Desc', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  metastoreInfo?: string(name='MetastoreInfo', position='Body'),
  metastoreType?: string(name='MetastoreType', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  roleName?: string(name='RoleName', position='Body'),
  runOptions?: string(name='RunOptions', position='Body'),
}

model UpdateMetastoreMigrationResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateMetastoreMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMetastoreMigrationResponseBody(name='body'),
}

async function updateMetastoreMigration(request: UpdateMetastoreMigrationRequest): UpdateMetastoreMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMetastoreMigration', 'PUT', '/webapi/migration/update', 'json', true, 'form', request);
}

model UpdatePartitionColumnStatisticsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  updateTablePartitionColumnStatisticsRequest?: UpdateTablePartitionColumnStatisticsRequest(name='UpdateTablePartitionColumnStatisticsRequest', position='Body'),
}

model UpdatePartitionColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model UpdatePartitionColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePartitionColumnStatisticsResponseBody(name='body'),
}

async function updatePartitionColumnStatistics(request: UpdatePartitionColumnStatisticsRequest): UpdatePartitionColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePartitionColumnStatistics', 'PUT', '/api/metastore/catalogs/databases/tables/partitions/columnstatistics', 'json', false, 'json', request);
}

model UpdateTableRequest {
  allowPartitionKeyChange?: boolean(name='AllowPartitionKeyChange', description='AllowPartitionKeyChange', position='Body'),
  catalogId?: string(name='CatalogId', description='CatalogId', position='Body'),
  databaseName?: string(name='DatabaseName', description='DatabaseName', position='Body'),
  isAsync?: boolean(name='IsAsync', description='IsAsync', position='Body'),
  skipArchive?: boolean(name='SkipArchive', description='SkipArchive', position='Body'),
  tableInput?: TableInput(name='TableInput', position='Body'),
  tableName?: string(name='TableName', description='TableName', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model UpdateTableResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
  taskId?: string(name='TaskId', description='Async task Id'),
}

model UpdateTableResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTableResponseBody(name='body'),
}

async function updateTable(request: UpdateTableRequest): UpdateTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTable', 'PUT', '/api/metastore/catalogs/databases/tables', 'json', false, 'json', request);
}

model UpdateTableColumnStatisticsRequest {
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  updateTablePartitionColumnStatisticsRequest?: UpdateTablePartitionColumnStatisticsRequest(name='UpdateTablePartitionColumnStatisticsRequest', position='Body'),
}

model UpdateTableColumnStatisticsResponseBody = {
  code?: string(name='Code', description='Code'),
  message?: string(name='Message', description='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  success?: boolean(name='Success', description='Success'),
}

model UpdateTableColumnStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTableColumnStatisticsResponseBody(name='body'),
}

async function updateTableColumnStatistics(request: UpdateTableColumnStatisticsRequest): UpdateTableColumnStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTableColumnStatistics', 'PUT', '/api/metastore/catalogs/databases/tables/columnstatistics', 'json', false, 'json', request);
}

model UpdateWorkflowExecuteInfoRequest {
  blueprintInstanceId?: string(name='BlueprintInstanceId', position='Body'),
  executeCapacity?: string(name='ExecuteCapacity', position='Body'),
  executeParameters?: string(name='ExecuteParameters', position='Body'),
  executeType?: string(name='ExecuteType', position='Body'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
}

model UpdateWorkflowExecuteInfoResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model UpdateWorkflowExecuteInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkflowExecuteInfoResponseBody(name='body'),
}

async function updateWorkflowExecuteInfo(request: UpdateWorkflowExecuteInfoRequest): UpdateWorkflowExecuteInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkflowExecuteInfo', 'POST', '/webapi/blueprintinstance/updateWorkflowExecuteInfo', 'json', true, 'form', request);
}

model UpdateWorkflowScheduleStatusRequest {
  blueprintInstanceId: string(name='BlueprintInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  underSchedule: boolean(name='UnderSchedule', position='Query'),
}

model UpdateWorkflowScheduleStatusResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWorkflowScheduleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkflowScheduleStatusResponseBody(name='body'),
}

async function updateWorkflowScheduleStatus(request: UpdateWorkflowScheduleStatusRequest): UpdateWorkflowScheduleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkflowScheduleStatus', 'GET', '/webapi/blueprintinstance/updateWorkflowScheduleStatus', 'json', false, 'json', request);
}

model UpdateWorkspaceConfigRequest {
  config?: string(name='Config', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Host'),
  workspaceId: string(name='WorkspaceId', position='Query'),
}

model UpdateWorkspaceConfigResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWorkspaceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkspaceConfigResponseBody(name='body'),
}

async function updateWorkspaceConfig(request: UpdateWorkspaceConfigRequest): UpdateWorkspaceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspaceConfig', 'POST', '/webapi/query/updateWorkspaceConfig', 'json', false, 'json', request);
}

