/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Agency';
  @version = '2022-12-16';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'agency.aliyuncs.com',
    'ap-northeast-2-pop' = 'agency.aliyuncs.com',
    'ap-south-1' = 'agency.aliyuncs.com',
    'ap-southeast-2' = 'agency.aliyuncs.com',
    'ap-southeast-3' = 'agency.aliyuncs.com',
    'ap-southeast-5' = 'agency.aliyuncs.com',
    'cn-beijing' = 'agency.aliyuncs.com',
    'cn-beijing-finance-1' = 'agency.aliyuncs.com',
    'cn-beijing-finance-pop' = 'agency.aliyuncs.com',
    'cn-beijing-gov-1' = 'agency.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'agency.aliyuncs.com',
    'cn-chengdu' = 'agency.aliyuncs.com',
    'cn-edge-1' = 'agency.aliyuncs.com',
    'cn-fujian' = 'agency.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'agency.aliyuncs.com',
    'cn-hangzhou' = 'agency.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'agency.aliyuncs.com',
    'cn-hangzhou-finance' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'agency.aliyuncs.com',
    'cn-hangzhou-test-306' = 'agency.aliyuncs.com',
    'cn-hongkong' = 'agency.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'agency.aliyuncs.com',
    'cn-huhehaote' = 'agency.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'agency.aliyuncs.com',
    'cn-north-2-gov-1' = 'agency.aliyuncs.com',
    'cn-qingdao' = 'agency.aliyuncs.com',
    'cn-qingdao-nebula' = 'agency.aliyuncs.com',
    'cn-shanghai' = 'agency.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'agency.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'agency.aliyuncs.com',
    'cn-shanghai-finance-1' = 'agency.aliyuncs.com',
    'cn-shanghai-inner' = 'agency.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'agency.aliyuncs.com',
    'cn-shenzhen' = 'agency.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'agency.aliyuncs.com',
    'cn-shenzhen-inner' = 'agency.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'agency.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'agency.aliyuncs.com',
    'cn-wuhan' = 'agency.aliyuncs.com',
    'cn-wulanchabu' = 'agency.aliyuncs.com',
    'cn-yushanfang' = 'agency.aliyuncs.com',
    'cn-zhangbei' = 'agency.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'agency.aliyuncs.com',
    'cn-zhangjiakou' = 'agency.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'agency.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'agency.aliyuncs.com',
    'eu-central-1' = 'agency.aliyuncs.com',
    'eu-west-1' = 'agency.aliyuncs.com',
    'eu-west-1-oxs' = 'agency.aliyuncs.com',
    'me-east-1' = 'agency.aliyuncs.com',
    'rus-west-1-pop' = 'agency.aliyuncs.com',
    'us-east-1' = 'agency.aliyuncs.com',
    'us-west-1' = 'agency.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CancelSubscriptionBillRequest {
  subscribeType: string(name='SubscribeType', description='The type of the bill to which you want to cancel the subscription. Valid values: PartnerBillingItemDetailForBillingPeriod, PartnerBillingItemDetailMonthly, PartnerInstanceDetailForBillingPeriod, and PartnerInstanceDetailMonthly.', example='PartnerBillingItemDetailForBillingPeriod', position='Query'),
}

model CancelSubscriptionBillResponseBody = {
  code?: string(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: boolean(name='Data', description='The data that is returned.', example='true'),
  message?: string(name='Message', description='The message that is returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210e876f16704666020714468dab35'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CancelSubscriptionBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSubscriptionBillResponseBody(name='body'),
}

/**
  * Make sure that you are a distributor of the Alibaba Cloud international ecosystem.
  * You can call this operation to cancel the subscription to only one type of bill at a time.
  * After the subscription to a type of bill is canceled, bills of this type are no longer pushed to the specified Object Storage Service (OSS) bucket.
  * **This topic is published only on the international site (alibabacloud.com).
  *
 */
async function cancelSubscriptionBill(request: CancelSubscriptionBillRequest): CancelSubscriptionBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSubscriptionBill', 'POST', '/', 'json', false, 'json', request);
}

model CreateCouponTemplateRequest {
  acceptLanguage: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  applicableProducts: string(name='ApplicableProducts', example='All Products', position='Query'),
  costBearer: string(name='CostBearer', example='Partner', position='Query'),
  couponDescription?: string(name='CouponDescription', maxLength=100111, position='Query'),
  expireddate?: string(name='Expireddate', example='2024-08-26', position='Query'),
  limitPerPerson: string(name='LimitPerPerson', example='Unlimited', position='Query'),
  productType?: [ string ](name='ProductType', shrink='json', position='Query'),
  purchaseType?: string(name='PurchaseType', example='ALL', position='Query'),
  reasonForApplication: string(name='ReasonForApplication', maxLength=10011, position='Query'),
  templateName: string(name='TemplateName', maxLength=3011, position='Query'),
  vailddate?: string(name='Vailddate', example='2024-08-26', position='Query'),
  vaildperioddays?: string(name='Vaildperioddays', example='1', position='Query'),
  validUntil: string(name='ValidUntil', example='Validity Duration', position='Query'),
  value: string(name='Value', example='1', position='Query'),
}

model CreateCouponTemplateResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    applicableProducts?: string(name='ApplicableProducts', example='Custom'),
    costBearer?: string(name='CostBearer', example='Partner'),
    couponTemplateID?: long(name='CouponTemplateID', example='111111'),
    createTime?: string(name='CreateTime', example='2024-04-02 16:15:31'),
    expireddate?: string(name='Expireddate', example='2024-01-01'),
    productType?: [ string ](name='ProductType'),
    status?: string(name='Status', example='APPROVED'),
    templateName?: string(name='TemplateName'),
    vailddate?: string(name='Vailddate', example='2024-01-01'),
    vaildperioddays?: string(name='Vaildperioddays', example='1'),
    validUntil?: string(name='ValidUntil', example='Validity Duration'),
    value?: string(name='Value', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='2103a30617045934095083027d88c5'),
  success?: boolean(name='Success', example='true'),
}

model CreateCouponTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCouponTemplateResponseBody(name='body'),
}

async function createCouponTemplate(request: CreateCouponTemplateRequest): CreateCouponTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCouponTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomerRequest {
  customerName: string(name='CustomerName', description='Customer\\"s name.', example='DoorBell Marketing', position='Query'),
  customerSource: string(name='CustomerSource', description='The source/channel that allow client to connected with us. Please enumerate with Customer Source.', example='website', position='Query'),
  customerSubTrade?: string(name='CustomerSubTrade', description='The sub-industry that Customer\\"s business belongs to. Please enumerate with Customer Trade.', example='0101', position='Query'),
  customerTrade: string(name='CustomerTrade', description='The industry that Customer\\"s business belongs to. Please enumerate with Customer Trade.', example='01', position='Query'),
  nation: string(name='Nation', description='The region that Customer choose to launch the Cloud Service. Please use ListCountries to confirm the valid region list for current UID.', example='AR', position='Query'),
}

model CreateCustomerResponseBody = {
  code?: string(name='Code', description='Code indicating whether the call was successful.', example='200'),
  data?: boolean(name='Data', description='Data indicating whether a customer was successfully created. If it\\"s "true", the Message contains CID.', example='true'),
  message?: string(name='Message', description='Massage indicating whether the call was successful.', example='12345'),
  requestId?: string(name='RequestId', description='Request ID, Alibaba Cloud will track errors with this.', example='A9B725C7-3DBD-576B-AC91-F6F22AB99A77'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call it self was successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model CreateCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomerResponseBody(name='body'),
}

async function createCustomer(request: CreateCustomerRequest): CreateCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomer', 'POST', '/', 'json', false, 'json', request);
}

model CustomerQuotaRecordListRequest {
  endDate: string(name='EndDate', description='End Date Format: yyyy-MM-dd', example='2023-09-24', position='Query'),
  endUserPk: long(name='EndUserPk', description='Customer UID', example='5113766248601929', position='Query'),
  language?: string(name='Language', description='Multilingual Parameters, the default language is English.</br>
en: English</br>
zh: Chinese</br>
ja: Japanese </br>', example='en', position='Query'),
  operationType: string(name='OperationType', description='Operation Type Enum</br>
all All types</br>
quota_create Create quota</br>
quota_amount_adjust Adjust the amount of quota</br>', example='all', position='Query'),
  pageNo: int32(name='PageNo', description='Pagination, current page number, starting from 1.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='Pagination, record number on each page. Maximum 100.', example='10', position='Query'),
  startDate: string(name='StartDate', description='Start Date Format: yyyy-MM-dd', example='2023-01-02', position='Query'),
}

model CustomerQuotaRecordListResponseBody = {
  code?: string(name='Code', description='Status code of returning result, 200 means success.', example='200'),
  data?: [ 
    {
      operationSubmitType?: string(name='OperationSubmitType', description='The way to submit the quota adjustment operation. API/ACPN', example='ACPN'),
      operationTime?: string(name='OperationTime', description='The time of submit the quota adjustment operation.', example='2023-12-15 10:34:36 UTC+8'),
      operationTypeCode?: string(name='OperationTypeCode', description='Operation Type Enum</br>
all All types</br>
quota_create Create quota</br>
quota_amount_adjust Adjust the amount of quota</br>', example='quota_amount_adjust'),
      operationTypeDesc?: string(name='OperationTypeDesc', description='The description of submitted quota adjustment operation.', example='Quota Adjustment'),
      operationUid?: string(name='OperationUid', description='The UID of operator(Partner\\"s UID).', example='5113766248601929'),
      updateAfterAmount?: string(name='UpdateAfterAmount', description='Updated quota amount', example='121.00'),
      updateAmount?: string(name='UpdateAmount', description='The difference amount between updated quota and original quota.', example='-100.00'),
      updateBeforeAmount?: string(name='UpdateBeforeAmount', description='Original quota amount', example='221.00'),
    }
  ](name='Data', description='Listed data of returning result'),
  msg?: string(name='Msg', description='Description of returning data', example='SUCCESS'),
  pageNo?: int32(name='PageNo', description='Current page number', example='1'),
  pageSize?: int32(name='PageSize', description='Record number on each page', example='10'),
  requestId?: string(name='RequestId', description='ID of request', example='2103a0ae16849855284594613d874e'),
  total?: int32(name='Total', description='Total volume', example='10'),
}

model CustomerQuotaRecordListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CustomerQuotaRecordListResponseBody(name='body'),
}

async function customerQuotaRecordList(request: CustomerQuotaRecordListRequest): CustomerQuotaRecordListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CustomerQuotaRecordList', 'GET', '/', 'json', false, 'json', request);
}

model DeductOutstandingBalanceRequest {
  deductAmount: string(name='DeductAmount', description='The Deducted Credit to be offset.', example='300', position='Query'),
  uid: long(name='Uid', description='Account UID of Distribution Customer.', example='1133166938931507', position='Query'),
}

model DeductOutstandingBalanceResponseBody = {
  code?: string(name='Code', description='Result Code. Value Range:
- 200 OK
- 1109 System Error', example='200'),
  message?: string(name='Message', description='Same as Code Parameter Value.', example='200'),
  requestId?: string(name='RequestId', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model DeductOutstandingBalanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeductOutstandingBalanceResponseBody(name='body'),
}

/**
  * Note that sometimes you may find that the customer\\"s Used Credit is negative. This indicates that there is no need to restore the Used Credit, and its ready for customer\\"s usage. This phenomenon occurs because a refund is generated while the customer\\"s credit is full, thereby triggered additional increasing on the customer\\"s credit.
  * For example, if the customer\\"s maximum Available Credit is 1000 with no usage, and a refund of 300 occurs, the Used Credit will become -300.
  *
 */
async function deductOutstandingBalance(request: DeductOutstandingBalanceRequest): DeductOutstandingBalanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeductOutstandingBalance', 'POST', '/', 'json', false, 'json', request);
}

model EditEndUserStatusRequest {
  creditStatus?: string(name='CreditStatus', description='Shutdown Status</br>

- postPayFreeze, the account have been blocked</br>

- postPayThaw, the account have been unlocked</br>', example='postPayFreeze', position='Query'),
  uid?: long(name='Uid', description='UID', example='1792155717328010', position='Query'),
}

model EditEndUserStatusResponseBody = {
  code?: string(name='Code', description='Status Code</br>', example='200'),
  data?: string(name='Data', description='Success or not</br>', example='true'),
  message?: string(name='Message', description='Message</br>', example='success'),
  msg?: string(name='Msg', description='Message</br>', example='success'),
  requestId?: string(name='RequestId', description='Request ID</br>', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model EditEndUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditEndUserStatusResponseBody(name='body'),
}

/**
  * The caller should be the Partner as identified in the Alibaba Cloud distribution model. </br>
  * **This content is only published on the international site. **
  *
 */
async function editEndUserStatus(request: EditEndUserStatusRequest): EditEndUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditEndUserStatus', 'GET', '/', 'json', false, 'json', request);
}

model EditNewBuyStatusRequest {
  newBuyStatus?: string(name='NewBuyStatus', description='New Purchase Status</br>

- cancelBan: Cancel the restriction for New Purchase request</br>

- ban: ban the New Purchase request</br>', example='cancelBan', position='Query'),
  uid?: long(name='Uid', description='Customer UID', example='1133166938931507', position='Query'),
}

model EditNewBuyStatusResponseBody = {
  code?: string(name='Code', description='Status Code</br>', example='200'),
  data?: string(name='Data', description='Success or not</br>', example='true'),
  message?: string(name='Message', description='Message</br>', example='success'),
  msg?: string(name='Msg', description='Message</br>', example='success'),
  requestId?: string(name='RequestId', description='Request ID</br>', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model EditNewBuyStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditNewBuyStatusResponseBody(name='body'),
}

/**
  * The caller should be the Partner as identified in the Alibaba Cloud distribution model. </br>
  * **This content is only published on the international site. **
  *
 */
async function editNewBuyStatus(request: EditNewBuyStatusRequest): EditNewBuyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditNewBuyStatus', 'POST', '/', 'json', false, 'json', request);
}

model EditZeroCreditShutdownRequest {
  shutdownPolicy?: string(name='ShutdownPolicy', description='UID', example='Shutdown Policy</br>

- immediatelyStop, The instances of the specified End User\\"s account will be shutdown immediately once EU triggered the Shutdown Policy.</br>

- delayStop, The instances of the specified End User\\"s account will be shutdown later, even EU have triggered the Shutdown Policy.</br>

- noStop, The instances of the specified End User\\"s account will not be shutdown, after EU have triggered the Shutdown Policy.</br>', position='Query'),
  uid?: long(name='Uid', description='No Change History', example='1263644979775567', position='Query'),
}

model EditZeroCreditShutdownResponseBody = {
  code?: string(name='Code', description='Success or not</br>', example='200'),
  data?: string(name='Data', description='Request ID</br>', example='true'),
  message?: string(name='Message', description='Message</br>', example='Message</br>'),
  msg?: string(name='Msg', description='NO_STOP', example='SUCCESS'),
  requestId?: string(name='RequestId', description='success', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model EditZeroCreditShutdownResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditZeroCreditShutdownResponseBody(name='body'),
}

/**
  * The caller should be the Partner as identified in the Alibaba Cloud distribution model. </br>
  * **This content is only published on the international site. **
  *
 */
async function editZeroCreditShutdown(request: EditZeroCreditShutdownRequest): EditZeroCreditShutdownResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditZeroCreditShutdown', 'POST', '/', 'json', false, 'json', request);
}

model ExportCustomerQuotaRecordRequest {
  endDate: string(name='EndDate', description='End Date Format:  yyyy-MM-dd', example='2023-12-24', position='Query'),
  endUserPk: long(name='EndUserPk', description='Customer UID', example='5113766248601929', position='Query'),
  language?: string(name='Language', description='Multilingual Parameters, the default language is English.</br>
en: English</br>
zh: Chinese</br>
ja: Japanese </br>', example='en', position='Query'),
  operationType: string(name='OperationType', description='Operation Type Enum</br>
all All types</br>
quota_create Create quota</br>
quota_amount_adjust Adjust the amount of quota</br>', example='all', position='Query'),
  startDate: string(name='StartDate', description='Start Date Format:  yyyy-MM-dd', example='2023-11-10', position='Query'),
}

model ExportCustomerQuotaRecordResponseBody = {
  code?: string(name='Code', description='Code', example='200'),
  data?: {
    cost?: int32(name='Cost', description='Estimated duration, in minutes.', example='1'),
    id?: long(name='Id', description='ID of Export task', example='1231'),
  }(name='Data', description='Data'),
  msg?: string(name='Msg', description='Description', example='SUCCESS'),
  requestId?: string(name='RequestId', description='ID of the Request', example='210bc4b416874189683843905d9f9a'),
}

model ExportCustomerQuotaRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCustomerQuotaRecordResponseBody(name='body'),
}

/**
  * Caller must be a Partner from International Site, either Distribution or Reseller will do.
  *
 */
async function exportCustomerQuotaRecord(request: ExportCustomerQuotaRecordRequest): ExportCustomerQuotaRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCustomerQuotaRecord', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountInfoRequest {
  currentPage: int32(name='CurrentPage', description='Message', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='Success', example='10', minimum=1, maximum=20, position='Query'),
  uid?: long(name='Uid', description='10 (Value <= 20)', example='1215848086704806', position='Query'),
  userType?: string(name='UserType', description='Result Code - Error Code. Value Range:
- 200 OK
- 1109 System Error
- 3029: Invalid UID
- 3062: UID and UserType are both empty.
- 3063: UserType value out of range.', example='1', position='Query'),
}

model GetAccountInfoResponseBody = {
  accountInfoList?: {
    accountInfo?: [ 
    {
      accountNickname?: string(name='AccountNickname', description='The E-mail of Distribution Customer.', example='Description of Distribution Customer.'),
      aliyunId?: string(name='AliyunId', description='Account CID of Distribution Customer.', example='1234@qq.com'),
      associationSuccessTime?: string(name='AssociationSuccessTime', description='XXX Technology LTD.', example='2021-01-01'),
      cid?: long(name='Cid', description='customer\\"s CID', example='61479572'),
      customerBd?: string(name='CustomerBd', description='customer manager', example='abc'),
      delayAmount?: string(name='DelayAmount', description='The account have Shutdown-delay Privilege, After Shutdown-delay Credit is ran out, Alibaba Cloud will take over resources and keep the instance for 15 days. In addition, the instance will be released if Sub Account failed to pay the bill within these 15 days.', example='600'),
      delayStatus?: string(name='DelayStatus', description='Partner\\"s Shutdown Policy Management for Sub Account.
1: delayStop. The account have Shutdown-delay Privilege, After Shutdown-delay Credit is ran out, Alibaba Cloud will take over resources and keep the instance for 15 days. In addition, the instance will be released if Sub Account failed to pay the bill within these 15 days.
2: noStop. Partner will manually manage Shutdown Status for Sub Account. Meanwhile, System would not manage the resource\\"s life-circle of Sub Account.
3: immediatelyStop. Once valid quota of Sub Account falls below 0 and be identified as defaulting account, it will trigger the instance shutdown immediately.', example='noStop'),
      email?: string(name='Email', description='Sub Account', example='1234@qq.com'),
      mobile?: string(name='Mobile', description='Account UID of Distribution Customer.', example='13641588680'),
      newBuyStatus?: string(name='NewBuyStatus', description='Purchase Forbidden：Ban the new purchase action
normal：Normal--End Use can issue Cloud Resource order immediately.', example='Normal'),
      remark?: string(name='Remark', description='Valid mobile number of Distribution Customer.', example='Alibaba Cloud Login name of Distribution Customer.'),
      subAccountType?: int32(name='SubAccountType', description='The name of Sub Account:
1.	Use the official name of Company, if Sub Account is an enterprise.
2.	Use the official name of Partner, if Sub Account is a T2 reseller.', example='1'),
      uid?: long(name='Uid', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='1415740779475837'),
    }
  ](name='AccountInfo')
  }(name='AccountInfoList', description='Account Type:
- 1 Agency\\"s End User
- 2 Reseller\\"s End User
- 3 Enterprise
- 4 T2 Agency Partner
- 5 T2 Reseller Partner
- 6 T2 Agency+Reseller Partner'),
  code?: string(name='Code', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='200'),
  message?: string(name='Message', description='message', example='Pagination Information'),
  pageInfo?: {
    page?: int32(name='Page', description='Account Information', example='1'),
    pageSize?: int32(name='PageSize', description='Pagination, current page.', example='10'),
    total?: int32(name='Total', description='List of Account Information', example='12'),
  }(name='PageInfo', description='Pagination, page volume in total.'),
  requestId?: string(name='RequestId', description='Request id, a unique identifier generated by Alibaba cloud for the request.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Pagination, record number on each page.', example='true'),
}

model GetAccountInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountInfoResponseBody(name='body'),
}

async function getAccountInfo(request: GetAccountInfoRequest): GetAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetCoupondeductProductCodeRequest {
  acceptLanguage: string(name='AcceptLanguage', example='zh-CN', position='Query'),
}

model GetCoupondeductProductCodeResponseBody = {
  code?: string(name='Code', example='code'),
  data?: [ 
    {
      productType?: any(name='ProductType', example='code1'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='210e876f16704666020714468dab35'),
  success?: boolean(name='Success', example='true'),
}

model GetCoupondeductProductCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCoupondeductProductCodeResponseBody(name='body'),
}

async function getCoupondeductProductCode(request: GetCoupondeductProductCodeRequest): GetCoupondeductProductCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCoupondeductProductCode', 'GET', '/', 'json', false, 'json', request);
}

model GetCreditInfoRequest {
  uid: long(name='Uid', description='Sub Account UID', example='1792155717328010', position='Query'),
}

model GetCreditInfoResponseBody = {
  code?: string(name='Code', description='Result Code:
- 200 OK
- 1109 System Error', example='200'),
  data?: {
    accountStatus?: string(name='AccountStatus', description='The Credit Control status, Value Range:</br>
1. normal - Sub Account status is running as usual.
2. arrearsNotShutdown - Sub Account status is running as usual, but have outstanding bill(s).
3. shutdown -  Sub Account status is down.', example='normal'),
    alarmThreshold?: string(name='AlarmThreshold', description='Percentage value, when the available credit limit is lower than this credit limit percentage, a notification E-mail will be sent to the main account.', example='20'),
    availableCredit?: string(name='AvailableCredit', description='The Credit available to consume.', example='800'),
    consumedUndeductedValue?: string(name='ConsumedUndeductedValue', description='Obtain total unpaid amount on demo bill before simulated deduction.', example='0.000000'),
    creditLine?: string(name='CreditLine', description='The Credit Line of Sub Account', example='1000'),
    outstandingBalance?: string(name='OutstandingBalance', description='The Credit have been consumed by Sub Account, and haven\\"t be paid.', example='200'),
    zeroCreditShutdownPolicy?: string(name='ZeroCreditShutdownPolicy', description='The systematic controlling policy for resource management, specifically when the available Credit of Sub Account falls to 0 or less.</br>

- 1: delayStop. The account have Shutdown-delay Privilege,  After Shutdown-delay Credit is ran out, Alibaba Cloud will take over resources and keep the instance for 15 days. In addition, the instance will be released if Sub Account failed to pay the bill within these 15 days.</br>
- 2: noStop. Partner will manually manage Shutdown Status for Sub Account. Meanwhile, System would not manage the resource\\"s life-circle of Sub Account.</br>
- 3: immediatelyStop. Once valid quota of Sub Account falls below 0 and be identified as defaulting account, it will trigger the instance shutdown immediately.</br>', example='delayStop'),
    newBuyStatus?: string(name='newBuyStatus', description='Manage order operation.
- ban：Ban the new purchase action.
- normal：The account could raise new purchase order as usual.', example='ban'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='Message Information', example='success'),
  requestId?: string(name='RequestId', description='Request ID, Alibaba Cloud will track errors with this.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model GetCreditInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreditInfoResponseBody(name='body'),
}

async function getCreditInfo(request: GetCreditInfoRequest): GetCreditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreditInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetCustomerOrdersRequest {
  customerAccount?: string(name='CustomerAccount', example='test_123', position='Query'),
  customerManager?: string(name='CustomerManager', example='myBd', position='Query'),
  customerUid?: long(name='CustomerUid', example='123456', position='Query'),
  endDate: string(name='EndDate', example='2024-08-23 00:00:00', position='Query'),
  orderId?: long(name='OrderId', example='209335720330622', position='Query'),
  orderSource?: int32(name='OrderSource', example='0', position='Query'),
  orderStatus?: int32(name='OrderStatus', example='3', position='Query'),
  orderType?: string(name='OrderType', example='RENEW', position='Query'),
  pageNo: int32(name='PageNo', example='1', minimum=1, maximum=500, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  productType?: string(name='ProductType', example='vm_intl', position='Query'),
  startDate: string(name='StartDate', example='2024-08-13 00:00:00', position='Query'),
  timeType: int32(name='TimeType', example='2', position='Query'),
}

model GetCustomerOrdersResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      customerAccount?: string(name='CustomerAccount', example='test_123'),
      customerManager?: string(name='CustomerManager', example='myBd'),
      customerNo?: long(name='CustomerNo', example='123456'),
      orderId?: long(name='OrderId', example='236414227150922'),
      orderSource?: string(name='OrderSource', example='0'),
      orderStatus?: int32(name='OrderStatus', example='3'),
      orderType?: string(name='OrderType', example='BUY'),
      originalCost?: double(name='OriginalCost', example='3.92'),
      paymentMethod?: string(name='PaymentMethod', example='3:32'),
      paymentTime?: string(name='PaymentTime', example='2024-08-13 13:02:02'),
      pretaxCost?: double(name='PretaxCost', example='3.92'),
      productDetail?: string(name='ProductDetail', example='oss'),
      productType?: string(name='ProductType', example='snapshot'),
      timeToOrder?: string(name='TimeToOrder', example='2024-08-13 13:02:02'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  msg?: string(name='Msg'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='23309219-4A34-589D-A3E0-9B2A3BFFD24F'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model GetCustomerOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomerOrdersResponseBody(name='body'),
}

async function getCustomerOrders(request: GetCustomerOrdersRequest): GetCustomerOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerOrders', 'GET', '/', 'json', false, 'json', request);
}

model GetDailyBillRequest {
  billOwner: string(name='BillOwner', description='Bill Owner type. Value Range:</br>
1: Master account</br>
2: Sub account</br>', example='1', position='Query'),
  billType: string(name='BillType', description='BillType. Value Range:</br>

- DailyOrder(Deprecated)
- DailyBill (Deprecated)
- DailyInstanceBill (Deprecated)
- DailyInstanceBillV2', example='DailyInstanceBillV2', position='Query'),
  date: string(name='Date', description='Billing date. Format YYYY-MM-DD', example='2022-11-24', position='Query'),
}

model GetDailyBillResponseBody = {
  code?: string(name='Code', description='Result Code:
* 200 OK
* 1109 System error
* 3050 Bill Type can only be DailyOrder, DailyBill or DailyInstanceBill.
* 3049 Incorrect format of Spending Time.
* 3048 Bill Owner can only be 1 or 2.', example='200'),
  data?: {
    billLinkCSV?: string(name='BillLinkCSV', description='The link to download CSV file, please use HTTP Protocol.', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billLinkXLSX?: string(name='BillLinkXLSX', description='The link to download XLSX file, please use HTTP Protocol.', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billOwner?: string(name='BillOwner', description='Same as inserted parameter BillOwner.', example='1'),
    billType?: string(name='BillType', description='Same as inserted parameter BillType.', example='DailyInstanceBillV2'),
    spendingTime?: string(name='SpendingTime', description='Spending Time, refer to the exact time of costuming.', example='20221201'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Same as Code parameters.', example='200'),
  requestId?: string(name='RequestId', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model GetDailyBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDailyBillResponseBody(name='body'),
}

async function getDailyBill(request: GetDailyBillRequest): GetDailyBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDailyBill', 'POST', '/', 'json', false, 'json', request);
}

model GetInviteStatusRequest {
  inviteStatusList: [ 
    {
      inviteId?: long(name='InviteId', description='Invitation ID, From interface InviteSubAccount', example='123'),
    }
  ](name='InviteStatusList', description='inviteId list</br>
`Sub-levels <= 5`', position='Query'),
}

model GetInviteStatusResponseBody = {
  code?: string(name='Code', description='Status Code. Error Code:

- 3057 InviteId is empty', example='200'),
  data?: {
    inviteStatus?: [ 
    {
      code?: string(name='Code', description='Result Code. Value Range:
*   200 OK
*   1109 system error', example='200'),
      inviteStatusList?: {
        associationSuccessTime?: string(name='AssociationSuccessTime', description='The time that Distribution Customer successfully associated with Distributor.</br>
This value will be empty if there is no existing association.', example='2018-02-13'),
        cid?: long(name='Cid', description='Distribution Customer\\"s CID', example='1234567890123'),
        gmtCreate?: string(name='GmtCreate', description='The time of email been sent out.', example='2018-02-12'),
        parentId?: string(name='ParentId', description='The parent organization ID.', example='1093238769140523'),
        status?: int32(name='Status', description='Invitation Status:
* 0 No visit on registration URL
* 1 Successful Registration
* 2 Unsuccessful Registration
* 3 Registration URL have been visited, but no submitted sheet/ticket.', example='2'),
        subAccountType?: string(name='SubAccountType', description='Account Type:
- 1 Agency\\"s End User
- 2 Reseller\\"s End User
- 5 T2 Reseller Partner', example='1'),
        uid?: long(name='Uid', description='Distribution Customer\\"s UID', example='1234567890123'),
      }(name='InviteStatusList', description='List of Invitation Status result'),
      message?: string(name='Message', description='The message returned.', example='success'),
      success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
    }
  ](name='InviteStatus')
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Request ID, Alibaba Cloud will track errors with this.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model GetInviteStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInviteStatusResponseBody(name='body'),
}

async function getInviteStatus(request: GetInviteStatusRequest): GetInviteStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInviteStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetMonthlyBillRequest {
  billOwner: string(name='BillOwner', description='Bill Owner type. Value Range:</br>
1: Master account</br>
2: Sub account</br>', example='1', position='Query'),
  billType: string(name='BillType', description='Value Range:

- MonthlyInvoice
- MonthRefundInvoice
- MonthlySummary
- MonthlyInstanceAddAdjustBill 
- MonthlyInstanceRefundBill
- MonthlyAddAdjustInvoce
- MonthlyRefundAdjustInvoce 
- MonthlyInstanceConsumeV2 
- MarginReportV2', example='MonthlyInvoice', position='Query'),
  month: string(name='Month', description='Billing Month, Format is YYYY-MM', example='2022-11', position='Query'),
}

model GetMonthlyBillResponseBody = {
  code?: string(name='Code', description='Result Code:
* 200 OK
* 1109 System error
* 3030 Sub Account Nickname exceeds maximum length, maximum length 150 bytes.
* 3031 Remark exceeds maximum length, maximum length 3000 bytes.', example='200'),
  data?: {
    billLinkCSV?: string(name='BillLinkCSV', description='The link to download CSV file, please use HTTP Protocol.', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billLinkXLSX?: string(name='BillLinkXLSX', description='The link to download XLSX file, please use HTTP Protocol.', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billOwner?: string(name='BillOwner', description='Same as inserted parameter BillOwner.', example='1'),
    billType?: string(name='BillType', description='Same as inserted parameter BillType.', example='MonthlyInvoice'),
    invoiceLink?: string(name='InvoiceLink', description='The URL to download invoice.', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    refundInvoiceFlag?: boolean(name='RefundInvoiceFlag', description='It states the existence of refund invoice. </br>
Candidate Values: True/False', example='True'),
    refundInvoiceLink?: string(name='RefundInvoiceLink', description='The URL to download refund invoice.', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    spendingTime?: string(name='SpendingTime', description='Spending Time, refer to the exact time of costuming.', example='20221201'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Same as Code parameters.', example='200'),
  requestId?: string(name='RequestId', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='210e876f16704666020714468dab35'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model GetMonthlyBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMonthlyBillResponseBody(name='body'),
}

async function getMonthlyBill(request: GetMonthlyBillRequest): GetMonthlyBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMonthlyBill', 'POST', '/', 'json', false, 'json', request);
}

model GetUnassociatedCustomerRequest {
  currentPage: int32(name='CurrentPage', description='Pagination, current page.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='Pagination, record number on each page.', example='10', position='Query'),
}

model GetUnassociatedCustomerResponseBody = {
  code?: string(name='Code', description='Error Code, Candidate Value：
* 200: OK
* 1109: System error', example='200'),
  inviteInfoList?: {
    inviteInfo?: [ 
    {
      accountNickname?: string(name='AccountNickname', description='The name of Customer who are to be invited.', example='My Client'),
      email?: string(name='Email', description='The Email of Customer who are to be invited.', example='12345@qq.com'),
      gmtCreate?: string(name='GmtCreate', description='The time of email been sent out.', example='2023-05-10'),
      inviteId?: long(name='InviteId', description='Invitation ID', example='190'),
      status?: int32(name='Status', description='Invitation Status:
* 0 No visit on registration URL
* 1 Successful Registration
* 2 Unsuccessful Registration
* 3 Registration URL have been visited, but no submitted sheet/ticket.', example='1'),
    }
  ](name='InviteInfo')
  }(name='InviteInfoList', description='List of Invitation Information'),
  message?: string(name='Message', description='Message information', example='success'),
  pageInfo?: {
    page?: int32(name='Page', description='Pagination, current page.', example='1'),
    pageSize?: int32(name='PageSize', description='Pagination, record number on each page.', example='10'),
    total?: int32(name='Total', description='Pagination, page volume in total.', example='12'),
  }(name='PageInfo', description='Pagination Information'),
  requestId?: string(name='RequestId', description='Request ID, Alibaba Cloud will track errors with this.', example='23309219-4A34-589D-A3E0-9B2A3BFFD24F'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model GetUnassociatedCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUnassociatedCustomerResponseBody(name='body'),
}

async function getUnassociatedCustomer(request: GetUnassociatedCustomerRequest): GetUnassociatedCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUnassociatedCustomer', 'GET', '/', 'json', false, 'json', request);
}

model InviteSubAccountRequest {
  accountInfoList: [ 
    {
      accountNickname: string(name='AccountNickname', description='The name of Sub Account:</br>
1. Use the official name of Company, if Sub Account is an enterprise.</br>
2. Use the official name of Partner, if Sub Account is a T2 reseller.</br>', example='XXX Technology LTD.'),
      creditLine: string(name='CreditLine', description='The total budget Credit of Sub Account that distributed by Partner.', example='100'),
      customerBd?: string(name='CustomerBd'),
      customerId: string(name='CustomerId', description='Customer ID, Returning ID from CreateCustomer API.', example='1234567'),
      emailAddress: string(name='EmailAddress', description='The email address of End User,  which will receive the invitation email.', example='12345@163.com'),
      newBuyStatus: string(name='NewBuyStatus', description='Initial Order Status</br>
1. ban：Ban the new purchase action--After End User finish registration and authorization, they can\\"t issue Cloud Resource order immediately. Partner should manually update the "Order Control" settings as "Normal" to enable new order.</br>
2. normal：Normal--After End User finished registration and authorization, they can issue Cloud Resource order immediately.</br>', example='ban'),
      remark?: string(name='Remark', description='Description of Sub Account.', example='The invitation to develop XX as a Sub Account'),
      subAccountType: string(name='SubAccountType', description='The type of Sub Account</br>

1 Agency\\"s End User</br>
2 Reseller\\"s End user</br>
5 Reseller\\"s T2 Partner</br>', example='1'),
      zeroCreditShutdownPolicy: string(name='ZeroCreditShutdownPolicy', description='Partner\\"s Shutdown Policy Management for Sub Account.</br>
1: delayStop. The account have Shutdown-delay Privilege,  After Shutdown-delay Credit is ran out, Alibaba Cloud will take over resources and keep the instance for 15 days. In addition, the instance will be released if Sub Account failed to pay the bill within these 15 days.</br>
2: noStop. Partner will manually manage Shutdown Status for Sub Account. Meanwhile, System would not manage the resource\\"s life-circle of Sub Account.</br>
3: immediatelyStop. Once valid quota of Sub Account falls below 0 and be identified as defaulting account, it will trigger the instance shutdown immediately.</br>', example='1'),
    }
  ](name='AccountInfoList', description='List of invited account information,  less than 5 accounts at a time.</br>
`Sub-levels <= 5`', position='Query'),
}

model InviteSubAccountResponseBody = {
  code?: string(name='Code', description='Error Code: </br>
• 200 OK</br>
• 1109 System Error</br>', example='200'),
  message?: string(name='Message', description='Message</br>', example='success'),
  requestId?: string(name='RequestId', description='Request ID, Alibaba Cloud will track errors with this ID.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  results?: {
    result?: [ 
    {
      code?: string(name='Code', description='Error Code, 200 OK', example='200'),
      message?: string(name='Message', description='Message, Notes of Code', example='success'),
      result?: {
        days?: int32(name='Days', description='Valid days of registration URL, count on daily basis.', example='15'),
        inviteId?: long(name='InviteId', description='Invitation ID, The invitation status tracking code.', example='12345'),
        regUrl?: string(name='RegUrl', description='URL for Partner Customer Registration.', example='http://agency-intl.console.aliyun.com/customer/register?intl=true&fxinfo=-4uT%2FMWHnnUdvr5GXVd1AYK8luTnGgH3M7Y3lSCd5M1fxRwAkViTWtDJDpckh0HL'),
      }(name='Result', description='Returning Message of Invitation Results'),
      success?: boolean(name='Success', description='Always true.', example='true'),
    }
  ](name='Result')
  }(name='Results', description='List of invitation sending results'),
  success?: boolean(name='Success', description='Candidate Values: True/False, this value states if the current API calling action is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model InviteSubAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InviteSubAccountResponseBody(name='body'),
}

/**
  * The current API request rate for the Cloud Product has not been disclosed.
  *
 */
async function inviteSubAccount(request: InviteSubAccountRequest): InviteSubAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteSubAccount', 'POST', '/', 'json', false, 'json', request);
}

model IssueCouponForCustomerRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  couponTemplateId: long(name='CouponTemplateId', example='5075915', position='Query'),
  uidlist: string(name='Uidlist', example='111,2222', position='Query'),
}

model IssueCouponForCustomerResponseBody = {
  code?: string(name='Code', example='code'),
  message?: string(name='Message', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
  data?: {
    couponTemplateId?: long(name='CouponTemplateId', example='5075915'),
    createTime?: string(name='CreateTime', example='2024-03-05 18:24:07'),
    uidlist?: string(name='Uidlist', example='111,2222'),
  }(name='data'),
}

model IssueCouponForCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IssueCouponForCustomerResponseBody(name='body'),
}

async function issueCouponForCustomer(request: IssueCouponForCustomerRequest): IssueCouponForCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IssueCouponForCustomer', 'POST', '/', 'json', false, 'json', request);
}

model ListCountriesRequest {
}

model ListCountriesResponseBody = {
  code?: string(name='Code', description='Error Code
* 200: OK
* 1109: System error', example='200'),
  data?: [ string ](name='Data', description='List of Region Code'),
  message?: string(name='Message', description='Message information', example='success'),
  requestId?: string(name='RequestId', description='Request ID, Alibaba Cloud will track errors with this.', example='A747A00F-E096-5244-88B3-3E474BAE3AE4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model ListCountriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCountriesResponseBody(name='body'),
}

/**
  * The current API request rate for cloud products has not been disclosed.
  *
 */
async function listCountries(request: ListCountriesRequest): ListCountriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCountries', 'GET', '/', 'json', false, 'json', request);
}

model ListCouponUsageRequest {
  account?: string(name='Account', example='oqevfbveuadcrduzmf@ttirv.net', position='Query'),
  couponTemplateId?: long(name='CouponTemplateId', example='5075915', position='Query'),
  page?: int32(name='Page', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Query'),
  status?: string(name='Status', example='AVAILABLE', position='Query'),
  uid?: long(name='Uid', example='1133166938931507', position='Query'),
}

model ListCouponUsageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      account?: string(name='Account', example='oqevfbveuadcrduzmf@ttirv.net'),
      amount?: double(name='Amount'),
      balance?: double(name='Balance', example='0.01'),
      couponId?: string(name='CouponId', example='59226280'),
      couponTemplateId?: long(name='CouponTemplateId', example='503802'),
      effDate?: string(name='EffDate', example='2023-04-06 00:00:00 ~ 2023-04-07 00:00:00'),
      publishDate?: string(name='PublishDate', example='2023-04-06 19:32:10'),
      status?: string(name='Status', example='AVAILABLE'),
      uid?: long(name='Uid', example='1647668856741998'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageInfo?: {
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='300'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model ListCouponUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCouponUsageResponseBody(name='body'),
}

async function listCouponUsage(request: ListCouponUsageRequest): ListCouponUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCouponUsage', 'POST', '/', 'json', false, 'json', request);
}

model QuotaListExportPagedRequest {
  currentPage: int32(name='CurrentPage', description='Pagination, current page number, starting from 1.', example='1', position='Query'),
  language?: string(name='Language', description='Multilingual Parameters, the default language is English.</br>
en: English</br>
zh: Chinese</br>
ja: Japanese </br>', example='en', position='Query'),
  pageSize: int32(name='PageSize', description='Pagination, record number on each page, maximum 100.', example='10', position='Query'),
}

model QuotaListExportPagedResponseBody = {
  code?: string(name='Code', description='Status code of returning result, 200 means success.', example='200'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='Create Time', example='2023-12-21 21:31:57 UTC+8'),
      fileName?: string(name='FileName', description='File Name', example='5113766248601929_quota_2023-06-22_2023-12-21_all_2023122121310057'),
      message?: string(name='Message', description='Notification Message', example='success'),
      status?: string(name='Status', description='Display of Task Status', example='3'),
      statusCode?: string(name='StatusCode', description='Task Status Enum</br>
2: Exporting</br>
3: Export Success</br>
-1: Export Fail</br>', example='Export Success'),
      url?: string(name='Url', description='The link to download exported file.', example='//aliyun-eco-market-servic-singapore.oss-ap-southeast-1.aliyuncs.com/5113766248601929_quota_2023-06-22_2023-12-21_all_2023122121310057'),
    }
  ](name='Data', description='Listed data of returning result'),
  msg?: string(name='Msg', description='Description of returning result', example='SUCCESS'),
  pageNo?: int32(name='PageNo', description='Current page number', example='1'),
  pageSize?: int32(name='PageSize', description='Record number on each page', example='10'),
  requestId?: string(name='RequestId', description='ID of the Request', example='210e876f16704666020714468dab35'),
  total?: int32(name='Total', description='Total volume', example='10'),
}

model QuotaListExportPagedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuotaListExportPagedResponseBody(name='body'),
}

/**
  * Caller must be a Partner from International Site, either Distribution or Reseller will do.
  *
 */
async function quotaListExportPaged(request: QuotaListExportPagedRequest): QuotaListExportPagedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuotaListExportPaged', 'GET', '/', 'json', false, 'json', request);
}

model ResendEmailRequest {
  inviteId: long(name='InviteId', description='Invitation ID, from interface InviteSubAccount </br>
Note: This field type is Long, which may result in precision loss in serialization/deserialization process. Please ensure the value does not exceed 9007199254740991.', example='176', position='Query'),
}

model ResendEmailResponseBody = {
  code?: string(name='Code', description='Result Code, Error code.</br>
Candidate Value: </br>
* 200: OK
* 1109: System error
* 3058: Frequent sending, the limit is 10 emails in every 5 minutes.
* 3057: InviteId is empty.
* 3060: Can\\"t find sending record of given InviteId.
* 3061: Registration URL is expired, unable to resend.', example='200'),
  message?: string(name='Message', description='Result message', example='success'),
  requestId?: string(name='RequestId', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model ResendEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResendEmailResponseBody(name='body'),
}

async function resendEmail(request: ResendEmailRequest): ResendEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendEmail', 'POST', '/', 'json', false, 'json', request);
}

model SetAccountInfoRequest {
  accountNickname?: string(name='AccountNickname', description='Result Code:
*   200 OK
*   1109 System error
*   3030 Sub Account Nickname exceeds maximum length,  maximum length 150 bytes.
*   3031 Remark exceeds maximum length,  maximum length 3000 bytes.', example='Message information', position='Query'),
  customerBd?: string(name='CustomerBd', description='Customer manager（limited 50 character）', example='abc', position='Query'),
  remark?: string(name='Remark', description='success', example='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', position='Query'),
  uid: long(name='Uid', description='Request ID, Alibaba Cloud will track errors with this.', example='1133166938931507', position='Query'),
}

model SetAccountInfoResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model SetAccountInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccountInfoResponseBody(name='body'),
}

async function setAccountInfo(request: SetAccountInfoRequest): SetAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model SetCreditLineRequest {
  creditLine: string(name='CreditLine', description='New Credit Line', example='100', position='Query'),
  uid: long(name='Uid', description='The UID of Sub Account.', example='1263644979775567', position='Query'),
}

model SetCreditLineResponseBody = {
  code?: string(name='Code', description='Result Code:
*   200 OK
*   1109 system error
*   3040 Sub Account is in a frozen state and cannot be operated.
*   3041 Credit is not a proper number', example='200'),
  message?: string(name='Message', description='Same as Code parameter value', example='200'),
  requestId?: string(name='RequestId', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True/False, which indicates whether the current API call itself is successful. It does not guarantee the success of subsequent business operations.', example='true'),
}

model SetCreditLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetCreditLineResponseBody(name='body'),
}

async function setCreditLine(request: SetCreditLineRequest): SetCreditLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCreditLine', 'POST', '/', 'json', false, 'json', request);
}

model SetWarningThresholdRequest {
  uid: long(name='Uid', description='The UID of the partner‘s customer.', example='1792155717328010', position='Query'),
  warningValue: string(name='WarningValue', description='Percentage, 1 to 100. When the available credit limit is lower than the credit limit percentage, an email is sent to the main account.', example='20', position='Query'),
}

model SetWarningThresholdResponseBody = {
  code?: string(name='Code', description='Result Code:
* 200 OK
* 1109 System Error
* 3040 The Sub Account is frozen, the operation cannot be completed. 
* 3044 Alert proportion value is not a number.
* 3045 Alert proportion value should between 1 to 100.', example='200'),
  message?: string(name='Message', description='Same as Code parameter value', example='200'),
  requestId?: string(name='RequestId', description='Request ID, the unique request identifier generated by Alibaba Cloud.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate Value: True or False, which indicates whether the current API call itself is successful. does not represent the success of subsequent business operations.', example='true'),
}

model SetWarningThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetWarningThresholdResponseBody(name='body'),
}

async function setWarningThreshold(request: SetWarningThresholdRequest): SetWarningThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetWarningThreshold', 'POST', '/', 'json', false, 'json', request);
}

model SubscriptionBillRequest {
  beginBillingCycle: string(name='BeginBillingCycle', description='The start month from which the bills are pushed. Specify the value in the yyyy-MM format.

After the subscription is generated, the system automatically pushes the bill data that is generated from the month that you specified to the current point in time. Data of up to six months can be pushed. The current month is included. If you subscribe to the bills for more than six months, the subscription is invalid.', example='2022-10', position='Query'),
  billFormat: string(name='BillFormat', description='The file format of the bill. Valid values: csv and parquet.

If you subscribe to the bills of multiple file formats, we recommend that you store the bills in different OSS buckets to prevent file overwriting.', example='csv', position='Query'),
  bucketOwnerId: long(name='BucketOwnerId', description='The ID of the user to which the OSS bucket belongs.

If you are an eco-partner of Alibaba Cloud and you need to push the bills to the OSS bucket of a subordinate partner account, you must set this parameter to the ID of the subordinate partner account and grant the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/?spm=api-workbench.API%20Document.0.0.68c71e0fhmTSJp#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission to the subordinate partner account.

If you are an eco-partner of Alibaba Cloud and you need to push the bills to the OSS bucket of your own account, your account must be granted the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/?spm=api-workbench.API%20Document.0.0.68c71e0fhmTSJp#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.', example='5569414254138836', position='Query'),
  subscribeBucket: string(name='SubscribeBucket', description='The name of the Object Storage Service (OSS) bucket in which you want to store the bills.', example='bill-bucket', position='Query'),
  subscribeSegmentSize?: int32(name='SubscribeSegmentSize', description='The maximum rows in a single bill file. If the number of bill rows exceed the upper limit, the bill is automatically split into multiple files. The name of each split file is in the `uid_billType_billCycle_SquenceNo_fileNo` format.

Files whose names are the same except for the fileNo field are of the same type and belong to the same billing cycle.', example='100000', position='Query'),
  subscribeType: string(name='SubscribeType', description='The type of the bill to which you want to subscribe. Valid values: PartnerBillingItemDetailForBillingPeriod, PartnerBillingItemDetailMonthly, PartnerInstanceDetailForBillingPeriod, and PartnerInstanceDetailMonthly.', example='PartnerBillingItemDetailForBillingPeriod', position='Query'),
}

model SubscriptionBillResponseBody = {
  code?: string(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: boolean(name='Data', description='The data that is returned.', example='true'),
  message?: string(name='Message', description='The message that is returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SubscriptionBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscriptionBillResponseBody(name='body'),
}

/**
  * *   Make sure that you are a distributor of the Alibaba Cloud international ecosystem.
  * *   You can call this operation to subscribe to only one type of bill at a time.
  * *   After the subscription to a type of bill is generated, the bill for the previous day is pushed on a daily basis from the next day. On the fifth day of each month, the full-data bill for the previous month is pushed.
  * *   A daily bill may be delayed. The delayed bill is pushed the next day after it is generated. The delayed bill may contain the bill data that is delayed until the previous day. We recommend that you query the full-data bill for the previous month at the beginning of each month.
  * *   Your account must be granted the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/?spm=api-workbench.API%20Document.0.0.68c71e0fhmTSJp#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.
  * *   The following file name formats are supported for bills:
  * ```
  * BillingItemDetailForBillingPeriod
  *   
  * File name format of a daily bill: UID_PartnerBillingItemDetail_YYYYMMDD_SquenceNo_fileNo. Example: 169**_BillingItemDetail_20190310_0001_01. 
  *   
  * File name format of a monthly full-data bill: UID_PartnerBillingItemDetail_YYYYMM_SquenceNo_fileNo. Example: 169**_BillingItemDetail_201903_0001_01. 
  * InstanceDetailForBillingPeriod
  *  
  *  File name format of a daily bill: UID_PartnerInstanceDetail_YYYYMMDD_SquenceNo_fileNo. Example: 169**_InstanceDetail_20190310_0001_01. 
  *   
  * File name format of a monthly full-data bill: UID_PartnerInstanceDetail_YYYYMM_SquenceNo_fileNo. Example: 169**_InstanceDetail_201903_1999-0001_01. 
  * BillingItemDetailMonthly
  *   
  * File name format of a daily bill: UID_PartnerBillingItemDetailMonthly_YYYYMM_SquenceNo_fileNo. Example: 169**_BillingItemDetailMonthly_201903_0001_01. This bill contains the bill data that is generated from the beginning of the current month to the fifth day of the next month. 
  * InstanceDetailMonthly
  *   
  * File name format of a daily bill: UID_PartnerInstanceDetailMonthly_YYYYMM_SquenceNo_fileNo. Example: 169**_InstanceDetailMonthly_201903_0001_01. This bill contains the bill data that is generated from the beginning of the current month to the fifth day of the next month. 
  * The fileNo field exists only when the number of bill rows reaches the maximum rows in a single bill file and the bill is split into multiple files.
  * ```
  * **This topic is published only on the international site (alibabacloud.com).
  *
 */
async function subscriptionBill(request: SubscriptionBillRequest): SubscriptionBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscriptionBill', 'POST', '/', 'json', false, 'json', request);
}

