/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Agency';
  @version = '2022-12-16';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'agency.aliyuncs.com',
    ap-northeast-2-pop = 'agency.aliyuncs.com',
    ap-south-1 = 'agency.aliyuncs.com',
    ap-southeast-2 = 'agency.aliyuncs.com',
    ap-southeast-3 = 'agency.aliyuncs.com',
    ap-southeast-5 = 'agency.aliyuncs.com',
    cn-beijing = 'agency.aliyuncs.com',
    cn-beijing-finance-1 = 'agency.aliyuncs.com',
    cn-beijing-finance-pop = 'agency.aliyuncs.com',
    cn-beijing-gov-1 = 'agency.aliyuncs.com',
    cn-beijing-nu16-b01 = 'agency.aliyuncs.com',
    cn-chengdu = 'agency.aliyuncs.com',
    cn-edge-1 = 'agency.aliyuncs.com',
    cn-fujian = 'agency.aliyuncs.com',
    cn-haidian-cm12-c01 = 'agency.aliyuncs.com',
    cn-hangzhou = 'agency.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'agency.aliyuncs.com',
    cn-hangzhou-finance = 'agency.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'agency.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'agency.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'agency.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'agency.aliyuncs.com',
    cn-hangzhou-test-306 = 'agency.aliyuncs.com',
    cn-hongkong = 'agency.aliyuncs.com',
    cn-hongkong-finance-pop = 'agency.aliyuncs.com',
    cn-huhehaote = 'agency.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'agency.aliyuncs.com',
    cn-north-2-gov-1 = 'agency.aliyuncs.com',
    cn-qingdao = 'agency.aliyuncs.com',
    cn-qingdao-nebula = 'agency.aliyuncs.com',
    cn-shanghai = 'agency.aliyuncs.com',
    cn-shanghai-et15-b01 = 'agency.aliyuncs.com',
    cn-shanghai-et2-b01 = 'agency.aliyuncs.com',
    cn-shanghai-finance-1 = 'agency.aliyuncs.com',
    cn-shanghai-inner = 'agency.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'agency.aliyuncs.com',
    cn-shenzhen = 'agency.aliyuncs.com',
    cn-shenzhen-finance-1 = 'agency.aliyuncs.com',
    cn-shenzhen-inner = 'agency.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'agency.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'agency.aliyuncs.com',
    cn-wuhan = 'agency.aliyuncs.com',
    cn-wulanchabu = 'agency.aliyuncs.com',
    cn-yushanfang = 'agency.aliyuncs.com',
    cn-zhangbei = 'agency.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'agency.aliyuncs.com',
    cn-zhangjiakou = 'agency.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'agency.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'agency.aliyuncs.com',
    eu-central-1 = 'agency.aliyuncs.com',
    eu-west-1 = 'agency.aliyuncs.com',
    eu-west-1-oxs = 'agency.aliyuncs.com',
    me-east-1 = 'agency.aliyuncs.com',
    rus-west-1-pop = 'agency.aliyuncs.com',
    us-east-1 = 'agency.aliyuncs.com',
    us-west-1 = 'agency.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CancelSubscriptionBillRequest {
  subscribeType: string(name='SubscribeType', description='The type of the bill to which you want to cancel the subscription. Valid values: PartnerBillingItemDetailForBillingPeriod, PartnerBillingItemDetailMonthly, PartnerInstanceDetailForBillingPeriod, and PartnerInstanceDetailMonthly.', example='PartnerBillingItemDetailForBillingPeriod', position='Query'),
}

model CancelSubscriptionBillResponseBody = {
  code?: string(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: boolean(name='Data', description='The data that is returned.', example='true'),
  message?: string(name='Message', description='The message that is returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210e876f16704666020714468dab35'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CancelSubscriptionBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelSubscriptionBillResponseBody(name='body'),
}

/**
  * Make sure that you are a distributor of the Alibaba Cloud international ecosystem.
  * You can call this operation to cancel the subscription to only one type of bill at a time.
  * After the subscription to a type of bill is canceled, bills of this type are no longer pushed to the specified Object Storage Service (OSS) bucket.
  * **This topic is published only on the international site (alibabacloud.com).
  *
 */
async function cancelSubscriptionBill(request: CancelSubscriptionBillRequest): CancelSubscriptionBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSubscriptionBill', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomerRequest {
  customerName: string(name='CustomerName', example='DoorBell Marketing', position='Query'),
  customerSource: string(name='CustomerSource', example='website', position='Query'),
  customerSubTrade?: string(name='CustomerSubTrade', example='0101', position='Query'),
  customerTrade: string(name='CustomerTrade', example='01', position='Query'),
  nation: string(name='Nation', example='AR', position='Query'),
}

model CreateCustomerResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='12345'),
  requestId?: string(name='RequestId', example='A9B725C7-3DBD-576B-AC91-F6F22AB99A77'),
  success?: boolean(name='Success', example='true'),
}

model CreateCustomerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomerResponseBody(name='body'),
}

async function createCustomer(request: CreateCustomerRequest): CreateCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomer', 'POST', '/', 'json', false, 'json', request);
}

model CustomerQuotaRecordListRequest {
  endDate: string(name='EndDate', example='2023-09-24', position='Query'),
  endUserPk: long(name='EndUserPk', example='5113766248601929', position='Query'),
  language?: string(name='Language', example='en', position='Query'),
  operationType: string(name='OperationType', example='all', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  startDate: string(name='StartDate', example='2023-01-02', position='Query'),
}

model CustomerQuotaRecordListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      operationSubmitType?: string(name='OperationSubmitType', example='ACPN'),
      operationTime?: string(name='OperationTime', example='2023-12-15 10:34:36 UTC+8'),
      operationTypeCode?: string(name='OperationTypeCode', example='quota_amount_adjust'),
      operationTypeDesc?: string(name='OperationTypeDesc', example='Quota Adjustment'),
      operationUid?: string(name='OperationUid', example='5113766248601929'),
      updateAfterAmount?: string(name='UpdateAfterAmount', example='121.00'),
      updateAmount?: string(name='UpdateAmount', example='-100.00'),
      updateBeforeAmount?: string(name='UpdateBeforeAmount', example='221.00'),
    }
  ](name='Data'),
  msg?: string(name='Msg', example='SUCCESS'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2103a0ae16849855284594613d874e'),
  total?: int32(name='Total', example='10'),
}

model CustomerQuotaRecordListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CustomerQuotaRecordListResponseBody(name='body'),
}

async function customerQuotaRecordList(request: CustomerQuotaRecordListRequest): CustomerQuotaRecordListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CustomerQuotaRecordList', 'GET', '/', 'json', false, 'json', request);
}

model DeductOutstandingBalanceRequest {
  deductAmount: string(name='DeductAmount', example='300', position='Query'),
  uid: long(name='Uid', example='1133166938931507', position='Query'),
}

model DeductOutstandingBalanceResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='200'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model DeductOutstandingBalanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeductOutstandingBalanceResponseBody(name='body'),
}

async function deductOutstandingBalance(request: DeductOutstandingBalanceRequest): DeductOutstandingBalanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeductOutstandingBalance', 'POST', '/', 'json', false, 'json', request);
}

model EditEndUserStatusRequest {
  creditStatus?: string(name='CreditStatus', example='postPayFreeze', position='Query'),
  uid?: long(name='Uid', description='uid', example='1792155717328010', position='Query'),
}

model EditEndUserStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message'),
  msg?: string(name='Msg', example='success'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model EditEndUserStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditEndUserStatusResponseBody(name='body'),
}

async function editEndUserStatus(request: EditEndUserStatusRequest): EditEndUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditEndUserStatus', 'GET', '/', 'json', false, 'json', request);
}

model EditNewBuyStatusRequest {
  newBuyStatus?: string(name='NewBuyStatus', example='cancelBan', position='Query'),
  uid?: long(name='Uid', example='1133166938931507', position='Query'),
}

model EditNewBuyStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message'),
  msg?: string(name='Msg', example='success'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model EditNewBuyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditNewBuyStatusResponseBody(name='body'),
}

async function editNewBuyStatus(request: EditNewBuyStatusRequest): EditNewBuyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditNewBuyStatus', 'POST', '/', 'json', false, 'json', request);
}

model EditZeroCreditShutdownRequest {
  shutdownPolicy?: string(name='ShutdownPolicy', example='NO_STOP', position='Query'),
  uid?: long(name='Uid', description='uid', example='1263644979775567', position='Query'),
}

model EditZeroCreditShutdownResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message'),
  msg?: string(name='Msg', example='SUCCESS'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
}

model EditZeroCreditShutdownResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditZeroCreditShutdownResponseBody(name='body'),
}

async function editZeroCreditShutdown(request: EditZeroCreditShutdownRequest): EditZeroCreditShutdownResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditZeroCreditShutdown', 'POST', '/', 'json', false, 'json', request);
}

model ExportCustomerQuotaRecordRequest {
  endDate: string(name='EndDate', example='2023-12-24', position='Query'),
  endUserPk: long(name='EndUserPk', example='5113766248601929', position='Query'),
  language?: string(name='Language', example='en', position='Query'),
  operationType: string(name='OperationType', example='all', position='Query'),
  startDate: string(name='StartDate', example='2023-11-10', position='Query'),
}

model ExportCustomerQuotaRecordResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: {
    cost?: int32(name='Cost', example='1'),
    id?: long(name='Id', example='1231'),
  }(name='Data'),
  msg?: string(name='Msg', example='SUCCESS'),
  requestId?: string(name='RequestId', description='Id of the request', example='210bc4b416874189683843905d9f9a'),
}

model ExportCustomerQuotaRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportCustomerQuotaRecordResponseBody(name='body'),
}

async function exportCustomerQuotaRecord(request: ExportCustomerQuotaRecordRequest): ExportCustomerQuotaRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCustomerQuotaRecord', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountInfoRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=20, position='Query'),
  uid?: long(name='Uid', example='1215848086704806', position='Query'),
  userType?: string(name='UserType', example='1', position='Query'),
}

model GetAccountInfoResponseBody = {
  accountInfoList?: {
    accountInfo?: [ 
    {
      accountNickname?: string(name='AccountNickname'),
      aliyunId?: string(name='AliyunId', example='1234@qq.com'),
      associationSuccessTime?: string(name='AssociationSuccessTime', example='2021-01-01'),
      cid?: long(name='Cid', example='61479572'),
      email?: string(name='Email', example='1234@qq.com'),
      mobile?: string(name='Mobile', example='13641588680'),
      remark?: string(name='Remark'),
      subAccountType?: int32(name='SubAccountType', example='1'),
      uid?: long(name='Uid', example='1415740779475837'),
    }
  ](name='AccountInfo')
  }(name='AccountInfoList'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', description='message'),
  pageInfo?: {
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='12'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model GetAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountInfoResponseBody(name='body'),
}

async function getAccountInfo(request: GetAccountInfoRequest): GetAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetCreditInfoRequest {
  uid: long(name='Uid', example='1792155717328010', position='Query'),
}

model GetCreditInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountStatus?: string(name='AccountStatus', example='normal'),
    alarmThreshold?: string(name='AlarmThreshold', example='20'),
    availableCredit?: string(name='AvailableCredit', example='800'),
    consumedUndeductedValue?: string(name='ConsumedUndeductedValue'),
    creditLine?: string(name='CreditLine', example='1000'),
    outstandingBalance?: string(name='OutstandingBalance', example='200'),
    zeroCreditShutdownPolicy?: string(name='ZeroCreditShutdownPolicy', example='delayStop'),
    newBuyStatus?: string(name='newBuyStatus', example='ban'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model GetCreditInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCreditInfoResponseBody(name='body'),
}

async function getCreditInfo(request: GetCreditInfoRequest): GetCreditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreditInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetDailyBillRequest {
  billOwner: string(name='BillOwner', example='1', position='Query'),
  billType: string(name='BillType', example='DailyInstanceBillV2', position='Query'),
  date: string(name='Date', description='Billing date. Format YYYY-MM-DD', example='2022-11-24', position='Query'),
}

model GetDailyBillResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    billLinkCSV?: string(name='BillLinkCSV', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billLinkXLSX?: string(name='BillLinkXLSX', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billOwner?: string(name='BillOwner', example='1'),
    billType?: string(name='BillType', example='DailyInstanceBillV2'),
    spendingTime?: string(name='SpendingTime', example='20221201'),
  }(name='Data'),
  message?: string(name='Message', example='200'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model GetDailyBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDailyBillResponseBody(name='body'),
}

async function getDailyBill(request: GetDailyBillRequest): GetDailyBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDailyBill', 'POST', '/', 'json', false, 'json', request);
}

model GetInviteStatusRequest {
  inviteStatusList: [ 
    {
      inviteId?: long(name='InviteId', example='123'),
    }
  ](name='InviteStatusList', description='inviteId list', position='Query'),
}

model GetInviteStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    inviteStatus?: [ 
    {
      code?: string(name='Code', example='200'),
      inviteStatusList?: {
        associationSuccessTime?: string(name='AssociationSuccessTime', example='2018-02-13'),
        cid?: long(name='Cid', example='1234567890123'),
        gmtCreate?: string(name='GmtCreate', example='2018-02-12'),
        parentId?: string(name='ParentId', example='1093238769140523'),
        status?: int32(name='Status', example='2'),
        subAccountType?: string(name='SubAccountType', example='1'),
        uid?: long(name='Uid', example='1234567890123'),
      }(name='InviteStatusList'),
      message?: string(name='Message'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='InviteStatus')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model GetInviteStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInviteStatusResponseBody(name='body'),
}

async function getInviteStatus(request: GetInviteStatusRequest): GetInviteStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInviteStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetMonthlyBillRequest {
  billOwner: string(name='BillOwner', description='Bill Owner type.

 Value range:

1: Master account 

2: Sub account', example='1', position='Query'),
  billType: string(name='BillType', description='Value Range:

MonthlyInvoice

MonthRefundInvoice

MonthlySummary

MonthlyInstanceAddAdjustBill 

MonthlyInstanceRefundBill

MonthlyAddAdjustInvoce

MonthlyRefundAdjustInvoce 

MonthlyInstanceConsumeV2 

MarginReportV2', example='MonthlyInvoice', position='Query'),
  month: string(name='Month', description='Billing Month, Format is YYYY-MM', example='2022-11', position='Query'),
}

model GetMonthlyBillResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    billLinkCSV?: string(name='BillLinkCSV', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billLinkXLSX?: string(name='BillLinkXLSX', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    billOwner?: string(name='BillOwner', example='1'),
    billType?: string(name='BillType', example='MonthlyInvoice'),
    invoiceLink?: string(name='InvoiceLink', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    refundInvoiceFlag?: boolean(name='RefundInvoiceFlag', example='True'),
    refundInvoiceLink?: string(name='RefundInvoiceLink', example='intl-reseller-month-bill.oss-ap-southeast-1.aliyuncs.com/statements/month/dts/1064252248461886/202104/Month%20Billing%20Invoice%20202104.pdf?Expires=1671160973&OSSAccessKeyId=TMP.3KhvoD9pW264cPv8sYe8E2zJ5HLWmrijNHgKiKpXcy8yS472BcrvemgTfNrrXKu5fCCdbLr2XhmYAyYPmbCe8zJyEkmYzL&Signature=hns1PgiiYl1WdI%2FdiOqbEdsgmfI%3D'),
    spendingTime?: string(name='SpendingTime', example='20221201'),
  }(name='Data'),
  message?: string(name='Message', example='200'),
  requestId?: string(name='RequestId', example='210e876f16704666020714468dab35'),
  success?: boolean(name='Success', example='true'),
}

model GetMonthlyBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMonthlyBillResponseBody(name='body'),
}

async function getMonthlyBill(request: GetMonthlyBillRequest): GetMonthlyBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMonthlyBill', 'POST', '/', 'json', false, 'json', request);
}

model GetUnassociatedCustomerRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model GetUnassociatedCustomerResponseBody = {
  code?: string(name='Code', example='200'),
  inviteInfoList?: {
    inviteInfo?: [ 
    {
      accountNickname?: string(name='AccountNickname'),
      email?: string(name='Email', example='12345@qq.com'),
      gmtCreate?: string(name='GmtCreate', example='2023-05-10'),
      inviteId?: long(name='InviteId', example='190'),
      status?: int32(name='Status', example='1'),
    }
  ](name='InviteInfo')
  }(name='InviteInfoList'),
  message?: string(name='Message'),
  pageInfo?: {
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='12'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='23309219-4A34-589D-A3E0-9B2A3BFFD24F'),
  success?: boolean(name='Success', example='true'),
}

model GetUnassociatedCustomerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUnassociatedCustomerResponseBody(name='body'),
}

async function getUnassociatedCustomer(request: GetUnassociatedCustomerRequest): GetUnassociatedCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUnassociatedCustomer', 'GET', '/', 'json', false, 'json', request);
}

model InviteSubAccountRequest {
  accountInfoList: [ 
    {
      accountNickname: string(name='AccountNickname'),
      creditLine: string(name='CreditLine', example='100'),
      customerId: string(name='CustomerId'),
      emailAddress: string(name='EmailAddress', example='12345@163.com'),
      newBuyStatus: string(name='NewBuyStatus', example='ban'),
      remark?: string(name='Remark'),
      subAccountType: string(name='SubAccountType', example='1'),
      zeroCreditShutdownPolicy: string(name='ZeroCreditShutdownPolicy', example='1'),
    }
  ](name='AccountInfoList', position='Query'),
}

model InviteSubAccountResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  results?: {
    result?: [ 
    {
      code?: string(name='Code', example='200'),
      message?: string(name='Message'),
      result?: {
        days?: int32(name='Days', example='15'),
        inviteId?: long(name='InviteId', example='12345'),
        regUrl?: string(name='RegUrl', example='http://agency-intl.console.aliyun.com/customer/register?intl=true&fxinfo=-4uT%2FMWHnnUdvr5GXVd1AYK8luTnGgH3M7Y3lSCd5M1fxRwAkViTWtDJDpckh0HL'),
      }(name='Result'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='Result')
  }(name='Results'),
  success?: boolean(name='Success', example='true'),
}

model InviteSubAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InviteSubAccountResponseBody(name='body'),
}

async function inviteSubAccount(request: InviteSubAccountRequest): InviteSubAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteSubAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListCountriesRequest {
}

model ListCountriesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A747A00F-E096-5244-88B3-3E474BAE3AE4'),
  success?: boolean(name='Success', example='true'),
}

model ListCountriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCountriesResponseBody(name='body'),
}

async function listCountries(request: ListCountriesRequest): ListCountriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCountries', 'GET', '/', 'json', false, 'json', request);
}

model QuotaListExportPagedRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  language?: string(name='Language', example='en', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model QuotaListExportPagedResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-12-21 21:31:57 UTC+8'),
      fileName?: string(name='FileName', example='5113766248601929_quota_2023-06-22_2023-12-21_all_2023122121310057'),
      message?: string(name='Message', example='success'),
      status?: string(name='Status', example='3'),
      statusCode?: string(name='StatusCode', example='Export Success'),
      url?: string(name='Url', example='//aliyun-eco-market-servic-singapore.oss-ap-southeast-1.aliyuncs.com/5113766248601929_quota_2023-06-22_2023-12-21_all_2023122121310057'),
    }
  ](name='Data'),
  msg?: string(name='Msg', example='SUCCESS'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='210e876f16704666020714468dab35'),
  total?: int32(name='Total', example='10'),
}

model QuotaListExportPagedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuotaListExportPagedResponseBody(name='body'),
}

async function quotaListExportPaged(request: QuotaListExportPagedRequest): QuotaListExportPagedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuotaListExportPaged', 'GET', '/', 'json', false, 'json', request);
}

model ResendEmailRequest {
  inviteId: long(name='InviteId', example='176', position='Query'),
}

model ResendEmailResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model ResendEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResendEmailResponseBody(name='body'),
}

async function resendEmail(request: ResendEmailRequest): ResendEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendEmail', 'POST', '/', 'json', false, 'json', request);
}

model SetAccountInfoRequest {
  accountNickname?: string(name='AccountNickname', position='Query'),
  remark?: string(name='Remark', position='Query'),
  uid: long(name='Uid', example='1133166938931507', position='Query'),
}

model SetAccountInfoResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model SetAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAccountInfoResponseBody(name='body'),
}

async function setAccountInfo(request: SetAccountInfoRequest): SetAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model SetCreditLineRequest {
  creditLine: string(name='CreditLine', example='100', position='Query'),
  uid: long(name='Uid', example='1263644979775567', position='Query'),
}

model SetCreditLineResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='200'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model SetCreditLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCreditLineResponseBody(name='body'),
}

async function setCreditLine(request: SetCreditLineRequest): SetCreditLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCreditLine', 'POST', '/', 'json', false, 'json', request);
}

model SetWarningThresholdRequest {
  uid: long(name='Uid', description='The UID of the partner‘s customer.', example='1792155717328010', position='Query'),
  warningValue: string(name='WarningValue', description='Percentage, 1 to 100. When the available credit limit is lower than the credit limit percentage, an email is sent to the main account.', example='20', position='Query'),
}

model SetWarningThresholdResponseBody = {
  code?: string(name='Code', description='Result code:

*   200 OK
*   1109 system error
*   The operation cannot be completed 3040 the sub-account is frozen-the 3044 alert proportion value is not a number.
*   3045 Alert Scale value should be 1 to 100', example='200'),
  message?: string(name='Message', description='Same as Code parameter value', example='200'),
  requestId?: string(name='RequestId', description='the request id. the unique identifier generated by alibaba cloud for the request.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Candidate value: True or False, which indicates whether the current API call itself is successful. does not represent the success of subsequent business operations.', example='true'),
}

model SetWarningThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetWarningThresholdResponseBody(name='body'),
}

async function setWarningThreshold(request: SetWarningThresholdRequest): SetWarningThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetWarningThreshold', 'POST', '/', 'json', false, 'json', request);
}

model SubscriptionBillRequest {
  beginBillingCycle: string(name='BeginBillingCycle', description='The start month from which the bills are pushed. Specify the value in the yyyy-MM format.

After the subscription is generated, the system automatically pushes the bill data that is generated from the month that you specified to the current point in time. Data of up to six months can be pushed. The current month is included. If you subscribe to the bills for more than six months, the subscription is invalid.', example='2022-10', position='Query'),
  billFormat: string(name='BillFormat', description='The file format of the bill. Valid values: csv and parquet.

If you subscribe to the bills of multiple file formats, we recommend that you store the bills in different OSS buckets to prevent file overwriting.', example='csv', position='Query'),
  bucketOwnerId: long(name='BucketOwnerId', description='The ID of the user to which the OSS bucket belongs.

If you are an eco-partner of Alibaba Cloud and you need to push the bills to the OSS bucket of a subordinate partner account, you must set this parameter to the ID of the subordinate partner account and grant the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/?spm=api-workbench.API%20Document.0.0.68c71e0fhmTSJp#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission to the subordinate partner account.

If you are an eco-partner of Alibaba Cloud and you need to push the bills to the OSS bucket of your own account, your account must be granted the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/?spm=api-workbench.API%20Document.0.0.68c71e0fhmTSJp#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.', example='5569414254138836', position='Query'),
  subscribeBucket: string(name='SubscribeBucket', description='The name of the Object Storage Service (OSS) bucket in which you want to store the bills.', example='bill-bucket', position='Query'),
  subscribeSegmentSize?: int32(name='SubscribeSegmentSize', description='The maximum rows in a single bill file. If the number of bill rows exceed the upper limit, the bill is automatically split into multiple files. The name of each split file is in the `uid_billType_billCycle_SquenceNo_fileNo` format.

Files whose names are the same except for the fileNo field are of the same type and belong to the same billing cycle.', example='100000', position='Query'),
  subscribeType: string(name='SubscribeType', description='The type of the bill to which you want to subscribe. Valid values: PartnerBillingItemDetailForBillingPeriod, PartnerBillingItemDetailMonthly, PartnerInstanceDetailForBillingPeriod, and PartnerInstanceDetailMonthly.', example='PartnerBillingItemDetailForBillingPeriod', position='Query'),
}

model SubscriptionBillResponseBody = {
  code?: string(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: boolean(name='Data', description='The data that is returned.', example='true'),
  message?: string(name='Message', description='The message that is returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SubscriptionBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubscriptionBillResponseBody(name='body'),
}

/**
  * *   Make sure that you are a distributor of the Alibaba Cloud international ecosystem.
  * *   You can call this operation to subscribe to only one type of bill at a time.
  * *   After the subscription to a type of bill is generated, the bill for the previous day is pushed on a daily basis from the next day. On the fifth day of each month, the full-data bill for the previous month is pushed.
  * *   A daily bill may be delayed. The delayed bill is pushed the next day after it is generated. The delayed bill may contain the bill data that is delayed until the previous day. We recommend that you query the full-data bill for the previous month at the beginning of each month.
  * *   Your account must be granted the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/?spm=api-workbench.API%20Document.0.0.68c71e0fhmTSJp#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.
  * *   The following file name formats are supported for bills:
  * ```
  * BillingItemDetailForBillingPeriod
  *   
  * File name format of a daily bill: UID_PartnerBillingItemDetail_YYYYMMDD_SquenceNo_fileNo. Example: 169**_BillingItemDetail_20190310_0001_01. 
  *   
  * File name format of a monthly full-data bill: UID_PartnerBillingItemDetail_YYYYMM_SquenceNo_fileNo. Example: 169**_BillingItemDetail_201903_0001_01. 
  * InstanceDetailForBillingPeriod
  *  
  *  File name format of a daily bill: UID_PartnerInstanceDetail_YYYYMMDD_SquenceNo_fileNo. Example: 169**_InstanceDetail_20190310_0001_01. 
  *   
  * File name format of a monthly full-data bill: UID_PartnerInstanceDetail_YYYYMM_SquenceNo_fileNo. Example: 169**_InstanceDetail_201903_1999-0001_01. 
  * BillingItemDetailMonthly
  *   
  * File name format of a daily bill: UID_PartnerBillingItemDetailMonthly_YYYYMM_SquenceNo_fileNo. Example: 169**_BillingItemDetailMonthly_201903_0001_01. This bill contains the bill data that is generated from the beginning of the current month to the fifth day of the next month. 
  * InstanceDetailMonthly
  *   
  * File name format of a daily bill: UID_PartnerInstanceDetailMonthly_YYYYMM_SquenceNo_fileNo. Example: 169**_InstanceDetailMonthly_201903_0001_01. This bill contains the bill data that is generated from the beginning of the current month to the fifth day of the next month. 
  * The fileNo field exists only when the number of bill rows reaches the maximum rows in a single bill file and the bill is split into multiple files.
  * ```
  * **This topic is published only on the international site (alibabacloud.com).
  *
 */
async function subscriptionBill(request: SubscriptionBillRequest): SubscriptionBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscriptionBill', 'POST', '/', 'json', false, 'json', request);
}

