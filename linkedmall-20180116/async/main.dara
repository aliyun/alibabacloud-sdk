/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'linkedmall';
  @version = '2018-01-16';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'linkedmall.aliyuncs.com',
    'cn-shanghai' = 'linkedmall.aliyuncs.com',
    'ap-northeast-1' = 'linkedmall.aliyuncs.com',
    'ap-northeast-2-pop' = 'linkedmall.aliyuncs.com',
    'ap-south-1' = 'linkedmall.aliyuncs.com',
    'ap-southeast-1' = 'linkedmall.aliyuncs.com',
    'ap-southeast-2' = 'linkedmall.aliyuncs.com',
    'ap-southeast-3' = 'linkedmall.aliyuncs.com',
    'ap-southeast-5' = 'linkedmall.aliyuncs.com',
    'cn-beijing' = 'linkedmall.aliyuncs.com',
    'cn-beijing-finance-1' = 'linkedmall.aliyuncs.com',
    'cn-beijing-finance-pop' = 'linkedmall.aliyuncs.com',
    'cn-beijing-gov-1' = 'linkedmall.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'linkedmall.aliyuncs.com',
    'cn-chengdu' = 'linkedmall.aliyuncs.com',
    'cn-edge-1' = 'linkedmall.aliyuncs.com',
    'cn-fujian' = 'linkedmall.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-finance' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'linkedmall.aliyuncs.com',
    'cn-hangzhou-test-306' = 'linkedmall.aliyuncs.com',
    'cn-hongkong' = 'linkedmall.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'linkedmall.aliyuncs.com',
    'cn-huhehaote' = 'linkedmall.aliyuncs.com',
    'cn-north-2-gov-1' = 'linkedmall.aliyuncs.com',
    'cn-qingdao' = 'linkedmall.aliyuncs.com',
    'cn-qingdao-nebula' = 'linkedmall.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'linkedmall.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'linkedmall.aliyuncs.com',
    'cn-shanghai-finance-1' = 'linkedmall.aliyuncs.com',
    'cn-shanghai-inner' = 'linkedmall.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'linkedmall.aliyuncs.com',
    'cn-shenzhen' = 'linkedmall.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'linkedmall.aliyuncs.com',
    'cn-shenzhen-inner' = 'linkedmall.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'linkedmall.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'linkedmall.aliyuncs.com',
    'cn-wuhan' = 'linkedmall.aliyuncs.com',
    'cn-yushanfang' = 'linkedmall.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'linkedmall.aliyuncs.com',
    'cn-zhangjiakou' = 'linkedmall.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'linkedmall.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'linkedmall.aliyuncs.com',
    'eu-central-1' = 'linkedmall.aliyuncs.com',
    'eu-west-1' = 'linkedmall.aliyuncs.com',
    'eu-west-1-oxs' = 'linkedmall.aliyuncs.com',
    'me-east-1' = 'linkedmall.aliyuncs.com',
    'rus-west-1-pop' = 'linkedmall.aliyuncs.com',
    'us-east-1' = 'linkedmall.aliyuncs.com',
    'us-west-1' = 'linkedmall.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddAddressRequest {
  addressInfo: string(name='AddressInfo', description='This parameter is required.', position='Body'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL202202100002', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model AddAddressResponseBody = {
  addressId?: long(name='AddressId', example='560100452'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model AddAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddAddress  AddAddressRequest
  * @return AddAddressResponse
 */
async function addAddress(request: AddAddressRequest): AddAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAddress', 'POST', '/', 'json', true, 'form', request);
}

model AddItemLimitRuleRequest {
  beginTime: long(name='BeginTime', description='This parameter is required.', example='1638958044395', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1647446400000', position='Query'),
  itemId?: long(name='ItemId', example='59******0266', position='Query'),
  lmActivityId?: long(name='LmActivityId', example='679', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000055-******09769', position='Query'),
  ruleType: int32(name='RuleType', description='This parameter is required.', position='Query'),
  subBizCode?: string(name='SubBizCode', example='eaab4******59205ec608b2144ba', position='Query'),
  upperNum: int32(name='UpperNum', description='This parameter is required.', position='Query'),
}

model AddItemLimitRuleResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: long(name='Model', example='1'),
  requestId?: string(name='RequestId', example='7BAC5B75-8208-5788-829D-AD7640085D38'),
  ruleId?: long(name='RuleId', example='109'),
}

model AddItemLimitRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddItemLimitRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddItemLimitRule  AddItemLimitRuleRequest
  * @return AddItemLimitRuleResponse
 */
async function addItemLimitRule(request: AddItemLimitRuleRequest): AddItemLimitRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddItemLimitRule', 'POST', '/', 'json', false, 'json', request);
}

model AddItemToSubBizsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20190325****', position='Body'),
  itemId?: long(name='ItemId', example='57835029****', position='Body'),
  lmItemId?: string(name='LmItemId', example='10001036-66644894****', position='Body'),
  subBizIds?: map[string]any(name='SubBizIds', example='["id1", "id2"]', shrink='json', position='Body'),
}

model AddItemToSubBizsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='A7BE4356-7F92-533E-A31B-2EBF2D67****'),
}

model AddItemToSubBizsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddItemToSubBizsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddItemToSubBizs  AddItemToSubBizsRequest
  * @return AddItemToSubBizsResponse
 */
async function addItemToSubBizs(request: AddItemToSubBizsRequest): AddItemToSubBizsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddItemToSubBizs', 'POST', '/', 'json', true, 'form', request);
}

model AddSupplierNewItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2000***12', position='Query'),
  itemList?: [ 
    {
      itemId?: long(name='ItemId', example='61936646****'),
      lmItemId?: string(name='LmItemId', example='10000035-61936646****'),
      skuList?: [ long ](name='SkuList'),
    }
  ](name='ItemList', position='Query'),
}

model AddSupplierNewItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='F2D3CA1E-28BE-5E1C-B55F-81C8F290****'),
}

model AddSupplierNewItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSupplierNewItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSupplierNewItems  AddSupplierNewItemsRequest
  * @return AddSupplierNewItemsResponse
 */
async function addSupplierNewItems(request: AddSupplierNewItemsRequest): AddSupplierNewItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSupplierNewItems', 'POST', '/', 'json', false, 'json', request);
}

model ApplyRefundRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  applyReasonTextId?: long(name='ApplyReasonTextId', example='500325', position='Query'),
  applyRefundCount?: int32(name='ApplyRefundCount', example='1', position='Query'),
  applyRefundFee: long(name='ApplyRefundFee', description='This parameter is required.', example='790', position='Query'),
  bizClaimType: int32(name='BizClaimType', description='This parameter is required.', example='1', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL201912230007', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='186******89', position='Query'),
  goodsStatus?: int32(name='GoodsStatus', example='4', position='Query'),
  leaveMessage?: string(name='LeaveMessage', position='Body'),
  leavePictureList?: [ 
    {
      desc?: string(name='Desc'),
      picture?: string(name='Picture', example='https://lm-dk.oss-cn-hangzhou.aliyuncs.com/******06661.png'),
    }
  ](name='LeavePictureList', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='42******33', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model ApplyRefundResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  refundApplicationData?: {
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus', example='1'),
    disputeType?: int32(name='DisputeType', example='0'),
    subLmOrderId?: string(name='SubLmOrderId', example='53******67'),
  }(name='RefundApplicationData'),
  requestId?: string(name='RequestId', example='5F0A38D5-F981-529A-911E-1B6D55DE568C'),
}

model ApplyRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyRefundResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyRefund  ApplyRefundRequest
  * @return ApplyRefundResponse
 */
async function applyRefund(request: ApplyRefundRequest): ApplyRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyRefund', 'POST', '/', 'json', true, 'form', request);
}

model ApplyRefundWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***001', position='Body'),
  disputeId?: long(name='DisputeId', example='142***071', position='Body'),
  goodsStatus: int32(name='GoodsStatus', description='This parameter is required.', example='2', position='Body'),
  message?: string(name='Message', position='Body'),
  proofs?: [ 
    {
      messagePic?: string(name='MessagePic', example='https://aliyundoc.com'),
      messagePicDesc?: string(name='MessagePicDesc'),
    }
  ](name='Proofs', shrink='json', position='Body'),
  reasonId: long(name='ReasonId', description='This parameter is required.', example='150013', position='Body'),
  refundCode: int32(name='RefundCode', description='This parameter is required.', example='3', position='Body'),
  refundCount?: int32(name='RefundCount', example='1', position='Body'),
  refundFee: long(name='RefundFee', description='This parameter is required.', example='990', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='702091003', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='333***21', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='U333***21', position='Body'),
}

model ApplyRefundWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    disputeId?: long(name='DisputeId', example='155***050'),
    disputeStatus?: int32(name='DisputeStatus', example='1'),
    disputeType?: int32(name='DisputeType', example='1'),
    subLmOrderId?: string(name='SubLmOrderId', example='689***932'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='6DC726F1-65***14-5C30B4B6508C'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ApplyRefundWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyRefundWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyRefundWithDesignatedTbUid  ApplyRefundWithDesignatedTbUidRequest
  * @return ApplyRefundWithDesignatedTbUidResponse
 */
async function applyRefundWithDesignatedTbUid(request: ApplyRefundWithDesignatedTbUidRequest): ApplyRefundWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyRefundWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model BatchRegistAnonymousTbAccountRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210802****', position='Query'),
  idJsonList: string(name='IdJsonList', description='This parameter is required.', example='idJsonList": "[\\"id1\\", \\"id2\\"]', position='Query'),
}

model BatchRegistAnonymousTbAccountResponseBody = {
  batchId?: string(name='BatchId', example='[\\"id1\\", \\"id2\\"]'),
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='37899973-5963-5028-BA54-180A5B107****'),
}

model BatchRegistAnonymousTbAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRegistAnonymousTbAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchRegistAnonymousTbAccount  BatchRegistAnonymousTbAccountRequest
  * @return BatchRegistAnonymousTbAccountResponse
 */
async function batchRegistAnonymousTbAccount(request: BatchRegistAnonymousTbAccountRequest): BatchRegistAnonymousTbAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRegistAnonymousTbAccount', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210802****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='208861290576****', position='Query'),
  lmOrderId: string(name='LmOrderId', description='This parameter is required.', example='46992****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='207761290576****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CancelOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='920C6519-4888-599F-9FBA-991774BAA1DD'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='True'),
}

model CancelOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelOrder  CancelOrderRequest
  * @return CancelOrderResponse
 */
async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrder', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***001', position='Body'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='449***059', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='232***124', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='u***001', position='Body'),
}

model CancelOrderWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: map[string]any(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='1'),
  requestId?: string(name='RequestId', example='79C01D47-3***9-1B33F7ED'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CancelOrderWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelOrderWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelOrderWithDesignatedTbUid  CancelOrderWithDesignatedTbUidRequest
  * @return CancelOrderWithDesignatedTbUidResponse
 */
async function cancelOrderWithDesignatedTbUid(request: CancelOrderWithDesignatedTbUidRequest): CancelOrderWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrderWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model CancelRealTbAccountSupportRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', position='Body'),
}

model CancelRealTbAccountSupportResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: any(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model CancelRealTbAccountSupportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelRealTbAccountSupportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelRealTbAccountSupport  CancelRealTbAccountSupportRequest
  * @return CancelRealTbAccountSupportResponse
 */
async function cancelRealTbAccountSupport(request: CancelRealTbAccountSupportRequest): CancelRealTbAccountSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelRealTbAccountSupport', 'POST', '/', 'json', true, 'form', request);
}

model CancelRefundRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='22******2303', position='Query'),
  disputeId: long(name='DisputeId', description='This parameter is required.', example='14244******33071', position='Query'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='52******93', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CancelRefundResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  refundApplicationData?: {
    disputeStatus?: int32(name='DisputeStatus', example='1'),
    disputeType?: int32(name='DisputeType', example='0'),
    subLmOrderId?: string(name='SubLmOrderId', example='37******31'),
  }(name='RefundApplicationData'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B320B'),
}

model CancelRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelRefundResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelRefund  CancelRefundRequest
  * @return CancelRefundResponse
 */
async function cancelRefund(request: CancelRefundRequest): CancelRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelRefund', 'POST', '/', 'json', false, 'json', request);
}

model CancelRefundWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***001', position='Body'),
  disputeId: long(name='DisputeId', description='This parameter is required.', example='1108***5380', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='709***761', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='2132***312', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='U0324***21', position='Body'),
}

model CancelRefundWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: any(name='Model', example='null'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='DF449356-35***B-21D37079E96A'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CancelRefundWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelRefundWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelRefundWithDesignatedTbUid  CancelRefundWithDesignatedTbUidRequest
  * @return CancelRefundWithDesignatedTbUidResponse
 */
async function cancelRefundWithDesignatedTbUid(request: CancelRefundWithDesignatedTbUidRequest): CancelRefundWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelRefundWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmDisburseRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******01', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='9f99f38030254728***', position='Query'),
  lmOrderId: string(name='LmOrderId', description='This parameter is required.', example='449975059**', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='2', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='false', position='Query'),
}

model ConfirmDisburseResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model ConfirmDisburseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmDisburseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfirmDisburse  ConfirmDisburseRequest
  * @return ConfirmDisburseResponse
 */
async function confirmDisburse(request: ConfirmDisburseRequest): ConfirmDisburseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmDisburse', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmDisburseWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022...03', position='Body'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='7068...44', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='2131**111', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='user***002', position='Body'),
}

model ConfirmDisburseWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: any(name='Model', example='null'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='23BBD746-A6A9-55D5-A9B5-14019901445C'),
  subCode?: string(name='SubCode', example='""'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model ConfirmDisburseWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmDisburseWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfirmDisburseWithDesignatedTbUid  ConfirmDisburseWithDesignatedTbUidRequest
  * @return ConfirmDisburseWithDesignatedTbUidResponse
 */
async function confirmDisburseWithDesignatedTbUid(request: ConfirmDisburseWithDesignatedTbUidRequest): ConfirmDisburseWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmDisburseWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20201229****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221249435****', position='Query'),
  buyerMessageMap?: string(name='BuyerMessageMap', position='Query'),
  deliveryAddress?: string(name='DeliveryAddress', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  itemId?: long(name='ItemId', example='57835029****', position='Query'),
  itemList?: [ 
    {
      itemId?: long(name='ItemId', example='64750262****'),
      lmItemId?: string(name='LmItemId', example='10000035-61936646****'),
      quantity?: int32(name='Quantity', example='10'),
      skuId?: long(name='SkuId', example='456458315****'),
    }
  ](name='ItemList', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000035-6193664*****', position='Query'),
  orderExpireTime?: long(name='OrderExpireTime', example='900000', minimum=900, position='Query'),
  outTradeId: string(name='OutTradeId', description='This parameter is required.', example='14684075319554*****', position='Query'),
  quantity?: long(name='Quantity', example='100', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='susan*******', position='Query'),
  totalAmount?: long(name='TotalAmount', example='4990', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CreateOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='RESULT_STATUS_UNKOWN'),
  model?: {
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId', example='39435****'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='"www.taoba**.com"'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='DA2554FD-F21F-536F-A7B7-B96C3E5F****'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CreateOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrder  CreateOrderRequest
  * @return CreateOrderResponse
 */
async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrderPayUrlForOutDiscountRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20****201229', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='20882****3220453', position='Query'),
  buyInfo: string(name='BuyInfo', description='This parameter is required.', example='{"addressId":"158*****11","deliveryInfoId":"20","extJson":{"subBizCode":"defaultSubBizCode"},"orderItems":[{"lmItemId":"1002****123-67150****12","number":1,"outDiscountFee":"0","price":"1","skuId":4830321*****}],"outDiscountInfos":{"promotionInfos":[],"totalDiscountFee":"0"},"postFee":0,"serviceType":-4}', position='Body'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='2088****23220453', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CreateOrderPayUrlForOutDiscountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    allIdsMap?: map[string]map[string]any(name='AllIdsMap'),
    lmOrderList?: [ string ](name='LmOrderList'),
    orderIds?: [ string ](name='OrderIds'),
    payTradeIds?: [ string ](name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrderPayUrlForOutDiscountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderPayUrlForOutDiscountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrderPayUrlForOutDiscount  CreateOrderPayUrlForOutDiscountRequest
  * @return CreateOrderPayUrlForOutDiscountResponse
 */
async function createOrderPayUrlForOutDiscount(request: CreateOrderPayUrlForOutDiscountRequest): CreateOrderPayUrlForOutDiscountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrderPayUrlForOutDiscount', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrderTransactionDetailFileRequest {
  bizId?: string(name='BizId', example='LMALL20211102****', position='Body'),
  bizName?: string(name='BizName', example='click_page', position='Body'),
  channelName?: string(name='ChannelName', example='tcp_v', position='Body'),
  createEndTime?: string(name='CreateEndTime', example='2021-12-31 14:03:28', position='Body'),
  createStartTime?: string(name='CreateStartTime', example='2021-02-26 04:55:31', position='Body'),
  itemId?: string(name='ItemId', example='655******148', position='Body'),
  lmShopId?: string(name='LmShopId', example='10026953', position='Body'),
  orderStatus?: string(name='OrderStatus', example='6', position='Body'),
  payStatus?: string(name='PayStatus', example='2', position='Body'),
  paymentEndTime?: string(name='PaymentEndTime', example='2021-12-31 14:03:28', position='Body'),
  paymentStartTime?: string(name='PaymentStartTime', example='2021-12-31 14:03:28', position='Body'),
  poCode?: string(name='PoCode', position='Body'),
  refundEndTime?: string(name='RefundEndTime', example='2021-12-31 14:05:21', position='Body'),
  refundStartTime?: string(name='RefundStartTime', example='2021-12-31 14:03:28', position='Body'),
  sellerId?: string(name='SellerId', example='220680193****', position='Body'),
  sellerName?: string(name='SellerName', position='Body'),
  settlementNode?: string(name='SettlementNode', position='Body'),
  shopName?: string(name='ShopName', example='hyq-1', position='Body'),
  tbMainOrderId?: string(name='TbMainOrderId', example='201312321321312', position='Body'),
  tenantId?: string(name='TenantId', example='18******263', position='Body'),
  tenantName?: string(name='TenantName', example='NYBQJYWZ', position='Body'),
}

model CreateOrderTransactionDetailFileResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  recordId?: string(name='RecordId', example='ORDER-92d3f9b1afa04172ac27710706fd398f'),
  requestId?: string(name='RequestId', example='E090F1A0-7454-5F36-933C-E6332CE2****'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model CreateOrderTransactionDetailFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderTransactionDetailFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrderTransactionDetailFile  CreateOrderTransactionDetailFileRequest
  * @return CreateOrderTransactionDetailFileResponse
 */
async function createOrderTransactionDetailFile(request: CreateOrderTransactionDetailFileRequest): CreateOrderTransactionDetailFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrderTransactionDetailFile', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrderV2Request {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL202****0001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='4012776630', position='Query'),
  buyerMessageMap?: string(name='BuyerMessageMap', position='Query'),
  deliveryAddress?: string(name='DeliveryAddress', example='*****************************************************************************************************', position='Query'),
  extJson?: string(name='ExtJson', example='{\\"outShopId\\":\\"8044468\\"}', position='Query'),
  itemId?: long(name='ItemId', example='591831917868', position='Query'),
  itemList?: [ 
    {
      itemId?: long(name='ItemId', example='649442334167'),
      lmItemId?: string(name='LmItemId', example='10000102-630119724405'),
      quantity?: int32(name='Quantity', example='5'),
      skuId?: long(name='SkuId', example='4586054386257'),
    }
  ](name='ItemList', position='Query'),
  lmItemId?: string(name='LmItemId', example='10016572-654408058233', position='Query'),
  orderExpireTime?: long(name='OrderExpireTime', example='3600', minimum=900, position='Query'),
  outTradeId: string(name='OutTradeId', description='This parameter is required.', example='949251510338846720', position='Query'),
  quantity?: long(name='Quantity', example='1', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='1', position='Query'),
  totalAmount?: long(name='TotalAmount', example='1', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CreateOrderV2ResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId', example='[5748****,5647****]'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='978A8742-1A38-54B5-98D9-F8713ACBC385'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='True'),
  totalCount?: long(name='TotalCount', example='7'),
}

model CreateOrderV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrderV2  CreateOrderV2Request
  * @return CreateOrderV2Response
 */
async function createOrderV2(request: CreateOrderV2Request): CreateOrderV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrderV2', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrderWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******05', position='Body'),
  buyerMessages?: string(name='BuyerMessages', example='""', position='Body'),
  deliveryAddress: string(name='DeliveryAddress', description='This parameter is required.', position='Body'),
  deliveryInfo?: string(name='DeliveryInfo', example='{ \\"serviceType\\": -4,\\"id\\": \\"20\\", \\"postFee\\": 0}', position='Body'),
  extInfo?: string(name='ExtInfo', example='{}', position='Body'),
  orderExpireTime?: long(name='OrderExpireTime', example='3600', position='Body'),
  orderItems: string(name='OrderItems', description='This parameter is required.', example='[{\\"lmItemId\\":\\"10028102-655199865844\\",\\"number\\":1,\\"skuId\\": 4900752886354}]', position='Body'),
  outTradeId?: string(name='OutTradeId', example='146******54', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='677******211', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='321******211', position='Body'),
}

model CreateOrderWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    allIdsMap?: map[string]map[string]any(name='AllIdsMap'),
    app?: string(name='App', example='linkedmall-platform'),
    lmOrderIds?: [ string ](name='LmOrderIds'),
    orderIds?: [ string ](name='OrderIds'),
    payTradeIds?: [ string ](name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='https://aliyundoc.com'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='75F3A591-B1A6-5EFF-8ABF-35AB8804DFA0'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model CreateOrderWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrderWithDesignatedTbUid  CreateOrderWithDesignatedTbUidRequest
  * @return CreateOrderWithDesignatedTbUidResponse
 */
async function createOrderWithDesignatedTbUid(request: CreateOrderWithDesignatedTbUidRequest): CreateOrderWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrderWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model CreateOutDiscountOrderWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***01', position='Body'),
  buyerMessages?: string(name='BuyerMessages', example='""', position='Body'),
  deliveryAddress: string(name='DeliveryAddress', description='This parameter is required.', position='Body'),
  deliveryInfo?: string(name='DeliveryInfo', example='{\\"id\\":\\"20\\",\\"postFee\\":0,\\"serviceType\\":-4}', position='Body'),
  extInfo?: string(name='ExtInfo', example='{}', position='Body'),
  orderExpireTime?: long(name='OrderExpireTime', example='3600', position='Body'),
  orderItems: string(name='OrderItems', description='This parameter is required.', example='[{\\"lmItemId\\":\\"100***1-6300***472\\",\\"number\\":1,\\"outDiscountFee\\":\\"6810\\",\\"price\\":\\"8800\\",\\"skuId\\":4649***225}]', position='Body'),
  outDiscountInfos?: string(name='OutDiscountInfos', example='{\\"promotionInfos\\":[{\\"discountFee\\":\\"10000\\",\\"promotionInstanceId\\":\\"{\\\\\\"couponId\\\\\\":\\\\\\"136807***98136\\\\\\",\\\\\\"couponTemplateId\\\\\\":\\\\\\"50***5\\\\\\"}\\"}],\\"totalDiscountFee\\":\\"10000\\"}', position='Body'),
  outTradeId?: string(name='OutTradeId', example='134860***596130', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='321**123', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='user***001', position='Body'),
}

model CreateOutDiscountOrderWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    allIdsMap?: map[string]map[string]any(name='AllIdsMap'),
    app?: string(name='App', example='lin***app'),
    lmOrderIds?: [ string ](name='LmOrderIds'),
    orderIds?: [ string ](name='OrderIds'),
    payTradeIds?: [ string ](name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='https://aliyundoc.com'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='3CDA6C55-18F1-53A6-B721-F5E26CBC95BE'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
}

model CreateOutDiscountOrderWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOutDiscountOrderWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOutDiscountOrderWithDesignatedTbUid  CreateOutDiscountOrderWithDesignatedTbUidRequest
  * @return CreateOutDiscountOrderWithDesignatedTbUidResponse
 */
async function createOutDiscountOrderWithDesignatedTbUid(request: CreateOutDiscountOrderWithDesignatedTbUidRequest): CreateOutDiscountOrderWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOutDiscountOrderWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model CreatePayUrlRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20*****0001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='9f99f38030254728***', position='Query'),
  buyInfo: string(name='BuyInfo', description='This parameter is required.', position='Body'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='1', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CreatePayUrlResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    lmOrderList?: [ string ](name='LmOrderList'),
    orderIds?: [ string ](name='OrderIds'),
    payTradeIds?: [ string ](name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='"www.taobao.com"'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
  success?: boolean(name='Success', example='True'),
}

model CreatePayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePayUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePayUrl  CreatePayUrlRequest
  * @return CreatePayUrlResponse
 */
async function createPayUrl(request: CreatePayUrlRequest): CreatePayUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePayUrl', 'POST', '/', 'json', true, 'form', request);
}

model CreateSettleConfirmRequest {
  bizId?: string(name='BizId', example='LMALL20******05', position='Body'),
  extInfo?: string(name='ExtInfo', position='Body'),
  merchantId: string(name='MerchantId', description='This parameter is required.', position='Body'),
  outRequestNo: string(name='OutRequestNo', description='This parameter is required.', position='Body'),
  outTradeNo?: string(name='OutTradeNo', position='Body'),
  settleInfo: string(name='SettleInfo', description='This parameter is required.', position='Body'),
  tradeNo?: string(name='TradeNo', position='Body'),
}

model CreateSettleConfirmResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B320B'),
  tradeSettleConfirmResponse?: {
    outRequestNo?: string(name='OutRequestNo'),
    tradeNo?: string(name='TradeNo'),
  }(name='TradeSettleConfirmResponse'),
}

model CreateSettleConfirmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSettleConfirmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSettleConfirm  CreateSettleConfirmRequest
  * @return CreateSettleConfirmResponse
 */
async function createSettleConfirm(request: CreateSettleConfirmRequest): CreateSettleConfirmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSettleConfirm', 'POST', '/', 'json', true, 'form', request);
}

model CreateVirtualProductOrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210508****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221122411****', position='Query'),
  deliveryAddress?: string(name='DeliveryAddress', position='Query'),
  extJson?: string(name='ExtJson', example='{\\"chargeAccount\\":\\"1510380****\\",\\"mobileNo\\":\\"186****3931\\"}', position='Query'),
  itemId?: long(name='ItemId', example='66985559****', position='Query'),
  itemList?: [ 
    {
      itemId?: long(name='ItemId', example='66985559****'),
      lmItemId?: string(name='LmItemId', example='10001036-66644894****'),
      quantity?: int32(name='Quantity', example='1'),
      skuId?: long(name='SkuId', example='456458315****'),
    }
  ](name='ItemList', position='Query'),
  lmItemId?: string(name='LmItemId', example='10001036-66644894****', position='Query'),
  orderExpireTime?: long(name='OrderExpireTime', example='900', minimum=900, position='Query'),
  outTradeId: string(name='OutTradeId', description='This parameter is required.', example='963****', position='Query'),
  quantity?: long(name='Quantity', example='1', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='221122411****', position='Query'),
  totalAmount?: long(name='TotalAmount', example='4990', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model CreateVirtualProductOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId', example='39435****'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='https://console.authing.cn/console/g*********'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='3B55509D-20AC-5BD5-9A81-D6B7382E****'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='True'),
  totalCount?: long(name='TotalCount', example='5'),
}

model CreateVirtualProductOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualProductOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVirtualProductOrder  CreateVirtualProductOrderRequest
  * @return CreateVirtualProductOrderResponse
 */
async function createVirtualProductOrder(request: CreateVirtualProductOrderRequest): CreateVirtualProductOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualProductOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateWithholdTradeRequest {
  agreementNo?: string(name='AgreementNo', example='2021******59220', position='Body'),
  body?: string(name='Body', example='""', position='Body'),
  buyerId?: string(name='BuyerId', example='12******209', position='Body'),
  extInfo?: string(name='ExtInfo', example='{"key":"value"}', position='Body'),
  goodsDetail?: string(name='GoodsDetail', example='""', position='Body'),
  merchantId?: string(name='MerchantId', example='64******721', position='Body'),
  outRequestNo?: string(name='OutRequestNo', example='94A30BED-4321-4A94-B948-EB896493B4BF', position='Body'),
  outTradeNo?: string(name='OutTradeNo', example='23******274', position='Body'),
  settleMode?: string(name='SettleMode', example='""', position='Body'),
  subject?: string(name='Subject', example='""', position='Body'),
  totalAmount?: string(name='TotalAmount', example='6900', position='Body'),
}

model CreateWithholdTradeResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
  withholdTradeResponse?: {
    outRequestNo?: string(name='OutRequestNo', example='57E4FE52-0750-4456-AA8F-ECC9FA0F8DF0'),
    outTradeNo?: string(name='OutTradeNo', example='23******274'),
    paymentDate?: string(name='PaymentDate', example='2022-04-01 12:00:00'),
    tradeNo?: string(name='TradeNo', example='32******372'),
  }(name='WithholdTradeResponse'),
}

model CreateWithholdTradeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWithholdTradeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWithholdTrade  CreateWithholdTradeRequest
  * @return CreateWithholdTradeResponse
 */
async function createWithholdTrade(request: CreateWithholdTradeRequest): CreateWithholdTradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWithholdTrade', 'POST', '/', 'json', true, 'form', request);
}

model DeductUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  amount: long(name='Amount', description='This parameter is required.', example='10', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******003', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Body'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='202112******31746-1202', position='Query'),
  message?: string(name='Message', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******637', position='Query'),
  title: string(name='Title', description='This parameter is required.', position='Query'),
}

model DeductUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='11******18'),
    action?: string(name='Action', example='""'),
    amount?: long(name='Amount', example='10'),
    bizId?: string(name='BizId', example='LMALL20******003'),
    bizUid?: string(name='BizUid', example='22******637'),
    description?: string(name='Description'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    idempotentId?: string(name='IdempotentId', example='20211212******31746-1202'),
    name?: string(name='Name'),
    recordId?: string(name='RecordId', example='""'),
    rest?: long(name='Rest', example='2000'),
    ruleId?: string(name='RuleId', example='136'),
    status?: string(name='Status', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model DeductUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeductUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeductUserPoint  DeductUserPointRequest
  * @return DeductUserPointResponse
 */
async function deductUserPoint(request: DeductUserPointRequest): DeductUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeductUserPoint', 'POST', '/', 'json', true, 'form', request);
}

model DeleteBizItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2*****001', position='Query'),
  itemIdList: [ long ](name='ItemIdList', description='This parameter is required.', position='Query'),
  subBizId?: string(name='SubBizId', position='Query'),
}

model DeleteBizItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model DeleteBizItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBizItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBizItems  DeleteBizItemsRequest
  * @return DeleteBizItemsResponse
 */
async function deleteBizItems(request: DeleteBizItemsRequest): DeleteBizItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBizItems', 'POST', '/', 'json', false, 'json', request);
}

model DeleteItemLimitRuleRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2021083****', position='Query'),
  itemId?: long(name='ItemId', example='57835029****', position='Query'),
  lmActivityId?: long(name='LmActivityId', example='679', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000035-6193664*****', position='Query'),
  ruleId: long(name='RuleId', description='This parameter is required.', position='Query'),
  subBizCode?: string(name='SubBizCode', example='7ddaba53d5be4173808f2335eac0****', position='Query'),
}

model DeleteItemLimitRuleResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  model?: boolean(name='Model', example='true'),
  requestId?: string(name='RequestId', example='A7BE4356-7F92-533E-A31B-2EBF2D67****'),
}

model DeleteItemLimitRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteItemLimitRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteItemLimitRule  DeleteItemLimitRuleRequest
  * @return DeleteItemLimitRuleResponse
 */
async function deleteItemLimitRule(request: DeleteItemLimitRuleRequest): DeleteItemLimitRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteItemLimitRule', 'POST', '/', 'json', false, 'json', request);
}

model DownloadCpsBillFileRequest {
  billId?: string(name='BillId', example='FC10000007371****', position='Body'),
  bizId?: string(name='BizId', example='LMALL20210802****', position='Body'),
}

model DownloadCpsBillFileResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  ossUrl?: string(name='OssUrl', example='https://linkedmall-console.oss-cn-shanghai.aliyuncs.com/17294373****2052/linkedmall.json'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
}

model DownloadCpsBillFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadCpsBillFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadCpsBillFile  DownloadCpsBillFileRequest
  * @return DownloadCpsBillFileResponse
 */
async function downloadCpsBillFile(request: DownloadCpsBillFileRequest): DownloadCpsBillFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadCpsBillFile', 'POST', '/', 'json', true, 'form', request);
}

model DownloadItemBillFileRequest {
  billId?: string(name='BillId', example='FC10000008458****', position='Body'),
  bizId?: string(name='BizId', example='LMALL20191223****', position='Body'),
}

model DownloadItemBillFileResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='RESULT_STATUS_UNKOWN'),
  ossUrl?: string(name='OssUrl', example='https://linkedmall-console.oss-cn-shanghai.aliyuncs.com/15422025****2919/linkedmall.har'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='0CC07385-BA71-509F-BA7E-F7EB2024C151'),
  subCode?: string(name='SubCode', example='unit-access-layer'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model DownloadItemBillFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadItemBillFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadItemBillFile  DownloadItemBillFileRequest
  * @return DownloadItemBillFileResponse
 */
async function downloadItemBillFile(request: DownloadItemBillFileRequest): DownloadItemBillFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadItemBillFile', 'POST', '/', 'json', true, 'form', request);
}

model DownloadOrderTransactionDetailFileRequest {
  bizId?: string(name='BizId', example='LMALL202111020001', position='Body'),
  recordId?: string(name='RecordId', example='ORDER-b454a111647844f5aa005dda94454751', position='Body'),
}

model DownloadOrderTransactionDetailFileResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  ossUrl?: string(name='OssUrl', example='https://linkedmall-console.oss-cn-shanghai.aliyuncs.com/1245321481945549/linkedmall.json'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='204F5C60-0B34-5718-AF93-9BD26B37****'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model DownloadOrderTransactionDetailFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadOrderTransactionDetailFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadOrderTransactionDetailFile  DownloadOrderTransactionDetailFileRequest
  * @return DownloadOrderTransactionDetailFileResponse
 */
async function downloadOrderTransactionDetailFile(request: DownloadOrderTransactionDetailFileRequest): DownloadOrderTransactionDetailFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadOrderTransactionDetailFile', 'POST', '/', 'json', true, 'form', request);
}

model EnableOrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL201912040001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', position='Query'),
  extJson?: string(name='ExtJson', position='Query'),
  lmOrderId?: string(name='LmOrderId', position='Query'),
  outTradeId: string(name='OutTradeId', description='This parameter is required.', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', position='Query'),
}

model EnableOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model EnableOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableOrder  EnableOrderRequest
  * @return EnableOrderResponse
 */
async function enableOrder(request: EnableOrderRequest): EnableOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableOrder', 'POST', '/', 'json', false, 'json', request);
}

model EnableOrderWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***003', position='Body'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='45***23', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='384***213', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='u***002', position='Body'),
}

model EnableOrderWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    lmOrderList?: [ 
      {
        extJson?: map[string]string(name='ExtJson'),
        lmOrderId?: string(name='LmOrderId', example='45***23'),
        subLmOrderIdList?: [ string ](name='SubLmOrderIdList'),
      }
    ](name='LmOrderList'),
    orderIds?: [ string ](name='OrderIds'),
    payTradeIds?: [ string ](name='PayTradeIds'),
    redirectUrl?: string(name='RedirectUrl', example='https://aliyundoc.com'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='1'),
  requestId?: string(name='RequestId', example='26F4B2C7-93***CC-AE76C9B00D2F'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model EnableOrderWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableOrderWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableOrderWithDesignatedTbUid  EnableOrderWithDesignatedTbUidRequest
  * @return EnableOrderWithDesignatedTbUidResponse
 */
async function enableOrderWithDesignatedTbUid(request: EnableOrderWithDesignatedTbUidRequest): EnableOrderWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableOrderWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteNodeRequest {
  bizId?: string(name='BizId', example='LMALL20******001', position='Query'),
  nodeId: string(name='NodeId', description='This parameter is required.', example='""', position='Query'),
  nodeInstanceId?: string(name='NodeInstanceId', example='""', position='Query'),
  processId: string(name='ProcessId', description='This parameter is required.', example='""', position='Query'),
  processInstanceId?: string(name='ProcessInstanceId', example='""', position='Query'),
  requestData?: string(name='RequestData', example='""', position='Query'),
}

model ExecuteNodeResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    processInstanceId?: string(name='ProcessInstanceId', example='""'),
    responseData?: map[string]any(name='ResponseData'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='75F3A591-B1A6-5EFF-8ABF-35AB8804DFA0'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model ExecuteNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteNode  ExecuteNodeRequest
  * @return ExecuteNodeResponse
 */
async function executeNode(request: ExecuteNodeRequest): ExecuteNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteNode', 'POST', '/', 'json', false, 'json', request);
}

model FreezeUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  amount: long(name='Amount', description='This parameter is required.', example='1000', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Body'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='202112******31746-1202', position='Query'),
  message?: string(name='Message', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******3748', position='Query'),
  title: string(name='Title', description='This parameter is required.', position='Query'),
}

model FreezeUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='11******26'),
    action?: string(name='Action', example='""'),
    amount?: long(name='Amount', example='1000'),
    bizId?: string(name='BizId', example='LMALL20******008'),
    bizUid?: string(name='BizUid', example='22******3748'),
    description?: string(name='Description'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    idempotentId?: string(name='IdempotentId', example='202112******31746-1202'),
    name?: string(name='Name'),
    recordId?: string(name='RecordId', example='71******92'),
    rest?: long(name='Rest', example='2000'),
    ruleId?: string(name='RuleId', example='""'),
    status?: string(name='Status', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B320B'),
}

model FreezeUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FreezeUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FreezeUserPoint  FreezeUserPointRequest
  * @return FreezeUserPointResponse
 */
async function freezeUserPoint(request: FreezeUserPointRequest): FreezeUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeUserPoint', 'POST', '/', 'json', true, 'form', request);
}

model GetActivityGameInfoRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  activityId: string(name='ActivityId', description='This parameter is required.', example='673', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211224****', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Body'),
  gameId: string(name='GameId', description='This parameter is required.', example='673476420068894723', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='287384877****', position='Query'),
}

model GetActivityGameInfoResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    extInfo?: string(name='ExtInfo', example='{"key":"value"}'),
    gameDTO?: string(name='GameDTO'),
    gameShowInfo?: string(name='GameShowInfo'),
    userGameCoinInfos?: string(name='UserGameCoinInfos'),
    userProcessDTO?: string(name='UserProcessDTO'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED****'),
}

model GetActivityGameInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetActivityGameInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetActivityGameInfo  GetActivityGameInfoRequest
  * @return GetActivityGameInfoResponse
 */
async function getActivityGameInfo(request: GetActivityGameInfoRequest): GetActivityGameInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetActivityGameInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetCategoryChainRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******003', position='Query'),
  categoryId?: long(name='CategoryId', example='50012478', position='Query'),
  itemId?: long(name='ItemId', example='637284556514', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000055-609650881234', position='Query'),
}

model GetCategoryChainResponseBody = {
  categoryList?: [ 
    {
      categoryId?: long(name='CategoryId', example='12123'),
      name?: string(name='Name'),
    }
  ](name='CategoryList'),
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId'),
}

model GetCategoryChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCategoryChainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCategoryChain  GetCategoryChainRequest
  * @return GetCategoryChainResponse
 */
async function getCategoryChain(request: GetCategoryChainRequest): GetCategoryChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCategoryChain', 'POST', '/', 'json', false, 'json', request);
}

model GetCategoryListRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20*****08', position='Query'),
  categoryId?: long(name='CategoryId', example='50000852', position='Query'),
}

model GetCategoryListResponseBody = {
  categoryList?: {
    category?: [ 
    {
      categoryId?: long(name='CategoryId', example='12312312'),
      name?: string(name='Name'),
    }
  ](name='Category')
  }(name='CategoryList'),
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='96B4141C-A3CD-5162-B435-4780A75E3D97'),
}

model GetCategoryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCategoryListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCategoryList  GetCategoryListRequest
  * @return GetCategoryListResponse
 */
async function getCategoryList(request: GetCategoryListRequest): GetCategoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCategoryList', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomServiceUrlRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210315****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='220077837****', position='Query'),
  cuid?: string(name='Cuid', example='5512876', position='Query'),
  nick?: string(name='Nick', example='123213***1212', position='Query'),
  sellerId?: string(name='SellerId', example='220680193****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='220077837****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model GetCustomServiceUrlResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED****'),
  urlData?: {
    returnUrl?: string(name='ReturnUrl'),
  }(name='UrlData'),
}

model GetCustomServiceUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomServiceUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomServiceUrl  GetCustomServiceUrlRequest
  * @return GetCustomServiceUrlResponse
 */
async function getCustomServiceUrl(request: GetCustomServiceUrlRequest): GetCustomServiceUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomServiceUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetGuidePageRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2***100001', position='Query'),
}

model GetGuidePageResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  miniShopInfo?: [ 
    {
      bizId?: string(name='BizId', example='LMALL20211012****'),
      liteShopId?: string(name='LiteShopId', example='10000001'),
      name?: string(name='Name'),
      src?: string(name='Src'),
    }
  ](name='MiniShopInfo'),
  requestId?: string(name='RequestId', example='BA157565-3358-5D80-9330-************'),
}

model GetGuidePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGuidePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGuidePage  GetGuidePageRequest
  * @return GetGuidePageResponse
 */
async function getGuidePage(request: GetGuidePageRequest): GetGuidePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGuidePage', 'GET', '/', 'json', false, 'json', request);
}

model GetItemPromotionRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******003', position='Query'),
  itemId: long(name='ItemId', description='This parameter is required.', example='66262416****', minimum=0, maximum=9223372036854775807, position='Query'),
  lmItemId?: string(name='LmItemId', example='10000035-6193664*****', position='Query'),
}

model GetItemPromotionResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemPromotionModel?: {
    endTime?: string(name='EndTime', example='2022-02-06 10:01:00'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    itemId?: long(name='ItemId', example='66440412****'),
    lmItemId?: string(name='LmItemId', example='10000035-63064613****'),
    promotionDesc?: string(name='PromotionDesc', example='""'),
    promotionFlag?: boolean(name='PromotionFlag', example='true'),
    promotionId?: string(name='PromotionId', example='68476201884251****'),
    promotionName?: string(name='PromotionName'),
    skuPromotion?: map[string]any(name='SkuPromotion', example='{}'),
    startTime?: string(name='StartTime', example='2022-01-01 00:00:00'),
  }(name='ItemPromotionModel'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='7152F15C-7298-5531-9A76-2ED2C331****'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
}

model GetItemPromotionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetItemPromotionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetItemPromotion  GetItemPromotionRequest
  * @return GetItemPromotionResponse
 */
async function getItemPromotion(request: GetItemPromotionRequest): GetItemPromotionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetItemPromotion', 'POST', '/', 'json', false, 'json', request);
}

model GetLoginPageRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210830****', position='Query'),
  failUrl?: string(name='FailUrl', example='https://********', position='Body'),
  targetUrl?: string(name='TargetUrl', example='https://********', position='Body'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='287381784****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model GetLoginPageResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1267088B-4695-50DC-97B9-9E4F89D1****'),
  urlData?: {
    returnUrl?: string(name='ReturnUrl', example='https://**********'),
  }(name='UrlData'),
}

model GetLoginPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoginPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLoginPage  GetLoginPageRequest
  * @return GetLoginPageResponse
 */
async function getLoginPage(request: GetLoginPageRequest): GetLoginPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginPage', 'POST', '/', 'json', true, 'form', request);
}

model GetSwitchUrlRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211119****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221249435****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='221249435****', position='Query'),
  url: string(name='Url', description='This parameter is required.', position='Body'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model GetSwitchUrlResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='DAAA6391-3339-5333-9E4D-C71CD26A****'),
  url?: string(name='Url', example='https://*****************'),
}

model GetSwitchUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSwitchUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSwitchUrl  GetSwitchUrlRequest
  * @return GetSwitchUrlResponse
 */
async function getSwitchUrl(request: GetSwitchUrlRequest): GetSwitchUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSwitchUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetUserInfoRequest {
  appName: string(name='AppName', description='This parameter is required.', example='alipay', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  queryJson?: string(name='QueryJson', example='{}', position='Body'),
  userFlag: string(name='UserFlag', description='This parameter is required.', example='""', position='Query'),
}

model GetUserInfoResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  loginResult?: {
    bizId?: string(name='BizId', example='LMALL20******001'),
    bizUid?: string(name='BizUid', example='18******60'),
    bizUserName?: string(name='BizUserName', example='""'),
    extInfo?: map[string]any(name='ExtInfo', example='{}'),
    lmUserId?: long(name='LmUserId', example='10******3'),
    returnUrl?: string(name='ReturnUrl', example='""'),
    subBizId?: [ string ](name='SubBizId'),
  }(name='LoginResult'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='9054694D-E3AF-5A07-9647-0537026A45E1'),
}

model GetUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserInfo  GetUserInfoRequest
  * @return GetUserInfoResponse
 */
async function getUserInfo(request: GetUserInfoRequest): GetUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetUserTokenPageRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  expireSeconds: long(name='ExpireSeconds', description='This parameter is required.', example='86400', minimum=60, maximum=86400, position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******234', position='Query'),
  userNick?: string(name='UserNick', example='""', position='Query'),
}

model GetUserTokenPageResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    url?: string(name='Url', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='B7E4EF89-DBC3-5CD0-9993-02D8C13E7177'),
}

model GetUserTokenPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserTokenPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserTokenPage  GetUserTokenPageRequest
  * @return GetUserTokenPageResponse
 */
async function getUserTokenPage(request: GetUserTokenPageRequest): GetUserTokenPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserTokenPage', 'GET', '/', 'json', false, 'json', request);
}

model GetWithholdSignPageUrlRequest {
  deviceType?: string(name='DeviceType', example='""', position='Body'),
  extInfo?: string(name='ExtInfo', example='{}', position='Body'),
  externalAgreementNo?: string(name='ExternalAgreementNo', example='223******2637', position='Body'),
  identityParameters?: string(name='IdentityParameters', example='""', position='Body'),
  merchantId?: string(name='MerchantId', example='64******721', position='Body'),
  merchantServiceDescription?: string(name='MerchantServiceDescription', position='Body'),
  merchantServiceName?: string(name='MerchantServiceName', position='Body'),
  notifyUrl?: string(name='NotifyUrl', example='""', position='Body'),
  outRequestNo?: string(name='OutRequestNo', example='0AF7F437-C869-477D-A21A-CF402493FFFE', position='Body'),
  returnUrl?: string(name='ReturnUrl', example='""', position='Body'),
}

model GetWithholdSignPageUrlResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
  withholdSignResponse?: {
    outRequestNo?: string(name='OutRequestNo', example='0AF7F437-C869-477D-A21A-CF402493FFFE'),
    pageUrl?: string(name='PageUrl'),
  }(name='WithholdSignResponse'),
}

model GetWithholdSignPageUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWithholdSignPageUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWithholdSignPageUrl  GetWithholdSignPageUrlRequest
  * @return GetWithholdSignPageUrlResponse
 */
async function getWithholdSignPageUrl(request: GetWithholdSignPageUrlRequest): GetWithholdSignPageUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWithholdSignPageUrl', 'POST', '/', 'json', true, 'form', request);
}

model GiveUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  amount: long(name='Amount', description='This parameter is required.', example='1000', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******01', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{}', shrink='json', position='Body'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='20211212******1746-1202', position='Query'),
  message?: string(name='Message', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  targetBizUid: string(name='TargetBizUid', description='This parameter is required.', example='22******45', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******67', position='Query'),
  title: string(name='Title', description='This parameter is required.', position='Query'),
}

model GiveUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='11******18'),
    action?: string(name='Action', example='""'),
    amount?: long(name='Amount', example='1000'),
    bizId?: string(name='BizId', example='LMALL20******002'),
    bizUid?: string(name='BizUid', example='22******67'),
    description?: string(name='Description'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    idempotentId?: string(name='IdempotentId', example='20211212******1746-1202'),
    name?: string(name='Name'),
    recordId?: string(name='RecordId', example='""'),
    rest?: long(name='Rest', example='2000'),
    ruleId?: string(name='RuleId', example='136'),
    status?: string(name='Status', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='0854F82D-7912-52A1-8EF5-2D1662C50C36'),
}

model GiveUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GiveUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GiveUserPoint  GiveUserPointRequest
  * @return GiveUserPointResponse
 */
async function giveUserPoint(request: GiveUserPointRequest): GiveUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GiveUserPoint', 'POST', '/', 'json', true, 'form', request);
}

model GrantPromotionToUserRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211118****', position='Query'),
  expireSeconds?: long(name='ExpireSeconds', example='2554265', position='Query'),
  grantMode?: string(name='GrantMode', example='NORMAL', position='Query'),
  grantWay?: string(name='GrantWay', example='latour2', position='Query'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='20211212211381431746-1202', position='Query'),
  promotionId: string(name='PromotionId', description='This parameter is required.', example='66482394364783****', position='Query'),
  securityCode?: string(name='SecurityCode', example='6aa6ea6af00b453eafc3128d41858bf6', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', position='Query'),
  body?: map[string]any(name='body', shrink='json', position='Body'),
}

model GrantPromotionToUserResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='success'),
  model?: {
    effectiveEndTime?: long(name='EffectiveEndTime', example='12322333232'),
    effectiveStartTime?: long(name='EffectiveStartTime', example='123243444'),
    promotionInstanceId?: string(name='PromotionInstanceId', example='123456'),
    subBizCode?: string(name='SubBizCode', example='ef2b8********f824830b7e55a0dc5'),
    success?: boolean(name='Success', example='true'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model GrantPromotionToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantPromotionToUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantPromotionToUser  GrantPromotionToUserRequest
  * @return GrantPromotionToUserResponse
 */
async function grantPromotionToUser(request: GrantPromotionToUserRequest): GrantPromotionToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantPromotionToUser', 'POST', '/', 'json', true, 'form', request);
}

model GrantUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  amount: long(name='Amount', description='This parameter is required.', example='1000', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Body'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='202112******31746-1202', position='Query'),
  message?: string(name='Message', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******3527', position='Query'),
  title: string(name='Title', description='This parameter is required.', position='Query'),
}

model GrantUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='69******45'),
    action?: string(name='Action'),
    amount?: long(name='Amount', example='1000'),
    bizId?: string(name='BizId', example='LMALL20******002'),
    bizUid?: string(name='BizUid', example='22******3527'),
    description?: string(name='Description'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    idempotentId?: string(name='IdempotentId', example='202112******31746-1202'),
    name?: string(name='Name'),
    recordId?: string(name='RecordId', example='6529'),
    rest?: long(name='Rest', example='5000'),
    ruleId?: string(name='RuleId', example='136'),
    status?: string(name='Status'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model GrantUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantUserPoint  GrantUserPointRequest
  * @return GrantUserPointResponse
 */
async function grantUserPoint(request: GrantUserPointRequest): GrantUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantUserPoint', 'POST', '/', 'json', true, 'form', request);
}

model InitApplyRefundRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizClaimType: int32(name='BizClaimType', description='This parameter is required.', example='1', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='182******062', position='Query'),
  goodsStatus: int32(name='GoodsStatus', description='This parameter is required.', example='6', position='Query'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='51******13', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model InitApplyRefundResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  initApplyRefundData?: {
    bizClaimType?: int32(name='BizClaimType', example='1'),
    mainOrderRefund?: boolean(name='MainOrderRefund'),
    maxRefundFeeData?: {
      maxRefundFee?: int32(name='MaxRefundFee', example='100'),
      minRefundFee?: int32(name='MinRefundFee', example='10'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: {
      refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired', example='false'),
        reasonTextId?: long(name='ReasonTextId', example='500003'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired', example='true'),
      }
    ](name='RefundReasonList')
    }(name='RefundReasonList'),
  }(name='InitApplyRefundData'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='B7E4EF89-DBC3-5CD0-9993-02D8C13E7177'),
  subLmOrderId?: string(name='SubLmOrderId', example='38******75'),
}

model InitApplyRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitApplyRefundResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitApplyRefund  InitApplyRefundRequest
  * @return InitApplyRefundResponse
 */
async function initApplyRefund(request: InitApplyRefundRequest): InitApplyRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitApplyRefund', 'POST', '/', 'json', false, 'json', request);
}

model InitApplyRefundWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***001', position='Body'),
  disputeId?: long(name='DisputeId', example='14244***33071', position='Body'),
  refundCode: int32(name='RefundCode', description='This parameter is required.', example='1', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='711***981', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='334***641', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='u***001', position='Body'),
}

model InitApplyRefundWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    bizClaimType?: int32(name='BizClaimType', example='1'),
    lmOrderId?: string(name='LmOrderId', example='711***981'),
    mainOrderRefund?: boolean(name='MainOrderRefund', example='false'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee', example='10'),
      minRefundFee?: long(name='MinRefundFee', example='10'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired', example='false'),
        reasonTextId?: long(name='ReasonTextId', example='12323'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired', example='false'),
      }
    ](name='RefundReasonList'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='10'),
  pageSize?: long(name='PageSize', description='pageSize', example='1'),
  requestId?: string(name='RequestId', example='5BE45C12-C37***81-A8E9C61401AB'),
  subCode?: string(name='SubCode', example='201'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='10'),
}

model InitApplyRefundWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitApplyRefundWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitApplyRefundWithDesignatedTbUid  InitApplyRefundWithDesignatedTbUidRequest
  * @return InitApplyRefundWithDesignatedTbUidResponse
 */
async function initApplyRefundWithDesignatedTbUid(request: InitApplyRefundWithDesignatedTbUidRequest): InitApplyRefundWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitApplyRefundWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model InitModifyRefundRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizClaimType: int32(name='BizClaimType', description='This parameter is required.', example='1', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL202****11224', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='22112****2411', position='Query'),
  disputeId?: long(name='DisputeId', example='14244******33071', position='Query'),
  goodsStatus: int32(name='GoodsStatus', description='This parameter is required.', example='1', position='Query'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='23******85', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='221122411****231', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model InitModifyRefundResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  initApplyRefundData?: {
    bizClaimType?: int32(name='BizClaimType', example='3'),
    mainOrderRefund?: boolean(name='MainOrderRefund'),
    maxRefundFeeData?: {
      maxRefundFee?: int32(name='MaxRefundFee'),
      minRefundFee?: int32(name='MinRefundFee', example='10'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: {
      refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired', example='false'),
        reasonTextId?: long(name='ReasonTextId', example='500003'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired', example='true'),
      }
    ](name='RefundReasonList')
    }(name='RefundReasonList'),
  }(name='InitApplyRefundData'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='E090F1A0-7****454-5F36-933C-E6332CE2'),
  subLmOrderId?: string(name='SubLmOrderId', example='23******85'),
}

model InitModifyRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitModifyRefundResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitModifyRefund  InitModifyRefundRequest
  * @return InitModifyRefundResponse
 */
async function initModifyRefund(request: InitModifyRefundRequest): InitModifyRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitModifyRefund', 'POST', '/', 'json', false, 'json', request);
}

model InitModifyRefundWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***001', position='Body'),
  disputeId?: long(name='DisputeId', example='20196***0240', position='Body'),
  refundCode: int32(name='RefundCode', description='This parameter is required.', example='1', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='742***206', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='345***211', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='u***002', position='Body'),
}

model InitModifyRefundWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    bizClaimType?: int32(name='BizClaimType', example='1'),
    lmOrderId?: string(name='LmOrderId', example='742***206'),
    mainOrderRefund?: boolean(name='MainOrderRefund', example='false'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee', example='100'),
      minRefundFee?: long(name='MinRefundFee', example='10'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired', example='false'),
        reasonTextId?: long(name='ReasonTextId', example='12323'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired', example='false'),
      }
    ](name='RefundReasonList'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='1'),
  requestId?: string(name='RequestId', example='6EF1D7F7-64***EF5-5F004D3D4247'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model InitModifyRefundWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitModifyRefundWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitModifyRefundWithDesignatedTbUid  InitModifyRefundWithDesignatedTbUidRequest
  * @return InitModifyRefundWithDesignatedTbUidResponse
 */
async function initModifyRefundWithDesignatedTbUid(request: InitModifyRefundWithDesignatedTbUidRequest): InitModifyRefundWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitModifyRefundWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model ListActivityAtmosphereRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  activityId?: string(name='ActivityId', example='673', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  gameId?: string(name='GameId', example='671******37088', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=200, position='Query'),
  status?: string(name='Status', example='""', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******364', position='Query'),
}

model ListActivityAtmosphereResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      bizUid?: string(name='BizUid', example='22******37'),
      message?: string(name='Message', example='""'),
      status?: string(name='Status', example='""'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
  requestId?: string(name='RequestId', example='E090F1A0-7454-5F36-933C-E6332CE2****'),
  totalCount?: long(name='TotalCount', example='12'),
}

model ListActivityAtmosphereResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListActivityAtmosphereResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListActivityAtmosphere  ListActivityAtmosphereRequest
  * @return ListActivityAtmosphereResponse
 */
async function listActivityAtmosphere(request: ListActivityAtmosphereRequest): ListActivityAtmosphereResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListActivityAtmosphere', 'GET', '/', 'json', false, 'json', request);
}

model ListActivityGameInfoRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  activityId?: string(name='ActivityId', example='673', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  endTime?: long(name='EndTime', example='1639104750323', position='Query'),
  gameId?: string(name='GameId', example='6717******67874', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=200, position='Query'),
  startTime?: long(name='StartTime', example='1638104750323', position='Query'),
  status?: string(name='Status', example='""', position='Query'),
  statuses?: string(name='Statuses', example='[]', position='Query'),
  subType?: string(name='SubType', example='""', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******263', position='Query'),
  type?: string(name='Type', example='""', position='Query'),
}

model ListActivityGameInfoResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      extInfo?: string(name='ExtInfo', example='{"key":"value"}'),
      gameShowInfo?: string(name='GameShowInfo', example='""'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
  requestId?: string(name='RequestId', example='F1339E71-CB73-5440-BD39-1C98A8ED50E3'),
  totalCount?: long(name='TotalCount', example='19'),
}

model ListActivityGameInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListActivityGameInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListActivityGameInfo  ListActivityGameInfoRequest
  * @return ListActivityGameInfoResponse
 */
async function listActivityGameInfo(request: ListActivityGameInfoRequest): ListActivityGameInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListActivityGameInfo', 'GET', '/', 'json', false, 'json', request);
}

model ListItemActivitiesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  itemIds?: map[string]any(name='ItemIds', example='[664148141***,663735776***]', shrink='json', position='Query'),
  lmItemIds?: map[string]any(name='LmItemIds', example='[\\"10000230-60716881****\\",\\"10000021-59183191****\\"]', shrink='json', position='Query'),
}

model ListItemActivitiesResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmItemActivityModelList?: {
    lmItemActivityModel?: [ 
    {
      itemId?: long(name='ItemId', example='599520******'),
      lmActivityPopModel?: {
        bizId?: string(name='BizId', example='LMALL20******001'),
        displayDate?: string(name='DisplayDate', example='2022-03-31 14:25:00'),
        endDate?: string(name='EndDate', example='2022-04-04 00:00:00'),
        extInfo?: map[string]any(name='ExtInfo'),
        id?: long(name='Id', example='666'),
        startDate?: string(name='StartDate', example='2022-04-01 00:00:00'),
        subBizCode?: string(name='SubBizCode', example='4309074a******9d626669eaa7f7c'),
        title?: string(name='Title'),
      }(name='LmActivityPopModel'),
      lmItemId?: string(name='LmItemId', example='10000055-599520******'),
    }
  ](name='LmItemActivityModel')
  }(name='LmItemActivityModelList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model ListItemActivitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListItemActivitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListItemActivities  ListItemActivitiesRequest
  * @return ListItemActivitiesResponse
 */
async function listItemActivities(request: ListItemActivitiesRequest): ListItemActivitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListItemActivities', 'POST', '/', 'json', false, 'json', request);
}

model ListUserGameProcessRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  activityId?: string(name='ActivityId', example='673', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  endTime?: long(name='EndTime', example='1639017538838', position='Query'),
  gameId?: string(name='GameId', example='67347******4689', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=200, position='Query'),
  startTime?: long(name='StartTime', example='1637958044395', position='Query'),
  status?: string(name='Status', example='""', position='Query'),
  statuses?: string(name='Statuses', example='[]', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******352', position='Query'),
  type?: string(name='Type', example='""', position='Query'),
}

model ListUserGameProcessResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      activityId?: string(name='ActivityId', example='673'),
      createTime?: long(name='CreateTime', example='1638451941000'),
      currentShowContent?: string(name='CurrentShowContent', example='""'),
      currentStepId?: string(name='CurrentStepId', example='""'),
      currentStepStatus?: string(name='CurrentStepStatus', example='""'),
      desc?: string(name='Desc', example='""'),
      extInfo?: string(name='ExtInfo', example='{"key":"value"}'),
      gameId?: string(name='GameId', example='67347******4689'),
      modifyTime?: long(name='ModifyTime', example='1642662319000'),
      name?: string(name='Name', example='""'),
      processId?: string(name='ProcessId', example='1916'),
      routeId?: string(name='RouteId', example='619'),
      status?: string(name='Status', example='""'),
      type?: string(name='Type', example='""'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20'),
  requestId?: string(name='RequestId', example='07127DEC-D093-54B5-884A-29D49CBE95A5'),
  totalCount?: long(name='TotalCount', example='12'),
}

model ListUserGameProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGameProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGameProcess  ListUserGameProcessRequest
  * @return ListUserGameProcessResponse
 */
async function listUserGameProcess(request: ListUserGameProcessRequest): ListUserGameProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGameProcess', 'GET', '/', 'json', false, 'json', request);
}

model ListUserPointRecordsRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1638958044395', minimum=0, position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=200, position='Query'),
  pointAction?: string(name='PointAction', example='""', position='Query'),
  pointActions?: string(name='PointActions', position='Query'),
  recordId?: string(name='RecordId', example='""', position='Query'),
  ruleId?: string(name='RuleId', example='136', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1640958044395', minimum=0, position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******67', position='Query'),
}

model ListUserPointRecordsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      action?: string(name='Action'),
      amount?: long(name='Amount', example='1000'),
      createTime?: long(name='CreateTime', example='1638451941000'),
      description?: string(name='Description'),
      extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
      idempotentId?: string(name='IdempotentId', example='20211215******8117-1200'),
      modifyTime?: long(name='ModifyTime', example='1648451941000'),
      name?: string(name='Name'),
      recordId?: string(name='RecordId', example='5******4'),
      rest?: long(name='Rest'),
      ruleId?: string(name='RuleId', example='710'),
      status?: string(name='Status', example='""'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='199DFDCB-2225-5748-8D1A-528DD6C76563'),
  totalCount?: long(name='TotalCount', example='19'),
}

model ListUserPointRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserPointRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserPointRecords  ListUserPointRecordsRequest
  * @return ListUserPointRecordsResponse
 */
async function listUserPointRecords(request: ListUserPointRecordsRequest): ListUserPointRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserPointRecords', 'GET', '/', 'json', false, 'json', request);
}

model ModifyBasicAndBizItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2***100001', position='Query'),
  itemList: [ 
    {
      itemId?: long(name='ItemId', example='65671280****'),
      lmItemId?: string(name='LmItemId', example='10000035-61936646****'),
      skuList?: [ 
        {
          benefitId?: string(name='BenefitId', example='2021090800502200000086****'),
          points?: long(name='Points', example='1999'),
          pointsAmount?: long(name='PointsAmount', example='0'),
          priceCent?: long(name='PriceCent', example='2790'),
          quantity?: int32(name='Quantity', example='2000'),
          skuId?: long(name='SkuId', example='472461998****'),
          statusAction?: long(name='StatusAction', example='1'),
          supplierPrice?: long(name='SupplierPrice', example='2790'),
        }
      ](name='SkuList'),
    }
  ](name='ItemList', description='This parameter is required.', position='Body'),
  subBizId?: string(name='SubBizId', example='f4279b7cbdfc46d4b7566****', position='Query'),
}

model ModifyBasicAndBizItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  failedItemList?: {
    item?: [ 
    {
      itemId?: long(name='ItemId', example='65305223****'),
      lmItemId?: string(name='LmItemId', example='10000102-65305223****'),
      skuIdList?: {
        sku?: [ string ](name='Sku')
      }(name='SkuIdList'),
    }
  ](name='Item')
  }(name='FailedItemList'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', example='F957A835-87CE-5E5F-B0A9-A66B081E****'),
}

model ModifyBasicAndBizItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBasicAndBizItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBasicAndBizItems  ModifyBasicAndBizItemsRequest
  * @return ModifyBasicAndBizItemsResponse
 */
async function modifyBasicAndBizItems(request: ModifyBasicAndBizItemsRequest): ModifyBasicAndBizItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBasicAndBizItems', 'POST', '/', 'json', true, 'form', request);
}

model ModifyBasicItemSupplierPriceRequest {
  bizId?: string(name='BizId', example='LMALL20******001', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000****-6193664*****', position='Query'),
  lmShopId?: long(name='LmShopId', example='1002****', position='Query'),
  skuId?: long(name='SkuId', example='490073602****', position='Query'),
  supplierPrice?: long(name='SupplierPrice', example='4800', position='Query'),
}

model ModifyBasicItemSupplierPriceResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  model?: boolean(name='Model', example='true'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
}

model ModifyBasicItemSupplierPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBasicItemSupplierPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBasicItemSupplierPrice  ModifyBasicItemSupplierPriceRequest
  * @return ModifyBasicItemSupplierPriceResponse
 */
async function modifyBasicItemSupplierPrice(request: ModifyBasicItemSupplierPriceRequest): ModifyBasicItemSupplierPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBasicItemSupplierPrice', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBizItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211119****', position='Query'),
  itemList: [ 
    {
      itemId?: long(name='ItemId', example='62553137****'),
      lmItemId?: string(name='LmItemId', example='10000035-61936646****'),
      skuList?: [ 
        {
          benefitId?: string(name='BenefitId', example='202108181714875327'),
          points?: long(name='Points', example='1999'),
          pointsAmount?: long(name='PointsAmount', example='1290'),
          priceCent?: long(name='PriceCent', example='2790'),
          quantity?: int32(name='Quantity', example='20000'),
          skuId?: long(name='SkuId', example='472266643****'),
          statusAction?: long(name='StatusAction', example='1'),
        }
      ](name='SkuList'),
    }
  ](name='ItemList', description='This parameter is required.', position='Body'),
  subBizId?: string(name='SubBizId', example='12c6b6e98bb34475bcd38df73****', position='Query'),
}

model ModifyBizItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  failedItemList?: {
    item?: [ 
    {
      itemId?: long(name='ItemId', example='65305223****'),
      lmItemId?: string(name='LmItemId', example='10000102-65305223****'),
      skuIdList?: {
        sku?: [ string ](name='Sku')
      }(name='SkuIdList'),
    }
  ](name='Item')
  }(name='FailedItemList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='204F5C60-0B34-5718-AF93-9BD26B37****'),
  totalCount?: int32(name='TotalCount', example='19'),
}

model ModifyBizItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBizItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBizItems  ModifyBizItemsRequest
  * @return ModifyBizItemsResponse
 */
async function modifyBizItems(request: ModifyBizItemsRequest): ModifyBizItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBizItems', 'POST', '/', 'json', true, 'form', request);
}

model ModifyItemLimitRuleRequest {
  beginTime?: long(name='BeginTime', example='1639539460838', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  endTime?: long(name='EndTime', example='1648483200000', position='Query'),
  itemId?: long(name='ItemId', example='655******148', position='Query'),
  lmActivityId?: long(name='LmActivityId', example='679', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000055-******09839', position='Query'),
  ruleId: long(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  ruleType?: int32(name='RuleType', position='Query'),
  subBizCode?: string(name='SubBizCode', example='5ab43d1******41abdd23629bed001a0', position='Query'),
  upperNum?: int32(name='UpperNum', position='Query'),
}

model ModifyItemLimitRuleResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: boolean(name='Model'),
  requestId?: string(name='RequestId', example='BCB20091-68E0-5D29-BE90-125954BB58E2'),
}

model ModifyItemLimitRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyItemLimitRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyItemLimitRule  ModifyItemLimitRuleRequest
  * @return ModifyItemLimitRuleResponse
 */
async function modifyItemLimitRule(request: ModifyItemLimitRuleRequest): ModifyItemLimitRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyItemLimitRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOrderDeliveryAddressRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20190325****', position='Query'),
  deliveryAddress: string(name='DeliveryAddress', description='This parameter is required.', position='Query'),
  extJson?: string(name='ExtJson', example='{\\"mobileNo\\":\\"123****8965\\"}', position='Query'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='53396****', position='Query'),
}

model ModifyOrderDeliveryAddressResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  model?: {
    resultInfo?: map[string]any(name='ResultInfo'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B****'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='12'),
}

model ModifyOrderDeliveryAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOrderDeliveryAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyOrderDeliveryAddress  ModifyOrderDeliveryAddressRequest
  * @return ModifyOrderDeliveryAddressResponse
 */
async function modifyOrderDeliveryAddress(request: ModifyOrderDeliveryAddressRequest): ModifyOrderDeliveryAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOrderDeliveryAddress', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRefundRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  applyReasonTextId?: long(name='ApplyReasonTextId', example='500325', position='Query'),
  applyRefundCount?: int32(name='ApplyRefundCount', example='1', position='Query'),
  applyRefundFee: long(name='ApplyRefundFee', description='This parameter is required.', example='790', position='Query'),
  bizClaimType: int32(name='BizClaimType', description='This parameter is required.', example='1', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='220635******232', position='Query'),
  disputeId?: long(name='DisputeId', example='14244******33071', position='Query'),
  goodsStatus?: int32(name='GoodsStatus', example='4', position='Query'),
  leaveMessage?: string(name='LeaveMessage', position='Body'),
  leavePictureList?: [ 
    {
      desc?: string(name='Desc'),
      picture?: string(name='Picture', example='https://lm-dk.oss-cn-hangzhou.aliyuncs.com/1635738731345.png'),
    }
  ](name='LeavePictureList', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='38******75', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='220635******232', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model ModifyRefundResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  refundApplicationData?: {
    disputeStatus?: int32(name='DisputeStatus', example='1'),
    disputeType?: int32(name='DisputeType', example='0'),
    subLmOrderId?: string(name='SubLmOrderId', example='37******31'),
  }(name='RefundApplicationData'),
  requestId?: string(name='RequestId', example='A7BE4356-7F92-533E-A31B-****2D67'),
}

model ModifyRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRefundResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRefund  ModifyRefundRequest
  * @return ModifyRefundResponse
 */
async function modifyRefund(request: ModifyRefundRequest): ModifyRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRefund', 'POST', '/', 'json', true, 'form', request);
}

model ModifyRefundWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', position='Body'),
  disputeId?: long(name='DisputeId', position='Body'),
  goodsStatus: int32(name='GoodsStatus', description='This parameter is required.', position='Body'),
  message?: string(name='Message', position='Body'),
  proofs?: [ 
    {
      messagePic?: string(name='MessagePic'),
      messagePicDesc?: string(name='MessagePicDesc'),
    }
  ](name='Proofs', shrink='json', position='Body'),
  reasonId: long(name='ReasonId', description='This parameter is required.', position='Body'),
  refundCode: int32(name='RefundCode', description='This parameter is required.', position='Body'),
  refundCount?: int32(name='RefundCount', position='Body'),
  refundFee: long(name='RefundFee', description='This parameter is required.', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', position='Body'),
  tbUserId?: long(name='TbUserId', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', position='Body'),
}

model ModifyRefundWithDesignatedTbUidResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    subLmOrderId?: string(name='SubLmOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ModifyRefundWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRefundWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRefundWithDesignatedTbUid  ModifyRefundWithDesignatedTbUidRequest
  * @return ModifyRefundWithDesignatedTbUidResponse
 */
async function modifyRefundWithDesignatedTbUid(request: ModifyRefundWithDesignatedTbUidRequest): ModifyRefundWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRefundWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model ModifySettleAccountRequest {
  accountChannel?: string(name='AccountChannel', example='bank', position='Body'),
  accountId?: string(name='AccountId', example='1766******9951934', position='Body'),
  accountName?: string(name='AccountName', position='Body'),
  accountNo?: string(name='AccountNo', example='123******000', position='Body'),
  accountPayType?: string(name='AccountPayType', example='transferIn', position='Body'),
  accountType?: string(name='AccountType', example='company', position='Body'),
  bizId?: string(name='BizId', example='LMALL20******001', position='Body'),
  countryOrAreaCode?: string(name='CountryOrAreaCode', example='HK', position='Body'),
  currency?: string(name='Currency', example='CNY', position='Body'),
  extInfo?: string(name='ExtInfo', position='Body'),
  idempotentId?: string(name='IdempotentId', example='202112******31746-1202', position='Body'),
}

model ModifySettleAccountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message'),
  model?: {
    accountId?: string(name='AccountId', example='69******45'),
    accountNo?: string(name='AccountNo', example='15******65'),
    id?: string(name='Id', example='F-7805***B4A4A2762'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='5127621C-****-5DCA-9745-2936B31DFD12'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
}

model ModifySettleAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySettleAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySettleAccount  ModifySettleAccountRequest
  * @return ModifySettleAccountResponse
 */
async function modifySettleAccount(request: ModifySettleAccountRequest): ModifySettleAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySettleAccount', 'POST', '/', 'json', true, 'form', request);
}

model ModifySupplierPriceAndPriceCentRequest {
  bizId?: string(name='BizId', example='LMALL20220713****', position='Query'),
  lmItemId?: string(name='LmItemId', example='10026780-55789045****', position='Query'),
  lmShopId?: string(name='LmShopId', example='1002****', position='Query'),
  priceCent?: string(name='PriceCent', example='4880', position='Query'),
  skuId?: string(name='SkuId', example='490073602****', position='Query'),
  supplierPrice?: string(name='SupplierPrice', example='10', position='Query'),
}

model ModifySupplierPriceAndPriceCentResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='The bizId or lmOrderId is mandatory for this action.'),
  model?: boolean(name='Model', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='F1339E71-CB73-5440-BD39-1C98A8ED50E3'),
}

model ModifySupplierPriceAndPriceCentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySupplierPriceAndPriceCentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySupplierPriceAndPriceCent  ModifySupplierPriceAndPriceCentRequest
  * @return ModifySupplierPriceAndPriceCentResponse
 */
async function modifySupplierPriceAndPriceCent(request: ModifySupplierPriceAndPriceCentRequest): ModifySupplierPriceAndPriceCentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySupplierPriceAndPriceCent', 'POST', '/', 'json', false, 'json', request);
}

model OpenRealTbAccountSupportRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***002', position='Body'),
}

model OpenRealTbAccountSupportResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: any(name='Model', example='[]'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='1'),
  requestId?: string(name='RequestId', example='6103AD7B-2***0-579DA58D08E8'),
  subCode?: string(name='SubCode', example='201'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model OpenRealTbAccountSupportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenRealTbAccountSupportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenRealTbAccountSupport  OpenRealTbAccountSupportRequest
  * @return OpenRealTbAccountSupportResponse
 */
async function openRealTbAccountSupport(request: OpenRealTbAccountSupportRequest): OpenRealTbAccountSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenRealTbAccountSupport', 'POST', '/', 'json', true, 'form', request);
}

model PushUserGameProcessRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  currentStepId: string(name='CurrentStepId', description='This parameter is required.', example='""', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{\\"gmtCreate\\":\\"2022-01-01 00:00:00\\"}', shrink='json', position='Body'),
  processId: string(name='ProcessId', description='This parameter is required.', example='6734******4397953', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******343', position='Query'),
  body?: map[string]any(name='body', example='{\\"orderNo\\":\\"20211204211241160338-120\\",\\"serialNumber\\":\\"0\\",\\"voucherId\\":\\"202112040007300238170AD22N26\\",\\"userId\\":\\"2088312906117381\\"}', shrink='json', position='Body'),
}

model PushUserGameProcessResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='Success'),
  model?: {
    activityId?: string(name='ActivityId', example='123'),
    currentShowContent?: string(name='CurrentShowContent', example='""'),
    currentStepId?: string(name='CurrentStepId', example='""'),
    currentStepStatus?: string(name='CurrentStepStatus', example='""'),
    desc?: string(name='Desc', example='""'),
    extInfo?: string(name='ExtInfo', example='{"key":"value"}'),
    gameId?: string(name='GameId', example='67176******67874'),
    name?: string(name='Name', example='""'),
    processId?: string(name='ProcessId', example='6734******4397953'),
    routeId?: string(name='RouteId', example='RouteId_1'),
    status?: string(name='Status', example='""'),
    type?: string(name='Type', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model PushUserGameProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushUserGameProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushUserGameProcess  PushUserGameProcessRequest
  * @return PushUserGameProcessResponse
 */
async function pushUserGameProcess(request: PushUserGameProcessRequest): PushUserGameProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushUserGameProcess', 'POST', '/', 'json', true, 'form', request);
}

model QueryActivityItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2000***12', position='Query'),
  lmActivityId: long(name='LmActivityId', description='This parameter is required.', example='679', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=20, position='Query'),
}

model QueryActivityItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmActivityItemModelList?: {
    lmActivityItemModel?: [ 
    {
      canSell?: boolean(name='CanSell', example='true'),
      itemActivityQuantity?: int32(name='ItemActivityQuantity', example='-1'),
      itemActivityStatus?: string(name='ItemActivityStatus'),
      itemId?: long(name='ItemId', example='65332479****'),
      itemTitle?: string(name='ItemTitle'),
      lmActivityId?: long(name='LmActivityId', example='679'),
      lmItemId?: string(name='LmItemId', example='10006138-63786616****'),
      lmShopId?: string(name='LmShopId', example='1002****'),
      mainPicUrl?: string(name='MainPicUrl'),
      sellableQuantity?: int32(name='SellableQuantity', example='200'),
      skuModelList?: {
        lmActivityItemSkuModel?: [ 
        {
          activityPrice?: long(name='ActivityPrice', example='1990'),
          activityStatus?: string(name='ActivityStatus'),
          bizId?: string(name='BizId', example='LMALL20211013****'),
          itemId?: long(name='ItemId', example='64092072****'),
          lmActivityId?: long(name='LmActivityId', example='679'),
          lmItemId?: string(name='LmItemId', example='10000035-63064613****'),
          reservedPrice?: long(name='ReservedPrice', example='2990'),
          skuId?: long(name='SkuId', description='skuID', example='478531731****'),
          skuPicUrl?: string(name='SkuPicUrl'),
          skuTitle?: string(name='SkuTitle'),
          tips?: string(name='Tips'),
        }
      ](name='LmActivityItemSkuModel')
      }(name='SkuModelList'),
      tbSellerId?: long(name='TbSellerId', example='285278****'),
      tbShopId?: long(name='TbShopId', example='13089****'),
      tbShopName?: string(name='TbShopName'),
      tips?: string(name='Tips'),
    }
  ](name='LmActivityItemModel')
  }(name='LmActivityItemModelList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='539E5C68-D8B5-57EC-9D9B-58AFD9E0****'),
  totalCount?: long(name='TotalCount', example='12'),
}

model QueryActivityItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryActivityItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryActivityItems  QueryActivityItemsRequest
  * @return QueryActivityItemsResponse
 */
async function queryActivityItems(request: QueryActivityItemsRequest): QueryActivityItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryActivityItems', 'POST', '/', 'json', false, 'json', request);
}

model QueryAddressRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL202106040001', position='Query'),
  divisionCode?: string(name='DivisionCode', example='510132', position='Query'),
  ip?: string(name='Ip', example='113.77.105.73', position='Query'),
}

model QueryAddressResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  divisionAddress?: {
    divisionAddress?: [ 
    {
      divisionCode?: long(name='DivisionCode', example='210211019'),
      divisionLevel?: int32(name='DivisionLevel', example='1'),
      divisionName?: string(name='DivisionName'),
      parentId?: long(name='ParentId', example='30226760'),
    }
  ](name='DivisionAddress')
  }(name='DivisionAddress'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='1A0D9B6B-EBEA-5B7C-B10D-C4455F842637'),
}

model QueryAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAddress  QueryAddressRequest
  * @return QueryAddressResponse
 */
async function queryAddress(request: QueryAddressRequest): QueryAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAddress', 'POST', '/', 'json', false, 'json', request);
}

model QueryAddressDetailRequest {
  addressInfo?: string(name='AddressInfo', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2******01', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryAddressDetailResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  deliveryAddress?: {
    addressDetail?: string(name='AddressDetail', example='********************'),
    addressId?: long(name='AddressId', example='313312207'),
    area?: string(name='Area', example='fujian'),
    city?: string(name='City'),
    country?: string(name='Country', example='CN'),
    divisionCode?: string(name='DivisionCode', example='321112104'),
    fullName?: string(name='FullName'),
    mobile?: string(name='Mobile', example='18941288583'),
    postCode?: string(name='PostCode', example='518055'),
    province?: string(name='Province'),
    status?: int32(name='Status', example='0'),
    town?: string(name='Town'),
    townDivisionCode?: string(name='TownDivisionCode'),
  }(name='DeliveryAddress'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
}

model QueryAddressDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAddressDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAddressDetail  QueryAddressDetailRequest
  * @return QueryAddressDetailResponse
 */
async function queryAddressDetail(request: QueryAddressDetailRequest): QueryAddressDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAddressDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryAddressListRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2***100001', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='12312', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryAddressListResponseBody = {
  addressList?: [ 
    {
      addressDetail?: string(name='AddressDetail', example='*********************'),
      addressId?: long(name='AddressId', example='314304607'),
      area?: string(name='Area', example='xianggang'),
      city?: string(name='City'),
      country?: string(name='Country', example='CN'),
      divisionCode?: string(name='DivisionCode', example='230921'),
      fullName?: string(name='FullName'),
      mobile?: string(name='Mobile', example='18611921898'),
      postCode?: string(name='PostCode', example='323050'),
      province?: string(name='Province'),
      status?: int32(name='Status', example='1'),
      town?: string(name='Town'),
      townDivisionCode?: string(name='TownDivisionCode'),
    }
  ](name='AddressList'),
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model QueryAddressListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAddressListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAddressList  QueryAddressListRequest
  * @return QueryAddressListResponse
 */
async function queryAddressList(request: QueryAddressListRequest): QueryAddressListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAddressList', 'POST', '/', 'json', false, 'json', request);
}

model QueryAdvertisementSettleInfoRequest {
  bizId?: string(name='BizId', example='LMALL20******006', position='Query'),
  channelId?: string(name='ChannelId', example='5781******561', position='Query'),
  endTime?: string(name='EndTime', example='2021-08-01 01:00:00', position='Query'),
  extInfo?: string(name='ExtInfo', example='{"key":"value"}', position='Query'),
  mediaSettleDetailId?: string(name='MediaSettleDetailId', example='""', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  settleNo?: string(name='SettleNo', example='TEST000000', position='Query'),
  startTime?: string(name='StartTime', example='2021-08-01 00:00:00', position='Query'),
}

model QueryAdvertisementSettleInfoResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    advertiseSettleInfoList?: [ 
      {
        advertiseName?: string(name='AdvertiseName', example='""'),
        advertiseSettleAmount?: string(name='AdvertiseSettleAmount', example='1000'),
        advertiseSettleDetailId?: string(name='AdvertiseSettleDetailId', example='""'),
        channelId?: string(name='ChannelId', example='5781******561'),
        createDate?: string(name='CreateDate', example='2021-09-11 10:00:00'),
        endTime?: string(name='EndTime', example='2021-09-11 10:01:00'),
        extInfo?: string(name='ExtInfo', example='{}'),
        mediaSettleDetailId?: string(name='MediaSettleDetailId', example='""'),
        modifiedDate?: string(name='ModifiedDate', example='2021-09-11 10:01:00'),
        settleNo?: string(name='SettleNo', example='TEST000000'),
        settleStatus?: string(name='SettleStatus', example='""'),
        startTime?: string(name='StartTime', example='2021-09-11 10:00:00'),
      }
    ](name='AdvertiseSettleInfoList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='D94987AE-2290-5084-AA34-53C50A245AFA'),
  subCode?: string(name='SubCode', example='206'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model QueryAdvertisementSettleInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAdvertisementSettleInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAdvertisementSettleInfo  QueryAdvertisementSettleInfoRequest
  * @return QueryAdvertisementSettleInfoResponse
 */
async function queryAdvertisementSettleInfo(request: QueryAdvertisementSettleInfoRequest): QueryAdvertisementSettleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAdvertisementSettleInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryAgreementRequest {
  agreementNo?: string(name='AgreementNo', example='20******8006', position='Body'),
  externalAgreementNo?: string(name='ExternalAgreementNo', example='""', position='Body'),
  merchantId?: string(name='MerchantId', example='""', position='Body'),
}

model QueryAgreementResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  queryAgreementResponse?: {
    agreementNo?: string(name='AgreementNo', example='20******8006'),
    externalAgreementNo?: string(name='ExternalAgreementNo', example='""'),
    invalidTime?: string(name='InvalidTime', example='2022-08-01 00:00:00'),
    signTime?: string(name='SignTime', example='2021-08-01 00:00:00'),
    status?: string(name='Status', example='""'),
    validTime?: string(name='ValidTime', example='2021-08-01 00:00:00'),
  }(name='QueryAgreementResponse'),
  requestId?: string(name='RequestId', example='DAAA6391-3339-5333-9E4D-C71CD26A231F'),
}

model QueryAgreementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAgreementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAgreement  QueryAgreementRequest
  * @return QueryAgreementResponse
 */
async function queryAgreement(request: QueryAgreementRequest): QueryAgreementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAgreement', 'POST', '/', 'json', true, 'form', request);
}

model QueryAllCinemasRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  cityCode: long(name='CityCode', description='This parameter is required.', example='330100', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
}

model QueryAllCinemasResponseBody = {
  cinemas?: {
    cinema?: [ 
    {
      address?: string(name='Address', example='""'),
      cinemaName?: string(name='CinemaName', example='""'),
      cityId?: long(name='CityId', example='330100'),
      cityName?: string(name='CityName'),
      id?: long(name='Id', example='153'),
      latitude?: string(name='Latitude', example='""'),
      longitude?: string(name='Longitude', example='""'),
      phone?: string(name='Phone', example='""'),
      scheduleCloseTime?: long(name='ScheduleCloseTime', example='15'),
      standardId?: string(name='StandardId', example='42112601'),
    }
  ](name='Cinema')
  }(name='Cinemas'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model QueryAllCinemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllCinemasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAllCinemas  QueryAllCinemasRequest
  * @return QueryAllCinemasResponse
 */
async function queryAllCinemas(request: QueryAllCinemasRequest): QueryAllCinemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllCinemas', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllCitiesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  extJson?: map[string]any(name='ExtJson', example='{}', shrink='json', position='Query'),
}

model QueryAllCitiesResponseBody = {
  cities?: {
    city?: [ 
    {
      cityCode?: long(name='CityCode', example='110100'),
      id?: long(name='Id', example='424'),
      name?: string(name='Name'),
      parentId?: long(name='ParentId', example='110000'),
      pinYin?: string(name='PinYin', example='beijing'),
    }
  ](name='City')
  }(name='Cities'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model QueryAllCitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllCitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAllCities  QueryAllCitiesRequest
  * @return QueryAllCitiesResponse
 */
async function queryAllCities(request: QueryAllCitiesRequest): QueryAllCitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllCities', 'POST', '/', 'json', false, 'json', request);
}

model QueryBatchRegistAnonymousTbAccountResultRequest {
  batchId: string(name='BatchId', description='This parameter is required.', example='10418*******', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210125****', position='Query'),
}

model QueryBatchRegistAnonymousTbAccountResultResponseBody = {
  batchId?: string(name='BatchId', example='10418*******'),
  code?: string(name='Code', example='SUCCESS'),
  failIds?: {
    failId?: [ string ](name='FailId')
  }(name='FailIds'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B****'),
  status?: string(name='Status', example='SUCCESS'),
}

model QueryBatchRegistAnonymousTbAccountResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBatchRegistAnonymousTbAccountResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBatchRegistAnonymousTbAccountResult  QueryBatchRegistAnonymousTbAccountResultRequest
  * @return QueryBatchRegistAnonymousTbAccountResultResponse
 */
async function queryBatchRegistAnonymousTbAccountResult(request: QueryBatchRegistAnonymousTbAccountResultRequest): QueryBatchRegistAnonymousTbAccountResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBatchRegistAnonymousTbAccountResult', 'POST', '/', 'json', false, 'json', request);
}

model QueryBestSession4ItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211118****', position='Query'),
  itemIds?: map[string]any(name='ItemIds', example='[63928655****,65314637****,65771454****]', shrink='json', position='Query'),
  lmItemIds?: map[string]any(name='LmItemIds', example='[\\"10000791-65975997****\\"]', shrink='json', position='Query'),
}

model QueryBestSession4ItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmItemActivitySessionModelList?: {
    lmItemActivitySessionModel?: [ 
    {
      itemId?: long(name='ItemId', example='66440412****'),
      lmActivitySessionModel?: {
        bizId?: string(name='BizId', example='LMALL20190325****'),
        description?: string(name='Description', example='""'),
        displayDate?: string(name='DisplayDate', example='2022-03-09 18:59:59'),
        endDate?: string(name='EndDate', example='2022-03-09 18:59:59'),
        extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
        lmActivityId?: long(name='LmActivityId', example='679'),
        lmSessionId?: long(name='LmSessionId', example='679'),
        name?: string(name='Name'),
        startDate?: string(name='StartDate', example='2021-12-25 09:07:00'),
        subBizCode?: string(name='SubBizCode', example='cf5eddd467ca4d4a8105378a3ea****'),
      }(name='LmActivitySessionModel'),
      lmItemId?: string(name='LmItemId', example='10000102-65875550****'),
    }
  ](name='LmItemActivitySessionModel')
  }(name='LmItemActivitySessionModelList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='DA2554FD-F21F-536F-A7B7-B96C3E5F****'),
}

model QueryBestSession4ItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBestSession4ItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBestSession4Items  QueryBestSession4ItemsRequest
  * @return QueryBestSession4ItemsResponse
 */
async function queryBestSession4Items(request: QueryBestSession4ItemsRequest): QueryBestSession4ItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBestSession4Items', 'POST', '/', 'json', false, 'json', request);
}

model QueryBizItemListRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211202****', position='Query'),
  categoryId?: long(name='CategoryId', example='50003449', position='Query'),
  itemIds?: map[string]any(name='ItemIds', example='[63524643****]', shrink='json', position='Query'),
  lmItemIds?: map[string]any(name='LmItemIds', example='[\\"10000791-65975997****\\"]', shrink='json', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  subBizId?: string(name='SubBizId', example='sQuuSHY*************', position='Query'),
  userId?: string(name='UserId', example='2114255235****', position='Query'),
}

model QueryBizItemListResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: {
    item?: [ 
    {
      canSell?: boolean(name='CanSell', example='true'),
      categoryId?: long(name='CategoryId', example='50050579'),
      customizedItemName?: string(name='CustomizedItemName'),
      extJson?: string(name='ExtJson', example='""'),
      itemId?: long(name='ItemId', example='64944233****'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId', example='10000102-65931326****'),
      mainPicUrl?: string(name='MainPicUrl'),
      reservePrice?: long(name='ReservePrice', example='2990'),
      sellerId?: long(name='SellerId', example='284324****'),
      skuList?: {
        sku?: [ 
        {
          benefitId?: string(name='BenefitId', example='202109240050220000008822****'),
          canSell?: boolean(name='CanSell', example='true'),
          customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
          gradePriceModels?: {
            gradePriceModel?: [ 
            {
              accessUrl?: string(name='AccessUrl'),
              canBuy?: boolean(name='CanBuy'),
              characteristicCode?: string(name='CharacteristicCode'),
              characteristicName?: string(name='CharacteristicName'),
              exclusive?: boolean(name='Exclusive'),
              icon?: string(name='Icon'),
              pointPrice?: long(name='PointPrice'),
              points?: long(name='Points', example='2990'),
              pointsAmount?: long(name='PointsAmount', example='2990'),
              priceCent?: long(name='PriceCent'),
              recommend?: boolean(name='Recommend'),
              showName?: string(name='ShowName'),
              subBizCode?: string(name='SubBizCode'),
              userLabelList?: {
                userLabelList?: [ string ](name='UserLabelList')
              }(name='UserLabelList'),
            }
          ](name='GradePriceModel')
          }(name='GradePriceModels'),
          points?: long(name='Points', example='2990'),
          pointsAmount?: long(name='PointsAmount', example='2990'),
          priceCent?: long(name='PriceCent', example='1990'),
          skuId?: long(name='SkuId', example='482694857****'),
          skuPicUrl?: string(name='SkuPicUrl'),
          skuTitle?: string(name='SkuTitle'),
          taoBaoCurrentPrice?: long(name='TaoBaoCurrentPrice', example='4990'),
          userLabelList?: {
            userLabelList?: [ string ](name='UserLabelList')
          }(name='UserLabelList'),
        }
      ](name='Sku')
      }(name='SkuList'),
      taobaoShopName?: string(name='TaobaoShopName'),
    }
  ](name='Item')
  }(name='ItemList'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='5B9B6D8D-A78D-521D-B6B6-08CDC182****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model QueryBizItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBizItemListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBizItemList  QueryBizItemListRequest
  * @return QueryBizItemListResponse
 */
async function queryBizItemList(request: QueryBizItemListRequest): QueryBizItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBizItemList', 'POST', '/', 'json', false, 'json', request);
}

model QueryBizItemListV2Request {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210802****', position='Query'),
  categoryId?: long(name='CategoryId', example='5001****', position='Query'),
  itemIds?: [ long ](name='ItemIds', shrink='json', position='Query'),
  lmItemIds?: [ string ](name='LmItemIds', shrink='json', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=20, position='Query'),
  subBizId?: string(name='SubBizId', example='db18296d3e56417c8817acf43bfd****', position='Query'),
  userId?: string(name='UserId', example='214123553****', position='Query'),
}

model QueryBizItemListV2ResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: {
    item?: [ 
    {
      canSell?: boolean(name='CanSell', example='true'),
      categoryId?: long(name='CategoryId', example='50014741'),
      customizedItemName?: string(name='CustomizedItemName'),
      extJson?: string(name='ExtJson', example='""'),
      itemId?: long(name='ItemId', example='60843842****'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId', example='10001031-61382859****'),
      mainPicUrl?: string(name='MainPicUrl'),
      reservePrice?: long(name='ReservePrice', example='4990'),
      sellerId?: long(name='SellerId', example='220868858****'),
      skuList?: {
        sku?: [ 
        {
          benefitId?: string(name='BenefitId', example='202110260050220000009154****'),
          canSell?: boolean(name='CanSell', example='true'),
          customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
          gradePriceModels?: {
            gradePriceModel?: [ 
            {
              accessUrl?: string(name='AccessUrl'),
              canBuy?: boolean(name='CanBuy'),
              characteristicCode?: string(name='CharacteristicCode'),
              characteristicName?: string(name='CharacteristicName'),
              exclusive?: boolean(name='Exclusive'),
              icon?: string(name='Icon'),
              pointPrice?: long(name='PointPrice'),
              points?: long(name='Points', example='2990'),
              pointsAmount?: long(name='PointsAmount', example='0'),
              priceCent?: long(name='PriceCent', example='2990'),
              recommend?: boolean(name='Recommend'),
              showName?: string(name='ShowName'),
              subBizCode?: string(name='SubBizCode', example='c7cd01774ad24fe08fbda01e9****'),
              userLabelList?: {
                userLabelList?: [ string ](name='UserLabelList')
              }(name='UserLabelList'),
            }
          ](name='GradePriceModel')
          }(name='GradePriceModels'),
          points?: long(name='Points', example='0'),
          pointsAmount?: long(name='PointsAmount', example='2190'),
          priceCent?: long(name='PriceCent', example='4990'),
          skuId?: long(name='SkuId', example='464704439****'),
          skuPicUrl?: string(name='SkuPicUrl'),
          skuTitle?: string(name='SkuTitle'),
          taoBaoCurrentPrice?: long(name='TaoBaoCurrentPrice', example='4990'),
          userLabelList?: {
            userLabelList?: [ string ](name='UserLabelList')
          }(name='UserLabelList'),
        }
      ](name='Sku')
      }(name='SkuList'),
      taobaoShopName?: string(name='TaobaoShopName'),
    }
  ](name='Item')
  }(name='ItemList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='5A5D5396-AFA0-56A3-86E5-13AB4C80****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model QueryBizItemListV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBizItemListV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBizItemListV2  QueryBizItemListV2Request
  * @return QueryBizItemListV2Response
 */
async function queryBizItemListV2(request: QueryBizItemListV2Request): QueryBizItemListV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBizItemListV2', 'POST', '/', 'json', false, 'json', request);
}

model QueryBizItemListWithCacheRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211119****', position='Query'),
  itemIds: [ long ](name='ItemIds', description='This parameter is required.', shrink='json', position='Query'),
  lmItemIds?: [ string ](name='LmItemIds', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  subBizCode: string(name='SubBizCode', description='This parameter is required.', example='7ddaba53d5be4173808f2335eac0****', position='Query'),
}

model QueryBizItemListWithCacheResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: [ 
    {
      canSell?: boolean(name='CanSell', example='true'),
      itemId?: long(name='ItemId', example='65671280****'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId', example='10000102-64373376****'),
      mainPicUrl?: string(name='MainPicUrl'),
      pointPrice?: long(name='PointPrice', example='4990'),
      points?: long(name='Points', example='4990'),
      pointsAmount?: long(name='PointsAmount', example='4990'),
      priceCent?: long(name='PriceCent', example='4990'),
      reservePrice?: long(name='ReservePrice', example='9990'),
      status?: long(name='Status', example='1'),
    }
  ](name='ItemList'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='F2D3CA1E-28BE-5E1C-B55F-81C8F290****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='13'),
}

model QueryBizItemListWithCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBizItemListWithCacheResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBizItemListWithCache  QueryBizItemListWithCacheRequest
  * @return QueryBizItemListWithCacheResponse
 */
async function queryBizItemListWithCache(request: QueryBizItemListWithCacheRequest): QueryBizItemListWithCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBizItemListWithCache', 'GET', '/', 'json', false, 'json', request);
}

model QueryBizItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  subBizId?: string(name='SubBizId', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model QueryBizItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: string(name='Model'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='96B4141C-A3CD-5162-B435-4780A75E3D97'),
  totalCount?: int32(name='TotalCount', example='19'),
}

model QueryBizItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBizItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBizItems  QueryBizItemsRequest
  * @return QueryBizItemsResponse
 */
async function queryBizItems(request: QueryBizItemsRequest): QueryBizItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBizItems', 'POST', '/', 'json', false, 'json', request);
}

model QueryBizItemsWithActivityRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL201903220001', position='Query'),
  itemIds?: map[string]any(name='ItemIds', example='[\\"60716881****\\",\\"59183191****\\"]', shrink='json', position='Query'),
  lmItemIds?: map[string]any(name='LmItemIds', example='[\\"10000230-60716881****\\",\\"10000021-59183191****\\"]', shrink='json', position='Query'),
}

model QueryBizItemsWithActivityResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: {
    item?: [ 
    {
      activities?: {
        activity?: [ 
        {
          activityItem?: {
            activityItemSkuList?: {
              activityItemSku?: [ 
              {
                activityPrice?: long(name='ActivityPrice', example='990'),
                skuId?: long(name='SkuId', description='skuId', example='471******57'),
              }
            ](name='ActivityItemSku')
            }(name='ActivityItemSkuList'),
            activityQuantity?: long(name='ActivityQuantity', example='-1'),
            limitQuantityForPerson?: long(name='LimitQuantityForPerson', example='1'),
          }(name='ActivityItem'),
          activitySessions?: {
            activitySession?: [ 
            {
              activitySessionItem?: {
                activitySessionItemSkuList?: {
                  points?: long(name='Points', example='159'),
                  pointsAmount?: long(name='PointsAmount', example='0'),
                  priceCent?: long(name='PriceCent', example='2990'),
                  skuId?: long(name='SkuId', description='skuId', example='471******57'),
                }(name='ActivitySessionItemSkuList'),
                limitQuantityForPerson?: long(name='LimitQuantityForPerson', example='2'),
                saleableQuantity?: long(name='SaleableQuantity', example='888'),
                sessionQuantity?: long(name='SessionQuantity', example='888'),
              }(name='ActivitySessionItem'),
              description?: string(name='Description', example='""'),
              displayDate?: long(name='DisplayDate', example='1633412800000'),
              endDate?: long(name='EndDate', example='1639412800000'),
              lmSessionId?: long(name='LmSessionId', example='329'),
              startDate?: long(name='StartDate', example='1634412800000'),
              subBizCode?: string(name='SubBizCode', example='5fbbd94******4345f6c37166fb'),
              title?: string(name='Title'),
            }
          ](name='ActivitySession')
          }(name='ActivitySessions'),
          description?: string(name='Description'),
          endDate?: long(name='EndDate', example='1642412800000'),
          lmActivityId?: long(name='LmActivityId', example='679'),
          startDate?: long(name='StartDate', example='1632412800000'),
          title?: string(name='Title'),
        }
      ](name='Activity')
      }(name='Activities'),
      categoryId?: long(name='CategoryId', example='50018977'),
      itemId?: long(name='ItemId', example='60716881****'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId', example='10000230-60716881****'),
      maxAllowedCount?: int32(name='MaxAllowedCount', example='-1'),
      picUrl?: string(name='PicUrl', example='https://img.alicdn.com/******.jpg'),
      quantity?: long(name='Quantity', example='1000'),
      reservePrice?: long(name='ReservePrice', example='2990'),
      sellerId?: long(name='SellerId', example='284324****'),
      skuList?: {
        sku?: [ 
        {
          maxAllowedCount?: int32(name='MaxAllowedCount', example='1000'),
          points?: long(name='Points', example='69'),
          pointsAmount?: long(name='PointsAmount', example='0'),
          pointsInfo?: string(name='PointsInfo'),
          pointsKey?: string(name='PointsKey'),
          priceCent?: long(name='PriceCent', example='2790'),
          quantity?: long(name='Quantity', example='500'),
          skuId?: long(name='SkuId', description='skuId', example='472266643****'),
          status?: long(name='Status', example='1'),
        }
      ](name='Sku')
      }(name='SkuList'),
      taobaoShopName?: string(name='TaobaoShopName'),
      totalSoldQuantity?: int32(name='TotalSoldQuantity', example='900'),
    }
  ](name='Item')
  }(name='ItemList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1A0D9B6B-EBEA-5B7C-B10D-C4455F842637'),
}

model QueryBizItemsWithActivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBizItemsWithActivityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBizItemsWithActivity  QueryBizItemsWithActivityRequest
  * @return QueryBizItemsWithActivityResponse
 */
async function queryBizItemsWithActivity(request: QueryBizItemsWithActivityRequest): QueryBizItemsWithActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBizItemsWithActivity', 'GET', '/', 'json', false, 'json', request);
}

model QueryBudgetTicketItemListByBizIdRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******003', position='Query'),
  budgetTicketNo?: string(name='BudgetTicketNo', example='20******-4', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
}

model QueryBudgetTicketItemListByBizIdResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      invalid?: boolean(name='Invalid', example='true'),
      itemId?: long(name='ItemId', example='65******0310'),
      poCode?: string(name='PoCode', example='""'),
      promotionId?: string(name='PromotionId', example='68442******012'),
      remnantAmount?: long(name='RemnantAmount', example='10000'),
      securityCode?: string(name='SecurityCode', example='c26be******86e5a61cc710cdb'),
      settlementPrice?: long(name='SettlementPrice', example='100'),
      skuId?: long(name='SkuId', example='47******76529'),
      subsidyAmount?: long(name='SubsidyAmount', example='10'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='26F4B2C7-931F-5AC5-8FCC-AE76C9B00D2F'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='16'),
}

model QueryBudgetTicketItemListByBizIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBudgetTicketItemListByBizIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBudgetTicketItemListByBizId  QueryBudgetTicketItemListByBizIdRequest
  * @return QueryBudgetTicketItemListByBizIdResponse
 */
async function queryBudgetTicketItemListByBizId(request: QueryBudgetTicketItemListByBizIdRequest): QueryBudgetTicketItemListByBizIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBudgetTicketItemListByBizId', 'POST', '/', 'json', false, 'json', request);
}

model QueryChannelItemBillDownloadUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  billId?: string(name='BillId', example='BILL-10000007371****', position='Body'),
  billPeriod?: string(name='BillPeriod', example='2022-11', position='Body'),
  billStatus?: string(name='BillStatus', example='billGenerated', position='Body'),
  bizId?: string(name='BizId', example='LMALL20******001', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  lmShopId?: long(name='LmShopId', example='1002****', position='Body'),
  lmShopName?: string(name='LmShopName', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  tenantId?: string(name='TenantId', example='12***29', position='Body'),
}

model QueryChannelItemBillDownloadUrlResponseBody = {
  code?: string(name='Code', example='200'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='The TenantId or BillPeriod is mandatory for this action.'),
  model?: {
    data?: [ 
      {
        billId?: string(name='BillId', example='BILL-10000014****3410148'),
        fileDownloadUrl?: string(name='FileDownloadUrl', example='http://linkedmall-product.oss-cn-hangzhou.aliyuncs.com/LMALL2*****60001/2619709162****'),
        message?: string(name='Message'),
      }
    ](name='Data'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='685'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='5127621C-****-5DCA-9745-2936B31DFD12'),
}

model QueryChannelItemBillDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChannelItemBillDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryChannelItemBillDownloadUrl  QueryChannelItemBillDownloadUrlRequest
  * @return QueryChannelItemBillDownloadUrlResponse
 */
async function queryChannelItemBillDownloadUrl(request: QueryChannelItemBillDownloadUrlRequest): QueryChannelItemBillDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChannelItemBillDownloadUrl', 'POST', '/', 'json', true, 'form', request);
}

model QueryGuideItemGroupRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='test01', position='Query'),
  itemState?: string(name='ItemState', example='AVAILABLE_FOR_SALE', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model QueryGuideItemGroupResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  guideItemGroup?: {
    itemInfo?: [ 
    {
      itemId?: long(name='ItemId', example='66******1055'),
      itemTitle?: string(name='ItemTitle'),
      itemUrl?: string(name='ItemUrl'),
      lmItemId?: string(name='LmItemId', example='10001036-******0492928'),
      mainPicUrl?: string(name='MainPicUrl'),
      pointPrice?: long(name='PointPrice', example='990'),
      points?: long(name='Points', example='69'),
      pointsAmount?: long(name='PointsAmount', example='0'),
      priceCent?: long(name='PriceCent', example='990'),
      reservePrice?: string(name='ReservePrice', example='20.0'),
    }
  ](name='ItemInfo')
  }(name='GuideItemGroup'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1B82570B-7167-5D41-A74F-CD8DC2C54A49'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
}

model QueryGuideItemGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGuideItemGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryGuideItemGroup  QueryGuideItemGroupRequest
  * @return QueryGuideItemGroupResponse
 */
async function queryGuideItemGroup(request: QueryGuideItemGroupRequest): QueryGuideItemGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGuideItemGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryGuideItemGroupForCrowdOperationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId?: string(name='BizId', example='LMALL20211119****', position='Query'),
  groupId?: string(name='GroupId', example='taojinbi-shang******', position='Query'),
  itemState?: string(name='ItemState', example='ALL', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  userFlag?: string(name='UserFlag', example='level1', position='Query'),
}

model QueryGuideItemGroupForCrowdOperationResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      atmospherePicUrl?: string(name='AtmospherePicUrl'),
      canSell?: boolean(name='CanSell', example='true'),
      customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap'),
      itemId?: string(name='ItemId', example='65******0310'),
      itemTitle?: string(name='ItemTitle'),
      itemUrl?: string(name='ItemUrl', example='https://******.aliyun-inc.com/#/assistant?targetTab=TAB_GM_FAIL&regionId=9&startTime=2022-08-22%2000:00:00&endTime=2022-08-22%2018:06:01&appIds=408'),
      lmItemId?: string(name='LmItemId', example='10000102-630292778855'),
      mainPicUrl?: string(name='MainPicUrl'),
      pointPrice?: long(name='PointPrice'),
      points?: long(name='Points', example='3980'),
      pointsAmount?: long(name='PointsAmount', example='8000'),
      priceCent?: long(name='PriceCent', example='780'),
      reservePrice?: string(name='ReservePrice', example='1035'),
      tags?: [ int32 ](name='Tags'),
      whitePicUrl?: string(name='WhitePicUrl'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='45B9EF4E-4D18-59B2-85E6-9B568F73C79D'),
  subCode?: string(name='SubCode', example='206'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='80'),
}

model QueryGuideItemGroupForCrowdOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGuideItemGroupForCrowdOperationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryGuideItemGroupForCrowdOperation  QueryGuideItemGroupForCrowdOperationRequest
  * @return QueryGuideItemGroupForCrowdOperationResponse
 */
async function queryGuideItemGroupForCrowdOperation(request: QueryGuideItemGroupForCrowdOperationRequest): QueryGuideItemGroupForCrowdOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGuideItemGroupForCrowdOperation', 'POST', '/', 'json', false, 'json', request);
}

model QueryGuideItemGroupWithOutInventoryRequest {
  bizId?: string(name='BizId', example='LMALL20211206****', position='Query'),
  groupId?: string(name='GroupId', example='taojinbi-shang******', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model QueryGuideItemGroupWithOutInventoryResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: [ 
    {
      customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap'),
      itemId?: string(name='ItemId', example='62785263****'),
      itemTitle?: string(name='ItemTitle'),
      itemUrl?: string(name='ItemUrl', example='https://detail.tmall.com/item.htm?id=670600584601&spm=a21y2.8291224.2879496.9.c6e23569FJRVmu&skuId=500049906****'),
      lmItemId?: string(name='LmItemId', example='10006515-64348848****'),
      mainPicUrl?: string(name='MainPicUrl'),
      pointPrice?: long(name='PointPrice', example='4990'),
      points?: long(name='Points', example='0'),
      pointsAmount?: long(name='PointsAmount', example='0'),
      priceCent?: long(name='PriceCent', example='4990'),
      reservePrice?: string(name='ReservePrice', example='5990'),
      tags?: [ string ](name='Tags'),
      whitePicUrl?: string(name='WhitePicUrl'),
    }
  ](name='ItemList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='A7BE4356-7F92-533E-A31B-2EBF2D67****'),
  totalCount?: long(name='TotalCount', example='19'),
}

model QueryGuideItemGroupWithOutInventoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGuideItemGroupWithOutInventoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryGuideItemGroupWithOutInventory  QueryGuideItemGroupWithOutInventoryRequest
  * @return QueryGuideItemGroupWithOutInventoryResponse
 */
async function queryGuideItemGroupWithOutInventory(request: QueryGuideItemGroupWithOutInventoryRequest): QueryGuideItemGroupWithOutInventoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGuideItemGroupWithOutInventory', 'GET', '/', 'json', false, 'json', request);
}

model QueryHotMoviesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  cityCode: long(name='CityCode', description='This parameter is required.', example='310100', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
}

model QueryHotMoviesResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  movies?: {
    movie?: [ 
    {
      backgroundPicture?: string(name='BackgroundPicture', example='""'),
      country?: string(name='Country', example='""'),
      description?: string(name='Description', example='""'),
      director?: string(name='Director', example='""'),
      duration?: long(name='Duration', example='190'),
      highlight?: string(name='Highlight', example='""'),
      id?: long(name='Id', example='5790'),
      language?: string(name='Language', example='""'),
      leadingRole?: string(name='LeadingRole', example='""'),
      movieName?: string(name='MovieName', example='""'),
      movieNameEn?: string(name='MovieNameEn', example='""'),
      movieTypeList?: {
        movieTypeList?: [ string ](name='MovieTypeList')
      }(name='MovieTypeList'),
      movieVersion?: string(name='MovieVersion', example='""'),
      openDay?: string(name='OpenDay', example='2022-04-01 12:00:00'),
      openTime?: string(name='OpenTime', example='2022-04-01 12:00:00'),
      poster?: string(name='Poster', example='""'),
      remark?: string(name='Remark', example='9.7'),
      trailerList?: {
        trailerList?: [ string ](name='TrailerList')
      }(name='TrailerList'),
      type?: string(name='Type'),
    }
  ](name='Movie')
  }(name='Movies'),
  requestId?: string(name='RequestId', example='1AF23E47-D8FB-576A-B069-CA98B4DE****'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
}

model QueryHotMoviesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryHotMoviesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryHotMovies  QueryHotMoviesRequest
  * @return QueryHotMoviesResponse
 */
async function queryHotMovies(request: QueryHotMoviesRequest): QueryHotMoviesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHotMovies', 'POST', '/', 'json', false, 'json', request);
}

model QueryInventoryOfItemsInBizItemGroupRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  divisionCode?: string(name='DivisionCode', example='510132', position='Query'),
  itemIds?: [ long ](name='ItemIds', shrink='json', position='Query'),
  lmItemIds?: [ string ](name='LmItemIds', shrink='json', position='Query'),
  subBizId: string(name='SubBizId', description='This parameter is required.', example='52847******1a58205d3ce5e9328', position='Query'),
}

model QueryInventoryOfItemsInBizItemGroupResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: [ 
    {
      itemId?: long(name='ItemId', example='******058233'),
      lmItemId?: string(name='LmItemId', example='10016572-******058233'),
      quantity?: int32(name='Quantity', example='10000'),
      skuList?: [ 
        {
          quantity?: int32(name='Quantity', example='4100'),
          skuId?: long(name='SkuId', example='467******9928'),
        }
      ](name='SkuList'),
      totalQuantity?: long(name='TotalQuantity', example='5000'),
      totalSoldQuantity?: long(name='TotalSoldQuantity', example='900'),
    }
  ](name='ItemList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='0F380CB1-BE49-5DF7-B128-63CADB3A12A3'),
}

model QueryInventoryOfItemsInBizItemGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInventoryOfItemsInBizItemGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryInventoryOfItemsInBizItemGroup  QueryInventoryOfItemsInBizItemGroupRequest
  * @return QueryInventoryOfItemsInBizItemGroupResponse
 */
async function queryInventoryOfItemsInBizItemGroup(request: QueryInventoryOfItemsInBizItemGroupRequest): QueryInventoryOfItemsInBizItemGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInventoryOfItemsInBizItemGroup', 'GET', '/', 'json', false, 'json', request);
}

model QueryItemDetailRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20201228****', position='Query'),
  itemId: long(name='ItemId', description='This parameter is required.', example='62501739****', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000035-61936646****', position='Query'),
}

model QueryItemDetailResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  item?: {
    canSell?: boolean(name='CanSell', example='true'),
    categoryId?: long(name='CategoryId', example='5001****'),
    centerInventory?: boolean(name='CenterInventory', example='true'),
    customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
    descOption?: string(name='DescOption'),
    descPath?: string(name='DescPath'),
    extJson?: string(name='ExtJson', example='{}'),
    iforestProps?: string(name='IforestProps', example='[]'),
    iforestPropsJson?: string(name='IforestPropsJson', example='{}'),
    isCanSell?: boolean(name='IsCanSell', example='true'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee', example='true'),
    itemId?: long(name='ItemId', example='64407904****'),
    itemImages?: {
      itemImage?: [ string ](name='ItemImage')
    }(name='ItemImages'),
    itemTitle?: string(name='ItemTitle'),
    lmItemCategory?: string(name='LmItemCategory', example='entity'),
    lmItemId?: string(name='LmItemId', example='10000043-64818014****'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPoints?: long(name='MinPoints', example='2990'),
    minPrice?: long(name='MinPrice', example='2990'),
    properties?: string(name='Properties', example='{}'),
    propertiesJson?: string(name='PropertiesJson', example='{}'),
    quantity?: int32(name='Quantity', example='1'),
    reservePrice?: long(name='ReservePrice', example='4990'),
    sellerId?: long(name='SellerId', example='424414****'),
    sellerPayPostfee?: boolean(name='SellerPayPostfee', example='true'),
    sellerType?: int32(name='SellerType', example='0'),
    skus?: {
      sku?: [ 
      {
        canSell?: boolean(name='CanSell', example='true'),
        customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
        extJson?: string(name='ExtJson', example='{}'),
        itemId?: long(name='ItemId', example='63894836****'),
        lmItemId?: string(name='LmItemId', example='10000102-64426301****'),
        pointPrice?: long(name='PointPrice', example='4990'),
        points?: long(name='Points', example='2499'),
        pointsAmount?: long(name='PointsAmount', example='4490'),
        priceCent?: long(name='PriceCent', example='4990'),
        quantity?: int32(name='Quantity', example='1'),
        reservePrice?: long(name='ReservePrice', example='4490'),
        skuId?: long(name='SkuId', example='456458315****'),
        skuPicUrl?: string(name='SkuPicUrl'),
        skuProperties?: string(name='SkuProperties'),
        skuPropertiesJson?: string(name='SkuPropertiesJson', example='{}'),
        skuTitle?: string(name='SkuTitle'),
      }
    ](name='Sku')
    }(name='Skus'),
    tbShopName?: string(name='TbShopName'),
    totalSoldQuantity?: int32(name='TotalSoldQuantity', example='199'),
    videoPicUrl?: string(name='VideoPicUrl'),
    videoUrl?: string(name='VideoUrl'),
  }(name='Item'),
  message?: string(name='Message', example='BizItemGroup [LMALL20210830****] has not the item [65728655****].'),
  requestId?: string(name='RequestId', example='E46C790E-B1F2-51EF-B6F8-B52404B5****'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model QueryItemDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemDetail  QueryItemDetailRequest
  * @return QueryItemDetailResponse
 */
async function queryItemDetail(request: QueryItemDetailRequest): QueryItemDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryItemDetailInnerRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2021081*****', position='Query'),
  bizUid?: string(name='BizUid', example='9f99f38030254728***', position='Query'),
  divisionCode?: string(name='DivisionCode', example='510132', position='Query'),
  ip?: string(name='Ip', example='49.93.0.222', position='Query'),
  itemId: long(name='ItemId', description='This parameter is required.', example='61358168****', position='Query'),
  lmItemId?: string(name='LmItemId', example='10000055-58233812****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='9f99f38030254728***', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryItemDetailInnerResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  item?: {
    canSell?: boolean(name='CanSell', example='true'),
    categoryId?: long(name='CategoryId', example='20177****'),
    categoryIds?: [ long ](name='CategoryIds'),
    centerInventory?: boolean(name='CenterInventory', example='true'),
    city?: string(name='City'),
    descOption?: string(name='DescOption', example='"<p><img align=\\"absmiddle\\" src=\\"https://img.alicdn.com/imgextra/i1/1742262291/O1CN01j0oO3L1SnK7EwwXP4_!!1742262291.jpg\\" style=\\"max-width: none;width: 750.0px;\\">"'),
    descPath?: string(name='DescPath'),
    firstPicUrl?: string(name='FirstPicUrl'),
    iforestProps?: [  map[string]any ](name='IforestProps'),
    isCanSell?: boolean(name='IsCanSell', example='true'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee', example='true'),
    itemId?: long(name='ItemId', example='60646253****'),
    itemImages?: [ string ](name='ItemImages'),
    itemTitle?: string(name='ItemTitle'),
    lmItemCategory?: string(name='LmItemCategory', example='entity'),
    lmShopId?: long(name='LmShopId', example='1002****'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPoints?: long(name='MinPoints', example='2990'),
    minPrice?: long(name='MinPrice', example='1990'),
    properties?: map[string]any(name='Properties', example='{}'),
    province?: string(name='Province'),
    quantity?: int32(name='Quantity', example='5000'),
    reservePrice?: long(name='ReservePrice', example='2990'),
    sellerId?: long(name='SellerId', example='329488****'),
    sellerNick?: string(name='SellerNick'),
    sellerPayPostfee?: boolean(name='SellerPayPostfee', example='true'),
    skuPropertys?: [ 
      {
        id?: long(name='Id'),
        text?: string(name='Text'),
        values?: [ 
          {
            id?: long(name='Id'),
            text?: string(name='Text'),
          }
        ](name='Values'),
      }
    ](name='SkuPropertys'),
    skus?: [ 
      {
        extJson?: string(name='ExtJson', example='{"key":"value"}'),
        itemId?: long(name='ItemId', example='62887962****'),
        lmItemId?: string(name='LmItemId', example='10000102-64426301****'),
        pointPrice?: long(name='PointPrice', example='2990'),
        points?: long(name='Points', example='1990'),
        pointsAmount?: long(name='PointsAmount', example='0'),
        priceCent?: long(name='PriceCent', example='2890'),
        quantity?: int32(name='Quantity', example='4100'),
        reservePrice?: long(name='ReservePrice', example='1990'),
        skuDesc?: string(name='SkuDesc', example='""'),
        skuId?: long(name='SkuId', description='skuid', example='465309897****'),
        skuPicUrl?: string(name='SkuPicUrl'),
        skuPvs?: string(name='SkuPvs'),
        skuTitle?: string(name='SkuTitle'),
        status?: int32(name='Status', example='2'),
      }
    ](name='Skus'),
    tbShopName?: string(name='TbShopName'),
    totalSoldQuantity?: int32(name='TotalSoldQuantity', example='1999'),
  }(name='Item'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='BA157565-3358-5D80-9330-************'),
}

model QueryItemDetailInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemDetailInnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemDetailInner  QueryItemDetailInnerRequest
  * @return QueryItemDetailInnerResponse
 */
async function queryItemDetailInner(request: QueryItemDetailInnerRequest): QueryItemDetailInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemDetailInner', 'POST', '/', 'json', false, 'json', request);
}

model QueryItemDetailTeaRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20211013****', position='Query'),
  bizUid?: string(name='BizUid', position='Query'),
  divisionCode?: string(name='DivisionCode', position='Query'),
  ip?: string(name='Ip', position='Query'),
  itemId: long(name='ItemId', description='This parameter is required.', example='66644894****', position='Query'),
  lmItemId?: string(name='LmItemId', example='10001036-66644894****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', position='Query'),
  userFlag?: string(name='UserFlag', position='Query'),
}

model QueryItemDetailTeaResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  item?: {
    canNotBeSoldCode?: string(name='CanNotBeSoldCode'),
    canNotBeSoldMassage?: string(name='CanNotBeSoldMassage'),
    canSell?: boolean(name='CanSell', example='true'),
    categoryId?: long(name='CategoryId', example='20177****'),
    centerInventory?: boolean(name='CenterInventory', example='true'),
    customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
    descOption?: string(name='DescOption', example='"<p><img align=\\"absmiddle\\" src=\\"https://img.alicdn.com/imgextra/i1/1742262291/O1CN01j0oO3L1SnK7EwwXP4_!!1742262291.jpg\\" style=\\"max-width: none;width: 750.0px;\\">"'),
    descPath?: string(name='DescPath'),
    extJson?: string(name='ExtJson', example='{\\"delivery_version\\":\\"1\\"}'),
    firstPicUrl?: string(name='FirstPicUrl'),
    hasQuantity?: boolean(name='HasQuantity'),
    iforestProps?: {
      iforestProp?: [  map[string]any ](name='IforestProp')
    }(name='IforestProps'),
    isCanSell?: boolean(name='IsCanSell', example='true'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee', example='true'),
    itemId?: long(name='ItemId', example='60646253****'),
    itemImages?: {
      itemImage?: [ string ](name='ItemImage')
    }(name='ItemImages'),
    itemTitle?: string(name='ItemTitle'),
    itemTotalSimpleValue?: string(name='ItemTotalSimpleValue'),
    lmItemCategory?: string(name='LmItemCategory', example='entity'),
    lmItemId?: string(name='LmItemId', example='10000035-61936646****'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPoints?: long(name='MinPoints', example='2990'),
    minPrice?: long(name='MinPrice', example='1990'),
    properties?: map[string]any(name='Properties', example='{}'),
    quantity?: int32(name='Quantity', example='1'),
    reservePrice?: long(name='ReservePrice', example='2990'),
    sellerId?: long(name='SellerId', example='329488****'),
    sellerPayPostfee?: boolean(name='SellerPayPostfee', example='true'),
    sellerType?: int32(name='SellerType', example='0'),
    simpleQuantity?: string(name='SimpleQuantity'),
    skus?: {
      sku?: [ 
      {
        canNotBeSoldCode?: string(name='CanNotBeSoldCode'),
        canNotBeSoldMassage?: string(name='CanNotBeSoldMassage'),
        canSell?: boolean(name='CanSell', example='true'),
        customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
        extJson?: string(name='ExtJson', example='{\\"delivery_version\\":\\"1\\"}'),
        hasQuantity?: boolean(name='HasQuantity', example='true'),
        itemId?: long(name='ItemId', example='62887962****'),
        lmItemId?: string(name='LmItemId', example='10000102-64426301****'),
        pointPrice?: long(name='PointPrice', example='2990'),
        points?: long(name='Points', example='1990'),
        pointsAmount?: long(name='PointsAmount', example='0'),
        priceCent?: long(name='PriceCent', example='2890'),
        quantity?: int32(name='Quantity', example='4'),
        reservePrice?: long(name='ReservePrice', example='1990'),
        simpleQuantity?: string(name='SimpleQuantity', example='“”'),
        skuId?: long(name='SkuId', example='465309897****'),
        skuPicUrl?: string(name='SkuPicUrl'),
        skuProperties?: map[string]any(name='SkuProperties', example='{}'),
        skuTitle?: string(name='SkuTitle'),
      }
    ](name='Sku')
    }(name='Skus'),
    tbShopName?: string(name='TbShopName'),
    totalSoldQuantity?: int32(name='TotalSoldQuantity', example='1999'),
    totalSoldSimpleQuantity?: string(name='TotalSoldSimpleQuantity'),
    videoPicUrl?: string(name='VideoPicUrl'),
    videoUrl?: string(name='VideoUrl'),
  }(name='Item'),
  message?: string(name='Message', example='The specified parameter lmItemId or itemId value is not valid.'),
  requestId?: string(name='RequestId', example='BA157565-3358-5D80-9330-************'),
  subCode?: string(name='SubCode', example='""'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
}

model QueryItemDetailTeaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemDetailTeaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemDetailTea  QueryItemDetailTeaRequest
  * @return QueryItemDetailTeaResponse
 */
async function queryItemDetailTea(request: QueryItemDetailTeaRequest): QueryItemDetailTeaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemDetailTea', 'POST', '/', 'json', false, 'json', request);
}

model QueryItemInSubBizsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20201229****', position='Query'),
  itemId?: long(name='ItemId', example='57835029****', position='Query'),
  lmItemId?: string(name='LmItemId', example='10001036-66644894****', position='Query'),
  subBizIds?: map[string]any(name='SubBizIds', example='["id1","id2"]', shrink='json', position='Query'),
}

model QueryItemInSubBizsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemBizList?: [ 
    {
      canSell?: boolean(name='CanSell', example='true'),
      categoryId?: long(name='CategoryId', example='50444021'),
      descOption?: string(name='DescOption', example='""'),
      itemId?: long(name='ItemId', example='62503849****'),
      itemImages?: [ string ](name='ItemImages'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId', example='10006484-64668317****'),
      mainPicUrl?: string(name='MainPicUrl'),
      propertiesJson?: string(name='PropertiesJson', example='{}'),
      quantity?: long(name='Quantity', example='1'),
      reservePrice?: long(name='ReservePrice', example='2990'),
      sellerId?: long(name='SellerId', example='329488****'),
      skuList?: [ 
        {
          benefitId?: string(name='BenefitId', example='202201050050220000000190****'),
          canSell?: boolean(name='CanSell', example='true'),
          customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap', example='{}'),
          pointPrice?: long(name='PointPrice', example='0'),
          points?: long(name='Points', example='4299'),
          pointsAmount?: long(name='PointsAmount', example='0'),
          priceCent?: long(name='PriceCent', example='1290'),
          reservePrice?: long(name='ReservePrice', example='2990'),
          skuId?: long(name='SkuId', example='474820025****'),
          skuPicUrl?: string(name='SkuPicUrl'),
          skuProperties?: string(name='SkuProperties', example='""'),
          skuPropertiesJson?: string(name='SkuPropertiesJson', example='""'),
          skuTitle?: string(name='SkuTitle'),
        }
      ](name='SkuList'),
      subBizId?: string(name='SubBizId', example='9f65e0905a544924b3cda147f28b****'),
      tbShopName?: string(name='TbShopName'),
    }
  ](name='ItemBizList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='DFBA1CD4-197E-51BB-A8CE-3A136D0B****'),
}

model QueryItemInSubBizsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemInSubBizsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemInSubBizs  QueryItemInSubBizsRequest
  * @return QueryItemInSubBizsResponse
 */
async function queryItemInSubBizs(request: QueryItemInSubBizsRequest): QueryItemInSubBizsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemInSubBizs', 'GET', '/', 'json', false, 'json', request);
}

model QueryItemInventoryRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2******002', position='Query'),
  divisionCode: string(name='DivisionCode', description='This parameter is required.', example='410503006', position='Query'),
  ip?: string(name='Ip', example='113.77.105.73', position='Query'),
  itemList: [ 
    {
      itemId?: long(name='ItemId', example='630730743485'),
      lmItemId?: string(name='LmItemId', example='10000710-635764300767'),
      skuIdList?: [ long ](name='SkuIdList'),
    }
  ](name='ItemList', description='This parameter is required.', position='Query'),
}

model QueryItemInventoryResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: {
    item?: [ 
    {
      itemId?: long(name='ItemId', example='631145057663'),
      lmItemId?: string(name='LmItemId', example='10000710-635764300767'),
      skuList?: {
        sku?: [ 
        {
          inventory?: {
            quantity?: long(name='Quantity', example='1'),
          }(name='Inventory'),
          skuId?: long(name='SkuId', description='skuId', example='4901251235576'),
        }
      ](name='Sku')
      }(name='SkuList'),
    }
  ](name='Item')
  }(name='ItemList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1F2E68C6-FD20-5121-89FF-65F555EE1F15'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='True'),
}

model QueryItemInventoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemInventoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemInventory  QueryItemInventoryRequest
  * @return QueryItemInventoryResponse
 */
async function queryItemInventory(request: QueryItemInventoryRequest): QueryItemInventoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemInventory', 'POST', '/', 'json', false, 'json', request);
}

model QueryItemInventoryV2Request {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******01', position='Query'),
  divisionCode: string(name='DivisionCode', description='This parameter is required.', example='520300', position='Query'),
  ip?: string(name='Ip', example='113.77.105.73', position='Query'),
  itemList: [ 
    {
      itemId?: long(name='ItemId', example='60843842****'),
      lmItemId?: string(name='LmItemId', example='10000035-61936646****'),
      skuIdList?: [ long ](name='SkuIdList'),
    }
  ](name='ItemList', description='This parameter is required.', position='Query'),
}

model QueryItemInventoryV2ResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  itemList?: {
    item?: [ 
    {
      itemId?: long(name='ItemId', example='65671280****'),
      lmItemId?: string(name='LmItemId', example='10016572-654408058233'),
      skuList?: {
        sku?: [ 
        {
          inventory?: {
            quantity?: long(name='Quantity', example='10'),
          }(name='Inventory'),
          skuId?: long(name='SkuId', description='skuid', example='482694857****'),
        }
      ](name='Sku')
      }(name='SkuList'),
    }
  ](name='Item')
  }(name='ItemList'),
  message?: string(name='Message', example='The bizId or lmOrderId is mandatory for this action.'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
  subCode?: string(name='SubCode', example='207'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='SUCCESS'),
}

model QueryItemInventoryV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemInventoryV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemInventoryV2  QueryItemInventoryV2Request
  * @return QueryItemInventoryV2Response
 */
async function queryItemInventoryV2(request: QueryItemInventoryV2Request): QueryItemInventoryV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemInventoryV2', 'POST', '/', 'json', false, 'json', request);
}

model QueryItemNextCycleRestrictionRequest {
  bizId: string(name='BizId', description='This parameter is required.', position='Query'),
  lmItemId: [ string ](name='LmItemId', description='This parameter is required.', shrink='json', position='Body'),
  subBizId?: string(name='SubBizId', position='Query'),
}

model QueryItemNextCycleRestrictionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      beginTime?: long(name='BeginTime'),
      endTime?: long(name='EndTime'),
      itemId?: long(name='ItemId'),
      lmItemId?: string(name='LmItemId'),
      quantity?: int32(name='Quantity'),
      restrictionQuantity?: int32(name='RestrictionQuantity'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryItemNextCycleRestrictionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemNextCycleRestrictionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryItemNextCycleRestriction  QueryItemNextCycleRestrictionRequest
  * @return QueryItemNextCycleRestrictionResponse
 */
async function queryItemNextCycleRestriction(request: QueryItemNextCycleRestrictionRequest): QueryItemNextCycleRestrictionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemNextCycleRestriction', 'POST', '/', 'json', true, 'form', request);
}

model QueryLogisticsRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210830****', position='Query'),
  bizUid?: string(name='BizUid', example='213250002250****', position='Query'),
  lmOrderId?: long(name='LmOrderId', example='46802****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='213250002250****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryLogisticsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: {
    data?: [ 
    {
      dataProvider?: string(name='DataProvider'),
      dataProviderTitle?: string(name='DataProviderTitle'),
      goods?: {
        goods?: [ 
        {
          goodName?: string(name='GoodName', example='""'),
          itemId?: long(name='ItemId', example='62250669****'),
          quantity?: int32(name='Quantity', example='4'),
        }
      ](name='Goods')
      }(name='Goods'),
      logisticsCompanyCode?: string(name='LogisticsCompanyCode', example='ZTO'),
      logisticsCompanyName?: string(name='LogisticsCompanyName'),
      logisticsDetailList?: {
        logisticsDetailList?: [ 
        {
          ocurrTimeStr?: string(name='OcurrTimeStr', example='2022-04-01'),
          standerdDesc?: string(name='StanderdDesc'),
        }
      ](name='LogisticsDetailList')
      }(name='LogisticsDetailList'),
      mailNo?: string(name='MailNo', example='32178478218****'),
    }
  ](name='Data')
  }(name='Data'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', example='E090F1A0-7454-5F36-933C-E6332CE2****'),
}

model QueryLogisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLogisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryLogistics  QueryLogisticsRequest
  * @return QueryLogisticsResponse
 */
async function queryLogistics(request: QueryLogisticsRequest): QueryLogisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLogistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaSettleInfoRequest {
  bizId?: string(name='BizId', example='LMALL20******005', position='Query'),
  channelId?: string(name='ChannelId', position='Query'),
  endTime?: string(name='EndTime', example='2021-08-01 01:00:00', position='Query'),
  extInfo?: string(name='ExtInfo', position='Query'),
  mediaName?: string(name='MediaName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  settleNo?: string(name='SettleNo', position='Query'),
  startTime?: string(name='StartTime', example='2021-08-01 00:00:00', position='Query'),
}

model QueryMediaSettleInfoResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    mediaSettleInfoList?: [ 
      {
        channelId?: string(name='ChannelId', example='63839******79044'),
        createDate?: string(name='CreateDate', example='2021-08-01 00:00:00'),
        endTime?: string(name='EndTime', example='2021-08-01 01:00:00'),
        extInfo?: string(name='ExtInfo'),
        mediaName?: string(name='MediaName'),
        mediaSettleAmount?: string(name='MediaSettleAmount'),
        mediaSettleDetailId?: string(name='MediaSettleDetailId'),
        modifiedDate?: string(name='ModifiedDate', example='2021-08-01 01:00:00'),
        settleNo?: string(name='SettleNo', example='TEST000000'),
        settleStatus?: string(name='SettleStatus', example='waitPayerConfirm'),
        startTime?: string(name='StartTime', example='2021-08-01 00:00:00'),
      }
    ](name='MediaSettleInfoList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='FAED4911-3F7D-56C0-880F-C4755D4F26D8'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model QueryMediaSettleInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaSettleInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMediaSettleInfo  QueryMediaSettleInfoRequest
  * @return QueryMediaSettleInfoResponse
 */
async function queryMediaSettleInfo(request: QueryMediaSettleInfoRequest): QueryMediaSettleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaSettleInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessagesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2******001', position='Query'),
  extJson?: string(name='ExtJson', position='Query'),
  topic: string(name='Topic', description='This parameter is required.', example='Topic_******_api', position='Query'),
}

model QueryMessagesResponseBody = {
  bizMessages?: {
    bizMessage?: [ 
    {
      contentMapJson?: string(name='ContentMapJson'),
      dataId?: long(name='DataId'),
      pubTime?: string(name='PubTime'),
      topic?: string(name='Topic', example='Topic_******_api'),
    }
  ](name='BizMessage')
  }(name='BizMessages'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
}

model QueryMessagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMessages  QueryMessagesRequest
  * @return QueryMessagesResponse
 */
async function queryMessages(request: QueryMessagesRequest): QueryMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessages', 'POST', '/', 'json', false, 'json', request);
}

model QueryMovieCommentsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  movieId: long(name='MovieId', description='This parameter is required.', example='""', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
}

model QueryMovieCommentsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  commentList?: {
    comment?: [ 
    {
      commentTime?: string(name='CommentTime', example='""'),
      content?: string(name='Content', example='""'),
      favorCount?: long(name='FavorCount', example='1000'),
      id?: long(name='Id', example='6331'),
      movieId?: long(name='MovieId', example='""'),
      nickName?: string(name='NickName', example='""'),
      remark?: long(name='Remark', example='9'),
      subject?: string(name='Subject'),
    }
  ](name='Comment')
  }(name='CommentList'),
  count?: long(name='Count', example='1'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='42A19B5E-B9A0-5D41-91D0-CC316A97B92A'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model QueryMovieCommentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMovieCommentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMovieComments  QueryMovieCommentsRequest
  * @return QueryMovieCommentsResponse
 */
async function queryMovieComments(request: QueryMovieCommentsRequest): QueryMovieCommentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMovieComments', 'POST', '/', 'json', false, 'json', request);
}

model QueryMovieSchedulesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  cinemaId: long(name='CinemaId', description='This parameter is required.', position='Query'),
  extJson?: string(name='ExtJson', position='Query'),
}

model QueryMovieSchedulesResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
  schedules?: {
    schedule?: [ 
    {
      cinemaId?: long(name='CinemaId'),
      hallName?: string(name='HallName'),
      id?: long(name='Id'),
      isExpired?: boolean(name='IsExpired', example='false'),
      maxCanBuy?: long(name='MaxCanBuy', example='2'),
      movieId?: long(name='MovieId'),
      movieVersion?: string(name='MovieVersion'),
      price?: long(name='Price', example='5000'),
      releaseDate?: string(name='ReleaseDate'),
      scheduleArea?: string(name='ScheduleArea'),
      sectionId?: string(name='SectionId'),
      serviceFee?: long(name='ServiceFee'),
      sessionEndingTime?: string(name='SessionEndingTime', example='2022-04-01 12:00:00'),
      sessionStartingTime?: string(name='SessionStartingTime', example='2022-04-01 10:00:00'),
    }
  ](name='Schedule')
  }(name='Schedules'),
  subCode?: string(name='SubCode', example='207'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model QueryMovieSchedulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMovieSchedulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMovieSchedules  QueryMovieSchedulesRequest
  * @return QueryMovieSchedulesResponse
 */
async function queryMovieSchedules(request: QueryMovieSchedulesRequest): QueryMovieSchedulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMovieSchedules', 'POST', '/', 'json', false, 'json', request);
}

model QueryMovieSeatsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******004', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  scheduleId: long(name='ScheduleId', description='This parameter is required.', example='9******5', position='Query'),
}

model QueryMovieSeatsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
  seatMap?: {
    maxCanBuy?: long(name='MaxCanBuy', example='2'),
    maxColumn?: long(name='MaxColumn', example='20'),
    maxLeftPx?: long(name='MaxLeftPx', example='30'),
    maxRow?: long(name='MaxRow', example='20'),
    maxTopPx?: long(name='MaxTopPx', example='30'),
    minColumn?: long(name='MinColumn', example='15'),
    minLeftPx?: long(name='MinLeftPx', example='30'),
    minRow?: long(name='MinRow', example='15'),
    minTopPx?: long(name='MinTopPx', example='30'),
    notice?: string(name='Notice', example='""'),
    regular?: boolean(name='Regular', example='true'),
    seatCount?: long(name='SeatCount', example='150'),
    seats?: {
      seat?: [ 
      {
        area?: string(name='Area', example='""'),
        column?: long(name='Column', example='20'),
        extId?: string(name='ExtId', example='""'),
        flag?: long(name='Flag', example='0'),
        leftPx?: long(name='LeftPx', example='30'),
        name?: string(name='Name'),
        row?: long(name='Row', example='20'),
        rowName?: string(name='RowName', example='""'),
        status?: long(name='Status', example='1'),
        topPx?: long(name='TopPx', example='30'),
      }
    ](name='Seat')
    }(name='Seats'),
    soldCount?: long(name='SoldCount', example='50'),
    tipMessage?: string(name='TipMessage'),
  }(name='SeatMap'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
}

model QueryMovieSeatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMovieSeatsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMovieSeats  QueryMovieSeatsRequest
  * @return QueryMovieSeatsResponse
 */
async function queryMovieSeats(request: QueryMovieSeatsRequest): QueryMovieSeatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMovieSeats', 'POST', '/', 'json', false, 'json', request);
}

model QueryMovieTicketsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221******8495', position='Query'),
  extJson?: string(name='ExtJson', position='Query'),
  orderId: string(name='OrderId', description='This parameter is required.', example='14******42', position='Query'),
}

model QueryMovieTicketsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  movieTicket?: {
    returnMessage?: string(name='ReturnMessage'),
    status?: string(name='Status'),
    tbOrderId?: string(name='TbOrderId'),
    ticketContents?: string(name='TicketContents'),
  }(name='MovieTicket'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B320B'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model QueryMovieTicketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMovieTicketsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMovieTickets  QueryMovieTicketsRequest
  * @return QueryMovieTicketsResponse
 */
async function queryMovieTickets(request: QueryMovieTicketsRequest): QueryMovieTicketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMovieTickets', 'GET', '/', 'json', false, 'json', request);
}

model QueryOrderAndPaymentListRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='22******6718', position='Query'),
  filterOption?: string(name='FilterOption', example='{\\"lmOrderList\\":[32******46],\\"enableStatus\\":-1}', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderAndPaymentListResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmOrderList?: {
    lmOrderList?: [ 
    {
      createDate?: string(name='CreateDate', example='2022-04-01 12:00:00'),
      enableStatus?: int32(name='EnableStatus', example='1'),
      extJson?: string(name='ExtJson'),
      fundStructureModels?: {
        fundStructureModels?: [ 
        {
          fundAmount?: long(name='FundAmount'),
          fundAmountMoney?: long(name='FundAmountMoney'),
          fundType?: string(name='FundType'),
        }
      ](name='FundStructureModels')
      }(name='FundStructureModels'),
      lmOrderId?: long(name='LmOrderId', example='44******82'),
      lmPaymentId?: string(name='LmPaymentId'),
      logisticsStatus?: int32(name='LogisticsStatus', example='3'),
      orderAmount?: long(name='OrderAmount', example='100'),
      orderStatus?: int32(name='OrderStatus', example='6'),
      postFee?: {
        fundAmount?: long(name='FundAmount'),
        fundAmountMoney?: long(name='FundAmountMoney'),
        fundType?: string(name='FundType'),
      }(name='PostFee'),
      shopName?: string(name='ShopName'),
      subOrderList?: {
        subOrderList?: [ 
        {
          enableStatus?: int32(name='EnableStatus', example='0'),
          itemId?: long(name='ItemId', example='656******550'),
          itemPic?: string(name='ItemPic'),
          itemPriceList?: {
            itemPriceList?: [ 
            {
              fundAmount?: long(name='FundAmount'),
              fundAmountMoney?: long(name='FundAmountMoney'),
              fundType?: string(name='FundType'),
            }
          ](name='ItemPriceList')
          }(name='ItemPriceList'),
          itemTitle?: string(name='ItemTitle'),
          lmItemId?: string(name='LmItemId', example='10000055-******135427'),
          lmOrderId?: long(name='LmOrderId', example='39******99'),
          number?: long(name='Number', example='1'),
          orderStatus?: int32(name='OrderStatus', example='6'),
          skuId?: long(name='SkuId', example='471******886'),
          skuName?: string(name='SkuName'),
          tbOrderId?: long(name='TbOrderId', example='13******61284'),
        }
      ](name='SubOrderList')
      }(name='SubOrderList'),
      tbOrderId?: long(name='TbOrderId', example='18******13134'),
    }
  ](name='LmOrderList')
  }(name='LmOrderList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  postFee?: {
    fundAmount?: long(name='FundAmount'),
    fundAmountMoney?: long(name='FundAmountMoney'),
    fundType?: string(name='FundType'),
  }(name='PostFee'),
  requestId?: string(name='RequestId', example='3F43129B-020F-5F8A-88B0-9CBDE2AD6F52'),
  totalCount?: long(name='TotalCount', example='5'),
}

model QueryOrderAndPaymentListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderAndPaymentListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderAndPaymentList  QueryOrderAndPaymentListRequest
  * @return QueryOrderAndPaymentListResponse
 */
async function queryOrderAndPaymentList(request: QueryOrderAndPaymentListRequest): QueryOrderAndPaymentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderAndPaymentList', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderAndPaymentListWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***01', position='Body'),
  filterOption: string(name='FilterOption', description='This parameter is required.', example='{\\"enableStatus\\":0,\\"lmOrderList\\":[424***33]}', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='REAL', position='Body'),
  tbUserId?: long(name='TbUserId', example='213***3121', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='R213***3121', position='Body'),
}

model QueryOrderAndPaymentListWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-10-11 14:22:21'),
      enableStatus?: int32(name='EnableStatus', example='0'),
      extJson?: string(name='ExtJson', example='{}'),
      fundStructureModels?: [ 
        {
          fundAmount?: long(name='FundAmount', example='500'),
          fundAmountMoney?: long(name='FundAmountMoney', example='500'),
          fundType?: string(name='FundType', example='lmCashCnyPay'),
        }
      ](name='FundStructureModels'),
      lmOrderId?: long(name='LmOrderId', example='45***66'),
      lmPaymentId?: string(name='LmPaymentId', example='324***333'),
      logisticsStatus?: int32(name='LogisticsStatus', example='3'),
      orderAmount?: long(name='OrderAmount', example='500'),
      orderStatus?: int32(name='OrderStatus', example='6'),
      postFee?: {
        fundAmount?: long(name='FundAmount', example='0'),
        fundAmountMoney?: long(name='FundAmountMoney', example='0'),
        fundType?: string(name='FundType', example='lmCashCnyPay'),
      }(name='PostFee'),
      shopName?: string(name='ShopName'),
      subOrderList?: [ 
        {
          enableStatus?: int32(name='EnableStatus', example='0'),
          itemId?: long(name='ItemId', example='68444***5753'),
          itemPic?: string(name='ItemPic', example='https://aliyundoc.com'),
          itemPriceList?: [ 
            {
              fundAmount?: long(name='FundAmount', example='500'),
              fundAmountMoney?: long(name='FundAmountMoney', example='500'),
              fundType?: string(name='FundType', example='lmCashCnyPay'),
            }
          ](name='ItemPriceList'),
          itemTitle?: string(name='ItemTitle'),
          lmItemId?: string(name='LmItemId', example='100***02-68***453'),
          lmOrderId?: long(name='LmOrderId', example='539***44'),
          number?: long(name='Number', example='1'),
          orderStatus?: int32(name='OrderStatus', example='6'),
          skuId?: string(name='SkuId', description='skuId', example='477***60'),
          skuName?: string(name='SkuName', example='500g'),
          tbOrderId?: long(name='TbOrderId', example='32432***324'),
        }
      ](name='SubOrderList'),
      tbOrderId?: long(name='TbOrderId', example='12***113'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='6103AD7B-21***DE-A58D08E8'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model QueryOrderAndPaymentListWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderAndPaymentListWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderAndPaymentListWithDesignatedTbUid  QueryOrderAndPaymentListWithDesignatedTbUidRequest
  * @return QueryOrderAndPaymentListWithDesignatedTbUidResponse
 */
async function queryOrderAndPaymentListWithDesignatedTbUid(request: QueryOrderAndPaymentListWithDesignatedTbUidRequest): QueryOrderAndPaymentListWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderAndPaymentListWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model QueryOrderCommissionRateRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221249435****', position='Query'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='45******23', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderCommissionRateResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  commissionModels?: [ 
    {
      commissionInfo?: {
        rateConfig?: {
          configs?: [ 
            {
              value?: long(name='Value', example='1000'),
              valueUnit?: string(name='ValueUnit', example='%%'),
            }
          ](name='Configs'),
        }(name='RateConfig'),
        rateType?: string(name='RateType', example='CONSTANT_RATE'),
      }(name='CommissionInfo'),
      lmOrderId?: long(name='LmOrderId', example='45******23'),
    }
  ](name='CommissionModels'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='A7BE4356-7F92-533E-A31B-2EBF2D67****'),
}

model QueryOrderCommissionRateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderCommissionRateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderCommissionRate  QueryOrderCommissionRateRequest
  * @return QueryOrderCommissionRateResponse
 */
async function queryOrderCommissionRate(request: QueryOrderCommissionRateRequest): QueryOrderCommissionRateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderCommissionRate', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderDetailInnerRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210927****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='208823220453****', position='Query'),
  filterOption?: string(name='FilterOption', example='{\\"enableStatus\\":0,\\"lmOrderList\\":[42433****]}', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='208823220453****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderDetailInnerResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  model?: {
    order?: {
      channelBizType?: string(name='ChannelBizType'),
      channelCode?: string(name='ChannelCode', example='*********'),
      channelOrderId?: string(name='ChannelOrderId', example='182378172837****'),
      createDate?: string(name='CreateDate', example='2022-04-01 16:33:23'),
      enableStatus?: int32(name='EnableStatus', example='1'),
      endTime?: long(name='EndTime', example='2022-04-01 17:21:23'),
      eticket?: boolean(name='Eticket'),
      extInfo?: map[string]any(name='ExtInfo', example='{\\"key\\":\\"value\\"}'),
      fundStructureModels?: {
        fundStructure?: [ 
        {
          fundAmount?: long(name='FundAmount', example='2990'),
          fundAmountMoney?: long(name='FundAmountMoney', example='2990'),
          fundType?: string(name='FundType', example='POINT_PAY'),
          lmOrderId?: long(name='LmOrderId', example='51855****'),
          tbSubOrderId?: long(name='TbSubOrderId', example='2874823748****'),
        }
      ](name='FundStructure')
      }(name='FundStructureModels'),
      lmOrderId?: long(name='LmOrderId', example='45609****'),
      logisticsAddress?: string(name='LogisticsAddress'),
      logisticsCompName?: string(name='LogisticsCompName'),
      logisticsMobilePhone?: string(name='LogisticsMobilePhone', example='185****4801'),
      logisticsNo?: string(name='LogisticsNo', example='YT217467555****'),
      logisticsStatus?: int32(name='LogisticsStatus', example='2'),
      logisticsStatusDesc?: string(name='LogisticsStatusDesc'),
      logisticsUserName?: string(name='LogisticsUserName'),
      orderAmount?: long(name='OrderAmount', example='2990'),
      orderPayInfo?: string(name='OrderPayInfo', example='""'),
      payStatus?: int32(name='PayStatus', example='2'),
      payWaterStatus?: int32(name='PayWaterStatus'),
      postFee?: {
        fundAmount?: long(name='FundAmount', example='100'),
        fundAmountMoney?: long(name='FundAmountMoney', example='100'),
        fundType?: string(name='FundType', example='POINT_PAY'),
        lmOrderId?: long(name='LmOrderId', example='52312****'),
        tbSubOrderId?: long(name='TbSubOrderId', example='2874823748****'),
      }(name='PostFee'),
      refundStatus?: int32(name='RefundStatus', example='4'),
      resExtInfo?: string(name='ResExtInfo', example='""'),
      sellerId?: long(name='SellerId', example='220941058****'),
      sellerNick?: string(name='SellerNick'),
      shipping?: string(name='Shipping'),
      shopName?: string(name='ShopName'),
      subItemOrderList?: {
        subItemOrder?: [ 
        {
          channelCode?: string(name='ChannelCode', example='*****'),
          itemId?: long(name='ItemId', example='63194403****'),
          itemPic?: string(name='ItemPic'),
          itemPriceInfo?: string(name='ItemPriceInfo', example='""'),
          itemPriceList?: {
            itemPrice?: [ 
            {
              fundAmount?: long(name='FundAmount', example='2990'),
              fundAmountMoney?: long(name='FundAmountMoney', example='2990'),
              fundType?: string(name='FundType', example='POINT_PAY'),
              tbOrderId?: long(name='TbOrderId', example='2547326482****'),
              tbSubOrderId?: long(name='TbSubOrderId', example='2547326482****'),
            }
          ](name='ItemPrice')
          }(name='ItemPriceList'),
          itemTitle?: string(name='ItemTitle'),
          lmItemId?: string(name='LmItemId', example='10000102-61638587****'),
          lmOrderId?: long(name='LmOrderId', example='45609****'),
          number?: int32(name='Number', example='1'),
          payStatus?: int32(name='PayStatus', example='2'),
          skuId?: long(name='SkuId', example='473246257****'),
          skuName?: string(name='SkuName'),
          tbSubOrderId?: long(name='TbSubOrderId', example='2487583728****'),
          totalPaymentInfo?: string(name='TotalPaymentInfo'),
        }
      ](name='SubItemOrder')
      }(name='SubItemOrderList'),
      tbOrderId?: string(name='TbOrderId', example='25343894898952***'),
    }(name='order'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D****'),
}

model QueryOrderDetailInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderDetailInnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderDetailInner  QueryOrderDetailInnerRequest
  * @return QueryOrderDetailInnerResponse
 */
async function queryOrderDetailInner(request: QueryOrderDetailInnerRequest): QueryOrderDetailInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderDetailInner', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderIdByPayIdRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221249435****', position='Query'),
  paymentId: string(name='PaymentId', description='This parameter is required.', example='PYPT******9379', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderIdByPayIdResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmOrderIds?: {
    lmOrderIds?: [ 
    {
      lmOrderId?: long(name='LmOrderId', example='45******89'),
    }
  ](name='LmOrderIds')
  }(name='LmOrderIds'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model QueryOrderIdByPayIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderIdByPayIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderIdByPayId  QueryOrderIdByPayIdRequest
  * @return QueryOrderIdByPayIdResponse
 */
async function queryOrderIdByPayId(request: QueryOrderIdByPayIdRequest): QueryOrderIdByPayIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderIdByPayId', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderInfoAfterSaleRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  channelUserId: string(name='ChannelUserId', description='This parameter is required.', example='22******323', position='Query'),
  lmOrderId: string(name='LmOrderId', description='This parameter is required.', example='40******84', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='22******323', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderInfoAfterSaleResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    cashAmount?: string(name='CashAmount', example='10'),
    createDate?: string(name='CreateDate', example='2022-03-29'),
    extJson?: string(name='ExtJson', example='{}'),
    lmOrderId?: long(name='LmOrderId', example='45******66'),
    logisticsList?: {
      logistics?: [ 
      {
        logisticsCompanyCode?: string(name='LogisticsCompanyCode', example='SF'),
        logisticsCompanyName?: string(name='LogisticsCompanyName'),
        logisticsNo?: string(name='LogisticsNo', example='731******8882'),
        logisticsStatus?: string(name='LogisticsStatus', example='3'),
      }
    ](name='Logistics')
    }(name='LogisticsList'),
    orderStatus?: string(name='OrderStatus', example='6'),
    points?: long(name='Points', example='69'),
    pointsAmount?: long(name='PointsAmount', example='0'),
    refundAmount?: long(name='RefundAmount', example='5'),
    refundPoints?: long(name='RefundPoints', example='10'),
    refundRate?: string(name='RefundRate'),
    refundStatus?: string(name='RefundStatus', example='1'),
    shopName?: string(name='ShopName'),
    shopServiceTelephone?: string(name='ShopServiceTelephone'),
    tbOrderId?: long(name='TbOrderId', example='12******964113'),
    xiaomiCode?: string(name='XiaomiCode', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='A107756D-18BF-56BC-9F33-8DFAA2279F17'),
}

model QueryOrderInfoAfterSaleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderInfoAfterSaleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderInfoAfterSale  QueryOrderInfoAfterSaleRequest
  * @return QueryOrderInfoAfterSaleResponse
 */
async function queryOrderInfoAfterSale(request: QueryOrderInfoAfterSaleRequest): QueryOrderInfoAfterSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderInfoAfterSale', 'GET', '/', 'json', false, 'json', request);
}

model QueryOrderItemInfoByPaymentIdForAiZhanYouRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='22******85759', position='Query'),
  paymentId: string(name='PaymentId', description='This parameter is required.', example='P51M******15', position='Query'),
}

model QueryOrderItemInfoByPaymentIdForAiZhanYouResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmOrderList?: {
    lmOrderList?: [ 
    {
      itemId?: long(name='ItemId', example='599******711'),
      itemName?: string(name='ItemName'),
      lmItemId?: string(name='LmItemId', example='10000035-******31758'),
      lmOrderId?: long(name='LmOrderId', example='42******18'),
      skuId?: long(name='SkuId', example='433******8350'),
      skuName?: string(name='SkuName'),
    }
  ](name='LmOrderList')
  }(name='LmOrderList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='DA2554FD-F21F-536F-A7B7-B96C3E5F****'),
}

model QueryOrderItemInfoByPaymentIdForAiZhanYouResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderItemInfoByPaymentIdForAiZhanYouResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderItemInfoByPaymentIdForAiZhanYou  QueryOrderItemInfoByPaymentIdForAiZhanYouRequest
  * @return QueryOrderItemInfoByPaymentIdForAiZhanYouResponse
 */
async function queryOrderItemInfoByPaymentIdForAiZhanYou(request: QueryOrderItemInfoByPaymentIdForAiZhanYouRequest): QueryOrderItemInfoByPaymentIdForAiZhanYouResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderItemInfoByPaymentIdForAiZhanYou', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderListRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******005', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='220******311', position='Query'),
  filterOption?: string(name='FilterOption', example='{\\"lmOrderList\\":[32******46],\\"enableStatus\\":-1}', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderListResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmOrderList?: {
    lmOrderList?: [ 
    {
      createDate?: string(name='CreateDate', example='2022-04-01 12:00:00'),
      enableStatus?: int32(name='EnableStatus', example='0'),
      extJson?: string(name='ExtJson'),
      fundStructureModels?: {
        fundStructureModels?: [ 
        {
          fundAmount?: long(name='FundAmount'),
          fundAmountMoney?: long(name='FundAmountMoney'),
          fundType?: string(name='FundType'),
        }
      ](name='FundStructureModels')
      }(name='FundStructureModels'),
      lmOrderId?: long(name='LmOrderId', example='41******03'),
      logisticsStatus?: int32(name='LogisticsStatus', example='3'),
      orderAmount?: long(name='OrderAmount', example='100'),
      orderStatus?: int32(name='OrderStatus', example='6'),
      postFee?: {
        fundAmount?: long(name='FundAmount'),
        fundAmountMoney?: long(name='FundAmountMoney'),
        fundType?: string(name='FundType'),
      }(name='PostFee'),
      shopName?: string(name='ShopName'),
      subOrderList?: {
        subOrderList?: [ 
        {
          enableStatus?: int32(name='EnableStatus', example='0'),
          itemId?: long(name='ItemId', example='607******466'),
          itemPic?: string(name='ItemPic'),
          itemPriceList?: {
            itemPriceList?: [ 
            {
              fundAmount?: long(name='FundAmount'),
              fundAmountMoney?: long(name='FundAmountMoney'),
              fundType?: string(name='FundType'),
            }
          ](name='ItemPriceList')
          }(name='ItemPriceList'),
          itemTitle?: string(name='ItemTitle'),
          lmItemId?: string(name='LmItemId', example='10000102-******170234'),
          lmOrderId?: long(name='LmOrderId', example='37******63'),
          number?: long(name='Number', example='1'),
          orderStatus?: int32(name='OrderStatus', example='6'),
          skuId?: long(name='SkuId', example='472******6880'),
          skuName?: string(name='SkuName'),
          tbOrderId?: long(name='TbOrderId', example='12******41253'),
        }
      ](name='SubOrderList')
      }(name='SubOrderList'),
      tbOrderId?: long(name='TbOrderId', example='12******41253'),
    }
  ](name='LmOrderList')
  }(name='LmOrderList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  postFee?: {
    fundAmount?: long(name='FundAmount'),
    fundAmountMoney?: long(name='FundAmountMoney'),
    fundType?: string(name='FundType'),
  }(name='PostFee'),
  requestId?: string(name='RequestId', example='6EC363BE-9A87-55AA-A9AF-44E77F0EEDCA'),
  totalCount?: long(name='TotalCount', example='19'),
}

model QueryOrderListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderList  QueryOrderListRequest
  * @return QueryOrderListResponse
 */
async function queryOrderList(request: QueryOrderListRequest): QueryOrderListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderList', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderListWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***001', position='Body'),
  filterOption: string(name='FilterOption', description='This parameter is required.', example='{\\"lmOrderList\\":[\\"718***37\\"]}', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='333***21', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='R333***21', position='Body'),
}

model QueryOrderListWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-10-11 15:21:11'),
      enableStatus?: int32(name='EnableStatus', example='0'),
      extJson?: string(name='ExtJson', example='{}'),
      fundStructureModels?: [ 
        {
          fundAmount?: long(name='FundAmount', example='5000'),
          fundAmountMoney?: long(name='FundAmountMoney', example='5000'),
          fundType?: string(name='FundType', example='lmCashCnyPay'),
        }
      ](name='FundStructureModels'),
      lmOrderId?: long(name='LmOrderId', example='639***718'),
      logisticsStatus?: int32(name='LogisticsStatus', example='2'),
      orderAmount?: long(name='OrderAmount', example='5000'),
      orderStatus?: int32(name='OrderStatus', example='6'),
      postFee?: {
        fundAmount?: long(name='FundAmount', example='0'),
        fundAmountMoney?: long(name='FundAmountMoney', example='0'),
        fundType?: string(name='FundType', example='lmCashCnyPay'),
      }(name='PostFee'),
      shopName?: string(name='ShopName'),
      subOrderList?: [ 
        {
          enableStatus?: int32(name='EnableStatus', example='0'),
          itemId?: long(name='ItemId', example='665***373'),
          itemPic?: string(name='ItemPic', example='https://aliyundoc.com'),
          itemPriceList?: [ 
            {
              fundAmount?: long(name='FundAmount', example='5000'),
              fundAmountMoney?: long(name='FundAmountMoney', example='5000'),
              fundType?: string(name='FundType', example='lmCashCnyPay'),
            }
          ](name='ItemPriceList'),
          itemTitle?: string(name='ItemTitle'),
          lmItemId?: string(name='LmItemId', example='100***02-665***373'),
          lmOrderId?: long(name='LmOrderId', example='559***813'),
          number?: long(name='Number', example='1'),
          orderStatus?: int32(name='OrderStatus', example='6'),
          skuId?: string(name='SkuId', description='skuId', example='496***350'),
          skuName?: string(name='SkuName', example='500g'),
          tbOrderId?: long(name='TbOrderId', example='323***242'),
        }
      ](name='SubOrderList'),
      tbOrderId?: long(name='TbOrderId', example='412******113'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='10'),
  requestId?: string(name='RequestId', example='1EA70857-79***3E-9F0F777180'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model QueryOrderListWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderListWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderListWithDesignatedTbUid  QueryOrderListWithDesignatedTbUidRequest
  * @return QueryOrderListWithDesignatedTbUidResponse
 */
async function queryOrderListWithDesignatedTbUid(request: QueryOrderListWithDesignatedTbUidRequest): QueryOrderListWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderListWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model QueryOrderLogisticsRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210825****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='22378277****', position='Query'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='42535****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='22378277****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryOrderLogisticsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  orderLogistics?: {
    dataProvider?: string(name='DataProvider'),
    dataProviderTitle?: string(name='DataProviderTitle'),
    fetcher?: {
      address?: string(name='Address'),
      name?: string(name='Name'),
      phoneNumber?: string(name='PhoneNumber', example='185****4801'),
      zipCode?: string(name='ZipCode', example='457001'),
    }(name='Fetcher'),
    logisticsCompanyCode?: string(name='LogisticsCompanyCode', example='ZTO'),
    logisticsCompanyName?: string(name='LogisticsCompanyName'),
    logisticsDetailList?: {
      logisticsDetailList?: [ 
      {
        ocurrTimeStr?: string(name='OcurrTimeStr', example='2022-04-01 16:33:23'),
        standerdDesc?: string(name='StanderdDesc'),
        statusIcon?: string(name='StatusIcon', example='""'),
      }
    ](name='LogisticsDetailList')
    }(name='LogisticsDetailList'),
    receiver?: {
      address?: string(name='Address'),
      name?: string(name='Name'),
      phoneNumber?: string(name='PhoneNumber', example='185****4801'),
      zipCode?: string(name='ZipCode', example='457001'),
    }(name='Receiver'),
  }(name='OrderLogistics'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537****'),
}

model QueryOrderLogisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderLogisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderLogistics  QueryOrderLogisticsRequest
  * @return QueryOrderLogisticsResponse
 */
async function queryOrderLogistics(request: QueryOrderLogisticsRequest): QueryOrderLogisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderLogistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderLogisticsWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***004', position='Body'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='737***057', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='261***126', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='u***001', position='Body'),
}

model QueryOrderLogisticsWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      dataProvider?: string(name='DataProvider'),
      dataProviderTitle?: string(name='DataProviderTitle'),
      fetcher?: {
        address?: string(name='Address'),
        name?: string(name='Name'),
        phoneNumber?: string(name='PhoneNumber', example='189***12'),
        requestId?: string(name='RequestId', example='24D184B6-91***B-AC1B8ACED261'),
        zipCode?: string(name='ZipCode', example='450000'),
      }(name='Fetcher'),
      logisticsCompanyCode?: string(name='LogisticsCompanyCode', example='SF'),
      logisticsCompanyName?: string(name='LogisticsCompanyName'),
      logisticsDetailList?: [ 
        {
          ocurrTimeStr?: string(name='OcurrTimeStr', example='2022-02-21 08:23:21'),
          requestId?: string(name='RequestId', example='24D184B6-913***2AB-AC1B8ACED261'),
          standerdDesc?: string(name='StanderdDesc', example='""'),
          statusIcon?: string(name='StatusIcon'),
        }
      ](name='LogisticsDetailList'),
      mailNo?: string(name='MailNo', example='21321***2123'),
      packageGoodItems?: [ 
        {
          itemId?: long(name='ItemId', example='650***2703'),
          lmItemId?: string(name='LmItemId', example='100***39-6046***9180'),
          name?: string(name='Name'),
          quantity?: int32(name='Quantity', example='1'),
        }
      ](name='PackageGoodItems'),
      receiver?: {
        address?: string(name='Address'),
        name?: string(name='Name'),
        phoneNumber?: string(name='PhoneNumber', example='18***00'),
        requestId?: string(name='RequestId', example='24D184B6-91***2AB-AC1B8ACED261'),
        zipCode?: string(name='ZipCode', example='516000'),
      }(name='Receiver'),
      requestId?: string(name='RequestId', example='24D184B6-91***B-AC1B8ACED261'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='1'),
  requestId?: string(name='RequestId', example='24D184B6-9***B-AC1B8ACED261'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model QueryOrderLogisticsWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderLogisticsWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderLogisticsWithDesignatedTbUid  QueryOrderLogisticsWithDesignatedTbUidRequest
  * @return QueryOrderLogisticsWithDesignatedTbUidResponse
 */
async function queryOrderLogisticsWithDesignatedTbUid(request: QueryOrderLogisticsWithDesignatedTbUidRequest): QueryOrderLogisticsWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderLogisticsWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model QueryRealTbAccountSupportRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***001', position='Body'),
}

model QueryRealTbAccountSupportResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: boolean(name='Model', example='true'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='9C3F75C9-16F***2A7-141C33BFC16B'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
}

model QueryRealTbAccountSupportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRealTbAccountSupportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryRealTbAccountSupport  QueryRealTbAccountSupportRequest
  * @return QueryRealTbAccountSupportResponse
 */
async function queryRealTbAccountSupport(request: QueryRealTbAccountSupportRequest): QueryRealTbAccountSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRealTbAccountSupport', 'POST', '/', 'json', true, 'form', request);
}

model QueryRefundApplicationDetailRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2******0002', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='12******89', position='Query'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='23******85', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model QueryRefundApplicationDetailResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  refundApplicationDetail?: {
    applyDisputeDesc?: string(name='ApplyDisputeDesc'),
    applyReasonText?: {
      reasonTextId?: long(name='ReasonTextId', example='100005'),
      reasonTips?: string(name='ReasonTips'),
    }(name='ApplyReasonText'),
    bizClaimType?: int32(name='BizClaimType', example='1'),
    disputeCreateTime?: string(name='DisputeCreateTime', example='2022-04-02 10:16:10'),
    disputeDesc?: string(name='DisputeDesc'),
    disputeEndTime?: string(name='DisputeEndTime', example='2022-04-02 10:16:12'),
    disputeId?: long(name='DisputeId', example='141******33'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    lmOrderId?: string(name='LmOrderId', example='46******11'),
    maxRefundFeeData?: {
      maxRefundFee?: int32(name='MaxRefundFee', example='10'),
      minRefundFee?: int32(name='MinRefundFee', example='0'),
    }(name='MaxRefundFeeData'),
    orderLogisticsStatus?: int32(name='OrderLogisticsStatus', example='1'),
    realRefundFee?: long(name='RealRefundFee', example='10'),
    refundFee?: long(name='RefundFee', example='10'),
    refunderAddress?: string(name='RefunderAddress'),
    refunderName?: string(name='RefunderName'),
    refunderTel?: string(name='RefunderTel', example='158****1234'),
    refunderZipCode?: string(name='RefunderZipCode'),
    returnGoodCount?: int32(name='ReturnGoodCount', example='1'),
    returnGoodLogisticsStatus?: int32(name='ReturnGoodLogisticsStatus'),
    sellerAgreeMsg?: string(name='SellerAgreeMsg'),
    sellerRefuseAgreementMessage?: string(name='SellerRefuseAgreementMessage'),
    sellerRefuseReason?: string(name='SellerRefuseReason'),
    subLmOrderId?: string(name='SubLmOrderId', example='44******62'),
  }(name='RefundApplicationDetail'),
  requestId?: string(name='RequestId', example='DAAA6391-3339-5333-9E4D-C71CD26A231F'),
}

model QueryRefundApplicationDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRefundApplicationDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryRefundApplicationDetail  QueryRefundApplicationDetailRequest
  * @return QueryRefundApplicationDetailResponse
 */
async function queryRefundApplicationDetail(request: QueryRefundApplicationDetailRequest): QueryRefundApplicationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRefundApplicationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRefundApplyWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', position='Body'),
  tbUserId?: long(name='TbUserId', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', position='Body'),
}

model QueryRefundApplyWithDesignatedTbUidResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    applyDisputeDesc?: string(name='ApplyDisputeDesc'),
    applyReasonText?: {
      proofRequired?: boolean(name='ProofRequired'),
      reasonTextId?: long(name='ReasonTextId'),
      reasonTips?: string(name='ReasonTips'),
      refundDescRequired?: boolean(name='RefundDescRequired'),
    }(name='ApplyReasonText'),
    bizClaimType?: int32(name='BizClaimType'),
    disputeCreateTime?: string(name='DisputeCreateTime'),
    disputeDesc?: string(name='DisputeDesc'),
    disputeEndTime?: string(name='DisputeEndTime'),
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    lmOrderId?: string(name='LmOrderId'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee'),
      minRefundFee?: long(name='MinRefundFee'),
    }(name='MaxRefundFeeData'),
    orderLogisticsStatus?: int32(name='OrderLogisticsStatus'),
    realRefundFee?: long(name='RealRefundFee'),
    refundFee?: long(name='RefundFee'),
    refunderAddress?: string(name='RefunderAddress'),
    refunderName?: string(name='RefunderName'),
    refunderTel?: string(name='RefunderTel'),
    refunderZipCode?: string(name='RefunderZipCode'),
    returnGoodCount?: int32(name='ReturnGoodCount'),
    returnGoodLogisticsStatus?: int32(name='ReturnGoodLogisticsStatus'),
    sellerAgreeMsg?: string(name='SellerAgreeMsg'),
    sellerRefuseAgreementMessage?: string(name='SellerRefuseAgreementMessage'),
    sellerRefuseReason?: string(name='SellerRefuseReason'),
    subLmOrderId?: string(name='SubLmOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryRefundApplyWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRefundApplyWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryRefundApplyWithDesignatedTbUid  QueryRefundApplyWithDesignatedTbUidRequest
  * @return QueryRefundApplyWithDesignatedTbUidResponse
 */
async function queryRefundApplyWithDesignatedTbUid(request: QueryRefundApplyWithDesignatedTbUidRequest): QueryRefundApplyWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRefundApplyWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model QuerySellerLicenseRequest {
  bizId?: string(name='BizId', example='LMALL20***001', position='Body'),
  sellerId?: string(name='SellerId', example='220680193****', position='Body'),
  tenantId?: string(name='TenantId', example='7521****8332932', position='Body'),
}

model QuerySellerLicenseResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    licenseUrl?: string(name='LicenseUrl'),
    sellerId?: string(name='SellerId', example='221410922****'),
  }(name='Model'),
  requestId?: string(name='RequestId', description='Id of the request', example='5F0A38D5-F981-529A-911E-1B6D55D***'),
}

model QuerySellerLicenseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySellerLicenseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySellerLicense  QuerySellerLicenseRequest
  * @return QuerySellerLicenseResponse
 */
async function querySellerLicense(request: QuerySellerLicenseRequest): QuerySellerLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySellerLicense', 'POST', '/', 'json', true, 'form', request);
}

model QueryStatementsRequest {
  bizId?: string(name='BizId', example='LMALL20******001', position='Query'),
  currency?: string(name='Currency', position='Query'),
  endTime?: string(name='EndTime', example='2021-09-01 00:00:00', position='Query'),
  extInfo?: string(name='ExtInfo', example='{}', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  payeeIds?: string(name='PayeeIds', example='""', position='Query'),
  settleNoes?: string(name='SettleNoes', example='""', position='Query'),
  settleStatus?: string(name='SettleStatus', example='""', position='Query'),
  settleType?: string(name='SettleType', example='""', position='Query'),
  startTime?: string(name='StartTime', example='2021-08-01 00:00:00', position='Query'),
  tenantId: string(name='TenantId', description='This parameter is required.', example='18******263', position='Query'),
}

model QueryStatementsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    statementList?: [ 
      {
        attributes?: string(name='Attributes'),
        createDate?: string(name='CreateDate', example='2021-08-01 00:00:00'),
        currency?: string(name='Currency'),
        endTime?: string(name='EndTime', example='2021-09-01 00:00:00'),
        extInfo?: string(name='ExtInfo', example='{}'),
        kpNoGenerateTime?: string(name='KpNoGenerateTime'),
        modifiedDate?: string(name='ModifiedDate', example='2021-09-01 00:00:00'),
        payeeAccountId?: string(name='PayeeAccountId', example='""'),
        payeeAccountName?: string(name='PayeeAccountName'),
        payeeAccountNo?: string(name='PayeeAccountNo'),
        payeeId?: string(name='PayeeId'),
        payeeName?: string(name='PayeeName', example='""'),
        settleAmount?: string(name='SettleAmount', example='10'),
        settleNo?: string(name='SettleNo', example='TEST000000'),
        settleStatus?: string(name='SettleStatus', example='""'),
        startTime?: string(name='StartTime', example='2021-08-01 00:00:00'),
        statusMessage?: string(name='StatusMessage', example='""'),
        tenantId?: string(name='TenantId', example='18******263'),
      }
    ](name='StatementList'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='85729953-3123-5565-B3CA-493CCF25457B'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model QueryStatementsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStatementsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryStatements  QueryStatementsRequest
  * @return QueryStatementsResponse
 */
async function queryStatements(request: QueryStatementsRequest): QueryStatementsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStatements', 'POST', '/', 'json', false, 'json', request);
}

model QuerySupplierItemBillDownloadUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  billId?: string(name='BillId', example='BILL-10000007371****', position='Body'),
  billPeriod?: string(name='BillPeriod', example='2022-12', position='Body'),
  billStatus?: string(name='BillStatus', example='billGenerated', position='Body'),
  bizId?: string(name='BizId', example='LMALL20***003', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  lmShopId?: long(name='LmShopId', example='1002****', position='Body'),
  lmShopName?: string(name='LmShopName', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
}

model QuerySupplierItemBillDownloadUrlResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='The  BillPeriod is mandatory for this action.'),
  model?: {
    data?: [ 
      {
        billId?: string(name='BillId', example='BILL-1000*****00139120150'),
        fileDownloadUrl?: string(name='FileDownloadUrl', example='http://linkedmall-product.oss-cn-hangzhou.aliyuncs.com/LMALL2*****60001/2619709162****'),
        message?: string(name='Message'),
      }
    ](name='Data'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='685'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='3B55509D-20AC-5BD5-9A81-D6B7382E****'),
}

model QuerySupplierItemBillDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySupplierItemBillDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySupplierItemBillDownloadUrl  QuerySupplierItemBillDownloadUrlRequest
  * @return QuerySupplierItemBillDownloadUrlResponse
 */
async function querySupplierItemBillDownloadUrl(request: QuerySupplierItemBillDownloadUrlRequest): QuerySupplierItemBillDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySupplierItemBillDownloadUrl', 'POST', '/', 'json', true, 'form', request);
}

model QueryUnfinishedActivitiesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=20, position='Query'),
}

model QueryUnfinishedActivitiesResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmActivityModelExtList?: {
    lmActivityModelV2Ext?: [ 
    {
      activityPicUrl?: string(name='ActivityPicUrl'),
      bizId?: string(name='BizId', example='LMALL20******002'),
      description?: string(name='Description'),
      endDate?: string(name='EndDate', example='2022-01-14 23:59:59'),
      lmActivityId?: long(name='LmActivityId', example='679'),
      lmActivitySessionModels?: {
        lmActivitySessionModel?: [ 
        {
          bizId?: string(name='BizId', example='LMALL20******001'),
          description?: string(name='Description'),
          displayDate?: string(name='DisplayDate', example='2022-03-08 18:59:59'),
          endDate?: string(name='EndDate', example='2022-03-09 18:59:59'),
          extInfo?: map[string]any(name='ExtInfo'),
          lmActivityId?: long(name='LmActivityId', example='679'),
          lmSessionId?: long(name='LmSessionId'),
          name?: string(name='Name'),
          startDate?: string(name='StartDate', example='2022-03-08 00:00:00'),
          subBizCode?: string(name='SubBizCode', example='3a92eb6******54005be358a43bd'),
        }
      ](name='LmActivitySessionModel')
      }(name='LmActivitySessionModels'),
      name?: string(name='Name'),
      startDate?: string(name='StartDate', example='2022-03-09 11:17:38'),
    }
  ](name='LmActivityModelV2Ext')
  }(name='LmActivityModelExtList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='AB121F3E-607D-5EC3-A09B-7B54B86D9154'),
  totalCount?: long(name='TotalCount', example='5'),
}

model QueryUnfinishedActivitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUnfinishedActivitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUnfinishedActivities  QueryUnfinishedActivitiesRequest
  * @return QueryUnfinishedActivitiesResponse
 */
async function queryUnfinishedActivities(request: QueryUnfinishedActivitiesRequest): QueryUnfinishedActivitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUnfinishedActivities', 'POST', '/', 'json', false, 'json', request);
}

model QueryUnfinishedSessionsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210802****', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=20, position='Query'),
  queryTime?: long(name='QueryTime', example='1637294220', position='Query'),
}

model QueryUnfinishedSessionsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmActivitySessionModelList?: {
    lmActivitySessionModel?: [ 
    {
      bizId?: string(name='BizId', example='LMALL20211013****'),
      description?: string(name='Description', example='""'),
      displayDate?: string(name='DisplayDate', example='2017-11-30 23:59:59'),
      endDate?: string(name='EndDate', example='2017-11-30 23:59:59'),
      lmActivityId?: long(name='LmActivityId', example='679'),
      lmSessionId?: long(name='LmSessionId'),
      name?: string(name='Name'),
      startDate?: string(name='StartDate', example='2021-05-01 00:00:00'),
      subBizCode?: string(name='SubBizCode', example='04fe37ad2d7c42a3b215ff3a5a9*****'),
    }
  ](name='LmActivitySessionModel')
  }(name='LmActivitySessionModelList'),
  message?: string(name='Message', example='SUCCESS'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BA157565-3358-5D80-9330-************'),
  totalCount?: long(name='TotalCount', example='5'),
}

model QueryUnfinishedSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUnfinishedSessionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUnfinishedSessions  QueryUnfinishedSessionsRequest
  * @return QueryUnfinishedSessionsResponse
 */
async function queryUnfinishedSessions(request: QueryUnfinishedSessionsRequest): QueryUnfinishedSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUnfinishedSessions', 'POST', '/', 'json', false, 'json', request);
}

model QueryUnfinishedSessions4ItemsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  itemIds?: map[string]any(name='ItemIds', example='[\\"60716881****\\",\\"59183191****\\"]', shrink='json', position='Query'),
  lmItemIds?: map[string]any(name='LmItemIds', example='[\\"10000230-60716881****\\",\\"10000021-59183191****\\"]', shrink='json', position='Query'),
  queryTime?: long(name='QueryTime', example='1637294220', position='Query'),
}

model QueryUnfinishedSessions4ItemsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  lmItemActivitySessionModelListList?: {
    lmItemActivitySessionModelList?: [ 
    {
      itemId?: long(name='ItemId', example='60716881****'),
      lmActivitySessionModels?: {
        lmActivitySessionModel?: [ 
        {
          bizId?: string(name='BizId', example='LMALL20******001'),
          description?: string(name='Description'),
          displayDate?: string(name='DisplayDate', example='2022-03-30 13:53:00'),
          endDate?: string(name='EndDate', example='2022-04-01 00:00:00'),
          extInfo?: map[string]any(name='ExtInfo'),
          lmActivityId?: long(name='LmActivityId', example='679'),
          lmSessionId?: long(name='LmSessionId'),
          name?: string(name='Name'),
          startDate?: string(name='StartDate', example='2022-03-30 14:00:00'),
          subBizCode?: string(name='SubBizCode', example='cf5eddd******105378a3ea27b67'),
        }
      ](name='LmActivitySessionModel')
      }(name='LmActivitySessionModels'),
      lmItemId?: string(name='LmItemId', example='10000230-60716881****'),
    }
  ](name='LmItemActivitySessionModelList')
  }(name='LmItemActivitySessionModelListList'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='A209C555-3869-5259-9880-9747CBDA2B89'),
}

model QueryUnfinishedSessions4ItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUnfinishedSessions4ItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUnfinishedSessions4Items  QueryUnfinishedSessions4ItemsRequest
  * @return QueryUnfinishedSessions4ItemsResponse
 */
async function queryUnfinishedSessions4Items(request: QueryUnfinishedSessions4ItemsRequest): QueryUnfinishedSessions4ItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUnfinishedSessions4Items', 'POST', '/', 'json', false, 'json', request);
}

model QueryUpcomingMoviesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  cityCode: long(name='CityCode', description='This parameter is required.', example='110100', position='Query'),
  extJson?: map[string]any(name='ExtJson', example='{}', shrink='json', position='Query'),
}

model QueryUpcomingMoviesResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  movies?: {
    movie?: [ 
    {
      backgroundPicture?: string(name='BackgroundPicture'),
      country?: string(name='Country', example='""'),
      description?: string(name='Description'),
      director?: string(name='Director'),
      duration?: long(name='Duration', example='190'),
      highlight?: string(name='Highlight', example='""'),
      id?: long(name='Id', example='1159177'),
      language?: string(name='Language', example='""'),
      leadingRole?: string(name='LeadingRole', example='""'),
      movieName?: string(name='MovieName', example='""'),
      movieNameEn?: string(name='MovieNameEn', example='""'),
      movieTypeList?: string(name='MovieTypeList'),
      movieVersion?: string(name='MovieVersion'),
      openDay?: string(name='OpenDay'),
      openTime?: string(name='OpenTime', example='2022-04-01 12:00:00'),
      poster?: string(name='Poster', example='""'),
      remark?: string(name='Remark', example='9.6'),
      trailerList?: string(name='TrailerList', example='[]'),
      type?: string(name='Type'),
    }
  ](name='Movie')
  }(name='Movies'),
  requestId?: string(name='RequestId', example='9681B75A-1BE4-57D2-8C03-5B6BEF29378D'),
  subCode?: string(name='SubCode', example='208'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='16'),
}

model QueryUpcomingMoviesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUpcomingMoviesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUpcomingMovies  QueryUpcomingMoviesRequest
  * @return QueryUpcomingMoviesResponse
 */
async function queryUpcomingMovies(request: QueryUpcomingMoviesRequest): QueryUpcomingMoviesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUpcomingMovies', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', position='Body'),
}

model QueryUserAccountResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    bizId?: string(name='BizId'),
    cUserId?: string(name='CUserId'),
    extInfo?: string(name='ExtInfo'),
    lmUid?: long(name='LmUid'),
    requestId?: string(name='RequestId'),
    tbAccountType?: string(name='TbAccountType'),
    tbUserId?: long(name='TbUserId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryUserAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserAccount  QueryUserAccountRequest
  * @return QueryUserAccountResponse
 */
async function queryUserAccount(request: QueryUserAccountRequest): QueryUserAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserAccount', 'POST', '/', 'json', true, 'form', request);
}

model QueryUserGameProcessRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Body'),
  processId: string(name='ProcessId', description='This parameter is required.', example='6******352', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******372', position='Query'),
}

model QueryUserGameProcessResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    activityId?: string(name='ActivityId', example='134'),
    createTime?: long(name='CreateTime', example='1638451941000'),
    currentShowContent?: string(name='CurrentShowContent', example='""'),
    currentStepId?: string(name='CurrentStepId', example='""'),
    currentStepStatus?: string(name='CurrentStepStatus', example='""'),
    desc?: string(name='Desc', example='""'),
    extInfo?: string(name='ExtInfo', example='{"key":"value"}'),
    gameId?: string(name='GameId', example='6******723'),
    modifyTime?: long(name='ModifyTime', example='1648451941000'),
    name?: string(name='Name', example='""'),
    processId?: string(name='ProcessId', example='6******352'),
    routeId?: string(name='RouteId', example='RouteId_1'),
    status?: string(name='Status', example='""'),
    type?: string(name='Type', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='45B9EF4E-4D18-59B2-85E6-9B568F73C79D'),
}

model QueryUserGameProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserGameProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserGameProcess  QueryUserGameProcessRequest
  * @return QueryUserGameProcessResponse
 */
async function queryUserGameProcess(request: QueryUserGameProcessRequest): QueryUserGameProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserGameProcess', 'POST', '/', 'json', true, 'form', request);
}

model QueryUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******3646', position='Query'),
}

model QueryUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='11******466'),
    bizId?: string(name='BizId', example='LMALL20******008'),
    bizUid?: string(name='BizUid', example='22******3646'),
    createTime?: long(name='CreateTime', example='1639037068811'),
    currentAmount?: long(name='CurrentAmount', example='1000'),
    frozenAmount?: long(name='FrozenAmount', example='4000'),
    historyAmount?: long(name='HistoryAmount', example='5000'),
    level?: string(name='Level', example='1'),
    modifyTime?: long(name='ModifyTime', example='1642662319000'),
    status?: string(name='Status', example='4'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model QueryUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserPoint  QueryUserPointRequest
  * @return QueryUserPointResponse
 */
async function queryUserPoint(request: QueryUserPointRequest): QueryUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserPoint', 'GET', '/', 'json', false, 'json', request);
}

model QueryWithholdTradeRequest {
  merchantId?: string(name='MerchantId', example='64******721', position='Body'),
  outTradeNo?: string(name='OutTradeNo', example='""', position='Body'),
  tradeNo?: string(name='TradeNo', example='""', position='Body'),
}

model QueryWithholdTradeResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  queryWithholdTradeResponse?: {
    outTradeNo?: string(name='OutTradeNo', example='""'),
    paymentDate?: string(name='PaymentDate'),
    settleStatus?: string(name='SettleStatus', example='""'),
    totalAmount?: string(name='TotalAmount', example='1000'),
    tradeNo?: string(name='TradeNo', example='""'),
    tradeStatus?: string(name='TradeStatus', example='""'),
  }(name='QueryWithholdTradeResponse'),
  requestId?: string(name='RequestId', example='0825B1A4-0870-50BD-8AA3-9618587BEBC2'),
}

model QueryWithholdTradeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWithholdTradeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWithholdTrade  QueryWithholdTradeRequest
  * @return QueryWithholdTradeResponse
 */
async function queryWithholdTrade(request: QueryWithholdTradeRequest): QueryWithholdTradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWithholdTrade', 'POST', '/', 'json', true, 'form', request);
}

model RebindTbAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', position='Body'),
  tbUserId?: long(name='TbUserId', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', position='Body'),
}

model RebindTbAccountResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    bizId?: string(name='BizId'),
    cUserId?: string(name='CUserId'),
    extInfo?: string(name='ExtInfo'),
    lmUid?: long(name='LmUid'),
    requestId?: string(name='RequestId'),
    tbAccountType?: string(name='TbAccountType'),
    tbUserId?: long(name='TbUserId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model RebindTbAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebindTbAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RebindTbAccount  RebindTbAccountRequest
  * @return RebindTbAccountResponse
 */
async function rebindTbAccount(request: RebindTbAccountRequest): RebindTbAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebindTbAccount', 'POST', '/', 'json', true, 'form', request);
}

model RefreshSettlementOrderAccountRequest {
  accountId?: string(name='AccountId', example='709447***856069', position='Body'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210125****', position='Body'),
  extInfo?: string(name='ExtInfo', example='{"key":"value"}', position='Body'),
  tenantId?: string(name='TenantId', example='7521****8332932', position='Body'),
}

model RefreshSettlementOrderAccountResponseBody = {
  code?: string(name='Code', example='0000'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: [ 
    {
      accountNo?: string(name='AccountNo', example='15******65'),
      message?: string(name='Message', example='Success'),
      result?: string(name='Result'),
      settleNo?: string(name='SettleNo', example='TEST000000'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId', example='719E8348-72BD-581E-971F-467***6C908'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
}

model RefreshSettlementOrderAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshSettlementOrderAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshSettlementOrderAccount  RefreshSettlementOrderAccountRequest
  * @return RefreshSettlementOrderAccountResponse
 */
async function refreshSettlementOrderAccount(request: RefreshSettlementOrderAccountRequest): RefreshSettlementOrderAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshSettlementOrderAccount', 'POST', '/', 'json', true, 'form', request);
}

model RefundOrderRequest {
  extInfo?: string(name='ExtInfo', example='{}', position='Body'),
  merchantId?: string(name='MerchantId', example='64******721', position='Body'),
  outRequestNo?: string(name='OutRequestNo', example='4111584A-44D8-49B6-80BD-FACD0726054C', position='Body'),
  outTradeNo?: string(name='OutTradeNo', example='23******32727', position='Body'),
  refundAmount?: string(name='RefundAmount', example='100', position='Body'),
  refundReason?: string(name='RefundReason', position='Body'),
  refundRoyaltyParameters?: string(name='RefundRoyaltyParameters', position='Body'),
  tradeNo?: string(name='TradeNo', example='WH******27', position='Body'),
}

model RefundOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  refundResponse?: {
    fundChange?: string(name='FundChange'),
    gmtRefundPay?: string(name='GmtRefundPay'),
    outRequestNo?: string(name='OutRequestNo', example='4111584A-44D8-49B6-80BD-FACD0726054C'),
    outTradeNo?: string(name='OutTradeNo', example='23******32727'),
    tradeNo?: string(name='TradeNo'),
  }(name='RefundResponse'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
}

model RefundOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefundOrder  RefundOrderRequest
  * @return RefundOrderResponse
 */
async function refundOrder(request: RefundOrderRequest): RefundOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundOrder', 'POST', '/', 'json', true, 'form', request);
}

model RefundPointRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20191223****', position='Query'),
  lmOrderId?: string(name='LmOrderId', example='44453****', position='Query'),
  reason?: string(name='Reason', position='Query'),
  sellerId?: string(name='SellerId', example='10718491****', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='susan*****', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model RefundPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537****'),
}

model RefundPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefundPoint  RefundPointRequest
  * @return RefundPointResponse
 */
async function refundPoint(request: RefundPointRequest): RefundPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundPoint', 'POST', '/', 'json', false, 'json', request);
}

model RefundUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  amount: long(name='Amount', description='This parameter is required.', example='100', minimum=0, position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2000***12', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}', shrink='json', position='Body'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='123', position='Query'),
  message?: string(name='Message', example='""', position='Query'),
  originRecordId: string(name='OriginRecordId', description='This parameter is required.', example='PYPT**12', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='1', position='Query'),
  title: string(name='Title', description='This parameter is required.', position='Query'),
}

model RefundUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='180173763600****'),
    action?: string(name='Action', example='""'),
    amount?: long(name='Amount', example='1'),
    bizId?: string(name='BizId', example='LMALL20211206****'),
    bizUid?: string(name='BizUid', example='4851826221****'),
    description?: string(name='Description'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    idempotentId?: string(name='IdempotentId', example='202112******31746-1202'),
    name?: string(name='Name'),
    recordId?: string(name='RecordId', example='414915628598****'),
    rest?: long(name='Rest', example='2000'),
    ruleId?: string(name='RuleId', example='33046'),
    status?: string(name='Status', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED****'),
}

model RefundUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefundUserPoint  RefundUserPointRequest
  * @return RefundUserPointResponse
 */
async function refundUserPoint(request: RefundUserPointRequest): RefundUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundUserPoint', 'POST', '/', 'json', true, 'form', request);
}

model RefuseMerchantSyncTaskRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20190325****', position='Query'),
  sellerNick?: string(name='SellerNick', position='Query'),
  taskId?: string(name='TaskId', example='1***1', position='Query'),
  timeStamp?: long(name='TimeStamp', example='1641708010', position='Query'),
}

model RefuseMerchantSyncTaskResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='The specified parameter lmItemId or itemId value is not valid.'),
  requestId?: string(name='RequestId', example='F2D3CA1E-28BE-5E1C-B55F-81C8F290****'),
}

model RefuseMerchantSyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefuseMerchantSyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefuseMerchantSyncTask  RefuseMerchantSyncTaskRequest
  * @return RefuseMerchantSyncTaskResponse
 */
async function refuseMerchantSyncTask(request: RefuseMerchantSyncTaskRequest): RefuseMerchantSyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefuseMerchantSyncTask', 'POST', '/', 'json', false, 'json', request);
}

model RegistAnonymousTbAccountRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20190729****', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='238837487****', position='Query'),
}

model RegistAnonymousTbAccountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='FC994CBE-F97C-5C58-ACF3-86F0292C****'),
}

model RegistAnonymousTbAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegistAnonymousTbAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegistAnonymousTbAccount  RegistAnonymousTbAccountRequest
  * @return RegistAnonymousTbAccountResponse
 */
async function registAnonymousTbAccount(request: RegistAnonymousTbAccountRequest): RegistAnonymousTbAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegistAnonymousTbAccount', 'POST', '/', 'json', false, 'json', request);
}

model RegisterSettleAccountRequest {
  accountChannel?: string(name='AccountChannel', example='bank', position='Body'),
  accountName?: string(name='AccountName', position='Body'),
  accountNo?: string(name='AccountNo', example='15******65', position='Body'),
  accountPayType?: string(name='AccountPayType', example='transferIn', position='Body'),
  accountType?: string(name='AccountType', example='""', position='Body'),
  bizId?: string(name='BizId', example='LMALL20******007', position='Body'),
  countryOrAreaCode?: string(name='CountryOrAreaCode', position='Body'),
  currency?: string(name='Currency', position='Body'),
  extInfo?: string(name='ExtInfo', example='{}', position='Body'),
  idempotentId?: string(name='IdempotentId', position='Body'),
}

model RegisterSettleAccountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='180173763600****'),
    accountNo?: string(name='AccountNo', example='15******65'),
    id?: string(name='Id', example='252'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='26F4B2C7-931F-5AC5-8FCC-AE76C9B00D2F'),
  subCode?: string(name='SubCode', example='207'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model RegisterSettleAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterSettleAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterSettleAccount  RegisterSettleAccountRequest
  * @return RegisterSettleAccountResponse
 */
async function registerSettleAccount(request: RegisterSettleAccountRequest): RegisterSettleAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterSettleAccount', 'POST', '/', 'json', true, 'form', request);
}

model RegisterUserAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2022***0001', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='3435***1231', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='user***121', position='Body'),
}

model RegisterUserAccountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='dsfdsfs***dsfdsfds'),
  message?: string(name='Message', example='success'),
  model?: {
    bizId?: string(name='BizId', example='LMALL20***002'),
    cUserId?: string(name='CUserId', example='user***121'),
    extInfo?: string(name='ExtInfo', example='{\\"gmtCreate\\":\\"2021-11-01 00:00:00\\"}'),
    lmUid?: long(name='LmUid', example='2313***1231'),
    requestId?: string(name='RequestId', example='03B94457-8***93-06CCB1345BC3'),
    tbAccountType?: string(name='TbAccountType', example='ANONY'),
    tbUserId?: long(name='TbUserId', example='3435***1231'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='03B94457-8FD***93-06CCB1345BC3'),
  subCode?: string(name='SubCode', example='1004'),
  subMessage?: string(name='SubMessage', example='""'),
  success?: boolean(name='Success', example='True'),
  totalCount?: long(name='TotalCount', example='5'),
}

model RegisterUserAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterUserAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterUserAccount  RegisterUserAccountRequest
  * @return RegisterUserAccountResponse
 */
async function registerUserAccount(request: RegisterUserAccountRequest): RegisterUserAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterUserAccount', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseMovieSeatRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******005', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='221249435****', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  lockSeatApplyKey: string(name='LockSeatApplyKey', description='This parameter is required.', example='""', position='Query'),
}

model ReleaseMovieSeatResponseBody = {
  actionResult?: {
    returnCode?: string(name='ReturnCode', example='0'),
    returnMessage?: string(name='ReturnMessage', example='""'),
    returnValue?: string(name='ReturnValue', example='true'),
  }(name='ActionResult'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='3F43129B-020F-5F8A-88B0-9CBDE2AD6F52'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseMovieSeatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseMovieSeatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseMovieSeat  ReleaseMovieSeatRequest
  * @return ReleaseMovieSeatResponse
 */
async function releaseMovieSeat(request: ReleaseMovieSeatRequest): ReleaseMovieSeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseMovieSeat', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAddressRequest {
  addressInfo: string(name='AddressInfo', description='This parameter is required.', position='Body'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL202101250001', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='1221', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model RemoveAddressResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B320B'),
}

model RemoveAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveAddress  RemoveAddressRequest
  * @return RemoveAddressResponse
 */
async function removeAddress(request: RemoveAddressRequest): RemoveAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAddress', 'POST', '/', 'json', true, 'form', request);
}

model RemoveMessagesRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2******001', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  messageIds: string(name='MessageIds', description='This parameter is required.', example='212112212', position='Query'),
}

model RemoveMessagesResponseBody = {
  actionResult?: {
    returnCode?: string(name='ReturnCode', example='0'),
    returnMessage?: string(name='ReturnMessage', example='Success'),
    returnValue?: string(name='ReturnValue', example='[{\\"uuid\\": \\"dim-a0bf795*******8e86d4d464dc3a\\", \\"code\\": \\"itm\\", \\"extendName\\": \\"item\\", \\"name\\": u\\"\\u5541\\", \\"description\\": u\\"\\u5546\\u4e49\\"}]'),
  }(name='ActionResult'),
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='1718921E-C8D4-55E1-B8D4-114AE537C1B7'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
}

model RemoveMessagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMessagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveMessages  RemoveMessagesRequest
  * @return RemoveMessagesResponse
 */
async function removeMessages(request: RemoveMessagesRequest): RemoveMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveMessages', 'POST', '/', 'json', false, 'json', request);
}

model RenderH5OrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid?: string(name='BizUid', example='208******6520', position='Query'),
  buyOrderRequestModel?: string(name='BuyOrderRequestModel', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='208******6520', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model RenderH5OrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    addressInfoList?: [ 
      {
        addressDetail?: string(name='AddressDetail'),
        addressId?: long(name='AddressId'),
        default?: boolean(name='Default', example='true'),
        divisionCode?: string(name='DivisionCode', example='410223'),
        receiver?: string(name='Receiver'),
        receiverPhone?: string(name='ReceiverPhone', example='158****3627'),
      }
    ](name='AddressInfoList'),
    buyerCurrentPoints?: long(name='BuyerCurrentPoints', example='1000'),
    deliveryInfoList?: [ 
      {
        displayName?: string(name='DisplayName'),
        id?: string(name='Id'),
        postFee?: long(name='PostFee'),
        serviceType?: long(name='ServiceType'),
      }
    ](name='DeliveryInfoList'),
    extInfo?: map[string]any(name='ExtInfo'),
    invoiceInfo?: {
      desc?: string(name='Desc'),
      type?: string(name='Type'),
    }(name='InvoiceInfo'),
    lmItemInfoList?: [ 
      {
        actualPrice?: long(name='ActualPrice', example='10'),
        canSell?: boolean(name='CanSell', example='true'),
        cash?: long(name='Cash'),
        features?: map[string]any(name='Features'),
        itemId?: long(name='ItemId', example='65******461'),
        itemName?: string(name='ItemName'),
        itemPicUrl?: string(name='ItemPicUrl'),
        itemUrl?: string(name='ItemUrl'),
        lmItemId?: string(name='LmItemId', example='10000102-******94679'),
        message?: string(name='Message'),
        points?: long(name='Points', example='69'),
        quantity?: int32(name='Quantity', example='1'),
        sellerId?: long(name='SellerId', example='42******044'),
        sellerNick?: string(name='SellerNick'),
        skuId?: long(name='SkuId', example='46******9302'),
        skuName?: string(name='SkuName'),
        tbShopName?: string(name='TbShopName'),
        virtualItemType?: string(name='VirtualItemType'),
      }
    ](name='LmItemInfoList'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='96B4141C-A3CD-5162-B435-4780A75E3D97'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
}

model RenderH5OrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenderH5OrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenderH5Order  RenderH5OrderRequest
  * @return RenderH5OrderResponse
 */
async function renderH5Order(request: RenderH5OrderRequest): RenderH5OrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenderH5Order', 'POST', '/', 'json', false, 'json', request);
}

model RenderOrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL2000***12', position='Query'),
  bizUid?: string(name='BizUid', example='2212850685759', position='Query'),
  deliveryAddress?: string(name='DeliveryAddress', example='***********************************************************************', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  itemList?: [ 
    {
      itemId?: long(name='ItemId', example='620033847326'),
      lmItemId?: string(name='LmItemId', example='10016572-654408058233'),
      quantity?: int32(name='Quantity', example='1'),
      skuId?: long(name='SkuId', example='4415814743135'),
    }
  ](name='ItemList', position='Query'),
  lmItemId?: string(name='LmItemId', example='10016572-654408058233', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='2212850685759', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model RenderOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SKU_IS_MISSING'),
  model?: {
    renderOrderInfos?: {
      renderOrderInfos?: [ 
      {
        deliveryInfos?: {
          deliveryInfos?: [ 
          {
            displayName?: string(name='DisplayName'),
            id?: string(name='Id'),
            postFee?: long(name='PostFee'),
            serviceType?: long(name='ServiceType'),
          }
        ](name='DeliveryInfos')
        }(name='DeliveryInfos'),
        extInfo?: map[string]any(name='ExtInfo'),
        lmItemInfos?: {
          lmItemInfos?: [ 
          {
            actualPrice?: long(name='ActualPrice'),
            canSell?: boolean(name='CanSell'),
            cash?: long(name='Cash'),
            itemId?: long(name='ItemId', example='658057729548'),
            itemName?: string(name='ItemName', example='iphone12'),
            itemPicUrl?: string(name='ItemPicUrl'),
            lmItemId?: string(name='LmItemId', example='10001036-254415474010492928'),
            message?: string(name='Message'),
            points?: long(name='Points', example='39'),
            quantity?: int32(name='Quantity', example='1'),
            sellerId?: long(name='SellerId', example='107184918'),
            sellerNick?: string(name='SellerNick'),
            skuId?: long(name='SkuId', example='4931861303981'),
            skuName?: string(name='SkuName', example='liu_12'),
          }
        ](name='LmItemInfos')
        }(name='LmItemInfos'),
      }
    ](name='RenderOrderInfos')
    }(name='RenderOrderInfos'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='DAAA6391-3339-5333-9E4D-C71CD26A231F'),
  subCode?: string(name='SubCode', example='SUCCESS'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='False'),
  totalCount?: long(name='TotalCount', example='5'),
}

model RenderOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenderOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenderOrder  RenderOrderRequest
  * @return RenderOrderResponse
 */
async function renderOrder(request: RenderOrderRequest): RenderOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenderOrder', 'POST', '/', 'json', false, 'json', request);
}

model RenderOrderWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL202***001', position='Body'),
  deliveryAddress: string(name='DeliveryAddress', description='This parameter is required.', position='Body'),
  itemList: [ 
    {
      itemId?: long(name='ItemId', example='661***740'),
      lmItemId?: string(name='LmItemId', example='100***02-661***740'),
      quantity?: int32(name='Quantity', example='1'),
      skuId?: long(name='SkuId', example='458***257'),
    }
  ](name='ItemList', description='This parameter is required.', shrink='json', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='123***23', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='U123***23', position='Body'),
}

model RenderOrderWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    addressInfos?: [ 
      {
        addressDetail?: string(name='AddressDetail'),
        addressId?: long(name='AddressId', example='31***40'),
        divisionCode?: string(name='DivisionCode', example='43***03'),
        isDefault?: boolean(name='IsDefault', example='false'),
        receiver?: string(name='Receiver'),
        receiverPhone?: string(name='ReceiverPhone', example='137***343'),
        townDivisionCode?: string(name='TownDivisionCode', example='430***008'),
      }
    ](name='AddressInfos'),
    buyerCurrentPoints?: long(name='BuyerCurrentPoints', example='1000'),
    canSell?: boolean(name='CanSell', example='true'),
    extInfo?: map[string]string(name='ExtInfo'),
    message?: string(name='Message', example='SUCCESS'),
    renderOrderInfos?: [ 
      {
        canSell?: boolean(name='CanSell', example='true'),
        deliveryInfos?: [ 
          {
            displayName?: string(name='DisplayName'),
            id?: string(name='Id', description='id', example='10'),
            postFee?: long(name='PostFee', example='0'),
            serviceType?: long(name='ServiceType', example='-4'),
          }
        ](name='DeliveryInfos'),
        extInfo?: map[string]string(name='ExtInfo'),
        invoiceInfo?: {
          desc?: string(name='Desc', example='""'),
          type?: string(name='Type'),
        }(name='InvoiceInfo'),
        lmItemInfos?: [ 
          {
            actualPrice?: long(name='ActualPrice', example='50000'),
            canSell?: boolean(name='CanSell', example='true'),
            cash?: long(name='Cash', example='16000'),
            features?: map[string]string(name='Features'),
            itemId?: long(name='ItemId', example='661***740'),
            itemName?: string(name='ItemName', example='iphone12'),
            itemPicUrl?: string(name='ItemPicUrl', example='https://aliyundoc.com'),
            itemPromInstVOS?: [ 
              {
                availableItems?: [ 
                  {
                    itemId?: long(name='ItemId', example='668***630'),
                    lmItemId?: string(name='LmItemId', example='100***35-630***809'),
                    lmShopId?: long(name='LmShopId', example='100***35'),
                    number?: int32(name='Number', example='1'),
                    points?: long(name='Points', example='0'),
                    pointsAmount?: long(name='PointsAmount', example='0'),
                    priceCent?: long(name='PriceCent', example='100'),
                    removed?: boolean(name='Removed', example='false'),
                    skuId?: long(name='SkuId', description='skuid', example='457***764'),
                    tbSellerId?: long(name='TbSellerId', example='32***42'),
                    userPayFee?: long(name='UserPayFee', example='100'),
                  }
                ](name='AvailableItems'),
                canUse?: boolean(name='CanUse', example='false'),
                discountPrice?: long(name='DiscountPrice', example='0'),
                expireTime?: long(name='ExpireTime', example='1659612158'),
                instanceId?: string(name='InstanceId', example='324***234'),
                level?: string(name='Level', example='0'),
                lmItemId?: string(name='LmItemId', example='100***35-582***661'),
                promotionName?: string(name='PromotionName'),
                promotionType?: string(name='PromotionType'),
                reason?: string(name='Reason'),
                selected?: boolean(name='Selected', example='false'),
                skuIds?: [ long ](name='SkuIds'),
                specialPrice?: long(name='SpecialPrice', example='0'),
                subBizCode?: string(name='SubBizCode', example='0eae4fd***e23145'),
                tbSellerId?: long(name='TbSellerId', example='32***24'),
                thresholdPrice?: long(name='ThresholdPrice', example='0'),
                useStartTime?: long(name='UseStartTime', example='1659612158'),
              }
            ](name='ItemPromInstVOS'),
            itemUrl?: string(name='ItemUrl', example='https://aliyundoc.com'),
            lmItemId?: string(name='LmItemId', example='100***02-661***740'),
            message?: string(name='Message', example='SUCCESS'),
            pointPrice?: long(name='PointPrice', example='1000000'),
            points?: long(name='Points', example='100000'),
            promotionFee?: long(name='PromotionFee', example='6000'),
            quantity?: int32(name='Quantity', example='1'),
            reservePrice?: long(name='ReservePrice', example='1000'),
            sellerId?: long(name='SellerId', example='107***918'),
            sellerNick?: string(name='SellerNick'),
            skuId?: long(name='SkuId', description='skuid', example='493***981'),
            skuName?: string(name='SkuName', example='64GB'),
            tbShopName?: string(name='TbShopName'),
            virtualItemType?: string(name='VirtualItemType', example='""'),
          }
        ](name='LmItemInfos'),
        message?: string(name='Message', example='""'),
        sellerId?: long(name='SellerId', example='218***608'),
        shopPromInstVOS?: [ 
          {
            availableItems?: [ 
              {
                itemId?: long(name='ItemId', example='668***630'),
                lmItemId?: string(name='LmItemId', example='100***88-52***337'),
                lmShopId?: long(name='LmShopId', example='10***40'),
                number?: int32(name='Number', example='0'),
                points?: long(name='Points', example='0'),
                pointsAmount?: long(name='PointsAmount', example='0'),
                priceCent?: long(name='PriceCent', example='1490'),
                removed?: boolean(name='Removed', example='false'),
                skuId?: long(name='SkuId', example='502***91'),
                tbSellerId?: long(name='TbSellerId', example='32***32'),
                userPayFee?: long(name='UserPayFee', example='100'),
              }
            ](name='AvailableItems'),
            canUse?: boolean(name='CanUse', example='false'),
            discountPrice?: long(name='DiscountPrice', example='3'),
            expireTime?: long(name='ExpireTime', example='1659612158'),
            instanceId?: string(name='InstanceId', example='324***242'),
            level?: string(name='Level', example='0'),
            lmItemId?: string(name='LmItemId', example='100***42-568***99'),
            promotionName?: string(name='PromotionName'),
            promotionType?: string(name='PromotionType'),
            reason?: string(name='Reason', example='""'),
            selected?: boolean(name='Selected', example='true'),
            skuIds?: [ long ](name='SkuIds'),
            specialPrice?: long(name='SpecialPrice', example='88'),
            subBizCode?: string(name='SubBizCode', example='40b8362***20760d'),
            tbSellerId?: long(name='TbSellerId', example='343***242'),
            thresholdPrice?: long(name='ThresholdPrice', example='1000'),
            useStartTime?: long(name='UseStartTime', example='1659612158'),
          }
        ](name='ShopPromInstVOS'),
        tbShopName?: string(name='TbShopName'),
      }
    ](name='RenderOrderInfos'),
    unsellableRenderOrderInfos?: [ 
      {
        canSell?: boolean(name='CanSell', example='false'),
        deliveryInfos?: [ 
          {
            displayName?: string(name='DisplayName'),
            id?: string(name='Id', description='id', example='4'),
            postFee?: long(name='PostFee', example='0'),
            serviceType?: long(name='ServiceType', example='-4'),
          }
        ](name='DeliveryInfos'),
        extInfo?: map[string]string(name='ExtInfo'),
        invoiceInfo?: {
          desc?: string(name='Desc'),
          type?: string(name='Type'),
        }(name='InvoiceInfo'),
        lmItemInfos?: [ 
          {
            actualPrice?: long(name='ActualPrice', example='1000'),
            canSell?: boolean(name='CanSell', example='true'),
            cash?: long(name='Cash', example='100'),
            features?: map[string]string(name='Features'),
            itemId?: long(name='ItemId', example='651***245'),
            itemName?: string(name='ItemName'),
            itemPicUrl?: string(name='ItemPicUrl', example='https://aliyundoc.com'),
            itemPromInstVOS?: [ 
              {
                availableItems?: [ 
                  {
                    itemId?: long(name='ItemId', example='413***546'),
                    lmItemId?: string(name='LmItemId', example='100***03-680***926'),
                    lmShopId?: long(name='LmShopId', example='100***92'),
                    number?: int32(name='Number', example='1'),
                    points?: long(name='Points', example='0'),
                    pointsAmount?: long(name='PointsAmount', example='0'),
                    priceCent?: long(name='PriceCent', example='2950'),
                    removed?: boolean(name='Removed', example='false'),
                    skuId?: long(name='SkuId', description='skuid', example='504***414'),
                    tbSellerId?: long(name='TbSellerId', example='21***31'),
                    userPayFee?: long(name='UserPayFee', example='2950'),
                  }
                ](name='AvailableItems'),
                canUse?: boolean(name='CanUse', example='false'),
                discountPrice?: long(name='DiscountPrice', example='600'),
                expireTime?: long(name='ExpireTime', example='1659612158'),
                instanceId?: string(name='InstanceId', example='324***253'),
                level?: string(name='Level', example='1'),
                lmItemId?: string(name='LmItemId', example='100***17-6511***700'),
                promotionName?: string(name='PromotionName'),
                promotionType?: string(name='PromotionType'),
                reason?: string(name='Reason', example='""'),
                selected?: boolean(name='Selected', example='false'),
                skuIds?: [ long ](name='SkuIds', description='skuid'),
                specialPrice?: long(name='SpecialPrice', example='300'),
                subBizCode?: string(name='SubBizCode', example='9b1f9bd***b774c0'),
                tbSellerId?: long(name='TbSellerId', example='324***242'),
                thresholdPrice?: long(name='ThresholdPrice', example='500'),
                useStartTime?: long(name='UseStartTime', example='1659612158'),
              }
            ](name='ItemPromInstVOS'),
            itemUrl?: string(name='ItemUrl', example='https://aliyundoc.com'),
            lmItemId?: string(name='LmItemId', example='100***87-644***2078'),
            message?: string(name='Message', example='""'),
            pointPrice?: long(name='PointPrice', example='0'),
            points?: long(name='Points', example='0'),
            promotionFee?: long(name='PromotionFee', example='0'),
            quantity?: int32(name='Quantity', example='3'),
            reservePrice?: long(name='ReservePrice', example='999'),
            sellerId?: long(name='SellerId', example='218***608'),
            sellerNick?: string(name='SellerNick'),
            skuId?: long(name='SkuId', description='skuid', example='-1'),
            skuName?: string(name='SkuName', example='500g'),
            tbShopName?: string(name='TbShopName'),
            virtualItemType?: string(name='VirtualItemType'),
          }
        ](name='LmItemInfos'),
        message?: string(name='Message'),
        sellerId?: long(name='SellerId', example='2204***416'),
        shopPromInstVOS?: [ 
          {
            availableItems?: [ 
              {
                itemId?: long(name='ItemId', example='661***792'),
                lmItemId?: string(name='LmItemId', example='100***66-633***108'),
                lmShopId?: long(name='LmShopId', example='100***92'),
                number?: int32(name='Number', example='1'),
                points?: long(name='Points', example='0'),
                pointsAmount?: long(name='PointsAmount', example='0'),
                priceCent?: long(name='PriceCent', example='1000'),
                removed?: boolean(name='Removed', example='true'),
                skuId?: long(name='SkuId', example='502***2291'),
                tbSellerId?: long(name='TbSellerId', example='3432***42'),
                userPayFee?: long(name='UserPayFee', example='500'),
              }
            ](name='AvailableItems'),
            canUse?: boolean(name='CanUse', example='false'),
            discountPrice?: long(name='DiscountPrice', example='0'),
            expireTime?: long(name='ExpireTime', example='1659612158'),
            instanceId?: string(name='InstanceId', example='232***777'),
            level?: string(name='Level', example='1'),
            lmItemId?: string(name='LmItemId', example='100***95-625***772'),
            promotionName?: string(name='PromotionName'),
            promotionType?: string(name='PromotionType'),
            reason?: string(name='Reason', example='""'),
            selected?: boolean(name='Selected', example='false'),
            skuIds?: [ long ](name='SkuIds'),
            specialPrice?: long(name='SpecialPrice', example='0'),
            subBizCode?: string(name='SubBizCode', example='fa7a31***7787b2'),
            tbSellerId?: long(name='TbSellerId', example='44***53'),
            thresholdPrice?: long(name='ThresholdPrice', example='0'),
            useStartTime?: long(name='UseStartTime', example='1659612158'),
          }
        ](name='ShopPromInstVOS'),
        tbShopName?: string(name='TbShopName'),
      }
    ](name='UnsellableRenderOrderInfos'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='978A8742-1A***9-F8713ACBC385'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model RenderOrderWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenderOrderWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenderOrderWithDesignatedTbUid  RenderOrderWithDesignatedTbUidRequest
  * @return RenderOrderWithDesignatedTbUidResponse
 */
async function renderOrderWithDesignatedTbUid(request: RenderOrderWithDesignatedTbUidRequest): RenderOrderWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenderOrderWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model RepayForPayUrlRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210802****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='9f99f38030254728***', position='Query'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='449975059**', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='9f99f38030254728***', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model RepayForPayUrlResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  model?: {
    frontUrl?: string(name='FrontUrl', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='1AF23E47-D8FB-576A-B069-CA98B4DE****'),
}

model RepayForPayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RepayForPayUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RepayForPayUrl  RepayForPayUrlRequest
  * @return RepayForPayUrlResponse
 */
async function repayForPayUrl(request: RepayForPayUrlRequest): RepayForPayUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RepayForPayUrl', 'POST', '/', 'json', false, 'json', request);
}

model RepayOrderRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20210125****', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='9f99f38030254728***', position='Query'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', example='449975059**', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', example='9f99f38030254728***', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model RepayOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', example='322830A9-C820-5974-B409-7B32C41E8B42'),
}

model RepayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RepayOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RepayOrder  RepayOrderRequest
  * @return RepayOrderResponse
 */
async function repayOrder(request: RepayOrderRequest): RepayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RepayOrder', 'POST', '/', 'json', false, 'json', request);
}

model RepayWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', position='Body'),
  extJson?: string(name='ExtJson', position='Body'),
  lmOrderId: long(name='LmOrderId', description='This parameter is required.', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', position='Body'),
  tbUserId?: long(name='TbUserId', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', position='Body'),
}

model RepayWithDesignatedTbUidResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    app?: string(name='App'),
    frontUrl?: string(name='FrontUrl'),
    isOnlyPaidPoint?: boolean(name='IsOnlyPaidPoint'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model RepayWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RepayWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RepayWithDesignatedTbUid  RepayWithDesignatedTbUidRequest
  * @return RepayWithDesignatedTbUidResponse
 */
async function repayWithDesignatedTbUid(request: RepayWithDesignatedTbUidRequest): RepayWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RepayWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model ReserveMovieSeatRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******003', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='22******85759', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  mobile: string(name='Mobile', description='This parameter is required.', example='186******71', position='Query'),
  scheduleId: long(name='ScheduleId', description='This parameter is required.', example='9******15', position='Query'),
  seatIds: string(name='SeatIds', description='This parameter is required.', position='Query'),
  seatNames: string(name='SeatNames', description='This parameter is required.', position='Query'),
}

model ReserveMovieSeatResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='5E2D59BA-4EB0-45C4-A0D7-D98C1A4B320B'),
  reservedSeat?: {
    applyKey?: string(name='ApplyKey', example='""'),
    defaultLockSecond?: long(name='DefaultLockSecond', example='900'),
    reservedTime?: long(name='ReservedTime', example='1649302236658'),
    status?: string(name='Status', example='LOCKSUCCESS'),
  }(name='ReservedSeat'),
  subCode?: string(name='SubCode', example='207'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success', example='true'),
}

model ReserveMovieSeatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReserveMovieSeatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReserveMovieSeat  ReserveMovieSeatRequest
  * @return ReserveMovieSeatResponse
 */
async function reserveMovieSeat(request: ReserveMovieSeatRequest): ReserveMovieSeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReserveMovieSeat', 'POST', '/', 'json', false, 'json', request);
}

model SettleOrderRequest {
  extInfo?: string(name='ExtInfo', example='{"key":"value"}', position='Body'),
  merchantId?: string(name='MerchantId', example='64******721', position='Body'),
  outRequestNo?: string(name='OutRequestNo', example='""', position='Body'),
  outTradeNo?: string(name='OutTradeNo', example='""', position='Body'),
  royaltyParameters?: string(name='RoyaltyParameters', example='""', position='Body'),
  tradeNo?: string(name='TradeNo', example='""', position='Body'),
}

model SettleOrderResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
  tradeOrderSettleResponse?: {
    outRequestNo?: string(name='OutRequestNo', example='""'),
    tradeNo?: string(name='TradeNo', example='""'),
  }(name='TradeOrderSettleResponse'),
}

model SettleOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SettleOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SettleOrder  SettleOrderRequest
  * @return SettleOrderResponse
 */
async function settleOrder(request: SettleOrderRequest): SettleOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SettleOrder', 'POST', '/', 'json', true, 'form', request);
}

model StartUserGameRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  activityId: string(name='ActivityId', description='This parameter is required.', example='671091829240653825', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20288*****003', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{\\"channelId\\":\\"test\\"}', shrink='json', position='Body'),
  gameId: string(name='GameId', description='This parameter is required.', example='673474835708274689', position='Query'),
  routeId?: string(name='RouteId', example='RouteId1', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='123', position='Query'),
  userApp?: string(name='UserApp', example='MAC', position='Query'),
}

model StartUserGameResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    activityId?: string(name='ActivityId'),
    bizId?: string(name='BizId'),
    currentShowContent?: string(name='CurrentShowContent'),
    currentStepId?: string(name='CurrentStepId'),
    currentStepStatus?: string(name='CurrentStepStatus'),
    desc?: string(name='Desc'),
    extInfo?: string(name='ExtInfo'),
    gameId?: string(name='GameId'),
    name?: string(name='Name'),
    processId?: string(name='ProcessId', example='1916'),
    routeId?: string(name='RouteId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Model'),
  requestId?: string(name='RequestId', description='Id of the request', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model StartUserGameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartUserGameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartUserGame  StartUserGameRequest
  * @return StartUserGameResponse
 */
async function startUserGame(request: StartUserGameRequest): StartUserGameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartUserGame', 'POST', '/', 'json', true, 'form', request);
}

model SubmitReturnGoodLogisticsRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20****80001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='250014030308185405', position='Query'),
  cpCode: string(name='CpCode', description='This parameter is required.', example='SF', position='Query'),
  disputeId: long(name='DisputeId', description='This parameter is required.', example='96281042016947370', position='Query'),
  logisticsNo: string(name='LogisticsNo', description='This parameter is required.', example='SF131*****7061', position='Query'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='368925182', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='true', position='Query'),
}

model SubmitReturnGoodLogisticsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='C27A9456-5FC3-529D-9FDF-B21323E93B63'),
}

model SubmitReturnGoodLogisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitReturnGoodLogisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitReturnGoodLogistics  SubmitReturnGoodLogisticsRequest
  * @return SubmitReturnGoodLogisticsResponse
 */
async function submitReturnGoodLogistics(request: SubmitReturnGoodLogisticsRequest): SubmitReturnGoodLogisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitReturnGoodLogistics', 'POST', '/', 'json', false, 'json', request);
}

model SubmitReturnGoodLogisticsWithDesignatedTbUidRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20***003', position='Body'),
  cpCode: string(name='CpCode', description='This parameter is required.', example='YTO', position='Body'),
  disputeId: long(name='DisputeId', description='This parameter is required.', example='19145***4240', position='Body'),
  logisticsNo: string(name='LogisticsNo', description='This parameter is required.', example='YT685***0586', position='Body'),
  subLmOrderId: string(name='SubLmOrderId', description='This parameter is required.', example='702***47', position='Body'),
  tbAccountType: string(name='TbAccountType', description='This parameter is required.', example='ANONY', position='Body'),
  tbUserId?: long(name='TbUserId', example='321**123', position='Body'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='user0***01', position='Body'),
}

model SubmitReturnGoodLogisticsWithDesignatedTbUidResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId', example='1'),
  message?: string(name='Message', example='SUCCESS'),
  model?: any(name='Model', example='null'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='pageSize', example='20'),
  requestId?: string(name='RequestId', example='49789122-E***2-CFE09154810D'),
  subCode?: string(name='SubCode', example='200'),
  subMessage?: string(name='SubMessage', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='19'),
}

model SubmitReturnGoodLogisticsWithDesignatedTbUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitReturnGoodLogisticsWithDesignatedTbUidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitReturnGoodLogisticsWithDesignatedTbUid  SubmitReturnGoodLogisticsWithDesignatedTbUidRequest
  * @return SubmitReturnGoodLogisticsWithDesignatedTbUidResponse
 */
async function submitReturnGoodLogisticsWithDesignatedTbUid(request: SubmitReturnGoodLogisticsWithDesignatedTbUidRequest): SubmitReturnGoodLogisticsWithDesignatedTbUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitReturnGoodLogisticsWithDesignatedTbUid', 'POST', '/', 'json', true, 'form', request);
}

model SyncMerchantInfoRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******002', position='Query'),
  itemList?: string(name='ItemList', position='Body'),
  sellerNick?: string(name='SellerNick', position='Query'),
  taskId?: string(name='TaskId', example='1****3', position='Query'),
  timeStamp?: long(name='TimeStamp', example='1639540484044', position='Query'),
}

model SyncMerchantInfoResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    status?: string(name='Status'),
    taskId?: string(name='TaskId', example='1****1'),
    url?: string(name='Url'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='79C01D47-3C44-57D9-BC99-1B33F7ED14B8'),
}

model SyncMerchantInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncMerchantInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncMerchantInfo  SyncMerchantInfoRequest
  * @return SyncMerchantInfoResponse
 */
async function syncMerchantInfo(request: SyncMerchantInfoRequest): SyncMerchantInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncMerchantInfo', 'POST', '/', 'json', true, 'form', request);
}

model UnFreezeUserPointRequest {
  accountType?: string(name='AccountType', example='ANONY', position='Query'),
  amount: long(name='Amount', description='This parameter is required.', example='1000', position='Query'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******05', position='Query'),
  extInfo?: map[string]any(name='ExtInfo', example='{}', shrink='json', position='Body'),
  idempotentId: string(name='IdempotentId', description='This parameter is required.', example='20211212******31746-1202', position='Query'),
  message?: string(name='Message', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='136', position='Query'),
  thirdPartyUserId: string(name='ThirdPartyUserId', description='This parameter is required.', example='22******37', position='Query'),
  title: string(name='Title', description='This parameter is required.', position='Query'),
}

model UnFreezeUserPointResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    accountId?: string(name='AccountId', example='17******31'),
    action?: string(name='Action', example='""'),
    amount?: long(name='Amount', example='1000'),
    bizId?: string(name='BizId', example='LMALL20******001'),
    bizUid?: string(name='BizUid', example='22******37'),
    description?: string(name='Description'),
    extInfo?: map[string]any(name='ExtInfo', example='{"key":"value"}'),
    idempotentId?: string(name='IdempotentId', example='20211212******31746-1202'),
    name?: string(name='Name'),
    recordId?: string(name='RecordId', example='""'),
    rest?: long(name='Rest', example='2000'),
    ruleId?: string(name='RuleId', example='136'),
    status?: string(name='Status', example='""'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
}

model UnFreezeUserPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnFreezeUserPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnFreezeUserPoint  UnFreezeUserPointRequest
  * @return UnFreezeUserPointResponse
 */
async function unFreezeUserPoint(request: UnFreezeUserPointRequest): UnFreezeUserPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnFreezeUserPoint', 'POST', '/', 'json', true, 'form', request);
}

model UnsignWithholdAgreementRequest {
  agreementNo?: string(name='AgreementNo', example='20******8006', position='Body'),
  externalAgreementNo?: string(name='ExternalAgreementNo', example='234******3626', position='Body'),
  merchantId?: string(name='MerchantId', example='64******721', position='Body'),
  outRequestNo?: string(name='OutRequestNo', example='""', position='Body'),
}

model UnsignWithholdAgreementResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
  withholdSignResponse?: {
    outRequestNo?: string(name='OutRequestNo', example='""'),
  }(name='WithholdSignResponse'),
}

model UnsignWithholdAgreementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsignWithholdAgreementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnsignWithholdAgreement  UnsignWithholdAgreementRequest
  * @return UnsignWithholdAgreementResponse
 */
async function unsignWithholdAgreement(request: UnsignWithholdAgreementRequest): UnsignWithholdAgreementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnsignWithholdAgreement', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAddressRequest {
  addressInfo: string(name='AddressInfo', description='This parameter is required.', position='Body'),
  bizId: string(name='BizId', description='This parameter is required.', example='LMMINIAPP202004140002', position='Query'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', position='Query'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount', example='false', position='Query'),
}

model UpdateAddressResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='6103AD7B-21C2-523B-89D0-579DA58D08E8'),
}

model UpdateAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAddress  UpdateAddressRequest
  * @return UpdateAddressResponse
 */
async function updateAddress(request: UpdateAddressRequest): UpdateAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAddress', 'POST', '/', 'json', true, 'form', request);
}

model ValidateTaobaoAccountRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='LMALL20******001', position='Query'),
  bizUid: string(name='BizUid', description='This parameter is required.', example='42******681', position='Query'),
  extJson?: string(name='ExtJson', example='{}', position='Query'),
  mobileNo?: string(name='MobileNo', example='181****0115', position='Query'),
  tbUserNick?: string(name='TbUserNick', position='Query'),
}

model ValidateTaobaoAccountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message', example='SUCCESS'),
  model?: {
    match?: boolean(name='Match'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='DAAA6391-3339-5333-9E4D-C71CD26A231F'),
  subCode?: string(name='SubCode', example='205'),
  subMessage?: string(name='SubMessage', example='1004'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ValidateTaobaoAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateTaobaoAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateTaobaoAccount  ValidateTaobaoAccountRequest
  * @return ValidateTaobaoAccountResponse
 */
async function validateTaobaoAccount(request: ValidateTaobaoAccountRequest): ValidateTaobaoAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateTaobaoAccount', 'POST', '/', 'json', false, 'json', request);
}

