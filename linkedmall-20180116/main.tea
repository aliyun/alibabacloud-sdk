/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-hangzhou = 'linkedmall.aliyuncs.com',
    cn-shanghai = 'linkedmall.aliyuncs.com',
    ap-northeast-1 = 'linkedmall.aliyuncs.com',
    ap-northeast-2-pop = 'linkedmall.aliyuncs.com',
    ap-south-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-2 = 'linkedmall.aliyuncs.com',
    ap-southeast-3 = 'linkedmall.aliyuncs.com',
    ap-southeast-5 = 'linkedmall.aliyuncs.com',
    cn-beijing = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-pop = 'linkedmall.aliyuncs.com',
    cn-beijing-gov-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkedmall.aliyuncs.com',
    cn-chengdu = 'linkedmall.aliyuncs.com',
    cn-edge-1 = 'linkedmall.aliyuncs.com',
    cn-fujian = 'linkedmall.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-finance = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkedmall.aliyuncs.com',
    cn-hongkong = 'linkedmall.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkedmall.aliyuncs.com',
    cn-huhehaote = 'linkedmall.aliyuncs.com',
    cn-north-2-gov-1 = 'linkedmall.aliyuncs.com',
    cn-qingdao = 'linkedmall.aliyuncs.com',
    cn-qingdao-nebula = 'linkedmall.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shanghai-inner = 'linkedmall.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen = 'linkedmall.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-inner = 'linkedmall.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkedmall.aliyuncs.com',
    cn-wuhan = 'linkedmall.aliyuncs.com',
    cn-yushanfang = 'linkedmall.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkedmall.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkedmall.aliyuncs.com',
    eu-central-1 = 'linkedmall.aliyuncs.com',
    eu-west-1 = 'linkedmall.aliyuncs.com',
    eu-west-1-oxs = 'linkedmall.aliyuncs.com',
    me-east-1 = 'linkedmall.aliyuncs.com',
    rus-west-1-pop = 'linkedmall.aliyuncs.com',
    us-east-1 = 'linkedmall.aliyuncs.com',
    us-west-1 = 'linkedmall.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('linkedmall', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model QueryStatementsRequest {
  tenantId?: string(name='TenantId'),
  payeeIds?: string(name='PayeeIds'),
  settleNoes?: string(name='SettleNoes'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  settleStatus?: string(name='SettleStatus'),
  settleType?: string(name='SettleType'),
  extInfo?: string(name='ExtInfo'),
}

model QueryStatementsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    pageSize?: int32(name='PageSize'),
    pageNumber?: int32(name='PageNumber'),
    totalCount?: int32(name='TotalCount'),
    statementList?: [ 
      {
        payeeAccountName?: string(name='PayeeAccountName'),
        payeeId?: string(name='PayeeId'),
        payeeAccountNo?: string(name='PayeeAccountNo'),
        createDate?: string(name='CreateDate'),
        extInfo?: string(name='ExtInfo'),
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        settleNo?: string(name='SettleNo'),
        attributes?: string(name='Attributes'),
        settleStatus?: string(name='SettleStatus'),
        payeeName?: string(name='PayeeName'),
        settleAmount?: string(name='SettleAmount'),
        payeeAccountId?: string(name='PayeeAccountId'),
        modifiedDate?: string(name='ModifiedDate'),
        statusMessage?: string(name='StatusMessage'),
        tenantId?: string(name='TenantId'),
      }
    ](name='StatementList'),
  }(name='Model'),
}

model QueryStatementsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStatementsResponseBody(name='body'),
}

async function queryStatementsWithOptions(request: QueryStatementsRequest, runtime: Util.RuntimeOptions): QueryStatementsResponse {
  Util.validateModel(request);
  var query = {};
  query["TenantId"] = request.tenantId;
  query["PayeeIds"] = request.payeeIds;
  query["SettleNoes"] = request.settleNoes;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["SettleStatus"] = request.settleStatus;
  query["SettleType"] = request.settleType;
  query["ExtInfo"] = request.extInfo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryStatements',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStatements(request: QueryStatementsRequest): QueryStatementsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStatementsWithOptions(request, runtime);
}

model QueryAllCitiesRequest {
  bizId?: string(name='BizId'),
  extJson?: map[string]any(name='ExtJson'),
}

model QueryAllCitiesShrinkRequest {
  bizId?: string(name='BizId'),
  extJsonShrink?: string(name='ExtJson'),
}

model QueryAllCitiesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  cities?: {
    city?: [ 
    {
      cityCode?: long(name='CityCode'),
      parentId?: long(name='ParentId'),
      name?: string(name='Name'),
      pinYin?: string(name='PinYin'),
      id?: long(name='Id'),
    }
  ](name='City')
  }(name='Cities'),
}

model QueryAllCitiesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAllCitiesResponseBody(name='body'),
}

async function queryAllCitiesWithOptions(tmpReq: QueryAllCitiesRequest, runtime: Util.RuntimeOptions): QueryAllCitiesResponse {
  Util.validateModel(tmpReq);
  var request = new QueryAllCitiesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extJson)) {
    request.extJsonShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extJson, 'ExtJson', 'json');
  }
  var query = {};
  query["BizId"] = request.bizId;
  query["ExtJson"] = request.extJsonShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllCities',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllCities(request: QueryAllCitiesRequest): QueryAllCitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllCitiesWithOptions(request, runtime);
}

model QueryUserGameProcessRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  processId?: string(name='ProcessId'),
}

model QueryUserGameProcessResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    processId?: string(name='ProcessId'),
    gameId?: string(name='GameId'),
    activityId?: string(name='ActivityId'),
    name?: string(name='Name'),
    type?: string(name='Type'),
    desc?: string(name='Desc'),
    content?: string(name='Content'),
    status?: string(name='Status'),
    currentStepStatus?: string(name='CurrentStepStatus'),
    currentStepId?: string(name='CurrentStepId'),
    gameCoinRecords?: string(name='GameCoinRecords'),
    gameAwardRecords?: string(name='GameAwardRecords'),
    extInfo?: string(name='ExtInfo'),
    routeId?: string(name='RouteId'),
  }(name='Model'),
}

model QueryUserGameProcessResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUserGameProcessResponseBody(name='body'),
}

async function queryUserGameProcessWithOptions(request: QueryUserGameProcessRequest, runtime: Util.RuntimeOptions): QueryUserGameProcessResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserGameProcess',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserGameProcess(request: QueryUserGameProcessRequest): QueryUserGameProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserGameProcessWithOptions(request, runtime);
}

model NotifyWithholdFundRequest {
  channelId?: string(name='ChannelId'),
  requestId?: string(name='RequestId'),
  operationDate?: string(name='OperationDate'),
  payTypes?: string(name='PayTypes'),
  amount?: long(name='Amount'),
  tenantOrderId?: string(name='TenantOrderId'),
}

model NotifyWithholdFundResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model NotifyWithholdFundResponse = {
  headers: map[string]string(name='headers'),
  body: NotifyWithholdFundResponseBody(name='body'),
}

async function notifyWithholdFundWithOptions(request: NotifyWithholdFundRequest, runtime: Util.RuntimeOptions): NotifyWithholdFundResponse {
  Util.validateModel(request);
  var query = {};
  query["ChannelId"] = request.channelId;
  query["RequestId"] = request.requestId;
  query["OperationDate"] = request.operationDate;
  query["PayTypes"] = request.payTypes;
  query["Amount"] = request.amount;
  query["TenantOrderId"] = request.tenantOrderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'NotifyWithholdFund',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function notifyWithholdFund(request: NotifyWithholdFundRequest): NotifyWithholdFundResponse {
  var runtime = new Util.RuntimeOptions{};
  return notifyWithholdFundWithOptions(request, runtime);
}

model CreateVirtualProductOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  outTradeId?: string(name='OutTradeId'),
  itemId?: long(name='ItemId'),
  quantity?: long(name='Quantity'),
  totalAmount?: long(name='TotalAmount'),
  extJson?: string(name='ExtJson'),
  deliveryAddress?: string(name='DeliveryAddress'),
  orderExpireTime?: long(name='OrderExpireTime'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  lmItemId?: string(name='LmItemId'),
  itemList?: [ 
    {
      skuId?: long(name='SkuId'),
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      quantity?: int32(name='Quantity'),
    }
  ](name='ItemList'),
}

model CreateVirtualProductOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    redirectUrl?: string(name='RedirectUrl'),
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
  }(name='Model'),
}

model CreateVirtualProductOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualProductOrderResponseBody(name='body'),
}

async function createVirtualProductOrderWithOptions(request: CreateVirtualProductOrderRequest, runtime: Util.RuntimeOptions): CreateVirtualProductOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["OutTradeId"] = request.outTradeId;
  query["ItemId"] = request.itemId;
  query["Quantity"] = request.quantity;
  query["TotalAmount"] = request.totalAmount;
  query["ExtJson"] = request.extJson;
  query["DeliveryAddress"] = request.deliveryAddress;
  query["OrderExpireTime"] = request.orderExpireTime;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  query["LmItemId"] = request.lmItemId;
  query["ItemList"] = request.itemList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualProductOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVirtualProductOrder(request: CreateVirtualProductOrderRequest): CreateVirtualProductOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualProductOrderWithOptions(request, runtime);
}

model GetCategoryChainRequest {
  bizId?: string(name='BizId'),
  categoryId?: long(name='CategoryId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
}

model GetCategoryChainResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  categoryList?: [ 
    {
      name?: string(name='Name'),
      categoryId?: long(name='CategoryId'),
    }
  ](name='CategoryList'),
}

model GetCategoryChainResponse = {
  headers: map[string]string(name='headers'),
  body: GetCategoryChainResponseBody(name='body'),
}

async function getCategoryChainWithOptions(request: GetCategoryChainRequest, runtime: Util.RuntimeOptions): GetCategoryChainResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["CategoryId"] = request.categoryId;
  query["ItemId"] = request.itemId;
  query["LmItemId"] = request.lmItemId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetCategoryChain',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCategoryChain(request: GetCategoryChainRequest): GetCategoryChainResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCategoryChainWithOptions(request, runtime);
}

model QueryAgreementRequest {
  externalAgreementNo?: string(name='ExternalAgreementNo'),
  merchantId?: string(name='MerchantId'),
  agreementNo?: string(name='AgreementNo'),
}

model QueryAgreementResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  queryAgreementResponse?: {
    status?: string(name='Status'),
    externalAgreementNo?: string(name='ExternalAgreementNo'),
    validTime?: string(name='ValidTime'),
    invalidTime?: string(name='InvalidTime'),
    agreementNo?: string(name='AgreementNo'),
    signTime?: string(name='SignTime'),
  }(name='QueryAgreementResponse'),
}

model QueryAgreementResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAgreementResponseBody(name='body'),
}

async function queryAgreementWithOptions(request: QueryAgreementRequest, runtime: Util.RuntimeOptions): QueryAgreementResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAgreement',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAgreement(request: QueryAgreementRequest): QueryAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAgreementWithOptions(request, runtime);
}

model QueryGuideItemGroupRequest {
  bizId?: string(name='BizId'),
  groupId?: string(name='GroupId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model QueryGuideItemGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  guideItemGroup?: {
    itemInfo?: [ 
    {
      priceCent?: long(name='PriceCent'),
      mainPicUrl?: string(name='MainPicUrl'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId'),
      pointPrice?: long(name='PointPrice'),
      itemId?: long(name='ItemId'),
      points?: long(name='Points'),
      pointsAmount?: long(name='PointsAmount'),
      reservePrice?: string(name='ReservePrice'),
      itemUrl?: string(name='ItemUrl'),
    }
  ](name='ItemInfo')
  }(name='GuideItemGroup'),
}

model QueryGuideItemGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGuideItemGroupResponseBody(name='body'),
}

async function queryGuideItemGroupWithOptions(request: QueryGuideItemGroupRequest, runtime: Util.RuntimeOptions): QueryGuideItemGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["GroupId"] = request.groupId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryGuideItemGroup',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGuideItemGroup(request: QueryGuideItemGroupRequest): QueryGuideItemGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGuideItemGroupWithOptions(request, runtime);
}

model CancelOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: string(name='LmOrderId'),
  accountType?: string(name='AccountType'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
}

model CancelOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrderWithOptions(request: CancelOrderRequest, runtime: Util.RuntimeOptions): CancelOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["AccountType"] = request.accountType;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CancelOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderWithOptions(request, runtime);
}

model QueryOrderCommissionRateRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: long(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryOrderCommissionRateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  commissionModels?: [ 
    {
      lmOrderId?: long(name='LmOrderId'),
      commissionInfo?: {
        rateType?: string(name='RateType'),
        rateConfig?: {
          configs?: [ 
            {
              valueUnit?: string(name='ValueUnit'),
              value?: long(name='Value'),
            }
          ](name='Configs'),
        }(name='RateConfig'),
      }(name='CommissionInfo'),
    }
  ](name='CommissionModels'),
}

model QueryOrderCommissionRateResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderCommissionRateResponseBody(name='body'),
}

async function queryOrderCommissionRateWithOptions(request: QueryOrderCommissionRateRequest, runtime: Util.RuntimeOptions): QueryOrderCommissionRateResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderCommissionRate',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderCommissionRate(request: QueryOrderCommissionRateRequest): QueryOrderCommissionRateResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderCommissionRateWithOptions(request, runtime);
}

model QueryOrderIdByPayIdRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  paymentId?: string(name='PaymentId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryOrderIdByPayIdResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  lmOrderIds?: {
    lmOrderIds?: [ 
    {
      lmOrderId?: long(name='LmOrderId'),
    }
  ](name='LmOrderIds')
  }(name='LmOrderIds'),
}

model QueryOrderIdByPayIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderIdByPayIdResponseBody(name='body'),
}

async function queryOrderIdByPayIdWithOptions(request: QueryOrderIdByPayIdRequest, runtime: Util.RuntimeOptions): QueryOrderIdByPayIdResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["PaymentId"] = request.paymentId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderIdByPayId',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderIdByPayId(request: QueryOrderIdByPayIdRequest): QueryOrderIdByPayIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderIdByPayIdWithOptions(request, runtime);
}

model AddAddressRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  addressInfo?: string(name='AddressInfo'),
}

model AddAddressResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  addressId?: long(name='AddressId'),
}

model AddAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AddAddressResponseBody(name='body'),
}

async function addAddressWithOptions(request: AddAddressRequest, runtime: Util.RuntimeOptions): AddAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddAddress',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAddress(request: AddAddressRequest): AddAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAddressWithOptions(request, runtime);
}

model RefundOrderRequest {
  outRequestNo?: string(name='OutRequestNo'),
  outTradeNo?: string(name='OutTradeNo'),
  tradeNo?: string(name='TradeNo'),
  refundReason?: string(name='RefundReason'),
  refundAmount?: string(name='RefundAmount'),
  refundRoyaltyParameters?: string(name='RefundRoyaltyParameters'),
  extInfo?: string(name='ExtInfo'),
  merchantId?: string(name='MerchantId'),
}

model RefundOrderResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  refundResponse?: {
    fundChange?: string(name='FundChange'),
    gmtRefundPay?: string(name='GmtRefundPay'),
    tradeNo?: string(name='TradeNo'),
    outTradeNo?: string(name='OutTradeNo'),
    outRequestNo?: string(name='OutRequestNo'),
  }(name='RefundResponse'),
}

model RefundOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RefundOrderResponseBody(name='body'),
}

async function refundOrderWithOptions(request: RefundOrderRequest, runtime: Util.RuntimeOptions): RefundOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RefundOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refundOrder(request: RefundOrderRequest): RefundOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return refundOrderWithOptions(request, runtime);
}

model RepayForPayUrlRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: long(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
}

model RepayForPayUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  model?: {
    frontUrl?: string(name='FrontUrl'),
  }(name='Model'),
}

model RepayForPayUrlResponse = {
  headers: map[string]string(name='headers'),
  body: RepayForPayUrlResponseBody(name='body'),
}

async function repayForPayUrlWithOptions(request: RepayForPayUrlRequest, runtime: Util.RuntimeOptions): RepayForPayUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RepayForPayUrl',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function repayForPayUrl(request: RepayForPayUrlRequest): RepayForPayUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return repayForPayUrlWithOptions(request, runtime);
}

model QueryMessagesRequest {
  bizId?: string(name='BizId'),
  topic?: string(name='Topic'),
  extJson?: string(name='ExtJson'),
}

model QueryMessagesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  subCode?: string(name='SubCode'),
  message?: string(name='Message'),
  logsId?: string(name='LogsId'),
  bizMessages?: {
    bizMessage?: [ 
    {
      contentMapJson?: string(name='ContentMapJson'),
      pubTime?: string(name='PubTime'),
      dataId?: long(name='DataId'),
      topic?: string(name='Topic'),
    }
  ](name='BizMessage')
  }(name='BizMessages'),
}

model QueryMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMessagesResponseBody(name='body'),
}

async function queryMessagesWithOptions(request: QueryMessagesRequest, runtime: Util.RuntimeOptions): QueryMessagesResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["Topic"] = request.topic;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryMessages',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMessages(request: QueryMessagesRequest): QueryMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMessagesWithOptions(request, runtime);
}

model QueryUnfinishedActivitiesRequest {
  bizId?: string(name='BizId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryUnfinishedActivitiesResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  totalCount?: long(name='TotalCount'),
  lmActivityModelExtList?: {
    lmActivityModelV2Ext?: [ 
    {
      endDate?: string(name='EndDate'),
      description?: string(name='Description'),
      startDate?: string(name='StartDate'),
      lmActivityId?: long(name='LmActivityId'),
      bizId?: string(name='BizId'),
      activityPicUrl?: string(name='ActivityPicUrl'),
      name?: string(name='Name'),
      lmActivitySessionModels?: {
        lmActivitySessionModel?: [ 
        {
          subBizCode?: string(name='SubBizCode'),
          endDate?: string(name='EndDate'),
          displayDate?: string(name='DisplayDate'),
          description?: string(name='Description'),
          lmSessionId?: long(name='LmSessionId'),
          startDate?: string(name='StartDate'),
          bizId?: string(name='BizId'),
          lmActivityId?: long(name='LmActivityId'),
          name?: string(name='Name'),
          extInfo?: map[string]any(name='ExtInfo'),
        }
      ](name='LmActivitySessionModel')
      }(name='LmActivitySessionModels'),
    }
  ](name='LmActivityModelV2Ext')
  }(name='LmActivityModelExtList'),
}

model QueryUnfinishedActivitiesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnfinishedActivitiesResponseBody(name='body'),
}

async function queryUnfinishedActivitiesWithOptions(request: QueryUnfinishedActivitiesRequest, runtime: Util.RuntimeOptions): QueryUnfinishedActivitiesResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryUnfinishedActivities',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUnfinishedActivities(request: QueryUnfinishedActivitiesRequest): QueryUnfinishedActivitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnfinishedActivitiesWithOptions(request, runtime);
}

model GetUserInfoRequest {
  bizId?: string(name='BizId'),
  userFlag?: string(name='UserFlag'),
  appName?: string(name='AppName'),
  queryJson?: string(name='QueryJson'),
}

model GetUserInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  loginResult?: {
    returnUrl?: string(name='ReturnUrl'),
    bizUserName?: string(name='BizUserName'),
    bizUid?: string(name='BizUid'),
    bizId?: string(name='BizId'),
    lmUserId?: long(name='LmUserId'),
    extInfo?: map[string]any(name='ExtInfo'),
    subBizId?: [ string ](name='SubBizId'),
  }(name='LoginResult'),
}

model GetUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserInfoResponseBody(name='body'),
}

async function getUserInfoWithOptions(request: GetUserInfoRequest, runtime: Util.RuntimeOptions): GetUserInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["UserFlag"] = request.userFlag;
  query["AppName"] = request.appName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetUserInfo',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserInfo(request: GetUserInfoRequest): GetUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserInfoWithOptions(request, runtime);
}

model EnableOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  outTradeId?: string(name='OutTradeId'),
  lmOrderId?: string(name='LmOrderId'),
  extJson?: string(name='ExtJson'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model EnableOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    redirectUrl?: string(name='RedirectUrl'),
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
  }(name='Model'),
}

model EnableOrderResponse = {
  headers: map[string]string(name='headers'),
  body: EnableOrderResponseBody(name='body'),
}

async function enableOrderWithOptions(request: EnableOrderRequest, runtime: Util.RuntimeOptions): EnableOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["OutTradeId"] = request.outTradeId;
  query["LmOrderId"] = request.lmOrderId;
  query["ExtJson"] = request.extJson;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EnableOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableOrder(request: EnableOrderRequest): EnableOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableOrderWithOptions(request, runtime);
}

model QueryItemDetailInnerRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  bizUid?: string(name='BizUid'),
  divisionCode?: string(name='DivisionCode'),
  ip?: string(name='Ip'),
}

model QueryItemDetailInnerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  item?: {
    itemTitle?: string(name='ItemTitle'),
    city?: string(name='City'),
    minPoints?: long(name='MinPoints'),
    descOption?: string(name='DescOption'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee'),
    lmItemCategory?: string(name='LmItemCategory'),
    sellerPayPostfee?: boolean(name='SellerPayPostfee'),
    reservePrice?: long(name='ReservePrice'),
    quantity?: int32(name='Quantity'),
    sellerId?: long(name='SellerId'),
    tbShopName?: string(name='TbShopName'),
    itemId?: long(name='ItemId'),
    canSell?: boolean(name='CanSell'),
    centerInventory?: boolean(name='CenterInventory'),
    totalSoldQuantity?: int32(name='TotalSoldQuantity'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPrice?: long(name='MinPrice'),
    isCanSell?: boolean(name='IsCanSell'),
    lmShopId?: long(name='LmShopId'),
    categoryId?: long(name='CategoryId'),
    sellerNick?: string(name='SellerNick'),
    descPath?: string(name='DescPath'),
    properties?: map[string]any(name='Properties'),
    province?: string(name='Province'),
    skus?: [ 
      {
        status?: int32(name='Status'),
        priceCent?: long(name='PriceCent'),
        skuPvs?: string(name='SkuPvs'),
        lmItemId?: string(name='LmItemId'),
        pointPrice?: long(name='PointPrice'),
        itemId?: long(name='ItemId'),
        skuTitle?: string(name='SkuTitle'),
        extJson?: string(name='ExtJson'),
        skuId?: long(name='SkuId'),
        skuPicUrl?: string(name='SkuPicUrl'),
        points?: long(name='Points'),
        pointsAmount?: long(name='PointsAmount'),
        reservePrice?: long(name='ReservePrice'),
        skuDesc?: string(name='SkuDesc'),
        quantity?: int32(name='Quantity'),
      }
    ](name='Skus'),
    skuPropertys?: [ 
      {
        text?: string(name='Text'),
        id?: long(name='Id'),
        values?: [ 
          {
            text?: string(name='Text'),
            id?: long(name='Id'),
          }
        ](name='Values'),
      }
    ](name='SkuPropertys'),
    categoryIds?: [ long ](name='CategoryIds'),
    iforestProps?: [  map[string]any ](name='IforestProps'),
    itemImages?: [ string ](name='ItemImages'),
  }(name='Item'),
}

model QueryItemDetailInnerResponse = {
  headers: map[string]string(name='headers'),
  body: QueryItemDetailInnerResponseBody(name='body'),
}

async function queryItemDetailInnerWithOptions(request: QueryItemDetailInnerRequest, runtime: Util.RuntimeOptions): QueryItemDetailInnerResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ItemId"] = request.itemId;
  query["LmItemId"] = request.lmItemId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["BizUid"] = request.bizUid;
  query["DivisionCode"] = request.divisionCode;
  query["Ip"] = request.ip;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemDetailInner',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemDetailInner(request: QueryItemDetailInnerRequest): QueryItemDetailInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemDetailInnerWithOptions(request, runtime);
}

model QueryMovieTicketsRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  orderId?: string(name='OrderId'),
  extJson?: string(name='ExtJson'),
}

model QueryMovieTicketsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  subCode?: string(name='SubCode'),
  message?: string(name='Message'),
  logsId?: string(name='LogsId'),
  movieTicket?: {
    status?: string(name='Status'),
    tbOrderId?: string(name='TbOrderId'),
    ticketContents?: string(name='TicketContents'),
    returnMessage?: string(name='ReturnMessage'),
  }(name='MovieTicket'),
}

model QueryMovieTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMovieTicketsResponseBody(name='body'),
}

async function queryMovieTicketsWithOptions(request: QueryMovieTicketsRequest, runtime: Util.RuntimeOptions): QueryMovieTicketsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMovieTickets',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMovieTickets(request: QueryMovieTicketsRequest): QueryMovieTicketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMovieTicketsWithOptions(request, runtime);
}

model CreateOrderV2Request {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  outTradeId?: string(name='OutTradeId'),
  itemId?: long(name='ItemId'),
  quantity?: long(name='Quantity'),
  totalAmount?: long(name='TotalAmount'),
  extJson?: string(name='ExtJson'),
  deliveryAddress?: string(name='DeliveryAddress'),
  orderExpireTime?: long(name='OrderExpireTime'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  lmItemId?: string(name='LmItemId'),
  buyerMessageMap?: string(name='BuyerMessageMap'),
  itemList?: [ 
    {
      skuId?: long(name='SkuId'),
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      quantity?: int32(name='Quantity'),
    }
  ](name='ItemList'),
}

model CreateOrderV2ResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    redirectUrl?: string(name='RedirectUrl'),
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
  }(name='Model'),
}

model CreateOrderV2Response = {
  headers: map[string]string(name='headers'),
  body: CreateOrderV2ResponseBody(name='body'),
}

async function createOrderV2WithOptions(request: CreateOrderV2Request, runtime: Util.RuntimeOptions): CreateOrderV2Response {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["OutTradeId"] = request.outTradeId;
  query["ItemId"] = request.itemId;
  query["Quantity"] = request.quantity;
  query["TotalAmount"] = request.totalAmount;
  query["ExtJson"] = request.extJson;
  query["DeliveryAddress"] = request.deliveryAddress;
  query["OrderExpireTime"] = request.orderExpireTime;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  query["LmItemId"] = request.lmItemId;
  query["BuyerMessageMap"] = request.buyerMessageMap;
  query["ItemList"] = request.itemList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrderV2',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrderV2(request: CreateOrderV2Request): CreateOrderV2Response {
  var runtime = new Util.RuntimeOptions{};
  return createOrderV2WithOptions(request, runtime);
}

model QueryAddressRequest {
  bizId?: string(name='BizId'),
  ip?: string(name='Ip'),
  divisionCode?: string(name='DivisionCode'),
}

model QueryAddressResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  divisionAddress?: {
    divisionAddress?: [ 
    {
      parentId?: long(name='ParentId'),
      divisionCode?: long(name='DivisionCode'),
      divisionLevel?: int32(name='DivisionLevel'),
      divisionName?: string(name='DivisionName'),
    }
  ](name='DivisionAddress')
  }(name='DivisionAddress'),
}

model QueryAddressResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAddressResponseBody(name='body'),
}

async function queryAddressWithOptions(request: QueryAddressRequest, runtime: Util.RuntimeOptions): QueryAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["Ip"] = request.ip;
  query["DivisionCode"] = request.divisionCode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAddress',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAddress(request: QueryAddressRequest): QueryAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAddressWithOptions(request, runtime);
}

model QueryMovieSeatsRequest {
  bizId?: string(name='BizId'),
  scheduleId?: long(name='ScheduleId'),
  extJson?: string(name='ExtJson'),
}

model QueryMovieSeatsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  seatMap?: {
    maxCanBuy?: long(name='MaxCanBuy'),
    tipMessage?: string(name='TipMessage'),
    maxRow?: long(name='MaxRow'),
    minColumn?: long(name='MinColumn'),
    minTopPx?: long(name='MinTopPx'),
    notice?: string(name='Notice'),
    maxColumn?: long(name='MaxColumn'),
    regular?: boolean(name='Regular'),
    maxTopPx?: long(name='MaxTopPx'),
    maxLeftPx?: long(name='MaxLeftPx'),
    soldCount?: long(name='SoldCount'),
    minRow?: long(name='MinRow'),
    seatCount?: long(name='SeatCount'),
    minLeftPx?: long(name='MinLeftPx'),
    seats?: {
      seat?: [ 
      {
        status?: long(name='Status'),
        flag?: long(name='Flag'),
        extId?: string(name='ExtId'),
        rowName?: string(name='RowName'),
        topPx?: long(name='TopPx'),
        area?: string(name='Area'),
        name?: string(name='Name'),
        leftPx?: long(name='LeftPx'),
        column?: long(name='Column'),
        row?: long(name='Row'),
      }
    ](name='Seat')
    }(name='Seats'),
  }(name='SeatMap'),
}

model QueryMovieSeatsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMovieSeatsResponseBody(name='body'),
}

async function queryMovieSeatsWithOptions(request: QueryMovieSeatsRequest, runtime: Util.RuntimeOptions): QueryMovieSeatsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ScheduleId"] = request.scheduleId;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryMovieSeats',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMovieSeats(request: QueryMovieSeatsRequest): QueryMovieSeatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMovieSeatsWithOptions(request, runtime);
}

model QueryItemDetailRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
}

model QueryItemDetailResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  item?: {
    itemTitle?: string(name='ItemTitle'),
    minPoints?: long(name='MinPoints'),
    descOption?: string(name='DescOption'),
    videoPicUrl?: string(name='VideoPicUrl'),
    extJson?: string(name='ExtJson'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee'),
    lmItemCategory?: string(name='LmItemCategory'),
    sellerPayPostfee?: boolean(name='SellerPayPostfee'),
    reservePrice?: long(name='ReservePrice'),
    quantity?: int32(name='Quantity'),
    videoUrl?: string(name='VideoUrl'),
    customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap'),
    iforestPropsJson?: string(name='IforestPropsJson'),
    propertiesJson?: string(name='PropertiesJson'),
    iforestProps?: string(name='IforestProps'),
    lmItemId?: string(name='LmItemId'),
    sellerId?: long(name='SellerId'),
    tbShopName?: string(name='TbShopName'),
    itemId?: long(name='ItemId'),
    canSell?: boolean(name='CanSell'),
    centerInventory?: boolean(name='CenterInventory'),
    sellerType?: int32(name='SellerType'),
    totalSoldQuantity?: int32(name='TotalSoldQuantity'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPrice?: long(name='MinPrice'),
    isCanSell?: boolean(name='IsCanSell'),
    categoryId?: long(name='CategoryId'),
    descPath?: string(name='DescPath'),
    properties?: string(name='Properties'),
    skus?: {
      sku?: [ 
      {
        priceCent?: long(name='PriceCent'),
        lmItemId?: string(name='LmItemId'),
        pointPrice?: long(name='PointPrice'),
        canSell?: boolean(name='CanSell'),
        itemId?: long(name='ItemId'),
        skuTitle?: string(name='SkuTitle'),
        skuPropertiesJson?: string(name='SkuPropertiesJson'),
        extJson?: string(name='ExtJson'),
        skuProperties?: string(name='SkuProperties'),
        skuId?: long(name='SkuId'),
        skuPicUrl?: string(name='SkuPicUrl'),
        points?: long(name='Points'),
        reservePrice?: long(name='ReservePrice'),
        pointsAmount?: long(name='PointsAmount'),
        quantity?: int32(name='Quantity'),
        customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap'),
      }
    ](name='Sku')
    }(name='Skus'),
    itemImages?: {
      itemImage?: [ string ](name='ItemImage')
    }(name='ItemImages'),
  }(name='Item'),
}

model QueryItemDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryItemDetailResponseBody(name='body'),
}

async function queryItemDetailWithOptions(request: QueryItemDetailRequest, runtime: Util.RuntimeOptions): QueryItemDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ItemId"] = request.itemId;
  query["LmItemId"] = request.lmItemId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemDetail',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemDetail(request: QueryItemDetailRequest): QueryItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemDetailWithOptions(request, runtime);
}

model QueryBizItemListRequest {
  bizId?: string(name='BizId'),
  subBizId?: string(name='SubBizId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  userId?: string(name='UserId'),
  lmItemIds?: map[string]any(name='LmItemIds'),
  itemIds?: map[string]any(name='ItemIds'),
  categoryId?: long(name='CategoryId'),
}

model QueryBizItemListShrinkRequest {
  bizId?: string(name='BizId'),
  subBizId?: string(name='SubBizId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  userId?: string(name='UserId'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  itemIdsShrink?: string(name='ItemIds'),
  categoryId?: long(name='CategoryId'),
}

model QueryBizItemListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  itemList?: {
    item?: [ 
    {
      extJson?: string(name='ExtJson'),
      mainPicUrl?: string(name='MainPicUrl'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId'),
      sellerId?: long(name='SellerId'),
      categoryId?: long(name='CategoryId'),
      canSell?: boolean(name='CanSell'),
      customizedItemName?: string(name='CustomizedItemName'),
      itemId?: long(name='ItemId'),
      reservePrice?: long(name='ReservePrice'),
      taobaoShopName?: string(name='TaobaoShopName'),
      skuList?: {
        sku?: [ 
        {
          priceCent?: long(name='PriceCent'),
          skuId?: long(name='SkuId'),
          taoBaoCurrentPrice?: long(name='TaoBaoCurrentPrice'),
          canSell?: boolean(name='CanSell'),
          skuPicUrl?: string(name='SkuPicUrl'),
          points?: long(name='Points'),
          skuTitle?: string(name='SkuTitle'),
          pointsAmount?: long(name='PointsAmount'),
          benefitId?: string(name='BenefitId'),
          customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap'),
          gradePriceModels?: {
            gradePriceModel?: [ 
            {
              recommend?: boolean(name='Recommend'),
              showName?: string(name='ShowName'),
              priceCent?: long(name='PriceCent'),
              icon?: string(name='Icon'),
              pointPrice?: long(name='PointPrice'),
              exclusive?: boolean(name='Exclusive'),
              characteristicName?: string(name='CharacteristicName'),
              accessUrl?: string(name='AccessUrl'),
              subBizCode?: string(name='SubBizCode'),
              characteristicCode?: string(name='CharacteristicCode'),
              canBuy?: boolean(name='CanBuy'),
              points?: long(name='Points'),
              pointsAmount?: long(name='PointsAmount'),
              userLabelList?: {
                userLabelList?: [ string ](name='UserLabelList')
              }(name='UserLabelList'),
            }
          ](name='GradePriceModel')
          }(name='GradePriceModels'),
          userLabelList?: {
            userLabelList?: [ string ](name='UserLabelList')
          }(name='UserLabelList'),
        }
      ](name='Sku')
      }(name='SkuList'),
    }
  ](name='Item')
  }(name='ItemList'),
}

model QueryBizItemListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBizItemListResponseBody(name='body'),
}

async function queryBizItemListWithOptions(tmpReq: QueryBizItemListRequest, runtime: Util.RuntimeOptions): QueryBizItemListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryBizItemListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizId"] = request.subBizId;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["UserId"] = request.userId;
  query["LmItemIds"] = request.lmItemIdsShrink;
  query["ItemIds"] = request.itemIdsShrink;
  query["CategoryId"] = request.categoryId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryBizItemList',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBizItemList(request: QueryBizItemListRequest): QueryBizItemListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBizItemListWithOptions(request, runtime);
}

model CreateMovieTicketOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  outTradeId?: string(name='OutTradeId'),
  lockSeatAppKey?: string(name='LockSeatAppKey'),
  extJson?: string(name='ExtJson'),
}

model CreateMovieTicketOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    redirectUrl?: string(name='RedirectUrl'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
  }(name='Model'),
}

model CreateMovieTicketOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMovieTicketOrderResponseBody(name='body'),
}

async function createMovieTicketOrderWithOptions(request: CreateMovieTicketOrderRequest, runtime: Util.RuntimeOptions): CreateMovieTicketOrderResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMovieTicketOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMovieTicketOrder(request: CreateMovieTicketOrderRequest): CreateMovieTicketOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMovieTicketOrderWithOptions(request, runtime);
}

model QueryMediaSettleInfoRequest {
  mediaName?: string(name='MediaName'),
  channelId?: string(name='ChannelId'),
  settleNo?: string(name='SettleNo'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  extInfo?: string(name='ExtInfo'),
}

model QueryMediaSettleInfoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    pageSize?: int32(name='PageSize'),
    pageNumber?: int32(name='PageNumber'),
    totalCount?: int32(name='TotalCount'),
    mediaSettleInfoList?: [ 
      {
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        mediaSettleAmount?: string(name='MediaSettleAmount'),
        settleNo?: string(name='SettleNo'),
        settleStatus?: string(name='SettleStatus'),
        channelId?: string(name='ChannelId'),
        mediaName?: string(name='MediaName'),
        mediaSettleDetailId?: string(name='MediaSettleDetailId'),
        modifiedDate?: string(name='ModifiedDate'),
        createDate?: string(name='CreateDate'),
        extInfo?: string(name='ExtInfo'),
      }
    ](name='MediaSettleInfoList'),
  }(name='Model'),
}

model QueryMediaSettleInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMediaSettleInfoResponseBody(name='body'),
}

async function queryMediaSettleInfoWithOptions(request: QueryMediaSettleInfoRequest, runtime: Util.RuntimeOptions): QueryMediaSettleInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["MediaName"] = request.mediaName;
  query["ChannelId"] = request.channelId;
  query["SettleNo"] = request.settleNo;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["ExtInfo"] = request.extInfo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryMediaSettleInfo',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMediaSettleInfo(request: QueryMediaSettleInfoRequest): QueryMediaSettleInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMediaSettleInfoWithOptions(request, runtime);
}

model QueryLogisticsRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: long(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryLogisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    data?: [ 
    {
      logisticsCompanyCode?: string(name='LogisticsCompanyCode'),
      mailNo?: string(name='MailNo'),
      logisticsCompanyName?: string(name='LogisticsCompanyName'),
      dataProvider?: string(name='DataProvider'),
      dataProviderTitle?: string(name='DataProviderTitle'),
      logisticsDetailList?: {
        logisticsDetailList?: [ 
        {
          ocurrTimeStr?: string(name='OcurrTimeStr'),
          standerdDesc?: string(name='StanderdDesc'),
        }
      ](name='LogisticsDetailList')
      }(name='LogisticsDetailList'),
      goods?: {
        goods?: [ 
        {
          itemId?: long(name='ItemId'),
          goodName?: string(name='GoodName'),
          quantity?: int32(name='Quantity'),
        }
      ](name='Goods')
      }(name='Goods'),
    }
  ](name='Data')
  }(name='Data'),
}

model QueryLogisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLogisticsResponseBody(name='body'),
}

async function queryLogisticsWithOptions(request: QueryLogisticsRequest, runtime: Util.RuntimeOptions): QueryLogisticsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryLogistics',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLogistics(request: QueryLogisticsRequest): QueryLogisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLogisticsWithOptions(request, runtime);
}

model RefundPointRequest {
  bizId?: string(name='BizId'),
  sellerId?: string(name='SellerId'),
  lmOrderId?: string(name='LmOrderId'),
  reason?: string(name='Reason'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
}

model RefundPointResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RefundPointResponse = {
  headers: map[string]string(name='headers'),
  body: RefundPointResponseBody(name='body'),
}

async function refundPointWithOptions(request: RefundPointRequest, runtime: Util.RuntimeOptions): RefundPointResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SellerId"] = request.sellerId;
  query["LmOrderId"] = request.lmOrderId;
  query["Reason"] = request.reason;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RefundPoint',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refundPoint(request: RefundPointRequest): RefundPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return refundPointWithOptions(request, runtime);
}

model ReserveMovieSeatRequest {
  bizId?: string(name='BizId'),
  scheduleId?: long(name='ScheduleId'),
  seatIds?: string(name='SeatIds'),
  seatNames?: string(name='SeatNames'),
  bizUid?: string(name='BizUid'),
  mobile?: string(name='Mobile'),
  extJson?: string(name='ExtJson'),
}

model ReserveMovieSeatResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  reservedSeat?: {
    status?: string(name='Status'),
    reservedTime?: long(name='ReservedTime'),
    applyKey?: string(name='ApplyKey'),
    defaultLockSecond?: long(name='DefaultLockSecond'),
  }(name='ReservedSeat'),
}

model ReserveMovieSeatResponse = {
  headers: map[string]string(name='headers'),
  body: ReserveMovieSeatResponseBody(name='body'),
}

async function reserveMovieSeatWithOptions(request: ReserveMovieSeatRequest, runtime: Util.RuntimeOptions): ReserveMovieSeatResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ScheduleId"] = request.scheduleId;
  query["SeatIds"] = request.seatIds;
  query["SeatNames"] = request.seatNames;
  query["BizUid"] = request.bizUid;
  query["Mobile"] = request.mobile;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReserveMovieSeat',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reserveMovieSeat(request: ReserveMovieSeatRequest): ReserveMovieSeatResponse {
  var runtime = new Util.RuntimeOptions{};
  return reserveMovieSeatWithOptions(request, runtime);
}

model SyncMerchantInfoRequest {
  bizId?: string(name='BizId'),
  taskId?: string(name='TaskId'),
  sellerNick?: string(name='SellerNick'),
  itemList?: string(name='ItemList'),
  timeStamp?: long(name='TimeStamp'),
}

model SyncMerchantInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  model?: {
    status?: string(name='Status'),
    url?: string(name='Url'),
    taskId?: string(name='TaskId'),
  }(name='Model'),
}

model SyncMerchantInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SyncMerchantInfoResponseBody(name='body'),
}

async function syncMerchantInfoWithOptions(request: SyncMerchantInfoRequest, runtime: Util.RuntimeOptions): SyncMerchantInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["TaskId"] = request.taskId;
  query["SellerNick"] = request.sellerNick;
  query["TimeStamp"] = request.timeStamp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SyncMerchantInfo',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncMerchantInfo(request: SyncMerchantInfoRequest): SyncMerchantInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncMerchantInfoWithOptions(request, runtime);
}

model ListItemActivitiesRequest {
  bizId?: string(name='BizId'),
  lmItemIds?: map[string]any(name='LmItemIds'),
  itemIds?: map[string]any(name='ItemIds'),
}

model ListItemActivitiesShrinkRequest {
  bizId?: string(name='BizId'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  itemIdsShrink?: string(name='ItemIds'),
}

model ListItemActivitiesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  lmItemActivityModelList?: {
    lmItemActivityModel?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      lmActivityPopModel?: {
        subBizCode?: string(name='SubBizCode'),
        endDate?: string(name='EndDate'),
        displayDate?: string(name='DisplayDate'),
        bizId?: string(name='BizId'),
        startDate?: string(name='StartDate'),
        title?: string(name='Title'),
        extInfo?: map[string]any(name='ExtInfo'),
        id?: long(name='Id'),
      }(name='LmActivityPopModel'),
    }
  ](name='LmItemActivityModel')
  }(name='LmItemActivityModelList'),
}

model ListItemActivitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListItemActivitiesResponseBody(name='body'),
}

async function listItemActivitiesWithOptions(tmpReq: ListItemActivitiesRequest, runtime: Util.RuntimeOptions): ListItemActivitiesResponse {
  Util.validateModel(tmpReq);
  var request = new ListItemActivitiesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  var query = {};
  query["BizId"] = request.bizId;
  query["LmItemIds"] = request.lmItemIdsShrink;
  query["ItemIds"] = request.itemIdsShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListItemActivities',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listItemActivities(request: ListItemActivitiesRequest): ListItemActivitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listItemActivitiesWithOptions(request, runtime);
}

model QueryAllCinemasRequest {
  bizId?: string(name='BizId'),
  cityCode?: long(name='CityCode'),
  pageNumber?: long(name='PageNumber'),
  extJson?: string(name='ExtJson'),
}

model QueryAllCinemasResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  cinemas?: {
    cinema?: [ 
    {
      standardId?: string(name='StandardId'),
      scheduleCloseTime?: long(name='ScheduleCloseTime'),
      cityId?: long(name='CityId'),
      cinemaName?: string(name='CinemaName'),
      cityName?: string(name='CityName'),
      address?: string(name='Address'),
      longitude?: string(name='Longitude'),
      latitude?: string(name='Latitude'),
      phone?: string(name='Phone'),
      id?: long(name='Id'),
    }
  ](name='Cinema')
  }(name='Cinemas'),
}

model QueryAllCinemasResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAllCinemasResponseBody(name='body'),
}

async function queryAllCinemasWithOptions(request: QueryAllCinemasRequest, runtime: Util.RuntimeOptions): QueryAllCinemasResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["CityCode"] = request.cityCode;
  query["PageNumber"] = request.pageNumber;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllCinemas',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllCinemas(request: QueryAllCinemasRequest): QueryAllCinemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllCinemasWithOptions(request, runtime);
}

model GrantPromotionToUserRequest {
  bizId?: string(name='BizId', description='业务ID'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', description='用户ID'),
  promotionId?: string(name='PromotionId', description='优惠元数据ID'),
  securityCode?: string(name='SecurityCode', description='安全码'),
  expireSeconds?: long(name='ExpireSeconds', description='过期时间'),
  grantWay?: string(name='GrantWay', description='发放方式'),
  idempotentId?: string(name='IdempotentId', description='幂等ID'),
  grantMode?: string(name='GrantMode', description='发放模式'),
  body?: map[string]any(name='body', description='扩展信息'),
}

model GrantPromotionToUserResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    promotionInstanceId?: string(name='PromotionInstanceId'),
    effectiveStartTime?: long(name='EffectiveStartTime'),
    effectiveEndTime?: long(name='EffectiveEndTime'),
    subBizCode?: string(name='SubBizCode'),
    success?: boolean(name='Success'),
  }(name='Model'),
}

model GrantPromotionToUserResponse = {
  headers: map[string]string(name='headers'),
  body: GrantPromotionToUserResponseBody(name='body'),
}

async function grantPromotionToUserWithOptions(request: GrantPromotionToUserRequest, runtime: Util.RuntimeOptions): GrantPromotionToUserResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["PromotionId"] = request.promotionId;
  query["SecurityCode"] = request.securityCode;
  query["ExpireSeconds"] = request.expireSeconds;
  query["GrantWay"] = request.grantWay;
  query["IdempotentId"] = request.idempotentId;
  query["GrantMode"] = request.grantMode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GrantPromotionToUser',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantPromotionToUser(request: GrantPromotionToUserRequest): GrantPromotionToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantPromotionToUserWithOptions(request, runtime);
}

model QueryRefundApplicationDetailRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  subLmOrderId?: string(name='SubLmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryRefundApplicationDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  refundApplicationDetail?: {
    disputeType?: int32(name='DisputeType'),
    lmOrderId?: string(name='LmOrderId'),
    refunderName?: string(name='RefunderName'),
    sellerAgreeMsg?: string(name='SellerAgreeMsg'),
    returnGoodLogisticsStatus?: int32(name='ReturnGoodLogisticsStatus'),
    disputeDesc?: string(name='DisputeDesc'),
    refunderAddress?: string(name='RefunderAddress'),
    returnGoodCount?: int32(name='ReturnGoodCount'),
    disputeId?: long(name='DisputeId'),
    disputeEndTime?: string(name='DisputeEndTime'),
    orderLogisticsStatus?: int32(name='OrderLogisticsStatus'),
    bizClaimType?: int32(name='BizClaimType'),
    realRefundFee?: long(name='RealRefundFee'),
    refundFee?: long(name='RefundFee'),
    sellerRefuseAgreementMessage?: string(name='SellerRefuseAgreementMessage'),
    disputeCreateTime?: string(name='DisputeCreateTime'),
    refunderTel?: string(name='RefunderTel'),
    sellerRefuseReason?: string(name='SellerRefuseReason'),
    subLmOrderId?: string(name='SubLmOrderId'),
    applyDisputeDesc?: string(name='ApplyDisputeDesc'),
    disputeStatus?: int32(name='DisputeStatus'),
    refunderZipCode?: string(name='RefunderZipCode'),
    maxRefundFeeData?: {
      maxRefundFee?: int32(name='MaxRefundFee'),
      minRefundFee?: int32(name='MinRefundFee'),
    }(name='MaxRefundFeeData'),
    applyReasonText?: {
      reasonTips?: string(name='ReasonTips'),
      reasonTextId?: long(name='ReasonTextId'),
    }(name='ApplyReasonText'),
  }(name='RefundApplicationDetail'),
}

model QueryRefundApplicationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRefundApplicationDetailResponseBody(name='body'),
}

async function queryRefundApplicationDetailWithOptions(request: QueryRefundApplicationDetailRequest, runtime: Util.RuntimeOptions): QueryRefundApplicationDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["SubLmOrderId"] = request.subLmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRefundApplicationDetail',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRefundApplicationDetail(request: QueryRefundApplicationDetailRequest): QueryRefundApplicationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRefundApplicationDetailWithOptions(request, runtime);
}

model ModifyBizItemsRequest {
  bizId?: string(name='BizId'),
  subBizId?: string(name='SubBizId'),
  itemList?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuList?: [ 
        {
          statusAction?: long(name='StatusAction'),
          priceCent?: long(name='PriceCent'),
          skuId?: long(name='SkuId'),
          points?: long(name='Points'),
          pointsAmount?: long(name='PointsAmount'),
          benefitId?: string(name='BenefitId'),
          quantity?: int32(name='Quantity'),
        }
      ](name='SkuList'),
    }
  ](name='ItemList'),
}

model ModifyBizItemsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  failedItemList?: {
    item?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuIdList?: {
        sku?: [ string ](name='Sku')
      }(name='SkuIdList'),
    }
  ](name='Item')
  }(name='FailedItemList'),
}

model ModifyBizItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBizItemsResponseBody(name='body'),
}

async function modifyBizItemsWithOptions(request: ModifyBizItemsRequest, runtime: Util.RuntimeOptions): ModifyBizItemsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizId"] = request.subBizId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBizItems',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBizItems(request: ModifyBizItemsRequest): ModifyBizItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBizItemsWithOptions(request, runtime);
}

model CancelRefundRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  subLmOrderId?: string(name='SubLmOrderId'),
  disputeId?: long(name='DisputeId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model CancelRefundResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  refundApplicationData?: {
    disputeType?: int32(name='DisputeType'),
    subLmOrderId?: string(name='SubLmOrderId'),
    disputeStatus?: int32(name='DisputeStatus'),
  }(name='RefundApplicationData'),
}

model CancelRefundResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRefundResponseBody(name='body'),
}

async function cancelRefundWithOptions(request: CancelRefundRequest, runtime: Util.RuntimeOptions): CancelRefundResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["SubLmOrderId"] = request.subLmOrderId;
  query["DisputeId"] = request.disputeId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CancelRefund',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelRefund(request: CancelRefundRequest): CancelRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRefundWithOptions(request, runtime);
}

model BatchRegistAnonymousTbAccountRequest {
  bizId?: string(name='BizId'),
  idJsonList?: string(name='IdJsonList'),
}

model BatchRegistAnonymousTbAccountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  batchId?: string(name='BatchId'),
}

model BatchRegistAnonymousTbAccountResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegistAnonymousTbAccountResponseBody(name='body'),
}

async function batchRegistAnonymousTbAccountWithOptions(request: BatchRegistAnonymousTbAccountRequest, runtime: Util.RuntimeOptions): BatchRegistAnonymousTbAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["IdJsonList"] = request.idJsonList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BatchRegistAnonymousTbAccount',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchRegistAnonymousTbAccount(request: BatchRegistAnonymousTbAccountRequest): BatchRegistAnonymousTbAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegistAnonymousTbAccountWithOptions(request, runtime);
}

model QueryMovieSchedulesRequest {
  bizId?: string(name='BizId'),
  cinemaId?: long(name='CinemaId'),
  extJson?: string(name='ExtJson'),
}

model QueryMovieSchedulesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  schedules?: {
    schedule?: [ 
    {
      movieVersion?: string(name='MovieVersion'),
      sessionEndingTime?: string(name='SessionEndingTime'),
      maxCanBuy?: long(name='MaxCanBuy'),
      movieId?: long(name='MovieId'),
      scheduleArea?: string(name='ScheduleArea'),
      hallName?: string(name='HallName'),
      isExpired?: boolean(name='IsExpired'),
      sessionStartingTime?: string(name='SessionStartingTime'),
      price?: long(name='Price'),
      sectionId?: string(name='SectionId'),
      releaseDate?: string(name='ReleaseDate'),
      cinemaId?: long(name='CinemaId'),
      serviceFee?: long(name='ServiceFee'),
      id?: long(name='Id'),
    }
  ](name='Schedule')
  }(name='Schedules'),
}

model QueryMovieSchedulesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMovieSchedulesResponseBody(name='body'),
}

async function queryMovieSchedulesWithOptions(request: QueryMovieSchedulesRequest, runtime: Util.RuntimeOptions): QueryMovieSchedulesResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["CinemaId"] = request.cinemaId;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryMovieSchedules',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMovieSchedules(request: QueryMovieSchedulesRequest): QueryMovieSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMovieSchedulesWithOptions(request, runtime);
}

model GetGuidePageRequest {
  bizId?: string(name='BizId'),
}

model GetGuidePageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  miniShopInfo?: [ 
    {
      liteShopId?: string(name='LiteShopId'),
      src?: string(name='Src'),
      bizId?: string(name='BizId'),
      name?: string(name='Name'),
    }
  ](name='MiniShopInfo'),
}

model GetGuidePageResponse = {
  headers: map[string]string(name='headers'),
  body: GetGuidePageResponseBody(name='body'),
}

async function getGuidePageWithOptions(request: GetGuidePageRequest, runtime: Util.RuntimeOptions): GetGuidePageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGuidePage',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGuidePage(request: GetGuidePageRequest): GetGuidePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGuidePageWithOptions(request, runtime);
}

model QueryAddressListRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
}

model QueryAddressListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  addressList?: [ 
    {
      status?: int32(name='Status'),
      postCode?: string(name='PostCode'),
      fullName?: string(name='FullName'),
      addressDetail?: string(name='AddressDetail'),
      city?: string(name='City'),
      addressId?: long(name='AddressId'),
      divisionCode?: string(name='DivisionCode'),
      mobile?: string(name='Mobile'),
      country?: string(name='Country'),
      area?: string(name='Area'),
      townDivisionCode?: string(name='TownDivisionCode'),
      town?: string(name='Town'),
      province?: string(name='Province'),
    }
  ](name='AddressList'),
}

model QueryAddressListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAddressListResponseBody(name='body'),
}

async function queryAddressListWithOptions(request: QueryAddressListRequest, runtime: Util.RuntimeOptions): QueryAddressListResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAddressList',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAddressList(request: QueryAddressListRequest): QueryAddressListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAddressListWithOptions(request, runtime);
}

model QueryAddressDetailRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  addressInfo?: string(name='AddressInfo'),
}

model QueryAddressDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  deliveryAddress?: {
    status?: int32(name='Status'),
    postCode?: string(name='PostCode'),
    fullName?: string(name='FullName'),
    addressDetail?: string(name='AddressDetail'),
    city?: string(name='City'),
    addressId?: long(name='AddressId'),
    divisionCode?: string(name='DivisionCode'),
    mobile?: string(name='Mobile'),
    country?: string(name='Country'),
    area?: string(name='Area'),
    townDivisionCode?: string(name='TownDivisionCode'),
    town?: string(name='Town'),
    province?: string(name='Province'),
  }(name='DeliveryAddress'),
}

model QueryAddressDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAddressDetailResponseBody(name='body'),
}

async function queryAddressDetailWithOptions(request: QueryAddressDetailRequest, runtime: Util.RuntimeOptions): QueryAddressDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["AddressInfo"] = request.addressInfo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAddressDetail',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAddressDetail(request: QueryAddressDetailRequest): QueryAddressDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAddressDetailWithOptions(request, runtime);
}

model ConfirmDisburseRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: string(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model ConfirmDisburseResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ConfirmDisburseResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmDisburseResponseBody(name='body'),
}

async function confirmDisburseWithOptions(request: ConfirmDisburseRequest, runtime: Util.RuntimeOptions): ConfirmDisburseResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmDisburse',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmDisburse(request: ConfirmDisburseRequest): ConfirmDisburseResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmDisburseWithOptions(request, runtime);
}

model ModifyBasicAndBizItemsRequest {
  bizId?: string(name='BizId'),
  subBizId?: string(name='SubBizId'),
  itemList?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuList?: [ 
        {
          statusAction?: long(name='StatusAction'),
          priceCent?: long(name='PriceCent'),
          supplierPrice?: long(name='SupplierPrice'),
          skuId?: long(name='SkuId'),
          points?: long(name='Points'),
          pointsAmount?: long(name='PointsAmount'),
          benefitId?: string(name='BenefitId'),
          quantity?: int32(name='Quantity'),
        }
      ](name='SkuList'),
    }
  ](name='ItemList'),
}

model ModifyBasicAndBizItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  failedItemList?: {
    item?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuIdList?: {
        sku?: [ string ](name='Sku')
      }(name='SkuIdList'),
    }
  ](name='Item')
  }(name='FailedItemList'),
}

model ModifyBasicAndBizItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBasicAndBizItemsResponseBody(name='body'),
}

async function modifyBasicAndBizItemsWithOptions(request: ModifyBasicAndBizItemsRequest, runtime: Util.RuntimeOptions): ModifyBasicAndBizItemsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizId"] = request.subBizId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBasicAndBizItems',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBasicAndBizItems(request: ModifyBasicAndBizItemsRequest): ModifyBasicAndBizItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBasicAndBizItemsWithOptions(request, runtime);
}

model PushUserGameProcessRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  processId?: string(name='ProcessId'),
  currentStepId?: string(name='CurrentStepId'),
  body?: map[string]any(name='body'),
}

model PushUserGameProcessResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    processId?: string(name='ProcessId'),
    gameId?: string(name='GameId'),
    activityId?: string(name='ActivityId'),
    name?: string(name='Name'),
    type?: string(name='Type'),
    desc?: string(name='Desc'),
    content?: string(name='Content'),
    status?: string(name='Status'),
    currentStepStatus?: string(name='CurrentStepStatus'),
    currentStepId?: string(name='CurrentStepId'),
    gameCoinRecords?: string(name='GameCoinRecords'),
    gameAwardRecords?: string(name='GameAwardRecords'),
    extInfo?: string(name='ExtInfo'),
    routeId?: string(name='RouteId'),
  }(name='Model'),
}

model PushUserGameProcessResponse = {
  headers: map[string]string(name='headers'),
  body: PushUserGameProcessResponseBody(name='body'),
}

async function pushUserGameProcessWithOptions(request: PushUserGameProcessRequest, runtime: Util.RuntimeOptions): PushUserGameProcessResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  query["ProcessId"] = request.processId;
  query["CurrentStepId"] = request.currentStepId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'PushUserGameProcess',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushUserGameProcess(request: PushUserGameProcessRequest): PushUserGameProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushUserGameProcessWithOptions(request, runtime);
}

model ModifyItemLimitRuleRequest {
  bizId?: string(name='BizId'),
  subBizCode?: string(name='SubBizCode'),
  lmActivityId?: long(name='LmActivityId'),
  lmItemId?: string(name='LmItemId'),
  itemId?: long(name='ItemId'),
  upperNum?: int32(name='UpperNum'),
  ruleId?: long(name='RuleId'),
  ruleType?: int32(name='RuleType'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
}

model ModifyItemLimitRuleResponseBody = {
  code?: string(name='Code'),
  model?: boolean(name='Model'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyItemLimitRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyItemLimitRuleResponseBody(name='body'),
}

async function modifyItemLimitRuleWithOptions(request: ModifyItemLimitRuleRequest, runtime: Util.RuntimeOptions): ModifyItemLimitRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizCode"] = request.subBizCode;
  query["LmActivityId"] = request.lmActivityId;
  query["LmItemId"] = request.lmItemId;
  query["ItemId"] = request.itemId;
  query["UpperNum"] = request.upperNum;
  query["RuleId"] = request.ruleId;
  query["RuleType"] = request.ruleType;
  query["BeginTime"] = request.beginTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyItemLimitRule',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyItemLimitRule(request: ModifyItemLimitRuleRequest): ModifyItemLimitRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyItemLimitRuleWithOptions(request, runtime);
}

model RefuseMerchantSyncTaskRequest {
  bizId?: string(name='BizId'),
  taskId?: string(name='TaskId'),
  sellerNick?: string(name='SellerNick'),
  timeStamp?: long(name='TimeStamp'),
}

model RefuseMerchantSyncTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RefuseMerchantSyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RefuseMerchantSyncTaskResponseBody(name='body'),
}

async function refuseMerchantSyncTaskWithOptions(request: RefuseMerchantSyncTaskRequest, runtime: Util.RuntimeOptions): RefuseMerchantSyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["TaskId"] = request.taskId;
  query["SellerNick"] = request.sellerNick;
  query["TimeStamp"] = request.timeStamp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RefuseMerchantSyncTask',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refuseMerchantSyncTask(request: RefuseMerchantSyncTaskRequest): RefuseMerchantSyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return refuseMerchantSyncTaskWithOptions(request, runtime);
}

model QueryOrderLogisticsRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: long(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryOrderLogisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  orderLogistics?: {
    logisticsCompanyCode?: string(name='LogisticsCompanyCode'),
    logisticsCompanyName?: string(name='LogisticsCompanyName'),
    dataProvider?: string(name='DataProvider'),
    dataProviderTitle?: string(name='DataProviderTitle'),
    logisticsDetailList?: {
      logisticsDetailList?: [ 
      {
        ocurrTimeStr?: string(name='OcurrTimeStr'),
        standerdDesc?: string(name='StanderdDesc'),
        statusIcon?: string(name='StatusIcon'),
      }
    ](name='LogisticsDetailList')
    }(name='LogisticsDetailList'),
    receiver?: {
      address?: string(name='Address'),
      name?: string(name='Name'),
      phoneNumber?: string(name='PhoneNumber'),
      zipCode?: string(name='ZipCode'),
    }(name='Receiver'),
    fetcher?: {
      address?: string(name='Address'),
      name?: string(name='Name'),
      phoneNumber?: string(name='PhoneNumber'),
      zipCode?: string(name='ZipCode'),
    }(name='Fetcher'),
  }(name='OrderLogistics'),
}

model QueryOrderLogisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderLogisticsResponseBody(name='body'),
}

async function queryOrderLogisticsWithOptions(request: QueryOrderLogisticsRequest, runtime: Util.RuntimeOptions): QueryOrderLogisticsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderLogistics',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderLogistics(request: QueryOrderLogisticsRequest): QueryOrderLogisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderLogisticsWithOptions(request, runtime);
}

model QueryGuideItemGroupWithOutInventoryRequest {
  groupId?: string(name='GroupId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  bizId?: string(name='BizId'),
}

model QueryGuideItemGroupWithOutInventoryResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  totalCount?: long(name='TotalCount'),
  itemList?: [ 
    {
      itemTitle?: string(name='ItemTitle'),
      priceCent?: long(name='PriceCent'),
      lmItemId?: string(name='LmItemId'),
      pointPrice?: long(name='PointPrice'),
      itemId?: string(name='ItemId'),
      whitePicUrl?: string(name='WhitePicUrl'),
      mainPicUrl?: string(name='MainPicUrl'),
      points?: long(name='Points'),
      itemUrl?: string(name='ItemUrl'),
      pointsAmount?: long(name='PointsAmount'),
      reservePrice?: string(name='ReservePrice'),
      customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap'),
      tags?: [ string ](name='Tags'),
    }
  ](name='ItemList'),
}

model QueryGuideItemGroupWithOutInventoryResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGuideItemGroupWithOutInventoryResponseBody(name='body'),
}

async function queryGuideItemGroupWithOutInventoryWithOptions(request: QueryGuideItemGroupWithOutInventoryRequest, runtime: Util.RuntimeOptions): QueryGuideItemGroupWithOutInventoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGuideItemGroupWithOutInventory',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGuideItemGroupWithOutInventory(request: QueryGuideItemGroupWithOutInventoryRequest): QueryGuideItemGroupWithOutInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGuideItemGroupWithOutInventoryWithOptions(request, runtime);
}

model GetCustomServiceUrlRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  sellerId?: string(name='SellerId'),
  cuid?: string(name='Cuid'),
  nick?: string(name='Nick'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model GetCustomServiceUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  urlData?: {
    returnUrl?: string(name='ReturnUrl'),
  }(name='UrlData'),
}

model GetCustomServiceUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomServiceUrlResponseBody(name='body'),
}

async function getCustomServiceUrlWithOptions(request: GetCustomServiceUrlRequest, runtime: Util.RuntimeOptions): GetCustomServiceUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["SellerId"] = request.sellerId;
  query["Cuid"] = request.cuid;
  query["Nick"] = request.nick;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomServiceUrl',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCustomServiceUrl(request: GetCustomServiceUrlRequest): GetCustomServiceUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomServiceUrlWithOptions(request, runtime);
}

model QueryBestSession4ItemsRequest {
  bizId?: string(name='BizId'),
  lmItemIds?: map[string]any(name='LmItemIds'),
  itemIds?: map[string]any(name='ItemIds'),
}

model QueryBestSession4ItemsShrinkRequest {
  bizId?: string(name='BizId'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  itemIdsShrink?: string(name='ItemIds'),
}

model QueryBestSession4ItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  lmItemActivitySessionModelList?: {
    lmItemActivitySessionModel?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      lmActivitySessionModel?: {
        subBizCode?: string(name='SubBizCode'),
        endDate?: string(name='EndDate'),
        displayDate?: string(name='DisplayDate'),
        lmSessionId?: long(name='LmSessionId'),
        description?: string(name='Description'),
        startDate?: string(name='StartDate'),
        lmActivityId?: long(name='LmActivityId'),
        bizId?: string(name='BizId'),
        name?: string(name='Name'),
        extInfo?: map[string]any(name='ExtInfo'),
      }(name='LmActivitySessionModel'),
    }
  ](name='LmItemActivitySessionModel')
  }(name='LmItemActivitySessionModelList'),
}

model QueryBestSession4ItemsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBestSession4ItemsResponseBody(name='body'),
}

async function queryBestSession4ItemsWithOptions(tmpReq: QueryBestSession4ItemsRequest, runtime: Util.RuntimeOptions): QueryBestSession4ItemsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryBestSession4ItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  var query = {};
  query["BizId"] = request.bizId;
  query["LmItemIds"] = request.lmItemIdsShrink;
  query["ItemIds"] = request.itemIdsShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryBestSession4Items',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBestSession4Items(request: QueryBestSession4ItemsRequest): QueryBestSession4ItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBestSession4ItemsWithOptions(request, runtime);
}

model SubmitReturnGoodLogisticsRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  logisticsNo?: string(name='LogisticsNo'),
  cpCode?: string(name='CpCode'),
  subLmOrderId?: string(name='SubLmOrderId'),
  disputeId?: long(name='DisputeId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model SubmitReturnGoodLogisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitReturnGoodLogisticsResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitReturnGoodLogisticsResponseBody(name='body'),
}

async function submitReturnGoodLogisticsWithOptions(request: SubmitReturnGoodLogisticsRequest, runtime: Util.RuntimeOptions): SubmitReturnGoodLogisticsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LogisticsNo"] = request.logisticsNo;
  query["CpCode"] = request.cpCode;
  query["SubLmOrderId"] = request.subLmOrderId;
  query["DisputeId"] = request.disputeId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitReturnGoodLogistics',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitReturnGoodLogistics(request: SubmitReturnGoodLogisticsRequest): SubmitReturnGoodLogisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitReturnGoodLogisticsWithOptions(request, runtime);
}

model QueryHotMoviesRequest {
  bizId?: string(name='BizId'),
  cityCode?: long(name='CityCode'),
  extJson?: string(name='ExtJson'),
}

model QueryHotMoviesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  movies?: {
    movie?: [ 
    {
      type?: string(name='Type'),
      movieVersion?: string(name='MovieVersion'),
      backgroundPicture?: string(name='BackgroundPicture'),
      remark?: string(name='Remark'),
      openDay?: string(name='OpenDay'),
      highlight?: string(name='Highlight'),
      language?: string(name='Language'),
      openTime?: string(name='OpenTime'),
      director?: string(name='Director'),
      poster?: string(name='Poster'),
      movieName?: string(name='MovieName'),
      description?: string(name='Description'),
      country?: string(name='Country'),
      duration?: long(name='Duration'),
      movieNameEn?: string(name='MovieNameEn'),
      leadingRole?: string(name='LeadingRole'),
      id?: long(name='Id'),
      movieTypeList?: {
        movieTypeList?: [ string ](name='MovieTypeList')
      }(name='MovieTypeList'),
      trailerList?: {
        trailerList?: [ string ](name='TrailerList')
      }(name='TrailerList'),
    }
  ](name='Movie')
  }(name='Movies'),
}

model QueryHotMoviesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHotMoviesResponseBody(name='body'),
}

async function queryHotMoviesWithOptions(request: QueryHotMoviesRequest, runtime: Util.RuntimeOptions): QueryHotMoviesResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["CityCode"] = request.cityCode;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotMovies',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHotMovies(request: QueryHotMoviesRequest): QueryHotMoviesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHotMoviesWithOptions(request, runtime);
}

model CreateOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  outTradeId?: string(name='OutTradeId'),
  itemId?: long(name='ItemId'),
  quantity?: long(name='Quantity'),
  totalAmount?: long(name='TotalAmount'),
  extJson?: string(name='ExtJson'),
  deliveryAddress?: string(name='DeliveryAddress'),
  orderExpireTime?: long(name='OrderExpireTime'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  lmItemId?: string(name='LmItemId'),
  buyerMessageMap?: string(name='BuyerMessageMap'),
  itemList?: [ 
    {
      skuId?: long(name='SkuId'),
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      quantity?: int32(name='Quantity'),
    }
  ](name='ItemList'),
}

model CreateOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    redirectUrl?: string(name='RedirectUrl'),
    lmOrderList?: {
      lmOrderList?: [ 
      {
        lmOrderId?: string(name='LmOrderId'),
      }
    ](name='LmOrderList')
    }(name='LmOrderList'),
    payTradeIds?: {
      payTradeIds?: [ string ](name='PayTradeIds')
    }(name='PayTradeIds'),
    orderIds?: {
      orderIds?: [ string ](name='OrderIds')
    }(name='OrderIds'),
  }(name='Model'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrderWithOptions(request: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["OutTradeId"] = request.outTradeId;
  query["ItemId"] = request.itemId;
  query["Quantity"] = request.quantity;
  query["TotalAmount"] = request.totalAmount;
  query["ExtJson"] = request.extJson;
  query["DeliveryAddress"] = request.deliveryAddress;
  query["OrderExpireTime"] = request.orderExpireTime;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  query["LmItemId"] = request.lmItemId;
  query["BuyerMessageMap"] = request.buyerMessageMap;
  query["ItemList"] = request.itemList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model CreateWithholdTradeRequest {
  outRequestNo?: string(name='OutRequestNo'),
  outTradeNo?: string(name='OutTradeNo'),
  subject?: string(name='Subject'),
  buyerId?: string(name='BuyerId'),
  merchantId?: string(name='MerchantId'),
  totalAmount?: string(name='TotalAmount'),
  body?: string(name='Body'),
  goodsDetail?: string(name='GoodsDetail'),
  agreementNo?: string(name='AgreementNo'),
  settleMode?: string(name='SettleMode'),
  extInfo?: string(name='ExtInfo'),
}

model CreateWithholdTradeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  withholdTradeResponse?: {
    paymentDate?: string(name='PaymentDate'),
    tradeNo?: string(name='TradeNo'),
    outRequestNo?: string(name='OutRequestNo'),
    outTradeNo?: string(name='OutTradeNo'),
  }(name='WithholdTradeResponse'),
}

model CreateWithholdTradeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWithholdTradeResponseBody(name='body'),
}

async function createWithholdTradeWithOptions(request: CreateWithholdTradeRequest, runtime: Util.RuntimeOptions): CreateWithholdTradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateWithholdTrade',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWithholdTrade(request: CreateWithholdTradeRequest): CreateWithholdTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWithholdTradeWithOptions(request, runtime);
}

model ModifyOrderDeliveryAddressRequest {
  bizId?: string(name='BizId'),
  extJson?: string(name='ExtJson'),
  deliveryAddress?: string(name='DeliveryAddress'),
  lmOrderId?: long(name='LmOrderId'),
}

model ModifyOrderDeliveryAddressResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    resultInfo?: map[string]any(name='ResultInfo'),
  }(name='Model'),
}

model ModifyOrderDeliveryAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOrderDeliveryAddressResponseBody(name='body'),
}

async function modifyOrderDeliveryAddressWithOptions(request: ModifyOrderDeliveryAddressRequest, runtime: Util.RuntimeOptions): ModifyOrderDeliveryAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ExtJson"] = request.extJson;
  query["DeliveryAddress"] = request.deliveryAddress;
  query["LmOrderId"] = request.lmOrderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOrderDeliveryAddress',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOrderDeliveryAddress(request: ModifyOrderDeliveryAddressRequest): ModifyOrderDeliveryAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOrderDeliveryAddressWithOptions(request, runtime);
}

model InitApplyRefundRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  subLmOrderId?: string(name='SubLmOrderId'),
  bizClaimType?: int32(name='BizClaimType'),
  goodsStatus?: int32(name='GoodsStatus'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model InitApplyRefundResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  subLmOrderId?: string(name='SubLmOrderId'),
  requestId?: string(name='RequestId'),
  initApplyRefundData?: {
    mainOrderRefund?: boolean(name='MainOrderRefund'),
    bizClaimType?: int32(name='BizClaimType'),
    refundReasonList?: {
      refundReasonList?: [ 
      {
        reasonTextId?: long(name='ReasonTextId'),
        reasonTips?: string(name='ReasonTips'),
        proofRequired?: boolean(name='ProofRequired'),
        refundDescRequired?: boolean(name='RefundDescRequired'),
      }
    ](name='RefundReasonList')
    }(name='RefundReasonList'),
    maxRefundFeeData?: {
      maxRefundFee?: int32(name='MaxRefundFee'),
      minRefundFee?: int32(name='MinRefundFee'),
    }(name='MaxRefundFeeData'),
  }(name='InitApplyRefundData'),
}

model InitApplyRefundResponse = {
  headers: map[string]string(name='headers'),
  body: InitApplyRefundResponseBody(name='body'),
}

async function initApplyRefundWithOptions(request: InitApplyRefundRequest, runtime: Util.RuntimeOptions): InitApplyRefundResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["SubLmOrderId"] = request.subLmOrderId;
  query["BizClaimType"] = request.bizClaimType;
  query["GoodsStatus"] = request.goodsStatus;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'InitApplyRefund',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initApplyRefund(request: InitApplyRefundRequest): InitApplyRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  return initApplyRefundWithOptions(request, runtime);
}

model QueryOrderListRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  filterOption?: string(name='FilterOption'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryOrderListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: long(name='TotalCount'),
  postFee?: {
    fundAmount?: long(name='FundAmount'),
    fundType?: string(name='FundType'),
    fundAmountMoney?: long(name='FundAmountMoney'),
  }(name='PostFee'),
  lmOrderList?: {
    lmOrderList?: [ 
    {
      lmOrderId?: long(name='LmOrderId'),
      enableStatus?: int32(name='EnableStatus'),
      extJson?: string(name='ExtJson'),
      orderStatus?: int32(name='OrderStatus'),
      shopName?: string(name='ShopName'),
      tbOrderId?: long(name='TbOrderId'),
      orderAmount?: long(name='OrderAmount'),
      logisticsStatus?: int32(name='LogisticsStatus'),
      createDate?: string(name='CreateDate'),
      fundStructureModels?: {
        fundStructureModels?: [ 
        {
          fundAmount?: long(name='FundAmount'),
          fundType?: string(name='FundType'),
          fundAmountMoney?: long(name='FundAmountMoney'),
        }
      ](name='FundStructureModels')
      }(name='FundStructureModels'),
      subOrderList?: {
        subOrderList?: [ 
        {
          lmOrderId?: long(name='LmOrderId'),
          enableStatus?: int32(name='EnableStatus'),
          itemTitle?: string(name='ItemTitle'),
          orderStatus?: int32(name='OrderStatus'),
          skuName?: string(name='SkuName'),
          lmItemId?: string(name='LmItemId'),
          skuId?: long(name='SkuId'),
          number?: long(name='Number'),
          tbOrderId?: long(name='TbOrderId'),
          itemPic?: string(name='ItemPic'),
          itemId?: long(name='ItemId'),
          itemPriceList?: {
            itemPriceList?: [ 
            {
              fundAmount?: long(name='FundAmount'),
              fundType?: string(name='FundType'),
              fundAmountMoney?: long(name='FundAmountMoney'),
            }
          ](name='ItemPriceList')
          }(name='ItemPriceList'),
        }
      ](name='SubOrderList')
      }(name='SubOrderList'),
      postFee?: {
        fundAmount?: long(name='FundAmount'),
        fundType?: string(name='FundType'),
        fundAmountMoney?: long(name='FundAmountMoney'),
      }(name='PostFee'),
    }
  ](name='LmOrderList')
  }(name='LmOrderList'),
}

model QueryOrderListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderListResponseBody(name='body'),
}

async function queryOrderListWithOptions(request: QueryOrderListRequest, runtime: Util.RuntimeOptions): QueryOrderListResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["FilterOption"] = request.filterOption;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderList',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderList(request: QueryOrderListRequest): QueryOrderListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderListWithOptions(request, runtime);
}

model SettleOrderRequest {
  outRequestNo?: string(name='OutRequestNo'),
  tradeNo?: string(name='TradeNo'),
  royaltyParameters?: string(name='RoyaltyParameters'),
  extInfo?: string(name='ExtInfo'),
  outTradeNo?: string(name='OutTradeNo'),
  merchantId?: string(name='MerchantId'),
}

model SettleOrderResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  tradeOrderSettleResponse?: {
    tradeNo?: string(name='TradeNo'),
    outRequestNo?: string(name='OutRequestNo'),
  }(name='TradeOrderSettleResponse'),
}

model SettleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SettleOrderResponseBody(name='body'),
}

async function settleOrderWithOptions(request: SettleOrderRequest, runtime: Util.RuntimeOptions): SettleOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SettleOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function settleOrder(request: SettleOrderRequest): SettleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return settleOrderWithOptions(request, runtime);
}

model QueryOrderItemInfoByPaymentIdForAiZhanYouRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  paymentId?: string(name='PaymentId'),
}

model QueryOrderItemInfoByPaymentIdForAiZhanYouResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  lmOrderList?: {
    lmOrderList?: [ 
    {
      lmOrderId?: long(name='LmOrderId'),
      itemName?: string(name='ItemName'),
      skuName?: string(name='SkuName'),
      skuId?: long(name='SkuId'),
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
    }
  ](name='LmOrderList')
  }(name='LmOrderList'),
}

model QueryOrderItemInfoByPaymentIdForAiZhanYouResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderItemInfoByPaymentIdForAiZhanYouResponseBody(name='body'),
}

async function queryOrderItemInfoByPaymentIdForAiZhanYouWithOptions(request: QueryOrderItemInfoByPaymentIdForAiZhanYouRequest, runtime: Util.RuntimeOptions): QueryOrderItemInfoByPaymentIdForAiZhanYouResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["PaymentId"] = request.paymentId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderItemInfoByPaymentIdForAiZhanYou',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderItemInfoByPaymentIdForAiZhanYou(request: QueryOrderItemInfoByPaymentIdForAiZhanYouRequest): QueryOrderItemInfoByPaymentIdForAiZhanYouResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderItemInfoByPaymentIdForAiZhanYouWithOptions(request, runtime);
}

model GetItemPromotionRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
}

model GetItemPromotionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  itemPromotionModel?: {
    endTime?: string(name='EndTime'),
    startTime?: string(name='StartTime'),
    skuPromotion?: map[string]any(name='SkuPromotion'),
    promotionFlag?: boolean(name='PromotionFlag'),
    promotionName?: string(name='PromotionName'),
    lmItemId?: string(name='LmItemId'),
    promotionDesc?: string(name='PromotionDesc'),
    itemId?: long(name='ItemId'),
    promotionId?: string(name='PromotionId'),
    extInfo?: map[string]any(name='ExtInfo'),
  }(name='ItemPromotionModel'),
}

model GetItemPromotionResponse = {
  headers: map[string]string(name='headers'),
  body: GetItemPromotionResponseBody(name='body'),
}

async function getItemPromotionWithOptions(request: GetItemPromotionRequest, runtime: Util.RuntimeOptions): GetItemPromotionResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ItemId"] = request.itemId;
  query["LmItemId"] = request.lmItemId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetItemPromotion',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getItemPromotion(request: GetItemPromotionRequest): GetItemPromotionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getItemPromotionWithOptions(request, runtime);
}

model RepayOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  lmOrderId?: long(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model RepayOrderResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RepayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RepayOrderResponseBody(name='body'),
}

async function repayOrderWithOptions(request: RepayOrderRequest, runtime: Util.RuntimeOptions): RepayOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["LmOrderId"] = request.lmOrderId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RepayOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function repayOrder(request: RepayOrderRequest): RepayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return repayOrderWithOptions(request, runtime);
}

model QueryBizItemsWithActivityRequest {
  bizId?: string(name='BizId'),
  lmItemIds?: map[string]any(name='LmItemIds'),
  itemIds?: map[string]any(name='ItemIds'),
}

model QueryBizItemsWithActivityShrinkRequest {
  bizId?: string(name='BizId'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  itemIdsShrink?: string(name='ItemIds'),
}

model QueryBizItemsWithActivityResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  itemList?: {
    item?: [ 
    {
      picUrl?: string(name='PicUrl'),
      totalSoldQuantity?: int32(name='TotalSoldQuantity'),
      itemTitle?: string(name='ItemTitle'),
      maxAllowedCount?: int32(name='MaxAllowedCount'),
      sellerId?: long(name='SellerId'),
      lmItemId?: string(name='LmItemId'),
      categoryId?: long(name='CategoryId'),
      itemId?: long(name='ItemId'),
      reservePrice?: long(name='ReservePrice'),
      quantity?: long(name='Quantity'),
      taobaoShopName?: string(name='TaobaoShopName'),
      skuList?: {
        sku?: [ 
        {
          status?: long(name='Status'),
          priceCent?: long(name='PriceCent'),
          pointsInfo?: string(name='PointsInfo'),
          maxAllowedCount?: int32(name='MaxAllowedCount'),
          pointsKey?: string(name='PointsKey'),
          skuId?: long(name='SkuId'),
          points?: long(name='Points'),
          pointsAmount?: long(name='PointsAmount'),
          quantity?: long(name='Quantity'),
        }
      ](name='Sku')
      }(name='SkuList'),
      activities?: {
        activity?: [ 
        {
          startDate?: long(name='StartDate'),
          lmActivityId?: long(name='LmActivityId'),
          endDate?: long(name='EndDate'),
          title?: string(name='Title'),
          description?: string(name='Description'),
          activitySessions?: {
            activitySession?: [ 
            {
              subBizCode?: string(name='SubBizCode'),
              endDate?: long(name='EndDate'),
              displayDate?: long(name='DisplayDate'),
              lmSessionId?: long(name='LmSessionId'),
              description?: string(name='Description'),
              startDate?: long(name='StartDate'),
              title?: string(name='Title'),
              activitySessionItem?: {
                sessionQuantity?: long(name='SessionQuantity'),
                limitQuantityForPerson?: long(name='LimitQuantityForPerson'),
                saleableQuantity?: long(name='SaleableQuantity'),
                activitySessionItemSkuList?: {
                  skuId?: long(name='SkuId'),
                  priceCent?: long(name='PriceCent'),
                  points?: long(name='Points'),
                  pointsAmount?: long(name='PointsAmount'),
                }(name='ActivitySessionItemSkuList'),
              }(name='ActivitySessionItem'),
            }
          ](name='ActivitySession')
          }(name='ActivitySessions'),
          activityItem?: {
            activityQuantity?: long(name='ActivityQuantity'),
            limitQuantityForPerson?: long(name='LimitQuantityForPerson'),
            activityItemSkuList?: {
              activityItemSku?: [ 
              {
                activityPrice?: long(name='ActivityPrice'),
                skuId?: long(name='SkuId'),
              }
            ](name='ActivityItemSku')
            }(name='ActivityItemSkuList'),
          }(name='ActivityItem'),
        }
      ](name='Activity')
      }(name='Activities'),
    }
  ](name='Item')
  }(name='ItemList'),
}

model QueryBizItemsWithActivityResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBizItemsWithActivityResponseBody(name='body'),
}

async function queryBizItemsWithActivityWithOptions(tmpReq: QueryBizItemsWithActivityRequest, runtime: Util.RuntimeOptions): QueryBizItemsWithActivityResponse {
  Util.validateModel(tmpReq);
  var request = new QueryBizItemsWithActivityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBizItemsWithActivity',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBizItemsWithActivity(request: QueryBizItemsWithActivityRequest): QueryBizItemsWithActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBizItemsWithActivityWithOptions(request, runtime);
}

model QueryBatchRegistAnonymousTbAccountResultRequest {
  bizId?: string(name='BizId'),
  batchId?: string(name='BatchId'),
}

model QueryBatchRegistAnonymousTbAccountResultResponseBody = {
  status?: string(name='Status'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  batchId?: string(name='BatchId'),
  failIds?: {
    failId?: [ string ](name='FailId')
  }(name='FailIds'),
}

model QueryBatchRegistAnonymousTbAccountResultResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBatchRegistAnonymousTbAccountResultResponseBody(name='body'),
}

async function queryBatchRegistAnonymousTbAccountResultWithOptions(request: QueryBatchRegistAnonymousTbAccountResultRequest, runtime: Util.RuntimeOptions): QueryBatchRegistAnonymousTbAccountResultResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BatchId"] = request.batchId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryBatchRegistAnonymousTbAccountResult',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBatchRegistAnonymousTbAccountResult(request: QueryBatchRegistAnonymousTbAccountResultRequest): QueryBatchRegistAnonymousTbAccountResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBatchRegistAnonymousTbAccountResultWithOptions(request, runtime);
}

model GetWithholdSignPageUrlRequest {
  outRequestNo?: string(name='OutRequestNo'),
  externalAgreementNo?: string(name='ExternalAgreementNo'),
  merchantId?: string(name='MerchantId'),
  merchantServiceName?: string(name='MerchantServiceName'),
  merchantServiceDescription?: string(name='MerchantServiceDescription'),
  identityParameters?: string(name='IdentityParameters'),
  returnUrl?: string(name='ReturnUrl'),
  notifyUrl?: string(name='NotifyUrl'),
  deviceType?: string(name='DeviceType'),
  extInfo?: string(name='ExtInfo'),
}

model GetWithholdSignPageUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  withholdSignResponse?: {
    pageUrl?: string(name='PageUrl'),
    outRequestNo?: string(name='OutRequestNo'),
  }(name='WithholdSignResponse'),
}

model GetWithholdSignPageUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetWithholdSignPageUrlResponseBody(name='body'),
}

async function getWithholdSignPageUrlWithOptions(request: GetWithholdSignPageUrlRequest, runtime: Util.RuntimeOptions): GetWithholdSignPageUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetWithholdSignPageUrl',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWithholdSignPageUrl(request: GetWithholdSignPageUrlRequest): GetWithholdSignPageUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWithholdSignPageUrlWithOptions(request, runtime);
}

model ValidateTaobaoAccountRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  extJson?: string(name='ExtJson'),
  tbUserNick?: string(name='TbUserNick'),
  mobileNo?: string(name='MobileNo'),
}

model ValidateTaobaoAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    match?: boolean(name='Match'),
  }(name='Model'),
}

model ValidateTaobaoAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateTaobaoAccountResponseBody(name='body'),
}

async function validateTaobaoAccountWithOptions(request: ValidateTaobaoAccountRequest, runtime: Util.RuntimeOptions): ValidateTaobaoAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["ExtJson"] = request.extJson;
  query["TbUserNick"] = request.tbUserNick;
  query["MobileNo"] = request.mobileNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ValidateTaobaoAccount',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateTaobaoAccount(request: ValidateTaobaoAccountRequest): ValidateTaobaoAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateTaobaoAccountWithOptions(request, runtime);
}

model RemoveMessagesRequest {
  bizId?: string(name='BizId'),
  messageIds?: string(name='MessageIds'),
  extJson?: string(name='ExtJson'),
}

model RemoveMessagesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  subCode?: string(name='SubCode'),
  message?: string(name='Message'),
  logsId?: string(name='LogsId'),
  actionResult?: {
    returnCode?: string(name='ReturnCode'),
    returnValue?: string(name='ReturnValue'),
    returnMessage?: string(name='ReturnMessage'),
  }(name='ActionResult'),
}

model RemoveMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMessagesResponseBody(name='body'),
}

async function removeMessagesWithOptions(request: RemoveMessagesRequest, runtime: Util.RuntimeOptions): RemoveMessagesResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["MessageIds"] = request.messageIds;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveMessages',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeMessages(request: RemoveMessagesRequest): RemoveMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeMessagesWithOptions(request, runtime);
}

model GetSwitchUrlRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  url?: string(name='Url'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
}

model GetSwitchUrlResponseBody = {
  code?: string(name='Code'),
  url?: string(name='Url'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSwitchUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetSwitchUrlResponseBody(name='body'),
}

async function getSwitchUrlWithOptions(request: GetSwitchUrlRequest, runtime: Util.RuntimeOptions): GetSwitchUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetSwitchUrl',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSwitchUrl(request: GetSwitchUrlRequest): GetSwitchUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSwitchUrlWithOptions(request, runtime);
}

model AddItemLimitRuleRequest {
  bizId?: string(name='BizId'),
  subBizCode?: string(name='SubBizCode'),
  lmActivityId?: long(name='LmActivityId'),
  lmItemId?: string(name='LmItemId'),
  itemId?: long(name='ItemId'),
  upperNum?: int32(name='UpperNum'),
  ruleType?: int32(name='RuleType'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
}

model AddItemLimitRuleResponseBody = {
  code?: string(name='Code'),
  model?: long(name='Model'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  ruleId?: long(name='RuleId'),
}

model AddItemLimitRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddItemLimitRuleResponseBody(name='body'),
}

async function addItemLimitRuleWithOptions(request: AddItemLimitRuleRequest, runtime: Util.RuntimeOptions): AddItemLimitRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizCode"] = request.subBizCode;
  query["LmActivityId"] = request.lmActivityId;
  query["LmItemId"] = request.lmItemId;
  query["ItemId"] = request.itemId;
  query["UpperNum"] = request.upperNum;
  query["RuleType"] = request.ruleType;
  query["BeginTime"] = request.beginTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddItemLimitRule',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addItemLimitRule(request: AddItemLimitRuleRequest): AddItemLimitRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addItemLimitRuleWithOptions(request, runtime);
}

model GetUserTokenPageRequest {
  bizId?: string(name='BizId', description='业务ID'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', description='业务方用户ID'),
  userNick?: string(name='UserNick', description='用户昵称'),
  expireSeconds?: long(name='ExpireSeconds', description='过期时间'),
  extJson?: string(name='ExtJson', description='扩展信息'),
}

model GetUserTokenPageResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  code?: string(name='Code', description='响应码'),
  message?: string(name='Message', description='提示信息'),
  model?: {
    url?: string(name='Url', description='页面地址'),
  }(name='Model'),
}

model GetUserTokenPageResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserTokenPageResponseBody(name='body'),
}

async function getUserTokenPageWithOptions(request: GetUserTokenPageRequest, runtime: Util.RuntimeOptions): GetUserTokenPageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserTokenPage',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserTokenPage(request: GetUserTokenPageRequest): GetUserTokenPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserTokenPageWithOptions(request, runtime);
}

model ListUserGameProcessRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  activityId?: string(name='ActivityId'),
  gameId?: string(name='GameId'),
  status?: string(name='Status'),
  type?: string(name='Type'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListUserGameProcessResponseBody = {
  totalCount?: long(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  model?: [ 
    {
      processId?: string(name='ProcessId'),
      gameId?: string(name='GameId'),
      activityId?: string(name='ActivityId'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      desc?: string(name='Desc'),
      content?: string(name='Content'),
      status?: string(name='Status'),
      currentStepStatus?: string(name='CurrentStepStatus'),
      currentStepId?: string(name='CurrentStepId'),
      gameCoinRecords?: string(name='GameCoinRecords'),
      gameAwardRecords?: string(name='GameAwardRecords'),
      extInfo?: string(name='ExtInfo'),
      routeId?: string(name='RouteId'),
    }
  ](name='Model'),
}

model ListUserGameProcessResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserGameProcessResponseBody(name='body'),
}

async function listUserGameProcessWithOptions(request: ListUserGameProcessRequest, runtime: Util.RuntimeOptions): ListUserGameProcessResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserGameProcess',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserGameProcess(request: ListUserGameProcessRequest): ListUserGameProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGameProcessWithOptions(request, runtime);
}

model NotifyPayOrderStatusRequest {
  channelId?: string(name='ChannelId'),
  requestId?: string(name='RequestId'),
  operationDate?: string(name='OperationDate'),
  payTypes?: string(name='PayTypes'),
  amount?: long(name='Amount'),
}

model NotifyPayOrderStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model NotifyPayOrderStatusResponse = {
  headers: map[string]string(name='headers'),
  body: NotifyPayOrderStatusResponseBody(name='body'),
}

async function notifyPayOrderStatusWithOptions(request: NotifyPayOrderStatusRequest, runtime: Util.RuntimeOptions): NotifyPayOrderStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ChannelId"] = request.channelId;
  query["RequestId"] = request.requestId;
  query["OperationDate"] = request.operationDate;
  query["PayTypes"] = request.payTypes;
  query["Amount"] = request.amount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'NotifyPayOrderStatus',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function notifyPayOrderStatus(request: NotifyPayOrderStatusRequest): NotifyPayOrderStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return notifyPayOrderStatusWithOptions(request, runtime);
}

model DeleteBizItemsRequest {
  bizId?: string(name='BizId'),
  subBizId?: string(name='SubBizId'),
  itemIdList?: [ long ](name='ItemIdList'),
}

model DeleteBizItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteBizItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBizItemsResponseBody(name='body'),
}

async function deleteBizItemsWithOptions(request: DeleteBizItemsRequest, runtime: Util.RuntimeOptions): DeleteBizItemsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizId"] = request.subBizId;
  query["ItemIdList"] = request.itemIdList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBizItems',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBizItems(request: DeleteBizItemsRequest): DeleteBizItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBizItemsWithOptions(request, runtime);
}

model QueryActivityItemsRequest {
  bizId?: string(name='BizId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  lmActivityId?: long(name='LmActivityId'),
}

model QueryActivityItemsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  lmActivityItemModelList?: {
    lmActivityItemModel?: [ 
    {
      itemTitle?: string(name='ItemTitle'),
      tbSellerId?: long(name='TbSellerId'),
      sellableQuantity?: int32(name='SellableQuantity'),
      tbShopId?: long(name='TbShopId'),
      lmItemId?: string(name='LmItemId'),
      tbShopName?: string(name='TbShopName'),
      itemActivityQuantity?: int32(name='ItemActivityQuantity'),
      lmActivityId?: long(name='LmActivityId'),
      canSell?: boolean(name='CanSell'),
      itemId?: long(name='ItemId'),
      mainPicUrl?: string(name='MainPicUrl'),
      tips?: string(name='Tips'),
      lmShopId?: string(name='LmShopId'),
      itemActivityStatus?: string(name='ItemActivityStatus'),
      skuModelList?: {
        lmActivityItemSkuModel?: [ 
        {
          reservedPrice?: long(name='ReservedPrice'),
          tips?: string(name='Tips'),
          lmItemId?: string(name='LmItemId'),
          skuId?: long(name='SkuId'),
          lmActivityId?: long(name='LmActivityId'),
          activityStatus?: string(name='ActivityStatus'),
          bizId?: string(name='BizId'),
          itemId?: long(name='ItemId'),
          skuPicUrl?: string(name='SkuPicUrl'),
          activityPrice?: long(name='ActivityPrice'),
          skuTitle?: string(name='SkuTitle'),
        }
      ](name='LmActivityItemSkuModel')
      }(name='SkuModelList'),
    }
  ](name='LmActivityItemModel')
  }(name='LmActivityItemModelList'),
}

model QueryActivityItemsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryActivityItemsResponseBody(name='body'),
}

async function queryActivityItemsWithOptions(request: QueryActivityItemsRequest, runtime: Util.RuntimeOptions): QueryActivityItemsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["LmActivityId"] = request.lmActivityId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryActivityItems',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryActivityItems(request: QueryActivityItemsRequest): QueryActivityItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryActivityItemsWithOptions(request, runtime);
}

model QueryMovieCommentsRequest {
  bizId?: string(name='BizId'),
  movieId?: long(name='MovieId'),
  pageNumber?: long(name='PageNumber'),
  extJson?: string(name='ExtJson'),
}

model QueryMovieCommentsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  count?: long(name='Count'),
  commentList?: {
    comment?: [ 
    {
      remark?: long(name='Remark'),
      favorCount?: long(name='FavorCount'),
      subject?: string(name='Subject'),
      movieId?: long(name='MovieId'),
      nickName?: string(name='NickName'),
      content?: string(name='Content'),
      id?: long(name='Id'),
      commentTime?: string(name='CommentTime'),
    }
  ](name='Comment')
  }(name='CommentList'),
}

model QueryMovieCommentsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMovieCommentsResponseBody(name='body'),
}

async function queryMovieCommentsWithOptions(request: QueryMovieCommentsRequest, runtime: Util.RuntimeOptions): QueryMovieCommentsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["MovieId"] = request.movieId;
  query["PageNumber"] = request.pageNumber;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryMovieComments',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMovieComments(request: QueryMovieCommentsRequest): QueryMovieCommentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMovieCommentsWithOptions(request, runtime);
}

model RenderOrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  extJson?: string(name='ExtJson'),
  deliveryAddress?: string(name='DeliveryAddress'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  lmItemId?: string(name='LmItemId'),
  accountType?: string(name='AccountType'),
  itemList?: [ 
    {
      skuId?: long(name='SkuId'),
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      quantity?: int32(name='Quantity'),
    }
  ](name='ItemList'),
}

model RenderOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    renderOrderInfos?: {
      renderOrderInfos?: [ 
      {
        extInfo?: map[string]any(name='ExtInfo'),
        lmItemInfos?: {
          lmItemInfos?: [ 
          {
            lmItemId?: string(name='LmItemId'),
            sellerId?: long(name='SellerId'),
            message?: string(name='Message'),
            itemId?: long(name='ItemId'),
            canSell?: boolean(name='CanSell'),
            cash?: long(name='Cash'),
            itemName?: string(name='ItemName'),
            actualPrice?: long(name='ActualPrice'),
            skuName?: string(name='SkuName'),
            skuId?: long(name='SkuId'),
            points?: long(name='Points'),
            sellerNick?: string(name='SellerNick'),
            quantity?: int32(name='Quantity'),
            itemPicUrl?: string(name='ItemPicUrl'),
          }
        ](name='LmItemInfos')
        }(name='LmItemInfos'),
        deliveryInfos?: {
          deliveryInfos?: [ 
          {
            displayName?: string(name='DisplayName'),
            postFee?: long(name='PostFee'),
            serviceType?: long(name='ServiceType'),
            id?: string(name='Id'),
          }
        ](name='DeliveryInfos')
        }(name='DeliveryInfos'),
      }
    ](name='RenderOrderInfos')
    }(name='RenderOrderInfos'),
  }(name='Model'),
}

model RenderOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RenderOrderResponseBody(name='body'),
}

async function renderOrderWithOptions(request: RenderOrderRequest, runtime: Util.RuntimeOptions): RenderOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["ExtJson"] = request.extJson;
  query["DeliveryAddress"] = request.deliveryAddress;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["LmItemId"] = request.lmItemId;
  query["AccountType"] = request.accountType;
  query["ItemList"] = request.itemList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RenderOrder',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renderOrder(request: RenderOrderRequest): RenderOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return renderOrderWithOptions(request, runtime);
}

model GetLoginPageRequest {
  bizId?: string(name='BizId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  targetUrl?: string(name='TargetUrl'),
  failUrl?: string(name='FailUrl'),
}

model GetLoginPageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  urlData?: {
    returnUrl?: string(name='ReturnUrl'),
  }(name='UrlData'),
}

model GetLoginPageResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoginPageResponseBody(name='body'),
}

async function getLoginPageWithOptions(request: GetLoginPageRequest, runtime: Util.RuntimeOptions): GetLoginPageResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetLoginPage',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLoginPage(request: GetLoginPageRequest): GetLoginPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoginPageWithOptions(request, runtime);
}

model DeleteItemLimitRuleRequest {
  bizId?: string(name='BizId'),
  subBizCode?: string(name='SubBizCode'),
  lmActivityId?: long(name='LmActivityId'),
  lmItemId?: string(name='LmItemId'),
  itemId?: long(name='ItemId'),
  ruleId?: long(name='RuleId'),
}

model DeleteItemLimitRuleResponseBody = {
  code?: string(name='Code'),
  model?: boolean(name='Model'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteItemLimitRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteItemLimitRuleResponseBody(name='body'),
}

async function deleteItemLimitRuleWithOptions(request: DeleteItemLimitRuleRequest, runtime: Util.RuntimeOptions): DeleteItemLimitRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizCode"] = request.subBizCode;
  query["LmActivityId"] = request.lmActivityId;
  query["LmItemId"] = request.lmItemId;
  query["ItemId"] = request.itemId;
  query["RuleId"] = request.ruleId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteItemLimitRule',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteItemLimitRule(request: DeleteItemLimitRuleRequest): DeleteItemLimitRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteItemLimitRuleWithOptions(request, runtime);
}

model RegistAnonymousTbAccountRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
}

model RegistAnonymousTbAccountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RegistAnonymousTbAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RegistAnonymousTbAccountResponseBody(name='body'),
}

async function registAnonymousTbAccountWithOptions(request: RegistAnonymousTbAccountRequest, runtime: Util.RuntimeOptions): RegistAnonymousTbAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RegistAnonymousTbAccount',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registAnonymousTbAccount(request: RegistAnonymousTbAccountRequest): RegistAnonymousTbAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return registAnonymousTbAccountWithOptions(request, runtime);
}

model ApplyRefundRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  subLmOrderId?: string(name='SubLmOrderId'),
  bizClaimType?: int32(name='BizClaimType'),
  applyRefundFee?: long(name='ApplyRefundFee'),
  applyRefundCount?: int32(name='ApplyRefundCount'),
  applyReasonTextId?: long(name='ApplyReasonTextId'),
  leaveMessage?: string(name='LeaveMessage'),
  goodsStatus?: int32(name='GoodsStatus'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  leavePictureList?: [ 
    {
      picture?: string(name='Picture'),
      desc?: string(name='Desc'),
    }
  ](name='LeavePictureList'),
}

model ApplyRefundResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  refundApplicationData?: {
    disputeType?: int32(name='DisputeType'),
    subLmOrderId?: string(name='SubLmOrderId'),
    disputeStatus?: int32(name='DisputeStatus'),
  }(name='RefundApplicationData'),
}

model ApplyRefundResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyRefundResponseBody(name='body'),
}

async function applyRefundWithOptions(request: ApplyRefundRequest, runtime: Util.RuntimeOptions): ApplyRefundResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["SubLmOrderId"] = request.subLmOrderId;
  query["BizClaimType"] = request.bizClaimType;
  query["ApplyRefundFee"] = request.applyRefundFee;
  query["ApplyRefundCount"] = request.applyRefundCount;
  query["ApplyReasonTextId"] = request.applyReasonTextId;
  query["GoodsStatus"] = request.goodsStatus;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ApplyRefund',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyRefund(request: ApplyRefundRequest): ApplyRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyRefundWithOptions(request, runtime);
}

model UpdateAddressRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  addressInfo?: string(name='AddressInfo'),
}

model UpdateAddressResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAddressResponseBody(name='body'),
}

async function updateAddressWithOptions(request: UpdateAddressRequest, runtime: Util.RuntimeOptions): UpdateAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAddress',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAddress(request: UpdateAddressRequest): UpdateAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAddressWithOptions(request, runtime);
}

model RemoveAddressRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  addressInfo?: string(name='AddressInfo'),
}

model RemoveAddressResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemoveAddressResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAddressResponseBody(name='body'),
}

async function removeAddressWithOptions(request: RemoveAddressRequest, runtime: Util.RuntimeOptions): RemoveAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAddress',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAddress(request: RemoveAddressRequest): RemoveAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAddressWithOptions(request, runtime);
}

model QueryUnfinishedSessionsRequest {
  bizId?: string(name='BizId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryTime?: long(name='QueryTime'),
}

model QueryUnfinishedSessionsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  lmActivitySessionModelList?: {
    lmActivitySessionModel?: [ 
    {
      subBizCode?: string(name='SubBizCode'),
      displayDate?: string(name='DisplayDate'),
      endDate?: string(name='EndDate'),
      description?: string(name='Description'),
      lmSessionId?: long(name='LmSessionId'),
      bizId?: string(name='BizId'),
      lmActivityId?: long(name='LmActivityId'),
      startDate?: string(name='StartDate'),
      name?: string(name='Name'),
    }
  ](name='LmActivitySessionModel')
  }(name='LmActivitySessionModelList'),
}

model QueryUnfinishedSessionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnfinishedSessionsResponseBody(name='body'),
}

async function queryUnfinishedSessionsWithOptions(request: QueryUnfinishedSessionsRequest, runtime: Util.RuntimeOptions): QueryUnfinishedSessionsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["QueryTime"] = request.queryTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryUnfinishedSessions',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUnfinishedSessions(request: QueryUnfinishedSessionsRequest): QueryUnfinishedSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnfinishedSessionsWithOptions(request, runtime);
}

model CreatePayUrlRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  buyInfo?: string(name='BuyInfo'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
}

model CreatePayUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  model?: {
    redirectUrl?: string(name='RedirectUrl'),
    payTradeIds?: [ string ](name='PayTradeIds'),
    lmOrderList?: [ string ](name='LmOrderList'),
    orderIds?: [ string ](name='OrderIds'),
  }(name='Model'),
}

model CreatePayUrlResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePayUrlResponseBody(name='body'),
}

async function createPayUrlWithOptions(request: CreatePayUrlRequest, runtime: Util.RuntimeOptions): CreatePayUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreatePayUrl',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPayUrl(request: CreatePayUrlRequest): CreatePayUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPayUrlWithOptions(request, runtime);
}

model QueryUpcomingMoviesRequest {
  bizId?: string(name='BizId'),
  cityCode?: long(name='CityCode'),
  extJson?: map[string]any(name='ExtJson'),
}

model QueryUpcomingMoviesShrinkRequest {
  bizId?: string(name='BizId'),
  cityCode?: long(name='CityCode'),
  extJsonShrink?: string(name='ExtJson'),
}

model QueryUpcomingMoviesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  movies?: {
    movie?: [ 
    {
      type?: string(name='Type'),
      movieVersion?: string(name='MovieVersion'),
      backgroundPicture?: string(name='BackgroundPicture'),
      remark?: string(name='Remark'),
      openDay?: string(name='OpenDay'),
      highlight?: string(name='Highlight'),
      movieTypeList?: string(name='MovieTypeList'),
      language?: string(name='Language'),
      director?: string(name='Director'),
      openTime?: string(name='OpenTime'),
      poster?: string(name='Poster'),
      movieName?: string(name='MovieName'),
      description?: string(name='Description'),
      country?: string(name='Country'),
      duration?: long(name='Duration'),
      movieNameEn?: string(name='MovieNameEn'),
      leadingRole?: string(name='LeadingRole'),
      id?: long(name='Id'),
      trailerList?: string(name='TrailerList'),
    }
  ](name='Movie')
  }(name='Movies'),
}

model QueryUpcomingMoviesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUpcomingMoviesResponseBody(name='body'),
}

async function queryUpcomingMoviesWithOptions(tmpReq: QueryUpcomingMoviesRequest, runtime: Util.RuntimeOptions): QueryUpcomingMoviesResponse {
  Util.validateModel(tmpReq);
  var request = new QueryUpcomingMoviesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extJson)) {
    request.extJsonShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extJson, 'ExtJson', 'json');
  }
  var query = {};
  query["BizId"] = request.bizId;
  query["CityCode"] = request.cityCode;
  query["ExtJson"] = request.extJsonShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryUpcomingMovies',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUpcomingMovies(request: QueryUpcomingMoviesRequest): QueryUpcomingMoviesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUpcomingMoviesWithOptions(request, runtime);
}

model QueryWithholdTradeRequest {
  tradeNo?: string(name='TradeNo'),
  outTradeNo?: string(name='OutTradeNo'),
  merchantId?: string(name='MerchantId'),
}

model QueryWithholdTradeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  queryWithholdTradeResponse?: {
    settleStatus?: string(name='SettleStatus'),
    tradeStatus?: string(name='TradeStatus'),
    totalAmount?: string(name='TotalAmount'),
    tradeNo?: string(name='TradeNo'),
    paymentDate?: string(name='PaymentDate'),
    outTradeNo?: string(name='OutTradeNo'),
  }(name='QueryWithholdTradeResponse'),
}

model QueryWithholdTradeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryWithholdTradeResponseBody(name='body'),
}

async function queryWithholdTradeWithOptions(request: QueryWithholdTradeRequest, runtime: Util.RuntimeOptions): QueryWithholdTradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryWithholdTrade',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryWithholdTrade(request: QueryWithholdTradeRequest): QueryWithholdTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryWithholdTradeWithOptions(request, runtime);
}

model QueryOrderAndPaymentListRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  filterOption?: string(name='FilterOption'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryOrderAndPaymentListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: long(name='TotalCount'),
  postFee?: {
    fundAmount?: long(name='FundAmount'),
    fundType?: string(name='FundType'),
    fundAmountMoney?: long(name='FundAmountMoney'),
  }(name='PostFee'),
  lmOrderList?: {
    lmOrderList?: [ 
    {
      lmOrderId?: long(name='LmOrderId'),
      enableStatus?: int32(name='EnableStatus'),
      extJson?: string(name='ExtJson'),
      orderStatus?: int32(name='OrderStatus'),
      lmPaymentId?: string(name='LmPaymentId'),
      shopName?: string(name='ShopName'),
      tbOrderId?: long(name='TbOrderId'),
      orderAmount?: long(name='OrderAmount'),
      logisticsStatus?: int32(name='LogisticsStatus'),
      createDate?: string(name='CreateDate'),
      fundStructureModels?: {
        fundStructureModels?: [ 
        {
          fundAmount?: long(name='FundAmount'),
          fundType?: string(name='FundType'),
          fundAmountMoney?: long(name='FundAmountMoney'),
        }
      ](name='FundStructureModels')
      }(name='FundStructureModels'),
      subOrderList?: {
        subOrderList?: [ 
        {
          lmOrderId?: long(name='LmOrderId'),
          enableStatus?: int32(name='EnableStatus'),
          itemTitle?: string(name='ItemTitle'),
          orderStatus?: int32(name='OrderStatus'),
          skuName?: string(name='SkuName'),
          lmItemId?: string(name='LmItemId'),
          skuId?: long(name='SkuId'),
          number?: long(name='Number'),
          tbOrderId?: long(name='TbOrderId'),
          itemPic?: string(name='ItemPic'),
          itemId?: long(name='ItemId'),
          itemPriceList?: {
            itemPriceList?: [ 
            {
              fundAmount?: long(name='FundAmount'),
              fundType?: string(name='FundType'),
              fundAmountMoney?: long(name='FundAmountMoney'),
            }
          ](name='ItemPriceList')
          }(name='ItemPriceList'),
        }
      ](name='SubOrderList')
      }(name='SubOrderList'),
      postFee?: {
        fundAmount?: long(name='FundAmount'),
        fundType?: string(name='FundType'),
        fundAmountMoney?: long(name='FundAmountMoney'),
      }(name='PostFee'),
    }
  ](name='LmOrderList')
  }(name='LmOrderList'),
}

model QueryOrderAndPaymentListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderAndPaymentListResponseBody(name='body'),
}

async function queryOrderAndPaymentListWithOptions(request: QueryOrderAndPaymentListRequest, runtime: Util.RuntimeOptions): QueryOrderAndPaymentListResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["FilterOption"] = request.filterOption;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderAndPaymentList',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderAndPaymentList(request: QueryOrderAndPaymentListRequest): QueryOrderAndPaymentListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderAndPaymentListWithOptions(request, runtime);
}

model QueryOrderInfoAfterSaleRequest {
  bizId?: string(name='BizId'),
  channelUserId?: string(name='ChannelUserId'),
  lmOrderId?: string(name='LmOrderId'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
}

model QueryOrderInfoAfterSaleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  model?: {
    lmOrderId?: long(name='LmOrderId'),
    shopServiceTelephone?: string(name='ShopServiceTelephone'),
    refundAmount?: long(name='RefundAmount'),
    xiaomiCode?: string(name='XiaomiCode'),
    shopName?: string(name='ShopName'),
    createDate?: string(name='CreateDate'),
    refundRate?: string(name='RefundRate'),
    extJson?: string(name='ExtJson'),
    orderStatus?: string(name='OrderStatus'),
    refundPoints?: long(name='RefundPoints'),
    tbOrderId?: long(name='TbOrderId'),
    points?: long(name='Points'),
    refundStatus?: string(name='RefundStatus'),
    pointsAmount?: long(name='PointsAmount'),
    cashAmount?: string(name='CashAmount'),
    logisticsList?: {
      logistics?: [ 
      {
        logisticsCompanyCode?: string(name='LogisticsCompanyCode'),
        logisticsNo?: string(name='LogisticsNo'),
        logisticsStatus?: string(name='LogisticsStatus'),
        logisticsCompanyName?: string(name='LogisticsCompanyName'),
      }
    ](name='Logistics')
    }(name='LogisticsList'),
  }(name='Model'),
}

model QueryOrderInfoAfterSaleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderInfoAfterSaleResponseBody(name='body'),
}

async function queryOrderInfoAfterSaleWithOptions(request: QueryOrderInfoAfterSaleRequest, runtime: Util.RuntimeOptions): QueryOrderInfoAfterSaleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderInfoAfterSale',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderInfoAfterSale(request: QueryOrderInfoAfterSaleRequest): QueryOrderInfoAfterSaleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderInfoAfterSaleWithOptions(request, runtime);
}

model GetActivityGameInfoRequest {
  bizId?: string(name='BizId'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  accountType?: string(name='AccountType'),
  activityId?: string(name='ActivityId'),
  gameId?: string(name='GameId'),
}

model GetActivityGameInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    userProcessDTO?: string(name='UserProcessDTO', description='用户进度'),
    gameDTO?: string(name='GameDTO', description='玩法信息'),
    userGameCoinInfos?: string(name='UserGameCoinInfos', description='玩法币信息'),
    extInfo?: string(name='ExtInfo', description='扩展信息'),
  }(name='Model'),
}

model GetActivityGameInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetActivityGameInfoResponseBody(name='body'),
}

async function getActivityGameInfoWithOptions(request: GetActivityGameInfoRequest, runtime: Util.RuntimeOptions): GetActivityGameInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetActivityGameInfo',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getActivityGameInfo(request: GetActivityGameInfoRequest): GetActivityGameInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getActivityGameInfoWithOptions(request, runtime);
}

model QueryOrderDetailInnerRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  filterOption?: string(name='FilterOption'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
}

model QueryOrderDetailInnerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  model?: {
    order?: {
      eticket?: boolean(name='Eticket'),
      createDate?: string(name='CreateDate'),
      logisticsCompName?: string(name='LogisticsCompName'),
      channelCode?: string(name='ChannelCode'),
      logisticsMobilePhone?: string(name='LogisticsMobilePhone'),
      resExtInfo?: string(name='ResExtInfo'),
      enableStatus?: int32(name='EnableStatus'),
      channelBizType?: string(name='ChannelBizType'),
      shipping?: string(name='Shipping'),
      orderPayInfo?: string(name='OrderPayInfo'),
      logisticsStatusDesc?: string(name='LogisticsStatusDesc'),
      tbOrderId?: string(name='TbOrderId'),
      logisticsStatus?: int32(name='LogisticsStatus'),
      lmOrderId?: long(name='LmOrderId'),
      sellerId?: long(name='SellerId'),
      shopName?: string(name='ShopName'),
      orderAmount?: long(name='OrderAmount'),
      extInfo?: map[string]any(name='ExtInfo'),
      endTime?: long(name='EndTime'),
      payStatus?: int32(name='PayStatus'),
      logisticsNo?: string(name='LogisticsNo'),
      logisticsUserName?: string(name='LogisticsUserName'),
      logisticsAddress?: string(name='LogisticsAddress'),
      payWaterStatus?: int32(name='PayWaterStatus'),
      refundStatus?: int32(name='RefundStatus'),
      sellerNick?: string(name='SellerNick'),
      channelOrderId?: string(name='ChannelOrderId'),
      subItemOrderList?: {
        subItemOrder?: [ 
        {
          lmOrderId?: long(name='LmOrderId'),
          itemPriceInfo?: string(name='ItemPriceInfo'),
          itemTitle?: string(name='ItemTitle'),
          tbSubOrderId?: long(name='TbSubOrderId'),
          lmItemId?: string(name='LmItemId'),
          totalPaymentInfo?: string(name='TotalPaymentInfo'),
          itemPic?: string(name='ItemPic'),
          itemId?: long(name='ItemId'),
          channelCode?: string(name='ChannelCode'),
          payStatus?: int32(name='PayStatus'),
          skuName?: string(name='SkuName'),
          number?: int32(name='Number'),
          skuId?: long(name='SkuId'),
          itemPriceList?: {
            itemPrice?: [ 
            {
              fundAmount?: long(name='FundAmount'),
              tbOrderId?: long(name='TbOrderId'),
              fundType?: string(name='FundType'),
              fundAmountMoney?: long(name='FundAmountMoney'),
              tbSubOrderId?: long(name='TbSubOrderId'),
            }
          ](name='ItemPrice')
          }(name='ItemPriceList'),
        }
      ](name='SubItemOrder')
      }(name='SubItemOrderList'),
      fundStructureModels?: {
        fundStructure?: [ 
        {
          fundAmount?: long(name='FundAmount'),
          lmOrderId?: long(name='LmOrderId'),
          fundType?: string(name='FundType'),
          fundAmountMoney?: long(name='FundAmountMoney'),
          tbSubOrderId?: long(name='TbSubOrderId'),
        }
      ](name='FundStructure')
      }(name='FundStructureModels'),
      postFee?: {
        fundAmount?: long(name='FundAmount'),
        lmOrderId?: long(name='LmOrderId'),
        fundType?: string(name='FundType'),
        fundAmountMoney?: long(name='FundAmountMoney'),
        tbSubOrderId?: long(name='TbSubOrderId'),
      }(name='PostFee'),
    }(name='order'),
  }(name='Model'),
}

model QueryOrderDetailInnerResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrderDetailInnerResponseBody(name='body'),
}

async function queryOrderDetailInnerWithOptions(request: QueryOrderDetailInnerRequest, runtime: Util.RuntimeOptions): QueryOrderDetailInnerResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["FilterOption"] = request.filterOption;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderDetailInner',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderDetailInner(request: QueryOrderDetailInnerRequest): QueryOrderDetailInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderDetailInnerWithOptions(request, runtime);
}

model ReleaseMovieSeatRequest {
  bizId?: string(name='BizId'),
  lockSeatApplyKey?: string(name='LockSeatApplyKey'),
  bizUid?: string(name='BizUid'),
  extJson?: string(name='ExtJson'),
}

model ReleaseMovieSeatResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  logsId?: string(name='LogsId'),
  actionResult?: {
    returnCode?: string(name='ReturnCode'),
    returnValue?: string(name='ReturnValue'),
    returnMessage?: string(name='ReturnMessage'),
  }(name='ActionResult'),
}

model ReleaseMovieSeatResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseMovieSeatResponseBody(name='body'),
}

async function releaseMovieSeatWithOptions(request: ReleaseMovieSeatRequest, runtime: Util.RuntimeOptions): ReleaseMovieSeatResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["LockSeatApplyKey"] = request.lockSeatApplyKey;
  query["BizUid"] = request.bizUid;
  query["ExtJson"] = request.extJson;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseMovieSeat',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseMovieSeat(request: ReleaseMovieSeatRequest): ReleaseMovieSeatResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseMovieSeatWithOptions(request, runtime);
}

model RenderH5OrderRequest {
  bizId?: string(name='BizId'),
  bizUid?: string(name='BizUid'),
  useAnonymousTbAccount?: boolean(name='UseAnonymousTbAccount'),
  thirdPartyUserId?: string(name='ThirdPartyUserId'),
  buyOrderRequestModel?: string(name='BuyOrderRequestModel'),
  accountType?: string(name='AccountType'),
}

model RenderH5OrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    extInfo?: map[string]any(name='ExtInfo'),
    buyerCurrentPoints?: long(name='BuyerCurrentPoints'),
    lmItemInfoList?: [ 
      {
        tbShopName?: string(name='TbShopName'),
        sellerId?: long(name='SellerId'),
        lmItemId?: string(name='LmItemId'),
        message?: string(name='Message'),
        canSell?: boolean(name='CanSell'),
        cash?: long(name='Cash'),
        itemId?: long(name='ItemId'),
        virtualItemType?: string(name='VirtualItemType'),
        itemName?: string(name='ItemName'),
        actualPrice?: long(name='ActualPrice'),
        skuName?: string(name='SkuName'),
        skuId?: long(name='SkuId'),
        points?: long(name='Points'),
        itemUrl?: string(name='ItemUrl'),
        sellerNick?: string(name='SellerNick'),
        quantity?: int32(name='Quantity'),
        features?: map[string]any(name='Features'),
        itemPicUrl?: string(name='ItemPicUrl'),
      }
    ](name='LmItemInfoList'),
    deliveryInfoList?: [ 
      {
        displayName?: string(name='DisplayName'),
        postFee?: long(name='PostFee'),
        serviceType?: long(name='ServiceType'),
        id?: string(name='Id'),
      }
    ](name='DeliveryInfoList'),
    addressInfoList?: [ 
      {
        divisionCode?: string(name='DivisionCode'),
        receiver?: string(name='Receiver'),
        addressDetail?: string(name='AddressDetail'),
        default?: boolean(name='Default'),
        addressId?: long(name='AddressId'),
        receiverPhone?: string(name='ReceiverPhone'),
      }
    ](name='AddressInfoList'),
    invoiceInfo?: {
      type?: string(name='Type'),
      desc?: string(name='Desc'),
    }(name='InvoiceInfo'),
  }(name='Model'),
}

model RenderH5OrderResponse = {
  headers: map[string]string(name='headers'),
  body: RenderH5OrderResponseBody(name='body'),
}

async function renderH5OrderWithOptions(request: RenderH5OrderRequest, runtime: Util.RuntimeOptions): RenderH5OrderResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["BizUid"] = request.bizUid;
  query["UseAnonymousTbAccount"] = request.useAnonymousTbAccount;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["BuyOrderRequestModel"] = request.buyOrderRequestModel;
  query["AccountType"] = request.accountType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RenderH5Order',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renderH5Order(request: RenderH5OrderRequest): RenderH5OrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return renderH5OrderWithOptions(request, runtime);
}

model QueryInventoryOfItemsInBizItemGroupRequest {
  bizId?: string(name='BizId'),
  divisionCode?: string(name='DivisionCode'),
  itemIds?: map[string]any(name='ItemIds'),
  lmItemIds?: map[string]any(name='LmItemIds'),
  subBizId?: string(name='SubBizId'),
}

model QueryInventoryOfItemsInBizItemGroupShrinkRequest {
  bizId?: string(name='BizId'),
  divisionCode?: string(name='DivisionCode'),
  itemIdsShrink?: string(name='ItemIds'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  subBizId?: string(name='SubBizId'),
}

model QueryInventoryOfItemsInBizItemGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  itemList?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      quantity?: int32(name='Quantity'),
      skuList?: [ 
        {
          skuId?: long(name='SkuId'),
          quantity?: int32(name='Quantity'),
        }
      ](name='SkuList'),
    }
  ](name='ItemList'),
}

model QueryInventoryOfItemsInBizItemGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInventoryOfItemsInBizItemGroupResponseBody(name='body'),
}

async function queryInventoryOfItemsInBizItemGroupWithOptions(tmpReq: QueryInventoryOfItemsInBizItemGroupRequest, runtime: Util.RuntimeOptions): QueryInventoryOfItemsInBizItemGroupResponse {
  Util.validateModel(tmpReq);
  var request = new QueryInventoryOfItemsInBizItemGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInventoryOfItemsInBizItemGroup',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInventoryOfItemsInBizItemGroup(request: QueryInventoryOfItemsInBizItemGroupRequest): QueryInventoryOfItemsInBizItemGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInventoryOfItemsInBizItemGroupWithOptions(request, runtime);
}

model QueryBizItemsRequest {
  bizId?: string(name='BizId'),
  subBizId?: string(name='SubBizId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  userId?: string(name='UserId'),
}

model QueryBizItemsResponseBody = {
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
}

model QueryBizItemsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBizItemsResponseBody(name='body'),
}

async function queryBizItemsWithOptions(request: QueryBizItemsRequest, runtime: Util.RuntimeOptions): QueryBizItemsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["SubBizId"] = request.subBizId;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["UserId"] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryBizItems',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBizItems(request: QueryBizItemsRequest): QueryBizItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBizItemsWithOptions(request, runtime);
}

model QueryAdvertisementSettleInfoRequest {
  mediaSettleDetailId?: string(name='MediaSettleDetailId'),
  channelId?: string(name='ChannelId'),
  settleNo?: string(name='SettleNo'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  extInfo?: string(name='ExtInfo'),
}

model QueryAdvertisementSettleInfoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    pageSize?: int32(name='PageSize'),
    pageNumber?: int32(name='PageNumber'),
    totalCount?: int32(name='TotalCount'),
    advertiseSettleInfoList?: [ 
      {
        advertiseSettleDetailId?: string(name='AdvertiseSettleDetailId'),
        createDate?: string(name='CreateDate'),
        mediaSettleDetailId?: string(name='MediaSettleDetailId'),
        extInfo?: string(name='ExtInfo'),
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        settleNo?: string(name='SettleNo'),
        advertiseSettleAmount?: string(name='AdvertiseSettleAmount'),
        settleStatus?: string(name='SettleStatus'),
        advertiseName?: string(name='AdvertiseName'),
        channelId?: string(name='ChannelId'),
        modifiedDate?: string(name='ModifiedDate'),
      }
    ](name='AdvertiseSettleInfoList'),
  }(name='Model'),
}

model QueryAdvertisementSettleInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAdvertisementSettleInfoResponseBody(name='body'),
}

async function queryAdvertisementSettleInfoWithOptions(request: QueryAdvertisementSettleInfoRequest, runtime: Util.RuntimeOptions): QueryAdvertisementSettleInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["MediaSettleDetailId"] = request.mediaSettleDetailId;
  query["ChannelId"] = request.channelId;
  query["SettleNo"] = request.settleNo;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["ExtInfo"] = request.extInfo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAdvertisementSettleInfo',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAdvertisementSettleInfo(request: QueryAdvertisementSettleInfoRequest): QueryAdvertisementSettleInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAdvertisementSettleInfoWithOptions(request, runtime);
}

model QueryUnfinishedSessions4ItemsRequest {
  bizId?: string(name='BizId'),
  lmItemIds?: map[string]any(name='LmItemIds'),
  itemIds?: map[string]any(name='ItemIds'),
  queryTime?: long(name='QueryTime'),
}

model QueryUnfinishedSessions4ItemsShrinkRequest {
  bizId?: string(name='BizId'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  itemIdsShrink?: string(name='ItemIds'),
  queryTime?: long(name='QueryTime'),
}

model QueryUnfinishedSessions4ItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  lmItemActivitySessionModelListList?: {
    lmItemActivitySessionModelList?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      lmActivitySessionModels?: {
        lmActivitySessionModel?: [ 
        {
          subBizCode?: string(name='SubBizCode'),
          endDate?: string(name='EndDate'),
          displayDate?: string(name='DisplayDate'),
          lmSessionId?: long(name='LmSessionId'),
          description?: string(name='Description'),
          startDate?: string(name='StartDate'),
          lmActivityId?: long(name='LmActivityId'),
          bizId?: string(name='BizId'),
          name?: string(name='Name'),
          extInfo?: map[string]any(name='ExtInfo'),
        }
      ](name='LmActivitySessionModel')
      }(name='LmActivitySessionModels'),
    }
  ](name='LmItemActivitySessionModelList')
  }(name='LmItemActivitySessionModelListList'),
}

model QueryUnfinishedSessions4ItemsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnfinishedSessions4ItemsResponseBody(name='body'),
}

async function queryUnfinishedSessions4ItemsWithOptions(tmpReq: QueryUnfinishedSessions4ItemsRequest, runtime: Util.RuntimeOptions): QueryUnfinishedSessions4ItemsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryUnfinishedSessions4ItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  var query = {};
  query["BizId"] = request.bizId;
  query["LmItemIds"] = request.lmItemIdsShrink;
  query["ItemIds"] = request.itemIdsShrink;
  query["QueryTime"] = request.queryTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryUnfinishedSessions4Items',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUnfinishedSessions4Items(request: QueryUnfinishedSessions4ItemsRequest): QueryUnfinishedSessions4ItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnfinishedSessions4ItemsWithOptions(request, runtime);
}

model UnsignWithholdAgreementRequest {
  outRequestNo?: string(name='OutRequestNo'),
  externalAgreementNo?: string(name='ExternalAgreementNo'),
  merchantId?: string(name='MerchantId'),
  agreementNo?: string(name='AgreementNo'),
}

model UnsignWithholdAgreementResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  withholdSignResponse?: {
    outRequestNo?: string(name='OutRequestNo'),
  }(name='WithholdSignResponse'),
}

model UnsignWithholdAgreementResponse = {
  headers: map[string]string(name='headers'),
  body: UnsignWithholdAgreementResponseBody(name='body'),
}

async function unsignWithholdAgreementWithOptions(request: UnsignWithholdAgreementRequest, runtime: Util.RuntimeOptions): UnsignWithholdAgreementResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnsignWithholdAgreement',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unsignWithholdAgreement(request: UnsignWithholdAgreementRequest): UnsignWithholdAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  return unsignWithholdAgreementWithOptions(request, runtime);
}

model QueryItemInSubBizsRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
  subBizIds?: map[string]any(name='SubBizIds'),
}

model QueryItemInSubBizsShrinkRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
  subBizIdsShrink?: string(name='SubBizIds'),
}

model QueryItemInSubBizsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  itemBizList?: [ 
    {
      itemTitle?: string(name='ItemTitle'),
      propertiesJson?: string(name='PropertiesJson'),
      lmItemId?: string(name='LmItemId'),
      sellerId?: long(name='SellerId'),
      tbShopName?: string(name='TbShopName'),
      canSell?: boolean(name='CanSell'),
      itemId?: long(name='ItemId'),
      descOption?: string(name='DescOption'),
      mainPicUrl?: string(name='MainPicUrl'),
      categoryId?: long(name='CategoryId'),
      subBizId?: string(name='SubBizId'),
      reservePrice?: long(name='ReservePrice'),
      quantity?: long(name='Quantity'),
      skuList?: [ 
        {
          priceCent?: long(name='PriceCent'),
          pointPrice?: long(name='PointPrice'),
          canSell?: boolean(name='CanSell'),
          skuTitle?: string(name='SkuTitle'),
          skuPropertiesJson?: string(name='SkuPropertiesJson'),
          skuProperties?: string(name='SkuProperties'),
          skuId?: long(name='SkuId'),
          skuPicUrl?: string(name='SkuPicUrl'),
          points?: long(name='Points'),
          pointsAmount?: long(name='PointsAmount'),
          reservePrice?: long(name='ReservePrice'),
          benefitId?: string(name='BenefitId'),
          customizedAttributeMap?: map[string]any(name='CustomizedAttributeMap'),
        }
      ](name='SkuList'),
      itemImages?: [ string ](name='ItemImages'),
    }
  ](name='ItemBizList'),
}

model QueryItemInSubBizsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryItemInSubBizsResponseBody(name='body'),
}

async function queryItemInSubBizsWithOptions(tmpReq: QueryItemInSubBizsRequest, runtime: Util.RuntimeOptions): QueryItemInSubBizsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryItemInSubBizsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subBizIds)) {
    request.subBizIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subBizIds, 'SubBizIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemInSubBizs',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemInSubBizs(request: QueryItemInSubBizsRequest): QueryItemInSubBizsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemInSubBizsWithOptions(request, runtime);
}

model ExecuteNodeRequest {
  processInstanceId?: string(name='ProcessInstanceId'),
  processId?: string(name='ProcessId'),
  nodeInstanceId?: string(name='NodeInstanceId'),
  nodeId?: string(name='NodeId'),
  requestData?: string(name='RequestData'),
}

model ExecuteNodeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  totalCount?: long(name='TotalCount'),
  logsId?: string(name='LogsId'),
  model?: {
    responseData?: map[string]any(name='ResponseData'),
    processInstanceId?: string(name='ProcessInstanceId'),
  }(name='Model'),
}

model ExecuteNodeResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteNodeResponseBody(name='body'),
}

async function executeNodeWithOptions(request: ExecuteNodeRequest, runtime: Util.RuntimeOptions): ExecuteNodeResponse {
  Util.validateModel(request);
  var query = {};
  query["ProcessInstanceId"] = request.processInstanceId;
  query["ProcessId"] = request.processId;
  query["NodeInstanceId"] = request.nodeInstanceId;
  query["NodeId"] = request.nodeId;
  query["RequestData"] = request.requestData;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteNode',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeNode(request: ExecuteNodeRequest): ExecuteNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeNodeWithOptions(request, runtime);
}

model AddItemToSubBizsRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
  subBizIds?: map[string]any(name='SubBizIds'),
}

model AddItemToSubBizsShrinkRequest {
  bizId?: string(name='BizId'),
  itemId?: long(name='ItemId'),
  lmItemId?: string(name='LmItemId'),
  subBizIdsShrink?: string(name='SubBizIds'),
}

model AddItemToSubBizsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddItemToSubBizsResponse = {
  headers: map[string]string(name='headers'),
  body: AddItemToSubBizsResponseBody(name='body'),
}

async function addItemToSubBizsWithOptions(tmpReq: AddItemToSubBizsRequest, runtime: Util.RuntimeOptions): AddItemToSubBizsResponse {
  Util.validateModel(tmpReq);
  var request = new AddItemToSubBizsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subBizIds)) {
    request.subBizIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subBizIds, 'SubBizIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddItemToSubBizs',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addItemToSubBizs(request: AddItemToSubBizsRequest): AddItemToSubBizsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addItemToSubBizsWithOptions(request, runtime);
}

model StartUserGameRequest {
  bizId?: string(name='BizId', description='业务ID'),
  thirdPartyUserId?: string(name='ThirdPartyUserId', description='业务方用户ID'),
  accountType?: string(name='AccountType'),
  gameId?: string(name='GameId', description='玩法ID'),
  activityId?: string(name='ActivityId', description='活动ID'),
  routeId?: string(name='RouteId', description='路线ID'),
  userApp?: string(name='UserApp', description='用户APP'),
}

model StartUserGameResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    processId?: string(name='ProcessId', description='进度ID'),
    gameId?: string(name='GameId'),
    activityId?: string(name='ActivityId'),
    name?: string(name='Name'),
    type?: string(name='Type'),
    desc?: string(name='Desc'),
    bizId?: string(name='BizId'),
    content?: string(name='Content', description='进度内容'),
    status?: string(name='Status', description='状态'),
    currentStepStatus?: string(name='CurrentStepStatus', description='当前步骤状态'),
    currentStepId?: string(name='CurrentStepId', description='当前步骤ID'),
    gameCoinRecords?: string(name='GameCoinRecords', description='玩法币记录'),
    gameAwardRecords?: string(name='GameAwardRecords', description='奖励记录'),
    extInfo?: string(name='ExtInfo', description='扩展信息'),
    routeId?: string(name='RouteId', description='路线ID'),
  }(name='Model'),
}

model StartUserGameResponse = {
  headers: map[string]string(name='headers'),
  body: StartUserGameResponseBody(name='body'),
}

async function startUserGameWithOptions(request: StartUserGameRequest, runtime: Util.RuntimeOptions): StartUserGameResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ThirdPartyUserId"] = request.thirdPartyUserId;
  query["AccountType"] = request.accountType;
  query["GameId"] = request.gameId;
  query["ActivityId"] = request.activityId;
  query["RouteId"] = request.routeId;
  query["UserApp"] = request.userApp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'StartUserGame',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startUserGame(request: StartUserGameRequest): StartUserGameResponse {
  var runtime = new Util.RuntimeOptions{};
  return startUserGameWithOptions(request, runtime);
}

model AddSupplierNewItemsRequest {
  bizId?: string(name='BizId'),
  itemList?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuList?: [ integer ](name='SkuList'),
    }
  ](name='ItemList'),
}

model AddSupplierNewItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddSupplierNewItemsResponse = {
  headers: map[string]string(name='headers'),
  body: AddSupplierNewItemsResponseBody(name='body'),
}

async function addSupplierNewItemsWithOptions(request: AddSupplierNewItemsRequest, runtime: Util.RuntimeOptions): AddSupplierNewItemsResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["ItemList"] = request.itemList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddSupplierNewItems',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSupplierNewItems(request: AddSupplierNewItemsRequest): AddSupplierNewItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSupplierNewItemsWithOptions(request, runtime);
}

model GetCategoryListRequest {
  bizId?: string(name='BizId'),
  categoryId?: long(name='CategoryId'),
}

model GetCategoryListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  categoryList?: {
    category?: [ 
    {
      name?: string(name='Name'),
      categoryId?: long(name='CategoryId'),
    }
  ](name='Category')
  }(name='CategoryList'),
}

model GetCategoryListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCategoryListResponseBody(name='body'),
}

async function getCategoryListWithOptions(request: GetCategoryListRequest, runtime: Util.RuntimeOptions): GetCategoryListResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["CategoryId"] = request.categoryId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetCategoryList',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCategoryList(request: GetCategoryListRequest): GetCategoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCategoryListWithOptions(request, runtime);
}

model QueryItemInventoryRequest {
  bizId?: string(name='BizId'),
  divisionCode?: string(name='DivisionCode'),
  ip?: string(name='Ip'),
  itemList?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuIdList?: [ integer ](name='SkuIdList'),
    }
  ](name='ItemList'),
}

model QueryItemInventoryResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  subMessage?: string(name='SubMessage'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  subCode?: string(name='SubCode'),
  itemList?: {
    item?: [ 
    {
      lmItemId?: string(name='LmItemId'),
      itemId?: long(name='ItemId'),
      skuList?: {
        sku?: [ 
        {
          skuId?: long(name='SkuId'),
          inventory?: {
            quantity?: long(name='Quantity'),
          }(name='Inventory'),
        }
      ](name='Sku')
      }(name='SkuList'),
    }
  ](name='Item')
  }(name='ItemList'),
}

model QueryItemInventoryResponse = {
  headers: map[string]string(name='headers'),
  body: QueryItemInventoryResponseBody(name='body'),
}

async function queryItemInventoryWithOptions(request: QueryItemInventoryRequest, runtime: Util.RuntimeOptions): QueryItemInventoryResponse {
  Util.validateModel(request);
  var query = {};
  query["BizId"] = request.bizId;
  query["DivisionCode"] = request.divisionCode;
  query["Ip"] = request.ip;
  query["ItemList"] = request.itemList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemInventory',
    version = '2018-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemInventory(request: QueryItemInventoryRequest): QueryItemInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemInventoryWithOptions(request, runtime);
}

