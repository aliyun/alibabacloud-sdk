/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cr';
  @version = '2018-12-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelArtifactBuildTaskRequest {
  buildTaskId: string(name='BuildTaskId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model CancelArtifactBuildTaskResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CancelArtifactBuildTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelArtifactBuildTaskResponseBody(name='body'),
}

async function cancelArtifactBuildTask(request: CancelArtifactBuildTaskRequest): CancelArtifactBuildTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelArtifactBuildTask', 'POST', '/', 'json', false, 'json', request);
}

model CancelRepoBuildRecordRequest {
  buildRecordId: string(name='BuildRecordId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model CancelRepoBuildRecordResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CancelRepoBuildRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRepoBuildRecordResponseBody(name='body'),
}

async function cancelRepoBuildRecord(request: CancelRepoBuildRecordRequest): CancelRepoBuildRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelRepoBuildRecord', 'POST', '/', 'json', false, 'json', request);
}

model CreateBuildRecordByRuleRequest {
  buildRuleId: string(name='BuildRuleId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model CreateBuildRecordByRuleResponseBody = {
  buildRecordId?: string(name='BuildRecordId'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateBuildRecordByRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBuildRecordByRuleResponseBody(name='body'),
}

async function createBuildRecordByRule(request: CreateBuildRecordByRuleRequest): CreateBuildRecordByRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBuildRecordByRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateChainRequest {
  chainConfig?: string(name='ChainConfig', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
}

model CreateChainResponseBody = {
  chainId?: string(name='ChainId'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateChainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChainResponseBody(name='body'),
}

async function createChain(request: CreateChainRequest): CreateChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChain', 'POST', '/', 'json', false, 'json', request);
}

model CreateChartNamespaceRequest {
  autoCreateRepo?: boolean(name='AutoCreateRepo', position='Query'),
  defaultRepoType?: string(name='DefaultRepoType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model CreateChartNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateChartNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChartNamespaceResponseBody(name='body'),
}

async function createChartNamespace(request: CreateChartNamespaceRequest): CreateChartNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChartNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateChartRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
  repoType?: string(name='RepoType', position='Query'),
  summary?: string(name='Summary', position='Query'),
}

model CreateChartRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  repoId?: string(name='RepoId'),
  requestId?: string(name='RequestId'),
}

model CreateChartRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChartRepositoryResponseBody(name='body'),
}

async function createChartRepository(request: CreateChartRepositoryRequest): CreateChartRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChartRepository', 'POST', '/', 'json', false, 'json', request);
}

model CreateEnterpriseInstanceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', position='Query'),
  defaultBucket: string(name='DefaultBucket', position='Query'),
  instanceName: string(name='InstanceName', position='Query'),
  instanceStorageName?: string(name='InstanceStorageName', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  period: int32(name='Period', position='Query'),
  periodUnit: string(name='PeriodUnit', position='Query'),
  region: string(name='Region', position='Query'),
}

model CreateEnterpriseInstanceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateEnterpriseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnterpriseInstanceResponseBody(name='body'),
}

async function createEnterpriseInstance(request: CreateEnterpriseInstanceRequest): CreateEnterpriseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnterpriseInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceEndpointAclPolicyRequest {
  comment?: string(name='Comment', position='Query'),
  endpointType: string(name='EndpointType', position='Query'),
  entry: string(name='Entry', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model CreateInstanceEndpointAclPolicyResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceEndpointAclPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceEndpointAclPolicyResponseBody(name='body'),
}

async function createInstanceEndpointAclPolicy(request: CreateInstanceEndpointAclPolicyRequest): CreateInstanceEndpointAclPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstanceEndpointAclPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceVpcEndpointLinkedVpcRequest {
  enableCreateDNSRecordInPvzt?: boolean(name='EnableCreateDNSRecordInPvzt', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  vpcId: string(name='VpcId', position='Query'),
  vswitchId: string(name='VswitchId', position='Query'),
}

model CreateInstanceVpcEndpointLinkedVpcResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceVpcEndpointLinkedVpcResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceVpcEndpointLinkedVpcResponseBody(name='body'),
}

async function createInstanceVpcEndpointLinkedVpc(request: CreateInstanceVpcEndpointLinkedVpcRequest): CreateInstanceVpcEndpointLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstanceVpcEndpointLinkedVpc', 'POST', '/', 'json', false, 'json', request);
}

model CreateNamespaceRequest {
  autoCreateRepo?: boolean(name='AutoCreateRepo', position='Query'),
  defaultRepoType?: string(name='DefaultRepoType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model CreateNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoBuildRuleRequest {
  dockerfileLocation?: string(name='DockerfileLocation', position='Query'),
  dockerfileName?: string(name='DockerfileName', position='Query'),
  imageTag: string(name='ImageTag', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pushName: string(name='PushName', position='Query'),
  pushType: string(name='PushType', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model CreateRepoBuildRuleResponseBody = {
  buildRuleId?: string(name='BuildRuleId'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoBuildRuleResponseBody(name='body'),
}

async function createRepoBuildRule(request: CreateRepoBuildRuleRequest): CreateRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoBuildRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoSourceCodeRepoRequest {
  autoBuild?: boolean(name='AutoBuild', position='Query'),
  codeRepoName: string(name='CodeRepoName', position='Query'),
  codeRepoNamespaceName: string(name='CodeRepoNamespaceName', position='Query'),
  codeRepoType: string(name='CodeRepoType', position='Query'),
  disableCacheBuild?: boolean(name='DisableCacheBuild', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  overseaBuild?: boolean(name='OverseaBuild', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model CreateRepoSourceCodeRepoResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateRepoSourceCodeRepoResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoSourceCodeRepoResponseBody(name='body'),
}

async function createRepoSourceCodeRepo(request: CreateRepoSourceCodeRepoRequest): CreateRepoSourceCodeRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoSourceCodeRepo', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoSyncRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  syncRuleName: string(name='SyncRuleName', position='Query'),
  syncScope: string(name='SyncScope', position='Query'),
  syncTrigger?: string(name='SyncTrigger', position='Query'),
  tagFilter: string(name='TagFilter', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', position='Query'),
  targetNamespaceName: string(name='TargetNamespaceName', position='Query'),
  targetRegionId: string(name='TargetRegionId', position='Query'),
  targetRepoName?: string(name='TargetRepoName', position='Query'),
  targetUserId?: string(name='TargetUserId', position='Query'),
}

model CreateRepoSyncRuleResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  syncRuleId?: string(name='SyncRuleId'),
}

model CreateRepoSyncRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoSyncRuleResponseBody(name='body'),
}

async function createRepoSyncRule(request: CreateRepoSyncRuleRequest): CreateRepoSyncRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoSyncRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoSyncTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  override?: boolean(name='Override', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  tag: string(name='Tag', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', position='Query'),
  targetNamespace: string(name='TargetNamespace', position='Query'),
  targetRegionId: string(name='TargetRegionId', position='Query'),
  targetRepoName: string(name='TargetRepoName', position='Query'),
  targetTag: string(name='TargetTag', position='Query'),
  targetUserId?: string(name='TargetUserId', position='Query'),
}

model CreateRepoSyncTaskResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  syncTaskId?: string(name='SyncTaskId'),
}

model CreateRepoSyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoSyncTaskResponseBody(name='body'),
}

async function createRepoSyncTask(request: CreateRepoSyncTaskRequest): CreateRepoSyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoSyncTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoSyncTaskByRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  syncRuleId: string(name='SyncRuleId', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model CreateRepoSyncTaskByRuleResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  syncTaskId?: string(name='SyncTaskId'),
}

model CreateRepoSyncTaskByRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoSyncTaskByRuleResponseBody(name='body'),
}

async function createRepoSyncTaskByRule(request: CreateRepoSyncTaskByRuleRequest): CreateRepoSyncTaskByRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoSyncTaskByRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoSyncTaskByTaskIdRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  syncTaskId: string(name='SyncTaskId', position='Query'),
}

model CreateRepoSyncTaskByTaskIdResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  syncTaskId?: string(name='SyncTaskId'),
}

model CreateRepoSyncTaskByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoSyncTaskByTaskIdResponseBody(name='body'),
}

async function createRepoSyncTaskByTaskId(request: CreateRepoSyncTaskByTaskIdRequest): CreateRepoSyncTaskByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoSyncTaskByTaskId', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoTagRequest {
  fromTag: string(name='FromTag', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  toTag: string(name='ToTag', position='Query'),
}

model CreateRepoTagResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateRepoTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoTagResponseBody(name='body'),
}

async function createRepoTag(request: CreateRepoTagRequest): CreateRepoTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoTag', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoTagScanTaskRequest {
  digest?: string(name='Digest', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  scanService?: string(name='ScanService', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model CreateRepoTagScanTaskResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model CreateRepoTagScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoTagScanTaskResponseBody(name='body'),
}

async function createRepoTagScanTask(request: CreateRepoTagScanTaskRequest): CreateRepoTagScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoTagScanTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepoTriggerRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  triggerName: string(name='TriggerName', position='Query'),
  triggerTag?: string(name='TriggerTag', position='Query'),
  triggerType: string(name='TriggerType', position='Query'),
  triggerUrl: string(name='TriggerUrl', position='Query'),
}

model CreateRepoTriggerResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  triggerId?: string(name='TriggerId'),
}

model CreateRepoTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoTriggerResponseBody(name='body'),
}

async function createRepoTrigger(request: CreateRepoTriggerRequest): CreateRepoTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepoTrigger', 'POST', '/', 'json', false, 'json', request);
}

model CreateRepositoryRequest {
  detail?: string(name='Detail', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
  repoType: string(name='RepoType', position='Query'),
  summary: string(name='Summary', position='Query'),
  tagImmutability?: boolean(name='TagImmutability', position='Query'),
}

model CreateRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  repoId?: string(name='RepoId'),
  requestId?: string(name='RequestId'),
}

model CreateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepositoryResponseBody(name='body'),
}

async function createRepository(request: CreateRepositoryRequest): CreateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRepository', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChainRequest {
  chainId: string(name='ChainId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteChainResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteChainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChainResponseBody(name='body'),
}

async function deleteChain(request: DeleteChainRequest): DeleteChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChartNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteChartNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteChartNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChartNamespaceResponseBody(name='body'),
}

async function deleteChartNamespace(request: DeleteChartNamespaceRequest): DeleteChartNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChartNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChartReleaseRequest {
  chart: string(name='Chart', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  release: string(name='Release', position='Query'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
}

model DeleteChartReleaseResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteChartReleaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChartReleaseResponseBody(name='body'),
}

async function deleteChartRelease(request: DeleteChartReleaseRequest): DeleteChartReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChartRelease', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChartRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
}

model DeleteChartRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteChartRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChartRepositoryResponseBody(name='body'),
}

async function deleteChartRepository(request: DeleteChartRepositoryRequest): DeleteChartRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChartRepository', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventCenterRuleRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  ruleId?: string(name='RuleId', position='Query'),
}

model DeleteEventCenterRuleResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteEventCenterRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventCenterRuleResponseBody(name='body'),
}

async function deleteEventCenterRule(request: DeleteEventCenterRuleRequest): DeleteEventCenterRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventCenterRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceEndpointAclPolicyRequest {
  endpointType: string(name='EndpointType', position='Query'),
  entry: string(name='Entry', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteInstanceEndpointAclPolicyResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteInstanceEndpointAclPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceEndpointAclPolicyResponseBody(name='body'),
}

async function deleteInstanceEndpointAclPolicy(request: DeleteInstanceEndpointAclPolicyRequest): DeleteInstanceEndpointAclPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstanceEndpointAclPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceVpcEndpointLinkedVpcRequest {
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  vpcId: string(name='VpcId', position='Query'),
  vswitchId: string(name='VswitchId', position='Query'),
}

model DeleteInstanceVpcEndpointLinkedVpcResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteInstanceVpcEndpointLinkedVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceVpcEndpointLinkedVpcResponseBody(name='body'),
}

async function deleteInstanceVpcEndpointLinkedVpc(request: DeleteInstanceVpcEndpointLinkedVpcRequest): DeleteInstanceVpcEndpointLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstanceVpcEndpointLinkedVpc', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRepoBuildRuleRequest {
  buildRuleId: string(name='BuildRuleId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model DeleteRepoBuildRuleResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepoBuildRuleResponseBody(name='body'),
}

async function deleteRepoBuildRule(request: DeleteRepoBuildRuleRequest): DeleteRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRepoBuildRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRepoSourceCodeRepoRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model DeleteRepoSourceCodeRepoResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteRepoSourceCodeRepoResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepoSourceCodeRepoResponseBody(name='body'),
}

async function deleteRepoSourceCodeRepo(request: DeleteRepoSourceCodeRepoRequest): DeleteRepoSourceCodeRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRepoSourceCodeRepo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRepoSyncRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  syncRuleId: string(name='SyncRuleId', position='Query'),
}

model DeleteRepoSyncRuleResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteRepoSyncRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepoSyncRuleResponseBody(name='body'),
}

async function deleteRepoSyncRule(request: DeleteRepoSyncRuleRequest): DeleteRepoSyncRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRepoSyncRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRepoTagRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model DeleteRepoTagResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteRepoTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepoTagResponseBody(name='body'),
}

async function deleteRepoTag(request: DeleteRepoTagRequest): DeleteRepoTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRepoTag', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRepoTriggerRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  triggerId: string(name='TriggerId', position='Query'),
}

model DeleteRepoTriggerResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteRepoTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepoTriggerResponseBody(name='body'),
}

async function deleteRepoTrigger(request: DeleteRepoTriggerRequest): DeleteRepoTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRepoTrigger', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model DeleteRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model DeleteRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryResponseBody(name='body'),
}

async function deleteRepository(request: DeleteRepositoryRequest): DeleteRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRepository', 'POST', '/', 'json', false, 'json', request);
}

model GetArtifactBuildTaskRequest {
  buildTaskId: string(name='BuildTaskId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetArtifactBuildTaskResponseBody = {
  artifactBuildType?: string(name='ArtifactBuildType'),
  buildTaskId?: string(name='BuildTaskId'),
  code?: string(name='Code'),
  endTime?: int32(name='EndTime'),
  instructions?: [ string ](name='Instructions'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  sourceArtifact?: {
    artifactType?: string(name='ArtifactType'),
    repoId?: string(name='RepoId'),
    version?: string(name='Version'),
  }(name='SourceArtifact'),
  startTime?: int32(name='StartTime'),
  targetArtifact?: {
    artifactType?: string(name='ArtifactType'),
    repoId?: string(name='RepoId'),
    version?: string(name='Version'),
  }(name='TargetArtifact'),
  taskStatus?: string(name='TaskStatus'),
}

model GetArtifactBuildTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetArtifactBuildTaskResponseBody(name='body'),
}

async function getArtifactBuildTask(request: GetArtifactBuildTaskRequest): GetArtifactBuildTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetArtifactBuildTask', 'GET', '/', 'json', false, 'json', request);
}

model GetAuthorizationTokenRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetAuthorizationTokenResponseBody = {
  authorizationToken?: string(name='AuthorizationToken'),
  code?: string(name='Code'),
  expireTime?: long(name='ExpireTime'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  tempUsername?: string(name='TempUsername'),
}

model GetAuthorizationTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorizationTokenResponseBody(name='body'),
}

async function getAuthorizationToken(request: GetAuthorizationTokenRequest): GetAuthorizationTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorizationToken', 'POST', '/', 'json', false, 'json', request);
}

model GetChainRequest {
  chainId: string(name='ChainId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetChainResponseBody = {
  chainConfig?: {
    chainConfigId?: string(name='ChainConfigId'),
    isActive?: boolean(name='IsActive'),
    nodes?: [ 
      {
        enable?: boolean(name='Enable'),
        nodeConfig?: {
          denyPolicy?: {
            action?: string(name='Action'),
            issueCount?: string(name='IssueCount'),
            issueLevel?: string(name='IssueLevel'),
            logic?: string(name='Logic'),
          }(name='DenyPolicy'),
          retry?: int32(name='Retry'),
          scanEngine?: string(name='ScanEngine'),
          timeout?: long(name='Timeout'),
        }(name='NodeConfig'),
        nodeName?: string(name='NodeName'),
      }
    ](name='Nodes'),
    routers?: [ 
      {
        from?: {
          nodeName?: string(name='NodeName'),
        }(name='From'),
        to?: {
          nodeName?: string(name='NodeName'),
        }(name='To'),
      }
    ](name='Routers'),
    version?: string(name='Version'),
  }(name='ChainConfig'),
  chainId?: string(name='ChainId'),
  code?: string(name='Code'),
  createTime?: long(name='CreateTime'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  isSuccess?: boolean(name='IsSuccess'),
  modifiedTime?: long(name='ModifiedTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  scopeId?: string(name='ScopeId'),
  scopeType?: string(name='ScopeType'),
}

model GetChainResponse = {
  headers: map[string]string(name='headers'),
  body: GetChainResponseBody(name='body'),
}

async function getChain(request: GetChainRequest): GetChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChain', 'POST', '/', 'json', false, 'json', request);
}

model GetChartNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetChartNamespaceResponseBody = {
  autoCreateRepo?: boolean(name='AutoCreateRepo'),
  code?: string(name='Code'),
  defaultRepoType?: string(name='DefaultRepoType'),
  instanceId?: string(name='InstanceId'),
  isSuccess?: boolean(name='IsSuccess'),
  namespaceId?: string(name='NamespaceId'),
  namespaceName?: string(name='NamespaceName'),
  namespaceStatus?: string(name='NamespaceStatus'),
  requestId?: string(name='RequestId'),
}

model GetChartNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetChartNamespaceResponseBody(name='body'),
}

async function getChartNamespace(request: GetChartNamespaceRequest): GetChartNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChartNamespace', 'POST', '/', 'json', false, 'json', request);
}

model GetChartReleaseContentRequest {
  chart: string(name='Chart', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  release: string(name='Release', position='Query'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
}

model GetChartReleaseContentResponseBody = {
  code?: string(name='Code'),
  content?: string(name='Content'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model GetChartReleaseContentResponse = {
  headers: map[string]string(name='headers'),
  body: GetChartReleaseContentResponseBody(name='body'),
}

async function getChartReleaseContent(request: GetChartReleaseContentRequest): GetChartReleaseContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChartReleaseContent', 'POST', '/', 'json', false, 'json', request);
}

model GetChartReleaseDownloadUrlRequest {
  chart: string(name='Chart', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  release: string(name='Release', position='Query'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
}

model GetChartReleaseDownloadUrlResponseBody = {
  code?: string(name='Code'),
  downloadUrl?: string(name='DownloadUrl'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model GetChartReleaseDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetChartReleaseDownloadUrlResponseBody(name='body'),
}

async function getChartReleaseDownloadUrl(request: GetChartReleaseDownloadUrlRequest): GetChartReleaseDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChartReleaseDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetChartRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
}

model GetChartRepositoryResponseBody = {
  code?: string(name='Code'),
  createTime?: long(name='CreateTime'),
  instanceId?: string(name='InstanceId'),
  isSuccess?: boolean(name='IsSuccess'),
  modifiedTime?: long(name='ModifiedTime'),
  repoId?: string(name='RepoId'),
  repoName?: string(name='RepoName'),
  repoNamespaceName?: string(name='RepoNamespaceName'),
  repoStatus?: string(name='RepoStatus'),
  repoType?: string(name='RepoType'),
  requestId?: string(name='RequestId'),
  summary?: string(name='Summary'),
}

model GetChartRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetChartRepositoryResponseBody(name='body'),
}

async function getChartRepository(request: GetChartRepositoryRequest): GetChartRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChartRepository', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetInstanceResponseBody = {
  code?: string(name='Code'),
  createTime?: long(name='CreateTime'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  instanceSpecification?: string(name='InstanceSpecification'),
  instanceStatus?: string(name='InstanceStatus'),
  isSuccess?: boolean(name='IsSuccess'),
  modifiedTime?: long(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceCountRequest {
  regionId: string(name='RegionId', position='Host'),
}

model GetInstanceCountResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model GetInstanceCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceCountResponseBody(name='body'),
}

async function getInstanceCount(request: GetInstanceCountRequest): GetInstanceCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceCount', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceEndpointRequest {
  endpointType: string(name='EndpointType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetInstanceEndpointResponseBody = {
  aclEnable?: boolean(name='AclEnable'),
  aclEntries?: [ 
    {
      comment?: string(name='Comment'),
      entry?: string(name='Entry'),
    }
  ](name='AclEntries'),
  code?: string(name='Code'),
  domains?: [ 
    {
      domain?: string(name='Domain'),
      type?: string(name='Type'),
    }
  ](name='Domains'),
  enable?: boolean(name='Enable'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetInstanceEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceEndpointResponseBody(name='body'),
}

async function getInstanceEndpoint(request: GetInstanceEndpointRequest): GetInstanceEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceUsageRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetInstanceUsageResponseBody = {
  chartNamespaceQuota?: string(name='ChartNamespaceQuota'),
  chartNamespaceUsage?: string(name='ChartNamespaceUsage'),
  chartRepoQuota?: string(name='ChartRepoQuota'),
  chartRepoUsage?: string(name='ChartRepoUsage'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  namespaceQuota?: string(name='NamespaceQuota'),
  namespaceUsage?: string(name='NamespaceUsage'),
  repoQuota?: string(name='RepoQuota'),
  repoUsage?: string(name='RepoUsage'),
  requestId?: string(name='RequestId'),
}

model GetInstanceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceUsageResponseBody(name='body'),
}

async function getInstanceUsage(request: GetInstanceUsageRequest): GetInstanceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceUsage', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceVpcEndpointRequest {
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetInstanceVpcEndpointResponseBody = {
  code?: string(name='Code'),
  domains?: [ string ](name='Domains'),
  enable?: boolean(name='Enable'),
  isSuccess?: boolean(name='IsSuccess'),
  linkedVpcs?: [ 
    {
      defaultAccess?: boolean(name='DefaultAccess'),
      ip?: string(name='Ip'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
    }
  ](name='LinkedVpcs'),
  requestId?: string(name='RequestId'),
}

model GetInstanceVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceVpcEndpointResponseBody(name='body'),
}

async function getInstanceVpcEndpoint(request: GetInstanceVpcEndpointRequest): GetInstanceVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model GetNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceId?: string(name='NamespaceId', position='Query'),
  namespaceName?: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetNamespaceResponseBody = {
  autoCreateRepo?: boolean(name='AutoCreateRepo'),
  code?: string(name='Code'),
  defaultRepoType?: string(name='DefaultRepoType'),
  instanceId?: string(name='InstanceId'),
  isSuccess?: boolean(name='IsSuccess'),
  namespaceId?: string(name='NamespaceId'),
  namespaceName?: string(name='NamespaceName'),
  namespaceStatus?: string(name='NamespaceStatus'),
  requestId?: string(name='RequestId'),
}

model GetNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetNamespaceResponseBody(name='body'),
}

async function getNamespace(request: GetNamespaceRequest): GetNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNamespace', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoBuildRecordRequest {
  buildRecordId: string(name='BuildRecordId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetRepoBuildRecordResponseBody = {
  buildRecordId?: string(name='BuildRecordId'),
  code?: string(name='Code'),
  endTime?: long(name='EndTime'),
  image?: {
    imageTag?: string(name='ImageTag'),
    repoName?: string(name='RepoName'),
    repoNamespaceName?: string(name='RepoNamespaceName'),
  }(name='Image'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
}

model GetRepoBuildRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoBuildRecordResponseBody(name='body'),
}

async function getRepoBuildRecord(request: GetRepoBuildRecordRequest): GetRepoBuildRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoBuildRecord', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoBuildRecordStatusRequest {
  buildRecordId: string(name='BuildRecordId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model GetRepoBuildRecordStatusResponseBody = {
  buildStatus?: string(name='BuildStatus'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model GetRepoBuildRecordStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoBuildRecordStatusResponseBody(name='body'),
}

async function getRepoBuildRecordStatus(request: GetRepoBuildRecordStatusRequest): GetRepoBuildRecordStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoBuildRecordStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoSourceCodeRepoRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model GetRepoSourceCodeRepoResponseBody = {
  autoBuild?: string(name='AutoBuild'),
  code?: string(name='Code'),
  codeRepoDomain?: string(name='CodeRepoDomain'),
  codeRepoName?: string(name='CodeRepoName'),
  codeRepoNamespaceName?: string(name='CodeRepoNamespaceName'),
  codeRepoType?: string(name='CodeRepoType'),
  disableCacheBuild?: string(name='DisableCacheBuild'),
  isSuccess?: boolean(name='IsSuccess'),
  overseaBuild?: string(name='OverseaBuild'),
  repoId?: string(name='RepoId'),
  requestId?: string(name='RequestId'),
}

model GetRepoSourceCodeRepoResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoSourceCodeRepoResponseBody(name='body'),
}

async function getRepoSourceCodeRepo(request: GetRepoSourceCodeRepoRequest): GetRepoSourceCodeRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoSourceCodeRepo', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoSyncTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  syncTaskId: string(name='SyncTaskId', position='Query'),
}

model GetRepoSyncTaskResponseBody = {
  code?: string(name='Code'),
  crossUser?: boolean(name='CrossUser'),
  imageFrom?: {
    imageTag?: string(name='ImageTag'),
    instanceId?: string(name='InstanceId'),
    regionId?: string(name='RegionId'),
    repoName?: string(name='RepoName'),
    repoNamespaceName?: string(name='RepoNamespaceName'),
  }(name='ImageFrom'),
  imageTo?: {
    imageTag?: string(name='ImageTag'),
    instanceId?: string(name='InstanceId'),
    regionId?: string(name='RegionId'),
    repoName?: string(name='RepoName'),
    repoNamespaceName?: string(name='RepoNamespaceName'),
  }(name='ImageTo'),
  isSuccess?: boolean(name='IsSuccess'),
  layerTasks?: [ 
    {
      artifactDigest?: string(name='ArtifactDigest'),
      digest?: string(name='Digest'),
      size?: long(name='Size'),
      syncLayerTaskId?: string(name='SyncLayerTaskId'),
      syncedSize?: long(name='SyncedSize'),
      taskStatus?: string(name='TaskStatus'),
    }
  ](name='LayerTasks'),
  progress?: long(name='Progress'),
  requestId?: string(name='RequestId'),
  syncBatchTaskId?: string(name='SyncBatchTaskId'),
  syncRuleId?: string(name='SyncRuleId'),
  syncTaskId?: string(name='SyncTaskId'),
  syncTransAccelerate?: boolean(name='SyncTransAccelerate'),
  syncedSize?: long(name='SyncedSize'),
  taskStatus?: string(name='TaskStatus'),
  taskTrigger?: string(name='TaskTrigger'),
}

model GetRepoSyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoSyncTaskResponseBody(name='body'),
}

async function getRepoSyncTask(request: GetRepoSyncTaskRequest): GetRepoSyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoSyncTask', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoTagRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model GetRepoTagResponseBody = {
  code?: string(name='Code'),
  digest?: string(name='Digest'),
  imageCreate?: long(name='ImageCreate'),
  imageId?: string(name='ImageId'),
  imageSize?: long(name='ImageSize'),
  imageUpdate?: long(name='ImageUpdate'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  tag?: string(name='Tag'),
}

model GetRepoTagResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoTagResponseBody(name='body'),
}

async function getRepoTag(request: GetRepoTagRequest): GetRepoTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoTag', 'GET', '/', 'json', false, 'json', request);
}

model GetRepoTagLayersRequest {
  digest?: string(name='Digest', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model GetRepoTagLayersResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  layers?: [ 
    {
      blobDigest?: string(name='BlobDigest'),
      blobSize?: long(name='BlobSize'),
      layerCMD?: string(name='LayerCMD'),
      layerIndex?: int32(name='LayerIndex'),
      layerInstruction?: string(name='LayerInstruction'),
    }
  ](name='Layers'),
  requestId?: string(name='RequestId'),
}

model GetRepoTagLayersResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoTagLayersResponseBody(name='body'),
}

async function getRepoTagLayers(request: GetRepoTagLayersRequest): GetRepoTagLayersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoTagLayers', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoTagManifestRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  schemaVersion?: int32(name='SchemaVersion', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model GetRepoTagManifestResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  manifest?: {
    architecture?: string(name='Architecture'),
    config?: {
      digest?: string(name='Digest'),
      mediaType?: string(name='MediaType'),
      size?: long(name='Size'),
    }(name='Config'),
    fsLayers?: [ 
      {
        blobSum?: string(name='BlobSum'),
      }
    ](name='FsLayers'),
    history?: [ 
      {
        v1Compatibility?: map[string]any(name='V1Compatibility'),
      }
    ](name='History'),
    layers?: [ 
      {
        digest?: string(name='Digest'),
        mediaType?: string(name='MediaType'),
        size?: long(name='Size'),
      }
    ](name='Layers'),
    mediaType?: string(name='MediaType'),
    name?: string(name='Name'),
    schemaVersion?: int32(name='SchemaVersion'),
    signatures?: [ 
      {
        header?: map[string]any(name='Header'),
        protected?: string(name='Protected'),
        signature?: string(name='Signature'),
      }
    ](name='Signatures'),
    tag?: string(name='Tag'),
  }(name='Manifest'),
  requestId?: string(name='RequestId'),
}

model GetRepoTagManifestResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoTagManifestResponseBody(name='body'),
}

async function getRepoTagManifest(request: GetRepoTagManifestRequest): GetRepoTagManifestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoTagManifest', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoTagScanStatusRequest {
  digest?: string(name='Digest', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId?: string(name='RepoId', position='Query'),
  scanTaskId?: string(name='ScanTaskId', position='Query'),
  tag?: string(name='Tag', position='Query'),
}

model GetRepoTagScanStatusResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  scanService?: string(name='ScanService'),
  status?: string(name='Status'),
}

model GetRepoTagScanStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoTagScanStatusResponseBody(name='body'),
}

async function getRepoTagScanStatus(request: GetRepoTagScanStatusRequest): GetRepoTagScanStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoTagScanStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetRepoTagScanSummaryRequest {
  digest?: string(name='Digest', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId?: string(name='RepoId', position='Query'),
  scanTaskId?: string(name='ScanTaskId', position='Query'),
  tag?: string(name='Tag', position='Query'),
}

model GetRepoTagScanSummaryResponseBody = {
  code?: string(name='Code'),
  highSeverity?: int32(name='HighSeverity'),
  isSuccess?: boolean(name='IsSuccess'),
  lowSeverity?: int32(name='LowSeverity'),
  mediumSeverity?: int32(name='MediumSeverity'),
  requestId?: string(name='RequestId'),
  totalSeverity?: int32(name='TotalSeverity'),
  unknownSeverity?: int32(name='UnknownSeverity'),
}

model GetRepoTagScanSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoTagScanSummaryResponseBody(name='body'),
}

async function getRepoTagScanSummary(request: GetRepoTagScanSummaryRequest): GetRepoTagScanSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepoTagScanSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId?: string(name='RepoId', position='Query'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
}

model GetRepositoryResponseBody = {
  code?: string(name='Code'),
  createTime?: long(name='CreateTime'),
  detail?: string(name='Detail'),
  instanceId?: string(name='InstanceId'),
  isSuccess?: boolean(name='IsSuccess'),
  modifiedTime?: long(name='ModifiedTime'),
  repoBuildType?: string(name='RepoBuildType'),
  repoId?: string(name='RepoId'),
  repoName?: string(name='RepoName'),
  repoNamespaceName?: string(name='RepoNamespaceName'),
  repoStatus?: string(name='RepoStatus'),
  repoType?: string(name='RepoType'),
  requestId?: string(name='RequestId'),
  summary?: string(name='Summary'),
  tagImmutability?: boolean(name='TagImmutability'),
}

model GetRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepositoryResponseBody(name='body'),
}

async function getRepository(request: GetRepositoryRequest): GetRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepository', 'POST', '/', 'json', false, 'json', request);
}

model ListArtifactBuildTaskLogRequest {
  buildTaskId: string(name='BuildTaskId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  page: int32(name='Page', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListArtifactBuildTaskLogResponseBody = {
  buildTaskLogs?: [ 
    {
      lineNumber?: int32(name='LineNumber'),
      message?: string(name='Message'),
    }
  ](name='BuildTaskLogs'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListArtifactBuildTaskLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListArtifactBuildTaskLogResponseBody(name='body'),
}

async function listArtifactBuildTaskLog(request: ListArtifactBuildTaskLogRequest): ListArtifactBuildTaskLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListArtifactBuildTaskLog', 'GET', '/', 'json', false, 'json', request);
}

model ListChainRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
}

model ListChainResponseBody = {
  chains?: [ 
    {
      chainId?: string(name='ChainId'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId'),
      modifiedTime?: long(name='ModifiedTime'),
      name?: string(name='Name'),
      scopeId?: string(name='ScopeId'),
      scopeType?: string(name='ScopeType'),
    }
  ](name='Chains'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListChainResponse = {
  headers: map[string]string(name='headers'),
  body: ListChainResponseBody(name='body'),
}

async function listChain(request: ListChainRequest): ListChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChain', 'POST', '/', 'json', false, 'json', request);
}

model ListChainInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
}

model ListChainInstanceResponseBody = {
  chainInstances?: [ 
    {
      chain?: {
        chainId?: string(name='ChainId'),
        chainName?: string(name='ChainName'),
        version?: long(name='Version'),
      }(name='Chain'),
      chainInstanceId?: string(name='ChainInstanceId'),
      endTime?: long(name='EndTime'),
      repoName?: string(name='RepoName'),
      repoNamespaceName?: string(name='RepoNamespaceName'),
      result?: string(name='Result'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='ChainInstances'),
  code?: string(name='Code'),
  instanceId?: string(name='InstanceId'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListChainInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListChainInstanceResponseBody(name='body'),
}

async function listChainInstance(request: ListChainInstanceRequest): ListChainInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChainInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListChartNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName?: string(name='NamespaceName', position='Query'),
  namespaceStatus?: string(name='NamespaceStatus', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListChartNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  namespaces?: [ 
    {
      autoCreateRepo?: boolean(name='AutoCreateRepo'),
      defaultRepoType?: string(name='DefaultRepoType'),
      instanceId?: string(name='InstanceId'),
      namespaceId?: string(name='NamespaceId'),
      namespaceName?: string(name='NamespaceName'),
      namespaceStatus?: string(name='NamespaceStatus'),
    }
  ](name='Namespaces'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListChartNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartNamespaceResponseBody(name='body'),
}

async function listChartNamespace(request: ListChartNamespaceRequest): ListChartNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChartNamespace', 'POST', '/', 'json', false, 'json', request);
}

model ListChartReleaseRequest {
  chart?: string(name='Chart', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
}

model ListChartReleaseResponseBody = {
  chartReleases?: [ 
    {
      chart?: string(name='Chart'),
      instanceId?: string(name='InstanceId'),
      modifiedTime?: long(name='ModifiedTime'),
      release?: string(name='Release'),
      repoId?: string(name='RepoId'),
      size?: string(name='Size'),
      status?: string(name='Status'),
    }
  ](name='ChartReleases'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListChartReleaseResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartReleaseResponseBody(name='body'),
}

async function listChartRelease(request: ListChartReleaseRequest): ListChartReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChartRelease', 'POST', '/', 'json', false, 'json', request);
}

model ListChartRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
  repoStatus?: string(name='RepoStatus', position='Query'),
}

model ListChartRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  repositories?: [ 
    {
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      modifiedTime?: long(name='ModifiedTime'),
      repoId?: string(name='RepoId'),
      repoName?: string(name='RepoName'),
      repoNamespaceName?: string(name='RepoNamespaceName'),
      repoStatus?: string(name='RepoStatus'),
      repoType?: string(name='RepoType'),
      summary?: string(name='Summary'),
    }
  ](name='Repositories'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListChartRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartRepositoryResponseBody(name='body'),
}

async function listChartRepository(request: ListChartRepositoryRequest): ListChartRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChartRepository', 'POST', '/', 'json', false, 'json', request);
}

model ListEventCenterRecordRequest {
  eventType?: string(name='EventType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  ruleId?: string(name='RuleId', position='Query'),
}

model ListEventCenterRecordResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  records?: [ 
    {
      createTime?: long(name='CreateTime'),
      eventChannel?: string(name='EventChannel'),
      eventNotifyId?: string(name='EventNotifyId'),
      eventNotifyMethod?: string(name='EventNotifyMethod'),
      eventType?: string(name='EventType'),
      instanceId?: string(name='InstanceId'),
      namespace?: string(name='Namespace'),
      recordId?: string(name='RecordId'),
      repoName?: string(name='RepoName'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      tag?: string(name='Tag'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListEventCenterRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventCenterRecordResponseBody(name='body'),
}

async function listEventCenterRecord(request: ListEventCenterRecordRequest): ListEventCenterRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventCenterRecord', 'GET', '/', 'json', false, 'json', request);
}

model ListEventCenterRuleNameRequest {
  instanceId?: string(name='InstanceId', position='Query'),
}

model ListEventCenterRuleNameResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId', description='Id of the request'),
  ruleNames?: [ 
    {
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
    }
  ](name='RuleNames'),
}

model ListEventCenterRuleNameResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventCenterRuleNameResponseBody(name='body'),
}

async function listEventCenterRuleName(request: ListEventCenterRuleNameRequest): ListEventCenterRuleNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventCenterRuleName', 'GET', '/', 'json', false, 'json', request);
}

model ListInstanceRequest {
  instanceName?: string(name='InstanceName', position='Query'),
  instanceStatus?: string(name='InstanceStatus', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListInstanceResponseBody = {
  code?: string(name='Code'),
  instances?: [ 
    {
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceSpecification?: string(name='InstanceSpecification'),
      instanceStatus?: string(name='InstanceStatus'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='Instances'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceEndpointRequest {
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListInstanceEndpointResponseBody = {
  code?: string(name='Code'),
  endpoints?: [ 
    {
      aclEnable?: boolean(name='AclEnable'),
      aclEntries?: [ 
        {
          entry?: string(name='Entry'),
        }
      ](name='AclEntries'),
      domains?: [ 
        {
          domain?: string(name='Domain'),
          type?: string(name='Type'),
        }
      ](name='Domains'),
      enable?: boolean(name='Enable'),
      endpointType?: string(name='EndpointType'),
      linkedVpcs?: [ 
        {
          vpcId?: string(name='VpcId'),
        }
      ](name='LinkedVpcs'),
      status?: string(name='Status'),
    }
  ](name='Endpoints'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model ListInstanceEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceEndpointResponseBody(name='body'),
}

async function listInstanceEndpoint(request: ListInstanceEndpointRequest): ListInstanceEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceRegionRequest {
  lang?: string(name='Lang', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListInstanceRegionResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListInstanceRegionResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceRegionResponseBody(name='body'),
}

async function listInstanceRegion(request: ListInstanceRegionRequest): ListInstanceRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceRegion', 'POST', '/', 'json', false, 'json', request);
}

model ListNamespaceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName?: string(name='NamespaceName', position='Query'),
  namespaceStatus?: string(name='NamespaceStatus', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  namespaces?: [ 
    {
      autoCreateRepo?: boolean(name='AutoCreateRepo'),
      defaultRepoType?: string(name='DefaultRepoType'),
      instanceId?: string(name='InstanceId'),
      namespaceId?: string(name='NamespaceId'),
      namespaceName?: string(name='NamespaceName'),
      namespaceStatus?: string(name='NamespaceStatus'),
    }
  ](name='Namespaces'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: ListNamespaceResponseBody(name='body'),
}

async function listNamespace(request: ListNamespaceRequest): ListNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNamespace', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoBuildRecordRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model ListRepoBuildRecordResponseBody = {
  buildRecords?: [ 
    {
      buildRecordId?: string(name='BuildRecordId'),
      buildStatus?: string(name='BuildStatus'),
      endTime?: string(name='EndTime'),
      image?: {
        imageTag?: string(name='ImageTag'),
        repoId?: string(name='RepoId'),
        repoName?: string(name='RepoName'),
        repoNamespaceName?: string(name='RepoNamespaceName'),
      }(name='Image'),
      startTime?: string(name='StartTime'),
    }
  ](name='BuildRecords'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListRepoBuildRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoBuildRecordResponseBody(name='body'),
}

async function listRepoBuildRecord(request: ListRepoBuildRecordRequest): ListRepoBuildRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoBuildRecord', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoBuildRecordLogRequest {
  buildRecordId: string(name='BuildRecordId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId?: string(name='RepoId', position='Query'),
}

model ListRepoBuildRecordLogResponseBody = {
  buildRecordLogs?: [ 
    {
      buildStage?: string(name='BuildStage'),
      lineNumber?: int32(name='LineNumber'),
      message?: string(name='Message'),
    }
  ](name='BuildRecordLogs'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListRepoBuildRecordLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoBuildRecordLogResponseBody(name='body'),
}

async function listRepoBuildRecordLog(request: ListRepoBuildRecordLogRequest): ListRepoBuildRecordLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoBuildRecordLog', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoBuildRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model ListRepoBuildRuleResponseBody = {
  buildRules?: [ 
    {
      buildArgs?: [ string ](name='BuildArgs'),
      buildRuleId?: string(name='BuildRuleId'),
      dockerfileLocation?: string(name='DockerfileLocation'),
      dockerfileName?: string(name='DockerfileName'),
      imageTag?: string(name='ImageTag'),
      platforms?: [ string ](name='Platforms'),
      pushName?: string(name='PushName'),
      pushType?: string(name='PushType'),
    }
  ](name='BuildRules'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoBuildRuleResponseBody(name='body'),
}

async function listRepoBuildRule(request: ListRepoBuildRuleRequest): ListRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoBuildRule', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoSyncRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName?: string(name='NamespaceName', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', position='Query'),
  targetRegionId?: string(name='TargetRegionId', position='Query'),
}

model ListRepoSyncRuleResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  syncRules?: [ 
    {
      createTime?: long(name='CreateTime'),
      crossUser?: boolean(name='CrossUser'),
      localInstanceId?: string(name='LocalInstanceId'),
      localNamespaceName?: string(name='LocalNamespaceName'),
      localRegionId?: string(name='LocalRegionId'),
      localRepoName?: string(name='LocalRepoName'),
      modifiedTime?: long(name='ModifiedTime'),
      syncDirection?: string(name='SyncDirection'),
      syncRuleId?: string(name='SyncRuleId'),
      syncRuleName?: string(name='SyncRuleName'),
      syncScope?: string(name='SyncScope'),
      syncTrigger?: string(name='SyncTrigger'),
      tagFilter?: string(name='TagFilter'),
      targetInstanceId?: string(name='TargetInstanceId'),
      targetNamespaceName?: string(name='TargetNamespaceName'),
      targetRegionId?: string(name='TargetRegionId'),
      targetRepoName?: string(name='TargetRepoName'),
    }
  ](name='SyncRules'),
  totalCount?: int32(name='TotalCount'),
}

model ListRepoSyncRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoSyncRuleResponseBody(name='body'),
}

async function listRepoSyncRule(request: ListRepoSyncRuleRequest): ListRepoSyncRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoSyncRule', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoSyncTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
  syncRecordId?: string(name='SyncRecordId', position='Query'),
  tag?: string(name='Tag', position='Query'),
}

model ListRepoSyncTaskResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  syncTasks?: [ 
    {
      createTime?: long(name='CreateTime'),
      crossUser?: boolean(name='CrossUser'),
      imageFrom?: {
        imageTag?: string(name='ImageTag'),
        instanceId?: string(name='InstanceId'),
        regionId?: string(name='RegionId'),
        repoName?: string(name='RepoName'),
        repoNamespaceName?: string(name='RepoNamespaceName'),
      }(name='ImageFrom'),
      imageTo?: {
        imageTag?: string(name='ImageTag'),
        instanceId?: string(name='InstanceId'),
        regionId?: string(name='RegionId'),
        repoName?: string(name='RepoName'),
        repoNamespaceName?: string(name='RepoNamespaceName'),
      }(name='ImageTo'),
      modifedTime?: long(name='ModifedTime'),
      syncBatchTaskId?: string(name='SyncBatchTaskId'),
      syncRuleId?: string(name='SyncRuleId'),
      syncTaskId?: string(name='SyncTaskId'),
      syncTransAccelerate?: boolean(name='SyncTransAccelerate'),
      taskStatus?: string(name='TaskStatus'),
      taskTrigger?: string(name='TaskTrigger'),
    }
  ](name='SyncTasks'),
  totalCount?: string(name='TotalCount'),
}

model ListRepoSyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoSyncTaskResponseBody(name='body'),
}

async function listRepoSyncTask(request: ListRepoSyncTaskRequest): ListRepoSyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoSyncTask', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoTagRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model ListRepoTagResponseBody = {
  code?: string(name='Code'),
  images?: [ 
    {
      digest?: string(name='Digest'),
      imageCreate?: string(name='ImageCreate'),
      imageId?: string(name='ImageId'),
      imageSize?: long(name='ImageSize'),
      imageUpdate?: string(name='ImageUpdate'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
    }
  ](name='Images'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListRepoTagResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoTagResponseBody(name='body'),
}

async function listRepoTag(request: ListRepoTagRequest): ListRepoTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoTag', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoTagScanResultRequest {
  digest?: string(name='Digest', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId?: string(name='RepoId', position='Query'),
  scanTaskId?: string(name='ScanTaskId', position='Query'),
  severity?: string(name='Severity', position='Query'),
  tag?: string(name='Tag', position='Query'),
}

model ListRepoTagScanResultResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulnerabilities?: [ 
    {
      addedBy?: string(name='AddedBy'),
      cveLink?: string(name='CveLink'),
      cveName?: string(name='CveName'),
      description?: string(name='Description'),
      feature?: string(name='Feature'),
      fixCmd?: string(name='FixCmd'),
      severity?: string(name='Severity'),
      version?: string(name='Version'),
      versionFixed?: string(name='VersionFixed'),
      versionFormat?: string(name='VersionFormat'),
    }
  ](name='Vulnerabilities'),
}

model ListRepoTagScanResultResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoTagScanResultResponseBody(name='body'),
}

async function listRepoTagScanResult(request: ListRepoTagScanResultRequest): ListRepoTagScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoTagScanResult', 'POST', '/', 'json', false, 'json', request);
}

model ListRepoTriggerRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model ListRepoTriggerResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  triggers?: [ 
    {
      repoEvent?: string(name='RepoEvent'),
      triggerId?: string(name='TriggerId'),
      triggerName?: string(name='TriggerName'),
      triggerTag?: string(name='TriggerTag'),
      triggerType?: string(name='TriggerType'),
      triggerUrl?: string(name='TriggerUrl'),
    }
  ](name='Triggers'),
}

model ListRepoTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepoTriggerResponseBody(name='body'),
}

async function listRepoTrigger(request: ListRepoTriggerRequest): ListRepoTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepoTrigger', 'POST', '/', 'json', false, 'json', request);
}

model ListRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespaceName?: string(name='RepoNamespaceName', position='Query'),
  repoStatus?: string(name='RepoStatus', position='Query'),
}

model ListRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  repositories?: [ 
    {
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      modifiedTime?: long(name='ModifiedTime'),
      repoBuildType?: string(name='RepoBuildType'),
      repoId?: string(name='RepoId'),
      repoName?: string(name='RepoName'),
      repoNamespaceName?: string(name='RepoNamespaceName'),
      repoStatus?: string(name='RepoStatus'),
      repoType?: string(name='RepoType'),
      summary?: string(name='Summary'),
      tagImmutability?: boolean(name='TagImmutability'),
    }
  ](name='Repositories'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryResponseBody(name='body'),
}

async function listRepository(request: ListRepositoryRequest): ListRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRepository', 'POST', '/', 'json', false, 'json', request);
}

model ResetLoginPasswordRequest {
  instanceId: string(name='InstanceId', position='Query'),
  password: string(name='Password', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ResetLoginPasswordResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model ResetLoginPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetLoginPasswordResponseBody(name='body'),
}

async function resetLoginPassword(request: ResetLoginPasswordRequest): ResetLoginPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetLoginPassword', 'POST', '/', 'json', false, 'json', request);
}

model RetrySyncTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  syncTaskId: string(name='SyncTaskId', position='Query'),
}

model RetrySyncTaskResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  syncTaskId?: string(name='SyncTaskId'),
}

model RetrySyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RetrySyncTaskResponseBody(name='body'),
}

async function retrySyncTask(request: RetrySyncTaskRequest): RetrySyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetrySyncTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChainRequest {
  chainConfig: string(name='ChainConfig', position='Query'),
  chainId: string(name='ChainId', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model UpdateChainResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateChainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateChainResponseBody(name='body'),
}

async function updateChain(request: UpdateChainRequest): UpdateChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChartNamespaceRequest {
  autoCreateRepo?: boolean(name='AutoCreateRepo', position='Query'),
  defaultRepoType?: string(name='DefaultRepoType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model UpdateChartNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateChartNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateChartNamespaceResponseBody(name='body'),
}

async function updateChartNamespace(request: UpdateChartNamespaceRequest): UpdateChartNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChartNamespace', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChartRepositoryRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoName: string(name='RepoName', position='Query'),
  repoNamespaceName: string(name='RepoNamespaceName', position='Query'),
  repoType?: string(name='RepoType', position='Query'),
  summary?: string(name='Summary', position='Query'),
}

model UpdateChartRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateChartRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateChartRepositoryResponseBody(name='body'),
}

async function updateChartRepository(request: UpdateChartRepositoryRequest): UpdateChartRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChartRepository', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEventCenterRuleRequest {
  eventChannel?: string(name='EventChannel', position='Query'),
  eventConfig?: string(name='EventConfig', position='Query'),
  eventScope?: string(name='EventScope', position='Query'),
  eventType?: string(name='EventType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  namespaces?: [ string ](name='Namespaces', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  repoNames?: [ string ](name='RepoNames', position='Query'),
  repoTagFilterPattern?: string(name='RepoTagFilterPattern', position='Query'),
  ruleId?: string(name='RuleId', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
}

model UpdateEventCenterRuleResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request'),
  ruleId?: string(name='RuleId'),
}

model UpdateEventCenterRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEventCenterRuleResponseBody(name='body'),
}

async function updateEventCenterRule(request: UpdateEventCenterRuleRequest): UpdateEventCenterRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventCenterRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceEndpointStatusRequest {
  enable: boolean(name='Enable', position='Query'),
  endpointType: string(name='EndpointType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model UpdateInstanceEndpointStatusResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateInstanceEndpointStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceEndpointStatusResponseBody(name='body'),
}

async function updateInstanceEndpointStatus(request: UpdateInstanceEndpointStatusRequest): UpdateInstanceEndpointStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceEndpointStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNamespaceRequest {
  autoCreateRepo?: boolean(name='AutoCreateRepo', position='Query'),
  defaultRepoType?: string(name='DefaultRepoType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model UpdateNamespaceResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNamespaceResponseBody(name='body'),
}

async function updateNamespace(request: UpdateNamespaceRequest): UpdateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNamespace', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRepoBuildRuleRequest {
  buildRuleId: string(name='BuildRuleId', position='Query'),
  dockerfileLocation?: string(name='DockerfileLocation', position='Query'),
  dockerfileName?: string(name='DockerfileName', position='Query'),
  imageTag?: string(name='ImageTag', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  platforms?: [ string ](name='Platforms', position='Query'),
  pushName?: string(name='PushName', position='Query'),
  pushType?: string(name='PushType', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model UpdateRepoBuildRuleResponseBody = {
  buildRuleId?: string(name='BuildRuleId'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepoBuildRuleResponseBody(name='body'),
}

async function updateRepoBuildRule(request: UpdateRepoBuildRuleRequest): UpdateRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRepoBuildRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRepoSourceCodeRepoRequest {
  autoBuild?: string(name='AutoBuild', position='Query'),
  codeRepoId?: string(name='CodeRepoId', position='Query'),
  codeRepoName: string(name='CodeRepoName', position='Query'),
  codeRepoNamespaceName: string(name='CodeRepoNamespaceName', position='Query'),
  codeRepoType: string(name='CodeRepoType', position='Query'),
  disableCacheBuild?: string(name='DisableCacheBuild', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  overseaBuild?: string(name='OverseaBuild', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
}

model UpdateRepoSourceCodeRepoResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateRepoSourceCodeRepoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepoSourceCodeRepoResponseBody(name='body'),
}

async function updateRepoSourceCodeRepo(request: UpdateRepoSourceCodeRepoRequest): UpdateRepoSourceCodeRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRepoSourceCodeRepo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRepoTriggerRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  triggerId: string(name='TriggerId', position='Query'),
  triggerName?: string(name='TriggerName', position='Query'),
  triggerTag?: string(name='TriggerTag', position='Query'),
  triggerType?: string(name='TriggerType', position='Query'),
  triggerUrl?: string(name='TriggerUrl', position='Query'),
}

model UpdateRepoTriggerResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateRepoTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepoTriggerResponseBody(name='body'),
}

async function updateRepoTrigger(request: UpdateRepoTriggerRequest): UpdateRepoTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRepoTrigger', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRepositoryRequest {
  detail?: string(name='Detail', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  repoId: string(name='RepoId', position='Query'),
  repoType: string(name='RepoType', position='Query'),
  summary: string(name='Summary', position='Query'),
  tagImmutability?: boolean(name='TagImmutability', position='Query'),
}

model UpdateRepositoryResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepositoryResponseBody(name='body'),
}

async function updateRepository(request: UpdateRepositoryRequest): UpdateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRepository', 'POST', '/', 'json', false, 'json', request);
}

